BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsSkinning(uint64_t a1, unint64_t a2, unint64_t a3)
{
  re::MeshDeformationAsset *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v11;
  NSObject *v12;
  uint8_t buf[16];
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;

  v18 = *MEMORY[0x263EF8340];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x22A83AADBD1) {
    return 0;
  }
  v9 = (char *)v8[1];
  return v9 == "Skinning" || strcmp(v9, "Skinning") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderSkinningGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x22A83AADBD1 || (v10 = (char *)v9[1], v10 != "Skinning") && strcmp(v10, "Skinning"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSkinningSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x22A83AADBD1 || (v12 = (char *)v11[1], v12 != "Skinning") && strcmp(v12, "Skinning"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

BOOL REMeshDeformationDefinitionAssetBuilderSkinningGetEnableSkinningVertexFrame(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x22A83AADBD1 || (uint64_t v10 = (char *)v9[1], v10 != "Skinning") && strcmp(v10, "Skinning"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v12 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(unsigned char *)(*(void *)(v8 + 40 * a3 + 32) + 1) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSkinningSetEnableSkinningVertexFrame(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x22A83AADBD1 || (v12 = (char *)v11[1], v12 != "Skinning") && strcmp(v12, "Skinning"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Not a skinning deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    v14 = "Unexpected skinning deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  *(unsigned char *)(*(void *)(v10 + 40 * a3 + 32) + 1) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddRenormalization(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(unsigned char **)&v11[16] = 0;
      *(void *)buf = 0xABCEC87F22A13454;
      *(void *)&buf[8] = "Renormalization";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsRenormalization(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x55E7643F91509A2ALL) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "Renormalization" || strcmp(v9, "Renormalization") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderRenormalizationGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x55E7643F91509A2ALL
    || (uint64_t v10 = (char *)v9[1], v10 != "Renormalization") && strcmp(v10, "Renormalization"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a renormalization deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected renormalization deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderRenormalizationSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x55E7643F91509A2ALL
    || (__int16 v12 = (char *)v11[1], v12 != "Renormalization") && strcmp(v12, "Renormalization"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not a renormalization deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected renormalization deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddTension(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(unsigned char **)&v11[16] = 0;
      *(void *)buf = 0x241C51C064;
      *(void *)&buf[8] = "Tension";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsTension(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x120E28E032) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "Tension" || strcmp(v9, "Tension") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderTensionGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x120E28E032 || (uint64_t v10 = (char *)v9[1], v10 != "Tension") && strcmp(v10, "Tension"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a tension deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected tension deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderTensionSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x120E28E032 || (__int16 v12 = (char *)v11[1], v12 != "Tension") && strcmp(v12, "Tension"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not a tension deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected tension deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddOffsets(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(unsigned char **)&v11[16] = 0;
      *(void *)buf = 0x70EBDC9CD6B5D4E4;
      *(void *)&buf[8] = "OffsetsDeformer";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsOffsets(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x3875EE4E6B5AEA72) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "OffsetsDeformer" || strcmp(v9, "OffsetsDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderOffsetsGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x3875EE4E6B5AEA72
    || (uint64_t v10 = (char *)v9[1], v10 != "OffsetsDeformer") && strcmp(v10, "OffsetsDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not an offsets deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected offsets deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderOffsetsSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x3875EE4E6B5AEA72
    || (__int16 v12 = (char *)v11[1], v12 != "OffsetsDeformer") && strcmp(v12, "OffsetsDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not an offsets deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected offsets deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddSmooth(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(unsigned char **)&v11[16] = 0;
      *(void *)buf = 0x5ADE39698BF7F040;
      *(void *)&buf[8] = "SmoothDeformer";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsSmooth(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2D6F1CB4C5FBF820) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "SmoothDeformer" || strcmp(v9, "SmoothDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderSmoothGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2D6F1CB4C5FBF820
    || (uint64_t v10 = (char *)v9[1], v10 != "SmoothDeformer") && strcmp(v10, "SmoothDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a smooth deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected smooth deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderSmoothSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x2D6F1CB4C5FBF820
    || (__int16 v12 = (char *)v11[1], v12 != "SmoothDeformer") && strcmp(v12, "SmoothDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not an smooth deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected smooth deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddBoundingBoxCalculation(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(unsigned char **)&v11[16] = 0;
      *(void *)buf = 0x32458CCC0A585AB0;
      *(void *)&buf[8] = "Bounding Box Calculation";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsBoundingBoxCalculation(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x1922C666052C2D58) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "Bounding Box Calculation" || strcmp(v9, "Bounding Box Calculation") == 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddCustomDeformer(uint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 134217984;
      *(void *)((char *)&__dst + 4) = a3;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", (uint8_t *)&__dst, 0xCu);
    }

    return -1;
  }
  size_t v6 = strlen(a2);
  if (v6 - 63 <= 0xFFFFFFFFFFFFFFBFLL)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 134217984;
      *(void *)((char *)&__dst + 4) = 64;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid custom deformer name, maximum length is %zu.", (uint8_t *)&__dst, 0xCu);
    }

    return -1;
  }
  size_t v11 = v6;
  unint64_t v13 = *((void *)v12 + 2);
  if (v13 <= a3)
  {
    uint64_t v20 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long __dst = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(void *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    *(_WORD *)&v23[18] = 2048;
    *(void *)&v23[20] = a3;
    *(_WORD *)&v23[28] = 2048;
    *(void *)&v23[30] = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v14 = (void *)(*((void *)v12 + 4) + 40 * a3);
  if (v11 <= 0x3F) {
    size_t v15 = 64 - v11;
  }
  else {
    size_t v15 = 0;
  }
  bzero((char *)&__dst + v11, v15);
  long long v16 = (_anonymous_namespace_ *)memcpy(&__dst, a2, v11);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v17 = v22;
  *uint64_t v22 = __dst;
  v17[1] = v25;
  v17[2] = v26;
  v17[3] = v27;
  *(void *)v23 = 0xEAA1CBFA3D5AC124;
  *(void *)&v23[8] = "Custom Deformers";
  uint64_t v18 = v20;
  uint64_t v19 = v21;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  *(void *)&v23[16] = v18;
  *(void *)&v23[24] = v19;
  *(void *)&v23[32] = v17;
  uint64_t v22 = 0;
  re::DynamicArray<re::DeformationDefinition>::add(v14, (uint64_t *)v23);
  if (*(void *)&v23[16])
  {
    if (*(void *)&v23[24])
    {
      (*(void (**)(void))(**(void **)&v23[16] + 40))();
      *(void *)&v23[24] = 0;
      *(void *)&v23[32] = 0;
    }
    *(void *)&v23[16] = 0;
  }
  re::StringID::destroyString((re::StringID *)v23);
  uint64_t v9 = v14[2] - 1;
  if (v20 && v21) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  return v9;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsCustomDeformer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      size_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x7550E5FD1EAD6092) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "Custom Deformers" || strcmp(v9, "Custom Deformers") == 0;
}

const char *REMeshDeformationDefinitionAssetBuilderDeformerIsCustomNamedDeformer(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4)
{
  result = (const char *)REMeshDeformationDefinitionAssetBuilderDeformerCustomDeformerName(a1, a3, a4);
  if (result) {
    return (const char *)(strcmp(result, a2) == 0);
  }
  return result;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformerCustomDeformerName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      __int16 v12 = (id)CoreRELog::log;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_25:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x7550E5FD1EAD6092) {
    return 0;
  }
  uint64_t v10 = (const char *)v9[1];
  if (v10 != "Custom Deformers")
  {
    if (strcmp(v10, "Custom Deformers")) {
      return 0;
    }
  }
  if (*(void *)(v8 + 40 * a3 + 24) == 64) {
    return *(void *)(v8 + 40 * a3 + 32);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid custom deformation options: %zu";
LABEL_23:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
  }
LABEL_16:

  return 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetAssignedMeshCount(uint64_t a1)
{
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshDeformationStackIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(void *)(v4 + 56) > a2) {
      return *(void *)(*(void *)(v4 + 72) + 48 * a2 + 40);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_9:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return -1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierType(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(void *)(v4 + 56) > a2) {
      return *(unsigned __int8 *)(*(void *)(v4 + 72) + 48 * a2);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_9:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierName(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(void *)(v4 + 56) > a2)
    {
      CFStringRef v5 = CFStringCreateWithCString(0, *(const char **)(*(void *)(v4 + 72) + 48 * a2 + 16), 0x8000100u);
      return CFAutorelease(v5);
    }
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_11:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderAssignedMeshIdentifierPartName(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 56) > a2)
  {
    if (*(void *)(v4 + 56) > a2)
    {
      CFStringRef v5 = CFStringCreateWithCString(0, *(const char **)(*(void *)(v4 + 72) + 48 * a2 + 32), 0x8000100u);
      return CFAutorelease(v5);
    }
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_11:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
  }

  return 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderAssignedMeshRemove(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v3 = (uint64_t *)(a1 + 24);
  if (v4 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 134217984;
      unint64_t v9 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    re::DynamicArray<re::MeshDeformationIndex>::removeStableAt((uint64_t)v5 + 40, a2);
  }
  return v4 > a2;
}

void re::DynamicArray<re::MeshDeformationIndex>::removeStableAt(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    memset(v17, 0, sizeof(v17));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 + 48 * a2 + 48 != v4 + 48 * v2)
    {
      uint64_t v5 = 48 * a2;
      uint64_t v6 = 48 * v2 - 48;
      do
      {
        uint64_t v7 = v4 + v5;
        *(unsigned char *)uint64_t v7 = *(unsigned char *)(v4 + v5 + 48);
        uint64_t v8 = *(void *)(v4 + v5 + 56);
        uint64_t v9 = *(void *)(v4 + v5 + 64);
        uint64_t v10 = *(void *)(v4 + v5 + 16);
        unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v4 + v5 + 8) & 1;
        *(void *)(v7 + + 56) = 0;
        *(void *)(v7 + 64) = "";
        *(void *)(v7 + 16) = v9;
        *(void *)&v17[0] = v11;
        *((void *)&v17[0] + 1) = v10;
        *(void *)(v7 + 8) = v8;
        re::StringID::destroyString((re::StringID *)v17);
        uint64_t v12 = *(void *)(v4 + v5 + 72);
        uint64_t v13 = *(void *)(v4 + v5 + 80);
        *(void *)(v7 + 72) = 0;
        *(void *)(v7 + 80) = "";
        uint64_t v14 = *(void *)(v4 + v5 + 32);
        unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v4 + v5 + 24) & 1;
        *(void *)(v7 + 32) = v13;
        *(void *)&v17[0] = v15;
        *((void *)&v17[0] + 1) = v14;
        *(void *)(v7 + 24) = v12;
        re::StringID::destroyString((re::StringID *)v17);
        *(void *)(v7 + 40) = *(void *)(v7 + 88);
        v4 += 48;
        v6 -= 48;
      }
      while (v5 != v6);
      unint64_t v2 = *(void *)(a1 + 16);
    }
  }
  uint64_t v16 = *(void *)(a1 + 32) + 48 * v2;
  re::StringID::destroyString((re::StringID *)(v16 - 24));
  re::StringID::destroyString((re::StringID *)(v16 - 40));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignedMeshMove(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    v42 = (id)CoreRELog::log;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a2;
      _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, "Invalid assigned mesh index: %zu", buf, 0xCu);
    }

    return 0;
  }
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_19:
      v43 = (id)CoreRELog::log;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a3;
        _os_log_error_impl(&dword_233120000, v43, OS_LOG_TYPE_ERROR, "Invalid new assigned mesh index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_26:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_19;
  }
  unint64_t v7 = *((void *)v6 + 7);
  if (v7 <= a2)
  {
    *(void *)v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)buf = 0u;
    long long v60 = 0u;
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(void *)v50 = "operator[]";
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)&v50[10] = 789;
    *(_WORD *)&v50[14] = 2048;
    *(void *)&v50[16] = a2;
    *(_WORD *)&v50[24] = 2048;
    *(void *)&v50[26] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = *((void *)v6 + 9) + 48 * a2;
  char v9 = *(unsigned char *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v49 = *(void *)(v8 + 16);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = "";
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = "";
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v51 = v13;
  re::DynamicArray<re::MeshDeformationIndex>::removeStableAt((uint64_t)v14 + 40, a2);
  unint64_t v16 = *((void *)v15 + 7);
  if (v16 + 1 <= a3)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)buf = 0u;
    long long v60 = 0u;
    unint64_t v45 = v16 + 1;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v52 = 136315906;
    *(void *)&v52[4] = "insert";
    __int16 v53 = 1024;
    int v54 = 887;
    __int16 v55 = 2048;
    unint64_t v56 = a3;
    __int16 v57 = 2048;
    unint64_t v58 = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  long long v17 = v15;
  uint64_t v48 = v12;
  if (v16 >= *((void *)v15 + 6))
  {
    re::DynamicArray<re::MeshDeformationIndex>::growCapacity((void *)v15 + 5, v16 + 1);
    unint64_t v16 = *((void *)v17 + 7);
  }
  uint64_t v18 = *((void *)v17 + 9);
  uint64_t v19 = v18 + 48 * v16;
  if (v16 <= a3)
  {
    *(unsigned char *)uint64_t v19 = v9;
    *(void *)(v19 + 8) = v10;
    *(void *)(v19 + 16) = v49;
    *(void *)&v50[4] = 0;
    *(void *)&v50[12] = "";
    *(void *)(v19 + 24) = v11;
    *(void *)(v19 + 32) = v12;
    *(void *)&v50[20] = 0;
    *(void *)&v50[28] = "";
    v41 = (void *)(v18 + 48 * v16 + 40);
  }
  else
  {
    unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v21 = v18 + 48 * v16;
    *(unsigned char *)uint64_t v19 = *(unsigned char *)(v21 - 48);
    *(void *)(v19 + 8) = *(void *)(v21 - 40);
    uint64_t v22 = *(void *)(v21 - 8);
    *(void *)(v19 + 32) = *(void *)(v21 - 16);
    unint64_t v47 = v11 & 0xFFFFFFFFFFFFFFFELL;
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(v21 - 32);
    *(void *)(v21 - 40) = 0;
    *(void *)(v21 - 32) = "";
    *(void *)(v21 - 24) = 0;
    *(void *)(v21 - 16) = "";
    *(void *)(v21 + 40) = v22;
    uint64_t v23 = *((void *)v17 + 9);
    uint64_t v24 = *((void *)v17 + 7);
    if (v23 + 48 * v24 - 48 != v23 + 48 * a3)
    {
      uint64_t v46 = v11;
      uint64_t v25 = 48 * v24;
      uint64_t v26 = 48 * a3 + 48;
      do
      {
        uint64_t v27 = v23 + v25;
        *(unsigned char *)(v27 - 48) = *(unsigned char *)(v23 + v25 - 96);
        uint64_t v28 = *(void *)(v23 + v25 - 88);
        uint64_t v29 = *(void *)(v23 + v25 - 80);
        uint64_t v30 = *(void *)(v23 + v25 - 32);
        unint64_t v31 = v28 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v23 + v25 - 40) & 1;
        *(void *)(v27 - 88) = 0;
        *(void *)(v27 - 80) = "";
        *(void *)(v27 - 32) = v29;
        *(void *)buf = v31;
        *(void *)&buf[8] = v30;
        *(void *)(v27 - 40) = v28;
        re::StringID::destroyString((re::StringID *)buf);
        uint64_t v32 = *(void *)(v23 + v25 - 72);
        uint64_t v33 = *(void *)(v23 + v25 - 64);
        *(void *)(v27 - 72) = 0;
        *(void *)(v27 - 64) = "";
        uint64_t v34 = *(void *)(v23 + v25 - 16);
        unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v23 + v25 - 24) & 1;
        *(void *)(v27 - 16) = v33;
        *(void *)buf = v35;
        *(void *)&buf[8] = v34;
        *(void *)(v27 - 24) = v32;
        re::StringID::destroyString((re::StringID *)buf);
        *(void *)(v27 - 8) = *(void *)(v27 - 56);
        v23 -= 48;
        v26 += 48;
      }
      while (v25 != v26);
      uint64_t v23 = *((void *)v17 + 9);
      uint64_t v11 = v46;
      unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFFELL;
    }
    uint64_t v36 = v23 + 48 * a3;
    *(unsigned char *)uint64_t v36 = v9;
    *(void *)&v50[4] = 0;
    *(void *)&v50[12] = "";
    uint64_t v37 = *(void *)(v36 + 16);
    uint64_t v38 = *(void *)(v36 + 8) & 1 | v20;
    *(void *)(v36 + 16) = v49;
    *(void *)buf = v38;
    *(void *)&buf[8] = v37;
    *(void *)(v36 + 8) = v10;
    re::StringID::destroyString((re::StringID *)buf);
    *(void *)&v50[20] = 0;
    *(void *)&v50[28] = "";
    uint64_t v39 = *(void *)(v36 + 32);
    uint64_t v40 = *(void *)(v36 + 24) & 1 | v47;
    *(void *)(v36 + 32) = v48;
    *(void *)buf = v40;
    *(void *)&buf[8] = v39;
    *(void *)(v36 + 24) = v11;
    re::StringID::destroyString((re::StringID *)buf);
    v41 = (void *)(v36 + 40);
  }
  void *v41 = v13;
  ++*((void *)v17 + 7);
  ++*((_DWORD *)v17 + 16);
  re::StringID::destroyString((re::StringID *)&v50[20]);
  re::StringID::destroyString((re::StringID *)&v50[4]);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAssignDeformationStack(uint64_t a1, unint64_t a2, int a3, const char *a4, const char *a5)
{
  v18[4] = *MEMORY[0x263EF8340];
  char v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 134217984;
      *(void *)long long v17 = a2;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack definition index: %zu", (uint8_t *)&v16, 0xCu);
    }

    return 0;
  }
  if ((a3 - 3) <= 0xFFFFFFFD)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 67109120;
      v17[0] = a3;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh identifier type: %u", (uint8_t *)&v16, 8u);
    }

    return 0;
  }
  uint64_t v14 = (void *)((char *)v13 + 40);
  LOBYTE(v16) = a3;
  *(void *)&v17[1] = 0;
  *(void *)&v17[3] = "";
  v18[0] = 0;
  v18[1] = "";
  if (a5)
  {
  }
  v18[2] = a2;
  re::DynamicArray<re::MeshDeformationIndex>::add(v14, (uint64_t)&v16);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)&v17[1]);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreateMeshDeformationDefinitionAsset(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[6];
  if (v3)
  {
    a1[6] = 0;
    uint64_t v5 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)a1);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a2 + 416))(v8, a2, v3, v5, 0, 0, 0);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)(a1 + 3));
  }
  uint64_t v6 = v8[0];
  v8[0] = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddContact(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      *(void *)buf = 0x22F387A552F200A4;
      *(void *)&buf[8] = "ContactDeformer";
      *(void *)char v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddContact::kDefaultDeformerOptions;
      *(void *)&v9[8] = 1;
      *(void *)&long long v16 = 0;
      long long v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (const void **)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)char v9 = 136315906;
    *(void *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    __int16 v10 = 2048;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_13:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsContact(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      unint64_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x1179C3D2A9790052) {
    return 0;
  }
  char v9 = (char *)v8[1];
  return v9 == "ContactDeformer" || strcmp(v9, "ContactDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderContactGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  char v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x1179C3D2A9790052
    || (__int16 v10 = (char *)v9[1], v10 != "ContactDeformer") && strcmp(v10, "ContactDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a contact deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected contact deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderContactSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  unint64_t v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x1179C3D2A9790052
    || (__int16 v12 = (char *)v11[1], v12 != "ContactDeformer") && strcmp(v12, "ContactDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not a contact deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected contact deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddFence(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      *(void *)buf = 0x4425D6C2BB3546C6;
      *(void *)&buf[8] = "FenceDeformer";
      *(void *)uint64_t v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddFence::kDefaultDeformerOptions;
      *(void *)&v9[8] = 257;
      *(void *)&long long v16 = 0;
      long long v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (const void **)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v9 = 136315906;
    *(void *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    __int16 v10 = 2048;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_13:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsFence(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      unint64_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2212EB615D9AA363) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "FenceDeformer" || strcmp(v9, "FenceDeformer") == 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceGetFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2212EB615D9AA363 || (__int16 v10 = (char *)v9[1], v10 != "FenceDeformer") && strcmp(v10, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a fence deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(void *)(v8 + 40 * a3 + 32);
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceSetFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3, char *__s)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (strlen(__s) >= 0x80)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = 128;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Fence ID name is longer than max size of %zu", buf, 0xCu);
    }
  }
  uint64_t v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_18:
      long long v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_35:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_18;
  }
  if (*((void *)v10 + 2) <= a2)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v11 = *((void *)v10 + 4) + 40 * a2;
  if (*(void *)(v11 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Invalid deformer index: %zu";
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(v11 + 32);
  unint64_t v13 = (void *)(v12 + 40 * a3);
  if (*v13 >> 1 != 0x2212EB615D9AA363
    || (long long v14 = (char *)v13[1], v14 != "FenceDeformer") && strcmp(v14, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Not a fence deformer index: %zu";
LABEL_33:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_24:

    return 0;
  }
  if (*(void *)(v12 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_33;
  }
  strlcpy(*(char **)(v12 + 40 * a3 + 32), __s, 0x80uLL);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceGetWaitFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    uint64_t v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2212EB615D9AA363 || (__int16 v10 = (char *)v9[1], v10 != "FenceDeformer") && strcmp(v10, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    uint64_t v12 = "Not a fence deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    uint64_t v12 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return *(void *)(v8 + 40 * a3 + 32) + 128;
}

uint64_t REMeshDeformationDefinitionAssetBuilderFenceSetWaitFenceIDName(uint64_t a1, unint64_t a2, unint64_t a3, char *__s)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (strlen(__s) >= 0x80)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = 128;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Wait fence ID name is longer than max size of %zu", buf, 0xCu);
    }
  }
  uint64_t v9 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_18:
      long long v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_35:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_18;
  }
  if (*((void *)v10 + 2) <= a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v11 = *((void *)v10 + 4) + 40 * a2;
  if (*(void *)(v11 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Invalid deformer index: %zu";
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(v11 + 32);
  unint64_t v13 = (void *)(v12 + 40 * a3);
  if (*v13 >> 1 != 0x2212EB615D9AA363
    || (long long v14 = (char *)v13[1], v14 != "FenceDeformer") && strcmp(v14, "FenceDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Not a fence deformer index: %zu";
LABEL_33:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0xCu);
LABEL_24:

    return 0;
  }
  if (*(void *)(v12 + 40 * a3 + 24) != 257)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v16 = "Unexpected fence deformer options size for deformer index: %zu";
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)(v12 + 40 * a3 + 32);
  *(unsigned char *)(v19 + 2+ 56) = 14;
  strlcpy((char *)(v19 + 128), __s, 0x80uLL);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddWrap(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      *(void *)buf = 0x4005A4B50800FD78;
      *(void *)&buf[8] = "WrapDeformer";
      *(void *)uint64_t v9 = &REMeshDeformationDefinitionAssetBuilderDeformationStackAddWrap::kDefaultDeformerOptions;
      *(void *)&v9[8] = 1;
      *(void *)&long long v16 = 0;
      long long v15 = 0uLL;
      re::FixedArray<unsigned char>::copy(&v15, (const void **)v9);
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      return v6[2] - 1;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v9 = 136315906;
    *(void *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    __int16 v10 = 2048;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_13:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsWrap(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      unint64_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0x2002D25A84007EBCLL) {
    return 0;
  }
  uint64_t v9 = (char *)v8[1];
  return v9 == "WrapDeformer" || strcmp(v9, "WrapDeformer") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderWrapGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0x2002D25A84007EBCLL || (__int16 v10 = (char *)v9[1], v10 != "WrapDeformer") && strcmp(v10, "WrapDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Not a wrap deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    __int16 v12 = "Unexpected wrap deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderWrapSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  unint64_t v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0x2002D25A84007EBCLL || (__int16 v12 = (char *)v11[1], v12 != "WrapDeformer") && strcmp(v12, "WrapDeformer"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Not a wrap deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = a3;
    long long v14 = "Unexpected wrap deformer options size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

BOOL REMeshDeformationDefinitionAssetBuilderWasMutated(uint64_t a1)
{
  return *(void *)(a1 + 48) != 0;
}

_anonymous_namespace_ *anonymous namespace'::MeshDeformationDefinitionAssetBuilder::init(_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *this)
{
  v9[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = (uint64_t *)((char *)this + 24);
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 80, 8);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v7[0] = &unk_26E732670;
  v7[3] = v7;
  uint64_t v8 = v4;
  v9[3] = v9;
  v9[0] = &unk_26E732670;
  std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::operator=[abi:nn180100]((uint64_t *)this + 6, (uint64_t *)&v8);
  std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v8);
  std::__function::__value_func<void ()(re::MeshDeformationAsset *)>::~__value_func[abi:nn180100](v7);
  if (result)
  {
    uint64_t v6 = result;
  }
  return result;
}

uint64_t *std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::MeshDeformationAsset *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  uint64_t v6 = a1 + 1;
  uint64_t v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v6 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      a1[4] = (uint64_t)v6;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
    }
    else
    {
      a1[4] = (uint64_t)v8;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E732670;
  return result;
}

void std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732670;
}

re *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"operator()", 31, *a2);
}

uint64_t std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::init(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target_type()
{
}

void std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26E7326F0;
  return result;
}

void std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7326F0;
}

re *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"operator()", 53, *a2);
}

uint64_t std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1},std::allocator<anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(void)::{lambda(re::MeshDeformationAsset*)#1}>,void ()(re::MeshDeformationAsset*)>::target_type()
{
}

void anonymous namespace'::MeshDeformationDefinitionAssetBuilder::~MeshDeformationDefinitionAssetBuilder(_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *this)
{
  *(void *)this = &unk_26E732770;
  std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 6);
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::MeshDeformationDefinitionAssetBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      result = re::DynamicArray<re::DeformationDefinition>::operator=(a3, v5);
      v5 += 5;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = (unint64_t *)(a3 + 24);
    uint64_t v5 = (uint64_t *)(result + 3);
    do
    {
      *((unsigned char *)v4 - 24) = *((unsigned char *)v5 - 24);
      re::StringID::operator=(v4 - 2, v5 - 2);
      result = re::StringID::operator=(v4, v5);
      v4[2] = v5[2];
      v4 += 6;
      uint64_t v6 = v5 + 3;
      v5 += 6;
    }
    while (v6 != (uint64_t *)a2);
  }
  return result;
}

void REAssetDisableNetworkSyncing(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v1);
  re::AssetHandle::setNetworkSharingMode((uint64_t)v1, 2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v1);
}

uint64_t REAssetSetNetworkSharingMode(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v3 = re::AssetHandle::setNetworkSharingMode((uint64_t)v5, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REAssetIsMemoryAsset(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned __int8 *)(v3[1] + 312);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

BOOL REAssetIsMemoryAssetWithNetworkSyncingEnabled(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  BOOL isMemoryAssetWithNetworkingSyncingEnabled = re::AssetHandle::isMemoryAssetWithNetworkingSyncingEnabled((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return isMemoryAssetWithNetworkingSyncingEnabled;
}

id *_RETestingTextureAssetGetUnderlyingTexture(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = (id *)re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v5);
  if (v1)
  {
    if (*((_DWORD *)v1 + 60)) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = (id *)v1[20];
    }
  }
  unint64_t v2 = v1;
  uint64_t v3 = v2;
  if (v2) {

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

id _RETestingTextureAssetGetUnderlyingLegacyTexture(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v8);
  if (v1 && *(void *)(v1 + 144) && (v3 = *(void *)(v1 + 136), unint64_t v2 = (os_unfair_lock_s **)(v1 + 136), v3))
  {
    re::TextureHandle::unsynchronizedMetalTexture(v2, &v7);
    id v4 = v7;
    uint64_t v5 = v4;
    if (v4) {
  }
    }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v5;
}

uint64_t _RETestingTextureAssetGetPixelFormat(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(int *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v3) + 376);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t _RETestingTextureAssetGetImportReport(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned char *)(re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v3) + 152) & 0x7F;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

CFTypeRef REAssetGetType(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  CFStringRef v1 = CFStringCreateWithCString(0, **(const char ***)(v4[1] + 264), 0x8000100u);
  CFTypeRef v2 = CFAutorelease(v1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetGetAssetId(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  CFStringRef v1 = re::AssetHandle::assetInfo((re::AssetHandle *)v4);
  if (v1[10] == -1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1[10];
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

CFStringRef REAssetCopyDescription(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  re::AssetHandle::getDescription((re::AssetHandle *)v9, a2, (re::DynamicString *)&v6);
  if (v7) {
    uint64_t v3 = *(const char **)&v8[7];
  }
  else {
    uint64_t v3 = v8;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v4;
}

uint64_t REAssetComputeEstimatedMemorySize(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = (re::AssetManager *)re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  uint64_t v4 = re::AssetManager::assetByteSize(v3, (re::AssetHandle *)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REAssetComputeNonSharedMemorySize(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = (re::AssetManager *)re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  uint64_t v4 = re::AssetManager::assetNonSharedDataByteSize(v3, (re::AssetHandle *)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REAssetSerializeToJSON(uint64_t a1, re::FileStreamWriter *a2)
{
  _DWORD v17[5] = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v15);
  if (!v16)
  {
    uint64_t v5 = 0;
    unint64_t v3 = 0;
    goto LABEL_5;
  }
  unint64_t v3 = *(void *)(v16 + 264);
  unsigned int v4 = atomic_load((unsigned int *)(v16 + 704));
  if (v4 != 2)
  {
    uint64_t v5 = v16;
LABEL_5:
    re::AssetHandle::loadNow(v5, 0);
  }
  if (v16 && (unsigned int v6 = atomic_load((unsigned int *)(v16 + 704)), v6 == 2))
  {
    re::AssetHandle::serializableAsset((re::AssetHandle *)&v15, v17);
    re::FileStreamWriter::open(a2, (uint64_t)v13);
    if (v13[0])
    {
      uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(v16 + 24) + 1040), v3);
      uint64_t v8 = (const re::IntrospectionBase **)v17[0];
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 112))(v7);
      uint64_t v10 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)&v15);
      uint64_t v11 = re::AssetUtilities::serializeIntrospectedAsset((_anonymous_namespace_ *)&v14, v8, v10, v9, 1, 0, 1);
    }
    else
    {
      uint64_t v11 = 0;
    }
    re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v13);
    std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v17);
  }
  else
  {
    uint64_t v11 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  return v11;
}

uint64_t REAssetGetSwiftObject(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1) {
      return *(void *)(v1 + 656);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REAssetSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 24) + 6+ 56) = a2;
  return result;
}

void REAssetSetSwiftObjectAndRetain()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_error_impl(&dword_233120000, v0, OS_LOG_TYPE_ERROR, "REAssetSetSwiftObjectAndRetain is deprecated and no longer supported. NOP", v1, 2u);
  }
}

void *re::allocInfo_UnsupportedTestAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_520))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AFA0080, "UnsupportedTestAsset");
    __cxa_guard_release(&_MergedGlobals_520);
  }
  return &unk_26AFA0080;
}

void re::initInfo_UnsupportedTestAsset(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD81F23B2DE9B3DD2;
  v5[1] = "UnsupportedTestAsset";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_UnsupportedTestAsset(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void *re::allocInfo_UnsupportedTestComponent(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0010, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0010))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AFA00F8, "UnsupportedTestComponent");
    __cxa_guard_release(&qword_26AFA0010);
  }
  return &unk_26AFA00F8;
}

void re::initInfo_UnsupportedTestComponent(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xA7AE3E843CE658ECLL;
  v13[1] = "UnsupportedTestComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0018, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AFA0018);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "ecs2::Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AFA0058 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "asset";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AFA0060 = v11;
      __cxa_guard_release(&qword_26AFA0018);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AFA0058;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<anonymous namespace'::UnsupportedTestComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E732910;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E732910;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<anonymous namespace'::UnsupportedTestComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t *_RETestingRegisterUnsupportedTestAsset(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0050))
  {
    qword_26AFA0048 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_26AFA0020, 0);
    __cxa_guard_release(&qword_26AFA0050);
  }
  re::getPrettyTypeName((re *)qword_26AFA0048, (const re::IntrospectionBase *)&v32);
  uint64_t v2 = (re *)re::DynamicString::rfind((uint64_t)&v32, "Component", v26);
  if (v26[0])
  {
    unint64_t v3 = (v33 & 1) != 0 ? v33 >> 1 : v33 >> 1;
    if (v27 == v3 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v32, 0, v27, (re::DynamicString *)&v36);
      re::DynamicString::operator=((re::DynamicString *)&v32, (re::DynamicString *)&v36);
      uint64_t v2 = v36;
      if (v36)
      {
        if (v37) {
          uint64_t v2 = (re *)(*(uint64_t (**)(void))(*(void *)v36 + 40))();
        }
      }
    }
  }
  long long v4 = re::globalAllocators(v2);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 80, 8);
  uint64_t v6 = (uint64_t)v5;
  if (v33) {
    uint64_t v7 = v34;
  }
  else {
    uint64_t v7 = (char *)&v33 + 1;
  }
  *(void *)&v25.var0 = 0;
  v25.var1 = "";
  *(void *)uint64_t v6 = &unk_26E6E1EB8;
  *(void *)(v6 + 8) = 0;
  *(_WORD *)(v6 + 16) = -1;
  re::StringID::StringID((re::StringID *)(v6 + 24), &v25);
  *(_DWORD *)(v6 + 40) = 0;
  *(void *)uint64_t v6 = &unk_26E732998;
  *(void *)(v6 + + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 72) = 0xFFFFFFFFLL;
  *(void *)(v6 + + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(v6 + 32), (const char *)0x38);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0050))
  {
    qword_26AFA0048 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_26AFA0020, 0);
    __cxa_guard_release(&qword_26AFA0050);
  }
  uint64_t v8 = qword_26AFA0048;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
  uint64_t v9 = *(char **)(v8 + 48);
  if (v9)
  {
    uint64_t v10 = *v9;
    if (*v9)
    {
      char v11 = v9[1];
      if (v11)
      {
        long long v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v36 = (re *)(2 * v10);
  uint64_t v37 = v9;
  long long v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v36);
  if (v14)
  {
    uint64_t v15 = *v14;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  *(void *)(v6 + 64) = v16;
  *(void *)(v6 + 72) = v15;
  re::StringID::destroyString((re::StringID *)&v36);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v28);
  qword_26AFA0040 = v6;
  re::StringID::destroyString((re::StringID *)&v25);
  long long v18 = re::ecs2::ComponentTypeRegistry::instance(v17);
  re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v18, (re::ecs2::ComponentTypeBase *)qword_26AFA0040);
  long long v19 = v32;
  if (v32 && (v33 & 1) != 0) {
    long long v19 = (re *)(*(uint64_t (**)(re *, const char *))(*(void *)v32 + 40))(v32, v34);
  }
  long long v20 = re::globalAllocators(v19);
  long long v21 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 8, 8);
  *(void *)long long v21 = &unk_26E7327B8;
  uint64_t v36 = (re *)&unk_26E732AB0;
  uint64_t v38 = (void **)&v36;
  unint64_t v35 = (void **)&v33;
  uint64_t v32 = v21;
  unint64_t v33 = (unint64_t)&unk_26E732AB0;
  uint64_t v22 = (_anonymous_namespace_::UnsupportedTestAsset *)std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v36);
  uint64_t v23 = (uint64_t)v32;
  uint64_t v32 = 0;
  uint64_t v29 = v23;
  if (v35)
  {
    if (v35 == (void **)&v33)
    {
      unint64_t v31 = (void **)&v30;
      (*(void (**)(unint64_t *))(v33 + 24))(&v33);
    }
    else
    {
      unint64_t v31 = v35;
      unint64_t v35 = 0;
    }
  }
  else
  {
    unint64_t v31 = 0;
  }
  re::AssetManager::registerAssetType(a1, (char **)&qword_26AFA0068, &v29);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v29);
  return std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v32);
}

void anonymous namespace'::UnsupportedTestAsset::assetType(_anonymous_namespace_::UnsupportedTestAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0038))
  {
    qword_26AFA0068 = (uint64_t)"UnsupportedTestAsset";
    qword_26AFA0078 = 0;
    re::AssetType::generateCompiledExtension((re::AssetType *)&qword_26AFA0068);
    __cxa_guard_release(&qword_26AFA0038);
  }
}

re *_RETestingUnregisterUnsupportedTestAsset(re::ecs2::ComponentTypeRegistry *a1)
{
  uint64_t v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)qword_26AFA0040);
  uint64_t v3 = qword_26AFA0040;
  if (qword_26AFA0040)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
  }
  qword_26AFA0040 = 0;
  return result;
}

void _RETestingEntityAddUnsupportedTestAsset(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = re::globalAllocators((re *)a1);
  uint64_t v7 = (_anonymous_namespace_::UnsupportedTestAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 1, 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _anonymous_namespace_::UnsupportedTestAsset *, uint64_t *, void, void, void))(*(void *)a2 + 416))(v10, a2, v7, &qword_26AFA0068, 0, 0, 0);
  if (a3)
  {
    uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)qword_26AFA0040);
    re::AssetHandle::operator=(v8 + 32, v10);
  }
  else
  {
    uint64_t v9 = a1[22];
    if (!v9) {
      uint64_t v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    if (*(void *)(v9 + 40) != v10[1])
    {
      re::AssetHandle::operator=(v9 + 32, v10);
      re::ecs2::Component::enqueueMarkDirty(v9);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
}

uint64_t RECustomAssetGetObject(uint64_t a1, const re::AssetType *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7 && (unsigned int v3 = atomic_load((unsigned int *)(v7 + 704)), v3 == 2)) {
    uint64_t v4 = *(void *)(re::AssetHandle::assetWithType((re::AssetHandle *)&v6, a2, 0) + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return v4;
}

uint64_t RESerializableAssetHandleGetAsset(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

re::SharedAssetHandle *RESerializableAssetHandleCreate(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v2 = re::globalAllocators(v1);
  unsigned int v3 = (re::SharedAssetHandle *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 48, 8);
  uint64_t v4 = (char *)re::SharedAssetHandle::SharedAssetHandle(v3, (const re::AssetHandle *)v6) + 8;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

re::SharedAssetHandle *RESerializableAssetHandleCreateRetained(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v2 = re::globalAllocators(v1);
  unsigned int v3 = (re::SharedAssetHandle *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 48, 8);
  re::SharedAssetHandle::SharedAssetHandle(v3, (const re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

void REAssetSetMetadataString(uint64_t a1, const char *a2, const char *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v5, a2, a3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
}

void REAssetClearMetadataString(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v3, a2, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

CFStringRef REAssetCopyMetadataString(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  re::internal::AssetEntry::getMetadataString((os_unfair_lock_s *)v10[1], a2, 1, v6);
  if (v6[0])
  {
    if (v8) {
      unsigned int v3 = *(const char **)&v9[7];
    }
    else {
      unsigned int v3 = v9;
    }
    CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
    if (v6[0] && v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
  }
  else
  {
    CFStringRef v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v4;
}

__CFDictionary *REAssetCopyMetadata(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = re::AssetHandle::copyComposedMetadataCFDR((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

void REAssetSetDebugName(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  re::AssetHandle::setOrClearMetadataString((re::AssetHandle *)v3, "Engine/RE-debugName", a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

CFStringRef REAssetCopyDebugName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  re::internal::AssetEntry::getMetadataString((os_unfair_lock_s *)v8[1], "Engine/RE-debugName", 1, v4);
  if (v4[0])
  {
    if (v6) {
      uint64_t v1 = *(const char **)&v7[7];
    }
    else {
      uint64_t v1 = v7;
    }
    CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
    if (v4[0] && v5 && (v6 & 1) != 0) {
      (*(void (**)(void))(*(void *)v5 + 40))();
    }
  }
  else
  {
    CFStringRef v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v2;
}

BOOL _RERenderManagerExportTextureAssetToKTX(int a1, uint64_t a2, re::FileStreamWriter *a3)
{
  uint64_t v4 = 0;
  return _RERenderManagerExportTextureAssetToKTXWithErrorHandling(a1, a2, a3, (char *)&v4);
}

BOOL _RERenderManagerExportTextureAssetToKTXWithErrorHandling(int a1, uint64_t a2, re::FileStreamWriter *this, char *a4)
{
  re::FileStreamWriter::open(this, (uint64_t)v19);
  if (v19[0])
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v18);
    uint64_t v7 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v18);
    if (v7)
    {
      re::exportToKtx((uint64_t)v20, v7 + 152, 0, 0, (uint64_t)v14);
      BOOL v10 = v14[0] != 0;
      if (!v14[0])
      {
        if (v16) {
          char v11 = *(re::CoreREAssetUtils **)&v17[7];
        }
        else {
          char v11 = (re::CoreREAssetUtils *)v17;
        }
        re::CoreREAssetUtils::logAndSetErrorFromString(v11, a4, v9);
        if (!v14[0] && v15 && (v16 & 1) != 0) {
          (*(void (**)(void))(*(void *)v15 + 40))();
        }
      }
    }
    else
    {
      re::CoreREAssetUtils::logAndSetErrorFromString((re::CoreREAssetUtils *)"Failed to retrieve metalTexture from Asset", a4, v8);
      BOOL v10 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
  }
  else
  {
    if (v20[24]) {
      long long v12 = *(re::CoreREAssetUtils **)&v21[7];
    }
    else {
      long long v12 = (re::CoreREAssetUtils *)v21;
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v12, a4, v6);
    BOOL v10 = 0;
  }
  re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v19);
  return v10;
}

void anonymous namespace'::UnsupportedTestAssetLoader::~UnsupportedTestAssetLoader(_anonymous_namespace_::UnsupportedTestAssetLoader *this)
{
}

re *anonymous namespace'::UnsupportedTestAssetLoader::unloadAsset(re *this, void *a2)
{
  if (a2)
  {
    CFStringRef v2 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(this)[2] + 40);
    return (re *)v2();
  }
  return this;
}

BOOL anonymous namespace'::UnsupportedTestAssetLoader::isSupportedSourceExtension(_anonymous_namespace_::UnsupportedTestAssetLoader *this, const char *a2)
{
  return strcasecmp(a2, "testunsupported") == 0;
}

uint64_t anonymous namespace'::UnsupportedTestAssetLoader::introspectionType(_anonymous_namespace_::UnsupportedTestAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0030))
  {
    qword_26AFA0028 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestAsset", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestAsset, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestAsset, (void (*)(re::IntrospectionBase *))&unk_26AFA0008, 0);
    __cxa_guard_release(&qword_26AFA0030);
  }
  return qword_26AFA0028;
}

void anonymous namespace'::UnsupportedTestComponent::~UnsupportedTestComponent(_anonymous_namespace_::UnsupportedTestComponent *this)
{
  *(void *)this = &unk_26E732910;
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::UnsupportedTestComponent *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E732910;
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::UnsupportedTestComponent *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::allocator()
{
  return *(void *)(qword_26AFA0040 + 56);
}

uint64_t re::ecs2::ComponentImpl<anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::commonComponentIndex()
{
  return -1;
}

uint64_t re::ecs2::ComponentImpl<anonymous namespace'::UnsupportedTestComponent,(re::ecs2::ComponentTypeBase::Flags)0>::componentType()
{
  return qword_26AFA0040;
}

double re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::isCustomComponent()
{
  return 0;
}

uint64_t re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::~ComponentType(uint64_t a1)
{
  *(void *)a1 = &unk_26E732998;
  if (*(void *)(a1 + 48)) {
    RESyncRelease();
  }
  re::internal::destroyPersistent<re::Allocator>((re *)"~ComponentType", 46, *(void (****)(void))(a1 + 56));
  *(void *)a1 = &unk_26E6E1EB8;
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  return a1;
}

void re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::~ComponentType(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::doMakeComponent(void *a1@<X8>)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(qword_26AFA0040 + 56) + 32))(*(void *)(qword_26AFA0040 + 56), 56, 0);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E732910;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 656, 8);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)uint64_t v3 = &unk_26E732A08;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(void *)(v3 + 304) = 0;
  *(void *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(void *)(v3 + 392) = 0;
  *(void *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 4+ 56) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 488) = 0;
  *(void *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(void *)(v3 + 520) = 0;
  *(void *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(void *)(v3 + 584) = 0;
  *(void *)(v3 + 608) = 0;
  *(void *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(void *)(v3 + 632) = 0;
  *(void *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(void *)(v3 + 640) = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  char v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::doGetComponentIntrospectionInfo()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AFA0050, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AFA0050))
  {
    qword_26AFA0048 = re::internal::getOrCreateInfo((re::internal *)"UnsupportedTestComponent", (uint64_t (*)(re::internal *))re::allocInfo_UnsupportedTestComponent, (re::IntrospectionBase *(*)(void))re::initInfo_UnsupportedTestComponent, (void (*)(re::IntrospectionBase *))&unk_26AFA0020, 0);
    __cxa_guard_release(&qword_26AFA0050);
  }
  return qword_26AFA0048;
}

__n128 re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<anonymous namespace'::UnsupportedTestComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::~SceneComponentCollection(void *a1)
{
  *a1 = &unk_26E732A08;
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (a1[16]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 16));
  }
  if (a1[27]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 27));
  }
  if (a1[38]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 38));
  }
  if (a1[49]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 60));
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)(a1 + 75));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 75));
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)(a1 + 68));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 68));
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)(a1 + 61));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 61));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 49));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 38));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 27));
  re::Event<re::Engine>::~Event(v2);
  re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase((re::ecs2::SceneComponentCollectionBase *)a1);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
}
  }

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
}
  }

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
}
  }

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(re::ecs2::Component ***)(a2 + 32);
      char v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      uint64_t v7 = 8 * v4;
      do
      {
        char v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::registerCallbacks(uint64_t a1, void *a2)
{
  if (a2[3]) {
  if (a2[4])
  }
  if (a2[5]) {
  if (a2[6])
  }
  {
  }
  return result;
}

void re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>::unregisterCallbacks(uint64_t a1, void *a2)
{
  if (a2[3]) {
  if (a2[4])
  }
  if (a2[5]) {
  if (a2[6])
  }
  {
  }
}

void re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *(void *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v22, 0, 80);
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v14 = 136315906;
          uint64_t v15 = "operator[]";
          __int16 v16 = 1024;
          int v17 = 789;
          __int16 v18 = 2048;
          unint64_t v19 = i;
          __int16 v20 = 2048;
          unint64_t v21 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = *(void *)(a1 + 72) + v7;
        long long v11 = *(_OWORD *)(v10 + 16);
        v12[0] = *(_OWORD *)v10;
        v12[1] = v11;
        uint64_t v13 = *(void *)(v10 + 32);
        if (LOBYTE(v12[0]))
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v22, *(void *)(a1 + 16), *(char **)(a1 + 32), (void *)v12 + 1);
          if (!v22[0]) {
        }
          }
        else
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, (void *)v12 + 1);
        }
        v7 += 40;
      }
    }
  }
}

__n128 re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::Subscription>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v11 = 2 * v4;
      BOOL v12 = v4 == 0;
      unint64_t v13 = 8;
      if (!v12) {
        unint64_t v13 = v11;
      }
      if (v13 <= v6) {
        unint64_t v14 = v6;
      }
      else {
        unint64_t v14 = v13;
      }
      re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  char v8 = (_OWORD *)(*(void *)(a1 + 32) + 32 * *(void *)(a1 + 16));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *char v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

double re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::subscribe<re::ecs2::SceneComponentCollectionCallbacks>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)&long long v6 = a2;
  *((void *)&v6 + 1) = a3;
  *(void *)&long long v7 = a4;
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v8, *(void *)(a1 + 16), *(char **)(a1 + 32), &v6);
  if (!v8[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v8[0] = 1;
      long long v9 = v6;
      long long v10 = v7;
    }
    else
    {
    }
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(void))(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(void))(a1 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(void))(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<anonymous namespace'::UnsupportedTestComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5 = *(void (**)(void))(a1 + 48);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

__n128 re::DynamicArray<re::Pair<BOOL,re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::Subscription,true>>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v11 = 2 * v4;
      BOOL v12 = v4 == 0;
      unint64_t v13 = 8;
      if (!v12) {
        unint64_t v13 = v11;
      }
      if (v13 <= v6) {
        unint64_t v14 = v6;
      }
      else {
        unint64_t v14 = v13;
      }
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)a1, v14);
    }
    else
    {
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 40 * *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)uint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>*,re::Slice<anonymous namespace'::UnsupportedTestComponent*>))::{lambda(re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>*,re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::Subscription const&,re::Slice<anonymous namespace'::UnsupportedTestComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::Event<re::ecs2::SceneComponentCollection<anonymous namespace'::UnsupportedTestComponent>,re::Slice<anonymous namespace'::UnsupportedTestComponent*>>::unsubscribe<re::ecs2::SceneComponentCollectionCallbacks>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)&long long v5 = a2;
  *((void *)&v5 + 1) = a3;
  *(void *)&long long v6 = a4;
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v7, *(void *)(a1 + 16), *(char **)(a1 + 32), &v5);
  if (v7[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v7[0] = 0;
      long long v8 = v5;
      long long v9 = v6;
    }
    else
    {
      re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, &v5);
    }
  }
}

void std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26E732AB0;
  return result;
}

void std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732AB0;
}

re *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"operator()", 264, *a2);
}

uint64_t std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<_RETestingRegisterUnsupportedTestAsset::$_0,std::allocator<_RETestingRegisterUnsupportedTestAsset::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

re::SharedAssetHandle *re::SharedAssetHandle::SharedAssetHandle(re::SharedAssetHandle *this, const re::AssetHandle *a2)
{
  *(void *)this = &unk_26E6CBEB8;
  re::AssetHandle::AssetHandle((re::SharedAssetHandle *)((char *)this + 24), a2);
  return this;
}

re *re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    int v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    int v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

re *REEntityQueryDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    int v3 = (std::__shared_weak_count *)*((void *)v1 + 1);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
    unint64_t v4 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v4(v2, v1);
  }
  return result;
}

re *REComponentQueryDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    int v3 = (std::__shared_weak_count *)*((void *)v1 + 1);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
    unint64_t v4 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v4(v2, v1);
  }
  return result;
}

void *REQueryCreateCustomEntityPredicate(void *a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (re *)_Block_copy(v1);
  uint64_t v3 = re::globalAllocators(v2)[2];
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32);

  long long v5 = (void *)v4(v3, 80, 8);
  long long v6 = _Block_copy(v2);
  v8[0] = &unk_26E733278;
  v8[1] = v6;
  uint64_t v8[3] = v8;
  v5[1] = 0;
  void v5[2] = 0;
  uint64_t v5[3] = v5 + 3;
  v5[4] = v5 + 3;
  void *v5 = &unk_26E733308;
  v5[9] = v5 + 6;
  v5[5] = 0;
  v5[6] = &unk_26E733278;
  v5[7] = _Block_copy(v6);
  std::__function::__value_func<BOOL ()(re::ecs2::Entity const*)>::~__value_func[abi:nn180100](v8);

  return v5;
}

void *REQueryCreateCustomComponentPredicate(void *a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (re *)_Block_copy(v1);
  uint64_t v3 = re::globalAllocators(v2)[2];
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32);

  long long v5 = (void *)v4(v3, 80, 8);
  long long v6 = _Block_copy(v2);
  v8[0] = &unk_26E733368;
  v8[1] = v6;
  uint64_t v8[3] = v8;
  v5[1] = 0;
  void v5[2] = 0;
  uint64_t v5[3] = v5 + 3;
  v5[4] = v5 + 3;
  void *v5 = &unk_26E7333F8;
  v5[9] = v5 + 6;
  v5[5] = 0;
  v5[6] = &unk_26E733368;
  v5[7] = _Block_copy(v6);
  std::__function::__value_func<BOOL ()(re::ecs2::Component const*)>::~__value_func[abi:nn180100](v8);

  return v5;
}

void *REQueryCreateAndEntityPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E732B30;
  return result;
}

void *REQueryCreateAndComponentPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E732BA8;
  return result;
}

void *REQueryCreateOrEntityPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E732C90;
  return result;
}

void *REQueryCreateOrComponentPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E732DD0;
  return result;
}

void *REQueryCreateNotEntityPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E732F10;
  return result;
}

void *REQueryCreateNotComponentPredicate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  void *result = &unk_26E733010;
  return result;
}

void *REQueryCreateHasEntityPredicate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 56, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  result[6] = a1;
  void *result = &unk_26E7224C0;
  return result;
}

uint64_t REQueryCreateEntityIsActivePredicate(re *a1)
{
  char v1 = (char)a1;
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 56, 8);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = result + 24;
  *(void *)(result + 32) = result + 24;
  *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)uint64_t result = &unk_26E733110;
  *(unsigned char *)(result + 48) = v1;
  return result;
}

__n128 REQueryCreateEntityInBoundsPredicate(re *a1, __n128 a2, __n128 a3)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 80, 16);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 24) = v4 + 24;
  *(void *)(v4 + 32) = v4 + 24;
  *(void *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)uint64_t v4 = &unk_26E722410;
  __n128 result = a3;
  *(__n128 *)(v4 + 48) = a2;
  *(__n128 *)(v4 + 64) = a3;
  return result;
}

void *REQueryCreateIsDescendantEntityPredicate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  result[6] = a1;
  void *result = &unk_26E733188;
  result[10] = 0;
  return result;
}

void *REQueryCreateIsDescendantCallbackEntityPredicate(void *a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  char v1 = a1;
  uint64_t v2 = re::globalAllocators(v1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  uint64_t v4 = _Block_copy(v1);

  v6[0] = &unk_26E733458;
  v6[1] = v4;
  uint64_t v6[3] = v6;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t v3[3] = v3 + 3;
  v3[4] = v3 + 3;
  v3[5] = 0;
  v3[6] = 0;
  void *v3 = &unk_26E733188;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::__value_func[abi:nn180100]((uint64_t)(v3 + 7), (uint64_t)v6);
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100](v6);
  return v3;
}

void *REQueryCreateIsChildEntityPredicate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  result[1] = 0;
  result[2] = 0;
  result[3] = result + 3;
  result[4] = result + 3;
  result[5] = 0;
  result[6] = a1;
  void *result = &unk_26E7331E8;
  result[10] = 0;
  return result;
}

void *REQueryCreateIsChildCallbackEntityPredicate(void *a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  char v1 = a1;
  uint64_t v2 = re::globalAllocators(v1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 88, 8);
  uint64_t v4 = _Block_copy(v1);

  v6[0] = &unk_26E7334E8;
  v6[1] = v4;
  uint64_t v6[3] = v6;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t v3[3] = v3 + 3;
  v3[4] = v3 + 3;
  v3[5] = 0;
  v3[6] = 0;
  void *v3 = &unk_26E7331E8;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::__value_func[abi:nn180100]((uint64_t)(v3 + 7), (uint64_t)v6);
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100](v6);
  return v3;
}

void REQueryConnectEntityPredicates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void REQueryConnectComponentPredicates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void REQueryCreateEntityQuery(uint64_t a1)
{
  uint64_t v1 = a1;
  operator new();
}

void REQueryCreateComponentQuery(uint64_t a1)
{
  uint64_t v1 = a1;
  operator new();
}

void REQueryEvaluateEntityQuery(void *a1, uint64_t a2, void *a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v14 = a2;
  id v15 = v5;
  unint64_t v13 = &unk_26E733248;
  long long v6 = (std::__shared_weak_count *)a1[1];
  v21[0] = *(void **)a1;
  v21[1] = &v6->__vftable;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v21);
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
  }
  else
  {
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v21);
  }
  uint64_t v17 = 0;
  __int16 v18 = 0;
  __int16 v16 = &v13;
  csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)&v16);
  char v19 = 0;
  uint64_t v20 = -1;
  (*(void (**)(void, void ***))(*(void *)*a1 + 40))(*a1, &v16);
  if (*(void *)(v17 + 32))
  {
    uint64_t v7 = *(void *)(*(void *)(v17 + 16) + 16);
    uint64_t v8 = *a1;
    v22[0] = &unk_26E7336E8;
    v22[1] = &v15;
    v22[3] = v22;
    (*(void (**)(uint64_t, void ***, uint64_t, void *))(*(void *)v7 + 24))(v7, &v16, v8, v22);
    std::__function::__value_func<void ()(re::ecs2::Entity *)>::~__value_func[abi:nn180100](v22);
  }
  else
  {
    uint64_t v9 = *(void *)(v14 + 128);
    if (v9)
    {
      uint64_t v10 = *(void **)(v14 + 144);
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *v10;
        if (*v10 && (*(unsigned int (**)(void, void, void ***))(*(void *)*a1 + 16))(*a1, *v10, &v16)) {
          (*((void (**)(id, uint64_t))v5 + 2))(v5, v12);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
  }
}

void REQueryEvaluateEntityQueryWithRootEntity(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v26[4] = *MEMORY[0x263EF8340];
  id v7 = a3;
  uint64_t v18 = a4;
  id v19 = v7;
  __int16 v16 = &unk_26E733248;
  uint64_t v17 = a2;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  v25[0] = *(void **)a1;
  v25[1] = &v8->__vftable;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v25);
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
  else
  {
    csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v25);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = &v16;
  csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset((uint64_t)&v20);
  char v23 = 0;
  uint64_t v24 = -1;
  (*(void (**)(void, void ***))(*(void *)*a1 + 40))(*a1, &v20);
  if (*(void *)(v21 + 32))
  {
    uint64_t v9 = *(void *)(*(void *)(v21 + 16) + 16);
    uint64_t v10 = *a1;
    v26[0] = &unk_26E733768;
    v26[1] = &v18;
    v26[2] = &v19;
    v26[3] = v26;
    (*(void (**)(uint64_t, void ***, uint64_t, void *))(*(void *)v9 + 24))(v9, &v20, v10, v26);
    std::__function::__value_func<void ()(re::ecs2::Entity *)>::~__value_func[abi:nn180100](v26);
  }
  else
  {
    uint64_t v11 = *(void *)(v17 + 128);
    if (v11)
    {
      uint64_t v12 = *(void **)(v17 + 144);
      unint64_t v13 = &v12[v11];
      do
      {
        uint64_t v14 = *v12;
        if (*v12
          && (*(unsigned int (**)(void, void, void ***))(*(void *)*a1 + 16))(*a1, *v12, &v20)
          && (*(unsigned char *)(v14 + 289) & 4) == 0)
        {
          if (a4)
          {
            uint64_t v15 = v14;
            while (v15 != a4)
            {
              uint64_t v15 = *(void *)(v15 + 24);
              if (!v15 || (*(unsigned char *)(v15 + 288) & 0x80) != 0) {
                goto LABEL_18;
              }
            }
          }
          (*((void (**)(id, uint64_t))v7 + 2))(v7, v14);
        }
LABEL_18:
        ++v12;
      }
      while (v12 != v13);
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v22);
  }
}

void REQueryEvaluateComponentQuery(void *a1, void *a2, uint64_t a3, void *a4)
{
  v26[4] = *MEMORY[0x263EF8340];
  id v7 = a4;
  id v19 = v7;
  if (a3)
  {
    unint64_t v8 = *(unsigned __int16 *)(a3 + 16);
    if (a2[28] > v8)
    {
      uint64_t v9 = *(void *)(a2[30] + 8 * v8);
      if (v9)
      {
        uint64_t v10 = a2 + 1;
        id v11 = v10;
        uint64_t v12 = (std::__shared_weak_count *)a1[1];
        v25[0] = *(void **)a1;
        v25[1] = &v12->__vftable;
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          csq::v2::Query<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::notifyPerformQuery(v25);
          std::__shared_weak_count::__release_shared[abi:nn180100](v12);
        }
        else
        {
          csq::v2::Query<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::notifyPerformQuery(v25);
        }
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v20 = v9;
        csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset((uint64_t)&v20);
        char v23 = 0;
        uint64_t v24 = -1;
        (*(void (**)(void, uint64_t *))(*(void *)*a1 + 40))(*a1, &v20);
        if (*(void *)(v21 + 32))
        {
          uint64_t v13 = *(void *)(*(void *)(v21 + 16) + 16);
          uint64_t v14 = *a1;
          v26[0] = &unk_26E7337E8;
          v26[1] = &v19;
          v26[3] = v26;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v13 + 24))(v13, &v20, v14, v26);
          std::__function::__value_func<void ()(re::ecs2::Component *)>::~__value_func[abi:nn180100](v26);
        }
        else
        {
          uint64_t v15 = *(void *)(v9 + 24);
          if (v15)
          {
            __int16 v16 = *(void **)(v9 + 40);
            uint64_t v17 = 8 * v15;
            do
            {
              uint64_t v18 = *v16;
              if (*v16
                && (*(unsigned int (**)(void, void, uint64_t *))(*(void *)*a1 + 16))(*a1, *v16, &v20))
              {
                v7[2](v7, *(void *)(v18 + 16));
              }
              ++v16;
              v17 -= 8;
            }
            while (v17);
          }
        }
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v22);
        }

        id v7 = v19;
      }
    }
  }
}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~AndPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 == (void *)(a1 + 24)) {
    return 1;
  }
  do
  {
    uint64_t v7 = v4[2];
    unint64_t v8 = (std::__shared_weak_count *)v4[3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
    if ((v9 & 1) == 0) {
      break;
    }
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  return v9;
}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = (void *)(a1 + 8);
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v22, (void *)(a1 + 8));
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(&v24, &v22, 0, a2);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v23);
  }
  if (v24)
  {
    long long v6 = v25;
    *a3 = v24;
    a3[1] = v6;
  }
  else
  {
    std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v20, v5);
    uint64_t v7 = v20;
    unint64_t v8 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v19 = v8;
    uint64_t v9 = v7 + 24;
    uint64_t v10 = *(uint64_t **)(v7 + 32);
    if (v10 != (uint64_t *)(v7 + 24))
    {
      do
      {
        id v11 = (const void *)v10[2];
        if (v11)
        {
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = (std::__shared_weak_count *)v10[3];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v12[5])
            {
              uint64_t v15 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v9, v10, v12[4], v12 + 3);
              std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v9, v10);
              unint64_t v16 = (unint64_t)v13[5];
              uint64_t v10 = v15;
              unint64_t v17 = v16 - 1;
              if ((uint64_t)(v16 - 1) < 0)
              {
                do
                  uint64_t v10 = (uint64_t *)*v10;
                while (!__CFADD__(v17++, 1));
              }
              else if (v16 != 1)
              {
                do
                {
                  uint64_t v10 = (uint64_t *)v10[1];
                  --v16;
                }
                while (v16 > 1);
              }
              *(unsigned char *)(a2 + 24) = 1;
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v14);
            }
          }
        }
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10 != (uint64_t *)v9);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v19);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    }
    *a3 = 0;
    a3[1] = 0;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
    }
  }
}

void csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(void *a1, uint64_t a2)
{
  uint64_t v32 = (uint64_t)&v32;
  unint64_t v33 = &v32;
  uint64_t v34 = 0;
  *(_OWORD *)uint64_t v29 = 0u;
  *(_OWORD *)__p = 0u;
  int v31 = 1065353216;
  uint64_t v4 = (uint64_t **)(a1 + 3);
  uint64_t v5 = a1[4];
  if ((void *)v5 == a1 + 3)
  {
    char v6 = 0;
    unint64_t v7 = -1;
  }
  else
  {
    char v6 = 0;
    unint64_t v7 = -1;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), a2);
      if (*(unsigned char *)(*(void *)(a2 + 8) + 64))
      {
        uint64_t v8 = *(void *)(a2 + 32);
      }
      else
      {
        uint64_t v8 = -1;
        *(void *)(a2 + 32) = -1;
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>((uint64_t *)v29, *(void *)(v5 + 16), (void *)(v5 + 16))[4] = v8;
      uint64_t v9 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v9 + 64))
      {
        unint64_t v10 = *(void *)(a2 + 32);
        if (v10 < v7)
        {
          std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v32);
          uint64_t v11 = *(void *)(v9 + 32);
          if (v11)
          {
            uint64_t v13 = *(void *)(v9 + 16);
            uint64_t v12 = *(uint64_t **)(v9 + 24);
            uint64_t v14 = *v12;
            *(void *)(v14 + 8) = *(void *)(v13 + 8);
            **(void **)(v13 + 8) = v14;
            uint64_t v15 = v32;
            *(void *)(v32 + 8) = v12;
            uint64_t *v12 = v15;
            *(void *)(v13 + 8) = &v32;
            uint64_t v32 = v13;
            v34 += v11;
            *(void *)(v9 + 32) = 0;
          }
          char v6 = 3;
          unint64_t v7 = v10;
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((uint64_t **)v5 != v4);
    if (v34)
    {
      std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v28, a1 + 1);
      unint64_t v16 = operator new(0x20uLL);
      v16[1] = v28;
      unint64_t v17 = v33;
      *(void *)unint64_t v16 = &v32;
      *((void *)v16 + 1) = v17;
      *unint64_t v17 = (uint64_t)v16;
      unint64_t v33 = (uint64_t *)v16;
      ++v34;
    }
  }
  uint64_t v18 = *(void *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v18 + 16));
  uint64_t v19 = v34;
  if (v34)
  {
    uint64_t v21 = v32;
    uint64_t v20 = v33;
    uint64_t v22 = *v33;
    *(void *)(v22 + 8) = *(void *)(v32 + 8);
    **(void **)(v21 + 8) = v22;
    uint64_t v23 = *(void *)(v18 + 16);
    *(void *)(v23 + 8) = v20;
    *uint64_t v20 = v23;
    *(void *)(v18 + 16) = v21;
    *(void *)(v21 + 8) = v18 + 16;
    *(void *)(v18 + 32) += v19;
    uint64_t v34 = 0;
  }
  *(void *)(a2 + 32) = v7;
  *(unsigned char *)(*(void *)(a2 + 8) + 64) = v6;
  *(void *)&long long v28 = v29;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1[4], v4, a1[5], (uint64_t **)&v28);
  *(unsigned char *)(a2 + 24) = 1;
  uint64_t v24 = __p[0];
  if (__p[0])
  {
    do
    {
      StringID v25 = (void *)*v24;
      uint64_t v26 = (std::__shared_weak_count *)v24[3];
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v26);
      }
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  unint64_t v27 = v29[0];
  v29[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v32);
}

void csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = *a2 + 24;
  uint64_t v6 = *(void *)(*a2 + 32);
  if (v6 == v5) {
    goto LABEL_31;
  }
  LOBYTE(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v11 = 0;
  do
  {
    if (v10)
    {
      std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v5, v11);
      *(unsigned char *)(a4 + 24) = 1;
    }
    (*(void (**)(const void **__return_ptr))(**(void **)(v6 + 16) + 32))(&v25);
    uint64_t v12 = v25;
    if (v25)
    {
      uint64_t v13 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v12;
      *(void *)(v6 + 24) = v13;
      if (!v14) {
        goto LABEL_11;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v14);
    }
    uint64_t v12 = *(const void **)(v6 + 16);
    if (!v12) {
      goto LABEL_21;
    }
LABEL_11:
    if (!v15)
    {
LABEL_21:
      int v10 = 0;
      char v20 = 1;
      goto LABEL_22;
    }
    unint64_t v16 = v15;
    unint64_t v17 = *(std::__shared_weak_count **)(v6 + 24);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = (v16[48] != 0) ^ a3;
    uint64_t v18 = (uint64_t *)v6;
    if ((v10 & 1) == 0)
    {
      *(unsigned char *)(a4 + 24) = 1;
      uint64_t v19 = *(void *)(v6 + 24);
      *a1 = *(void *)(v6 + 16);
      a1[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = v11;
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v17);
    }
    char v20 = v10;
    uint64_t v11 = v18;
LABEL_22:
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v26);
    }
    if ((v20 & 1) == 0) {
      return;
    }
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v21 = *a2;
    uint64_t v5 = *a2 + 24;
  }
  while (v6 != v5);
  if (!v10)
  {
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  if (*(void *)(v21 + 40) != 1)
  {
    std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v6, v11);
    *(unsigned char *)(a4 + 24) = 1;
    goto LABEL_31;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v24 = *(void *)(v22 + 16);
  uint64_t v23 = *(void *)(v22 + 24);
  *a1 = v24;
  a1[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
}

void std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  *(void *)(v3 + 8) = __p[1];
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v4 = (std::__shared_weak_count *)__p[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v4);
  }
  operator delete(__p);
}

uint64_t *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    uint64_t v10 = a3[3];
    v8[2] = a3[2];
    uint64_t v8[3] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (void *)a3[1];
    if (v11 == a4)
    {
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 1;
      uint64_t v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = v13;
        v8[1] = 0;
        uint64_t v14 = v11[3];
        v8[2] = v11[2];
        uint64_t v8[3] = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        v13[1] = v8;
        ++v12;
        uint64_t v11 = (void *)v11[1];
        uint64_t v13 = v8;
      }
      while (v11 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    void *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = a1 + 2;
  uint64_t v15 = operator new(0x28uLL);
  unint64_t i = v15;
  void *v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *uint64_t v26 = *v32;
                  *uint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                uint64_t v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *a1;
  unint64_t v35 = *(void **)(*a1 + 8 * v3);
  if (v35)
  {
    *unint64_t i = *v35;
LABEL_74:
    *unint64_t v35 = i;
    goto LABEL_75;
  }
  *unint64_t i = *v14;
  void *v14 = i;
  *(void *)(v34 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v36 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    unint64_t v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return i;
}

uint64_t *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t **a4)
{
  uint64_t v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      unint64_t v8 = *a2;
      unint64_t v9 = (*a2)[2];
      uint8x8_t v10 = (std::__shared_weak_count *)(*a2)[3];
      v68[0] = v9;
      v68[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(std::__shared_weak_count **)(a1 + 24);
      v67[0] = v12;
      v67[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v9, v68)[4];
      unint64_t v14 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v12, v67)[4];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v11);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v10);
      }
      if (v13 < v14)
      {
        uint64_t v15 = *v8;
        *(void *)(v15 + 8) = v8[1];
        *(void *)v8[1] = v15;
        uint64_t v16 = *v4;
        v16[1] = (uint64_t)v8;
        *unint64_t v8 = (uint64_t)v16;
        std::__shared_weak_count *v4 = v8;
        v8[1] = (uint64_t)v4;
        return v8;
      }
    }
    else
    {
      unint64_t v18 = a3 >> 1;
      unint64_t v19 = (a3 >> 1) + 1;
      uint64_t v20 = a1;
      do
      {
        uint64_t v20 = *(void *)(v20 + 8);
        --v19;
      }
      while (v19 > 1);
      unint64_t v21 = (uint64_t **)std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1, v20, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(v20, a2, a3 - v18, a4);
      unint64_t v22 = (unint64_t)v4[2];
      uint64_t v23 = (std::__shared_weak_count *)v4[3];
      v66[0] = v22;
      v66[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v25 = (unint64_t)v21[2];
      uint64_t v24 = (std::__shared_weak_count *)v21[3];
      v65[0] = v25;
      v65[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v26 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v22, v66)[4];
      unint64_t v27 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v25, v65)[4];
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v24);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v23);
      }
      if (v26 >= v27)
      {
        uint64_t v38 = v21[1];
        uint8x8_t v28 = (uint64_t *)v4;
        uint64_t v4 = v21;
      }
      else
      {
        uint8x8_t v28 = v4[1];
        if (v28 == (uint64_t *)a2)
        {
LABEL_36:
          uint8x8_t v28 = (uint64_t *)a2;
        }
        else
        {
          while (1)
          {
            unint64_t v29 = v28[2];
            uint8x8_t v30 = (std::__shared_weak_count *)v28[3];
            v64[0] = v29;
            v64[1] = v30;
            if (v30) {
              atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v32 = (unint64_t)v21[2];
            uint64_t v31 = (std::__shared_weak_count *)v21[3];
            v63[0] = v32;
            v63[1] = v31;
            if (v31) {
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v33 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v29, v64)[4];
            unint64_t v34 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v32, v63)[4];
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v31);
            }
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v30);
            }
            if (v33 >= v34) {
              break;
            }
            uint8x8_t v28 = (uint64_t *)v28[1];
            if (v28 == (uint64_t *)a2) {
              goto LABEL_36;
            }
          }
        }
        uint64_t v35 = *v28;
        unint64_t v36 = *v4;
        v36[1] = *(void *)(*v28 + 8);
        **(void **)(v35 + 8) = v36;
        uint64_t v37 = *v21;
        uint64_t v38 = v21[1];
        v37[1] = (uint64_t)v4;
        std::__shared_weak_count *v4 = v37;
        *unint64_t v21 = (uint64_t *)v35;
        *(void *)(v35 + 8) = v21;
      }
      if (v38 != v28 && v28 != (uint64_t *)a2)
      {
        uint64_t v39 = v28;
        do
        {
          unint64_t v40 = v28[2];
          v41 = (std::__shared_weak_count *)v28[3];
          v62[0] = v40;
          v62[1] = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v43 = v38[2];
          v42 = (std::__shared_weak_count *)v38[3];
          v61[0] = v43;
          v61[1] = v42;
          if (v42) {
            atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v44 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v40, v62)[4];
          unint64_t v45 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v43, v61)[4];
          if (v42) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v42);
          }
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v41);
          }
          if (v44 >= v45)
          {
            uint64_t v38 = (uint64_t *)v38[1];
          }
          else
          {
            unint64_t v58 = v39;
            for (unint64_t i = (uint64_t **)v28[1]; i != a2; unint64_t i = (uint64_t **)i[1])
            {
              unint64_t v47 = (unint64_t)i[2];
              uint64_t v48 = (std::__shared_weak_count *)i[3];
              v60[0] = v47;
              v60[1] = v48;
              if (v48) {
                atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v50 = v38[2];
              uint64_t v49 = (std::__shared_weak_count *)v38[3];
              v59[0] = v50;
              v59[1] = v49;
              if (v49) {
                atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v51 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v47, v60)[4];
              unint64_t v52 = std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>(*a4, v50, v59)[4];
              if (v49) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v49);
              }
              if (v48) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v48);
              }
              if (v51 >= v52) {
                goto LABEL_65;
              }
            }
            unint64_t i = a2;
LABEL_65:
            __int16 v53 = *i;
            uint64_t v54 = *v28;
            *(void *)(v54 + 8) = (*i)[1];
            *(void *)v53[1] = v54;
            __int16 v55 = v58;
            if (v58 == v28) {
              __int16 v55 = (uint64_t *)i;
            }
            uint64_t v57 = *v38;
            unint64_t v56 = (uint64_t *)v38[1];
            *(void *)(v57 + 8) = v28;
            *uint8x8_t v28 = v57;
            *uint64_t v38 = (uint64_t)v53;
            v53[1] = (uint64_t)v38;
            uint64_t v38 = v56;
            uint8x8_t v28 = (uint64_t *)i;
            uint64_t v39 = v55;
          }
        }
        while (v38 != v39 && v28 != (uint64_t *)a2);
      }
    }
  }
  return (uint64_t *)v4;
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~AndPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 == (void *)(a1 + 24)) {
    return 1;
  }
  do
  {
    uint64_t v7 = v4[2];
    unint64_t v8 = (std::__shared_weak_count *)v4[3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
    if ((v9 & 1) == 0) {
      break;
    }
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  return v9;
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  v26[0] = v6;
  if (!v5) {
    goto LABEL_28;
  }
  unint64_t v8 = std::__shared_weak_count::lock(v5);
  v26[1] = (uint64_t)v8;
  if (!v8) {
    goto LABEL_28;
  }
  uint64_t v9 = v8;
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(&v27, v26, 0, a2);
  std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  if (v27)
  {
    uint8x8_t v10 = v28;
    *a3 = v27;
    a3[1] = v10;
    return;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11 || (uint64_t v12 = *(void *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0))
  {
LABEL_28:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize();
    return;
  }
  unint64_t v25 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = v12 + 24;
  uint64_t v15 = *(uint64_t **)(v12 + 32);
  if (v15 != (uint64_t *)(v12 + 24))
  {
    do
    {
      uint64_t v16 = (const void *)v15[2];
      if (v16)
      {
        if (v17)
        {
          unint64_t v18 = v17;
          unint64_t v19 = (std::__shared_weak_count *)v15[3];
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v17[5])
          {
            uint64_t v20 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v14, v15, v17[4], v17 + 3);
            std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v14, v15);
            unint64_t v21 = (unint64_t)v18[5];
            uint64_t v15 = v20;
            unint64_t v22 = v21 - 1;
            if ((uint64_t)(v21 - 1) < 0)
            {
              do
                uint64_t v15 = (uint64_t *)*v15;
              while (!__CFADD__(v22++, 1));
            }
            else if (v21 != 1)
            {
              do
              {
                uint64_t v15 = (uint64_t *)v15[1];
                --v21;
              }
              while (v21 > 1);
            }
            *(unsigned char *)(a2 + 24) = 1;
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v19);
          }
        }
      }
      uint64_t v15 = (uint64_t *)v15[1];
    }
    while (v15 != (uint64_t *)v14);
  }
  std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  *a3 = 0;
  a3[1] = 0;
  uint64_t v24 = v28;
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v24);
  }
}

void csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(void *a1, uint64_t a2)
{
  uint64_t v35 = (uint64_t)&v35;
  unint64_t v36 = &v35;
  uint64_t v37 = 0;
  *(_OWORD *)unint64_t v32 = 0u;
  *(_OWORD *)__p = 0u;
  int v34 = 1065353216;
  uint64_t v4 = (uint64_t **)(a1 + 3);
  uint64_t v5 = a1[4];
  if ((void *)v5 == a1 + 3)
  {
    char v6 = 0;
    unint64_t v7 = -1;
  }
  else
  {
    char v6 = 0;
    unint64_t v7 = -1;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), a2);
      if (*(unsigned char *)(*(void *)(a2 + 8) + 64))
      {
        uint64_t v8 = *(void *)(a2 + 32);
      }
      else
      {
        uint64_t v8 = -1;
        *(void *)(a2 + 32) = -1;
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::__unordered_map_equal<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>,std::equal_to<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,std::hash<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>> const&>,std::tuple<>>((uint64_t *)v32, *(void *)(v5 + 16), (void *)(v5 + 16))[4] = v8;
      uint64_t v9 = *(void *)(a2 + 8);
      if (*(unsigned char *)(v9 + 64))
      {
        unint64_t v10 = *(void *)(a2 + 32);
        if (v10 < v7)
        {
          std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v35);
          uint64_t v11 = *(void *)(v9 + 32);
          if (v11)
          {
            uint64_t v13 = *(void *)(v9 + 16);
            uint64_t v12 = *(uint64_t **)(v9 + 24);
            uint64_t v14 = *v12;
            *(void *)(v14 + 8) = *(void *)(v13 + 8);
            **(void **)(v13 + 8) = v14;
            uint64_t v15 = v35;
            *(void *)(v35 + 8) = v12;
            uint64_t *v12 = v15;
            *(void *)(v13 + 8) = &v35;
            uint64_t v35 = v13;
            v37 += v11;
            *(void *)(v9 + 32) = 0;
          }
          char v6 = 3;
          unint64_t v7 = v10;
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((uint64_t **)v5 != v4);
    if (v37)
    {
      uint64_t v16 = (std::__shared_weak_count *)a1[2];
      if (!v16 || (uint64_t v17 = a1[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:nn180100]();
        JUMPOUT(0x23421E130);
      }
      unint64_t v19 = v18;
      uint64_t v20 = (uint64_t *)operator new(0x20uLL);
      v20[2] = v17;
      v20[3] = (uint64_t)v19;
      unint64_t v21 = v36;
      *uint64_t v20 = (uint64_t)&v35;
      v20[1] = (uint64_t)v21;
      *unint64_t v21 = (uint64_t)v20;
      unint64_t v36 = v20;
      ++v37;
    }
  }
  uint64_t v22 = *(void *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v22 + 16));
  uint64_t v23 = v37;
  if (v37)
  {
    uint64_t v25 = v35;
    uint64_t v24 = v36;
    uint64_t v26 = *v36;
    *(void *)(v26 + 8) = *(void *)(v35 + 8);
    **(void **)(v25 + 8) = v26;
    uint64_t v27 = *(void *)(v22 + 16);
    *(void *)(v27 + 8) = v24;
    *uint64_t v24 = v27;
    *(void *)(v22 + 16) = v25;
    *(void *)(v25 + 8) = v22 + 16;
    *(void *)(v22 + 32) += v23;
    uint64_t v37 = 0;
  }
  *(void *)(a2 + 32) = v7;
  *(unsigned char *)(*(void *)(a2 + 8) + 64) = v6;
  uint64_t v38 = v32;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__sort<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(csq::v2::OptimizationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &)::{lambda(std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>)#1}>(a1[4], v4, a1[5], (uint64_t **)&v38);
  *(unsigned char *)(a2 + 24) = 1;
  uint8x8_t v28 = __p[0];
  if (__p[0])
  {
    do
    {
      unint64_t v29 = (void *)*v28;
      uint8x8_t v30 = (std::__shared_weak_count *)v28[3];
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v30);
      }
      operator delete(v28);
      uint8x8_t v28 = v29;
    }
    while (v29);
  }
  uint64_t v31 = v32[0];
  v32[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v35);
}

void csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = -1;
}

void csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

void *csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(void *a1)
{
  *a1 = &unk_26E732C58;
  uint64_t v2 = a1 + 3;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 3);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(v2);
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = *a2 + 24;
  uint64_t v6 = *(void *)(*a2 + 32);
  if (v6 == v5) {
    goto LABEL_31;
  }
  LOBYTE(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v11 = 0;
  do
  {
    if (v10)
    {
      std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v5, v11);
      *(unsigned char *)(a4 + 24) = 1;
    }
    (*(void (**)(const void **__return_ptr))(**(void **)(v6 + 16) + 32))(&v25);
    uint64_t v12 = v25;
    if (v25)
    {
      uint64_t v13 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v12;
      *(void *)(v6 + 24) = v13;
      if (!v14) {
        goto LABEL_11;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v14);
    }
    uint64_t v12 = *(const void **)(v6 + 16);
    if (!v12) {
      goto LABEL_21;
    }
LABEL_11:
    if (!v15)
    {
LABEL_21:
      int v10 = 0;
      char v20 = 1;
      goto LABEL_22;
    }
    uint64_t v16 = v15;
    uint64_t v17 = *(std::__shared_weak_count **)(v6 + 24);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = (v16[48] != 0) ^ a3;
    unint64_t v18 = (uint64_t *)v6;
    if ((v10 & 1) == 0)
    {
      *(unsigned char *)(a4 + 24) = 1;
      uint64_t v19 = *(void *)(v6 + 24);
      *a1 = *(void *)(v6 + 16);
      a1[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v18 = v11;
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v17);
    }
    char v20 = v10;
    uint64_t v11 = v18;
LABEL_22:
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v26);
    }
    if ((v20 & 1) == 0) {
      return;
    }
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v21 = *a2;
    uint64_t v5 = *a2 + 24;
  }
  while (v6 != v5);
  if (!v10)
  {
LABEL_31:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  if (*(void *)(v21 + 40) != 1)
  {
    std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v6, v11);
    *(unsigned char *)(a4 + 24) = 1;
    goto LABEL_31;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v24 = *(void *)(v22 + 16);
  uint64_t v23 = *(void *)(v22 + 24);
  *a1 = v24;
  a1[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~OrPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 == (void *)(a1 + 24)) {
    return 0;
  }
  do
  {
    uint64_t v7 = v4[2];
    uint64_t v8 = (std::__shared_weak_count *)v4[3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
    if (v9) {
      break;
    }
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  return v9;
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v8 = v6;
  if (v7
    && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
        uint64_t v8 = *(void *)(a2 + 8),
        (uint64_t v9 = *(std::__shared_weak_count **)(a2 + 16)) != 0))
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void *)(v8 + 48) - *(void *)(v8 + 40);
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 48) - *(void *)(v8 + 40);
  }
  if (v10 >> 4)
  {
    if (v10 >> 4 == 1)
    {
      uint64_t v25 = v7;
      uint64_t v26 = v6;
      uint64_t v27 = *(uint64_t **)(v6 + 40);
      uint64_t v29 = *v27;
      uint8x8_t v28 = (std::__shared_weak_count *)v27[1];
      uint8x8_t v30 = v28;
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v29;
      *(void *)(a2 + 16) = v28;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v31);
      }
      uint64_t v32 = *(void *)(v29 + 24);
      uint64_t v33 = *(void *)(v32 + 16);
      unint64_t v18 = *(std::__shared_weak_count **)(v32 + 24);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__function::__value_func<void ()(re::ecs2::Entity *)>::__value_func[abi:nn180100]((uint64_t)v41, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v33 + 24))(v33, a2, v33, v41);
      std::__function::__value_func<void ()(re::ecs2::Entity *)>::~__value_func[abi:nn180100](v41);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v34 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v26;
      *(void *)(a2 + 16) = v25;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v34);
      }
      uint64_t v24 = v30;
      uint64_t v7 = v25;
      if (!v18) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v35 = v6;
      unint64_t v36 = v7;
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)__p = 0u;
      int v39 = 1065353216;
      uint64_t v11 = *(uint64_t **)(v6 + 40);
      uint64_t v12 = *(uint64_t **)(v6 + 48);
      if (v11 == v12)
      {
        unint64_t v18 = 0;
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v14 = *v11;
          uint64_t v15 = (std::__shared_weak_count *)v11[1];
          if (v15)
          {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(std::__shared_weak_count **)(a2 + 16);
          *(void *)(a2 + 8) = v14;
          *(void *)(a2 + 16) = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v16);
          }
          uint64_t v17 = *(void *)(v14 + 24);
          uint64_t v19 = *(void *)(v17 + 16);
          unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v13);
          }
          v40[0] = &unk_26E732CF0;
          v40[1] = v37;
          v40[2] = a4;
          v40[3] = v40;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v19 + 24))(v19, a2, v19, v40);
          std::__function::__value_func<void ()(re::ecs2::Entity *)>::~__value_func[abi:nn180100](v40);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v15);
          }
          v11 += 2;
          uint64_t v13 = v18;
        }
        while (v11 != v12);
      }
      uint64_t v7 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v20 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v35;
      *(void *)(a2 + 16) = v36;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v20);
      }
      uint64_t v21 = __p[0];
      if (__p[0])
      {
        do
        {
          uint64_t v22 = (void *)*v21;
          operator delete(v21);
          uint64_t v21 = v22;
        }
        while (v22);
      }
      uint64_t v23 = v37[0];
      v37[0] = 0;
      if (v23) {
        operator delete(v23);
      }
      uint64_t v24 = 0;
      if (!v18) {
        goto LABEL_32;
      }
    }
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
LABEL_32:
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 8);
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v22, (void *)(a1 + 8));
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(&v24, &v22, 1, a2);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v23);
  }
  if (v24)
  {
    uint64_t v6 = v25;
    *a3 = v24;
    a3[1] = v6;
  }
  else
  {
    std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v20, v5);
    uint64_t v7 = v20;
    uint64_t v8 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v8;
    uint64_t v9 = v7 + 24;
    uint64_t v10 = *(uint64_t **)(v7 + 32);
    if (v10 != (uint64_t *)(v7 + 24))
    {
      do
      {
        uint64_t v11 = (const void *)v10[2];
        if (v11)
        {
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = (std::__shared_weak_count *)v10[3];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v12[5])
            {
              uint64_t v15 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v9, v10, v12[4], v12 + 3);
              std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v9, v10);
              unint64_t v16 = (unint64_t)v13[5];
              uint64_t v10 = v15;
              unint64_t v17 = v16 - 1;
              if ((uint64_t)(v16 - 1) < 0)
              {
                do
                  uint64_t v10 = (uint64_t *)*v10;
                while (!__CFADD__(v17++, 1));
              }
              else if (v16 != 1)
              {
                do
                {
                  uint64_t v10 = (uint64_t *)v10[1];
                  --v16;
                }
                while (v16 > 1);
              }
              *(unsigned char *)(a2 + 24) = 1;
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v14);
            }
          }
        }
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10 != (uint64_t *)v9);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v19);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    }
    *a3 = 0;
    a3[1] = 0;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
    }
  }
}

void csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v34, (void *)(a1 + 8));
  uint64_t v5 = v34;
  uint64_t v4 = v35;
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
  }
  uint64_t v6 = (char *)operator new(0x60uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26E732D80;
  *((void *)v6 + 3) = 0;
  uint64_t v32 = v4;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = v6 + 40;
  *((void *)v6 + 6) = v6 + 40;
  *(_OWORD *)(v6 + + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  v6[88] = 0;
  std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back((uint64_t *)v6 + 5, v5, (uint64_t)v4);
  uint64_t v7 = a1 + 24;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8 != a1 + 24)
  {
    uint64_t v9 = 0;
    while (1)
    {
      (*(void (**)(void, uint64_t))(**(void **)(v8 + 16) + 40))(*(void *)(v8 + 16), a2);
      uint64_t v10 = *(void *)(a2 + 8);
      if (!*(unsigned char *)(v10 + 64)) {
        goto LABEL_46;
      }
      uint64_t v11 = *(void *)(a2 + 32);
      BOOL v12 = __CFADD__(v9, v11);
      uint64_t v13 = v9 + v11;
      if (v12) {
        uint64_t v9 = -1;
      }
      else {
        uint64_t v9 = v13;
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v16 = (char *)*((void *)v6 + 9);
        unint64_t v15 = *((void *)v6 + 10);
        if ((unint64_t)v16 >= v15) {
          goto LABEL_16;
        }
        *(void *)unint64_t v16 = v10;
        *((void *)v16 + 1) = v14;
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v16 = (char *)*((void *)v6 + 9);
        unint64_t v15 = *((void *)v6 + 10);
        if ((unint64_t)v16 >= v15)
        {
LABEL_16:
          uint64_t v33 = v9;
          unint64_t v18 = (char *)*((void *)v6 + 8);
          uint64_t v19 = (v16 - v18) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            abort();
          }
          uint64_t v21 = v7;
          uint64_t v22 = v15 - (void)v18;
          if (v22 >> 3 > v20) {
            unint64_t v20 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v20;
          }
          if (v23 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v24 = (char *)operator new(16 * v23);
          uint64_t v25 = &v24[16 * v19];
          *(void *)uint64_t v25 = v10;
          *((void *)v25 + 1) = v14;
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v18 = (char *)*((void *)v6 + 8);
            unint64_t v16 = (char *)*((void *)v6 + 9);
          }
          if (v16 == v18)
          {
            unint64_t v17 = v25 + 16;
            *((void *)v6 + 8) = v25;
            *((void *)v6 + 9) = v25 + 16;
            *((void *)v6 + 1ArcSharedObject::ArcSharedObject(this, 0) = &v24[16 * v23];
          }
          else
          {
            uint64_t v26 = &v24[16 * v19];
            do
            {
              long long v27 = *((_OWORD *)v16 - 1);
              v16 -= 16;
              *((_OWORD *)v26 - 1) = v27;
              v26 -= 16;
              *(void *)unint64_t v16 = 0;
              *((void *)v16 + 1) = 0;
            }
            while (v16 != v18);
            unint64_t v18 = (char *)*((void *)v6 + 8);
            uint8x8_t v28 = (char *)*((void *)v6 + 9);
            unint64_t v17 = v25 + 16;
            *((void *)v6 + 8) = v26;
            *((void *)v6 + 9) = v25 + 16;
            *((void *)v6 + 1ArcSharedObject::ArcSharedObject(this, 0) = &v24[16 * v23];
            if (v28 != v18)
            {
              uint64_t v7 = v21;
              uint64_t v9 = v33;
              do
              {
                uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
                if (v29) {
                  std::__shared_weak_count::__release_shared[abi:nn180100](v29);
                }
                v28 -= 16;
              }
              while (v28 != v18);
              if (!v18) {
                goto LABEL_35;
              }
LABEL_34:
              operator delete(v18);
              goto LABEL_35;
            }
          }
          uint64_t v7 = v21;
          uint64_t v9 = v33;
          if (!v18) {
            goto LABEL_35;
          }
          goto LABEL_34;
        }
        *(void *)unint64_t v16 = v10;
        *((void *)v16 + 1) = 0;
      }
      unint64_t v17 = v16 + 16;
LABEL_35:
      *((void *)v6 + 9) = v17;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v14);
      }
      *(unsigned char *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = -1;
      csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset(a2);
      uint64_t v8 = *(void *)(v8 + 8);
      if (v8 == v7) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_43:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  uint8x8_t v30 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v6 + 24;
  *(void *)(a2 + 8) = v6 + 24;
  *(void *)(a2 + 16) = v6;
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v30);
    uint64_t v31 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 32) = v9;
  v31[64] = 2;
  *(unsigned char *)(a2 + 24) = 1;
LABEL_46:
  std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v6);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v32);
  }
}

uint64_t std::__function::__value_func<void ()(re::ecs2::Entity *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::ecs2::Entity *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::~__func()
{
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E732CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E732CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int8x8_t v9 = (int8x8_t)v5[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = v8 & (*(void *)&v9 - 1);
    }
    BOOL v12 = *(void **)(*v5 + 8 * v11);
    if (v12)
    {
      for (unint64_t i = (void *)*v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
          }
          else
          {
            v14 &= *(void *)&v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  std::function<void ()(re::ecs2::Entity *)>::operator()(*(void *)(a1 + 16), *a2);
  unint64_t v15 = *(float **)(a1 + 8);
  unint64_t v16 = *((void *)v15 + 1);
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v8 >= v16) {
        unint64_t v2 = v8 % v16;
      }
    }
    else
    {
      unint64_t v2 = (v16 - 1) & v8;
    }
    unint64_t v18 = *(void **)(*(void *)v15 + 8 * v2);
    if (v18)
    {
      for (j = (void *)*v18; j; j = (void *)*j)
      {
        unint64_t v20 = j[1];
        if (v20 == v8)
        {
          if (j[2] == v4) {
            return;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v20 >= v16) {
              v20 %= v16;
            }
          }
          else
          {
            v20 &= v16 - 1;
          }
          if (v20 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v21 = operator new(0x18uLL);
  *uint64_t v21 = 0;
  v21[1] = v8;
  v21[2] = v4;
  float v22 = (float)(unint64_t)(*((void *)v15 + 3) + 1);
  float v23 = v15[8];
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v16 = *((void *)v15 + 1);
    }
    if (*(void *)&prime > v16) {
      goto LABEL_46;
    }
    if (*(void *)&prime < v16)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*((unint64_t *)v15 + 3) / v15[8]);
      if (v16 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v16)
      {
        unint64_t v16 = *((void *)v15 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint8x8_t v28 = operator new(8 * *(void *)&prime);
          uint64_t v29 = *(void **)v15;
          *(void *)unint64_t v15 = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *((int8x8_t *)v15 + 1) = prime;
          do
            *(void *)(*(void *)v15 + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          uint64_t v31 = (void *)*((void *)v15 + 2);
          if (v31)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v15 + 8 * v32) = v15 + 4;
            uint64_t v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(void *)(*(void *)v15 + 8 * v38))
                  {
                    *(void *)(*(void *)v15 + 8 * v38) = v31;
                    goto LABEL_71;
                  }
                  *uint64_t v31 = *v37;
                  *uint64_t v37 = **(void **)(*(void *)v15 + 8 * v38);
                  **(void **)(*(void *)v15 + 8 * v38) = v37;
                  uint64_t v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_71:
                uint64_t v31 = v37;
                uint64_t v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v16 = (unint64_t)prime;
          goto LABEL_75;
        }
        unint64_t v43 = *(void **)v15;
        *(void *)unint64_t v15 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v16 = 0;
        *((void *)v15 + 1) = 0;
      }
    }
LABEL_75:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v8 >= v16) {
        unint64_t v2 = v8 % v16;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v16 - 1) & v8;
    }
  }
  int v39 = *(void **)v15;
  unint64_t v40 = *(void **)(*(void *)v15 + 8 * v2);
  if (v40)
  {
    *uint64_t v21 = *v40;
LABEL_88:
    *unint64_t v40 = v21;
    goto LABEL_89;
  }
  uint64_t v41 = *((void *)v15 + 2);
  *uint64_t v21 = v41;
  *((void *)v15 + 2) = v21;
  v39[v2] = v15 + 4;
  if (v41)
  {
    unint64_t v42 = *(void *)(v41 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v42 >= v16) {
        v42 %= v16;
      }
    }
    else
    {
      v42 &= v16 - 1;
    }
    unint64_t v40 = (void *)(*(void *)v15 + 8 * v42);
    goto LABEL_88;
  }
LABEL_89:
  ++*((void *)v15 + 3);
}

uint64_t std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource> &,csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,std::function<void ()(re::ecs2::Entity*)>)::{lambda(re::ecs2::Entity*)#1}>,void ()(re::ecs2::Entity*)>::target_type()
{
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 5);
  unint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  void *result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void csq::v2::EvaluationContext<re::ecs2::Entity,re::query::SceneEntityDataSource>::reset(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26E732D80;
  *((void *)v2 + 11) = 0;
  *(_OWORD *)(v2 + + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((void *)v2 + 6) = v2 + 40;
  v2[88] = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = v2 + 40;
  *(void *)(a1 + 8) = v2 + 24;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~OrPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4 == (void *)(a1 + 24)) {
    return 0;
  }
  do
  {
    uint64_t v7 = v4[2];
    unint64_t v8 = (std::__shared_weak_count *)v4[3];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
    }
    if (v9) {
      break;
    }
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  return v9;
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v8 = v6;
  if (v7
    && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
        uint64_t v8 = *(void *)(a2 + 8),
        (uint64_t v9 = *(std::__shared_weak_count **)(a2 + 16)) != 0))
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void *)(v8 + 48) - *(void *)(v8 + 40);
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 48) - *(void *)(v8 + 40);
  }
  if (v10 >> 4)
  {
    if (v10 >> 4 == 1)
    {
      unint64_t v25 = v7;
      uint64_t v26 = v6;
      long long v27 = *(uint64_t **)(v6 + 40);
      uint64_t v29 = *v27;
      uint8x8_t v28 = (std::__shared_weak_count *)v27[1];
      uint64_t v30 = v28;
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v29;
      *(void *)(a2 + 16) = v28;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v31);
      }
      uint64_t v32 = *(void *)(v29 + 24);
      uint64_t v33 = *(void *)(v32 + 16);
      unint64_t v18 = *(std::__shared_weak_count **)(v32 + 24);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__function::__value_func<void ()(re::ecs2::Component *)>::__value_func[abi:nn180100]((uint64_t)v41, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v33 + 24))(v33, a2, v33, v41);
      std::__function::__value_func<void ()(re::ecs2::Component *)>::~__value_func[abi:nn180100](v41);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v34 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v26;
      *(void *)(a2 + 16) = v25;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v34);
      }
      BOOL v24 = v30;
      uint64_t v7 = v25;
      if (!v18) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v35 = v6;
      uint64_t v36 = v7;
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)__p = 0u;
      int v39 = 1065353216;
      unint64_t v11 = *(uint64_t **)(v6 + 40);
      BOOL v12 = *(uint64_t **)(v6 + 48);
      if (v11 == v12)
      {
        unint64_t v18 = 0;
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          uint64_t v14 = *v11;
          unint64_t v15 = (std::__shared_weak_count *)v11[1];
          if (v15)
          {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v16 = *(std::__shared_weak_count **)(a2 + 16);
          *(void *)(a2 + 8) = v14;
          *(void *)(a2 + 16) = v15;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v16);
          }
          uint64_t v17 = *(void *)(v14 + 24);
          uint64_t v19 = *(void *)(v17 + 16);
          unint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v13);
          }
          v40[0] = &unk_26E732E30;
          v40[1] = v37;
          v40[2] = a4;
          v40[3] = v40;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v19 + 24))(v19, a2, v19, v40);
          std::__function::__value_func<void ()(re::ecs2::Component *)>::~__value_func[abi:nn180100](v40);
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v15);
          }
          v11 += 2;
          uint64_t v13 = v18;
        }
        while (v11 != v12);
      }
      uint64_t v7 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v20 = *(std::__shared_weak_count **)(a2 + 16);
      *(void *)(a2 + 8) = v35;
      *(void *)(a2 + 16) = v36;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v20);
      }
      uint64_t v21 = __p[0];
      if (__p[0])
      {
        do
        {
          float v22 = (void *)*v21;
          operator delete(v21);
          uint64_t v21 = v22;
        }
        while (v22);
      }
      float v23 = v37[0];
      v37[0] = 0;
      if (v23) {
        operator delete(v23);
      }
      BOOL v24 = 0;
      if (!v18) {
        goto LABEL_32;
      }
    }
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
LABEL_32:
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v7);
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  v26[0] = v6;
  if (!v5) {
    goto LABEL_28;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v5);
  v26[1] = (uint64_t)v8;
  if (!v8) {
    goto LABEL_28;
  }
  uint64_t v9 = v8;
  csq::v2::applyDominantAndIdentityLaws<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(&v27, v26, 1, a2);
  std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  if (v27)
  {
    uint64_t v10 = v28;
    *a3 = v27;
    a3[1] = v10;
    return;
  }
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11 || (uint64_t v12 = *(void *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0))
  {
LABEL_28:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize();
    return;
  }
  unint64_t v25 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = v12 + 24;
  unint64_t v15 = *(uint64_t **)(v12 + 32);
  if (v15 != (uint64_t *)(v12 + 24))
  {
    do
    {
      unint64_t v16 = (const void *)v15[2];
      if (v16)
      {
        if (v17)
        {
          unint64_t v18 = v17;
          uint64_t v19 = (std::__shared_weak_count *)v15[3];
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v17[5])
          {
            unint64_t v20 = std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__insert_with_sentinel[abi:nn180100]<std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>,std::__list_iterator<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>,void *>>(v14, v15, v17[4], v17 + 3);
            std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::erase(v14, v15);
            unint64_t v21 = (unint64_t)v18[5];
            unint64_t v15 = v20;
            unint64_t v22 = v21 - 1;
            if ((uint64_t)(v21 - 1) < 0)
            {
              do
                unint64_t v15 = (uint64_t *)*v15;
              while (!__CFADD__(v22++, 1));
            }
            else if (v21 != 1)
            {
              do
              {
                unint64_t v15 = (uint64_t *)v15[1];
                --v21;
              }
              while (v21 > 1);
            }
            *(unsigned char *)(a2 + 24) = 1;
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v19);
          }
        }
      }
      unint64_t v15 = (uint64_t *)v15[1];
    }
    while (v15 != (uint64_t *)v14);
  }
  std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  std::__shared_weak_count::__release_shared[abi:nn180100](v25);
  *a3 = 0;
  a3[1] = 0;
  BOOL v24 = v28;
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v24);
  }
}

void csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::preEvaluateOptimize(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v3)) != 0))
  {
    uint64_t v7 = (uint64_t)v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v6);
    uint64_t v8 = (char *)operator new(0x60uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)uint64_t v8 = &unk_26E732EC0;
    *((void *)v8 + 3) = 0;
    uint64_t v35 = (std::__shared_weak_count *)v7;
    *((void *)v8 + 4) = 0;
    *((void *)v8 + 5) = v8 + 40;
    *((void *)v8 + 6) = v8 + 40;
    *(_OWORD *)(v8 + + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    v8[88] = 0;
    std::list<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::push_back((uint64_t *)v8 + 5, v5, v7);
    uint64_t v9 = a1 + 3;
    uint64_t v10 = a1[4];
    if ((void *)v10 != a1 + 3)
    {
      uint64_t v11 = 0;
      uint64_t v36 = a1 + 3;
      while (1)
      {
        (*(void (**)(void, uint64_t))(**(void **)(v10 + 16) + 40))(*(void *)(v10 + 16), a2);
        uint64_t v12 = *(void *)(a2 + 8);
        if (!*(unsigned char *)(v12 + 64)) {
          goto LABEL_45;
        }
        uint64_t v13 = *(void *)(a2 + 32);
        BOOL v14 = __CFADD__(v11, v13);
        uint64_t v15 = v11 + v13;
        if (v14) {
          uint64_t v11 = -1;
        }
        else {
          uint64_t v11 = v15;
        }
        unint64_t v16 = *(std::__shared_weak_count **)(a2 + 16);
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v18 = (char *)*((void *)v8 + 9);
          unint64_t v17 = *((void *)v8 + 10);
          if ((unint64_t)v18 >= v17) {
            goto LABEL_15;
          }
          *(void *)unint64_t v18 = v12;
          *((void *)v18 + 1) = v16;
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          unint64_t v18 = (char *)*((void *)v8 + 9);
          unint64_t v17 = *((void *)v8 + 10);
          if ((unint64_t)v18 >= v17)
          {
LABEL_15:
            unint64_t v20 = (char *)*((void *)v8 + 8);
            uint64_t v21 = (v18 - v20) >> 4;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 60) {
              abort();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 3 > v22) {
              unint64_t v22 = v23 >> 3;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v25 = (char *)operator new(16 * v24);
            uint64_t v26 = &v25[16 * v21];
            *(void *)uint64_t v26 = v12;
            *((void *)v26 + 1) = v16;
            if (v16)
            {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v20 = (char *)*((void *)v8 + 8);
              unint64_t v18 = (char *)*((void *)v8 + 9);
            }
            if (v18 == v20)
            {
              uint64_t v19 = v26 + 16;
              *((void *)v8 + 8) = v26;
              *((void *)v8 + 9) = v26 + 16;
              *((void *)v8 + 1ArcSharedObject::ArcSharedObject(this, 0) = &v25[16 * v24];
            }
            else
            {
              uint64_t v27 = &v25[16 * v21];
              do
              {
                long long v28 = *((_OWORD *)v18 - 1);
                v18 -= 16;
                *((_OWORD *)v27 - 1) = v28;
                v27 -= 16;
                *(void *)unint64_t v18 = 0;
                *((void *)v18 + 1) = 0;
              }
              while (v18 != v20);
              unint64_t v20 = (char *)*((void *)v8 + 8);
              uint64_t v29 = (char *)*((void *)v8 + 9);
              uint64_t v19 = v26 + 16;
              *((void *)v8 + 8) = v27;
              *((void *)v8 + 9) = v26 + 16;
              *((void *)v8 + 1ArcSharedObject::ArcSharedObject(this, 0) = &v25[16 * v24];
              if (v29 != v20)
              {
                do
                {
                  uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 - 1);
                  if (v30) {
                    std::__shared_weak_count::__release_shared[abi:nn180100](v30);
                  }
                  v29 -= 16;
                }
                while (v29 != v20);
                if (v20) {
LABEL_32:
                }
                  operator delete(v20);
LABEL_33:
                uint64_t v9 = v36;
                goto LABEL_34;
              }
            }
            if (v20) {
              goto LABEL_32;
            }
            goto LABEL_33;
          }
          *(void *)unint64_t v18 = v12;
          *((void *)v18 + 1) = 0;
        }
        uint64_t v19 = v18 + 16;
LABEL_34:
        *((void *)v8 + 9) = v19;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v16);
        }
        *(unsigned char *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = -1;
        csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset(a2);
        uint64_t v10 = *(void *)(v10 + 8);
        if ((void *)v10 == v9) {
          goto LABEL_42;
        }
      }
    }
    uint64_t v11 = 0;
LABEL_42:
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    uint64_t v31 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v32 = v8 + 24;
    *(void *)(a2 + 8) = v8 + 24;
    *(void *)(a2 + 16) = v8;
    if (v31)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v31);
      uint64_t v32 = *(char **)(a2 + 8);
    }
    *(void *)(a2 + 32) = v11;
    v32[64] = 2;
    *(unsigned char *)(a2 + 24) = 1;
LABEL_45:
    std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v8);
    std::__shared_weak_count::__release_shared[abi:nn180100](v35);
  }
  else
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    std::__function::__value_func<void ()(re::ecs2::Component *)>::__value_func[abi:nn180100](v33, v34);
  }
}

uint64_t std::__function::__value_func<void ()(re::ecs2::Component *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::ecs2::Component *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::~__func()
{
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E732E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E732E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int8x8_t v9 = (int8x8_t)v5[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = v8 & (*(void *)&v9 - 1);
    }
    uint64_t v12 = *(void **)(*v5 + 8 * v11);
    if (v12)
    {
      for (unint64_t i = (void *)*v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
          }
          else
          {
            v14 &= *(void *)&v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 24);
  uint64_t v45 = *a2;
  if (!v15)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_101;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v45);
  unint64_t v16 = *(float **)(a1 + 8);
  unint64_t v17 = *((void *)v16 + 1);
  if (v17)
  {
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v8 >= v17) {
        unint64_t v2 = v8 % v17;
      }
    }
    else
    {
      unint64_t v2 = (v17 - 1) & v8;
    }
    uint64_t v19 = *(void **)(*(void *)v16 + 8 * v2);
    if (v19)
    {
      for (j = (void *)*v19; j; j = (void *)*j)
      {
        unint64_t v21 = j[1];
        if (v21 == v8)
        {
          if (j[2] == v4) {
            return;
          }
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v21 >= v17) {
              v21 %= v17;
            }
          }
          else
          {
            v21 &= v17 - 1;
          }
          if (v21 != v2) {
            break;
          }
        }
      }
    }
  }
  unint64_t v22 = operator new(0x18uLL);
  *unint64_t v22 = 0;
  v22[1] = v8;
  v22[2] = v4;
  float v23 = (float)(unint64_t)(*((void *)v16 + 3) + 1);
  float v24 = v16[8];
  if (!v17 || (float)(v24 * (float)v17) < v23)
  {
    BOOL v25 = 1;
    if (v17 >= 3) {
      BOOL v25 = (v17 & (v17 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v17);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v17 = *((void *)v16 + 1);
    }
    if (*(void *)&prime > v17)
    {
LABEL_47:
      if (!(*(void *)&prime >> 61))
      {
        uint64_t v29 = operator new(8 * *(void *)&prime);
        uint64_t v30 = *(void **)v16;
        *(void *)unint64_t v16 = v29;
        if (v30) {
          operator delete(v30);
        }
        uint64_t v31 = 0;
        *((int8x8_t *)v16 + 1) = prime;
        do
          *(void *)(*(void *)v16 + 8 * v31++) = 0;
        while (*(void *)&prime != v31);
        uint64_t v32 = (void *)*((void *)v16 + 2);
        if (v32)
        {
          unint64_t v33 = v32[1];
          uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            if (v33 >= *(void *)&prime) {
              v33 %= *(void *)&prime;
            }
          }
          else
          {
            v33 &= *(void *)&prime - 1;
          }
          *(void *)(*(void *)v16 + 8 * v33) = v16 + 4;
          unint64_t v38 = (void *)*v32;
          if (*v32)
          {
            do
            {
              unint64_t v39 = v38[1];
              if (v34.u32[0] > 1uLL)
              {
                if (v39 >= *(void *)&prime) {
                  v39 %= *(void *)&prime;
                }
              }
              else
              {
                v39 &= *(void *)&prime - 1;
              }
              if (v39 != v33)
              {
                if (!*(void *)(*(void *)v16 + 8 * v39))
                {
                  *(void *)(*(void *)v16 + 8 * v39) = v32;
                  goto LABEL_72;
                }
                *uint64_t v32 = *v38;
                *unint64_t v38 = **(void **)(*(void *)v16 + 8 * v39);
                **(void **)(*(void *)v16 + 8 * v39) = v38;
                unint64_t v38 = v32;
              }
              unint64_t v39 = v33;
LABEL_72:
              uint64_t v32 = v38;
              unint64_t v38 = (void *)*v38;
              unint64_t v33 = v39;
            }
            while (v38);
          }
        }
        unint64_t v17 = (unint64_t)prime;
        goto LABEL_76;
      }
LABEL_101:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(void *)&prime < v17)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)v16 + 3) / v16[8]);
      if (v17 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v17)
      {
        unint64_t v17 = *((void *)v16 + 1);
      }
      else
      {
        if (prime) {
          goto LABEL_47;
        }
        unint64_t v44 = *(void **)v16;
        *(void *)unint64_t v16 = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v17 = 0;
        *((void *)v16 + 1) = 0;
      }
    }
LABEL_76:
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v8 >= v17) {
        unint64_t v2 = v8 % v17;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v17 - 1) & v8;
    }
  }
  unint64_t v40 = *(void **)v16;
  uint64_t v41 = *(void **)(*(void *)v16 + 8 * v2);
  if (v41)
  {
    *unint64_t v22 = *v41;
LABEL_89:
    void *v41 = v22;
    goto LABEL_90;
  }
  uint64_t v42 = *((void *)v16 + 2);
  *unint64_t v22 = v42;
  *((void *)v16 + 2) = v22;
  v40[v2] = v16 + 4;
  if (v42)
  {
    unint64_t v43 = *(void *)(v42 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v43 >= v17) {
        v43 %= v17;
      }
    }
    else
    {
      v43 &= v17 - 1;
    }
    uint64_t v41 = (void *)(*(void *)v16 + 8 * v43);
    goto LABEL_89;
  }
LABEL_90:
  ++*((void *)v16 + 3);
}

uint64_t std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1},std::allocator<csq::v2::OrPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::forEachInSubset(csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> &,csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,std::function<void ()(re::ecs2::Component*)>)::{lambda(re::ecs2::Component*)#1}>,void ()(re::ecs2::Component*)>::target_type()
{
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<csq::v2::DataSourceTreeNode<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 5);
  unint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void csq::v2::EvaluationContext<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::reset(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26E732EC0;
  *((void *)v2 + 11) = 0;
  *(_OWORD *)(v2 + + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((void *)v2 + 6) = v2 + 40;
  v2[88] = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 16) = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = v2 + 40;
  *(void *)(a1 + 8) = v2 + 24;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~NotPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 32) + 16) + 16))(*(void *)(*(void *)(a1 + 32) + 16)) ^ 1;
}

void csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count **a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 != a1 + 24)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 16) + 32))(&v39);
      uint64_t v8 = v39;
      if (v39)
      {
        int8x8_t v9 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint8x8_t v10 = *(std::__shared_weak_count **)(v7 + 24);
        *(void *)(v7 + 16) = v8;
        *(void *)(v7 + 24) = v9;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v10);
        }
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v40);
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
    uint64_t v6 = *(void *)(v4 + 32);
  }
  unint64_t v11 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v11) {
    goto LABEL_42;
  }
  if (v12)
  {
    uint64_t v13 = v12;
    unint64_t v14 = *(std::__shared_weak_count **)(v6 + 24);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v15 = v13[4];
    unint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
    unint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v14);
    }
    if (v16)
    {
      *a3 = v16;
      a3[1] = v17;
      return;
    }
    uint64_t v6 = *(void *)(v4 + 32);
    unint64_t v11 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v11)
    {
      uint64_t v30 = 0;
      if (!v17) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  else
  {
    unint64_t v17 = 0;
  }
  if (!v18)
  {
    uint64_t v30 = 0;
    unint64_t v11 = 0;
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v19 = v18;
  uint64_t v37 = v4;
  unint64_t v38 = a3;
  unint64_t v20 = *(std::__shared_weak_count **)(v6 + 24);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v36 = v20;
  unint64_t v11 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11->__shared_weak_owners_ = 0;
  v11->__shared_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732F70;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)&v11[2];
  v11[2].__shared_owners_ = (uint64_t)&v11[2];
  v11[2].__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732B30;
  v11[1].__shared_owners_ = (uint64_t)&v11[1];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v11[1].__shared_weak_owners_ = (uint64_t)v11;
  std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  unint64_t v21 = v19 + 3;
  unint64_t v22 = (void *)v19[4];
  if (v22 != v19 + 3)
  {
    do
    {
      float v23 = (void (__cdecl *)(std::__shared_count *__hidden))v22[2];
      float v24 = (std::__shared_weak_count *)v22[3];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v25 = (std::__shared_weak_count *)operator new(0x48uLL);
      v25->__shared_weak_owners_ = 0;
      v25->__shared_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732FC0;
      v25[2].__vftable = (std::__shared_weak_count_vtbl *)&v25[2];
      v25[2].__shared_owners_ = (uint64_t)&v25[2];
      v25[2].__shared_weak_owners_ = 0;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732F10;
      v25[1].__shared_owners_ = (uint64_t)&v25[1];
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[1].__shared_weak_owners_ = (uint64_t)v25;
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
      unint64_t v26 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
      v26->__on_zero_shared = v23;
      v26->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v27 = v25[2].__vftable;
      v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
      v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v25[2];
      v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
      v25[2].__vftable = v26;
      ++v25[2].__shared_weak_owners_;
      long long v28 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
      v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v25[1];
      v28->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v25;
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v29 = v11[2].__vftable;
      v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
      v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v11[2];
      v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
      v11[2].__vftable = v28;
      ++v11[2].__shared_weak_owners_;
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v24);
      }
      unint64_t v22 = (void *)v22[1];
    }
    while (v22 != v21);
  }
  *(unsigned char *)(a2 + 24) = 1;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v36);
  }
  uint64_t v4 = v37;
  a3 = v38;
  uint64_t v30 = v11 + 1;
  if (v17) {
LABEL_39:
  }
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
LABEL_40:
  if (v30)
  {
    *a3 = v30;
    a3[1] = v11;
    return;
  }
LABEL_42:
  uint64_t v31 = *(void *)(v4 + 32);
  uint64_t v32 = *(const void **)(v31 + 16);
  if (!v32)
  {
    uint8x8_t v34 = 0;
LABEL_48:
    unint64_t v35 = 0;
    if (!v11) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint8x8_t v34 = v33;
  if (!v33) {
    goto LABEL_48;
  }
  unint64_t v35 = *(std::__shared_weak_count **)(v31 + 24);
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    LOBYTE(v33[2].__vftable) ^= 1u;
    *(unsigned char *)(a2 + 24) = 1;
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    if (!v11) {
      goto LABEL_50;
    }
LABEL_49:
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
    goto LABEL_50;
  }
  LOBYTE(v33[2].__vftable) ^= 1u;
  *(unsigned char *)(a2 + 24) = 1;
  if (v11) {
    goto LABEL_49;
  }
LABEL_50:
  if (v34)
  {
    *a3 = v34;
    a3[1] = v35;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
  }
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~NotPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 32) + 16) + 16))(*(void *)(*(void *)(a1 + 32) + 16)) ^ 1;
}

void csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::postCreateOptimize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count **a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 != a1 + 24)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v7 + 16) + 32))(&v39);
      uint64_t v8 = v39;
      if (v39)
      {
        int8x8_t v9 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint8x8_t v10 = *(std::__shared_weak_count **)(v7 + 24);
        *(void *)(v7 + 16) = v8;
        *(void *)(v7 + 24) = v9;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v10);
        }
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v40);
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
    uint64_t v6 = *(void *)(v4 + 32);
  }
  unint64_t v11 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v11) {
    goto LABEL_42;
  }
  if (v12)
  {
    uint64_t v13 = v12;
    unint64_t v14 = *(std::__shared_weak_count **)(v6 + 24);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v15 = v13[4];
    unint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
    unint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v14);
    }
    if (v16)
    {
      *a3 = v16;
      a3[1] = v17;
      return;
    }
    uint64_t v6 = *(void *)(v4 + 32);
    unint64_t v11 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v11)
    {
      uint64_t v30 = 0;
      if (!v17) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  else
  {
    unint64_t v17 = 0;
  }
  if (!v18)
  {
    uint64_t v30 = 0;
    unint64_t v11 = 0;
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v19 = v18;
  uint64_t v37 = v4;
  unint64_t v38 = a3;
  unint64_t v20 = *(std::__shared_weak_count **)(v6 + 24);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v36 = v20;
  unint64_t v11 = (std::__shared_weak_count *)operator new(0x48uLL);
  v11->__shared_weak_owners_ = 0;
  v11->__shared_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E733070;
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)&v11[2];
  v11[2].__shared_owners_ = (uint64_t)&v11[2];
  v11[2].__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26E732BA8;
  v11[1].__shared_owners_ = (uint64_t)&v11[1];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v11[1].__shared_weak_owners_ = (uint64_t)v11;
  std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  unint64_t v21 = v19 + 3;
  unint64_t v22 = (void *)v19[4];
  if (v22 != v19 + 3)
  {
    do
    {
      float v23 = (void (__cdecl *)(std::__shared_count *__hidden))v22[2];
      float v24 = (std::__shared_weak_count *)v22[3];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v25 = (std::__shared_weak_count *)operator new(0x48uLL);
      v25->__shared_weak_owners_ = 0;
      v25->__shared_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E7330C0;
      v25[2].__vftable = (std::__shared_weak_count_vtbl *)&v25[2];
      v25[2].__shared_owners_ = (uint64_t)&v25[2];
      v25[2].__shared_weak_owners_ = 0;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26E733010;
      v25[1].__shared_owners_ = (uint64_t)&v25[1];
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v25[1].__shared_weak_owners_ = (uint64_t)v25;
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
      unint64_t v26 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
      v26->__on_zero_shared = v23;
      v26->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v27 = v25[2].__vftable;
      v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
      v26->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v25[2];
      v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
      v25[2].__vftable = v26;
      ++v25[2].__shared_weak_owners_;
      long long v28 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
      v28->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v25[1];
      v28->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v25;
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v29 = v11[2].__vftable;
      v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
      v28->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v11[2];
      v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
      v11[2].__vftable = v28;
      ++v11[2].__shared_weak_owners_;
      std::__shared_weak_count::__release_shared[abi:nn180100](v25);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v24);
      }
      unint64_t v22 = (void *)v22[1];
    }
    while (v22 != v21);
  }
  *(unsigned char *)(a2 + 24) = 1;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v36);
  }
  uint64_t v4 = v37;
  a3 = v38;
  uint64_t v30 = v11 + 1;
  if (v17) {
LABEL_39:
  }
    std::__shared_weak_count::__release_shared[abi:nn180100](v17);
LABEL_40:
  if (v30)
  {
    *a3 = v30;
    a3[1] = v11;
    return;
  }
LABEL_42:
  uint64_t v31 = *(void *)(v4 + 32);
  uint64_t v32 = *(const void **)(v31 + 16);
  if (!v32)
  {
    uint8x8_t v34 = 0;
LABEL_48:
    unint64_t v35 = 0;
    if (!v11) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  uint8x8_t v34 = v33;
  if (!v33) {
    goto LABEL_48;
  }
  unint64_t v35 = *(std::__shared_weak_count **)(v31 + 24);
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    LOBYTE(v33[2].__vftable) ^= 1u;
    *(unsigned char *)(a2 + 24) = 1;
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    if (!v11) {
      goto LABEL_50;
    }
LABEL_49:
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
    goto LABEL_50;
  }
  LOBYTE(v33[2].__vftable) ^= 1u;
  *(unsigned char *)(a2 + 24) = 1;
  if (v11) {
    goto LABEL_49;
  }
LABEL_50:
  if (v34)
  {
    *a3 = v34;
    a3[1] = v35;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v35);
    }
  }
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E733070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E733070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<csq::v2::AndPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E7330C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E7330C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_emplace<csq::v2::NotPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void csq::v2::FunctorBasedPropertyPredicate<csq::v2::PropertyValueBasedFunctor<re::query::EntityActiveProperty,std::equal_to<BOOL>>,re::query::EntityActiveProperty,re::ecs2::Entity,re::query::SceneEntityDataSource>::~FunctorBasedPropertyPredicate(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

BOOL csq::v2::FunctorBasedPropertyPredicate<csq::v2::PropertyValueBasedFunctor<re::query::EntityActiveProperty,std::equal_to<BOOL>>,re::query::EntityActiveProperty,re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 288) & 1) == *(unsigned char *)(a1 + 48);
}

void re::query::IsDescendantPredicate::~IsDescendantPredicate(re::query::IsDescendantPredicate *this)
{
  *(void *)this = &unk_26E733188;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100]((void *)this + 7);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E733188;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100]((void *)this + 7);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::query::IsDescendantPredicate::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 24);
    if (!v3 || (*(unsigned char *)(v3 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else
    {
      do
      {
        uint64_t result = v2 == v3;
        if (v2 == v3) {
          break;
        }
        uint64_t v3 = *(void *)(v3 + 24);
        if (!v3) {
          break;
        }
      }
      while ((*(unsigned char *)(v3 + 288) & 0x80) == 0);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_ancester != nullptr", "evaluate", 28);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::query::IsDescendantPredicate::onPerformQuery(re::query::IsDescendantPredicate *this)
{
  uint64_t result = *((void *)this + 10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    *((void *)this + 6) = result;
  }
  return result;
}

uint64_t std::__function::__value_func<re::ecs2::Entity const* ()(void)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void re::query::IsChildPredicate::~IsChildPredicate(re::query::IsChildPredicate *this)
{
  *(void *)this = &unk_26E7331E8;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100]((void *)this + 7);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7331E8;
  std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100]((void *)this + 7);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::query::IsChildPredicate::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (*(void *)(*(void *)(*(void *)(a3 + 8) + 16) + 16) == a1)
    {
      return 1;
    }
    else
    {
      uint64_t v4 = *(void *)(a2 + 24);
      if (v4)
      {
        if ((*(unsigned char *)(v4 + 288) & 0x80) != 0) {
          uint64_t v4 = 0;
        }
      }
      return v3 == v4;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_parent != nullptr", "evaluate", 81);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::query::IsChildPredicate::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v4 + 328);
  if (v5)
  {
    int8x8_t v9 = *(uint64_t **)(v4 + 344);
    uint64_t v10 = 8 * v5;
    do
    {
      uint64_t v11 = *v9;
      if ((*(unsigned char *)(*v9 + 289) & 4) == 0)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 16))(a3, *v9, a2)) {
          std::function<void ()(re::ecs2::Entity *)>::operator()(a4, v11);
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
}

void re::query::IsChildPredicate::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 328);
  }
  *(void *)(a2 + 32) = v3;
  uint64_t v13 = (uint64_t)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v12, (void *)(a1 + 8));
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = v12;
  uint64_t v5 = v14;
  *(void *)uint64_t v4 = &v13;
  *((void *)v4 + 1) = v5;
  uint64_t *v5 = (uint64_t)v4;
  unint64_t v14 = (uint64_t *)v4;
  ++v15;
  uint64_t v6 = *(void *)(a2 + 8);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v6 + 16));
  uint64_t v7 = v15;
  if (v15)
  {
    uint64_t v9 = v13;
    uint64_t v8 = v14;
    uint64_t v10 = *v14;
    *(void *)(v10 + 8) = *(void *)(v13 + 8);
    **(void **)(v9 + 8) = v10;
    uint64_t v11 = *(void *)(v6 + 16);
    *(void *)(v11 + 8) = v8;
    *uint64_t v8 = v11;
    *(void *)(v6 + 16) = v9;
    *(void *)(v9 + 8) = v6 + 16;
    *(void *)(v6 + 32) += v7;
    uint64_t v15 = 0;
  }
  *(unsigned char *)(*(void *)(a2 + 8) + 64) = 4;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v13);
}

uint64_t re::query::IsChildPredicate::onPerformQuery(re::query::IsChildPredicate *this)
{
  uint64_t result = *((void *)this + 10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    *((void *)this + 6) = result;
  }
  return result;
}

void re::query::SceneEntityDataSource::~SceneEntityDataSource(re::query::SceneEntityDataSource *this)
{
}

void *std::__function::__value_func<re::ecs2::Entity const* ()(void)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26E733278;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733278;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateCustomEntityPredicate::$_0,std::allocator<REQueryCreateCustomEntityPredicate::$_0>,BOOL ()(re::ecs2::Entity const*)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(re::ecs2::Entity const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(void *a1)
{
  *a1 = &unk_26E733308;
  std::__function::__value_func<BOOL ()(re::ecs2::Entity const*)>::~__value_func[abi:nn180100](a1 + 6);
  return csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
}

void csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::~CustomPredicate(void *a1)
{
  *a1 = &unk_26E733308;
  std::__function::__value_func<BOOL ()(re::ecs2::Entity const*)>::~__value_func[abi:nn180100](a1 + 6);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::CustomPredicate<re::ecs2::Entity,re::query::SceneEntityDataSource>::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v5 = a2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::~__func(v4);
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26E733368;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733368;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateCustomComponentPredicate::$_0,std::allocator<REQueryCreateCustomComponentPredicate::$_0>,BOOL ()(re::ecs2::Component const*)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(re::ecs2::Component const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(void *a1)
{
  *a1 = &unk_26E7333F8;
  std::__function::__value_func<BOOL ()(re::ecs2::Component const*)>::~__value_func[abi:nn180100](a1 + 6);
  return csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
}

void csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::~CustomPredicate(void *a1)
{
  *a1 = &unk_26E7333F8;
  std::__function::__value_func<BOOL ()(re::ecs2::Component const*)>::~__value_func[abi:nn180100](a1 + 6);
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t csq::v2::CustomPredicate<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v5 = a2;
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(v4);
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26E733458;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733458;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateIsDescendantCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsDescendantCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target_type()
{
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26E7334E8;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7334E8;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryCreateIsChildCallbackEntityPredicate::$_0,std::allocator<REQueryCreateIsChildCallbackEntityPredicate::$_0>,re::ecs2::Entity const* ()(void)>::target_type()
{
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__on_zero_shared(uint64_t a1)
{
  return re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(*(re **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryConnectEntityPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__on_zero_shared(uint64_t a1)
{
  return re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(*(re **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryConnectComponentPredicates::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__on_zero_shared(uint64_t a1)
{
  return re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>(*(re **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource> *,REQueryCreateEntityQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__on_zero_shared(uint64_t a1)
{
  return re::internal::destroyPersistent<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>(*(re **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase> *,REQueryCreateComponentQuery::$_0,std::allocator<csq::v2::PredicateBase<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v2 + 3;
  uint64_t v4 = (void *)v2[4];
  if (v4 != v2 + 3)
  {
    do
    {
      uint64_t v5 = (std::__shared_weak_count *)v4[3];
      v8[0] = v4[2];
      v8[1] = v5;
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v8);
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
      else
      {
        csq::v2::Query<re::ecs2::Entity,re::query::SceneEntityDataSource>::notifyPerformQuery(v8);
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != v3);
    uint64_t v2 = *a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*v2 + 48);
  return v6();
}

void std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::~__func()
{
}

void *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E7336E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7336E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::operator()(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(*(void **)(a1 + 8));
}

uint64_t std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REQueryEvaluateEntityQuery::$_0,std::allocator<REQueryEvaluateEntityQuery::$_0>,void ()(re::ecs2::Entity *)>::target_type()
{
}

void std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::~__func()
{
}

__n128 std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E733768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E733768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::operator()(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((*(unsigned char *)(v2 + 289) & 4) == 0)
  {
    uint64_t v3 = *(void *)result[1];
    if (v3)
    {
      uint64_t v4 = v2;
      while (v4 != v3)
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4 || (*(unsigned char *)(v4 + 288) & 0x80) != 0) {
          return result;
        }
      }
    }
    return (*(void *(**)(void *__return_ptr))(*(void *)result[2] + 16))((void *)result[2]);
  }
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REQueryEvaluateEntityQueryWithRootEntity::$_0,std::allocator<REQueryEvaluateEntityQueryWithRootEntity::$_0>,void ()(re::ecs2::Entity *)>::target_type()
{
}

uint64_t csq::v2::Query<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::notifyPerformQuery(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v2 + 3;
  uint64_t v4 = (void *)v2[4];
  if (v4 != v2 + 3)
  {
    do
    {
      uint64_t v5 = (std::__shared_weak_count *)v4[3];
      v8[0] = v4[2];
      v8[1] = v5;
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        csq::v2::Query<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::notifyPerformQuery(v8);
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
      else
      {
        csq::v2::Query<re::ecs2::Component,re::ecs2::SceneComponentCollectionBase>::notifyPerformQuery(v8);
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != v3);
    uint64_t v2 = *a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(*v2 + 48);
  return v6();
}

void std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::~__func()
{
}

void *std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E7337E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E7337E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REQueryEvaluateComponentQuery::$_0,std::allocator<REQueryEvaluateComponentQuery::$_0>,void ()(re::ecs2::Component *)>::target_type()
{
}

uint64_t RECIntrospectionAlloc(re *a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) byteCount must not be negative.", "byteCount >= 0", "RECIntrospectionAlloc", 9);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(a1)[2] + 32);
    return v2();
  }
  return result;
}

re *RECIntrospectionFree(re *result)
{
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(result)[2] + 40);
    return (re *)v1();
  }
  return result;
}

void REFromToByAnimationDefaultParameters(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
}

double RESampledAnimationDefaultParameters@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 17) = 1;
  *(_DWORD *)(a1 + 2ArcSharedObject::ArcSharedObject(this, 0) = 1023969417;
  return result;
}

int64x2_t REAnimationClipDefaultParameters@<Q0>(int64x2_t *a1@<X8>)
{
  a1->i8[0] = 0;
  a1->i64[1] = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = result;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0x7FF8000000000000;
  a1[3].i32[2] = 1065353216;
  a1[3].i16[6] = 0;
  return result;
}

int64x2_t REAnimationClipDefaultParametersEx@<Q0>(int64x2_t *a1@<X8>)
{
  a1->i8[0] = 0;
  a1->i64[1] = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = result;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i64[0] = 0x7FF8000000000000;
  a1[3].i32[2] = 1065353216;
  a1[3].i16[6] = 0;
  a1[3].i8[14] = 0;
  return result;
}

void RECreateBackEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(void *)a1 = &unk_26E6C0518;
  *(void *)(a1 + 8) = 0;
  *(float *)(a1 + 16) = a2;
}

uint64_t RECreateBounceEase@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)(a2 + 8) = 1;
  *(void *)a2 = &unk_26E6C0570;
  *(_DWORD *)(a2 + 16) = result;
  *(float *)(a2 + 2ArcSharedObject::ArcSharedObject(this, 0) = a3;
  return result;
}

double RECreateCircleEase@<D0>(void *a1@<X8>)
{
  *(void *)&double result = 2;
  a1[1] = 2;
  *a1 = &unk_26E6C05C8;
  return result;
}

uint64_t RECreateElasticEase@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)(a2 + 8) = 3;
  *(void *)a2 = &unk_26E6C0620;
  *(_DWORD *)(a2 + 16) = result;
  *(float *)(a2 + 2ArcSharedObject::ArcSharedObject(this, 0) = a3;
  return result;
}

void RECreateExponentialEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(void *)(a1 + 8) = 4;
  *(void *)a1 = &unk_26E6C0678;
  *(float *)(a1 + 16) = a2;
}

double RECreateHermiteEase@<D0>(void *a1@<X8>)
{
  *(void *)&double result = 5;
  a1[1] = 5;
  *a1 = &unk_26E6BFF90;
  return result;
}

void RECreateLogarithmicEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(void *)(a1 + 8) = 6;
  *(void *)a1 = &unk_26E6C06D0;
  *(float *)(a1 + 16) = a2;
}

void RECreatePowerEase(uint64_t a1@<X8>, float a2@<S0>)
{
  *(void *)(a1 + 8) = 7;
  *(void *)a1 = &unk_26E6C0728;
  *(float *)(a1 + 16) = a2;
}

double RECreateSineEase@<D0>(void *a1@<X8>)
{
  *(void *)&double result = 8;
  a1[1] = 8;
  *a1 = &unk_26E6C0780;
  return result;
}

void RECreateCubicBezierEase(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(_DWORD *)(a1 + 8) = 9;
  *(void *)a1 = &unk_26E6C07D8;
  *(double *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
}

float REEasingFunctionEvaluateBackEase(float a1, float a2)
{
  return (float)(sinf(a2 * -3.1416) * (float)(fmaxf(a1, 0.0) * a2)) + (float)((float)(a2 * a2) * a2);
}

float REEasingFunctionEvaluateBounceEase(re *a1, float a2, float a3)
{
  return re::bounceEase(a1, a3, a2);
}

float REEasingFunctionEvaluateCircleEase(float a1)
{
  if (a1 > 1.0) {
    a1 = 1.0;
  }
  if (a1 < -1.0) {
    a1 = -1.0;
  }
  return 1.0 - sqrtf(1.0 - (float)(a1 * a1));
}

float REEasingFunctionEvaluateElasticEase(unsigned int a1, float a2, float a3)
{
  float v5 = fmaxf(a2, 0.0);
  float v6 = a3;
  if (fabsf(v5) >= 0.00001)
  {
    float v7 = 1.0 - expf(v5 * a3);
    float v6 = v7 / (float)(1.0 - expf(v5));
  }
  return sinf((float)((float)((float)a1 + 0.25) * 6.2832) * a3) * v6;
}

float REEasingFunctionEvaluateExponentialEase(float a1, float a2)
{
  if (fabsf(a1) >= 0.00001)
  {
    float v3 = 1.0 - expf(a1 * a2);
    return v3 / (float)(1.0 - expf(a1));
  }
  return a2;
}

float REEasingFunctionEvaluateHermiteEase(float a1)
{
  float v1 = 0.0;
  if (a1 > 0.0)
  {
    float v1 = 1.0;
    if (a1 < 1.0) {
      return (float)((float)(a1 * a1) * (float)(3.0 - a1)) * 0.5;
    }
  }
  return v1;
}

void REEasingFunctionEvaluateLogarithmicEase(float a1, float a2)
{
  if (a2 >= 0.0)
  {
    logf((float)((float)(a1 + -1.0) * a2) + 1.0);
    logf(a1);
  }
}

float REEasingFunctionEvaluatePowerEase(float a1, float a2)
{
  return powf(a2, fmaxf(a1, 0.0));
}

float REEasingFunctionEvaluateSineEase(float a1)
{
  return sinf((float)(1.0 - a1) * -1.5708) + 1.0;
}

float REEasingFunctionEvaluateCubicBezierEase(double a1, double a2, float a3)
{
  return re::internal::evaluateCubicBezierEase<float>(*(uint64_t *)&a1, *(uint64_t *)&a2, a3, 0.00001);
}

uint64_t REEasingFunctionSetMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 8) <= 8u) {
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t REEasingFunctionGetMode(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) > 8u) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1 + 12);
  }
}

uint64_t REEasingFunctionEvaluate(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

_anonymous_namespace_ *RECreateBackEaseEx(re *a1, float a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  float v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 24, 8);
  *(void *)uint64_t v4 = &unk_26E6C0518;
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 1065353216;
  v7[0] = (_anonymous_namespace_ *)&unk_26E733868;
  v7[3] = (_anonymous_namespace_ *)v7;
  uint64_t v8 = v4;
  uint64_t v9[3] = v9;
  v9[0] = &unk_26E733868;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v7);
  *(float *)(v8 + 16) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v8, v7);
  float v5 = v7[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](&v8);
  return v5;
}

_anonymous_namespace_ *RECreateBounceEaseEx(re *a1, float a2)
{
  int v3 = (int)a1;
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = re::globalAllocators(a1);
  float v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 24, 8);
  v5[1] = 1;
  void *v5 = &unk_26E6C0570;
  void v5[2] = 0x4000000000000003;
  v9[0] = (_anonymous_namespace_ *)&unk_26E7338E8;
  uint64_t v9[3] = (_anonymous_namespace_ *)v9;
  uint64_t v10 = v5;
  v11[3] = v11;
  v11[0] = &unk_26E7338E8;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v9);
  uint64_t v6 = (uint64_t)v10;
  *((_DWORD *)v10 + 4) = v3;
  *(float *)(v6 + 2ArcSharedObject::ArcSharedObject(this, 0) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v10, v9);
  float v7 = v9[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v10);
  return v7;
}

_anonymous_namespace_ *RECreateCircleEaseEx(re *a1)
{
  void v7[4] = *MEMORY[0x263EF8340];
  float v1 = re::globalAllocators(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 16, 8);
  v2[1] = 2;
  *uint64_t v2 = &unk_26E6C05C8;
  v5[0] = (_anonymous_namespace_ *)&unk_26E733968;
  uint64_t v5[3] = (_anonymous_namespace_ *)v5;
  uint64_t v6 = v2;
  v7[3] = v7;
  v7[0] = &unk_26E733968;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v5);
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v6, v5);
  int v3 = v5[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v3;
}

_anonymous_namespace_ *RECreateElasticEaseEx(re *a1, float a2)
{
  int v3 = (int)a1;
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = re::globalAllocators(a1);
  float v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 24, 8);
  v5[1] = 3;
  void *v5 = &unk_26E6C0620;
  void v5[2] = 0x4040000000000003;
  v9[0] = (_anonymous_namespace_ *)&unk_26E7339E8;
  uint64_t v9[3] = (_anonymous_namespace_ *)v9;
  uint64_t v10 = v5;
  v11[3] = v11;
  v11[0] = &unk_26E7339E8;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v9);
  uint64_t v6 = (uint64_t)v10;
  *((_DWORD *)v10 + 4) = v3;
  *(float *)(v6 + 2ArcSharedObject::ArcSharedObject(this, 0) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v10, v9);
  float v7 = v9[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v10);
  return v7;
}

_anonymous_namespace_ *RECreateExponentialEaseEx(re *a1, float a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  int v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 24, 8);
  *(void *)(v4 + 8) = 4;
  *(void *)uint64_t v4 = &unk_26E6C0678;
  *(_DWORD *)(v4 + 16) = 0x40000000;
  v7[0] = (_anonymous_namespace_ *)&unk_26E733A68;
  v7[3] = (_anonymous_namespace_ *)v7;
  uint64_t v8 = v4;
  uint64_t v9[3] = v9;
  v9[0] = &unk_26E733A68;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v7);
  *(float *)(v8 + 16) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v8, v7);
  float v5 = v7[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](&v8);
  return v5;
}

_anonymous_namespace_ *RECreateHermiteEaseEx(re *a1)
{
  void v7[4] = *MEMORY[0x263EF8340];
  float v1 = re::globalAllocators(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 16, 8);
  v2[1] = 5;
  *uint64_t v2 = &unk_26E6BFF90;
  v5[0] = (_anonymous_namespace_ *)&unk_26E733AE8;
  uint64_t v5[3] = (_anonymous_namespace_ *)v5;
  uint64_t v6 = v2;
  v7[3] = v7;
  v7[0] = &unk_26E733AE8;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v5);
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v6, v5);
  int v3 = v5[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v3;
}

_anonymous_namespace_ *RECreateLogarithmicEaseEx(re *a1, float a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  int v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 24, 8);
  *(void *)(v4 + 8) = 6;
  *(void *)uint64_t v4 = &unk_26E6C06D0;
  *(_DWORD *)(v4 + 16) = 0x40000000;
  v7[0] = (_anonymous_namespace_ *)&unk_26E733B68;
  v7[3] = (_anonymous_namespace_ *)v7;
  uint64_t v8 = v4;
  uint64_t v9[3] = v9;
  v9[0] = &unk_26E733B68;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v7);
  *(float *)(v8 + 16) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v8, v7);
  float v5 = v7[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](&v8);
  return v5;
}

_anonymous_namespace_ *RECreatePowerEaseEx(re *a1, float a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  int v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 24, 8);
  *(void *)(v4 + 8) = 7;
  *(void *)uint64_t v4 = &unk_26E6C0728;
  *(_DWORD *)(v4 + 16) = 0x40000000;
  v7[0] = (_anonymous_namespace_ *)&unk_26E733BE8;
  v7[3] = (_anonymous_namespace_ *)v7;
  uint64_t v8 = v4;
  uint64_t v9[3] = v9;
  v9[0] = &unk_26E733BE8;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v7);
  *(float *)(v8 + 16) = a2;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v8, v7);
  float v5 = v7[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](&v8);
  return v5;
}

_anonymous_namespace_ *RECreateSineEaseEx(re *a1)
{
  void v7[4] = *MEMORY[0x263EF8340];
  float v1 = re::globalAllocators(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 16, 8);
  v2[1] = 8;
  *uint64_t v2 = &unk_26E6C0780;
  v5[0] = (_anonymous_namespace_ *)&unk_26E733C68;
  uint64_t v5[3] = (_anonymous_namespace_ *)v5;
  uint64_t v6 = v2;
  v7[3] = v7;
  v7[0] = &unk_26E733C68;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v5);
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v6, v5);
  int v3 = v5[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v6);
  return v3;
}

_anonymous_namespace_ *RECreateCubicBezierEaseEx(re *a1, double a2, double a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  float v5 = re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 32, 8);
  *(_DWORD *)(v6 + 8) = 9;
  *(void *)uint64_t v6 = &unk_26E6C07D8;
  *(void *)(v6 + 16) = 0x3DCCCCCD3E800000;
  *(void *)(v6 + 24) = 0x3F8000003E800000;
  v10[0] = (_anonymous_namespace_ *)&unk_26E733CE8;
  uint64_t v10[3] = (_anonymous_namespace_ *)v10;
  uint64_t v11 = v6;
  v12[3] = v12;
  v12[0] = &unk_26E733CE8;
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v10);
  uint64_t v7 = v11;
  *(double *)(v11 + 16) = a2;
  *(double *)(v7 + 24) = a3;
  re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)&v11, v10);
  uint64_t v8 = v10[0];
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](&v11);
  return v8;
}

uint64_t REEasingFunctionSetModeEx(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (*(_DWORD *)(v2 + 8) <= 8u) {
    *(_DWORD *)(v2 + 12) = a2;
  }
  return result;
}

uint64_t REEasingFunctionGetModeEx(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v1 + 8) > 8u) {
    return 0;
  }
  else {
    return *(unsigned int *)(v1 + 12);
  }
}

uint64_t REEasingFunctionEvaluateEx(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

uint64_t REAnimationHandoffDefaultDesc()
{
  return 0;
}

void REAnimationHandoffDefaultDescEx(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0x80000000;
  *(void *)(a1 + 16) = "";
  *(unsigned char *)(a1 + 24) = 0;
}

double REAnimationAssetGetTotalDuration(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v5);
  double v2 = 0.0;
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3) {
      double v2 = (*(double (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAnimationAssetGetName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(*(void *)(v1 + 8) + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REAnimationAssetGetFromToBy2(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  re::AssetHandle::loadNow(v13, 0);
  ++*(_DWORD *)(v13 + 260);
  uint64_t v9 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v12);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      switch(a2)
      {
        case 0:
          if (*(_DWORD *)(v10 + 8) == 11)
          {
            if (a3 && *(unsigned char *)(v10 + 88)) {
              *a3 = v10 + 92;
            }
            if (a4 && *(unsigned char *)(v10 + 96)) {
              *a4 = v10 + 100;
            }
            if (a5 && *(unsigned char *)(v10 + 104))
            {
              uint64_t v11 = v10 + 108;
              goto LABEL_56;
            }
          }
          break;
        case 1:
          if (*(_DWORD *)(v10 + 8) == 12) {
            goto LABEL_23;
          }
          break;
        case 2:
          if (*(_DWORD *)(v10 + 8) == 13)
          {
LABEL_23:
            if (a3 && *(unsigned char *)(v10 + 88)) {
              *a3 = v10 + 96;
            }
            if (a4 && *(unsigned char *)(v10 + 104)) {
              *a4 = v10 + 112;
            }
            if (a5 && *(unsigned char *)(v10 + 120))
            {
              uint64_t v11 = v10 + 128;
              goto LABEL_56;
            }
          }
          break;
        case 3:
          if (*(_DWORD *)(v10 + 8) == 14) {
            goto LABEL_37;
          }
          break;
        case 4:
          if (*(_DWORD *)(v10 + 8) == 15) {
            goto LABEL_37;
          }
          break;
        case 5:
          if (*(_DWORD *)(v10 + 8) == 16)
          {
LABEL_37:
            if (a3 && *(unsigned char *)(v10 + 96)) {
              *a3 = v10 + 112;
            }
            if (a4 && *(unsigned char *)(v10 + 128)) {
              *a4 = v10 + 144;
            }
            if (a5 && *(unsigned char *)(v10 + 160))
            {
              uint64_t v11 = v10 + 176;
              goto LABEL_56;
            }
          }
          break;
        case 6:
          if (*(_DWORD *)(v10 + 8) == 17)
          {
            if (a3 && *(unsigned char *)(v10 + 96)) {
              *a3 = v10 + 112;
            }
            if (a4 && *(unsigned char *)(v10 + 160)) {
              *a4 = v10 + 176;
            }
            if (a5 && *(unsigned char *)(v10 + 224))
            {
              uint64_t v11 = v10 + 240;
LABEL_56:
              *a5 = v11;
            }
          }
          break;
        default:
          break;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
}

uint64_t REAnimationIsInterpolationEnabled(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  if (!v15) {
    goto LABEL_15;
  }
  unsigned int v1 = atomic_load((unsigned int *)(v15 + 704));
  if (v1 != 2) {
    goto LABEL_15;
  }
  uint64_t v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v3 = (uint64_t *)v15;
  if (v15) {
    uint64_t v3 = *(uint64_t **)(v15 + 264);
  }
  if (v2 == v3)
  {
    uint64_t v10 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v14);
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v11 = *((void *)v10 + 1);
    if (v11)
    {
      unsigned int v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2)
      {
        uint64_t v7 = re::AssetHandle::asset<re::TimelineAsset>(v10);
        goto LABEL_8;
      }
      re::AssetHandle::loadAsync(v10);
    }
LABEL_15:
    uint64_t IsInterpolationEnabled = 1;
    goto LABEL_16;
  }
  uint64_t v4 = re::TimelineAsset::assetType((re::TimelineAsset *)v2);
  uint64_t v6 = *(uint64_t **)(v15 + 264);
  if (v4 == v6)
  {
    uint64_t v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&v14);
    if (v7)
    {
LABEL_8:
LABEL_16:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
      return IsInterpolationEnabled;
    }
LABEL_13:
    uint64_t IsInterpolationEnabled = 0;
    goto LABEL_16;
  }
  re::internal::assertLog((re::internal *)5, v5, "assertion failure: '%s' (%s:line %i) Unknown timeline asset handle type: %s", "!\"Unreachable code\"", "REAnimationIsInterpolationEnabled", 925, *v6);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t anonymous namespace'::processIsInterpolationEnabled(uint64_t this, const re::Timeline *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    int v3 = *(_DWORD *)(this + 8);
    switch(v3)
    {
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
        goto LABEL_3;
      default:
        if (v3 == 61)
        {
LABEL_3:
          this = *(unsigned char *)(this + 73) != 0;
        }
        else
        {
          this = (*(uint64_t (**)(uint64_t, const re::Timeline *))(*(void *)this + 24))(this, a2);
          if (this)
          {
            unint64_t v4 = this;
            unint64_t v5 = 1;
            do
            {
              uint64_t v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v2 + 32))(v2, v5 - 1);
              if (v5 >= v4) {
                break;
              }
              ++v5;
            }
            while ((this & 1) == 0);
          }
        }
        break;
    }
  }
  return this;
}

uint64_t REAnimationServiceStartAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v16);
  re::AssetHandle::loadNow(v17, 0);
  ++*(_DWORD *)(v17 + 260);
  uint64_t v5 = re::AssetHandle::loadedAsset<re::TimelineAsset>((re::TimelineAsset *)&v16);
  if (v5)
  {
    uint64_t v6 = *(_anonymous_namespace_ **)(v5 + 16);
    switch(*(unsigned char *)(a3 + 24))
    {
      case 0:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<float>(void)::info = re::introspect_float(0, v14);
          }
        }
        uint64_t v8 = re::introspect<float>(void)::info;
        unint64_t v9 = a3 + 25;
        uint64_t v10 = a3 + 28;
        uint64_t v11 = a3 + 32;
        break;
      case 1:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v15);
          }
        }
        uint64_t v8 = (void *)re::introspect<double>(void)::info;
        goto LABEL_16;
      case 2:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          }
        }
        uint64_t v8 = re::introspect<re::Vector2<float>>(void)::info;
LABEL_16:
        unint64_t v9 = a3 + 25;
        uint64_t v10 = a3 + 32;
        uint64_t v11 = a3 + 40;
        break;
      case 3:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          }
        }
        uint64_t v8 = re::introspect<re::Vector3<float>>(void)::info;
        goto LABEL_29;
      case 4:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
          }
        }
        uint64_t v8 = re::introspect<re::Vector4<float>>(void)::info;
        goto LABEL_29;
      case 5:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          }
        }
        uint64_t v8 = (void *)re::introspect<re::Quaternion<float>>(void)::info;
LABEL_29:
        unint64_t v9 = a3 + 25;
        uint64_t v10 = a3 + 32;
        uint64_t v11 = a3 + 48;
        break;
      case 6:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
          }
        }
        uint64_t v8 = (void *)re::introspect<re::GenericSRT<float>>(void)::info;
        unint64_t v9 = a3 + 25;
        uint64_t v10 = a3 + 32;
        uint64_t v11 = a3 + 80;
        break;
      case 7:
        uint64_t v7 = 0;
        if (!a1 || !v6) {
          goto LABEL_44;
        }
        {
          if (v5)
          {
            re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
          }
        }
        uint64_t v8 = (void *)re::introspect<re::SkeletalPose>(void)::info;
        unint64_t v9 = a3 + 25;
        uint64_t v10 = a3 + 32;
        uint64_t v11 = a3 + 120;
        break;
      default:
        goto LABEL_7;
    }
    uint64_t v23 = v10;
    v24.n128_u64[0] = v9;
    uint64_t v22 = v11;
    uint64_t v21 = 0;
    if (v8)
    {
      long long v18 = (unint64_t)v8;
      long long v19 = 0uLL;
      int v20 = 0;
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
      int v20 = 0;
    }
    v24.n128_u8[8] = 0;
    uint64_t v23 = 0;
    v24.n128_u64[0] = 0;
    v24.n128_u32[3] = 0x80000000;
    BOOL v25 = "";
    v24.n128_u64[0] = (unint64_t)re::AnimationManager::startAnimation(a1, v6, 0, &v18, (unint64_t)&v24, 0, 0, &v23);
    v24.n128_u64[1] = v12;
    if (v23) {

    }
    re::make::shared::object<re::internal::AnimationControllerData,decltype(nullptr),re::AnimationController const&>((re *)&v23, &v24);
    uint64_t v7 = v23;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18 + 8);
  }
  else
  {
LABEL_7:
    uint64_t v7 = 0;
  }
LABEL_44:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
  return v7;
}

uint64_t REAnimationServiceGetRootTimebase(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t REAnimatableValueCreate(re *a1, uint64_t *a2)
{
  char v3 = (char)a1;
  switch((int)a1)
  {
    case 0:
      unint64_t v4 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 40, 8);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(void *)(v5 + 32) = 0;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      uint64_t v6 = &unk_26E733DB0;
      goto LABEL_5;
    case 1:
      uint64_t v8 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 48, 8);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      uint64_t v6 = &unk_26E733E10;
LABEL_5:
      *(void *)uint64_t v5 = v6;
      goto LABEL_14;
    case 2:
      unint64_t v9 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 48, 8);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      *(void *)uint64_t v5 = &unk_26E733E58;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      goto LABEL_14;
    case 3:
      uint64_t v10 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 64, 16);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      uint64_t v11 = &unk_26E733EA0;
      goto LABEL_9;
    case 4:
      unint64_t v12 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 64, 16);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      uint64_t v11 = &unk_26E733EE8;
LABEL_9:
      *(void *)uint64_t v5 = v11;
      long long v13 = 0uLL;
      goto LABEL_11;
    case 5:
      uint64_t v14 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 64, 16);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      *(void *)uint64_t v5 = &unk_26E733F30;
      long long v13 = xmmword_23435FBB0;
LABEL_11:
      *(_OWORD *)(v5 + 32) = v13;
      *(_OWORD *)(v5 + 48) = v13;
      goto LABEL_14;
    case 6:
      uint64_t v15 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 128, 16);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(unsigned char *)(v5 + 25) = 0;
      *(void *)uint64_t v5 = &unk_26E733F78;
      *(void *)(v5 + 32) = 0x3F8000003F800000;
      *(void *)(v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = 1065353216;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + + 56) = 0x3F80000000000000;
      *(_OWORD *)(v5 + 64) = 0u;
      *(void *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0x3F8000003F800000;
      *(void *)(v5 + 88) = 1065353216;
      *(void *)(v5 + 96) = 0;
      *(void *)(v5 + 104) = 0x3F80000000000000;
      *(_OWORD *)(v5 + 112) = 0u;
      goto LABEL_14;
    case 7:
      uint64_t v16 = re::globalAllocators(a1);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 208, 8);
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 192) = 0u;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
      *(_WORD *)(v5 + 24) = 255;
      *(void *)uint64_t v5 = &unk_26E733FC0;
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = "";
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
      *(_DWORD *)(v5 + 96) = 0;
      *(void *)(v5 + 104) = 0;
      *(void *)(v5 + 112) = 0;
      *(void *)(v5 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v5 + 128) = "";
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_DWORD *)(v5 + 184) = 0;
      *(void *)(v5 + 192) = 0;
      *(void *)(v5 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
LABEL_14:
      *(unsigned char *)(v5 + 24) = v3;
      *a2 = v5;
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

float REAnimatableValueGetFloat(uint64_t a1)
{
  uint64_t v1 = 32;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 28;
  }
  return *(float *)(a1 + v1);
}

double REAnimatableValueGetDouble(uint64_t a1)
{
  uint64_t v1 = 40;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 32;
  }
  return *(double *)(a1 + v1);
}

double REAnimatableValueGetVector2F(uint64_t a1)
{
  uint64_t v1 = 40;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 32;
  }
  return *(double *)(a1 + v1);
}

__n128 REAnimatableValueGetVector3F(uint64_t a1)
{
  uint64_t v1 = 48;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 32;
  }
  return *(__n128 *)(a1 + v1);
}

__n128 REAnimatableValueGetVector4F(uint64_t a1)
{
  uint64_t v1 = 48;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 32;
  }
  return *(__n128 *)(a1 + v1);
}

__n128 REAnimatableValueGetQuaternionF(uint64_t a1)
{
  uint64_t v1 = 48;
  if (!*(unsigned char *)(a1 + 25)) {
    uint64_t v1 = 32;
  }
  return *(__n128 *)(a1 + v1);
}

uint64_t REAnimatableValueSetFloat(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

uint64_t REAnimatableValueSetDouble(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t REAnimatableValueSetVector2F(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

__n128 *REAnimatableValueSetVector3F(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetVector4F(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetQuaternionF(__n128 *result, __n128 a2)
{
  result[2] = a2;
  return result;
}

__n128 *REAnimatableValueSetSRT(__n128 *result, __n128 a2, __n128 a3, __n128 a4)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

void std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733868;
  return result;
}

void std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733868;
}

re *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 507, *a2);
}

uint64_t std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateBackEaseEx::$_0,std::allocator<RECreateBackEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E7338E8;
  return result;
}

void std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7338E8;
}

re *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 519, *a2);
}

uint64_t std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateBounceEaseEx::$_0,std::allocator<RECreateBounceEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733968;
  return result;
}

void std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733968;
}

re *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 532, *a2);
}

uint64_t std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateCircleEaseEx::$_0,std::allocator<RECreateCircleEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E7339E8;
  return result;
}

void std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7339E8;
}

re *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 542, *a2);
}

uint64_t std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateElasticEaseEx::$_0,std::allocator<RECreateElasticEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733A68;
  return result;
}

void std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733A68;
}

re *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 555, *a2);
}

uint64_t std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateExponentialEaseEx::$_0,std::allocator<RECreateExponentialEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733AE8;
  return result;
}

void std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733AE8;
}

re *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 567, *a2);
}

uint64_t std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateHermiteEaseEx::$_0,std::allocator<RECreateHermiteEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733B68;
  return result;
}

void std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733B68;
}

re *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 577, *a2);
}

uint64_t std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateLogarithmicEaseEx::$_0,std::allocator<RECreateLogarithmicEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733BE8;
  return result;
}

void std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733BE8;
}

re *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 589, *a2);
}

uint64_t std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreatePowerEaseEx::$_0,std::allocator<RECreatePowerEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733C68;
  return result;
}

void std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733C68;
}

re *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 601, *a2);
}

uint64_t std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateSineEaseEx::$_0,std::allocator<RECreateSineEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E733CE8;
  return result;
}

void std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E733CE8;
}

re *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 611, *a2);
}

uint64_t std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RECreateCubicBezierEaseEx::$_0,std::allocator<RECreateCubicBezierEaseEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

__n128 re::make::shared::object<re::internal::AnimationControllerData,decltype(nullptr),re::AnimationController const&>(re *a1, __n128 *a2)
{
  unint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(void *)(v5 + 24) = 0;
  *(void *)uint64_t v5 = &unk_26E733D68;
  __n128 result = *a2;
  *(__n128 *)(v5 + 32) = *a2;
  *(void *)a1 = v5;
  return result;
}

void re::internal::AnimationControllerData::~AnimationControllerData(re::internal::AnimationControllerData *this)
{
  *(void *)this = &unk_26E733D68;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E733D68;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<float>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<float>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<double>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<double>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::Vector2<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::Vector2<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::Vector3<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::Vector3<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::Vector4<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::Vector4<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::Quaternion<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::Quaternion<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::GenericSRT<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::GenericSRT<float>>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *anonymous namespace'::SharedAnimatableValue<re::SkeletalPose>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E733FC0;
  uint64_t v2 = (re::SkeletalPose *)(a1 + 4);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 15));
  re::SkeletalPose::~SkeletalPose(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void anonymous namespace'::SharedAnimatableValue<re::SkeletalPose>::~SharedAnimatableValue(void *a1)
{
  *a1 = &unk_26E733FC0;
  uint64_t v2 = (re::SkeletalPose *)(a1 + 4);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)(a1 + 15));
  re::SkeletalPose::~SkeletalPose(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *RERayCastResultComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

__n128 RERayCastResultComponentGetHitWorldPosition(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 32);
}

__n128 RERayCastResultComponentGetHitWorldNormal(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)(re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2)+ 48);
}

char *RERayCastResultComponentGetHitEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  uint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = (id *)(v2 + 64);
  return re::ecs2::EntityHandle::resolve(v4, v3);
}

BOOL RERayCastResultComponentIsHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(a1, a2);
  return re::ecs2::EntityHandle::resolve((id *)(v2 + 64), *(void *)(v2 + 16)) != 0;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[276] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *REAudioMixerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetReverbPresetWithBlend(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && (*(unsigned char *)(v5 + 288) & 0x80) != 0) {
    uint64_t v5 = 0;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v6 = (const re::ecs2::Component *)REEntityGetOrAddComponentByClass(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  REReverbComponentSetReverbPresetWithBlend((uint64_t)v6, a2, a3);
  return RENetworkMarkComponentDirty(v6);
}

uint64_t REAudioMixerComponentGetReverbPreset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && (*(unsigned char *)(v1 + 288) & 0x80) != 0) {
    uint64_t v1 = 0;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return *(void *)(REEntityGetOrAddComponentByClass(v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 32);
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetReverbPreset(uint64_t a1, uint64_t a2)
{
  return REAudioMixerComponentSetReverbPresetWithBlend(a1, a2, 0);
}

void REAudioMixerSetSceneReverbPresetWithBlend(re *a1)
{
  uint64_t v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerSetSceneReverbPresetWithBlend is deprecated. Use REReverbComponentSetReverbPresetWithBlend", v2, 2u);
  }
}

void REAudioMixerSetSceneReverbPreset(re *a1)
{
}

uint64_t REAudioMixerGetSceneReverbPreset(re *a1)
{
  uint64_t v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerGetSceneReverbPreset is deprecated. Use REReverbComponentGetReverbPreset", v3, 2u);
  }
  return -1;
}

void REAudioMixerSetPriority(re *a1)
{
  uint64_t v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerSetPriority is deprecated. Use REReverbComponentSetPriority", v2, 2u);
  }
}

uint64_t REAudioMixerGetPriority(re *a1)
{
  uint64_t v1 = *re::audioLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "REAudioMixerGetPriority is deprecated. Use REReverbComponentGetPriority", v3, 2u);
  }
  return 0;
}

re::ecs2::NetworkComponent *REAudioMixerComponentSetPriority(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && (*(unsigned char *)(v3 + 288) & 0x80) != 0) {
    uint64_t v3 = 0;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  unint64_t v4 = (re *)REEntityGetOrAddComponentByClass(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  REReverbComponentSetPriority(v4, a2);
  return RENetworkMarkComponentDirty(v4);
}

uint64_t REAudioMixerComponentGetPriority(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1 && (*(unsigned char *)(v1 + 288) & 0x80) != 0) {
    uint64_t v1 = 0;
  }
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return *(unsigned __int16 *)(REEntityGetOrAddComponentByClass(v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 42);
}

void *REVideoPlayerStatusComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REVideoPlayerStatusComponentDidUpdateInApp(re::ecs2::VideoPlayerStatusComponent *this, __n128 result)
{
  if (this) {
    result.n128_u64[0] = re::ecs2::VideoPlayerStatusComponent::didUpdateInApp(this, result).n128_u64[0];
  }
  return result.n128_f64[0];
}

uint64_t REVideoPlayerStatusComponentGetContentInfo(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 49);
  }
  return result;
}

uint64_t REVideoPlayerStatusComponentGetMediaInfo(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 48);
  }
  return result;
}

double REVideoPlayerStatusComponentGetCurrentPlayerScreenSize(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 56);
  }
  else {
    return 0.0;
  }
}

double REVideoPlayerStatusComponentGetCurrentPlayerScreenVideoDimension(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 64);
  }
  else {
    return 0.0;
  }
}

float REVideoPlayerStatusComponentGetSafeZoneRadius(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 28);
  }
  else {
    return -1.0;
  }
}

double REVideoPlayerStatusComponentGetCurrentSceneSize(uint64_t a1)
{
  if (a1) {
    long long v1 = *(_OWORD *)(a1 + 32);
  }
  else {
    *(void *)&long long v1 = 0;
  }
  return *(double *)&v1;
}

uint64_t REVideoPlayerStatusComponentGetCurrentViewingMode(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 72);
  }
  return result;
}

uint64_t REVideoPlayerStatusComponentsGetVideoIsReadyToRender(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 73);
}

re *REAnimationControllerCopyEx(re::ecs2::AnimationComponent *a1, uint64_t a2)
{
  uint64_t result = (re *)re::ecs2::AnimationComponent::shadowAnimationController(a1, a2);
  if (result)
  {
    unint64_t v4 = result;
    uint64_t v5 = re::globalAllocators(result);
    uint64_t v6 = (re::internal::AnimationControllerData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
    return re::internal::AnimationControllerData::AnimationControllerData(v6, a1, v4);
  }
  return result;
}

re::internal::AnimationControllerData *REAnimationControllerCopy(re *a1, unint64_t a2)
{
  if (*((void *)a1 + 6) <= a2) {
    return 0;
  }
  uint64_t v3 = (const re::AnimationController *)(*((void *)a1 + 8) + 72 * a2 + 56);
  unint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::internal::AnimationControllerData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
  return re::internal::AnimationControllerData::AnimationControllerData(v5, a1, v3);
}

void REAnimationControllerPause(uint64_t a1)
{
}

void REAnimationControllerResume(uint64_t a1)
{
}

double REAnimationControllerStop(uint64_t a1)
{
  return re::AnimationController::stop((re::AnimationController *)(a1 + 32), 0.0);
}

BOOL REAnimationControllerIsValid(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1
      && re::DataArray<re::internal::TimelineTree>::tryGet(v1 + (*(uint64_t *)(a1 + 40) >> 56 << 6) + 72, *(void *)(a1 + 40)) != 0;
}

uint64_t REAnimationControllerIsPaused(uint64_t a1)
{
  return re::AnimationController::isPaused((re::AnimationController *)(a1 + 32));
}

float REAnimationControllerGetSpeed(uint64_t a1)
{
  return re::AnimationController::speed((re::AnimationController *)(a1 + 32));
}

uint64_t REAnimationControllerSetSpeed(uint64_t a1, float a2)
{
  return re::AnimationController::setSpeed(a1 + 32, a2);
}

double REAnimationControllerGetDuration(uint64_t a1)
{
  uint64_t v1 = re::AnimationController::timeline((re::AnimationController *)(a1 + 32));
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(void (**)(void))(*(void *)v1 + 40);
  v2();
  return result;
}

BOOL REAnimationControllerGetTime(uint64_t a1, void *a2)
{
  re::AnimationController::time((re::AnimationController *)(a1 + 32), (uint64_t)v5);
  int v3 = v5[0];
  if (v5[0]) {
    *a2 = v6;
  }
  return v3 != 0;
}

void *REAnimationControllerSetTime(uint64_t a1, double a2)
{
  return re::AnimationController::setTime((void *)(a1 + 32), a2);
}

uint64_t REAnimationControllerGetTimeline(uint64_t a1)
{
  return re::AnimationController::timeline((re::AnimationController *)(a1 + 32));
}

float REAnimationControllerGetBlendFactor(uint64_t a1, const re::Timeline *a2)
{
  return re::AnimationController::blendFactor((re::AnimationController *)(a1 + 32), a2);
}

uint64_t REAnimationControllerSetBlendFactor(uint64_t a1, const re::Timeline *a2, float a3)
{
  return re::AnimationController::setBlendFactor((re::AnimationController *)(a1 + 32), a3, a2);
}

re::internal::AnimationControllerData *re::internal::AnimationControllerData::AnimationControllerData(re::internal::AnimationControllerData *this, re::ecs2::AnimationComponent *a2, const re::AnimationController *a3)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = a2;
  *(void *)this = &unk_26E733D68;
  if (a2) {
    uint64_t v6 = (char *)a2 + 8;
  }
  *((_OWORD *)this + 2) = *(_OWORD *)a3;
  return this;
}

uint64_t REPerformanceMetricsGetFrameMetrics(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  if ((*(unsigned char *)(result + 420) & 0x10) != 0)
  {
    double result = re::ServiceLocator::service<re::RenderManager>(*(void *)(result + 648));
    uint64_t v3 = *(void *)(result + 104);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 1648);
      if (v4)
      {
        *(float *)(a2 + 4) = *(float *)(v4 + 236) - *(float *)(v4 + 240);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(v4 + 232);
        if (*(_DWORD *)a2 >= 2u)
        {
          *(void *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 12) = 0;
        }
      }
    }
  }
  return result;
}

void *REMaterialParameterBlockArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REMaterialParameterBlockArrayComponentClear(uint64_t a1)
{
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 104);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*(void *)v3)
      {

        *(void *)uint64_t v3 = 0;
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 96);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMaterialParameterBlockArrayComponentSize(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t REMaterialParameterBlockArrayComponentResize(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2);
  re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterCountAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *((void *)a1 + 8);
  uint64_t v5 = *(void *)(v4 + 24 * a2);
  if (!v5) {
    uint64_t v5 = *(void *)(v4 + 24 * a2 + 8);
  }
  return *(unsigned int *)(v5 + 332);
}

uint64_t REMaterialParameterBlockArrayComponentClearBlockAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *((void *)a1 + 8);
  uint64_t v5 = (uint64_t *)(v4 + 24 * a2);
  uint64_t v6 = v5 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    uint64_t v7 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v5 ? *v5 : *v6);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v14, v7);
    ++*(_DWORD *)(v4 + 24 * a2 + 16);
    uint64_t v8 = v14;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v5, v14);
    *uint64_t v6 = 0;
    if (v8) {
  }
    }
  if (*((void *)a1 + 6) <= a2) {
    goto LABEL_20;
  }
  uint64_t v9 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v9 + 16);
  uint64_t v10 = *(void *)v9;
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(*(void *)v9 + 304);
  ++*(_DWORD *)(v10 + 400);
  if (*((void *)a1 + 11) <= a2) {
    goto LABEL_21;
  }
  uint64_t v11 = *((void *)a1 + 13);
  uint64_t v12 = *(void *)(v11 + 8 * a2);
  if (v12)
  {

    *(void *)(v11 + 8 * a2) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

CFStringRef REMaterialParameterBlockArrayComponentCopyParameterNameAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = *(void *)(v6 + 24 * a2);
  if (!v7) {
    uint64_t v7 = *(void *)(v6 + 24 * a2 + 8);
  }
  uint64_t v8 = *(unsigned int *)(v7 + 336);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(_DWORD **)(v7 + 320);
    while ((*v10 & 0x80000000) == 0)
    {
      v10 += 80;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(v7 + 336);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v8 == v9) {
    return 0;
  }
  if (a3)
  {
    uint64_t v12 = 0;
    while (1)
    {
      ++v12;
      int v13 = v8 <= (int)v9 + 1 ? v9 + 1 : *(_DWORD *)(v7 + 336);
      int v14 = v9;
      while (1)
      {
        unsigned int v15 = v14 + 1;
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v9) = v15;
        if ((*(_DWORD *)(*(void *)(v7 + 320) + 320 * v15) & 0x80000000) != 0) {
          goto LABEL_26;
        }
      }
      LODWORD(v9) = v13;
LABEL_26:
      if (v8 == v9) {
        return 0;
      }
      if (v12 == a3) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v15 = v9;
LABEL_30:
  long long v16 = *(const char **)(*(void *)(v7 + 320) + 320 * v15 + 16);
  return CFStringCreateWithCString(0, v16, 0x8000100u);
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterTypeAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a3)
  {
    uint64_t v6 = *a3;
    if (*a3)
    {
      char v7 = a3[1];
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v16[0] = 2 * v6;
  v16[1] = a3;
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= a2)
  {
    v16[2] = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *(void *)(v11 + 24 * a2);
  if (!v12) {
    uint64_t v12 = *(void *)(v11 + 24 * a2 + 8);
  }
  int v13 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v12 + 304, v16);
  if (v13) {
    uint64_t v14 = re::convert(*v13);
  }
  else {
    uint64_t v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)v16);
  return v14;
}

uint64_t REMaterialParameterBlockArrayComponentGetParameterTypeWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = *(void *)(v6 + 24 * a2);
  if (!v7) {
    uint64_t v7 = *(void *)(v6 + 24 * a2 + 8);
  }
  uint64_t v8 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v7 + 304, (void *)(a3 + 24));
  if (!v8) {
    return 0;
  }
  int v9 = *v8;
  return re::convert(v9);
}

uint64_t REMaterialAssetGetTextureParameterType(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v15);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v15);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(v5 + 1664);
  if (!v6) {
    goto LABEL_18;
  }
  if (!*(void *)(v6 + 200))
  {
    v15[3] = 0;
    long long v17 = 0u;
    memset(v16, 0, sizeof(v16));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v19 = 136315906;
    int v20 = "operator[]";
    __int16 v21 = 1024;
    int v22 = 476;
    __int16 v23 = 2048;
    uint64_t v24 = 0;
    __int16 v25 = 2048;
    uint64_t v26 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 208) + 48);
  if (!v7) {
    goto LABEL_13;
  }
  id v8 = (id)(v7 + 8);
  re::sg::CachedCompilationMaterial::getCustomUniformsArgument((re::sg::CachedCompilationMaterial *)v7, (uint64_t)v16);
  if (*((void *)&v17 + 1))
  {
    uint64_t v9 = v18 + 64;
    uint64_t v10 = 80 * *((void *)&v17 + 1);
    while (!*(unsigned char *)(v9 + 13) || strcmp(*(const char **)(v9 - 40), a2))
    {
      v9 += 80;
      v10 -= 80;
      if (!v10) {
        goto LABEL_10;
      }
    }
    int v12 = 0;
    *a3 = *(_DWORD *)v9;
    int v11 = 1;
  }
  else
  {
LABEL_10:
    int v11 = 0;
    int v12 = 1;
  }
  re::FixedArray<re::MetalTypeInfo>::deinit(&v17);
  re::StringID::destroyString((re::StringID *)((char *)&v16[2] + 8));
  re::StringID::destroyString((re::StringID *)v16);
  if (v12) {
LABEL_13:
  }
    int v11 = 0;
  if (v7) {

  }
  if (v11) {
    uint64_t v13 = 1;
  }
  else {
LABEL_18:
  }
    uint64_t v13 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v13;
}

uint64_t REMaterialAssetGetParameterType(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v21);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v21);
  if (!v3)
  {
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = v3;
  uint64_t v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v30, (const re::AssetHandle *)(v3 + 40));
  uint64_t v6 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>(v5);
  int OriginalConstantParameterType = re::MaterialDefinitionAsset::getOriginalConstantParameterType(v6, a2);
  if (!OriginalConstantParameterType)
  {
    int OriginalConstantParameterType = re::MaterialAsset::getOriginalConstantParameterType((re::MaterialAsset *)v4, a2);
    if (!OriginalConstantParameterType)
    {
      re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v27);
      int v10 = BYTE4(v28) & 7;
      if ((BYTE4(v28) & 7) == 0)
      {
        int v11 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
        if (a2)
        {
          uint64_t v12 = *a2;
          if (*a2)
          {
            char v13 = a2[1];
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)(a2 + 2);
              do
              {
                uint64_t v12 = 31 * v12 + v13;
                int v15 = *v14++;
                char v13 = v15;
              }
              while (v15);
            }
            v12 &= ~0x8000000000000000;
          }
        }
        else
        {
          uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v23 = v12;
        re::MaterialParameterTable::handle(v11, &v23, (uint64_t)v24);
        long long v28 = v25;
        unsigned __int8 v29 = v26;
        uint64_t v23 = 0;
        int v10 = BYTE4(v25) & 7;
        if ((BYTE4(v25) & 7) == 0)
        {
          long long v16 = (re::MaterialParameterTable *)(*(void *)(*(void *)(v4 + 1664) + 16) + 248);
          if (a2)
          {
            uint64_t v17 = *a2;
            if (*a2)
            {
              char v18 = a2[1];
              if (v18)
              {
                int v19 = (unsigned __int8 *)(a2 + 2);
                do
                {
                  uint64_t v17 = 31 * v17 + v18;
                  int v20 = *v19++;
                  char v18 = v20;
                }
                while (v20);
              }
              v17 &= ~0x8000000000000000;
            }
          }
          else
          {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          uint64_t v22 = v17;
          re::MaterialParameterTable::handle(v16, &v22, (uint64_t)v24);
          unsigned __int8 v29 = v26;
          long long v28 = v25;
          uint64_t v22 = 0;
          int v10 = BYTE4(v25) & 7;
          if ((BYTE4(v25) & 7) == 0)
          {
            uint64_t v8 = 0;
            goto LABEL_5;
          }
        }
      }
      int OriginalConstantParameterType = 64;
      switch(v10)
      {
        case 1:
          int OriginalConstantParameterType = v29;
          break;
        case 2:
          break;
        case 3:
          int OriginalConstantParameterType = 128;
          break;
        case 4:
          int OriginalConstantParameterType = 192;
          break;
        default:
          int OriginalConstantParameterType = 0;
          break;
      }
    }
  }
  uint64_t v8 = re::convert(OriginalConstantParameterType);
LABEL_5:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
LABEL_7:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
  return v8;
}

uint64_t REMaterialAssetGetParameterTypeWithHandle(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v16);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v16);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = re::AssetHandle::AssetHandle((re::AssetHandle *)v26, (const re::AssetHandle *)(v3 + 40));
    uint64_t v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>(v5);
    uint64_t v23 = *(void *)(a2 + 24) >> 1;
    uint64_t v7 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v6 + 2272, &v23);
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 20)) == 0)
    {
      uint64_t v23 = *(void *)(a2 + 24) >> 1;
      uint64_t v9 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v4 + 1680, &v23);
      if (!v9 || (int v8 = *(unsigned __int8 *)(v9 + 20)) == 0)
      {
        int v10 = *(re::MaterialParameterBlock **)(v4 + 1672);
        uint64_t v22 = *(void *)(a2 + 24) >> 1;
        re::MaterialParameterBlock::handle(v10, &v22, (uint64_t)&v23);
        uint64_t v22 = 0;
        int v11 = BYTE4(v24) & 7;
        if ((BYTE4(v24) & 7) == 0)
        {
          uint64_t v12 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
          uint64_t v18 = *(void *)(a2 + 24) >> 1;
          re::MaterialParameterTable::handle(v12, &v18, (uint64_t)v19);
          long long v24 = v20;
          unsigned __int8 v25 = v21;
          uint64_t v18 = 0;
          int v11 = BYTE4(v20) & 7;
          if ((BYTE4(v20) & 7) == 0)
          {
            char v13 = (re::MaterialParameterTable *)(*(void *)(*(void *)(v4 + 1664) + 16) + 248);
            uint64_t v17 = *(void *)(a2 + 24) >> 1;
            re::MaterialParameterTable::handle(v13, &v17, (uint64_t)v19);
            unsigned __int8 v25 = v21;
            long long v24 = v20;
            uint64_t v17 = 0;
            int v11 = BYTE4(v20) & 7;
            if ((BYTE4(v20) & 7) == 0)
            {
              uint64_t v14 = 0;
              goto LABEL_16;
            }
          }
        }
        int v8 = 64;
        switch(v11)
        {
          case 1:
            int v8 = v25;
            break;
          case 2:
            break;
          case 3:
            int v8 = 128;
            break;
          case 4:
            int v8 = 192;
            break;
          default:
            int v8 = 0;
            break;
        }
      }
    }
    uint64_t v14 = re::convert(v8);
LABEL_16:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
    goto LABEL_17;
  }
  uint64_t v14 = 0;
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v14;
}

uint64_t REMaterialAssetGetMetalShaderParameterType(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v14);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 1664);
    if (a2)
    {
      unint64_t v5 = *a2;
      if (*a2)
      {
        char v6 = a2[1];
        if (v6)
        {
          uint64_t v7 = (unsigned __int8 *)(a2 + 2);
          do
          {
            unint64_t v5 = 31 * v5 + v6;
            int v8 = *v7++;
            char v6 = v8;
          }
          while (v8);
        }
        v5 &= ~0x8000000000000000;
      }
    }
    else
    {
      unint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (*(void *)(v4 + 120))
    {
      unint64_t v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
      uint64_t v10 = *(unsigned int *)(*(void *)(v4 + 128) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(v4 + 144)));
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(v4 + 136);
        if (*(void *)(v13 + 24 * v10 + 8) == v5)
        {
LABEL_16:
          uint64_t v11 = re::convert(*(unsigned __int8 *)(v13 + 24 * v10 + 16));
          goto LABEL_12;
        }
        while (1)
        {
          LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v13 + 24 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v13 + 24 * v10 + 8) == v5) {
            goto LABEL_16;
          }
        }
      }
    }
  }
  uint64_t v11 = 0;
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  return v11;
}

uint64_t REMaterialParameterBlockArrayComponentSetBlockAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (a3) {
    id v6 = (id)(a3 + 8);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)a1 + 13);
  uint64_t v8 = *(void *)(v7 + 8 * a2);
  *(void *)(v7 + 8 * a2) = a3;
  if (v8) {

  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetBlockAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 88) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 104) + 8 * a2);
  }
}

void REMaterialParameterBlockArrayComponentClearParameterAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v6 = *((void *)a1 + 6);
  if (v6 <= a2)
  {
    v19[0] = 0;
    long long v33 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    uint64_t v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 2048;
    unint64_t v28 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    uint64_t v20 = 0;
    long long v33 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    uint64_t v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 2048;
    unint64_t v28 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = *((void *)a1 + 8);
  uint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  unint64_t v9 = v8 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v8 ? *v8 : *v9);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v29, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    uint64_t v11 = v29;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v29);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (a3)
  {
    uint64_t v12 = *a3;
    if (*a3)
    {
      char v13 = a3[1];
      if (v13)
      {
        uint64_t v14 = (unsigned __int8 *)(a3 + 2);
        do
        {
          uint64_t v12 = 31 * v12 + v13;
          int v15 = *v14++;
          char v13 = v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  v19[0] = 2 * v12;
  v19[1] = a3;
  unint64_t v6 = *((void *)a1 + 6);
  if (v6 <= a2) {
    goto LABEL_29;
  }
  uint64_t v16 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v16 + 16);
  if (re::ecs2::SerializableMaterialParameterBlock::removeParameter(*(re::ecs2::SerializableMaterialParameterBlock **)v16, (const re::StringID *)v19))
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v6 = *((void *)a1 + 11);
  if (v6 <= a2)
  {
LABEL_30:
    uint64_t v20 = 0;
    long long v33 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    uint64_t v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = a2;
    __int16 v27 = 2048;
    unint64_t v28 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v17 = *((void *)a1 + 13);
  uint64_t v18 = *(re::MaterialParameterBlock **)(v17 + 8 * a2);
  if (v18)
  {
    re::MaterialParameterBlock::handle(v18, a3, (uint64_t)&v29);
    if ((BYTE12(v29) & 7) != 0) {
      re::MaterialParameterBlock::removeParameter(*(re::MaterialParameterBlock **)(v17 + 8 * a2), a3);
    }
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  re::StringID::destroyString((re::StringID *)v19);
}

uint64_t REMaterialParameterBlockArrayComponentClearParameterWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v7 = (uint64_t *)(v6 + 24 * a2);
  uint64_t v8 = v7 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    unint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v7 ? *v7 : *v8);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v13, v9);
    ++*(_DWORD *)(v6 + 24 * a2 + 16);
    uint64_t v10 = v13;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v7, v13);
    *uint64_t v8 = 0;
    if (v10) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_19:
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v11 + 16);
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::removeParameter(*(re::ecs2::SerializableMaterialParameterBlock **)v11, (const re::StringID *)(a3 + 24));
  if (result)
  {
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t RESerializedMaterialParameterHandleCreate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 40, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)(v3 + 32) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E734008;
  *(void *)(v3 + 32) = "";
  uint64_t v10 = 0;
  uint64_t v11 = "";
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  uint64_t v10 = 0;
  uint64_t v11 = "";
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 32) = v6;
  v12[0] = v5 & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v12[1] = v8;
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)&v10);
  return v3;
}

CFStringRef RESerializedMaterialParameterHandleGetKey(uint64_t a1)
{
  return CFStringCreateWithCString(0, *(const char **)(a1 + 32), 0x8000100u);
}

uint64_t RESerializedMaterialParameterHandleGetKeyUnownedCString(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REMaterialParameterBlockArrayComponentSetBoolAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  unint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      uint64_t v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    const re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LOBYTE(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 2, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetBoolWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  unint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      uint64_t v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    const re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LOBYTE(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 2, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetBoolAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, unsigned char *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    long long v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::BOOLValue(v10, a3, v14);
  if (v14[0])
  {
    char v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    long long v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v24);
    if ((BYTE12(v24) & 7) != 1 || BYTE8(v25) != 2) {
      return 0;
    }
    char v11 = *(unsigned char *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v24);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloatAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, float a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      char v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      char v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(float *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 1, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloatWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      char v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      char v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(float *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 1, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetFloatAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::floatValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    int v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 1) {
      return 0;
    }
    int v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LODWORD(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 3, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetIntWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LODWORD(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 3, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::intValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    int v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 3) {
      return 0;
    }
    int v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LODWORD(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 7, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUIntWithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  LODWORD(v16) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 7, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUIntAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _DWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::uintValue(v10, a3, (uint64_t)v14);
  if (v14[0])
  {
    int v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 7) {
      return 0;
    }
    int v11 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 32, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 32, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    v13[0] = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::vector2FValue(v10, a3, (uint64_t)v13);
  if (LOBYTE(v13[0]))
  {
    *a4 = v13[1];
    return 1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    void v13[2] = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    int v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 13);
  uint64_t result = *(void *)(v12 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v22);
    if ((BYTE12(v22) & 7) != 1 || BYTE8(v23) != 32) {
      return 0;
    }
    *a4 = *(void *)re::ShaderGraphMaterial::getConstant(*(void *)(v12 + 8 * a2), (uint64_t)&v22);
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 4, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      int v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      int v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 4, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    long long v27 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    long long v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::int2Value(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    uint64_t v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    unsigned char v14[2] = 0;
    long long v27 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    long long v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 4) {
      return 0;
    }
    uint64_t v11 = *(void *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v23);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      uint64_t v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, a3, 8, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      uint64_t v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v16;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v16);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  *(double *)&long long v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v14, (StringID *)(a3 + 24), 8, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v14 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    long long v27 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    long long v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::uint2Value(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    uint64_t v11 = v14[1];
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    unsigned char v14[2] = 0;
    long long v27 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    long long v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 8) {
      return 0;
    }
    uint64_t v11 = *(void *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v23);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      uint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 33, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      uint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 33, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v23 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    long long v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 789;
    __int16 v30 = 2048;
    unint64_t v31 = a2;
    __int16 v32 = 2048;
    unint64_t v33 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v22[0] = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)buf = 0u;
    a4 = (_OWORD *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    long long v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 789;
    __int16 v30 = 2048;
    unint64_t v31 = a2;
    __int16 v32 = 2048;
    unint64_t v33 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_16;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::vector3FValue(v10, a3, (uint64_t)&v23);
  if ((_BYTE)v23)
  {
    long long v11 = v24;
LABEL_10:
    *a4 = v11;
    return 1;
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2) {
    goto LABEL_27;
  }
  uint64_t v13 = *((void *)a1 + 8);
  uint64_t v14 = *(re::ecs2::SerializableMaterialParameterBlock **)(v13 + 24 * a2);
  if (!v14) {
    uint64_t v14 = *(re::ecs2::SerializableMaterialParameterBlock **)(v13 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v14, a3, (uint64_t)v22);
  if (!LOBYTE(v22[0]))
  {
    unint64_t v18 = *((void *)a1 + 11);
    if (v18 <= a2)
    {
      uint64_t v25 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      long long v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 789;
      __int16 v30 = 2048;
      unint64_t v31 = a2;
      __int16 v32 = 2048;
      unint64_t v33 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v19 = *((void *)a1 + 13);
    long long v20 = *(re::MaterialParameterBlock **)(v19 + 8 * a2);
    if (!v20) {
      return 0;
    }
    re::MaterialParameterBlock::handle(v20, a3, (uint64_t)buf);
    if ((buf[12] & 7) != 1 || BYTE8(v35) != 33) {
      return 0;
    }
    long long v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v19 + 8 * a2), (uint64_t)buf);
    goto LABEL_10;
  }
  if (CoreRELog::onceToken != -1) {
    goto LABEL_28;
  }
LABEL_16:
  int v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "REMaterialParameterBlockArrayComponentGetFloat3AtIndex was called for parameter of type Color3.To get the right color space context for the color value, REMaterialParameterBlockArrayComponentGetColor3AtIndex should be used instead.", buf, 2u);
  }

  uint64_t v12 = 1;
  *(void *)&long long v16 = re::ColorGamut3F::as((void *)((char *)v22 + 4), 0, 1);
  DWORD2(v16) = v17;
  *a4 = v16;
  return v12;
}

uint64_t REMaterialParameterBlockArrayComponentSetColor3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, unsigned int a4, int8x16_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  long long v11 = v10 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v10 ? *v10 : *v11);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v21, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    uint64_t v13 = v21;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v21);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  int32x2_t v14 = vzip1_s32(*(int32x2_t *)a5.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v16.i64[0] = a5.u32[1];
  v16.i64[1] = a4;
  int8x16_t v17 = vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x20uLL), v15);
  uint64_t v18 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v18 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(*(void *)v18, a3, v17.i64[0], v17.i64[1]);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetColor3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, unsigned int a4, int8x16_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  long long v11 = v10 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v10 ? *v10 : *v11);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v21, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    uint64_t v13 = v21;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v21);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  int32x2_t v14 = vzip1_s32(*(int32x2_t *)a5.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a5, a5, 8uLL));
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v16.i64[0] = a5.u32[1];
  v16.i64[1] = a4;
  int8x16_t v17 = vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x20uLL), v15);
  uint64_t v18 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v18 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(*(void *)v18, (StringID *)(a3 + 24), v17.i64[0], v17.i64[1]);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetColor3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4, unsigned char *a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= a2)
  {
    v23[0] = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    uint64_t v24 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2);
  if (!v12) {
    uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v12, a3, (uint64_t)v23);
  if (LOBYTE(v23[0]))
  {
    char v13 = v23[2];
    *a4 = *(_OWORD *)((char *)v23 + 4);
    *a5 = v13;
    return 1;
  }
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= a2) {
    goto LABEL_27;
  }
  uint64_t v15 = *((void *)a1 + 8);
  int64x2_t v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2);
  if (!v16) {
    int64x2_t v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2 + 8);
  }
  int v17 = re::ecs2::SerializableMaterialParameterBlock::valueType(v16, a3);
  if (v17 != 21 && v17 != 0) {
    return 0;
  }
  unint64_t v10 = *((void *)a1 + 11);
  if (v10 <= a2)
  {
LABEL_28:
    uint64_t v24 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v19 = *((void *)a1 + 13);
  uint64_t result = *(void *)(v19 + 8 * a2);
  if (!result) {
    return result;
  }
  re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v33);
  if ((BYTE12(v33) & 7) == 1 && BYTE8(v34) == 20)
  {
    *(void *)&long long v20 = re::MaterialParameterBlock::colorGamut3FValue(*(void *)(v19 + 8 * a2), (uint64_t)&v33);
    DWORD2(v2ArcSharedObject::ArcSharedObject(this, 0) = v21;
    *a4 = v20;
    *a5 = v22;
    return 1;
  }
  return 0;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 5, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 5, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v14 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::int3Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    long long v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 5) {
      return 0;
    }
    long long v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 9, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 9, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v14 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::uint3Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    long long v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 9) {
      return 0;
    }
    long long v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 34, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 34, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v22 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    long long v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    v21[0] = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)buf = 0u;
    a4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    long long v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = a2;
    __int16 v31 = 2048;
    unint64_t v32 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_16;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::vector4FValue(v10, a3, (uint64_t)&v22);
  if ((_BYTE)v22)
  {
    *(_OWORD *)a4 = v23;
    return 1;
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2) {
    goto LABEL_28;
  }
  uint64_t v12 = *((void *)a1 + 8);
  uint64_t v13 = *(re::ecs2::SerializableMaterialParameterBlock **)(v12 + 24 * a2);
  if (!v13) {
    uint64_t v13 = *(re::ecs2::SerializableMaterialParameterBlock **)(v12 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v13, a3, (uint64_t)v21);
  if (!LOBYTE(v21[0]))
  {
    unint64_t v15 = *((void *)a1 + 11);
    if (v15 <= a2)
    {
      uint64_t v24 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v25 = 136315906;
      long long v26 = "operator[]";
      __int16 v27 = 1024;
      int v28 = 789;
      __int16 v29 = 2048;
      unint64_t v30 = a2;
      __int16 v31 = 2048;
      unint64_t v32 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v16 = *((void *)a1 + 13);
    long long v17 = *(re::MaterialParameterBlock **)(v16 + 8 * a2);
    if (!v17) {
      return 0;
    }
    re::MaterialParameterBlock::handle(v17, a3, (uint64_t)buf);
    if ((buf[12] & 7) != 1 || BYTE8(v34) != 48 && BYTE8(v34) != 34) {
      return 0;
    }
    Constant = (void *)re::ShaderGraphMaterial::getConstant(*(void *)(v16 + 8 * a2), (uint64_t)buf);
    uint64_t v19 = Constant[1];
    *(void *)a4 = *Constant;
    *(void *)(a4 + 8) = v19;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    goto LABEL_29;
  }
LABEL_16:
  uint64_t v14 = (id)CoreRELog::log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "REMaterialParameterBlockArrayComponentGetFloat4AtIndex was called for parameter of type Color4.To get the right color space context for the color value, REMaterialParameterBlockArrayComponentGetColor4AtIndex should be used instead.", buf, 2u);
  }

  uint64_t v11 = 1;
  re::ColorGamut4F::as((uint64_t)v21 + 4, 0, 1, (uint64_t)buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  return v11;
}

uint64_t REMaterialParameterBlockArrayComponentSetColor4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, char a4, __n128 a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    __n128 v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v10) {
      uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)*v10;
    }
    else {
      uint64_t v12 = *v11;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v18, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    unint64_t v13 = v18.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v18.n128_i64[0]);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    __n128 v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  uint64_t v15 = *(void *)v14;
  __n128 v18 = a5;
  LOBYTE(v19) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v15, a3, (long long *)&v18);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetColor4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    __n128 v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v10) {
      uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)*v10;
    }
    else {
      uint64_t v12 = *v11;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v18, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    unint64_t v13 = v18.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v18.n128_i64[0]);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    __n128 v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  uint64_t v15 = *(void *)v14;
  __n128 v18 = a5;
  LOBYTE(v19) = a4;
  re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(v15, (StringID *)(a3 + 24), (long long *)&v18);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetColor4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4, unsigned char *a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= a2)
  {
    *(void *)long long v20 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    uint64_t v22 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2);
  if (!v12) {
    uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v12, a3, (uint64_t)v20);
  if (v20[0])
  {
    *a4 = *(_OWORD *)&v20[4];
    char v13 = v21;
LABEL_10:
    *a5 = v13;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= a2) {
    goto LABEL_27;
  }
  uint64_t v15 = *((void *)a1 + 8);
  uint64_t v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2);
  if (!v16) {
    uint64_t v16 = *(re::ecs2::SerializableMaterialParameterBlock **)(v15 + 24 * a2 + 8);
  }
  int v17 = re::ecs2::SerializableMaterialParameterBlock::valueType(v16, a3);
  if (v17 != 21 && v17 != 0) {
    return 0;
  }
  unint64_t v10 = *((void *)a1 + 11);
  if (v10 <= a2)
  {
LABEL_28:
    uint64_t v22 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v23 = 136315906;
    *(void *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v19 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v19 + 8 * a2);
  if (!result) {
    return result;
  }
  re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v28);
  if ((BYTE12(v28) & 7) == 1 && BYTE8(v29) == 21)
  {
    re::MaterialParameterBlock::colorGamut4FValue(*(void *)(v19 + 8 * a2), (uint64_t)&v28, (uint64_t)v23);
    *a4 = *(_OWORD *)v23;
    char v13 = v23[16];
    goto LABEL_10;
  }
  return 0;
}

uint64_t REMaterialParameterBlockArrayComponentSetInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 6, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetInt4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 6, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v14 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::int4Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    long long v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 6) {
      return 0;
    }
    long long v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, a3, 10, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetUInt4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)a1 + 8);
  unint64_t v8 = (uint64_t *)(v7 + 24 * a2);
  uint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock **)(v8 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v8) {
      unint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock *)*v8;
    }
    else {
      unint64_t v10 = *v9;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v16, v10);
    ++*(_DWORD *)(v7 + 24 * a2 + 16);
    unint64_t v11 = v16.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v8, v16.n128_i64[0]);
    uint64_t *v9 = 0;
    if (v11) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __n128 v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v12 + 16);
  uint64_t v13 = *(void *)v12;
  __n128 v16 = a4;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v13, (StringID *)(a3 + 24), 10, (unsigned __int8 *)&v16);
  ++*(_DWORD *)(v13 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetUInt4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v14 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    unint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::uint4Value(v10, a3, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    long long v11 = v15;
LABEL_10:
    *a4 = v11;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    long long v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v25);
    if ((BYTE12(v25) & 7) != 1 || BYTE8(v26) != 10) {
      return 0;
    }
    long long v11 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v25);
    goto LABEL_10;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2x2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, double a4, double a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)a1 + 8);
  long long v11 = (uint64_t *)(v10 + 24 * a2);
  uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock **)(v11 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v11) {
      uint64_t v13 = (const re::ecs2::SerializableMaterialParameterBlock *)*v11;
    }
    else {
      uint64_t v13 = *v12;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v18, v13);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    uint64_t v14 = v18;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v11, v18);
    re::ecs2::SerializableMaterialParameterBlock *v12 = 0;
    if (v14) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  uint64_t v16 = *(void *)v15;
  *(double *)&long long v18 = a4;
  *((double *)&v18 + 1) = a5;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 48, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat2x2WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)a1 + 8);
  long long v11 = (uint64_t *)(v10 + 24 * a2);
  uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock **)(v11 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v11) {
      uint64_t v13 = (const re::ecs2::SerializableMaterialParameterBlock *)*v11;
    }
    else {
      uint64_t v13 = *v12;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v18, v13);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    uint64_t v14 = v18;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v11, v18);
    re::ecs2::SerializableMaterialParameterBlock *v12 = 0;
    if (v14) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  uint64_t v16 = *(void *)v15;
  *(double *)&long long v18 = a4;
  *((double *)&v18 + 1) = a5;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 48, (unsigned __int8 *)&v18);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat2x2AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    v14[0] = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    uint64_t v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix2x2FValue(v10, a3, (uint64_t)v14);
  if (LOBYTE(v14[0]))
  {
    uint64_t v11 = v14[2];
    *a4 = v14[1];
    a4[1] = v11;
    return 1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_20:
    void v14[3] = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    uint64_t v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t result = *(void *)(v13 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v23);
    if ((BYTE12(v23) & 7) != 1 || BYTE8(v24) != 48 && BYTE8(v24) != 34) {
      return 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v13 + 8 * a2), (uint64_t)&v23);
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3x3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    __n128 v21 = 0u;
    __n128 v22 = 0u;
    __n128 v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v10) {
      uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)*v10;
    }
    else {
      uint64_t v12 = *v11;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v20, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    unint64_t v13 = v20.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v20.n128_i64[0]);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v23 = 0u;
    long long v24 = 0u;
    __n128 v21 = 0u;
    __n128 v22 = 0u;
    __n128 v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  uint64_t v15 = *(void *)v14;
  __n128 v20 = a4;
  __n128 v21 = a5;
  __n128 v22 = a6;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, a3, 49, (unsigned __int8 *)&v20);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat3x3WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    __n128 v21 = 0u;
    __n128 v22 = 0u;
    __n128 v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock **)(v10 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v10) {
      uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)*v10;
    }
    else {
      uint64_t v12 = *v11;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v20, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    unint64_t v13 = v20.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v20.n128_i64[0]);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    long long v23 = 0u;
    long long v24 = 0u;
    __n128 v21 = 0u;
    __n128 v22 = 0u;
    __n128 v20 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  uint64_t v15 = *(void *)v14;
  __n128 v20 = a4;
  __n128 v21 = a5;
  __n128 v22 = a6;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v15, (StringID *)(a3 + 24), 49, (unsigned __int8 *)&v20);
  ++*(_DWORD *)(v15 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetFloat3x3AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    *(void *)long long v29 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    long long v23 = "operator[]";
    __int16 v24 = 1024;
    *(_DWORD *)uint64_t v25 = 789;
    *(_WORD *)&v25[4] = 2048;
    *(void *)&v25[6] = a2;
    __int16 v26 = 2048;
    *(void *)long long v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix3x3FValue(v10, a3, (uint64_t)&v22);
  if ((_BYTE)v22)
  {
    uint64_t v11 = *(void *)&v25[2];
    long long v12 = *(_OWORD *)&v27[2];
    long long v13 = v28;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)&v25[10];
    *(void *)a4 = v11;
    *(_DWORD *)(a4 + 24) = DWORD2(v12);
    *(void *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = DWORD2(v13);
    *(void *)(a4 + 32) = v13;
    return 1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v29 = 136315906;
    *(void *)&v29[4] = "operator[]";
    __int16 v30 = 1024;
    int v31 = 789;
    __int16 v32 = 2048;
    unint64_t v33 = a2;
    __int16 v34 = 2048;
    unint64_t v35 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 13);
  uint64_t result = *(void *)(v15 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)result, a3, (uint64_t)&v36);
    if ((BYTE12(v36) & 7) != 1 || BYTE8(v37) != 49) {
      return 0;
    }
    unint64_t Constant = re::ShaderGraphMaterial::getConstant(*(void *)(v15 + 8 * a2), (uint64_t)&v36);
    int v17 = *(_DWORD *)(Constant + 8);
    int v18 = *(_DWORD *)(Constant + 24);
    uint64_t v19 = *(void *)(Constant + 16);
    int v20 = *(_DWORD *)(Constant + 40);
    uint64_t v21 = *(void *)(Constant + 32);
    *(void *)a4 = *(void *)Constant;
    *(_DWORD *)(a4 + 8) = v17;
    *(void *)(a4 + 16) = v19;
    *(_DWORD *)(a4 + 24) = v18;
    *(void *)(a4 + 32) = v21;
    *(_DWORD *)(a4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v20;
    return 1;
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4x4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    __n128 v25 = 0u;
    long long v26 = 0u;
    __n128 v23 = 0u;
    __n128 v24 = 0u;
    __n128 v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)a1 + 8);
  uint64_t v11 = (uint64_t *)(v10 + 24 * a2);
  long long v12 = (const re::ecs2::SerializableMaterialParameterBlock **)(v11 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v11) {
      long long v13 = (const re::ecs2::SerializableMaterialParameterBlock *)*v11;
    }
    else {
      long long v13 = *v12;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v22, v13);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    unint64_t v14 = v22.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v11, v22.n128_i64[0]);
    const re::ecs2::SerializableMaterialParameterBlock *v12 = 0;
    if (v14) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    __n128 v25 = 0u;
    long long v26 = 0u;
    __n128 v23 = 0u;
    __n128 v24 = 0u;
    __n128 v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  uint64_t v16 = *(void *)v15;
  __n128 v22 = a4;
  __n128 v23 = a5;
  __n128 v24 = a6;
  __n128 v25 = a7;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, a3, 50, (unsigned __int8 *)&v22);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetFloat4x4WithHandleAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    __n128 v25 = 0u;
    long long v26 = 0u;
    __n128 v23 = 0u;
    __n128 v24 = 0u;
    __n128 v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = *((void *)a1 + 8);
  uint64_t v11 = (uint64_t *)(v10 + 24 * a2);
  long long v12 = (const re::ecs2::SerializableMaterialParameterBlock **)(v11 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v11) {
      long long v13 = (const re::ecs2::SerializableMaterialParameterBlock *)*v11;
    }
    else {
      long long v13 = *v12;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v22, v13);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    unint64_t v14 = v22.n128_u64[0];
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v11, v22.n128_i64[0]);
    const re::ecs2::SerializableMaterialParameterBlock *v12 = 0;
    if (v14) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_15:
    __n128 v25 = 0u;
    long long v26 = 0u;
    __n128 v23 = 0u;
    __n128 v24 = 0u;
    __n128 v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  uint64_t v16 = *(void *)v15;
  __n128 v22 = a4;
  __n128 v23 = a5;
  __n128 v24 = a6;
  __n128 v25 = a7;
  re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v16, (StringID *)(a3 + 24), 50, (unsigned __int8 *)&v22);
  ++*(_DWORD *)(v16 + 400);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::MaterialParameterBlock *REMaterialParameterBlockArrayComponentGetFloat4x4AtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, _OWORD *a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    *(void *)__n128 v24 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    uint64_t v19 = "operator[]";
    __int16 v20 = 1024;
    *(_DWORD *)uint64_t v21 = 789;
    *(_WORD *)&v21[4] = 2048;
    *(void *)&v21[6] = a2;
    *(_WORD *)&v21[14] = 2048;
    *(void *)&v21[16] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2);
  if (!v10) {
    uint64_t v10 = *(re::ecs2::SerializableMaterialParameterBlock **)(v9 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::matrix4x4FValue(v10, a3, (uint64_t)&v18);
  if ((_BYTE)v18)
  {
    long long v11 = *(_OWORD *)&v21[2];
    long long v12 = *(_OWORD *)&v21[18];
    long long v13 = v22;
    long long v14 = v23;
LABEL_10:
    *a4 = v11;
    a4[1] = v12;
    a4[2] = v13;
    a4[3] = v14;
    return (re::MaterialParameterBlock *)1;
  }
  unint64_t v8 = *((void *)a1 + 11);
  if (v8 <= a2)
  {
LABEL_19:
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__n128 v24 = 136315906;
    *(void *)&v24[4] = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = a2;
    __int16 v29 = 2048;
    unint64_t v30 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v16 = *((void *)a1 + 13);
  uint64_t result = *(re::MaterialParameterBlock **)(v16 + 8 * a2);
  if (result)
  {
    re::MaterialParameterBlock::handle(result, a3, (uint64_t)&v31);
    if ((BYTE12(v31) & 7) != 1 || BYTE8(v32) != 50) {
      return 0;
    }
    unint64_t Constant = (long long *)re::ShaderGraphMaterial::getConstant(*(void *)(v16 + 8 * a2), (uint64_t)&v31);
    long long v11 = *Constant;
    long long v12 = Constant[1];
    long long v13 = Constant[2];
    long long v14 = Constant[3];
    goto LABEL_10;
  }
  return result;
}

void REMaterialParameterBlockArrayComponentSetTextureAtIndexFromAsset(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a4, v15);
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v7 = *((void *)a1 + 6);
  if (v7 <= a2)
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      long long v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      long long v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v25, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v25;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v25);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  unint64_t v7 = *((void *)a1 + 6);
  if (v7 <= a2)
  {
LABEL_15:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v25, (const re::AssetHandle *)v15);
  re::ecs2::SerializableMaterialParameterBlock::setTexture(v14, a3, (const re::AssetHandle *)&v25);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
}

void REMaterialParameterBlockArrayComponentSetTextureWithHandleAtIndexFromAsset(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a4, v15);
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v7 = *((void *)a1 + 6);
  if (v7 <= a2)
  {
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      long long v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      long long v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v25, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v25;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v25);
    re::ecs2::SerializableMaterialParameterBlock *v10 = 0;
    if (v12) {
  }
    }
  unint64_t v7 = *((void *)a1 + 6);
  if (v7 <= a2)
  {
LABEL_15:
    uint64_t v16 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    int v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(void *)v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v25, (const re::AssetHandle *)v15);
  re::ecs2::SerializableMaterialParameterBlock::setTexture(v14, (StringID *)(a3 + 24), (const re::AssetHandle *)&v25);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
}

uint64_t REMaterialParameterBlockArrayComponentGetTextureAssetAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v6 = *((void *)a1 + 6);
  if (v6 <= a2)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v11 = 136315906;
    *(void *)&v11[4] = "operator[]";
    __int16 v12 = 1024;
    int v13 = 789;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    __int16 v16 = 2048;
    unint64_t v17 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)a1 + 8);
  uint64_t v8 = *(re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2);
  if (!v8) {
    uint64_t v8 = *(re::ecs2::SerializableMaterialParameterBlock **)(v7 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::textureValue(v8, a3, (uint64_t)v18);
  if (!LOBYTE(v18[0])) {
    return 0;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)((char *)v18 + 8));
  uint64_t v9 = *(void *)v11;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  if (LOBYTE(v18[0])) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v18 + 8));
  }
  return v9;
}

uint64_t REMaterialParameterBlockArrayComponentSetBufferDataAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, const void *a4, unint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t result = _os_feature_enabled_impl();
  if (!result) {
    return result;
  }
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  long long __dst = 0;
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  re::DynamicArray<BOOL>::resize((uint64_t)v18, a5);
  memcpy(__dst, a4, a5);
  unint64_t v11 = *((void *)a1 + 6);
  if (v11 <= a2)
  {
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    __int16 v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 789;
    __int16 v26 = 2048;
    unint64_t v27 = a2;
    __int16 v28 = 2048;
    unint64_t v29 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)a1 + 8);
  int v13 = (uint64_t *)(v12 + 24 * a2);
  __int16 v14 = v13 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    unint64_t v15 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v13 ? *v13 : *v14);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v30, v15);
    ++*(_DWORD *)(v12 + 24 * a2 + 16);
    uint64_t v16 = v30;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v13, v30);
    uint64_t *v14 = 0;
    if (v16) {
  }
    }
  unint64_t v11 = *((void *)a1 + 6);
  if (v11 <= a2)
  {
LABEL_19:
    uint64_t v21 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    __int16 v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 789;
    __int16 v26 = 2048;
    unint64_t v27 = a2;
    __int16 v28 = 2048;
    unint64_t v29 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v17 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setBufferData(*(void *)v17, a3, v18);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  uint64_t result = v18[0];
  if (v18[0])
  {
    if (__dst) {
      return (*(uint64_t (**)(void))(*(void *)v18[0] + 40))();
    }
  }
  return result;
}

void REMaterialParameterBlockArrayComponentSetSamplerAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v7 = a4;
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)a1 + 8);
  uint64_t v10 = (uint64_t *)(v9 + 24 * a2);
  unint64_t v11 = v10 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v10 ? *v10 : *v11);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v28, v12);
    ++*(_DWORD *)(v9 + 24 * a2 + 16);
    uint64_t v13 = v28;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, v28);
    uint64_t *v11 = 0;
    if (v13) {
  }
    }
  unint64_t v8 = *((void *)a1 + 6);
  if (v8 <= a2)
  {
LABEL_17:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v14 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v14 + 16);
  uint64_t v15 = *(void *)v14;
  id v17 = v7;
  id v16 = v7;
  re::MaterialSamplerData::fromDescriptor(&v17, (uint64_t)&v28);
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData((uint64_t)v18, (uint64_t)&v28);
  re::ecs2::SerializableMaterialParameterBlock::setSampler(v15, a3, v18);
  if (v7) {

  }
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

id REMaterialParameterBlockArrayComponentCopySamplerAtIndex(uint64_t a1, unint64_t a2, char *a3)
{
  if (*(void *)(a1 + 48) <= a2) {
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2);
  if (!v4) {
    uint64_t v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::samplerValue(v4, a3, (uint64_t)v9);
  if (v9[0])
  {
    re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)&v10, (uint64_t)v7);
    re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v7, &v8);
    id v5 = v8;
    if (v8) {
  }
    }
  else
  {
LABEL_7:
    id v5 = 0;
  }
  return v5;
}

uint64_t REMaterialParameterBlockArrayComponentBindTextureToSamplerWithDefaultArrayAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = v9 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    unint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v9 ? *v9 : *v10);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v15, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v15;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v15);
    uint64_t *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(*(re::ecs2::SerializableMaterialParameterBlock **)v13, a3, a4);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetSamplerNameBoundToTexture(uint64_t a1, unint64_t a2, char *a3)
{
  if (*(void *)(a1 + 48) <= a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2);
  if (!v4) {
    uint64_t v4 = *(re::ecs2::SerializableMaterialParameterBlock **)(v3 + 24 * a2 + 8);
  }
  return re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(v4, a3);
}

void REMaterialParameterBlockArrayComponentSetUVIndexForTextureAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, int a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = *((void *)a1 + 8);
  uint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = v9 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    unint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v9 ? *v9 : *v10);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v15, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v15;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v15);
    uint64_t *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  uint64_t v14 = *(re::ecs2::SerializableMaterialParameterBlock **)v13;
  re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(v14, a3, a4);
}

uint64_t REMaterialParameterBlockArrayComponentGetUVIndexForTextureAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *((void *)a1 + 8);
  id v7 = *(re::ecs2::SerializableMaterialParameterBlock **)(v6 + 24 * a2);
  if (!v7) {
    id v7 = *(re::ecs2::SerializableMaterialParameterBlock **)(v6 + 24 * a2 + 8);
  }
  return re::ecs2::SerializableMaterialParameterBlock::uvIndexForTexture(v7, a3);
}

uint64_t REMaterialParameterBlockArrayComponentSerializeToFile(_anonymous_namespace_ *a1, unint64_t a2, uint64_t a3, re::FileStreamWriter *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v30);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v19, (const re::AssetHandle *)v30);
  re::ecs2::MaterialParameterBlockArrayComponent::createFlattenedMaterialFileFromBlock(a1, a2, (re::MaterialAsset *)v19, (uint64_t)&v20);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
  id v7 = re::FileStreamWriter::open(a4, (uint64_t)v17);
  if (!v17[0])
  {
    uint64_t v12 = *re::ecsCoreLogObjects((re *)v7);
    uint64_t v11 = 0;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    uint64_t v13 = v12;
    re::formattedErrorMessage<re::DetailedError>((uint64_t)v18, (re::DynamicString *)v31);
    if (v31[8]) {
      uint64_t v14 = v32;
    }
    else {
      uint64_t v14 = &v31[9];
    }
    *(_DWORD *)buf = 136315138;
    long long v34 = v14;
    _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);

    if (*(void *)v31 && (v31[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v31 + 40))();
    }
LABEL_14:
    uint64_t v11 = 0;
    goto LABEL_15;
  }
  {
    if (v7)
    {
      re::introspect<re::MaterialFile>(void)::info = re::introspect_MaterialFile(0);
    }
  }
  uint64_t v8 = re::introspect<re::MaterialFile>(void)::info;
  uint64_t v9 = re::globalAllocators((re *)v7);
  BOOL v10 = re::serializeJson((uint64_t)v18, 0, v8, (uint64_t)&v20, 0, (uint64_t *)v9[2]);
  if (!v10)
  {
    long long v15 = *re::ecsCoreLogObjects((re *)v10);
    uint64_t v11 = 0;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)long long v31 = 136315138;
    *(void *)&v31[4] = a4;
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Failed to serialize material file to path %s", v31, 0xCu);
    goto LABEL_14;
  }
  uint64_t v11 = 1;
LABEL_15:
  re::Result<re::FileStreamWriter,re::DetailedError>::~Result((uint64_t)v17);
  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)&v29);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v28);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v27);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v26);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v25);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v24);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v23);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  return v11;
}

size_t REMaterialParameterBlockArrayComponentHashTechniqueName(const char *a1)
{
  v3[2] = *MEMORY[0x263EF8340];
  size_t result = strlen(a1);
  if (result)
  {
    MurmurHash3_x64_128((uint64_t)a1, result, 0, v3);
    return (v3[1] + (v3[0] << 6) + (v3[0] >> 2) - 0x61C8864680B583E9) ^ v3[0];
  }
  return result;
}

uint64_t REMaterialParameterBlockArrayComponentAddHashedPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  size_t v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, (unint64_t *)&v17);
    unint64_t v9 = (*((void *)&v17 + 1) + ((void)v17 << 6) + ((unint64_t)v17 >> 2) - 0x61C8864680B583E9) ^ v17;
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v10 = *((void *)a1 + 8);
  uint64_t v11 = (uint64_t *)(v10 + 24 * a2);
  uint64_t v12 = (const re::ecs2::SerializableMaterialParameterBlock **)(v11 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v11) {
      uint64_t v13 = (const re::ecs2::SerializableMaterialParameterBlock *)*v11;
    }
    else {
      uint64_t v13 = *v12;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v17, v13);
    ++*(_DWORD *)(v10 + 24 * a2 + 16);
    uint64_t v14 = v17;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v11, v17);
    NSObject *v12 = 0;
    if (v14) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_18:
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v15 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v15 + 16);
  re::ecs2::SerializableMaterialParameterBlock::addPassTechniqueMapping(*(re::ecs2::SerializableMaterialParameterBlock **)v15, v9, a4);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentAddPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, char *__s)
{
  v11[2] = *MEMORY[0x263EF8340];
  size_t v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, v11);
    unint64_t v9 = (v11[1] + (v11[0] << 6) + (v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0];
  }
  else
  {
    unint64_t v9 = 0;
  }
  return REMaterialParameterBlockArrayComponentAddHashedPassTechniqueMappingAtIndex(a1, a2, a3, v9);
}

uint64_t REMaterialParameterBlockArrayComponentRemovePassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  size_t v6 = strlen(a3);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)a3, v6, 0, (unint64_t *)&v15);
    unint64_t v7 = (*((void *)&v15 + 1) + ((void)v15 << 6) + ((unint64_t)v15 >> 2) - 0x61C8864680B583E9) ^ v15;
  }
  else
  {
    unint64_t v7 = 0;
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *((void *)a1 + 8);
  unint64_t v9 = (uint64_t *)(v8 + 24 * a2);
  uint64_t v10 = (const re::ecs2::SerializableMaterialParameterBlock **)(v9 + 1);
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    if (*v9) {
      uint64_t v11 = (const re::ecs2::SerializableMaterialParameterBlock *)*v9;
    }
    else {
      uint64_t v11 = *v10;
    }
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v15, v11);
    ++*(_DWORD *)(v8 + 24 * a2 + 16);
    uint64_t v12 = v15;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v9, v15);
    uint64_t *v10 = 0;
    if (v12) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_18:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v13 + 16);
  re::ecs2::SerializableMaterialParameterBlock::markPassTechniqueMappingRemoved(*(re::ecs2::SerializableMaterialParameterBlock **)v13, v7);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentGetPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, re::MaterialParameterBlock *a2, const char *a3)
{
  return REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex(a1, a2, a3, &v4);
}

uint64_t REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, re::MaterialParameterBlock *a2, const char *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= (unint64_t)a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, (unint64_t)a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= (unint64_t)a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, (unint64_t)a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  size_t v8 = strlen(a3);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a3, v8, 0, (unint64_t *)&v24);
    unint64_t v9 = (*((void *)&v24 + 1) + ((void)v24 << 6) + ((unint64_t)v24 >> 2) - 0x61C8864680B583E9) ^ v24;
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = *((void *)a1 + 6);
  if (v10 <= (unint64_t)a2)
  {
    uint64_t v14 = 0;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    long long v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    long long v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    v15[1] = 0;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    a4 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    long long v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    long long v21 = a2;
    __int16 v22 = 2048;
    unint64_t v23 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    goto LABEL_17;
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * (void)a2);
  if (!v12) {
    uint64_t v12 = *(re::ecs2::SerializableMaterialParameterBlock **)(v11 + 24 * (void)a2 + 8);
  }
  re::ecs2::SerializableMaterialParameterBlock::tryGetPassTechniqueMapping(v12, v9, (uint64_t)&v14);
  if ((_BYTE)v14)
  {
    uint64_t result = (uint64_t)v15;
LABEL_13:
    *a4 = *(void *)result;
    return 1;
  }
  unint64_t v10 = *((void *)a1 + 11);
  if (v10 <= (unint64_t)a2) {
    goto LABEL_21;
  }
  a2 = *(re::MaterialParameterBlock **)(*((void *)a1 + 13) + 8 * (void)a2);
  if (!a2) {
    return 0;
  }
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t result = re::MaterialParameterBlock::tryGetPassTechniqueMapping(a2, v9, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (result) {
    goto LABEL_13;
  }
  return result;
}

unsigned __int8 *getBinding(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, int a4, void *a5)
{
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *((void *)a1 + 8);
  uint64_t v11 = *(re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2);
  if (!v11) {
    uint64_t v11 = *(re::ecs2::SerializableMaterialParameterBlock **)(v10 + 24 * a2 + 8);
  }
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::parameterBinding(v11, a3);
  if (result)
  {
    if (*(_DWORD *)result == a4)
    {
      *a5 = *((void *)result + 2);
      a5[1] = *((void *)result + 4);
      return (unsigned __int8 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetBufferBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  return getBinding(a1, a2, a3, 3, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetTextureBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  return getBinding(a1, a2, a3, 2, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetSamplerBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  return getBinding(a1, a2, a3, 4, a4);
}

unsigned __int8 *REMaterialParameterBlockArrayComponentGetConstantBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, void *a4)
{
  return getBinding(a1, a2, a3, 1, a4);
}

uint64_t setBinding(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5, int a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = *((void *)a1 + 8);
  uint64_t v13 = (uint64_t *)(v12 + 24 * a2);
  uint64_t v14 = v13 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    long long v15 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v13 ? *v13 : *v14);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v19, v15);
    ++*(_DWORD *)(v12 + 24 * a2 + 16);
    uint64_t v16 = v19;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v13, v19);
    uint64_t *v14 = 0;
    if (v16) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v17 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v17 + 16);
  re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(*(_anonymous_namespace_ **)v17, a3, a6, a4, a5);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REMaterialParameterBlockArrayComponentSetBufferBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 3);
}

uint64_t REMaterialParameterBlockArrayComponentSetTextureBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 2);
}

uint64_t REMaterialParameterBlockArrayComponentSetSamplerBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 4);
}

uint64_t REMaterialParameterBlockArrayComponentSetConstantBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return setBinding(a1, a2, a3, a4, a5, 1);
}

uint64_t REMaterialParameterBlockArrayComponentRemoveBindingAtIndex(re::ecs2::MaterialParameterBlockArrayComponent *a1, unint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(a1);
  if (*((void *)a1 + 6) <= a2)
  {
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(a1, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 11) <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)a1 + 72, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  if (*((void *)a1 + 6) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = *((void *)a1 + 8);
  unint64_t v7 = (uint64_t *)(v6 + 24 * a2);
  size_t v8 = v7 + 1;
  if ((objc_isUniquelyReferenced() & 1) == 0)
  {
    unint64_t v9 = (const re::ecs2::SerializableMaterialParameterBlock *)(*v7 ? *v7 : *v8);
    re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>((re *)&v13, v9);
    ++*(_DWORD *)(v6 + 24 * a2 + 16);
    uint64_t v10 = v13;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v7, v13);
    *size_t v8 = 0;
    if (v10) {
  }
    }
  if (*((void *)a1 + 6) <= a2)
  {
LABEL_17:
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v11 = *((void *)a1 + 8) + 24 * a2;
  ++*(_DWORD *)(v11 + 16);
  re::ecs2::SerializableMaterialParameterBlock::markParameterBindingRemoved(*(re::ecs2::SerializableMaterialParameterBlock **)v11, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

re::ecs2::SerializableMaterialParameterBlock *re::make::shared::object<re::ecs2::SerializableMaterialParameterBlock,re::ecs2::SerializableMaterialParameterBlock const&>(re *a1, const re::ecs2::SerializableMaterialParameterBlock *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  id v5 = (re::ecs2::SerializableMaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 408, 8);
  uint64_t result = re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(v5, a2);
  *(void *)a1 = result;
  return result;
}

void RESerializedMaterialParameterHandle::~RESerializedMaterialParameterHandle(RESerializedMaterialParameterHandle *this)
{
  *(void *)this = &unk_26E734008;
  re::StringID::destroyString((RESerializedMaterialParameterHandle *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734008;
  re::StringID::destroyString((RESerializedMaterialParameterHandle *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t REPeerAttributionServiceGetContextCount(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return *(unsigned int *)(a1 + 124);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceGetContextCount", 7);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPeerAttributionServiceCreateOrGetContextWithPeerID(re::PeerAttributionService *a1, uint64_t a2)
{
  if (a1)
  {
    return re::PeerAttributionService::getOrCreateContextForPeerId(a1, a2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceCreateOrGetContextWithPeerID", 14, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REPeerAttributionServiceDestroyContext(re::PeerAttributionService *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      re::PeerAttributionService::destroyContext(a1, a2);
      return 1;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionService is null.", "service", "REPeerAttributionServiceDestroyContext", 21);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionContext is null.", "context", "REPeerAttributionServiceDestroyContext", 22);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPeerAttributionContextGetProfilerAttributionHandle(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return a1 + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The given REPeerAttributionContext is null.", "context", "REPeerAttributionContextGetProfilerAttributionHandle", 31, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REAssetManagerMemoryAssetCreateWithRemotePlayer(uint64_t a1, void *a2)
{
  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2);
  uint64_t v2 = v5[0];
  if (v5[0]) {
    id v3 = (id)(v5[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

id REVideoAssetGetAVPlayer(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    uint64_t v2 = re::VideoAsset::getAVPlayer(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

id _RETestingVideoAssetGetInternalPlayer(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    uint64_t v2 = re::VideoAsset::testingGetInternalAVPlayer(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetManagerMemoryAssetCreateWithAVSampleBufferVideoRenderer(re::VideoAsset *a1, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2, a3);
  uint64_t v3 = v6[0];
  if (v6[0]) {
    id v4 = (id)(v6[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

id REVideoAssetGetAVSampleBufferVideoRenderer(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    uint64_t v2 = re::VideoAsset::getAVSampleBufferVideoRenderer(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetAVSampleBufferVideoRenderer(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    unsigned int v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      id v5 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setAVSampleBufferVideoRenderer(v5, v3);
        uint64_t v6 = (os_unfair_lock_s *)v8;
        *((unsigned char *)v8 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

void REVideoAssetSetAVPlayer(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    unsigned int v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      id v5 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setAVPlayer(v5, v3);
        uint64_t v6 = (os_unfair_lock_s *)v8;
        *((unsigned char *)v8 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

id REVideoAssetGetVideoReceiverID(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    uint64_t v2 = re::VideoAsset::getReceiverEndpoint(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetManagerVideoMemoryAssetCreate(re::VideoAsset *a1, AssetService *a2)
{
  re::VideoAsset::makeVideoMutableMemoryAsset(v5, a1, a2);
  uint64_t v2 = v5[0];
  if (v5[0]) {
    id v3 = (id)(v5[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAssetManagerVideoMemoryAssetCreateWithoutTarget(re::VideoAsset *a1, AssetService *a2)
{
  re::VideoAsset::makeVideoMutableMemoryAssetWithoutTarget(v5, a1, a2);
  uint64_t v2 = v5[0];
  if (v5[0]) {
    id v3 = (id)(v5[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REAssetManagerAVSampleBufferVideoRendererMemoryAssetCreate(re::VideoAsset *a1, AssetService *a2, AVSampleBufferVideoRenderer *a3)
{
  re::VideoAsset::makeVideoMutableMemoryAsset(a1, a2, a3);
  uint64_t v3 = v6[0];
  if (v6[0]) {
    id v4 = (id)(v6[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v3;
}

void REAssetManagerPreloadVideoAssetOnce(uint64_t a1, uint64_t a2, char a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v13);
  uint64_t v6 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v13);
  if (v6)
  {
    uint64_t v7 = v6;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3321888768;
    v10[2] = __REAssetManagerPreloadVideoAssetOnce_block_invoke;
    uint64_t v10[3] = &__block_descriptor_81_a8_40c22_ZTSN2re11AssetHandleE_e5_v8__0l;
    v10[4] = v6;
    char v12 = a3;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)v13);
    uint64_t v9 = *(void *)(v7 + 112);
    size_t v8 = (dispatch_once_t *)(v7 + 112);
    unint64_t v11[3] = a1;
    v11[4] = a2;
    if (v9 != -1) {
      dispatch_once(v8, v10);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

void __REAssetManagerPreloadVideoAssetOnce_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 931) = *(unsigned char *)(a1 + 80);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (const re::AssetHandle *)(a1 + 40));
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)v5);
  AssetRequest = REAssetManagerCreateAssetRequest(*(re::AssetManager **)(a1 + 64));
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __REAssetManagerPreloadVideoAssetOnce_block_invoke_2;
  uint64_t v4[3] = &__block_descriptor_40_e8_v12__0B8l;
  v4[4] = AssetRequest;
  uint64_t v3 = _Block_copy(v4);
  REAssetLoadRequestSetLoadAndWaitForResourceSharingClients(AssetRequest, 1, 1, 0);
  REAssetLoadRequestAddAsset((re::AssetLoadRequest::Data **)AssetRequest, *(void *)(a1 + 72));
  REAssetLoadRequestSetCompletionHandler((uint64_t)AssetRequest, v3);

  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
}

void __REAssetManagerPreloadVideoAssetOnce_block_invoke_2(re *a1, int a2)
{
  id v4 = *re::videoLogObjects(a1);
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[REAssetManagerPreloadVideoAsset] Completed preloading video asset load request", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[REAssetManagerPreloadVideoAsset] Failed to create an asset load request", v5, 2u);
  }
}

re::AssetHandle *__copy_helper_block_a8_40c22_ZTSN2re11AssetHandleE(uint64_t a1, uint64_t a2)
{
  return re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 40), (const re::AssetHandle *)(a2 + 40));
}

void __destroy_helper_block_a8_40c22_ZTSN2re11AssetHandleE(uint64_t a1)
{
}

id REVideoAssetGetRemotePlayer(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = (id **)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1)
  {
    uint64_t v2 = re::VideoAsset::getRemotePlayer(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetRemotePlayer(uint64_t a1, void *a2)
{
  id v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  re::AssetHandle::loadNow((uint64_t)v8, 0);
  if (v8)
  {
    unsigned int v4 = atomic_load((unsigned int *)v8 + 176);
    if (v4 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
      ++*((_DWORD *)v8 + 65);
      uint64_t v5 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v7);
      if (v5)
      {
        re::VideoAsset::setRemotePlayer(v5, v3);
        uint64_t v6 = (os_unfair_lock_s *)v8;
        *((unsigned char *)v8 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v6);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

void *REVideoComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REVideoAssetGetDimensions(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v5);
  if (v1)
  {
    re::VideoAsset::dimensions(v1);
    double v3 = v2;
  }
  else
  {
    double v3 = 0.0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REVideoAssetGetAudioInputMode(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1) {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetAudioInputMode(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  re::AssetHandle::loadNow((uint64_t)v7, 0);
  if (v7)
  {
    unsigned int v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      uint64_t v4 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        *(unsigned char *)(v4 + 24) = a2;
        uint64_t v5 = (os_unfair_lock_s *)v7;
        *((unsigned char *)v7 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
      }
    }
  }
  re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v7 + 3), v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

float REVideoAssetGetReverbSendLevelDecibels(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1) {
    float v2 = *(float *)(v1 + 28);
  }
  else {
    float v2 = 0.0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetReverbSendLevelDecibels(uint64_t a1, float a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7)
  {
    unsigned int v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      uint64_t v4 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        *(float *)(v4 + 28) = a2;
        uint64_t v5 = (os_unfair_lock_s *)v7;
        *((unsigned char *)v7 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
        re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v7 + 3), v7);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

void REVideoAssetSetFileAssetPlaybackMode(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v6);
  if (v7)
  {
    unsigned int v3 = atomic_load((unsigned int *)v7 + 176);
    if (v3 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v6);
      ++*((_DWORD *)v7 + 65);
      uint64_t v4 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v6);
      if (v4)
      {
        re::VideoAsset::updateAutoPlay(v4, a2, 0);
        uint64_t v5 = (os_unfair_lock_s *)v7;
        *((unsigned char *)v7 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v7);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

void REVideoAssetSetFileAssets(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  re::AssetHandle::loadNow((uint64_t)v15, 0);
  if (v15)
  {
    unsigned int v5 = atomic_load((unsigned int *)v15 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v14);
      ++*((_DWORD *)v15 + 65);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)&v14);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v20 = 0;
        memset(v18, 0, sizeof(v18));
        int v19 = 0;
        if (a2)
        {
          while (1)
          {
            re::AssetAPIHelper::assetHandleCreate(*a3, &v16);
            if (!v17) {
              break;
            }
            uint64_t v9 = *(uint64_t **)(v17 + 264);
            if (v9 != re::VideoFileAsset::assetType(v8)) {
              goto LABEL_9;
            }
            re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v18, (re::AssetHandle *)&v16);
LABEL_13:
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
            ++a3;
            if (!--a2) {
              goto LABEL_19;
            }
          }
          re::VideoFileAsset::assetType(v8);
LABEL_9:
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          uint64_t v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            uint64_t v11 = re::AssetHandle::assetInfo((re::AssetHandle *)&v16);
            if (v11[17]) {
              char v12 = (char *)v11[18];
            }
            else {
              char v12 = (char *)v11 + 137;
            }
            *(_DWORD *)buf = 136315138;
            long long v22 = v12;
            _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Not a video file asset: '%s'", buf, 0xCu);
          }

          goto LABEL_13;
        }
LABEL_19:
        re::DynamicArray<re::AssetHandle>::operator=(v7 + 128, v18);
        re::VideoAsset::updateAutoPlay(v7, *(unsigned __int8 *)(v7 + 176), 0);
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v18);
        long long v13 = (os_unfair_lock_s *)v15;
        *((unsigned char *)v15 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v13);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v15);
      }
    }
  }
  re::AssetManager::assetPayloadDidChange(*((re::AssetManager **)v15 + 3), v15);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
}

uint64_t REVideoAssetGetFileAssetCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 144);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REVideoAssetGetFileAsset(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v3 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v8);
  if (!v3)
  {
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)(v3 + 144);
  if (v4 < a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid file asset index: %d", buf, 8u);
    }

    goto LABEL_8;
  }
  if (v4 <= a2)
  {
    uint64_t v8[3] = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    uint64_t v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 797;
    __int16 v13 = 2048;
    unint64_t v14 = a2;
    __int16 v15 = 2048;
    unint64_t v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 160) + 24 * a2);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

id REVideoFileAssetGetAVAsset(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::VideoFileAsset>((re::VideoFileAsset *)v4);
  if (v1) {
    id v2 = **(id **)(v1 + 40);
  }
  else {
    id v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void REVideoAssetSetDiffuseSpillMapDimensions(uint64_t a1, int32x2_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int32x2_t v11 = vmin_s32(vmax_s32(a2, 0), (int32x2_t)0x10000000100);
  uint32x2_t v3 = (uint32x2_t)vceq_s32(v11, a2);
  if ((vpmin_u32(v3, v3).u32[0] & 0x80000000) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v9) = 67109888;
      HIDWORD(v9) = a2.i32[0];
      *(void *)buf = v9;
      LOWORD(v13) = 1024;
      *(_DWORD *)((unint64_t)buf | 0xA) = a2.i32[1];
      HIWORD(v13) = 1024;
      __int32 v14 = v11.i32[0];
      __int16 v15 = 1024;
      __int32 v16 = v11.i32[1];
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapDimensions] Invalid spill map dimensions: %d %d, diffuse spill map clamped to %d %d", buf, 0x1Au);
    }
  }
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)buf);
    if (v13)
    {
      unsigned int v5 = atomic_load((unsigned int *)v13 + 176);
      if (v5 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)buf);
        ++*((_DWORD *)v13 + 65);
        uint64_t v6 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)buf);
        if (v6)
        {
          *(int32x2_t *)(v6 + 216) = v11;
          uint64_t v7 = (os_unfair_lock_s *)v13;
          *((unsigned char *)v13 + 2+ 56) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v13);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)buf);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    size_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapDimensions] Invalid video asset reference", buf, 2u);
    }
  }
}

void REVideoAssetSetSpecularSpillMapDimensions(uint64_t a1, int32x2_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int32x2_t v11 = vmin_s32(vmax_s32(a2, 0), (int32x2_t)0x80000000800);
  uint32x2_t v3 = (uint32x2_t)vceq_s32(v11, a2);
  if ((vpmin_u32(v3, v3).u32[0] & 0x80000000) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v9) = 67109888;
      HIDWORD(v9) = a2.i32[0];
      *(void *)buf = v9;
      LOWORD(v13) = 1024;
      *(_DWORD *)((unint64_t)buf | 0xA) = a2.i32[1];
      HIWORD(v13) = 1024;
      __int32 v14 = v11.i32[0];
      __int16 v15 = 1024;
      __int32 v16 = v11.i32[1];
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapDimensions] Invalid spill map dimensions: %d %d, specular spill map clamped to %d %d", buf, 0x1Au);
    }
  }
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)buf);
    if (v13)
    {
      unsigned int v5 = atomic_load((unsigned int *)v13 + 176);
      if (v5 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)buf);
        ++*((_DWORD *)v13 + 65);
        uint64_t v6 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)buf);
        if (v6)
        {
          *(int32x2_t *)(v6 + 232) = v11;
          uint64_t v7 = (os_unfair_lock_s *)v13;
          *((unsigned char *)v13 + 2+ 56) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v13);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)buf);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    size_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapDimensions] Invalid video asset reference", buf, 2u);
    }
  }
}

void REVideoAssetSetDiffuseSpillMapBlurSigma(uint64_t a1, int a2)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, &v7);
    if (v8)
    {
      unsigned int v3 = atomic_load((unsigned int *)v8 + 176);
      if (v3 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
        ++*((_DWORD *)v8 + 65);
        unint64_t v4 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v7);
        if (v4)
        {
          re::VideoAsset::setDiffuseSpillMapBlurSigma(v4, a2);
          unsigned int v5 = (os_unfair_lock_s *)v8;
          *((unsigned char *)v8 + 2+ 56) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v7);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[REVideoAssetSetDiffuseSpillMapBlurSigma] Invalid video asset reference", (uint8_t *)&v7, 2u);
    }
  }
}

void REVideoAssetSetSpecularSpillMapBlurSigma(uint64_t a1, int a2)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, &v7);
    if (v8)
    {
      unsigned int v3 = atomic_load((unsigned int *)v8 + 176);
      if (v3 == 2)
      {
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v7);
        ++*((_DWORD *)v8 + 65);
        unint64_t v4 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)&v7);
        if (v4)
        {
          re::VideoAsset::setSpecularSpillMapBlurSigma(v4, a2);
          unsigned int v5 = (os_unfair_lock_s *)v8;
          *((unsigned char *)v8 + 2+ 56) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v5);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v8);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v7);
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[REVideoAssetSetSpecularSpillMapBlurSigma] Invalid video asset reference", (uint8_t *)&v7, 2u);
    }
  }
}

uint64_t REVideoComponentGetVideoAsset(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

void REVideoComponentSetVideoAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)v4);
  re::AssetHandle::operator=(a1 + 168, v3);
  *(unsigned char *)(a1 + 73) = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t REVideoComponentGetMaterialAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void REVideoComponentSetMaterialAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  re::AssetHandle::operator=(a1 + 32, v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

void REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials(uint64_t a1)
{
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane0", "texturePlane0");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane1", "texturePlane1");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane2", "texturePlane2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane0", "texturePlane0ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane1", "texturePlane1ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane2", "texturePlane2ChannelID2");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentConstantYCbCrMatrix", "YCbCrMatrixOption");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentConstantImageFunction", "imageFunction");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID1TextureSpill", "textureSpill");
  REVideoComponentAddAttachmentOnAllMaterials(a1, @"REVideoAttachmentChannelID2TextureSpill", "textureSpill2");
}

void REVideoComponentAddAttachmentOnAllMaterials(uint64_t a1, id a2, const char *a3)
{
  unsigned int v5 = (_anonymous_namespace_ *)[a2 UTF8String];
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  v8[0] = 0;
  v8[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 80), &v7);
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REVideoComponentRemoveRealityKitDefaultAttachmentsOnAllMaterials(uint64_t a1)
{
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane0", "texturePlane0");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane1", "texturePlane1");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID1TexturePlane2", "texturePlane2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane0", "texturePlane0ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane1", "texturePlane1ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID2TexturePlane2", "texturePlane2ChannelID2");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentConstantYCbCrMatrix", "YCbCrMatrixOption");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentConstantImageFunction", "imageFunction");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID1TextureSpill", "textureSpill");
  REVideoComponentRemoveAttachmentFromAllMaterials(a1, @"REVideoAttachmentChannelID2TextureSpill", "textureSpill2");
}

void REVideoComponentRemoveAttachmentFromAllMaterials(uint64_t a1, id a2, const char *a3)
{
  unsigned int v5 = (_anonymous_namespace_ *)[a2 UTF8String];
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  v8[0] = 0;
  v8[1] = "";
  re::ecs2::VideoComponent::removeAttachment(a1, &v7);
  re::StringID::destroyString((re::StringID *)v8);
  re::StringID::destroyString((re::StringID *)&v7);
}

double REVideoComponentGetFadeThreshold()
{
  return 0.0;
}

uint64_t REVideoComponentGetDesiredViewingMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t REVideoComponentSetDesiredViewingMode(uint64_t result, char a2)
{
  *(unsigned char *)(result + + 56) = a2;
  return result;
}

uint64_t REVideoComponentGetCurrentViewingMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

double REVideoComponentGetCurrentImageSize(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t REVideoComponentGetForceStereoSideBySide(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t REVideoComponentSetForceStereoSideBySide(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t REVideoComponentSetOptOutOfAudioControl(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 291) = a2;
  }
  return result;
}

BOOL REVideoComponentGetOptOutOfAudioControl(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 291) != 0;
  }
  return result;
}

uint64_t REVideoComponentSetLightSpillTraitEnabled(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 292) |= 1u;
  }
  return result;
}

uint64_t REVideoComponentGetLightSpillTraitEnabled(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 292) & 1;
  }
  return result;
}

re::ecs2::VideoComponent *REVideoComponentGetReadyToRender(re::ecs2::VideoComponent *result)
{
  if (result) {
    return (re::ecs2::VideoComponent *)re::ecs2::VideoComponent::getReadyToRender(result);
  }
  return result;
}

__CFString *REVideoComponentGetStereoMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56) == 1) {
    return @"REVideoStereoModeMono";
  }
  else {
    return @"REVideoStereoModeStereo";
  }
}

uint64_t REVideoComponentSetStereoMode(uint64_t result)
{
  *(unsigned char *)(result + + 56) = 1;
  return result;
}

uint64_t REVideoComponentSetTransitionAlpha(uint64_t result, float a2)
{
  *(float *)(result + 30ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

float REVideoComponentGetTransitionAlpha(uint64_t a1)
{
  return *(float *)(a1 + 300);
}

uint64_t REComponentIsAvailableForMajorVersion(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 56))(&v6);
  long long v5 = v6;
  v4[0] = 0;
}

uint64_t REAssetIsAvailableForMajorVersion(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v3 = re::TypeAvailabilityUtilities::checkAssetIsAvailableForMajorVersion((re::SceneAsset *)v5, a2, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t REComponentGetInitialRelease(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 56))(&v3);
  long long v2 = v3;
}

uint64_t REAssetGetInitialRelease(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t AssetInitialRelease = (int)re::TypeAvailabilityUtilities::getAssetInitialRelease((re::TypeAvailabilityUtilities *)v4, v1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return AssetInitialRelease;
}

void *RETransformComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

__n128 RETransformComponentGetLocalPose(__n128 *a1)
{
  return a1[4];
}

void RETransformComponentSetLocalPose(__n128 *a1, int8x16_t a2, float32x4_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v3.i32[1] = a2.i32[1];
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) == 0
    && (v4.i8[0] & 1) == 0
    && (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) == 0)
  {
    if (a1[1].n128_u64[0])
    {
      int8x16_t v11 = a2;
      float32x4_t v12 = a3;
      long long v6 = (unint64_t *)re::BindPoint::baseValueUntyped((re::BindPoint *)&a1[5]);
      unint64_t v8 = *v6;
      unint64_t v7 = v6[1];
      if (a1[1].n128_u64[0])
      {
        uint64_t v9 = (__n128 *)re::BindPoint::baseValueUntyped((re::BindPoint *)&a1[5]);
        a2 = v11;
        a3 = v12;
LABEL_15:
        v9->n128_u64[0] = v8;
        v9->n128_u64[1] = v7;
        v9[1] = (__n128)a3;
        v9[2] = (__n128)a2;
        re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
        return;
      }
      a2 = v11;
      a3 = v12;
    }
    else
    {
      unint64_t v8 = a1[2].n128_u64[0];
      unint64_t v7 = a1[2].n128_u64[1];
    }
    uint64_t v9 = a1 + 2;
    goto LABEL_15;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    __int32 v14 = "RETransformComponentSetLocalPose";
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
  }
}

void RETransformComponentSetLocalSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  int8x16_t v4 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  v5.i32[1] = a2.i32[1];
  v5.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v6 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v5), (int8x8_t)vcgez_f32(v5)));
  if ((v6.i8[4] & 1) != 0
    || (v6.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (v7.i32[1] = a4.i32[1], v7.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], int8x8_t v8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v7), (int8x8_t)vcgez_f32(v7))), (v8.i8[4] & 1) != 0)|| (v8.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int8x16_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      __int32 v16 = "RETransformComponentSetLocalSRT";
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    if (*(void *)(a1 + 16))
    {
      float32x4_t v13 = a3;
      int8x16_t v14 = a4;
      int8x16_t v12 = v4;
      uint64_t v10 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      int8x16_t v4 = v12;
      a3 = v13;
      a4 = v14;
    }
    else
    {
      uint64_t v10 = a1 + 32;
    }
    *(int8x16_t *)uint64_t v10 = v4;
    *(float32x4_t *)(v10 + 16) = a3;
    *(int8x16_t *)(v10 + 32) = a4;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalSRT(__n128 *a1)
{
  return a1[2];
}

__n128 RETransformComponentGetLocalUnanimatedSRT(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v1 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
  }
  else {
    uint64_t v1 = a1 + 32;
  }
  return *(__n128 *)v1;
}

uint64_t RETransformComponentIsAnimated(uint64_t a1)
{
  return re::BindPoint::isOverridden((re::BindPoint *)(a1 + 80));
}

void RETransformComponentSetLocalTranslation(uint64_t a1, int8x16_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if (v3.i8[4] & 1) != 0 || (v3.i8[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    float32x2_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v10 = "RETransformComponentSetLocalTranslation";
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    if (*(void *)(a1 + 16))
    {
      int8x16_t v8 = a2;
      uint64_t v5 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v8;
      int8x8_t v6 = (__n128 *)(v5 + 32);
    }
    else
    {
      int8x8_t v6 = (__n128 *)(a1 + 64);
    }
    *int8x8_t v6 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalTranslation(__n128 *a1)
{
  return a1[4];
}

void RETransformComponentSetLocalOrientation(uint64_t a1, float32x4_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a2), (int8x16_t)vcgezq_f32(a2))))))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    float32x2_t v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int8x16_t v8 = "RETransformComponentSetLocalOrientation";
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    if (*(void *)(a1 + 16))
    {
      float32x4_t v6 = a2;
      uint64_t v4 = re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v6;
      uint64_t v5 = (__n128 *)(v4 + 16);
    }
    else
    {
      uint64_t v5 = (__n128 *)(a1 + 48);
    }
    __n128 *v5 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalOrientation(__n128 *a1)
{
  return a1[3];
}

void RETransformComponentSetLocalScale(uint64_t a1, int8x16_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if (v3.i8[4] & 1) != 0 || (v3.i8[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    float32x4_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v9 = "RETransformComponentSetLocalScale";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    if (*(void *)(a1 + 16))
    {
      int8x16_t v7 = a2;
      uint64_t v5 = (__n128 *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 80));
      a2 = v7;
    }
    else
    {
      uint64_t v5 = (__n128 *)(a1 + 32);
    }
    __n128 *v5 = (__n128)a2;
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

__n128 RETransformComponentGetLocalScale(__n128 *a1)
{
  return a1[2];
}

double RETransformComponentGetWorldUnanimatedMatrix4x4F(re::ecs2::TransformComponent *a1)
{
  flushDirtyComponentsQueue(*((void **)a1 + 2));
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, 0, (uint64_t)&v3);
  return *(double *)&v3;
}

void *flushDirtyComponentsQueue(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = result;
      uint64_t result = (void *)result[3];
    }
    while (result);
    uint64_t v2 = v1[2];
    if (v2)
    {
      uint64_t result = *(void **)(v2 + 56);
      if (result) {
        return (void *)(*(uint64_t (**)(void))(*result + 200))();
      }
    }
  }
  return result;
}

double RETransformComponentGetWorldMatrix4x4F(re::ecs2::TransformComponent *a1)
{
  flushDirtyComponentsQueue(*((void **)a1 + 2));
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, 1, (uint64_t)&v3);
  return *(double *)&v3;
}

double RETransformComponentGetParentWorldMatrix4x4F(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v2, (const re::ecs2::Entity *)1, &v4);
    return *(double *)&v4;
  }
  else
  {
    *(void *)&double result = 1065353216;
  }
  return result;
}

double RETransformComponentGetParentWorldUnanimatedMatrix4x4F(uint64_t a1)
{
  uint64_t v1 = *(re::ecs2::TransformComponent **)(a1 + 16);
  if (v1)
  {
    re::ecs2::TransformComponent::parentWorldMatrix4x4F(v1, 0, &v3);
    return *(double *)&v3;
  }
  else
  {
    *(void *)&double result = 1065353216;
  }
  return result;
}

double RETransformComponentGetWorldPose(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v5);
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 48);
    v5[0] = *(_OWORD *)(a1 + 32);
    v5[1] = v3;
    long long v6 = *(_OWORD *)(a1 + 64);
  }
  return *(double *)&v6;
}

__n128 RETransformComponentGetWorldPosition(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(v2, (const re::ecs2::Entity *)1, v4);
    result.n128_u64[0] = v5;
  }
  else
  {
    return *(__n128 *)(a1 + 64);
  }
  return result;
}

double RETransformComponentGetWorldOrientation(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2) {
    return *(double *)(a1 + 48);
  }
  re::ecs2::TransformComponent::worldOrientation(v2, (const re::ecs2::Entity *)1);
  return v3;
}

double RETransformComponentGetWorldScale(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2) {
    return *(double *)(a1 + 32);
  }
  re::ecs2::TransformComponent::worldScale(v2, (const re::ecs2::Entity *)1);
  return v3;
}

double RETransformComponentGetWorldSRT(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  uint64_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v5);
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 48);
    v5[0] = *(_OWORD *)(a1 + 32);
    v5[1] = v3;
    _OWORD v5[2] = *(_OWORD *)(a1 + 64);
  }
  return *(double *)v5;
}

void RETransformComponentSetWorldMatrix4x4F(uint64_t a1, __n128 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v12.columns[0] = (simd_float4)a2;
  v12.columns[1] = a3;
  v12.columns[2] = a4;
  v12.columns[3] = a5;
  if (containsNaN(&v12))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "RETransformComponentSetWorldMatrix4x4F";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    *(__n128 *)buf = a2;
    simd_float4 v17 = a3;
    simd_float4 v18 = a4;
    simd_float4 v19 = a5;
    long long v14 = xmmword_23435FBB0;
    int32x4_t v15 = 0u;
    long long v13 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)buf, &v15, &v14, &v13);
    v11[0] = v15;
    v11[1] = v14;
    v11[2] = v13;
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v11, 0);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

BOOL containsNaN(simd_float4x4 *a1)
{
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[0]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[0]))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[1]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[1]))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a1->columns[2]), (int8x16_t)vcgezq_f32((float32x4_t)a1->columns[2]))))))
  {
    return 1;
  }
  int8x16_t v2 = (int8x16_t)a1->columns[3];
  BOOL result = 1;
  v3.i32[1] = v2.i32[1];
  v3.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  int8x8_t v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) == 0) {
    return (v4.i8[0] & 1) != 0;
  }
  return result;
}

void RETransformComponentSetWorldAnimatedMatrix4x4F(uint64_t a1, __n128 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v12.columns[0] = (simd_float4)a2;
  v12.columns[1] = a3;
  v12.columns[2] = a4;
  v12.columns[3] = a5;
  if (containsNaN(&v12))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "RETransformComponentSetWorldAnimatedMatrix4x4F";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    *(__n128 *)buf = a2;
    simd_float4 v17 = a3;
    simd_float4 v18 = a4;
    simd_float4 v19 = a5;
    long long v14 = xmmword_23435FBB0;
    int32x4_t v15 = 0u;
    long long v13 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)buf, &v15, &v14, &v13);
    v11[0] = v15;
    v11[1] = v14;
    v11[2] = v13;
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v11, (re::ecs2::Entity *)1);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

void RETransformComponentSetWorldPose(void *a1, int8x16_t a2, float32x4_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v3.i32[1] = a2.i32[1];
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v3), (int8x8_t)vcgez_f32(v3)));
  if ((v4.i8[4] & 1) != 0
    || (v4.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "RETransformComponentSetWorldPose";
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)buf, 0xCu);
    }
  }
  else
  {
    long long v6 = (re::ecs2::TransformComponent **)a1[2];
    if (v6)
    {
      int8x16_t v10 = a2;
      float32x4_t v11 = a3;
      re::ecs2::TransformComponent::worldScale(v6, (const re::ecs2::Entity *)1);
      a2 = v10;
      a3 = v11;
    }
    else
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = a1[5];
    }
    *(void *)&buf[0] = v7;
    *((void *)&buf[0] + 1) = v8;
    buf[1] = a3;
    buf[2] = a2;
    re::ecs2::TransformComponent::setWorldSRT((uint64_t)a1, (uint64_t)buf, 0);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldPosition(void *a1, int8x16_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if (v3.i8[4] & 1) != 0 || (v3.i8[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = "RETransformComponentSetWorldPosition";
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    re::ecs2::TransformComponent::setWorldPosition(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldOrientation(void *a1, float32x4_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a2), (int8x16_t)vcgezq_f32(a2))))))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    float32x2_t v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315138;
      long long v5 = "RETransformComponentSetWorldOrientation";
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v4, 0xCu);
    }
  }
  else
  {
    re::ecs2::TransformComponent::setWorldOrientation(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldScale(void *a1, int8x16_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v2.i32[1] = a2.i32[1];
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  int8x8_t v3 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v2), (int8x8_t)vcgez_f32(v2)));
  if (v3.i8[4] & 1) != 0 || (v3.i8[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = "RETransformComponentSetWorldScale";
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    re::ecs2::TransformComponent::setWorldScale(a1, a2.i64[0], a2.i64[1]);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
}

void RETransformComponentSetWorldSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  a2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  *(int8x8_t *)a2.i8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a2.i8)));
  if ((a2.i8[4] & 1) != 0
    || (a2.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (a4.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], int8x8_t v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a4.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a4.i8))), (v4.i8[4] & 1) != 0)|| (v4.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v9 = "RETransformComponentSetWorldSRT";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v7, 0);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

void RETransformComponentSetWorldAnimatedSRT(uint64_t a1, int8x16_t a2, float32x4_t a3, int8x16_t a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  a2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  *(int8x8_t *)a2.i8 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a2.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a2.i8)));
  if ((a2.i8[4] & 1) != 0
    || (a2.i8[0] & 1) != 0
    || (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(a3), (int8x16_t)vcgezq_f32(a3)))) & 0xF) != 0|| (a4.i32[0] = vextq_s8(a4, a4, 8uLL).u32[0], int8x8_t v4 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)a4.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)a4.i8))), (v4.i8[4] & 1) != 0)|| (v4.i8[0] & 1) != 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v9 = "RETransformComponentSetWorldAnimatedSRT";
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Call to %s contains NaN. Skipping.", buf, 0xCu);
    }
  }
  else
  {
    re::ecs2::TransformComponent::setWorldSRT(a1, (uint64_t)v7, (re::ecs2::Entity *)1);
    re::ecs2::Component::enqueueMarkDirty(a1);
  }
}

double RETransformComponentCalculateWorldMatrix4x4F(re::ecs2::TransformComponent *a1)
{
  flushDirtyComponentsQueue(*((void **)a1 + 2));
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, 1, (uint64_t)&v3);
  return *(double *)&v3;
}

double RETransformComponentCalculateWorldPose(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  float32x2_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v5);
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 48);
    v5[0] = *(_OWORD *)(a1 + 32);
    v5[1] = v3;
    long long v6 = *(_OWORD *)(a1 + 64);
  }
  return *(double *)&v6;
}

__n128 RETransformComponentCalculateWorldPosition(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  float32x2_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldMatrix4x4F(v2, (const re::ecs2::Entity *)1, v4);
    result.n128_u64[0] = v5;
  }
  else
  {
    return *(__n128 *)(a1 + 64);
  }
  return result;
}

double RETransformComponentCalculateWorldOrientation(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  float32x2_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2) {
    return *(double *)(a1 + 48);
  }
  re::ecs2::TransformComponent::worldOrientation(v2, (const re::ecs2::Entity *)1);
  return v3;
}

double RETransformComponentCalculateWorldScale(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  float32x2_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (!v2) {
    return *(double *)(a1 + 32);
  }
  re::ecs2::TransformComponent::worldScale(v2, (const re::ecs2::Entity *)1);
  return v3;
}

double RETransformComponentCalculateWorldSRT(uint64_t a1)
{
  flushDirtyComponentsQueue(*(void **)(a1 + 16));
  float32x2_t v2 = *(re::ecs2::TransformComponent ***)(a1 + 16);
  if (v2)
  {
    re::ecs2::TransformComponent::worldSRT(v2, (const re::ecs2::Entity *)1, (uint64_t)v5);
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 48);
    v5[0] = *(_OWORD *)(a1 + 32);
    v5[1] = v3;
    _OWORD v5[2] = *(_OWORD *)(a1 + 64);
  }
  return *(double *)v5;
}

uint64_t REStateMachineAssetCreateAsset(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 104, 8);
  uint64_t v10 = v9;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v9 + 96) = 0;
  uint64_t v27 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (a2)
  {
    float32x4_t v11 = (const char **)(a3 + 16);
    do
    {
      simd_float4x4 v12 = *(v11 - 2);
      v22[0] = 0;
      v22[1] = (uint64_t)"";
      uint64_t v13 = *(v11 - 1);
      v23[0] = 0;
      v23[1] = "";
      int32x4_t v15 = *v11;
      v11 += 3;
      v24[0] = 0;
      v24[1] = "";
      re::DynamicArray<re::StateMachineInitializationData>::add(v25, v22);
      re::StringID::destroyString((re::StringID *)v24);
      re::StringID::destroyString((re::StringID *)v23);
      re::StringID::destroyString((re::StringID *)v22);
      --a2;
    }
    while (a2);
  }
  inited = re::StateMachineAsset::initWithInitData(v10, v25, a4 + 24);
  simd_float4 v18 = re::StateMachineAsset::assetType(inited);
  (*(void (**)(uint64_t *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v22, a1, v10, v18, 0, 0, 0);
  uint64_t v19 = v22[0];
  if (v22[0]) {
    id v20 = (id)(v22[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)v25);
  return v19;
}

uint64_t REStateMachineAssetCreate(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 104, 8);
  uint64_t v10 = (_anonymous_namespace_ *)v9;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v9 + 96) = 0;
  uint64_t v27 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (a2)
  {
    float32x4_t v11 = (const char **)(a3 + 16);
    do
    {
      simd_float4x4 v12 = *(v11 - 2);
      v22[0] = 0;
      v22[1] = (uint64_t)"";
      uint64_t v13 = *(v11 - 1);
      v23[0] = 0;
      v23[1] = "";
      int32x4_t v15 = *v11;
      v11 += 3;
      v24[0] = 0;
      v24[1] = "";
      re::DynamicArray<re::StateMachineInitializationData>::add(v25, v22);
      re::StringID::destroyString((re::StringID *)v24);
      re::StringID::destroyString((re::StringID *)v23);
      re::StringID::destroyString((re::StringID *)v22);
      --a2;
    }
    while (a2);
  }
  inited = (re::StateMachineAsset *)re::StateMachineAsset::initWithInitData(v10, v25, (uint64_t *)(a4 + 24));
  simd_float4 v18 = re::StateMachineAsset::assetType(inited);
  (*(void (**)(uint64_t *__return_ptr, re *, _anonymous_namespace_ *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v22, a1, v10, v18, 0, 0, 0);
  uint64_t v19 = v22[0];
  if (v22[0]) {
    id v20 = (id)(v22[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  re::DynamicArray<re::RenderGraphOutputData>::deinit((uint64_t)v25);
  return v19;
}

uint64_t REStateMachineAssetSingleGraphCreate(re *a1, uint64_t a2, uint64_t a3)
{
  v12[3] = *MEMORY[0x263EF8340];
  REStateMachineAssetStateGraphGroupCreate(a1);
  uint64_t v7 = (uint64_t *)(v6 + 24);
  re::DynamicArray<re::SMAssetStateGraph>::add((_anonymous_namespace_ *)(v6 + 24), a2 + 24);
  REStateMachineAssetStateGraphGroupCollectionCreate(v8);
  uint64_t v10 = v9;
  re::DynamicArray<re::SMAssetStateGraphGroup>::add((_anonymous_namespace_ *)(v9 + 24), v7);
  v12[0] = "";
  v12[1] = "";
  void v12[2] = a3;
  return REStateMachineAssetCreate(a1, 1, (uint64_t)v12, v10);
}

void REStateMachineAssetStateGraphGroupCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E7340C8;
  *(void *)(v2 + + 56) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

float REStateMachineAssetStateGraphGroupAddStateGraph(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraph>::add((_anonymous_namespace_ *)(a1 + 24), a2 + 24);
}

void REStateMachineAssetStateGraphGroupCollectionCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E734110;
  *(void *)(v2 + + 56) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v2 + 48) = 0;
}

uint64_t REStateMachineAssetStateGraphGroupCollectionAddStateGraphGroup(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SMAssetStateGraphGroup>::add((_anonymous_namespace_ *)(a1 + 24), (uint64_t *)(a2 + 24));
}

uint64_t REStateMachineAssetStateGraphCreate(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 192, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E734080;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + + 56) = 0;
  *(void *)(v3 + 72) = "";
  *(unsigned char *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = "";
  *(_DWORD *)(v3 + 184) = 0;
  v6[0] = 0;
  v6[1] = (uint64_t)"";
  re::StringID::operator=((unint64_t *)(v3 + 64), v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v3;
}

uint64_t REStateMachineAssetStateCreate(const char *a1)
{
  uint64_t v2 = v6;
  v5[0] = 0;
  v5[1] = (uint64_t)"";
  re::StringID::operator=((unint64_t *)(v2 + 104), v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v2;
}

uint64_t REStateMachineAssetTransitionCreate(const char *a1, const char *a2, const char *a3, char a4, float a5)
{
  uint64_t v10 = v18;
  v17[0] = 0;
  v17[1] = (uint64_t)"";
  v16[0] = 0;
  v16[1] = (uint64_t)"";
  v15[0] = 0;
  v15[1] = (uint64_t)"";
  re::StringID::operator=((unint64_t *)(v10 + 64), v17);
  re::StringID::operator=((unint64_t *)(v10 + 80), v16);
  re::StringID::operator=((unint64_t *)(v10 + 96), v15);
  *(float *)(v10 + 112) = a5;
  *(unsigned char *)(v10 + 116) = a4;
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v17);
  return v10;
}

uint64_t REStateMachineAssetIntConditionCreate(const char *a1, char a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = (uint64_t)"";
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  v16[0] = 0;
  *(void *)&v16[8] = 0;
  *(void *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 1;
  *(void *)&v16[8] = a3;
  v16[21] = a2;
  uint64_t v7 = v17;
  unint64_t v8 = v14;
  uint64_t v9 = v15;
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  uint64_t v10 = *(void *)(v17 + 24);
  uint64_t v11 = *(void *)(v17 + 32);
  *(void *)(v17 + 24) = v8;
  *(void *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)v16;
  *(void *)(v7 + 54) = *(void *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetFloatConditionCreate(const char *a1, char a2, float a3)
{
  v13[0] = 0;
  v13[1] = (uint64_t)"";
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  v16[0] = 0;
  *(void *)&v16[8] = 0;
  *(void *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 2;
  *(float *)&v16[16] = a3;
  v16[21] = a2;
  uint64_t v7 = v17;
  unint64_t v8 = v14;
  uint64_t v9 = v15;
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  uint64_t v10 = *(void *)(v17 + 24);
  uint64_t v11 = *(void *)(v17 + 32);
  *(void *)(v17 + 24) = v8;
  *(void *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)v16;
  *(void *)(v7 + 54) = *(void *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetBoolConditionCreate(const char *a1, char a2, char a3)
{
  v13[0] = 0;
  v13[1] = (uint64_t)"";
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  v16[0] = 0;
  *(void *)&v16[8] = 0;
  *(void *)&v16[14] = 0;
  re::StringID::operator=(&v14, v13);
  v16[0] = 3;
  v16[20] = a3;
  v16[21] = a2;
  uint64_t v7 = v17;
  unint64_t v8 = v14;
  uint64_t v9 = v15;
  unint64_t v14 = 0;
  int32x4_t v15 = "";
  uint64_t v10 = *(void *)(v17 + 24);
  uint64_t v11 = *(void *)(v17 + 32);
  *(void *)(v17 + 24) = v8;
  *(void *)(v7 + 32) = v9;
  v18[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v18[1] = v11;
  re::StringID::destroyString((re::StringID *)v18);
  *(_OWORD *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)v16;
  *(void *)(v7 + 54) = *(void *)&v16[14];
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)v13);
  return v7;
}

uint64_t REStateMachineAssetTriggerConditionCreate(const char *a1)
{
  v9[0] = 0;
  v9[1] = (uint64_t)"";
  unint64_t v10 = 0;
  uint64_t v11 = "";
  v12[0] = 0;
  *(void *)&v12[8] = 0;
  *(void *)&v12[14] = 0;
  re::StringID::operator=(&v10, v9);
  v12[0] = 4;
  *(_WORD *)&v12[20] = 1;
  uint64_t v3 = v13;
  unint64_t v4 = v10;
  long long v5 = v11;
  unint64_t v10 = 0;
  uint64_t v11 = "";
  uint64_t v6 = *(void *)(v13 + 24);
  uint64_t v7 = *(void *)(v13 + 32);
  *(void *)(v13 + 24) = v4;
  *(void *)(v3 + 32) = v5;
  v14[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v14[1] = v7;
  re::StringID::destroyString((re::StringID *)v14);
  *(_OWORD *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)v12;
  *(void *)(v3 + 54) = *(void *)&v12[14];
  re::StringID::destroyString((re::StringID *)&v10);
  re::StringID::destroyString((re::StringID *)v9);
  return v3;
}

uint64_t REStateMachineAssetCommandCreate(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (const char *)a1;
  uint64_t v9 = 0;
  unint64_t v10 = "";
  LOBYTE(v3) = re::ecs2::StateCommandFactoryECS::getCommandIDFromCommandName((re::ecs2::StateCommandFactoryECS *)&v9, v4);
  re::StringID::destroyString((re::StringID *)&v9);
  uint64_t v5 = v8;
  uint64_t v9 = 0;
  unint64_t v10 = "";
  *(unsigned char *)(v5 + 424) = (_BYTE)v3;
  re::StringID::operator=((unint64_t *)(v5 + 432), &v9);
  re::StringID::destroyString((re::StringID *)&v9);
  return v5;
}

__n128 REStateMachineAssetTransitionAddCondition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= *(void *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetTransitionCondition>::growCapacity((void *)(a1 + 24), v4 + 1);
    unint64_t v4 = *(void *)(a1 + 40);
  }
  uint64_t v5 = re::StringID::StringID((re::StringID *)(*(void *)(a1 + 56) + 40 * v4), (const StringID *)(a2 + 24));
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)((char *)v5 + 3ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 54);
  *((__n128 *)v5 + 1) = result;
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::StringID *REStateMachineAssetStateAddTransition(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= *(void *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetStateTransition>::growCapacity((void *)(a1 + 24), v4 + 1);
    unint64_t v4 = *(void *)(a1 + 40);
  }
  uint64_t v5 = *(void *)(a1 + 56) + 96 * v4;
  re::DynamicArray<re::SMAssetTransitionCondition>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 64));
  re::StringID::StringID((re::StringID *)(v5 + 56), (const StringID *)(a2 + 80));
  __n128 result = re::StringID::StringID((re::StringID *)(v5 + 72), (const StringID *)(a2 + 96));
  int v7 = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(v5 + 92) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(v5 + 88) = v7;
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

re::StringID *REStateMachineAssetStateAddCommand(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >= *(void *)(a1 + 72))
  {
    re::DynamicArray<re::SMAssetStateCommand>::growCapacity((void *)(a1 + 64), v4 + 1);
    unint64_t v4 = *(void *)(a1 + 80);
  }
  uint64_t v5 = *(void *)(a1 + 96) + 424 * v4;
  re::DynamicArray<re::StringID>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::DynamicArray<char const*>::DynamicArray(v5 + 40, (uint64_t *)(a2 + 64));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 80, (uint64_t *)(a2 + 104));
  re::DynamicArray<float>::DynamicArray(v5 + 120, (uint64_t *)(a2 + 144));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 160, (uint64_t *)(a2 + 184));
  re::DynamicArray<char const*>::DynamicArray(v5 + 200, (uint64_t *)(a2 + 224));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 240, (uint64_t *)(a2 + 264));
  re::DynamicArray<BOOL>::DynamicArray(v5 + 280, (uint64_t *)(a2 + 304));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 320, (uint64_t *)(a2 + 344));
  re::DynamicArray<re::StringID>::DynamicArray(v5 + 360, (uint64_t *)(a2 + 384));
  *(unsigned char *)(v5 + 40ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a2 + 424);
  __n128 result = re::StringID::StringID((re::StringID *)(v5 + 408), (const StringID *)(a2 + 432));
  ++*(void *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  return result;
}

void REStateMachineAssetCommandAddParameterInt(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = (_anonymous_namespace_ *)(a1 + 24);
  *(void *)&v8.var0 = 0;
  v8.var1 = "";
  re::DynamicArray<re::StringID>::add(v6, &v8);
  unint64_t v7 = *(void *)(a1 + 80);
  if (v7 >= *(void *)(a1 + 72))
  {
    re::DynamicArray<float *>::growCapacity((void *)(a1 + 64), v7 + 1);
    unint64_t v7 = *(void *)(a1 + 80);
  }
  *(void *)(*(void *)(a1 + 96) + 8 * v7) = a3;
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = v7 + 1;
  ++*(_DWORD *)(a1 + 88);
  re::StringID::destroyString((re::StringID *)&v8);
}

void REStateMachineAssetCommandAddParameterFloat(uint64_t a1, const char *a2, float a3)
{
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  float v7 = a3;
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 104), &v6);
  re::DynamicArray<float>::add((_anonymous_namespace_ *)(a1 + 144), &v7);
  re::StringID::destroyString((re::StringID *)&v6);
}

void REStateMachineAssetCommandAddParameterDouble(uint64_t a1, const char *a2, double a3)
{
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 184), &v7);
  unint64_t v6 = *(void *)(a1 + 240);
  if (v6 >= *(void *)(a1 + 232))
  {
    re::DynamicArray<float *>::growCapacity((void *)(a1 + 224), v6 + 1);
    unint64_t v6 = *(void *)(a1 + 240);
  }
  *(double *)(*(void *)(a1 + 256) + 8 * v6) = a3;
  *(void *)(a1 + 24ArcSharedObject::ArcSharedObject(this, 0) = v6 + 1;
  ++*(_DWORD *)(a1 + 248);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REStateMachineAssetCommandAddParameterBool(uint64_t a1, const char *a2, char a3)
{
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 264), &v7);
  unint64_t v6 = *(void *)(a1 + 320);
  if (v6 >= *(void *)(a1 + 312))
  {
    re::DynamicArray<BOOL>::growCapacity((void *)(a1 + 304), v6 + 1);
    unint64_t v6 = *(void *)(a1 + 320);
  }
  *(unsigned char *)(*(void *)(a1 + 336) + v6) = a3;
  *(void *)(a1 + 32ArcSharedObject::ArcSharedObject(this, 0) = v6 + 1;
  ++*(_DWORD *)(a1 + 328);
  re::StringID::destroyString((re::StringID *)&v7);
}

void REStateMachineAssetCommandAddParameterString(uint64_t a1, const char *a2, const char *a3)
{
  *(void *)&v8.var0 = 0;
  v8.var1 = "";
  *(void *)&v7.var0 = 0;
  v7.var1 = "";
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 344), &v8);
  re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(a1 + 384), &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REStateMachineAssetCommandGetParameterInt(_anonymous_namespace_ *a1, const char *a2, uint64_t *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = "";
  uint64_t IntParameter = re::SMAssetStateCommand::getIntParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return IntParameter;
}

uint64_t REStateMachineAssetCommandGetParameterFloat(_anonymous_namespace_ *a1, const char *a2, float *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = "";
  uint64_t FloatParameter = re::SMAssetStateCommand::getFloatParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return FloatParameter;
}

uint64_t REStateMachineAssetCommandGetParameterDouble(_anonymous_namespace_ *a1, const char *a2, double *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = "";
  uint64_t DoubleParameter = re::SMAssetStateCommand::getDoubleParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return DoubleParameter;
}

uint64_t REStateMachineAssetCommandGetParameterBool(_anonymous_namespace_ *a1, const char *a2, BOOL *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v8[0] = 0;
  v8[1] = "";
  uint64_t BoolParameter = re::SMAssetStateCommand::getBoolParameter(v5, (const re::StringID *)v8, a3);
  re::StringID::destroyString((re::StringID *)v8);
  return BoolParameter;
}

BOOL REStateMachineAssetCommandGetParameterString(_anonymous_namespace_ *a1, const char *a2, CFTypeRef *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v9[0] = 0;
  v9[1] = "";
  uint64_t StringParameter = re::SMAssetStateCommand::getStringParameter(v5, (const re::StringID *)v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (StringParameter)
  {
    CFStringRef v7 = CFStringCreateWithCString(0, *(const char **)(StringParameter + 8), 0x8000100u);
    *a3 = CFAutorelease(v7);
  }
  return StringParameter != 0;
}

uint64_t REStateMachineAssetCommandGetParameterStringAsChars(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (_anonymous_namespace_ *)((char *)a1 + 24);
  v6[0] = 0;
  v6[1] = "";
  uint64_t StringParameter = re::SMAssetStateCommand::getStringParameter(v3, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (StringParameter) {
    return *(void *)(StringParameter + 8);
  }
  else {
    return 0;
  }
}

uint64_t REStateMachineAssetStateSetExitTime(uint64_t result, float a2)
{
  *(float *)(result + 12ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

float REStateMachineAssetStateGraphAddState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= *(void *)(a1 + 32))
  {
    re::DynamicArray<re::SMAssetState>::growCapacity((void *)(a1 + 24), v4 + 1);
    unint64_t v4 = *(void *)(a1 + 40);
  }
  uint64_t v5 = *(void *)(a1 + 56) + 104 * v4;
  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v5, (uint64_t *)(a2 + 24));
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v5 + 40, (uint64_t *)(a2 + 64));
  re::StringID::StringID((re::StringID *)(v5 + 80), (const StringID *)(a2 + 104));
  float result = *(float *)(a2 + 120);
  *(float *)(v5 + 96) = result;
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

float REStateMachineAssetStateGraphAddAnyState(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::SMAssetStateTransition>::operator=(a1 + 88, (uint64_t *)(a2 + 24));
  re::DynamicArray<re::SMAssetStateCommand>::operator=(a1 + 128, (uint64_t *)(a2 + 64));
  re::StringID::operator=((unint64_t *)(a1 + 168), (uint64_t *)(a2 + 104));
  float result = *(float *)(a2 + 120);
  *(float *)(a1 + 184) = result;
  *(unsigned char *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
  return result;
}

float re::DynamicArray<re::SMAssetStateGraph>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraph>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 168 * v4;
  re::DynamicArray<re::SMAssetState>::DynamicArray(v5, (uint64_t *)a2);
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 40));
  *(unsigned char *)(v5 + + 56) = *(unsigned char *)(a2 + 56);
  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray(v5 + 64, (uint64_t *)(a2 + 64));
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray(v5 + 104, (uint64_t *)(a2 + 104));
  re::StringID::StringID((re::StringID *)(v5 + 144), (const StringID *)(a2 + 144));
  float result = *(float *)(a2 + 160);
  *(float *)(v5 + 16ArcSharedObject::ArcSharedObject(this, 0) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::SMAssetStateGraphGroup>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SMAssetStateGraphGroup>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::DynamicArray<re::SMAssetStateGraph>::DynamicArray(*((void *)this + 4) + 40 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t REStateMachineAssetGetStateCount(uint64_t a1)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t anonymous namespace'::firstGraphInAsset(uint64_t a1)
{
  if (result)
  {
    if (*(void *)(result + 56) && (uint64_t v2 = *(void *)(result + 72), *(void *)(v2 + 16))) {
      return *(void *)(v2 + 32);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t REStateMachineAssetGetStateAtIndex(uint64_t a1, unint64_t a2)
{
  if (!GraphInAsset || *(void *)(GraphInAsset + 16) <= a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(GraphInAsset + 32) + 104 * a2;
  uint64_t v5 = v7;
  re::DynamicArray<re::SMAssetStateTransition>::operator=(v7 + 24, (uint64_t *)v4);
  re::DynamicArray<re::SMAssetStateCommand>::operator=(v5 + 64, (uint64_t *)(v4 + 40));
  re::StringID::operator=((unint64_t *)(v5 + 104), (uint64_t *)(v4 + 80));
  *(_DWORD *)(v5 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v4 + 96);
  return v5;
}

uint64_t REStateMachineAssetGetAnyState(uint64_t a1)
{
  if (!GraphInAsset) {
    return 0;
  }
  uint64_t v2 = GraphInAsset;
  if (!*(unsigned char *)(GraphInAsset + 56)) {
    return 0;
  }
  uint64_t v3 = v5;
  re::DynamicArray<re::SMAssetStateTransition>::operator=(v5 + 24, (uint64_t *)(v2 + 64));
  re::DynamicArray<re::SMAssetStateCommand>::operator=(v3 + 64, (uint64_t *)(v2 + 104));
  re::StringID::operator=((unint64_t *)(v3 + 104), (uint64_t *)(v2 + 144));
  *(_DWORD *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v2 + 160);
  return v3;
}

const char *REStateMachineAssetGetInitialStateName(uint64_t a1)
{
  if (v1 && *(void *)(v1 + 16)) {
    return *(const char **)(*(void *)(v1 + 32) + 40);
  }
  else {
    return "";
  }
}

uint64_t anonymous namespace'::stateMachineAssetFromREAssetRef(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = re::AssetHandle::asset<re::StateMachineAsset>((re::StateMachineAsset *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REStateMachineAssetStateGetName(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

float REStateMachineAssetStateGetExitTime(uint64_t a1)
{
  return *(float *)(a1 + 120);
}

uint64_t REStateMachineAssetStateGetTransitionCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REStateMachineAssetStateGetTransitionAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 56) + 96 * a2;
  uint64_t v3 = v6;
  re::DynamicArray<re::SMAssetTransitionCondition>::operator=(v6 + 24, (uint64_t *)v2);
  re::StringID::operator=((unint64_t *)(v3 + 64), (uint64_t *)(v2 + 40));
  re::StringID::operator=((unint64_t *)(v3 + 80), (uint64_t *)(v2 + 56));
  re::StringID::operator=((unint64_t *)(v3 + 96), (uint64_t *)(v2 + 72));
  int v4 = *(_DWORD *)(v2 + 88);
  *(unsigned char *)(v3 + 116) = *(unsigned char *)(v2 + 92);
  *(_DWORD *)(v3 + 112) = v4;
  return v3;
}

uint64_t REStateMachineAssetStateGetCommandCount(uint64_t a1)
{
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v3, (uint64_t *)(a1 + 64));
  uint64_t v1 = v3[2];
  re::DynamicArray<re::SMAssetStateCommand>::deinit(v3);
  return v1;
}

uint64_t REStateMachineAssetStateGetCommandAtIndex(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v7, (uint64_t *)(a1 + 64));
  if (v7[2] <= a2)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = v7[4] + 424 * a2;
    uint64_t v4 = v6;
    re::DynamicArray<re::StringID>::operator=(v6 + 24, (uint64_t *)v3);
    re::DynamicArray<unsigned long long>::operator=(v4 + 64, (uint64_t *)(v3 + 40));
    re::DynamicArray<re::StringID>::operator=(v4 + 104, (uint64_t *)(v3 + 80));
    re::DynamicArray<float>::operator=(v4 + 144, (uint64_t *)(v3 + 120));
    re::DynamicArray<re::StringID>::operator=(v4 + 184, (uint64_t *)(v3 + 160));
    re::DynamicArray<unsigned long long>::operator=(v4 + 224, (uint64_t *)(v3 + 200));
    re::DynamicArray<re::StringID>::operator=(v4 + 264, (uint64_t *)(v3 + 240));
    re::DynamicArray<BOOL>::operator=(v4 + 304, (uint64_t *)(v3 + 280));
    re::DynamicArray<re::StringID>::operator=(v4 + 344, (uint64_t *)(v3 + 320));
    re::DynamicArray<re::StringID>::operator=(v4 + 384, (uint64_t *)(v3 + 360));
    *(unsigned char *)(v4 + 424) = *(unsigned char *)(v3 + 400);
    re::StringID::operator=((unint64_t *)(v4 + 432), (uint64_t *)(v3 + 408));
  }
  re::DynamicArray<re::SMAssetStateCommand>::deinit(v7);
  return v4;
}

uint64_t REStateMachineAssetTransitionGetName(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REStateMachineAssetTransitionGetToStateName(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

float REStateMachineAssetTransitionGetTransitionTime(uint64_t a1)
{
  return *(float *)(a1 + 112);
}

uint64_t REStateMachineAssetTransitionGetInterruptionType(uint64_t a1)
{
  return *(char *)(a1 + 116);
}

uint64_t REStateMachineAssetTransitionGetConditionCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t REStateMachineAssetTransitionGetConditionAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 56) + 40 * a2;
  uint64_t v3 = v6;
  re::StringID::operator=((unint64_t *)(v6 + 24), (uint64_t *)v2);
  long long v4 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 54) = *(void *)(v2 + 30);
  *(_OWORD *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = v4;
  return v3;
}

BOOL REStateMachineAssetTransitionConditionGetType(uint64_t a1)
{
  return *(unsigned char *)(a1 + 40) == 4;
}

uint64_t REStateMachineAssetTransitionConditionGetParameterName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REStateMachineAssetTransitionConditionGetConditionOperator(uint64_t a1)
{
  return *(char *)(a1 + 61);
}

uint64_t REStateMachineAssetTransitionConditionGetParameterType(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 5) {
    char v2 = 1;
  }
  else {
    char v2 = 0x303020101uLL >> (8 * v1);
  }
  return v2 & 3;
}

uint64_t REStateMachineAssetTransitionConditionGetConstantInt(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

float REStateMachineAssetTransitionConditionGetConstantFloat(uint64_t a1)
{
  return *(float *)(a1 + 56);
}

uint64_t REStateMachineAssetTransitionConditionGetConstantBool(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t REStateMachineAssetCommandGetType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 424);
}

uint64_t REStateMachineAssetCommandGetEntityBindTarget(uint64_t a1)
{
  return *(void *)(a1 + 440);
}

uint64_t REStateMachineAssetCommandGetParameterCount(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 0:
      char v2 = a1 + 45;
      goto LABEL_8;
    case 1:
      char v2 = a1 + 5;
      goto LABEL_8;
    case 2:
      char v2 = a1 + 15;
      goto LABEL_8;
    case 3:
      char v2 = a1 + 25;
      goto LABEL_8;
    case 4:
      char v2 = a1 + 35;
LABEL_8:
      uint64_t result = *v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t REStateMachineAssetCommandGetParameterNameAtIndex(void *a1, int a2, unint64_t a3)
{
  switch(a2)
  {
    case 0:
      if (a1[45] <= a3)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_19:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v3 = a1 + 47;
      break;
    case 1:
      if (a1[5] <= a3) {
        goto LABEL_16;
      }
      uint64_t v3 = a1 + 7;
      break;
    case 2:
      if (a1[15] <= a3) {
        goto LABEL_17;
      }
      uint64_t v3 = a1 + 17;
      break;
    case 3:
      if (a1[25] <= a3) {
        goto LABEL_18;
      }
      uint64_t v3 = a1 + 27;
      break;
    case 4:
      if (a1[35] <= a3) {
        goto LABEL_19;
      }
      uint64_t v3 = a1 + 37;
      break;
    default:
      return 0;
  }
  return *(void *)(*v3 + 16 * a3 + 8);
}

void anonymous namespace'::AssetStateGraph::~AssetStateGraph(_anonymous_namespace_::AssetStateGraph *this)
{
  *(void *)this = &unk_26E734080;
  char v2 = (char *)this + 88;
  uint64_t v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 168));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)this + 16);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 64));
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E734080;
  char v2 = (char *)this + 88;
  uint64_t v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 168));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)this + 16);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)v2);
  re::StringID::destroyString((_anonymous_namespace_::AssetStateGraph *)((char *)this + 64));
  re::DynamicArray<re::SMAssetState>::deinit((uint64_t)v3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::AssetStateGraphGroup::~AssetStateGraphGroup(_anonymous_namespace_::AssetStateGraphGroup *this)
{
  *(void *)this = &unk_26E7340C8;
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7340C8;
  re::DynamicArray<re::SMAssetStateGraph>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::AssetStateGraphGroupCollection::~AssetStateGraphGroupCollection(_anonymous_namespace_::AssetStateGraphGroupCollection *this)
{
  *(void *)this = &unk_26E734110;
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734110;
  re::DynamicArray<re::SMAssetStateGraphGroup>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::make::shared::object<anonymous namespace'::AssetState>(re *a1)
{
  char v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E734158;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = "";
  *(_DWORD *)(v3 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)a1 = v3;
  return result;
}

void anonymous namespace'::AssetState::~AssetState(_anonymous_namespace_::AssetState *this)
{
  *(void *)this = &unk_26E734158;
  re::StringID::destroyString((_anonymous_namespace_::AssetState *)((char *)this + 104));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)this + 8);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734158;
  re::StringID::destroyString((_anonymous_namespace_::AssetState *)((char *)this + 104));
  re::DynamicArray<re::SMAssetStateCommand>::deinit((void *)this + 8);
  re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::make::shared::object<anonymous namespace'::AssetTransition>(re *a1)
{
  char v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 120, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(void *)(v3 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7341A0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = "";
  *(void *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 88) = "";
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = "";
  *(_DWORD *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 116) = 0;
  *(void *)a1 = v3;
}

void anonymous namespace'::AssetTransition::~AssetTransition(_anonymous_namespace_::AssetTransition *this)
{
  *(void *)this = &unk_26E7341A0;
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 96));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 80));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 64));
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7341A0;
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 96));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 80));
  re::StringID::destroyString((_anonymous_namespace_::AssetTransition *)((char *)this + 64));
  re::DynamicArray<re::SMAssetTransitionCondition>::deinit((uint64_t)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::make::shared::object<anonymous namespace'::AssetCondition>(re *a1)
{
  char v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E7341E8;
  *(void *)(v3 + 32) = "";
  *(unsigned char *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 54) = 0;
  *(void *)a1 = v3;
}

void anonymous namespace'::AssetCondition::~AssetCondition(_anonymous_namespace_::AssetCondition *this)
{
  *(void *)this = &unk_26E7341E8;
  re::StringID::destroyString((_anonymous_namespace_::AssetCondition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7341E8;
  re::StringID::destroyString((_anonymous_namespace_::AssetCondition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::make::shared::object<anonymous namespace'::AssetCommand>(re *a1)
{
  char v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 448, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 2+ 56) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 40ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)uint64_t v3 = &unk_26E734230;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 416) = 0;
  *(unsigned char *)(v3 + 424) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_DWORD *)(v3 + 128) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_DWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_DWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_DWORD *)(v3 + 288) = 0;
  *(_OWORD *)(v3 + 2+ 56) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_DWORD *)(v3 + 328) = 0;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_DWORD *)(v3 + 408) = 0;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(void *)(v3 + 432) = 0;
  *(void *)(v3 + 44ArcSharedObject::ArcSharedObject(this, 0) = "";
  *(void *)a1 = v3;
  return result;
}

void anonymous namespace'::AssetCommand::~AssetCommand(_anonymous_namespace_::AssetCommand *this)
{
  *(void *)this = &unk_26E734230;
  char v2 = (char *)this + 224;
  uint64_t v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetCommand *)((char *)this + 432));
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 384);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 344);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 304);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 264);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 104);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::StringID>::deinit((uint64_t)v3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E734230;
  char v2 = (char *)this + 224;
  uint64_t v3 = (char *)this + 24;
  re::StringID::destroyString((_anonymous_namespace_::AssetCommand *)((char *)this + 432));
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 384);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 344);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 304);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 264);
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 104);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::StringID>::deinit((uint64_t)v3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t REGeomMeshGetName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t REGeomMeshGetVertexCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t REGeomMeshGetFaceCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t REGeomMeshGetFaceVertexCount(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 <= a2)
  {
    return 0;
  }
  else
  {
    if (v2 <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(_DWORD *)(*(void *)(a1 + 80) + 16 * a2 + 12) == -1) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t REGeomMeshGetFaceVertexIndices(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 <= a2)
  {
    return 0;
  }
  else
  {
    if (v3 <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80) + 16 * a2;
    do
    {
      *(_DWORD *)(a3 + v4) = *(_DWORD *)(v5 + v4);
      v4 += 4;
    }
    while (v4 != 16);
    if (*(_DWORD *)(a3 + 12) == -1) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t REGeomMeshGetAttributeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 664);
}

uint64_t REGeomMeshGetVertexAttributeCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t REGeomMeshGetAttributeIndex(uint64_t a1, char *a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)(a1 + 688), &v5);
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 696) + 16 * v3 + 8);
  }
}

uint64_t REGeomMeshGetAttributeValueCount(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 16);
  return v2();
}

uint64_t REGeomMeshGetAttributeName(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  else {
    return *(void *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 8);
  }
}

uint64_t REGeomMeshGetAttributeRate(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 255;
  }
  else {
    return *(unsigned __int8 *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 16);
  }
}

uint64_t REGeomMeshGetAttributeType(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 255;
  }
  else {
    return *(unsigned __int8 *)(re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2)+ 17);
  }
}

uint64_t REGeomMeshCreateFromPolygon(unsigned int a1, long long *a2)
{
  unsigned int v2 = a1;
  uint64_t v65 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1 - 2;
  if (a1 > 2)
  {
    bzero(buf, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v39);
    uint64_t v7 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v43, "vertexPosition", 1, 7);
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v33 = 0;
    int v32 = 0;
    v30[0] = a2;
    v30[1] = v2;
    memset(v31, 0, sizeof(v31));
    if (v39 > v2 && v41 && (v41 - 1) > v41)
    {
      while (1)
        ;
    }
    unsigned int v39 = v2;
    unsigned int v44 = v2;
    if (v45)
    {
      StringID v8 = v46;
      uint64_t v9 = 8 * v45;
      do
      {
        uint64_t v10 = *v8++;
        (*(void (**)(uint64_t, void))(*(void *)v10 + 72))(v10, v44);
        v9 -= 8;
      }
      while (v9);
    }
    if (v3 < v41)
    {
      int v11 = v51;
      if (v51)
      {
        unsigned int v12 = 0;
        do
        {
          uint64_t v13 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v50, v12);
          re::internal::accessFaceVaryingAttributeSubmesh(v13, v14);
          ++v12;
        }
        while (v11 != v12);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v40, v3);
    unsigned int v47 = v3;
    if (v48)
    {
      int32x4_t v15 = v49;
      uint64_t v16 = 8 * v48;
      do
      {
        uint64_t v17 = *v15++;
        (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v47);
        v16 -= 8;
      }
      while (v16);
    }
    uint64_t v18 = 0;
    unint64_t v20 = v35;
    uint64_t v19 = v36;
    if (v2 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v2;
    }
    do
    {
      if (v20 == v18)
      {
        uint64_t v37 = 0;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v60 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v52 = 136315906;
        __int16 v53 = "operator[]";
        __int16 v54 = 1024;
        int v55 = 468;
        __int16 v56 = 2048;
        unint64_t v57 = v20;
        __int16 v58 = 2048;
        unint64_t v59 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        uint64_t v37 = 0;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v60 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v52 = 136315906;
        __int16 v53 = "operator[]";
        __int16 v54 = 1024;
        int v55 = 609;
        __int16 v56 = 2048;
        unint64_t v57 = v3;
        __int16 v58 = 2048;
        unint64_t v59 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_44;
      }
      *(_DWORD *)(v19 + 4 * v18) = v18;
      ++v18;
    }
    while (v21 != v18);
    *(void *)&long long v60 = v19;
    *((void *)&v60 + 1) = v20;
    uint64_t v22 = (re *)re::triangulatePolygon((uint64_t)v30, (uint64_t)&v60, (uint64_t)v31);
    if (v3)
    {
      unsigned int v23 = 0;
      unsigned int v2 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)buf, v2++, 3, (double *)(v33 + 4 * v23));
        v23 += 3;
      }
      while (v3 != v2);
    }
    re::make::shared::object<re::Shareable<re::GeomMesh>>(v22, &v60);
    uint64_t v24 = (re *)re::GeomMesh::operator=(v60 + 24, &v39);
    re::GeomMesh::setName(v24, *(const char **)buf);
    re::GeomMesh::freeName((re *)buf);
    uint64_t v5 = v60;
    if ((void)v60)
    {
      long long v25 = (_OWORD *)re::GeomMesh::modifyVertexPositions((re::GeomMesh *)(v60 + 24));
      unint64_t v3 = v26;
      uint64_t v27 = v26;
      while (v27)
      {
        long long v28 = *a2++;
        *v25++ = v28;
        --v27;
        if (!--v21) {
          goto LABEL_32;
        }
      }
      goto LABEL_43;
    }
LABEL_32:
    if (v31[0] && v33) {
      (*(void (**)(void))(*(void *)v31[0] + 40))();
    }
    if (v34 && v35) {
      (*(void (**)(void))(*(void *)v34 + 40))();
    }
    re::GeomMesh::freeName((re *)buf);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v43);
    if (v40 && v42) {
      (*(void (**)(void))(*(void *)v40 + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
LABEL_44:
    }
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v2;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REGeomMeshCreateFromPolygon - called with a degenerate polygon vertex count of %d.  This value must be greater than 2.", buf, 8u);
    }

    return 0;
  }
  return v5;
}

uint64_t REGeomMeshCreateFromCoreAttributes(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, long long *a7, long long *a8, long long *a9, char *a10)
{
  uint64_t v11 = a3;
  unsigned int v12 = a2;
  v80[11] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    unsigned int v16 = 0;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)(a3 + v14);
      int v18 = v17 - 2;
      if (v17 <= 2)
      {
        if (CoreRELog::onceToken != -1) {
          goto LABEL_66;
        }
        goto LABEL_44;
      }
      if (v17 < 5) {
        int v18 = 1;
      }
      v16 += v18;
      uint64_t v15 = v15 + v17;
      ++v14;
    }
    while (a2 != v14);
    if (!v15)
    {
LABEL_11:
      uint64_t v55 = a6;
      __int16 v56 = a5;
      __int16 v53 = a8;
      __int16 v54 = a7;
      goto LABEL_13;
    }
    uint64_t v19 = 0;
    while (*(_DWORD *)(a4 + 4 * v19) < a1)
    {
      if (v15 == ++v19) {
        goto LABEL_11;
      }
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v45 = (id)CoreRELog::log;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      int v50 = *(_DWORD *)(a4 + 4 * v19);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)__int16 v58 = 1024;
      *(_DWORD *)&v58[2] = v50;
      __int16 v59 = 1024;
      LODWORD(v6ArcSharedObject::ArcSharedObject(this, 0) = a1;
      unsigned int v47 = "REGeomMeshCreateFromCoreAttributes - vertexIndicesPerPolygon[%d] specifies an invalid vertex index (%d) whic"
            "h is larger than the specified vertex count of %d.";
      uint64_t v48 = v45;
      uint32_t v49 = 20;
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  uint64_t v55 = a6;
  __int16 v56 = a5;
  __int16 v53 = a8;
  __int16 v54 = a7;
  unsigned int v16 = 0;
LABEL_13:
  bzero(buf, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v58);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v63, "vertexPosition", 1, 7);
  if (v16 < v61)
  {
    int v20 = v71;
    if (v71)
    {
      unsigned int v21 = 0;
      do
      {
        uint64_t v22 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v70, v21);
        re::internal::accessFaceVaryingAttributeSubmesh(v22, v23);
        ++v21;
      }
      while (v20 != v21);
    }
  }
  uint64_t v24 = (re *)re::DynamicArray<re::GeomCell4>::resize(&v60, v16);
  unsigned int v67 = v16;
  if (v68)
  {
    long long v25 = v69;
    uint64_t v26 = 8 * v68;
    do
    {
      uint64_t v27 = *v25++;
      uint64_t v24 = (re *)(*(uint64_t (**)(uint64_t, void))(*(void *)v27 + 72))(v27, v67);
      v26 -= 8;
    }
    while (v26);
  }
  if (*(_DWORD *)v58 > a1 && v61 && (v61 - 1) > v61)
  {
    while (1)
      ;
  }
  *(_DWORD *)__int16 v58 = a1;
  unsigned int v64 = a1;
  if (v65)
  {
    long long v28 = v66;
    uint64_t v29 = 8 * v65;
    do
    {
      uint64_t v30 = *v28++;
      uint64_t v24 = (re *)(*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 72))(v30, v64);
      v29 -= 8;
    }
    while (v29);
  }
  if (a10) {
    uint64_t v24 = re::GeomMesh::setName((re *)buf, a10);
  }
  if (v12)
  {
    uint64_t v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = v12;
    do
    {
      unsigned int v34 = *(unsigned __int8 *)(v11 + v31);
      uint64_t v35 = v32;
      uint64_t v36 = (int *)(a4 + 4 * v32);
      if (v34 > 4)
      {
        uint64_t v24 = (re *)re::GeomMeshBuilder::setFaceVertices((uint64_t)buf, v31, *v36, v36[1], v36[2]);
        if (v12 < v12 + v34 - 3)
        {
          uint64_t v37 = v34 - 2 - 1;
          long long v38 = (int *)(a4 + 12 + 4 * v35);
          do
          {
            uint64_t v24 = (re *)re::GeomMeshBuilder::setFaceVertices((uint64_t)buf, v12++, *v36, *(v38 - 1), *v38);
            ++v38;
            --v37;
          }
          while (v37);
        }
      }
      else
      {
        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)buf, v31, *(unsigned __int8 *)(v11 + v31), (double *)(a4 + 4 * v32));
      }
      ++v31;
      unsigned int v32 = v35 + v34;
    }
    while (v31 != v33);
  }
  re::make::shared::object<re::Shareable<re::GeomMesh>>(v24, v80);
  unsigned int v39 = (re *)re::GeomMesh::operator=(v80[0] + 24, v58);
  re::GeomMesh::setName(v39, *(const char **)buf);
  re::GeomMesh::freeName((re *)buf);
  uint64_t v40 = v80[0];
  if (!v80[0]) {
    goto LABEL_61;
  }
  uint64_t v11 = v80[0] + 24;
  if (!_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(v80[0] + 24, "vertexPosition", v56))goto LABEL_60; {
  if (!v55)
  }
    goto LABEL_57;
  unint64_t v41 = re::GeomMesh::addAttribute(v40 + 24, "vertexUV", 1, 6);
  if (!v41)
  {
LABEL_60:
    uint64_t v40 = 0;
    goto LABEL_61;
  }
  uint64_t v42 = (uint64_t)v41;
  uint64_t v43 = *(unsigned int *)(v40 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v41 + 16))(v41))
  {
    uint64_t v44 = re::internal::GeomTypedAttribute<double>::operator[](v42, 0);
    uint64_t v14 = (*(unsigned int (**)(uint64_t))(*(void *)v42 + 16))(v42);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v44 = 0;
  }
  if (v43)
  {
    uint64_t v51 = 0;
    while (v14 != v51)
    {
      *(void *)(v44 + 8 * v51) = *(void *)(v55 + 8 * v51);
      if (v43 == ++v51) {
        goto LABEL_57;
      }
    }
    memset(v80, 0, 80);
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v72 = 136315906;
    v73 = "operator[]";
    __int16 v74 = 1024;
    int v75 = 609;
    __int16 v76 = 2048;
    uint64_t v77 = v14;
    __int16 v78 = 2048;
    uint64_t v79 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_44:
    uint64_t v45 = (id)CoreRELog::log;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      int v46 = *(unsigned __int8 *)(v11 + v14);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)__int16 v58 = 1024;
      *(_DWORD *)&v58[2] = v46;
      unsigned int v47 = "REGeomMeshCreateFromCoreAttributes - vertexCountPerPolygon[%d] contains a degenerate polygon that is only %d-sided.";
      uint64_t v48 = v45;
      uint32_t v49 = 14;
LABEL_50:
      _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
    }
LABEL_51:

    return 0;
  }
LABEL_57:
  if (!_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(v40 + 24, "vertexNormal", v54)|| !_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(v40 + 24, "vertexTangent", v53)|| !_ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(v40 + 24, "vertexBitangent", a9))
  {
    goto LABEL_60;
  }
LABEL_61:
  re::GeomMesh::freeName((re *)buf);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v63);
  if (v60 && v62) {
    (*(void (**)(void))(*(void *)v60 + 40))();
  }
  return v40;
}

uint64_t _ZN12_GLOBAL__N_131addAndCopyVertexAttributeHelperIN2re7Vector3IfEEDv3_fEEbRNS1_8GeomMeshEPKcNS1_17GeomAttributeTypeEPKT0_(uint64_t a1, char *a2, long long *a3)
{
  if (!a3) {
    return 1;
  }
  unint64_t v3 = a3;
  uint64_t result = (uint64_t)re::GeomMesh::addAttribute(a1, a2, 1, 7);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result))
  {
    StringID v8 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v6, 0);
    uint64_t v9 = (*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
LABEL_7:
    for (uint64_t i = 0; i != v7; ++i)
    {
      if (v9 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v11 = *v3++;
      *v8++ = v11;
    }
    return 1;
  }
  uint64_t v9 = 0;
  StringID v8 = 0;
  if (v7) {
    goto LABEL_7;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeInt16(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt16";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 0)) == 0
    || *((unsigned char *)v6 + 17)
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt16";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(_WORD *)&v4[2 * v14] = *(_WORD *)(a3 + 2 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeUInt16(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt16";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 1)) == 0
    || *((unsigned char *)v6 + 17) != 1
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt16";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(_WORD *)&v4[2 * v14] = *(_WORD *)(a3 + 2 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeInt32(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt32";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 2)) == 0
    || *((unsigned char *)v6 + 17) != 2
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeInt32";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeUInt32(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt32";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 3)) == 0
    || *((unsigned char *)v6 + 17) != 3
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeUInt32";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeFloat(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeFloat";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 4)) == 0
    || *((unsigned char *)v6 + 17) != 4
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeFloat";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(_DWORD *)&v4[4 * v14] = *(_DWORD *)(a3 + 4 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeDouble(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeDouble";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 5)) == 0
    || *((unsigned char *)v6 + 17) != 5
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeDouble";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(void *)&v4[8 * v14] = *(void *)(a3 + 8 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector2F(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector2F";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 6)) == 0
    || *((unsigned char *)v6 + 17) != 6
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector2F";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      *(void *)&v4[8 * v14] = *(void *)(a3 + 8 * v14);
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector3F(uint64_t a1, const char *a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector3F";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 7)) == 0
    || *((unsigned char *)v6 + 17) != 7
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector3F";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      long long v15 = *a3++;
      *(_OWORD *)uint64_t v4 = v15;
      v4 += 16;
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshAddVertexAttributeVector4F(uint64_t a1, const char *a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector4F";
    uint64_t v10 = "%s - attempt to add an attribute with no name.";
    long long v11 = v9;
    uint32_t v12 = 12;
    goto LABEL_22;
  }
  uint64_t v4 = (char *)a2;
  uint64_t v6 = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (!v6 && (uint64_t v6 = re::GeomMesh::addAttribute(a1 + 24, v4, 1, 8)) == 0
    || *((unsigned char *)v6 + 17) != 8
    || *((unsigned char *)v6 + 16) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_10:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_15:

        return 0;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "REGeomMeshAddVertexAttributeVector4F";
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v4;
      uint64_t v10 = "%s - attempt to add a attribute named \"%s\" which conflicts in type/name of an existing attribute of the same name.";
      long long v11 = v9;
      uint32_t v12 = 22;
LABEL_22:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)buf, v12);
      goto LABEL_15;
    }
LABEL_24:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_10;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6))
  {
    uint64_t v4 = (char *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v6, 0);
    uint64_t v8 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v6 + 16))(v6);
    if (!v7) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_17:
    uint64_t v14 = 0;
    while (v8 != v14)
    {
      long long v15 = *a3++;
      *(_OWORD *)uint64_t v4 = v15;
      v4 += 16;
      if (v7 == ++v14) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesInt16(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17]) {
    return 0;
  }
  uint64_t v6 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v7 = re::internal::GeomTypedAttribute<short>::operator[](v6, 0);
    uint64_t v8 = (*(unsigned int (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_WORD *)(a3 + 2 * i) = *(_WORD *)(v7 + 2 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesUInt16(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 1) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<short>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_WORD *)(a3 + 2 * i) = *(_WORD *)(v6 + 2 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesInt32(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 2) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesUInt32(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 3) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesFloat(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 4) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<int>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a3 + 4 * i) = *(_DWORD *)(v6 + 4 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesDouble(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 5) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<double>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a3 + 8 * i) = *(void *)(v6 + 8 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector2F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 6) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<double>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(a3 + 8 * i) = *(void *)(v6 + 8 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector3F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 7) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_OWORD *)(a3 + 16 * i) = *(_OWORD *)(v6 + 16 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValuesVector4F(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v4[17] != 8) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 16))(v4))
  {
    uint64_t v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
    uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v7 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_OWORD *)(a3 + 16 * i) = *(_OWORD *)(v6 + 16 * i);
    }
  }
  return 1;
}

uint64_t REGeomMeshGetAttributeValueInt16(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17]) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<short>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_WORD *)(v8 + 2 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueUInt16(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 1) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<short>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_WORD *)(v8 + 2 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueInt32(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 2) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueUInt32(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 3) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueFloat(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 4) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<int>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_DWORD *)(v8 + 4 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueDouble(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 5) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<double>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(void *)(v8 + 8 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector2F(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 6) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<double>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(void *)(v8 + 8 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector3F(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 7) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_OWORD *)(v8 + 16 * a3);
  return 1;
}

uint64_t REGeomMeshGetAttributeValueVector4F(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v6 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v6[17] != 8) {
    return 0;
  }
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v6 + 16))(v6) <= a3) {
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7)
    || (uint64_t v8 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0),
        (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) <= a3))
  {
    while (1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  *a4 = *(_OWORD *)(v8 + 16 * a3);
  return 1;
}

BOOL REGeomMeshGetAttributeValuesByIndicesInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _WORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17]) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v8;
  unsigned int v11 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10))
  {
    uint64_t v12 = re::internal::GeomTypedAttribute<short>::operator[](v10, 0);
    unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    if (a3) {
      goto LABEL_7;
    }
    return 1;
  }
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  if (!a3) {
    return 1;
  }
LABEL_7:
  uint64_t v14 = a3;
  do
  {
    unsigned int v16 = *a4++;
    uint64_t v15 = v16;
    BOOL result = v16 < v11;
    if (v16 >= v11) {
      break;
    }
    if (v13 <= v15)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_WORD *)(v12 + 2 * v15);
    --v14;
  }
  while (v14);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesUInt16(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _WORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 1) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<short>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_WORD *)(v11 + 2 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 2) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesUInt32(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 3) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesFloat(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _DWORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 4) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_DWORD *)(v11 + 4 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesDouble(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, void *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 5) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<double>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(void *)(v11 + 8 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector2F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, void *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 6) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<double>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(void *)(v11 + 8 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector3F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _OWORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 7) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_OWORD *)(v11 + 16 * v14);
    --v13;
  }
  while (v13);
  return result;
}

BOOL REGeomMeshGetAttributeValuesByIndicesVector4F(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, _OWORD *a5)
{
  if (*(_DWORD *)(a1 + 664) <= a2) {
    return 0;
  }
  uint64_t v8 = (unsigned char *)re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 88), a2);
  if (v8[17] != 8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 16))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9))
  {
    uint64_t v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v9, 0);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (a3) {
      goto LABEL_5;
    }
    return 1;
  }
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  if (!a3) {
    return 1;
  }
LABEL_5:
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *a4++;
    uint64_t v14 = v15;
    BOOL result = v15 < v10;
    if (v15 >= v10) {
      break;
    }
    if (v12 <= v14)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a5++ = *(_OWORD *)(v11 + 16 * v14);
    --v13;
  }
  while (v13);
  return result;
}

uint64_t REGeomCompareMeshes(uint64_t a1, uint64_t a2, const re::GeomMesh *a3, float a4)
{
  re::internal::compareMeshes((re::internal *)(a1 + 24), (const re::GeomMesh *)(a2 + 24), a3, a4, (uint64_t)v13);
  uint64_t v4 = re::GeomMeshBuilder::GeomMeshBuilder((re *)&v8, (uint64_t)v13);
  re::make::shared::object<re::Shareable<re::GeomMesh>>(v4, &v14);
  uint64_t v5 = (re *)re::GeomMesh::operator=(v14 + 24, &v9);
  re::GeomMesh::setName(v5, v8);
  re::GeomMesh::freeName((re *)&v8);
  uint64_t v6 = v14;
  re::GeomMesh::freeName((re *)&v8);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v12);
  if (v10 && v11) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v13);
  return v6;
}

void *re::make::shared::object<re::Shareable<re::GeomMesh>>@<X0>(re *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 760, 8);
  BOOL result = re::Shareable<re::GeomMesh>::Shareable<>(v4);
  *a2 = result;
  return result;
}

void *re::Shareable<re::GeomMesh>::Shareable<>(void *a1)
{
  *a1 = &unk_26E734278;
  re::GeomMesh::GeomMesh((re::GeomMesh *)(a1 + 3), 0);
  return a1;
}

void *re::Shareable<re::GeomMesh>::~Shareable(void *a1)
{
  *a1 = &unk_26E734278;
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::GeomMesh>::~Shareable(void *a1)
{
  *a1 = &unk_26E734278;
  re::GeomMesh::~GeomMesh((re::GeomMesh *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *RESubsceneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void RESubsceneComponentSetSubscene(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v3);
  re::ecs2::SubsceneComponent::setSubscene(a1, v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
}

uint64_t RESubsceneComponentIsLoaded(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

void RESubsceneComponentLoad(uint64_t a1)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v2, (const re::AssetHandle *)(a1 + 32));
  re::ecs2::SubsceneComponent::setSubscene(a1, v2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v2);
}

void *RESkyboxComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void RESkyboxComponentSetTexture()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "Please use RESkyboxComponentSetMaterial(). Will be deleted in M9.", v1, 2u);
  }
}

uint64_t RESkyboxComponentGetTexture()
{
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  v0 = (id)CoreRELog::log;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v2 = 0;
    _os_log_impl(&dword_233120000, v0, OS_LOG_TYPE_DEFAULT, "Please use RESkyboxComponentGetMaterial(). Will be deleted in M9.", v2, 2u);
  }

  return 0;
}

void RESkyboxComponentSetMaterial(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t RESkyboxComponentGetMaterial(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RESkyboxComponentSetIntensity(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float RESkyboxComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

void RESkyboxComponentSetMaterialBlockParameter(uint64_t a1, uint64_t a2)
{
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + + 56) = a2;
  if (v5)
  {
  }
}

uint64_t RESkyboxComponentGetMaterialBlockParameter(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void *REConstraintListComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *REDeferredActivationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *RECameraMovementComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECameraMovementComponentSetEnabled(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t RECameraMovementComponentIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t RECameraMovementComponentSetMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t RECameraMovementComponentGetMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t RECameraMovementComponentSetMoveSpeedMultiplier(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

float RECameraMovementComponentGetMoveSpeedMultiplier(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float32x4_t *RECameraMovementComponentLookAt(float32x4_t *a1, __n128 a2, __n128 a3)
{
  return re::ecs2::CameraMovementComponent::lookAt(a1, a2.n128_i64[0], a2.n128_i64[1], a3.n128_i64[0], a3.n128_i64[1]);
}

__CFArray *REAssetManagerGetRegisteredAssetTypeNames(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1040);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(unsigned int *)(v1 + 32);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(v1 + 16) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 16;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(v1 + 16);
    do
    {
      CFStringRef v9 = CFStringCreateWithCString(0, **(const char ***)(v8 + (v7 << 6) + 16), 0x8000100u);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      uint64_t v8 = *(void *)(v1 + 16);
      if (*(_DWORD *)(v1 + 32) <= (v4 + 1)) {
        int v10 = v4 + 1;
      }
      else {
        int v10 = *(_DWORD *)(v1 + 32);
      }
      int v11 = v4;
      while (1)
      {
        uint64_t v7 = (v11 + 1);
        if (v10 - 1 == v11) {
          break;
        }
        ++v11;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(v8 + (v7 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v4) = v10;
LABEL_17:
      ;
    }
    while (v3 != v4);
  }
  return Mutable;
}

uint64_t REAssetManagerCreateSampleAsset(void *a1, char *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v6 = (re::internal::AssetTypeRegistry *)a1[130];
  unint64_t v7 = re::internal::AssetTypeRegistry::assetTypeWithName(v6, a2);
  if (!v7)
  {
    if (a3) {
      *a3 = 0;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)unsigned int v16 = 136315138;
    *(void *)&_OWORD v16[4] = a2;
    uint64_t v14 = "%s is not the name of a registered asset type.";
    goto LABEL_18;
  }
  unint64_t v8 = v7;
  uint64_t v9 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)v6, v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 152))(v9);
  if (!v10)
  {
    if (a3) {
      *a3 = 0;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)unsigned int v16 = 136315138;
    *(void *)&_OWORD v16[4] = a2;
    uint64_t v14 = "Failed to create a default AssetPointer for asset type %s.";
LABEL_18:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, v16, 0xCu);
LABEL_15:

    return 0;
  }
  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t, unint64_t, void, void, void))(*a1 + 416))(v16, a1, v10, v8, 0, 0, 0);
  uint64_t v11 = *(void *)v16;
  id v12 = (id)(*(void *)v16 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v11;
}

uint64_t REAssetManagerGetAssetTypeInitialRelease(uint64_t a1, char *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(re::internal::AssetTypeRegistry **)(a1 + 1040);
  unint64_t v6 = re::internal::AssetTypeRegistry::assetTypeWithName(v5, a2);
  if (v6)
  {
    uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType((uint64_t)v5, v6);
    long long v13 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 112))(v7) + 32);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
    if (buf[0]) {
      int v8 = *(_DWORD *)(v16 + 64);
    }
    else {
      int v8 = -1;
    }
    uint64_t v10 = re::TypeAvailabilityUtilities::convertToMajorVersion(v8);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v12);
  }
  else
  {
    if (a3) {
      *a3 = 0;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      unsigned int v15 = a2;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "%s is not the name of a registered asset type.", buf, 0xCu);
    }

    return 0;
  }
  return v10;
}

void *REProjectiveShadowReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REProjectiveShadowReceiverComponentGetPlaneNormal()
{
  return 0.0078125;
}

uint64_t REProjectiveShadowReceiverComponentSetShadowIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetShadowIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REProjectiveShadowReceiverComponentSetShadowIntensityDecayRate(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetShadowIntensityDecayRate(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REProjectiveShadowReceiverComponentSetObjectSpaceDecayRate(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REProjectiveShadowReceiverComponentGetObjectSpaceDecayRate(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float REProjectiveShadowReceiverComponentGetPercentageBelowPlaneShadowCutoff()
{
  return 1.0;
}

void *REProjectiveShadowReceiverComponentAddReceiverToEntitySubtree(void *a1)
{
  return addShadowReceiverToEntitySubtree(a1, 1);
}

void *addShadowReceiverToEntitySubtree(void *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (re::ecs2::EntityComponentCollection *)(result + 4);
  if (result[22]) {
    BOOL result = (void *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  if (v3[28])
  {
    if (!a2) {
      return result;
    }
  }
  else
  {
    BOOL result = (void *)re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!a2) {
      return result;
    }
  }
  uint64_t v5 = v3[41];
  if (v5)
  {
    unint64_t v6 = (re::ecs2::Entity **)v3[43];
    uint64_t v7 = 8 * v5;
    do
    {
      int v8 = *v6++;
      BOOL result = (void *)addShadowReceiverToEntitySubtree(v8, 1);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void removeShadowReceiverFromEntitySubtree(re::ecs2::Entity *a1, int a2)
{
  uint64_t v4 = (re::ecs2::Entity *)((char *)a1 + 32);
  re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v5 = *((unsigned __int16 *)a1 + 41);
  if (!*((_WORD *)a1 + 41)) {
    goto LABEL_7;
  }
  unint64_t v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                       + 16);
  uint64_t v7 = (int16x8_t *)*((void *)a1 + 11);
  int16x8_t v8 = vld1q_dup_s16(v6);
  int v9 = 1;
  while (1)
  {
    uint16x8_t v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_23436BBD0);
    v10.i16[0] = vmaxvq_u16(v10);
    if (v10.i32[0]) {
      break;
    }
    v9 -= 8;
    ++v7;
    if (!--v5) {
      goto LABEL_7;
    }
  }
  if (v10.u16[0] - v9 >= *((unsigned __int16 *)a1 + 40)) {
LABEL_7:
  }
    re::ecs2::EntityComponentCollection::remove(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a2)
  {
    uint64_t v11 = *((void *)a1 + 41);
    if (v11)
    {
      char v12 = (re::ecs2::Entity **)*((void *)a1 + 43);
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *v12++;
        removeShadowReceiverFromEntitySubtree(v14, 1);
        v13 -= 8;
      }
      while (v13);
    }
  }
}

uint64_t REProjectiveShadowReceiverSetVisibleForScene(uint64_t a1, char a2)
{
  uint64_t result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)(result + 40);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5++;
        *(unsigned char *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
        uint64_t result = re::ecs2::Component::enqueueMarkDirty(v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetGapSize(uint64_t a1, int a2)
{
  if (!byte_26879F7B8) {
    byte_26879F7B8 = 1;
  }
  dword_26879F7BC = a2;
}

uint64_t REProjectiveShadowReceiverSystemGetGapSize()
{
  if (byte_26879F7B8) {
    return dword_26879F7BC;
  }
  else {
    return 16;
  }
}

uint64_t REProjectiveShadowReceiverSystemGetReferenceShadowRegionDimension()
{
  return 0;
}

void REProjectiveShadowReceiverSystemSetMaxTextureAtlasDimension(uint64_t a1, int a2)
{
  if (!byte_26879F790) {
    byte_26879F790 = 1;
  }
  dword_26879F794 = a2;
  if (!byte_26879F798) {
    byte_26879F798 = 1;
  }
  dword_26879F79C = a2;
}

uint64_t REProjectiveShadowReceiverSystemGetMaxTextureAtlasDimension()
{
  if (byte_26879F790) {
    return dword_26879F794;
  }
  else {
    return 256;
  }
}

uint64_t REProjectiveShadowReceiverSystemGetSupportedMax2DTextureDimension()
{
  return 0;
}

uint64_t REProjectiveShadowReceiverSystemGetInitialContainerRegionDimension()
{
  return 0;
}

void REProjectiveShadowReceiverSystemSetAnchorPlaneOffset(float a1)
{
  if (!byte_26879F788) {
    byte_26879F788 = 1;
  }
  dword_26879F78C = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetAnchorPlaneOffset()
{
  float result = *(float *)&dword_26879F78C;
  if (!byte_26879F788) {
    return 0.000001;
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetTextureAtlasDimensions(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 >= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (!byte_26879F790) {
    byte_26879F790 = 1;
  }
  dword_26879F794 = v3;
  if (!byte_26879F798) {
    byte_26879F798 = 1;
  }
  if (a2 <= a3) {
    int v4 = a3;
  }
  else {
    int v4 = a2;
  }
  dword_26879F79C = v4;
}

uint64_t REProjectiveShadowReceiverSystemGetTextureAtlasWidth()
{
  if (byte_26879F790) {
    return dword_26879F794;
  }
  else {
    return 256;
  }
}

uint64_t REProjectiveShadowReceiverSystemGetTextureAtlasHeight()
{
  if (byte_26879F798) {
    return dword_26879F79C;
  }
  else {
    return 256;
  }
}

void REProjectiveShadowReceiverSystemSetShadowClusterExtentDiscrepancy(float a1)
{
  if (!byte_26879F7A0) {
    byte_26879F7A0 = 1;
  }
  dword_26879F7A4 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowClusterExtentDiscrepancy()
{
  float result = *(float *)&dword_26879F7A4;
  if (!byte_26879F7A0) {
    return 0.0;
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetMinimumLargeShadowRadius(float a1)
{
  if (!byte_26879F7A8) {
    byte_26879F7A8 = 1;
  }
  dword_26879F7AC = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetMinimumLargeShadowRadius()
{
  float result = *(float *)&dword_26879F7AC;
  if (!byte_26879F7A8) {
    return 0.25;
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetShadowTransitionRange(float a1)
{
  if (!byte_26879F7B0) {
    byte_26879F7B0 = 1;
  }
  dword_26879F7B4 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowTransitionRange()
{
  float result = *(float *)&dword_26879F7B4;
  if (!byte_26879F7B0) {
    return 0.1;
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetShadowClusteringFudgeFactor(float a1)
{
  if (!byte_26879F7C0) {
    byte_26879F7C0 = 1;
  }
  dword_26879F7C4 = LODWORD(a1);
}

float REProjectiveShadowReceiverSystemGetShadowClusteringFudgeFactor()
{
  float result = *(float *)&dword_26879F7C4;
  if (!byte_26879F7C0) {
    return 1.0;
  }
  return result;
}

void REProjectiveShadowReceiverSystemSetEnabled(uint64_t a1, char a2)
{
  if (!re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams) {
    re::ShadowManager::getMutableDeprecatedShadowParams(void)::deprecatedShadowParams = 1;
  }
  byte_26879F781 = a2;
}

void REProjectiveShadowReceiverSystemSetPrioritizeShadowMarkers(uint64_t a1, char a2)
{
  if (!byte_26879F782) {
    byte_26879F782 = 1;
  }
  byte_26879F783 = a2;
}

void REProjectiveShadowReceiverSystemUseOnlyShadowMarkers(uint64_t a1, char a2)
{
  if (!byte_26879F784) {
    byte_26879F784 = 1;
  }
  byte_26879F785 = a2;
}

void *REProjectiveShadowMarkEntityAsClusterRoot(void *a1)
{
  return addShadowReceiverToEntitySubtree(a1, 1);
}

BOOL REEntityGetProjectiveShadowClusterID(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {
    uint64_t v2 = *(void *)(v2 + 64);
    BOOL result = v2 != 0;
  }
  else
  {
    BOOL result = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t re::convert(int a1)
{
  if (a1 > 47)
  {
    if (a1 <= 49)
    {
      if (a1 == 48) {
        return 6;
      }
      else {
        return 7;
      }
    }
    else
    {
      switch(a1)
      {
        case 50:
          return 8;
        case 64:
          return 1;
        case 128:
          return 10;
        default:
          return 0;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        uint64_t result = 2;
        break;
      case 2:
        uint64_t result = 9;
        break;
      case 3:
        uint64_t result = 11;
        break;
      case 4:
        uint64_t result = 13;
        break;
      case 5:
        uint64_t result = 15;
        break;
      case 6:
        uint64_t result = 17;
        break;
      case 7:
        uint64_t result = 12;
        break;
      case 8:
        uint64_t result = 14;
        break;
      case 9:
        uint64_t result = 16;
        break;
      case 10:
        uint64_t result = 18;
        break;
      case 20:
        uint64_t result = 19;
        break;
      case 21:
        uint64_t result = 20;
        break;
      case 32:
        uint64_t result = 3;
        break;
      case 33:
        uint64_t result = 4;
        break;
      case 34:
        uint64_t result = 5;
        break;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t RETypeRegistryCreateTestData(_anonymous_namespace_ *a1)
{
  uint64_t v33 = 6059476;
  unsigned int v34 = "BOOL";
  re::TypeBuilderHelper::registerBasic<BOOL>(a1, &v33, (re::TypeRegistry **)&v30);
  re::StringID::destroyString((re::StringID *)&v33);
  uint64_t v33 = 208862;
  unsigned int v34 = "int";
  re::TypeBuilderHelper::registerBasic<int>(a1, &v33, (re::TypeRegistry **)&v29);
  re::StringID::destroyString((re::StringID *)&v33);
  uint64_t v33 = 0x161EEF7A2;
  unsigned int v34 = "double";
  re::TypeBuilderHelper::registerBasic<double>(a1, &v33, (re::TypeRegistry **)&v28);
  re::StringID::destroyString((re::StringID *)&v33);
  uint64_t v33 = 0x971D12FA97F764A2;
  unsigned int v34 = "Optional<double>";
  re::TypeBuilderHelper::registerOptional<double>(a1, &v33, &v28, (re::TypeRegistry **)&v27);
  re::StringID::destroyString((re::StringID *)&v33);
  uint64_t v33 = 0x172E213ACLL;
  unsigned int v34 = "int[3]";
  re::TypeBuilderHelper::registerArray(a1, &v33, &v29, 3uLL, (re::TypeRegistry **)&v26);
  re::StringID::destroyString((re::StringID *)&v33);
  uint64_t v33 = 0x67A219376628FE62;
  unsigned int v34 = "DynamicArray<int>";
  re::TypeBuilderHelper::registerDynamicArray<int>(a1, &v33, &v29, (re::TypeRegistry **)&v25);
  re::StringID::destroyString((re::StringID *)&v33);
  v23[0] = 0xE7E18952C29E6A8;
  v23[1] = (uint64_t)"HashTable<int,double>";
  uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v23);
  if (a1 && v2)
  {
    uint64_t v3 = *v2;
    *(void *)&long long v24 = a1;
    *((void *)&v24 + 1) = v3;
    goto LABEL_14;
  }
  uint64_t v33 = 0x449AD97C4B77BED4;
  unsigned int v34 = "_CompareFunc";
  int v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, &v33);
  if (v4)
  {
    uint64_t v5 = *v4;
    re::StringID::destroyString((re::StringID *)&v33);
    if (a1)
    {
      uint64_t v6 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v33);
  }
  *(void *)&v39.var0 = 0x449AD97C4B77BED4;
  v39.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v39, 1u, 0, &v33);
  uint64_t v6 = v33;
  uint64_t v5 = (uint64_t)v34;
  re::StringID::destroyString((re::StringID *)&v39);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, (re **)&v29, &v33);
  re::TypeInfo::TypeInfo((uint64_t)&v39, (uint64_t)&v34);
  if (!v6
    || (uint64_t v7 = *v40,
        uint64_t v33 = v5,
        unsigned int v34 = v7,
        int v35 = -1,
        (int16x8_t v8 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v39.var0 + 768, &v33)) == 0)|| !*(void *)v8)
  {
    long long v38 = v29;
    uint64_t v36 = v6;
    uint64_t v37 = (const char *)v5;
    int16x8_t v8 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v38, -1, (uint64_t)&v36, (uint64_t)re::internal::less<int>, 0);
  }
  long long v31 = v28;
  long long v32 = v29;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v33, v23, 1, 0x30uLL, 8uLL, &v32, &v31);
  re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v33, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v33, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v33, a1, &v24);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v9);
LABEL_14:
  re::StringID::destroyString((re::StringID *)v23);
  re::TypeBuilderHelper::registerDynamicString(a1, &v39);
  re::TypeBuilderHelper::registerStringID(a1, &v38);
  uint64_t v36 = 0x45F7EF0E6F8;
  uint64_t v37 = "TestData";
  v22[0] = 0;
  v22[1] = 0xFFFFFFFFLL;
  re::TypeBuilder::beginObjectType((uint64_t)&v33, &v36, 1, 1, 0xB8uLL, 8uLL, (uint64_t)v22);
  re::StringID::destroyString((re::StringID *)&v36);
  re::TypeBuilder::setConstructor((uint64_t)&v33, (uint64_t)RETypeRegistryCreateTestData::$_0::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v33, (uint64_t)RETypeRegistryCreateTestData::$_1::__invoke);
  long long v21 = v30;
  uint64_t v36 = 196;
  uint64_t v37 = "b";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 1, (uint64_t)&v21, &v36, 0);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v20 = v29;
  uint64_t v36 = 210;
  uint64_t v37 = "i";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 2, (uint64_t)&v20, &v36, 4);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v19 = v28;
  uint64_t v36 = 200;
  uint64_t v37 = "d";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 3, (uint64_t)&v19, &v36, 8);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v18 = v27;
  uint64_t v36 = 0x5BDF69496C0;
  uint64_t v37 = "optional";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 4, (uint64_t)&v18, &v36, 16);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v17 = v26;
  uint64_t v36 = 0x13D298C84A468ALL;
  uint64_t v37 = "fixedArray";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 5, (uint64_t)&v17, &v36, 32);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v16 = v25;
  uint64_t v36 = 0x495BC3BA4202E2B4;
  uint64_t v37 = "dynamicArray";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 6, (uint64_t)&v16, &v36, 48);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v15 = v24;
  uint64_t v36 = 0xA66423A206C0;
  uint64_t v37 = "hashTable";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 7, (uint64_t)&v15, &v36, 88);
  re::StringID::destroyString((re::StringID *)&v36);
  StringID v14 = v39;
  uint64_t v36 = 0xE21CB38E3C008260;
  uint64_t v37 = "dynamicString";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 8, (uint64_t)&v14, &v36, 136);
  re::StringID::destroyString((re::StringID *)&v36);
  long long v13 = v38;
  uint64_t v36 = 0x5F2D5FB51D8;
  uint64_t v37 = "stringID";
  re::TypeBuilder::addObjectMember((uint64_t)&v33, 9, (uint64_t)&v13, &v36, 168);
  re::StringID::destroyString((re::StringID *)&v36);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v33, a1, &v36);
  uint64_t v10 = v36;
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v33, v11);
  return v10;
}

unint64_t RETypeRegistryCreateTestData::$_0::__invoke(RETypeRegistryCreateTestData::$_0 *this, void *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 6) = 0;
  uint64_t v6 = (void *)((char *)this + 48);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(void *)((char *)this + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 136) = 0u;
  uint64_t v7 = (RETypeRegistryCreateTestData::$_0 *)((char *)this + 136);
  *(_OWORD *)((char *)this + 152) = 0u;
  re::DynamicString::setCapacity(v7, 0);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = "";
  *(unsigned char *)this = 1;
  *((_DWORD *)this + 1) = -123;
  *((void *)this + 1) = 0x405EDD2F1A9FBE77;
  if (!*((unsigned char *)this + 16)) {
    *((unsigned char *)this + 16) = 1;
  }
  *((void *)this + 3) = 0x3FBF7CED916872B0;
  *((void *)this + 4) = 0xFFFFFFFEFFFFFFFFLL;
  *((_DWORD *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = -3;
  for (int i = 1; i != 6; ++i)
  {
    LODWORD(v17[0]) = i;
    re::DynamicArray<int>::add(v6, v17);
  }
  unint64_t v9 = 1;
  int v16 = 1;
  do
  {
    v17[0] = (double)(int)v9 / 10.0;
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    unint64_t v11 = v10 ^ (v10 >> 31);
    if (!*((void *)this + 11))
    {
      LODWORD(v12) = 0;
LABEL_13:
      re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove((uint64_t)this + 88, v12, v11, &v16, v17);
      ++*((_DWORD *)this + 32);
      goto LABEL_14;
    }
    unint64_t v12 = v11 % *((unsigned int *)this + 28);
    uint64_t v13 = *(unsigned int *)(*((void *)this + 12) + 4 * v12);
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_13;
    }
    uint64_t v14 = *((void *)this + 13);
    while (v9 != *(_DWORD *)(v14 + 24 * v13 + 12))
    {
      LODWORD(v13) = *(_DWORD *)(v14 + 24 * v13 + 8) & 0x7FFFFFFF;
      if (v13 == 0x7FFFFFFF) {
        goto LABEL_13;
      }
    }
LABEL_14:
    int v16 = ++v9;
  }
  while (v9 != 3);
  *(void *)&v17[0] = "DynamicString Test";
  *(void *)&v17[1] = 18;
  re::DynamicString::operator=(v7, (uint64_t)v17);
  re::StringID::destroyString((RETypeRegistryCreateTestData::$_0 *)((char *)this + 168));
  unint64_t result = re::internal::compileTimeHornerHash<14ul>(31, (uint64_t)"StringID Test", 0, 0, 13);
  *((void *)this + 21) = 2 * result;
  *((void *)this + 22) = "StringID Test";
  return result;
}

uint64_t re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)long long v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v27[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21 - 4, v21);
              }
              v21 += 24;
              --v20;
            }
            while (v20);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 24 * v9 + 8) = v23 | 0x80000000;
  uint64_t v25 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t RETypeRegistryCreateTestData::$_1::__invoke(uint64_t *a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 21));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 17));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 11);
  return re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 6));
}

BOOL re::internal::less<int>(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1);
  return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a1 == a3)
  {
    if (*(_DWORD *)(a1 + 28))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 24);
      if (v5) {
        memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v5);
      }
      uint64_t v6 = *(unsigned int *)(a1 + 32);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 24 * v6;
        do
        {
          uint64_t v9 = *(void *)(a1 + 16) + v7;
          int v10 = *(_DWORD *)(v9 + 8);
          if (v10 < 0) {
            *(_DWORD *)(v9 + 8) = v10 & 0x7FFFFFFF;
          }
          v7 += 24;
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 28) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      int v11 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v11;
    }
  }
  else
  {
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, _DWORD *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v21);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)v22);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v20, a3, 0);
  uint64_t v9 = Instance;
  unint64_t v10 = (int)*a4;
  unint64_t v11 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
  unint64_t v12 = v11 ^ (v11 >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v13) = 0;
    goto LABEL_8;
  }
  unint64_t v13 = v12 % *(unsigned int *)(a1 + 24);
  uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v13);
  if (v14 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v17 = re::HashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, v13, v12, a4, Instance);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 16) + 24 * v17;
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  while (*(_DWORD *)(v15 + 24 * v14 + 12) != v10)
  {
    uint64_t v14 = *(_DWORD *)(v15 + 24 * v14 + 8) & 0x7FFFFFFF;
    if (v14 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v15 + 24 * v14 + 16) = *Instance;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 16) + 24 * v14;
LABEL_9:
  uint64_t v18 = v16 + 16;
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v21);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)v22);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v20, v9, a3, 0);
  return v18;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, int *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = *a2;
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v6 + 24 * v4 + 12) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(_DWORD *)(v6 + 24 * v4 + 12) == v2) {
        return v6 + 24 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 6;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 24 * *(unsigned int *)(a1 + 32) + 12;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 24 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<int,double,re::Hash<int>,re::EqualTo<int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *REBillboardComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

__n128 REBillboardComponentGetUpDirection(__n128 *a1)
{
  return a1[2];
}

__n128 REBillboardComponentGetForwardDirection(__n128 *a1)
{
  return a1[3];
}

__n128 REBillboardComponentGetRotationAxis(__n128 *a1)
{
  return a1[4];
}

uint64_t REBillboardComponentGetUseUpDirection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t REBillboardComponentGetUseRotationAxis(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 85);
}

float REBillboardComponentGetBlendFactor(uint64_t a1)
{
  return *(float *)(a1 + 80);
}

uint64_t REBillboardComponentSetUpDirection(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetForwardDirection(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetRotationAxis(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 64) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetUseUpDirection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 84) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetUseRotationAxis(uint64_t this, char a2)
{
  *(unsigned char *)(this + 85) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBillboardComponentSetBlendFactor(uint64_t this, float a2)
{
  *(float *)(this + 8ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REAudioFileAssetConfigurationCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 88, 8);
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(void *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v2 + 24) = 0xC028000000000000;
  return result;
}

re *REAudioFileAssetConfigurationDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    if (*((unsigned char *)v1 + 32)) {
      v3.n128_f64[0] = re::DynamicString::deinit((re *)((char *)v1 + 40));
    }
    int v4 = *(uint64_t (**)(uint64_t, re *, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

uint64_t REAudioFileAssetConfigurationSetShouldLoop(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetShouldLoop(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t REAudioFileAssetConfigurationSetLayoutTag(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = 1;
  }
  *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetLayoutTag(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

unsigned char *REAudioFileAssetConfigurationSetStreaming(unsigned char *result, char a2)
{
  void *result = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetStreaming(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t REAudioFileAssetConfigurationSetInputMode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetInputMode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

unsigned __int8 *REAudioFileAssetConfigurationSetMixGroupName(uint64_t a1, id a2)
{
  if (a2)
  {
    __n128 v3 = (_anonymous_namespace_ *)[a2 UTF8String];
    LOBYTE(v9) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v6);
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 32), &v9);
    if (_BYTE)v9 && v10 && (v11) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    double result = v6;
    if (v6 && (v7 & 1) != 0)
    {
      uint64_t v5 = v8;
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 40))(result, v5);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    double result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 32), &v9);
    if ((_BYTE)v9)
    {
      double result = (unsigned __int8 *)v10;
      if (v10)
      {
        if (v11)
        {
          uint64_t v5 = v12;
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 40))(result, v5);
        }
      }
    }
  }
  return result;
}

id REAudioFileAssetConfigurationGetMixGroupName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v1 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v1 = a1 + 49;
    }
    uint64_t v2 = [NSString stringWithUTF8String:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

uint64_t REAudioFileAssetConfigurationSetCalibrationLevel(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return result;
}

double REAudioFileAssetConfigurationGetCalibrationLevel(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t REAudioFileAssetConfigurationSetCalibrationMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetCalibrationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t REAudioFileAssetConfigurationSetNormalizationMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetNormalizationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t REAudioFileAssetConfigurationSetTargetLUFS(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

double REAudioFileAssetConfigurationGetTargetLUFS(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t REAudioFileAssetConfigurationSetRandomizeStart(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2) = a2;
  return result;
}

uint64_t REAudioFileAssetConfigurationGetRandomizeStart(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

id REAssetManagerGetEngineQueue(uint64_t a1)
{
  id v1 = *(id *)(a1 + 520);

  return v1;
}

CFStringRef REAssetManagerCopyResolvedAssetPath(os_unfair_lock_s **a1, char *a2)
{
  re::AssetManager::parseAssetPath((re::AssetManager *)a1, a2, 0, 0, (uint64_t)v14);
  if (v14[0])
  {
    int v10 = v15;
    re::DynamicString::DynamicString((re::DynamicString *)&v11, (const re::DynamicString *)&v16);
    re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)v17);
    v13[4] = v17[4];
    re::AssetProviderRegistry::getPathFromResolver(a1[141], (const re::DynamicString *)&v11, (const re::DynamicString *)v13, (uint64_t)v6);
    if (v6[0])
    {
      if (v8) {
        __n128 v3 = *(const char **)&v9[7];
      }
      else {
        __n128 v3 = v9;
      }
      CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
      if (v6[0] && v7 && (v8 & 1) != 0) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
    }
    else
    {
      CFStringRef v4 = 0;
    }
    if (v13[0])
    {
      if (v13[1]) {
        (*(void (**)(void))(*(void *)v13[0] + 40))();
      }
      memset(v13, 0, 32);
    }
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  else
  {
    CFStringRef v4 = 0;
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result(v14);
  return v4;
}

uint64_t REAssetDeduplicationOperationCreate(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      re::AssetAPIHelper::assetHandleCreate(*(void *)(a2 + 8 * v8), &v17);
      unint64_t v9 = v21;
      if (v21 <= v8)
      {
        uint64_t v23 = 0;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)signed int v24 = 136315906;
        *(void *)&v24[4] = "operator[]";
        *(_WORD *)&unsigned char v24[12] = 1024;
        *(_DWORD *)&v24[14] = 468;
        __int16 v25 = 2048;
        unint64_t v26 = v8;
        __int16 v27 = 2048;
        unint64_t v28 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v10 = (uint64_t *)(v22 + v7);
      uint64_t v11 = *(void *)(v22 + v7 + 8);
      v10[1] = v18;
      uint64_t v18 = v11;
      uint64_t v12 = *v10;
      uint64_t *v10 = 0;
      uint64_t *v10 = v17;
      uint64_t v17 = v12;
      uint64_t v13 = v10[2];
      v10[2] = v19;
      uint64_t v19 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
      ++v8;
      v7 += 24;
    }
    while (a3 != v8);
  }
  uint64_t v14 = re::globalAllocators(v6);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 72, 8);
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(void *)(v15 + 64) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v15, 0);
  *(void *)uint64_t v15 = &unk_26E734328;
  *(_OWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v15 + + 56) = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  *(void *)(v15 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  *(void *)signed int v24 = v22;
  *(void *)&unsigned char v24[8] = v21;
  re::AssetDeduplication::deduplicate((uint64_t)v24, (uint64_t)a1, (uint64_t)v29);
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::operator=(v15 + 24, (uint64_t *)v29);
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v29);
  re::FixedArray<re::AssetHandle>::deinit(&v20);
  return v15;
}

uint64_t REAssetDeduplicationOperationGetDeduplicatedAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  re::AssetAPIHelper::assetHandleCreate(a2, &v11);
  if (re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1 + 24, (uint64_t)&v11))
  {
    if (*(void *)(a1 + 24))
    {
      if (v12) {
        uint64_t v4 = *(void *)(v12 + 664);
      }
      else {
        uint64_t v4 = 0;
      }
      unint64_t v6 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
      uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * ((v4 ^ (v6 >> 31) ^ v6) % *(unsigned int *)(a1 + 48)));
      uint64_t v5 = 0x7FFFFFFFLL;
      if (v7 != 0x7FFFFFFF)
      {
        do
        {
          uint64_t v8 = *(void *)(a1 + 40) + (v7 << 6);
          uint64_t v5 = v7;
          if (*(void *)(v8 + 24) == v12) {
            break;
          }
          uint64_t v7 = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
          uint64_t v5 = 0x7FFFFFFFLL;
        }
        while (v7 != 0x7FFFFFFF);
      }
    }
    else
    {
      uint64_t v5 = 0x7FFFFFFFLL;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(*(void *)(a1 + 40) + (v5 << 6) + 40));
    uint64_t v2 = v10[0];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return v2;
}

uint64_t REAssetDeduplicationOperationCreateAssetPathMapping(uint64_t a1, uint64_t a2)
{
  re::AssetDeduplication::remap(a1 + 24, a2 + 24, (uint64_t)v9);
  re::make::shared::object<re::Shareable<re::AssetPathMapping>>(v2, &v8);
  uint64_t v3 = v8;
  uint64_t v4 = (void *)(v8 + 24);
  if ((uint64_t *)(v8 + 24) != v9)
  {
    if (*v4)
    {
      if (v9[0])
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(v8 + 24, (uint64_t)v9);
        ++*(_DWORD *)(v3 + 64);
      }
      else
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(v8 + 24);
      }
    }
    else if (v9[0])
    {
      if (v10 <= 3) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = v10;
      }
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(v8 + 24, v9[0], v5);
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy((uint64_t)v4, (uint64_t)v9);
    }
  }
  uint64_t v6 = v8;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v9);
  return v6;
}

uint64_t REAssetManagerCustomMemoryAssetCreate(re *a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (re::CustomAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 16, 8);
  *(void *)uint64_t v7 = &unk_26E6C9498;
  *((void *)v7 + 1) = 0;
  re::CustomAsset::setRuntimeObject(v7, a3);
  (*(void (**)(void *__return_ptr, re *, re::CustomAsset *, uint64_t, void, void, void))(*(void *)a1 + 416))(v11, a1, v7, a2, 0, 0, 0);
  uint64_t v8 = v11[0];
  id v9 = (id)(v11[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

void *REAssetManagerAddCleanupCallback(uint64_t a1, void *aBlock)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26E734370;
  v4[1] = _Block_copy(aBlock);
  _OWORD v4[3] = v4;
  re::AssetManager::addCleanupBlock(a1, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v4);
}

uint64_t REAssetRegistrationOptionsCreate(re *a1)
{
  re::make::shared::object<re::Shareable<AssetRegistrationOptions>>(a1, &v2);
  return v2;
}

uint64_t REAssetRegistrationOptionsSetIsMutable(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t REAssetHandleCreateFromAssetRegistrationOptions(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v12, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v14, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v17, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)(a2 + 17));
  if (*(unsigned char *)(a3 + 24))
  {
    re::AssetManager::createNewMutableAssetHandle(a1, (re::DynamicString *)&v12, 0, 1, (re::AssetHandle *)&v9);
  }
  else
  {
    os_unfair_lock_lock(a1 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, (const re::AssetLoadDescriptor *)&v12, &v9);
    os_unfair_lock_unlock(a1 + 16);
  }
  uint64_t v6 = v9;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v23 = v11;
  uint64_t v11 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  id v7 = (id)(v6 + 8);
  if (v20[0])
  {
    if (v20[1]) {
      (*(void (**)(void))(*(void *)v20[0] + 40))();
    }
    memset(v20, 0, sizeof(v20));
  }
  if (v17[0])
  {
    if (v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    uint64_t v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (v14[0])
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    uint64_t v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
  return v6;
}

uint64_t REAssetHandleCreateNewFromAssetRegistrationOptions(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v15, (const re::DynamicString *)(a2 + 3));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v18, a2 + 7);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v21, a2 + 12);
  re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)(a2 + 17));
  if (*(unsigned char *)(a3 + 24))
  {
    re::AssetManager::createNewMutableAssetHandle(a1, (re::DynamicString *)&v15, 0, 1, (re::AssetHandle *)&v13);
    long long v6 = v26;
    long long v26 = v13;
    long long v13 = v6;
    uint64_t v7 = v27;
    uint64_t v27 = v14;
    uint64_t v14 = v7;
    uint64_t v8 = (re::AssetHandle *)&v13;
    goto LABEL_3;
  }
  re::AssetManager::createNewImmutableAssetHandle(a1, (re::DynamicString *)&v15, 0, (uint64_t)&v13);
  if ((_BYTE)v13)
  {
    re::AssetHandle::operator=((uint64_t)&v26, (uint64_t *)&v13 + 1);
    if (!(_BYTE)v13) {
      goto LABEL_4;
    }
    uint64_t v8 = (re::AssetHandle *)((char *)&v13 + 8);
LABEL_3:
    re::AssetHandle::~AssetHandle(v8);
LABEL_4:
    uint64_t v9 = v26;
    id v10 = (id)(v26 + 8);
    goto LABEL_5;
  }
  uint64_t v9 = 0;
LABEL_5:
  if ((void)v24)
  {
    if (BYTE8(v24)) {
      (*(void (**)(void, void, uint64_t))(*(void *)v24 + 40))(v24, v25, v11);
    }
    long long v24 = 0u;
    long long v25 = 0u;
  }
  if (v21[0])
  {
    if (v23) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)v21[0] + 40))(v21[0], v23, v11);
    }
    uint64_t v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v18[0])
  {
    if (v20) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)v18[0] + 40))(v18[0], v20, v11);
    }
    uint64_t v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v17, v11);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
  return v9;
}

uint64_t REAssetHandleIsMutable(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned __int8 *)(v3[1] + 257);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAssetHandleIsMutated(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned __int8 *)(v3[1] + 256);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAssetHandleConvertToMutable(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  if (v5 && (uint64_t v1 = *(os_unfair_lock_s **)(v5 + 24)) != 0) {
    uint64_t v2 = re::AssetManager::convertToMutable(v1, (const re::AssetHandle *)&v4);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
  return v2;
}

uint64_t REAssetManagerCreateFileAssetDescriptor(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if (([v3 isFileURL] & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v19 = (id)CoreRELog::log;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "URL passed to REAssetManagerCreateFileAssetDescriptor must be a file URL: %@", buf, 0xCu);
    }

    goto LABEL_35;
  }
  id v4 = v3;
  uint64_t v5 = (re::AssetPath *)[v4 fileSystemRepresentation];
  uint64_t AssetTypeFromFilePath = re::AssetPath::getAssetTypeFromFilePath(v5, *(re::internal::AssetTypeRegistry **)(a1 + 1040), v6);
  if (!AssetTypeFromFilePath)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v20 = (id)CoreRELog::log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Asset path has an unknown extension: %@", buf, 0xCu);
    }

LABEL_35:
    uint64_t v18 = 0;
    goto LABEL_36;
  }
  uint64_t v8 = (const char **)AssetTypeFromFilePath;
  uint64_t v9 = (_anonymous_namespace_ *)[v4 fileSystemRepresentation];
  uint64_t v11 = *v8;
  re::FileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v23, (re::DynamicString *)v22, (uint64_t)buf);
  if (*(void *)&v22[0])
  {
    if (BYTE8(v22[0])) {
      (*(void (**)(void))(**(void **)&v22[0] + 40))();
    }
    memset(v22, 0, sizeof(v22));
  }
  uint64_t v14 = (re *)v23;
  if (v23 && (v24 & 1) != 0) {
    uint64_t v14 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v25, v12, v13);
  }
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v14, &v23);
  uint64_t v15 = v23;
  re::DynamicString::operator=((re::DynamicString *)(v23 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v15 + 56, v28);
  re::DynamicArray<BOOL>::operator=(v15 + 96, v31);
  re::DynamicString::operator=((re::DynamicString *)(v15 + 136), (re::DynamicString *)&v34);
  uint64_t v18 = v23;
  if ((void)v34)
  {
    if (BYTE8(v34)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v35, v16, v17);
    }
    long long v34 = 0u;
    long long v35 = 0u;
  }
  if (v31[0])
  {
    if (v33) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31[0] + 40))(v31[0], v33, v16, v17);
    }
    uint64_t v33 = 0;
    memset(v31, 0, sizeof(v31));
    ++v32;
  }
  if (v28[0])
  {
    if (v30) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v28[0] + 40))(v28[0], v30, v16, v17);
    }
    uint64_t v30 = 0;
    memset(v28, 0, sizeof(v28));
    ++v29;
  }
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 40))(*(void *)buf, v27, v16, v17);
  }
LABEL_36:

  return v18;
}

uint64_t REAssetManagerGetAssetDescriptorCount(os_unfair_lock_s *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v9);
  id v3 = re::AssetHandle::assetInfo((re::AssetHandle *)v9);
  if (v3[10] == -1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3[10];
  }
  re::AssetManager::loadDescriptorsFromAssetId(a1, v4, v7);
  if (v7[0])
  {
    uint64_t v5 = v8[2];
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v5;
}

uint64_t REAssetManagerCopyAssetDescriptor(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, v18);
  uint64_t v5 = re::AssetHandle::assetInfo((re::AssetHandle *)v18);
  if (v5[10] == -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5[10];
  }
  re::AssetManager::loadDescriptorsFromAssetId(a1, v6, v14);
  if (!v14[0])
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  if (v16 <= a3)
  {
    uint64_t v11 = 0;
LABEL_11:
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v15);
    goto LABEL_12;
  }
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v7, &v13);
  unint64_t v8 = v16;
  if (v16 <= a3)
  {
    void v18[3] = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v19 = 136315906;
    uint64_t v20 = "operator[]";
    __int16 v21 = 1024;
    int v22 = 789;
    __int16 v23 = 2048;
    unint64_t v24 = a3;
    __int16 v25 = 2048;
    unint64_t v26 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = (uint64_t *)(v17 + 144 * a3);
  uint64_t v10 = v13;
  re::DynamicString::operator=((re::DynamicString *)(v13 + 24), (re::DynamicString *)v9);
  re::DynamicArray<BOOL>::operator=(v10 + 56, v9 + 4);
  re::DynamicArray<BOOL>::operator=(v10 + 96, v9 + 9);
  re::DynamicString::operator=((re::DynamicString *)(v10 + 136), (re::DynamicString *)(v9 + 14));
  uint64_t v11 = v13;
  if (v14[0]) {
    goto LABEL_11;
  }
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
  return v11;
}

uint64_t (***REAssetManagerRegisterAssetUnloadCompleteCallback(uint64_t a1, void *aBlock))(void)
{
  void v6[5] = *MEMORY[0x263EF8340];
  id v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E7342C0;
  v6[1] = v3;
  void v6[3] = v4;
  v6[4] = v6;
  re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::add((_anonymous_namespace_ *)(a1 + 1512), (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable((uint64_t)v6);
}

void REAssetManagerReplaceAssetRefDataWith(re::AssetManager *a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v6);
  re::AssetAPIHelper::assetHandleCreate(a3, v5);
  re::AssetManager::transferAssetHandleDataToEmptyAssetHandle(a1, (re::AssetHandle *)v6, (re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromExistingWithRegister(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v22);
  {
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    long long buf = 0uLL;
    unint64_t v8 = (re::DynamicString *)(a2 + 24);
    int v27 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v8);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v19, (const re::AssetHandle *)v22);
    re::AssetManager::createNewImmutableAssetHandleFromExistingAssetData(a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v19, a4, v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    if (v20[0])
    {
      uint64_t v10 = v21[0];
      if (v21[0]) {
        id v11 = (id)(v21[0] + 8);
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = re::AssetHandle::assetInfo((re::AssetHandle *)v22);
        if (v17[17]) {
          uint64_t v18 = (char *)v17[18];
        }
        else {
          uint64_t v18 = (char *)v17 + 137;
        }
        *(_DWORD *)__int16 v23 = 136315138;
        unint64_t v24 = v18;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "failed to create immutable asset from existing '%s'", v23, 0xCu);
      }

      uint64_t v10 = 0;
    }
    if (v20[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
    }
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = re::AssetHandle::assetInfo((re::AssetHandle *)v22);
      if (v15[17]) {
        unint64_t v16 = (char *)v15[18];
      }
      else {
        unint64_t v16 = (char *)v15 + 137;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "failed to create immutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v10 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v10;
}

BOOL anonymous namespace'::ensureExistingAssetIsLoaded(_anonymous_namespace_ *this, re::AssetHandle *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (unsigned int v4 = atomic_load((unsigned int *)(v3 + 704)), v4 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(this);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v11 = 136315138;
      uint64_t v12 = v7;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "existing asset is not loaded: '%s'", (uint8_t *)&v11, 0xCu);
    }

    re::AssetHandle::loadNow(*((void *)this + 1), 0);
  }
  uint64_t v8 = *((void *)this + 1);
  if (!v8) {
    return 0;
  }
  unsigned int v9 = atomic_load((unsigned int *)(v8 + 704));
  return v9 == 2;
}

void anonymous namespace'::checkProvider(os_unfair_lock_s *this, re::AssetManager *a2, const re::AssetLoadDescriptor *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v4 = (char *)a2 + 9;
  if (*((void *)a2 + 1)) {
    uint64_t v5 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v5 = (char *)a2 + 9;
  }
  if (!re::AssetProviderRegistry::tryGetRawProviderForScheme(this, v5))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (*((void *)a2 + 1)) {
        uint64_t v7 = (char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v7 = v4;
      }
      int v8 = 136315138;
      unsigned int v9 = v7;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Creating an asset for unknown scheme '%s'.", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromExisting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return REAssetManagerCreateNewImmutableAssetRefFromExistingWithRegister(a1, a2, a3, 1);
}

uint64_t REAssetManagerCreateNewImmutableAssetRefFromCloning(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v20);
  {
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    long long buf = 0uLL;
    uint64_t v6 = (re::DynamicString *)(a2 + 24);
    int v25 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v6);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v17, (const re::AssetHandle *)v20);
    re::AssetManager::copyNewImmutableAssetHandleFromExistingAssetData(a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v17, v18);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
    if (v18[0])
    {
      uint64_t v8 = v19[0];
      if (v19[0]) {
        id v9 = (id)(v19[0] + 8);
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = re::AssetHandle::assetInfo((re::AssetHandle *)v20);
        if (v15[17]) {
          unint64_t v16 = (char *)v15[18];
        }
        else {
          unint64_t v16 = (char *)v15 + 137;
        }
        *(_DWORD *)__int16 v21 = 136315138;
        int v22 = v16;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "failed to copy immutable asset from existing '%s'", v21, 0xCu);
      }

      uint64_t v8 = 0;
    }
    if (v18[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
    }
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = re::AssetHandle::assetInfo((re::AssetHandle *)v20);
      if (v13[17]) {
        uint64_t v14 = (char *)v13[18];
      }
      else {
        uint64_t v14 = (char *)v13 + 137;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "failed to copy immutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  return v8;
}

uint64_t REAssetManagerCreateNewMutableAssetRefFromExisting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v16);
  {
    uint64_t v7 = (re::AssetManager *)(a2 + 24);
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    long long buf = 0uLL;
    int v19 = 0;
    re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&buf, v7);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)v16);
    re::AssetManager::createNewMutableAssetHandleFromExistingAssetData((os_unfair_lock_s *)a1, (uint64_t *)&buf, 0, (re::AssetHandle *)v14, (re::AssetHandle *)v15);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    uint64_t v8 = v15[0];
    if (v15[0]) {
      id v9 = (id)(v15[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = re::AssetHandle::assetInfo((re::AssetHandle *)v16);
      if (v12[17]) {
        uint64_t v13 = (char *)v12[18];
      }
      else {
        uint64_t v13 = (char *)v12 + 137;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v13;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "failed to create mutable asset from existing '%s'", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v8;
}

uint64_t REAssetManagerPeerAssetStateIsKnown(uint64_t a1)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 168))(&v2);
    return (_BYTE)v2 != 0;
  }
  return result;
}

uint64_t anonymous namespace'::getNetworkAssetService(uint64_t a1)
{
  if (!a1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v2 = (id)CoreRELog::log;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "Cannot query asset state because there is no NetworkAssetService.", v4, 2u);
    }
  }
  return a1;
}

uint64_t REAssetManagerPeerAssetIsLoading(uint64_t a1)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 168))(&v3);
    return (_BYTE)v3 && HIDWORD(v3) == 1;
  }
  return result;
}

uint64_t REAssetManagerPeerAssetIsLoaded(uint64_t a1)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 168))(&v3);
    return (_BYTE)v3 && HIDWORD(v3) == 2;
  }
  return result;
}

uint64_t REAssetManagerPeerAssetIsLoadFailed(uint64_t a1)
{
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 168))(&v3);
    return (_BYTE)v3 && HIDWORD(v3) == 3;
  }
  return result;
}

CFDataRef REAssetManagerCreateJsonDataByReserializingIntrospectedCompiledAssetContents(uint64_t a1, void *a2, const char *a3, CFDataRef *a4, char **a5)
{
  v50[2] = 0;
  id v51 = a2;
  v50[0] = *(re::internal::AssetTypeRegistry **)(a1 + 1040);
  v50[1] = 0;
  id v9 = (const char **)re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(v50[0], a3);
  if (v9)
  {
    unint64_t v10 = (unint64_t)v9;
    id v49 = 0;
    v44[0] = 0;
    re::AssetUtilities::loadCompiledAssetFromData(&v51, (uint64_t *)v50, v9, 0, &v49, (uint64_t)v44, (uint64_t)&v45);
    if (!(_BYTE)v45)
    {
      if (!a5)
      {
        CFDataRef v20 = 0;
        goto LABEL_56;
      }
      if (v47) {
        uint64_t v21 = *(unsigned char **)&v48[7];
      }
      else {
        uint64_t v21 = v48;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to load asset pointer from compiled asset data due to error: %s.", (re::DynamicString *)&v33, v21);
      if (v34.__val_) {
        cat = v34.__cat_;
      }
      else {
        cat = (const std::error_category *)((char *)&v34.__val_ + 1);
      }
      re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)cat, v37);
      __int16 v23 = (char *)v37[0];
      *a5 = v23;
      CFRetain(v23);

      if (v33 && (v34.__val_ & 1) != 0) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
      CFDataRef v20 = 0;
LABEL_55:
      if ((_BYTE)v45)
      {
LABEL_59:

        goto LABEL_60;
      }
LABEL_56:
      if (v46 && (v47 & 1) != 0) {
        (*(void (**)(void))(*(void *)v46 + 40))();
      }
      goto LABEL_59;
    }
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v43);
    uint64_t v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), v10);
    long long v42 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 112))(v11) + 32);
    re::TypeRegistry::typeInfo((re *)v42, (re **)&v42, &v33);
    uint64_t v12 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v34);
    bytes = 0;
    v37[1] = 0;
    CFIndex length = 0;
    int v39 = 0;
    uint64_t v13 = (_anonymous_namespace_ *)re::DynamicArray<char>::setCapacity(v37, 0);
    ++v39;
    uint64_t v14 = v46;
    if ((_BYTE)v33)
    {
      if (a4)
      {
        if (v49)
        {
          uint64_t v15 = [v49 bytes];
          CFIndex v16 = [v49 length];
          uint64_t v17 = (const UInt8 *)v15;
        }
        else
        {
          uint64_t v17 = 0;
          CFIndex v16 = 0;
        }
        *a4 = CFDataCreate(0, v17, v16);
      }
      CFDataRef v20 = CFDataCreate(0, bytes, length);
      if (v20)
      {
LABEL_45:
        if ((_BYTE)v33)
        {
LABEL_51:
          if (v37[0] && bytes) {
            (*(void (**)(void))(*(void *)v37[0] + 40))();
          }
          re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v43);
          goto LABEL_55;
        }
LABEL_48:
        if (v35 && (v36 & 1) != 0) {
          (*(void (**)(void))(*(void *)v35 + 40))();
        }
        goto LABEL_51;
      }
      if (a5)
      {
        re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)"Failed to create CFData object to hold serialized json data.", &v30);
        uint64_t v27 = (char *)v30;
        *a5 = v27;
        CFRetain(v27);
      }
    }
    else
    {
      if (!a5)
      {
        CFDataRef v20 = 0;
        goto LABEL_48;
      }
      std::error_code::message(&v29, &v34);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v29;
      }
      else {
        uint64_t v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      re::DynamicString::format((re::DynamicString *)"Failed to serialize asset to json due to error: %s.", (re::DynamicString *)&v30, v24);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (v31) {
        int v25 = *(unsigned char **)&v32[7];
      }
      else {
        int v25 = v32;
      }
      re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)v25, &v29);
      uint64_t v26 = v29.__r_.__value_.__l.__data_;
      *a5 = v26;
      CFRetain(v26);

      if (v30 && (v31 & 1) != 0) {
        (*(void (**)(void))(*(void *)v30 + 40))();
      }
    }
    CFDataRef v20 = 0;
    goto LABEL_45;
  }
  if (a5)
  {
    re::DynamicString::format((re::DynamicString *)"Could not find a registered asset type with compiled extension '%s'.", (re::DynamicString *)&v33, a3);
    uint64_t v18 = (v34.__val_ & 1) != 0 ? v34.__cat_ : (const std::error_category *)((char *)&v34.__val_ + 1);
    re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)v18, &v45);
    int v19 = (char *)v45;
    *a5 = v19;
    CFRetain(v19);

    if (v33)
    {
      if (v34.__val_) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
    }
  }
  CFDataRef v20 = 0;
LABEL_60:

  return v20;
}

uint64_t REPeerAssetDescriptorCreate(_anonymous_namespace_ *a1, const char *a2, const re::DynamicString *a3)
{
  if (!a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Invalid assetIdentifierString passed to REPeerAssetDescriptorCreate";
    goto LABEL_31;
  }
  if (!a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_28;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Invalid assetType passed to REPeerAssetDescriptorCreate";
LABEL_31:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_28:

    return 0;
  }
  re::PeerAssetProvider::makeDescriptor(a1, a3, (re::DynamicString *)&v12, (uint64_t)buf);
  uint64_t v6 = (re *)v12;
  if (v12 && (v13 & 1) != 0) {
    uint64_t v6 = (re *)(*(uint64_t (**)(void))(*(void *)v12 + 40))();
  }
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v6, &v12);
  uint64_t v7 = v12;
  re::DynamicString::operator=((re::DynamicString *)(v12 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v7 + 56, v16);
  re::DynamicArray<BOOL>::operator=(v7 + 96, v19);
  re::DynamicString::operator=((re::DynamicString *)(v7 + 136), (re::DynamicString *)v22);
  uint64_t v8 = v12;
  if (v22[0])
  {
    if (v22[1]) {
      (*(void (**)(void))(*(void *)v22[0] + 40))();
    }
    memset(v22, 0, sizeof(v22));
  }
  if (v19[0])
  {
    if (v21) {
      (*(void (**)(void))(*(void *)v19[0] + 40))();
    }
    uint64_t v21 = 0;
    memset(v19, 0, sizeof(v19));
    ++v20;
  }
  if (v16[0])
  {
    if (v18) {
      (*(void (**)(void))(*(void *)v16[0] + 40))();
    }
    uint64_t v18 = 0;
    memset(v16, 0, sizeof(v16));
    ++v17;
  }
  if (*(void *)buf && (v15 & 1) != 0) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  return v8;
}

re::DynamicString *REPeerAssetDescriptorGetSourcePeerId(void *a1)
{
  if (a1[4]) {
    uint64_t v2 = (const char *)a1[5];
  }
  else {
    uint64_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "PeerAsset");
  if (v3) {
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  uint64_t v6 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v9, 0);
  if (v6)
  {
    unsigned int v4 = v9;
  }
  else
  {
    uint64_t v7 = *re::assetsLogObjects((re *)v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Failed to deserialize PeerAssetDescriptor parameters", v8, 2u);
    }
    unsigned int v4 = 0;
  }
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v4;
}

CFStringRef REPeerAssetDescriptorGetAssetIdentifierStringOnPeer(void *a1)
{
  if (a1[4]) {
    uint64_t v2 = (const char *)a1[5];
  }
  else {
    uint64_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "PeerAsset");
  if (v3) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  uint64_t v6 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v10, 0);
  if (v6)
  {
    if (v12) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = (char *)&v12 + 1;
    }
    CFStringRef v4 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  else
  {
    uint64_t v8 = *re::assetsLogObjects((re *)v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Failed to deserialize PeerAssetDescriptor parameters", v9, 2u);
    }
    CFStringRef v4 = 0;
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*v11 + 40))();
  }
  return v4;
}

uint64_t REAssetManagerRegisterAndCreateFileNameAliasAssetDescriptor(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (([v5 isFileURL] & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v5;
    uint64_t v26 = "URL passed to REAssetManagerCreateFileAssetDescriptor must be a file URL: %@";
    goto LABEL_50;
  }
  id v6 = v5;
  uint64_t v7 = (re::AssetPath *)[v6 fileSystemRepresentation];
  uint64_t AssetTypeFromFilePath = (_anonymous_namespace_ *)re::AssetPath::getAssetTypeFromFilePath(v7, *(re::internal::AssetTypeRegistry **)(a1 + 1040), v8);
  if (!AssetTypeFromFilePath)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v6;
    uint64_t v26 = "Asset path has an unknown extension: %@";
LABEL_50:
    _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, v26, buf, 0xCu);
LABEL_41:

LABEL_42:
    uint64_t v24 = 0;
    goto LABEL_43;
  }
  unint64_t v10 = (const char **)AssetTypeFromFilePath;
  uint64_t v11 = *(os_unfair_lock_s **)(a1 + 1232);
  id v12 = v6;
  uint64_t v13 = (_anonymous_namespace_ *)[v12 fileSystemRepresentation];
  char v14 = re::NamedFileRegistry::registerFileNameAlias(v11, (uint64_t)v34, (const char *)v33);
  if (*(void *)&v33[0])
  {
    if (BYTE8(v33[0])) {
      (*(void (**)(void))(**(void **)&v33[0] + 40))();
    }
    memset(v33, 0, sizeof(v33));
  }
  char v15 = *(_anonymous_namespace_ **)&v34[0];
  if (*(void *)&v34[0])
  {
    if (BYTE8(v34[0])) {
      char v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v34[0] + 40))();
    }
    memset(v34, 0, sizeof(v34));
  }
  if ((v14 & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v28 = (id)CoreRELog::log;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v36 = 2080;
      *(void *)uint64_t v37 = a3;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Failed to register file '%@' with alias '%s'", buf, 0x16u);
    }

    goto LABEL_42;
  }
  int v17 = *v10;
  re::NamedFileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v30, (re::DynamicString *)v29, (uint64_t)buf);
  if (*(void *)&v29[0])
  {
    if (BYTE8(v29[0])) {
      (*(void (**)(void))(**(void **)&v29[0] + 40))();
    }
    memset(v29, 0, sizeof(v29));
  }
  int v20 = (re *)v30;
  if (v30 && (v31 & 1) != 0) {
    int v20 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v30 + 40))(v30, v32, v18, v19);
  }
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(v20, &v30);
  uint64_t v21 = v30;
  re::DynamicString::operator=((re::DynamicString *)(v30 + 24), (re::DynamicString *)buf);
  re::DynamicArray<BOOL>::operator=(v21 + 56, v38);
  re::DynamicArray<BOOL>::operator=(v21 + 96, v41);
  re::DynamicString::operator=((re::DynamicString *)(v21 + 136), (re::DynamicString *)&v44);
  uint64_t v24 = v30;
  if ((void)v44)
  {
    if (BYTE8(v44)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v44 + 40))(v44, v45, v22, v23);
    }
    long long v44 = 0u;
    long long v45 = 0u;
  }
  if (v41[0])
  {
    if (v43) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v41[0] + 40))(v41[0], v43, v22, v23);
    }
    uint64_t v43 = 0;
    memset(v41, 0, sizeof(v41));
    ++v42;
  }
  if (v38[0])
  {
    if (v40) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v38[0] + 40))(v38[0], v40, v22, v23);
    }
    uint64_t v40 = 0;
    memset(v38, 0, sizeof(v38));
    ++v39;
  }
  if (*(void *)buf && (buf[8] & 1) != 0) {
    (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)buf + 40))(*(void *)buf, *(void *)&v37[2], v22, v23);
  }
LABEL_43:

  return v24;
}

uint64_t _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround(uint64_t a1)
{
  return *(void *)(a1 + 1208);
}

uint64_t REAssetManagerRegisterBundleURL(uint64_t a1, const char *a2, CFURLRef anURL)
{
  CFStringRef v5 = CFURLCopyPath(anURL);
  CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr(v5, 0x8000100u);
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 1240);
  uint64_t v11 = re::BundleFilePathRegistry::registerBundleFilePath(v7, (uint64_t)&v14, (uint64_t)v13);
  if (*(void *)&v13[0])
  {
    if (BYTE8(v13[0])) {
      (*(void (**)(void))(**(void **)&v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  if ((void)v14)
  {
    if (BYTE8(v14)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v15, v9, v10);
    }
    long long v14 = 0u;
    long long v15 = 0u;
  }
  CFRelease(v5);
  return v11;
}

uint64_t REAssetManagerRegisterBundle(uint64_t a1, CFBundleRef bundle)
{
  CFStringRef Identifier = CFBundleGetIdentifier(bundle);
  CStringPtr = CFStringGetCStringPtr(Identifier, 0x8000100u);
  CFURLRef v6 = CFBundleCopyBundleURL(bundle);
  uint64_t v7 = REAssetManagerRegisterBundleURL(a1, CStringPtr, v6);
  CFRelease(v6);
  return v7;
}

uint64_t REAssetManagerUnregisterBundle(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v3 = (os_unfair_lock_s *)*((void *)a1 + 155);
  os_unfair_lock_lock(v3);
  uint64_t v4 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)&v3[2], (uint64_t)&v6);
  os_unfair_lock_unlock(v3);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v4;
}

uint64_t REAssetManagerGetAssetRuntimeSizeLimitForResourceShareClient(uint64_t a1)
{
  return *(void *)(a1 + 1368);
}

uint64_t REMemoryAssetParametersCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E734438;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  re::DynamicString::setCapacity((void *)(v2 + 24), 0);
  *(_WORD *)(v2 + + 56) = 0;
  return v2;
}

uint64_t REMemoryAssetParametersSetAsyncRegistration(uint64_t result, char a2)
{
  *(unsigned char *)(result + + 56) = a2;
  return result;
}

re::DynamicString *REMemoryAssetParametersSetAssetName(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 24);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  uint64_t v4 = a2[4];
  a2[4] = 0;
  ++*((_DWORD *)a2 + 6);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 8 * v3;
    uint64_t v7 = v4;
    do
    {
      v7 += 8;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 + 8) + 16))();
      v6 -= 8;
    }
    while (v6);
  }
  if (v2 && v4)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return v8(v2, v4);
  }
  return result;
}

void *re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7342C0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E7342C0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REAssetManagerRegisterAssetUnloadCompleteCallback::$_0,void ()(re::DynamicArray<unsigned long long>)>::size()
{
  return 16;
}

void REAssetDeduplicationOperationImpl::~REAssetDeduplicationOperationImpl(REAssetDeduplicationOperationImpl *this)
{
  *(void *)this = &unk_26E734328;
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734328;
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::make::shared::object<re::Shareable<re::AssetPathMapping>>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 72, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E734480;
  double result = 0.0;
  *(_OWORD *)(v4 + + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v4 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFF;
  *a2 = v4;
  return result;
}

void *re::Shareable<re::AssetPathMapping>::~Shareable(void *a1)
{
  *a1 = &unk_26E734480;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::AssetPathMapping>::~Shareable(void *a1)
{
  *a1 = &unk_26E734480;
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_26E734370;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734370;
  double result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<REAssetManagerAddCleanupCallback::$_0,std::allocator<REAssetManagerAddCleanupCallback::$_0>,void ()(void)>::target_type()
{
}

void re::make::shared::object<re::Shareable<AssetRegistrationOptions>>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 32, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E7343F0;
  *(unsigned char *)(v4 + 24) = 0;
  *a2 = v4;
}

void *re::Shareable<AssetRegistrationOptions>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<AssetRegistrationOptions>::~Shareable(void *a1)
{
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>@<X0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 168, 8);
  uint64_t result = re::Shareable<re::AssetLoadDescriptor>::Shareable<>(v4);
  *a2 = result;
  return result;
}

uint64_t re::Shareable<re::AssetLoadDescriptor>::Shareable<>(uint64_t a1)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6C91E0;
  *(_OWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 24), 0);
  *(void *)(a1 + + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
  re::DynamicString::setCapacity((void *)(a1 + 136), 0);
  return a1;
}

void re::MemoryAssetParameters::~MemoryAssetParameters(re::MemoryAssetParameters *this)
{
  *(void *)this = &unk_26E734438;
  re::DynamicString::deinit((re::MemoryAssetParameters *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734438;
  re::DynamicString::deinit((re::MemoryAssetParameters *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *RESkeletalPoseComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RESkeletalPoseComponentSetSkeletalPoseDefinition(void *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v9);
  long long v3 = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 2) = v9;
  long long v9 = v3;
  uint64_t v4 = a1[6];
  a1[6] = v10;
  uint64_t v10 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  uint64_t v5 = a1[5];
  if (v5)
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 704));
    if (v6 == 2)
    {
      uint64_t v7 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 4));
    }
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RESkeletalPoseComponentGetSkeletalPoseAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RESkeletalPoseComponentGetSkeletalPoseDefinition(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void RESkeletalPoseComponentEnsureSkeletalPosesInitialized(uint64_t *a1)
{
  uint64_t v2 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 4));
  if (v2) {
    long long v3 = v2;
  }
  else {
    long long v3 = (_anonymous_namespace_ *)(a1 + 19);
  }
  if (*((void *)v3 + 15)
    || (uint64_t v4 = a1[2]) != 0
    && (uint64_t v5 = *(const re::ecs2::MeshComponent **)(v4 + 176)) != 0
    && (uint64_t v6 = *((void *)v5 + 5)) != 0
    && (unsigned int v7 = atomic_load((unsigned int *)(v6 + 704)), v7 == 2)
    && (unint64_t v8 = 0,
        uint64_t v2 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset((re::ecs2::SkeletalPoseComponent *)a1, v5, &v8), (v3 = v2) != 0))
  {
    if ((_anonymous_namespace_ *)a1[18] != v3)
    {
      a1[18] = (uint64_t)v3;
    }
  }
}

uint64_t re::AssetHandle::asset<re::SkeletalPoseDefinitionAsset>(re::SkeletalPoseDefinitionAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::SkeletalPoseDefinitionAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      unsigned int v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        unint64_t v8 = (char *)v7[18];
      }
      else {
        unint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

uint64_t RESkeletalPoseComponentGetSkeletonCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t RESkeletalPoseComponentGetPoseName(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 88) + 88 * a2 + 8);
}

void RESkeletalPoseComponentSetPoseName(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  uint64_t v13 = "";
  unint64_t v6 = *((void *)a1 + 9);
  if (v6 <= a2)
  {
    uint64_t v14 = 0;
    memset(v23, 0, sizeof(v23));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    CFIndex v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    unint64_t v20 = a2;
    __int16 v21 = 2048;
    unint64_t v22 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v7 = (void *)(*((void *)a1 + 11) + 88 * a2);
  uint64_t v8 = v12;
  int v9 = v13;
  uint64_t v10 = v7[1];
  unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFFELL | *v7 & 1;
  uint64_t v12 = 0;
  uint64_t v13 = "";
  v7[1] = v9;
  *(void *)&v23[0] = v11;
  *((void *)&v23[0] + 1) = v10;
  *unsigned int v7 = v8;
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v12);
}

uint64_t RESkeletalPoseComponentGetJointCount(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 88) + 88 * a2 + 24);
}

uint64_t RESkeletalPoseComponentGetJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 88 * a2 + 80);
  if (*(void *)(v3 + 192) <= a3) {
    goto LABEL_5;
  }
  return *(void *)(*(void *)(v3 + 200) + 16 * a3 + 8);
}

__n128 RESkeletalPoseComponentGetJointTransform(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = re::ecs2::SkeletalPoseComponent::skeletalPose(a1, a2, 1);
  if (*(void *)(v4 + 24) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(v4 + 32) + 48 * a3);
}

void *RESkeletalPoseComponentGetJointTransforms(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, void *a3)
{
  unint64_t v4 = re::ecs2::SkeletalPoseComponent::skeletalPose(a1, a2, 1);
  uint64_t v5 = *(const void **)(v4 + 32);
  size_t v6 = 48 * *(void *)(v4 + 24);
  return memcpy(a3, v5, v6);
}

uint64_t RESkeletalPoseComponentSetJointTransform(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (*(void *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(a1 + 88);
  if (*(void *)(v6 + 88 * a2 + 24) <= a3) {
    goto LABEL_7;
  }
  unsigned int v7 = (__n128 *)(*(void *)(v6 + 88 * a2 + 32) + 48 * a3);
  *unsigned int v7 = a4;
  v7[1] = a5;
  v7[2] = a6;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetJointTransforms(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 72) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 88) + 88 * a2;
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)&v7[0] = a3;
  *((void *)&v7[0] + 1) = v5;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)(v4 + 16), (uint64_t)v7);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetJointRotations(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 72) <= a2) {
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 88 * a2 + 24);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 16;
    while (*(void *)(a1 + 72) > a2)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (*(void *)(v6 + 88 * a2 + 24) <= v4) {
        goto LABEL_11;
      }
      *(_OWORD *)(*(void *)(v6 + 88 * a2 + 32) + v5) = *(_OWORD *)(a3 + v5);
      ++v4;
      v5 += 48;
      if (v3 == v4) {
        goto LABEL_7;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentGetModelSpaceSkeletonCount(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t RESkeletalPoseComponentGetModelSpacePoseName(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 32));
  uint64_t v5 = a1 + 152;
  if (v4) {
    uint64_t v5 = v4;
  }
  if (*(void *)(v5 + 96) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(v5 + 112) + 16 * a2 + 8);
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointCount(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 128) + 40 * a2 + 16);
}

uint64_t RESkeletalPoseComponentGetModelSpaceJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(a1 + 32));
  uint64_t v7 = a1 + 152;
  if (v6) {
    uint64_t v7 = v6;
  }
  if (*(void *)(v7 + 176) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *(void *)(v7 + 192);
  if (*(void *)(v8 + 24 * a2 + 8) <= a3) {
    goto LABEL_7;
  }
  return *(void *)(*(void *)(v8 + 24 * a2 + 16) + 16 * a3 + 8);
}

__n128 RESkeletalPoseComponentGetModelSpaceJointTransform(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  if (*(void *)(v3 + 40 * a2 + 16) <= a3) {
    goto LABEL_5;
  }
  return *(__n128 *)(*(void *)(v3 + 40 * a2 + 32) + (a3 << 6));
}

void *RESkeletalPoseComponentGetModelSpaceJointTransforms(uint64_t a1, unint64_t a2, void *__dst)
{
  if (*(void *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *(void *)(a1 + 128) + 40 * a2;
  uint64_t v4 = *(const void **)(v3 + 32);
  size_t v6 = *(void *)(v3 + 16) << 6;
  return memcpy(__dst, v4, v6);
}

uint64_t RESkeletalPoseComponentSetModelSpaceJointTransform(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  if (*(void *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  if (*(void *)(v7 + 40 * a2 + 16) <= a3) {
    goto LABEL_7;
  }
  uint64_t v8 = (__n128 *)(*(void *)(v7 + 40 * a2 + 32) + (a3 << 6));
  *uint64_t v8 = a4;
  v8[1] = a5;
  void v8[2] = a6;
  uint64_t v8[3] = a7;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RESkeletalPoseComponentSetModelSpaceJointTransforms(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 112) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = (_anonymous_namespace_ *)(*(void *)(a1 + 128) + 40 * a2);
  uint64_t v5 = *((void *)v4 + 2);
  *(void *)&v7[0] = a3;
  *((void *)&v7[0] + 1) = v5;
  re::DynamicArray<re::Matrix4x4<float>>::operator=(v4, (uint64_t)v7);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

BOOL RESkeletalPoseComponentCanAccessPostUpdatePoses(uint64_t a1)
{
  return *(unsigned char *)(a1 + 3816) != 0;
}

uint64_t RESkeletalPoseComponentPostUpdatePoseCount(re::ecs2::SkeletalPoseComponent *a1, uint64_t a2)
{
  if (re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2)) {
    return *((void *)a1 + 491);
  }
  else {
    return 0;
  }
}

uint64_t RESkeletalPoseComponentPostUpdatePoseJointCount(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2)
{
  if (*((void *)a1 + 491) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*((void *)a1 + 493) + 88 * a2 + 24);
  }
}

uint64_t RESkeletalPoseComponentGetPostUpdatePoseJoints(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2)
{
  if (*((void *)a1 + 491) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*((void *)a1 + 493) + 88 * a2 + 32);
  }
}

void RESkeletalPoseComponentSetPostUpdatePoseJoints(re::ecs2::SkeletalPoseComponent *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, a2);
  unint64_t v6 = *((void *)a1 + 491);
  if (v6 >= a2)
  {
    if (v6 <= a2)
    {
      *(void *)CFIndex v16 = 0;
      memset(v14, 0, sizeof(v14));
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v23[0]) = 136315906;
      *(void *)((char *)v23 + 4) = "operator[]";
      WORD2(v23[1]) = 1024;
      *(_DWORD *)((char *)&v23[1] + 6) = 797;
      WORD1(v23[2]) = 2048;
      *(void *)((char *)&v23[2] + 4) = a2;
      WORD2(v23[3]) = 2048;
      *(void *)((char *)&v23[3] + 6) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
    uint64_t v8 = *((void *)a1 + 493) + 88 * a2;
    re::StringID::StringID((re::StringID *)buf, (const StringID *)v8);
    re::FixedArray<re::GenericSRT<float>>::FixedArray(v14, v8 + 16);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v14[1] + 8, (uint64_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 80);
    uint64_t v15 = v9;
    if (v9) {
      id v10 = (id)(v9 + 8);
    }
    v23[0] = a3;
    v23[1] = *((void *)&v14[0] + 1);
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)v14, (uint64_t)v23);
    if (re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(a1, v11) && *((void *)a1 + 491) > a2)
    {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)a1 + 3824, a2);
      a3 = *((void *)a1 + 491);
      if (a3 <= a2)
      {
LABEL_16:
        long long v24 = 0u;
        long long v25 = 0u;
        memset(v23, 0, sizeof(v23));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFIndex v16 = 136315906;
        *(void *)&_OWORD v16[4] = "operator[]";
        __int16 v17 = 1024;
        int v18 = 789;
        __int16 v19 = 2048;
        unint64_t v20 = a2;
        __int16 v21 = 2048;
        unint64_t v22 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v12 = (void *)(*((void *)a1 + 493) + 88 * a2);
      re::StringID::operator=(v12, (uint64_t *)buf);
      re::FixedArray<re::GenericSRT<float>>::operator=(v12 + 2, (uint64_t)v14);
      re::DynamicArray<BOOL>::operator=((uint64_t)(v12 + 5), (uint64_t *)&v14[1] + 1);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v12 + 10, v15);
    }
    re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)buf);
    return;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Invalid post update pose index for skeletal pose component.", buf, 2u);
  }
}

uint64_t RESkeletalPoseComponentBuildAndExecuteRig(re::ecs2::SkeletalPoseComponent *a1)
{
  uint64_t v1 = (void *)*((void *)a1 + 2);
  if (!v1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v40 = 0;
    uint64_t v26 = "Cannot build and execute rig for unattached skeletal pose component.";
    uint64_t v27 = (uint8_t *)&v40;
    goto LABEL_38;
  }
  uint64_t v3 = *((void *)a1 + 2);
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v39 = 0;
    uint64_t v26 = "Cannot build and execute rig for entity not attached to a scene.";
    uint64_t v27 = (uint8_t *)&v39;
    goto LABEL_38;
  }
  uint64_t v6 = *(void *)(v5 + 56);
  if (!v6)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v38 = 0;
    uint64_t v26 = "Cannot build and execute rig for scene not attached to an ECS service.";
    uint64_t v27 = (uint8_t *)&v38;
    goto LABEL_38;
  }
  uint64_t v7 = (re::ecs2::MeshComponent *)v1[22];
  if (!v7)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v26 = "Cannot build and execute rig for skeletal pose without a corresponding mesh component.";
    uint64_t v27 = buf;
    goto LABEL_38;
  }
  uint64_t v8 = *((void *)v7 + 5);
  if (!v8 || (unsigned int v9 = atomic_load((unsigned int *)(v8 + 704)), v9 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v36 = 0;
    uint64_t v26 = "Cannot build and execute rig for skeletal pose because corresponding mesh asset isn't loaded.";
    uint64_t v27 = (uint8_t *)&v36;
    goto LABEL_38;
  }
  id v10 = (re::ecs2::EntityComponentCollection *)(v1 + 4);
  uint64_t v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v35 = 0;
    uint64_t v26 = "Cannot build and execute rig for skeletal pose without a corresponding rig component.";
    uint64_t v27 = (uint8_t *)&v35;
    goto LABEL_38;
  }
  uint64_t v12 = (re::ecs2::RigComponentHelper *)v11;
  uint64_t v13 = *(void *)(*(void *)(*(void *)(v11 + 16) + 176) + 40);
  if (!v13 || (unsigned int v14 = atomic_load((unsigned int *)(v13 + 704)), v14 != 2))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v25 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    __int16 v34 = 0;
    uint64_t v26 = "Cannot build and execute rig for skeletal pose: assets are not yet loaded.";
    uint64_t v27 = (uint8_t *)&v34;
LABEL_38:
    _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, v26, v27, 2u);
LABEL_39:

    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 200))(v6);
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    CFIndex v16 = (uint64_t *)v15;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    uint64_t v18 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v17);
    if (v18) {
      re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v16, *(re::MeshManager **)(v18 + 32));
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v20 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v19);
  if (v20
    && (unint64_t v22 = (re::ecs2::PhysicsSimulationService *)v20,
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 56))(v20, 1),
        (uint64_t v23 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v22, (const re::ecs2::Entity *)v1)) != 0))
  {
    long long v24 = (re::Allocator *)*((void *)v23 + 7);
  }
  else
  {
    long long v24 = 0;
  }
  int v29 = re::ecs2::RigComponentHelper::areAssetAndDependenciesLoaded(v12, v21);
  uint64_t v30 = (re::Allocator *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v31 = re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v32 = (unint64_t *)re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::ecs2::RigComponent::updateRigRuntimeData((re::Allocator **)v12, v29, v24, v30, (uint64_t)v7, v31, v32);
  uint64_t v33 = (re::ecs2::SkeletalPoseBufferComponent *)re::ecs2::EntityComponentCollection::getOrAdd(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(a1, v7, v12, v33);
  return 1;
}

void *REPSOToolCreateFromMetallib(re *a1, int a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 984, 8);
  bzero(v5, 0x3D8uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  void *v5 = &unk_26E7344C8;
  *(_OWORD *)(v5 + 5) = 0u;
  *(_OWORD *)(v5 + 7) = 0u;
  *(_OWORD *)(v5 + 9) = 0u;
  *(_OWORD *)(v5 + 11) = 0u;
  *(_OWORD *)(v5 + 13) = 0u;
  *((_DWORD *)v5 + 3ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v5 + 3) = 0u;
  *(void *)((char *)v5 + 124) = 0x7FFFFFFFLL;
  v5[17] = 0;
  *((_OWORD *)v5 + 9) = 0u;
  *((_DWORD *)v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v5 + 21) = 0u;
  *(_OWORD *)(v5 + 23) = 0u;
  *(_OWORD *)(v5 + 25) = 0u;
  *(_OWORD *)((char *)v5 + 212) = 0u;
  *(void *)((char *)v5 + 228) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_DWORD *)v5 + 68) = 0;
  *(void *)((char *)v5 + 276) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  *((_DWORD *)v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)((char *)v5 + 324) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 21) = 0u;
  *((_OWORD *)v5 + 22) = 0u;
  *((_DWORD *)v5 + 92) = 0;
  *(void *)((char *)v5 + 372) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 24) = 0u;
  *((_OWORD *)v5 + 25) = 0u;
  *((_DWORD *)v5 + 104) = 0;
  *(void *)((char *)v5 + 42ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((_DWORD *)v5 + 116) = 0;
  *(void *)((char *)v5 + 468) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 3ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((_OWORD *)v5 + 31) = 0u;
  *((_DWORD *)v5 + 128) = 0;
  *(void *)((char *)v5 + 516) = 0x7FFFFFFFLL;
  *((_DWORD *)v5 + 14ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((_OWORD *)v5 + 33) = 0u;
  *((_OWORD *)v5 + 34) = 0u;
  *(void *)((char *)v5 + 564) = 0x7FFFFFFFLL;
  *((_DWORD *)v5 + 152) = 0;
  *((_OWORD *)v5 + 36) = 0u;
  *((_OWORD *)v5 + 37) = 0u;
  *(void *)((char *)v5 + 612) = 0x7FFFFFFFLL;
  *((_OWORD *)v5 + 39) = 0u;
  *((_DWORD *)v5 + 162) = 0;
  v5[80] = 0;
  *((_OWORD *)v5 + 41) = 0u;
  *((_OWORD *)v5 + 42) = 0u;
  *(_OWORD *)((char *)v5 + 684) = 0u;
  *(void *)((char *)v5 + 70ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  v5[91] = 0;
  *((_DWORD *)v5 + 184) = 0;
  *(_OWORD *)(v5 + 89) = 0u;
  *((_DWORD *)v5 + 194) = 0;
  *(_OWORD *)(v5 + 93) = 0u;
  *(_OWORD *)(v5 + 95) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 5ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((_DWORD *)v5 + 214) = 0;
  *(_OWORD *)(v5 + 103) = 0u;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)((char *)v5 + 908) = 0u;
  *((_OWORD *)v5 + 55) = 0u;
  *((_OWORD *)v5 + + 56) = 0u;
  *((_OWORD *)v5 + 54) = 0u;
  *(void *)((char *)v5 + 924) = 0x7FFFFFFFLL;
  v5[117] = 256;
  *((_OWORD *)v5 + 59) = 0u;
  *((_OWORD *)v5 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  re::DynamicString::setCapacity(v5 + 118, 0);
  *((unsigned char *)v5 + 976) = 0;
  *((_DWORD *)v5 + 245) = 0;
  re::PSOToolManager::init((id *)v5 + 3, a1);
  v5[117] = a2;
  if (v5) {
    return v5 + 1;
  }
  else {
    return 0;
  }
}

uint64_t REPSOToolAddSearchPath(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1 - 8;
  if (!a1) {
    uint64_t v2 = 0;
  }
  return re::PSOToolManager::addSearchPath((re::PSOToolManager *)(v2 + 24), a2);
}

uint64_t REPSOToolGenerateWrappingShaderJSONForMaterial(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v5 = a1 - 8;
  if (!a1) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (re::PSOToolManager *)(v5 + 24);
  MaterialDefinitions = (_anonymous_namespace_ *)re::PSOToolManager::readMaterialDefinitions(v5 + 24);
  re::DynamicString::append((re::DynamicString *)&v12, ".rematerialdefinition", 0x15uLL);
  re::DynamicString::append((re::DynamicString *)&v10, ".mtlp-json", 0xAuLL);
  re::PSOToolManager::setCustomMaterialWrappingDefinition(v6, (const re::DynamicString *)&v12);
  re::PSOToolManager::serializeToURL(v6, a3);
  if (v10 && (v11 & 1) != 0) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

void REPSOToolGenerateFrameworkJSON(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  re::PSOToolManager::readMaterialDefinitions(v1 + 24);
  uint64_t v2 = MEMORY[0x263F8C308] + 24;
  uint64_t v3 = MEMORY[0x263F8C308] + 64;
  uint64_t v19 = MEMORY[0x263F8C308] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  v17[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = v4;
  v17[1] = 0;
  uint64_t v5 = (std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24));
  std::ios_base::init(v5, v18);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v17[0] = v2;
  uint64_t v19 = v3;
  MEMORY[0x237DBC6A0](v18);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v17 + *(void *)(v17[0] - 24)), *(_DWORD *)&v18[*(void *)(v17[0] - 24) + 16] | 4);
  }
  uint64_t v6 = v17;
  v7[1] = v7;
  v7[2] = 4;
  _OWORD v7[3] = 0;
  v7[6] = 0;
  void v7[4] = v7;
  _OWORD v7[5] = 0;
  char v8 = 0;
  rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)&v6);
  long long v13 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)unsigned int v9 = 0u;
  uint64_t v14 = 1024;
  int v15 = 0;
  uint64_t v16 = 0;
  operator new();
}

void REPSOTool::~REPSOTool(REPSOTool *this)
{
  *(void *)this = &unk_26E7344C8;
  re::PSOToolManager::~PSOToolManager((REPSOTool *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E7344C8;
  re::PSOToolManager::~PSOToolManager((REPSOTool *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::PSOToolManager::~PSOToolManager(re::PSOToolManager *this)
{
  re::DynamicString::deinit((re::PSOToolManager *)((char *)this + 920));
  v2.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 108);
  uint64_t v3 = *((void *)this + 101);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 105);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 103);
      if (v5)
      {
        uint64_t v6 = 232 * v5;
        uint64_t v7 = v4 + 192;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v7);
          re::DynamicArray<unsigned long>::deinit(v7 - 40);
          re::DynamicString::deinit((re::DynamicString *)(v7 - 80));
          re::DynamicArray<unsigned long>::deinit(v7 - 120);
          v7 += 232;
          v6 -= 232;
        }
        while (v6);
        uint64_t v3 = *((void *)this + 101);
        uint64_t v4 = *((void *)this + 105);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v3 + 40))(v3, v4, v2);
    }
    *((void *)this + 105) = 0;
    *((void *)this + 102) = 0;
    *((void *)this + 103) = 0;
    *((void *)this + 101) = 0;
    ++*((_DWORD *)this + 208);
  }
  uint64_t v8 = *((void *)this + 96);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 100);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 98);
      if (v10)
      {
        uint64_t v11 = 96 * v10;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v9 + 40);
          re::DynamicArray<unsigned long>::deinit(v9);
          v9 += 96;
          v11 -= 96;
        }
        while (v11);
        uint64_t v8 = *((void *)this + 96);
        uint64_t v9 = *((void *)this + 100);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v8 + 40))(v8, v9, v2);
    }
    *((void *)this + 10ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *((void *)this + 97) = 0;
    *((void *)this + 98) = 0;
    *((void *)this + 96) = 0;
    ++*((_DWORD *)this + 198);
  }
  uint64_t v12 = *((void *)this + 91);
  if (v12)
  {
    long long v13 = (uint64_t *)*((void *)this + 95);
    if (v13)
    {
      uint64_t v14 = *((void *)this + 93);
      if (v14)
      {
        uint64_t v15 = 176 * v14;
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)(v13 + 17));
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v13 + 10);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v13 + 4);
          v2.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)v13);
          v13 += 22;
          v15 -= 176;
        }
        while (v15);
        uint64_t v12 = *((void *)this + 91);
        long long v13 = (uint64_t *)*((void *)this + 95);
      }
      (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v12 + 40))(v12, v13, v2);
    }
    *((void *)this + 95) = 0;
    *((void *)this + 92) = 0;
    *((void *)this + 93) = 0;
    *((void *)this + 91) = 0;
    ++*((_DWORD *)this + 188);
  }
  uint64_t v16 = *((void *)this + 86);
  if (v16)
  {
    uint64_t v17 = (uint64_t *)*((void *)this + 90);
    if (v17)
    {
      uint64_t v18 = *((void *)this + 88);
      if (v18)
      {
        uint64_t v19 = 136 * v18;
        do
        {
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v17 + 10);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v17 + 4);
          v2.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)v17);
          v17 += 17;
          v19 -= 136;
        }
        while (v19);
        uint64_t v16 = *((void *)this + 86);
        uint64_t v17 = (uint64_t *)*((void *)this + 90);
      }
      (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v16 + 40))(v16, v17, v2);
    }
    *((void *)this + 9ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *((void *)this + 87) = 0;
    *((void *)this + 88) = 0;
    *((void *)this + 86) = 0;
    ++*((_DWORD *)this + 178);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 80);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 600);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 69);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 63);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 57);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 51);
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 45);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 39);
  re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 33);
  re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 21);

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 112);
  re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)this);
}

uint64_t rapidjson::BasicIStreamWrapper<std::istream>::Read(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 40);
  if (v2 >= *(void *)(result + 32))
  {
    if (!*(unsigned char *)(result + 64))
    {
      uint64_t v3 = *(void *)(result + 56) + *(void *)(result + 48);
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      *(void *)(result + 48) = v5;
      *(void *)(result + + 56) = v3;
      *(void *)(result + 32) = v4 + v5 - 1;
      *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = v4;
      uint64_t result = std::istream::read();
      if ((*(unsigned char *)(result + *(void *)(*(void *)result - 24) + 32) & 5) != 0)
      {
        uint64_t v6 = *(void *)(*(void *)v1 + 8);
        *(void *)(v1 + 48) = v6;
        uint64_t v7 = (unsigned char *)(*(void *)(v1 + 16) + v6);
        *(void *)(v1 + 32) = v7;
        *uint64_t v7 = 0;
        *(unsigned char *)(v1 + 64) = 1;
      }
    }
  }
  else
  {
    *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = v2 + 1;
  }
  return result;
}

char *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(char *result, void *a2, char *a3)
{
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = (unsigned __int8 *)a2[5];
  int v7 = (char)*v6;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        uint64_t v8 = (unsigned char *)a2[5];
        if (*v8 == 114)
        {
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          uint64_t v8 = (unsigned char *)a2[5];
          if (*v8 == 117)
          {
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            uint64_t v8 = (unsigned char *)a2[5];
            if (*v8 == 101)
            {
              uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              uint64_t v9 = *((void *)a3 + 8);
              if (*((void *)a3 + 9) - v9 <= 23)
              {
                uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v9 = *((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v9 + 24;
              *(void *)(v9 + 8) = 0;
              *(void *)(v9 + 16) = 0;
              *(void *)uint64_t v9 = 0;
              __int16 v10 = 10;
              goto LABEL_142;
            }
          }
        }
      }
      else
      {
        if (v7 != 110) {
          goto LABEL_46;
        }
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        uint64_t v8 = (unsigned char *)a2[5];
        if (*v8 == 117)
        {
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          uint64_t v8 = (unsigned char *)a2[5];
          if (*v8 == 108)
          {
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            uint64_t v8 = (unsigned char *)a2[5];
            if (*v8 == 108)
            {
              uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              uint64_t v11 = (void *)*((void *)a3 + 8);
              if ((uint64_t)(*((void *)a3 + 9) - (void)v11) <= 23)
              {
                uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v11 = (void *)*((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v11 + 3;
              void *v11 = 0;
              v11[1] = 0;
              v11[2] = 0;
              return result;
            }
          }
        }
      }
LABEL_145:
      int v50 = &v8[a2[7] - a2[2]];
      int v51 = 3;
LABEL_146:
      *(_DWORD *)(v5 + 48) = v51;
      *(void *)(v5 + + 56) = v50;
      return result;
    }
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    uint64_t v15 = *((void *)a3 + 8);
    if (*((void *)a3 + 9) - v15 <= 23)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
      uint64_t v15 = *((void *)a3 + 8);
    }
    *((void *)a3 + 8) = v15 + 24;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 0;
    *(_WORD *)(v15 + 22) = 3;
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)a2[5];
      unsigned int v17 = *v16;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0) {
        break;
      }
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    }
    if (*(_DWORD *)(v5 + 48)) {
      return result;
    }
    if (v17 != 125)
    {
      if (v17 != 34)
      {
LABEL_200:
        int v50 = &v16[a2[7] - a2[2]];
        int v51 = 4;
        goto LABEL_146;
      }
      unsigned int v60 = 0;
      while (1)
      {
        uint64_t result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        while (1)
        {
          unint64_t v61 = (unsigned __int8 *)a2[5];
          unsigned int v62 = *v61;
          if (v62 > 0x20 || ((1 << v62) & 0x100002600) == 0) {
            break;
          }
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        }
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        if (v62 != 58)
        {
          int v50 = &v61[a2[7] - a2[2]];
          int v51 = 5;
          goto LABEL_146;
        }
        do
        {
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          unsigned int v64 = *(unsigned __int8 *)a2[5];
          BOOL v57 = v64 > 0x20;
          uint64_t v65 = (1 << v64) & 0x100002600;
        }
        while (!v57 && v65 != 0);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        uint64_t result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        while (1)
        {
          unsigned int v67 = (unsigned __int8 *)a2[5];
          unsigned int v68 = *v67;
          if (v68 > 0x20 || ((1 << v68) & 0x100002600) == 0) {
            break;
          }
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        }
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        unsigned int v68 = (char)v68;
        ++v60;
        if ((char)v68 != 44)
        {
          if (v68 != 125)
          {
            int v50 = &v67[a2[7] - a2[2]];
            int v51 = 6;
            goto LABEL_146;
          }
          rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          return (char *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v60);
        }
        do
        {
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          uint64_t v16 = (unsigned __int8 *)a2[5];
          unsigned int v70 = *v16;
        }
        while (v70 <= 0x20 && ((1 << v70) & 0x100002600) != 0);
        if (*(_DWORD *)(v5 + 48)) {
          return result;
        }
        if (v70 != 34) {
          goto LABEL_200;
        }
      }
    }
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    uint64_t v30 = *((void *)a3 + 8);
    __int16 v31 = 3;
LABEL_65:
    *(_WORD *)(v30 - 2) = v31;
    *(void *)(v30 - 24) = 0;
    *(void *)(v30 - 16) = 0;
    return result;
  }
  switch(v7)
  {
    case '""':
      return (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)result, a2, a3);
    case '[':
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      uint64_t v12 = *((void *)a3 + 8);
      if (*((void *)a3 + 9) - v12 <= 23)
      {
        uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
        uint64_t v12 = *((void *)a3 + 8);
      }
      *((void *)a3 + 8) = v12 + 24;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      *(_WORD *)(v12 + 22) = 4;
      while (1)
      {
        unsigned int v13 = *(unsigned __int8 *)a2[5];
        if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0) {
          break;
        }
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      }
      if (*(_DWORD *)(v5 + 48)) {
        return result;
      }
      if (v13 != 93)
      {
        unsigned int v52 = 0;
        while (1)
        {
          uint64_t result = (char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
          while (1)
          {
            __int16 v53 = (unsigned __int8 *)a2[5];
            unsigned int v54 = *v53;
            if (v54 > 0x20 || ((1 << v54) & 0x100002600) == 0) {
              break;
            }
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          }
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
          ++v52;
          if (v54 != 44)
          {
            if (v54 != 93)
            {
              int v50 = &v53[a2[7] - a2[2]];
              int v51 = 7;
              goto LABEL_146;
            }
            rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            return (char *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v52);
          }
          do
          {
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            unsigned int v56 = *(unsigned __int8 *)a2[5];
            BOOL v57 = v56 > 0x20;
            uint64_t v58 = (1 << v56) & 0x100002600;
          }
          while (!v57 && v58 != 0);
          if (*(_DWORD *)(v5 + 48)) {
            return result;
          }
        }
      }
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      uint64_t v30 = *((void *)a3 + 8);
      __int16 v31 = 4;
      goto LABEL_65;
    case 'f':
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      uint64_t v8 = (unsigned char *)a2[5];
      if (*v8 == 97)
      {
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        uint64_t v8 = (unsigned char *)a2[5];
        if (*v8 == 108)
        {
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          uint64_t v8 = (unsigned char *)a2[5];
          if (*v8 == 115)
          {
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            uint64_t v8 = (unsigned char *)a2[5];
            if (*v8 == 101)
            {
              uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
              uint64_t v9 = *((void *)a3 + 8);
              if (*((void *)a3 + 9) - v9 <= 23)
              {
                uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
                uint64_t v9 = *((void *)a3 + 8);
              }
              *((void *)a3 + 8) = v9 + 24;
              *(void *)(v9 + 8) = 0;
              *(void *)(v9 + 16) = 0;
              *(void *)uint64_t v9 = 0;
              __int16 v10 = 9;
LABEL_142:
              *(_WORD *)(v9 + 22) = v10;
              return result;
            }
          }
        }
      }
      goto LABEL_145;
  }
LABEL_46:
  int v19 = *v6;
  uint64_t v20 = a2[7];
  uint64_t v21 = a2[2];
  if (v19 == 45)
  {
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    unint64_t v22 = (unsigned __int8 *)a2[5];
    int v23 = *v22;
  }
  else
  {
    int v23 = *v6;
    unint64_t v22 = (unsigned __int8 *)a2[5];
  }
  unsigned int v24 = v23 - 48;
  uint64_t v73 = v21;
  uint64_t v74 = v5;
  int v72 = v19;
  if (v23 == 48)
  {
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    int v33 = 0;
    int v28 = 0;
    unint64_t v32 = 0;
    int v75 = 0;
    unsigned int v25 = *(unsigned __int8 *)a2[5];
    double v27 = 0.0;
    goto LABEL_90;
  }
  if ((v23 - 49) > 8)
  {
    __int16 v36 = &v22[a2[7] - a2[2]];
    int v45 = 3;
    goto LABEL_135;
  }
  uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  unsigned int v25 = *(unsigned __int8 *)a2[5];
  unsigned int v26 = v25 - 48;
  double v27 = 0.0;
  if (v19 != 45)
  {
    if (v26 <= 9)
    {
      int v28 = 0;
      unsigned int v29 = 429496729;
      while (1)
      {
        if (v24 > 0x19999998)
        {
          if (v24 != 429496729)
          {
LABEL_144:
            unsigned int v29 = v24;
            goto LABEL_73;
          }
          if (v25 > 0x35) {
            goto LABEL_73;
          }
        }
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        unsigned int v24 = v25 + 10 * v24 - 48;
        ++v28;
        unsigned int v25 = *(unsigned __int8 *)a2[5];
        if (v25 - 48 >= 0xA)
        {
LABEL_80:
          int v33 = 0;
          unint64_t v32 = 0;
          int v75 = 0;
          goto LABEL_90;
        }
      }
    }
    goto LABEL_148;
  }
  if (v26 > 9)
  {
LABEL_148:
    int v33 = 0;
    int v28 = 0;
    unint64_t v32 = 0;
    int v75 = 0;
    goto LABEL_90;
  }
  int v28 = 0;
  unsigned int v29 = 214748364;
  while (1)
  {
    if (v24 > 0xCCCCCCB)
    {
      if (v24 != 214748364) {
        goto LABEL_144;
      }
      if (v25 > 0x38) {
        break;
      }
    }
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    unsigned int v24 = v25 + 10 * v24 - 48;
    ++v28;
    unsigned int v25 = *(unsigned __int8 *)a2[5];
    if (v25 - 48 >= 0xA) {
      goto LABEL_80;
    }
  }
  unsigned int v25 = 57;
LABEL_73:
  unint64_t v32 = v29;
  if (v19 == 45)
  {
    while (v32 <= 0xCCCCCCCCCCCCCCBLL || v25 <= 0x38 && v32 == 0xCCCCCCCCCCCCCCCLL)
    {
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      ++v28;
      unsigned int v25 = *(unsigned __int8 *)a2[5];
      if (v25 - 48 >= 0xA) {
        goto LABEL_89;
      }
    }
  }
  else
  {
    while (v32 <= 0x1999999999999998 || v25 <= 0x35 && v32 == 0x1999999999999999)
    {
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      ++v28;
      unsigned int v25 = *(unsigned __int8 *)a2[5];
      if (v25 - 48 >= 0xA)
      {
LABEL_89:
        int v33 = 0;
        double v27 = 0.0;
        int v75 = 1;
        unsigned int v24 = v29;
        goto LABEL_90;
      }
    }
  }
  double v27 = (double)v32;
  do
  {
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    double v27 = (double)(int)(v25 - 48) + v27 * 10.0;
    unsigned int v25 = *(unsigned __int8 *)a2[5];
  }
  while (v25 - 48 < 0xA);
  int v33 = 1;
  unsigned int v24 = v29;
  int v75 = 1;
LABEL_90:
  if (v25 == 46)
  {
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    __int16 v34 = (unsigned __int8 *)a2[5];
    unsigned int v25 = *v34;
    if (v25 - 48 >= 0xA)
    {
      __int16 v36 = &v34[a2[7] - a2[2]];
      int v45 = 14;
      goto LABEL_122;
    }
    int v35 = 0;
    if (v33) {
      goto LABEL_237;
    }
    if (!v75) {
      unint64_t v32 = v24;
    }
    do
    {
      if (v25 > 0x39 || v32 >> 53) {
        break;
      }
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      unint64_t v32 = v25 - 48 + 10 * v32;
      --v35;
      if (v32) {
        ++v28;
      }
      unsigned int v25 = *(unsigned __int8 *)a2[5];
    }
    while (*(char *)a2[5] > 47);
    double v27 = (double)v32;
    if (v25 - 48 <= 9)
    {
LABEL_237:
      do
      {
        uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        if (v28 <= 16)
        {
          double v27 = (double)(int)(v25 - 48) + v27 * 10.0;
          --v35;
          if (v27 > 0.0) {
            ++v28;
          }
        }
        unsigned int v25 = *(unsigned __int8 *)a2[5];
      }
      while (v25 - 48 < 0xA);
    }
    int v33 = 1;
  }
  else
  {
    int v35 = 0;
  }
  __int16 v36 = &v6[v20 - v73];
  if (v25 == 101 || v25 == 69)
  {
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    int v37 = 0;
    unint64_t v38 = v24;
    if (v75) {
      unint64_t v38 = v32;
    }
    if (!v33) {
      double v27 = (double)v38;
    }
    __int16 v39 = (unsigned __int8 *)a2[5];
    int v40 = *v39;
    if (v40 != 43)
    {
      if (v40 != 45) {
        goto LABEL_113;
      }
      int v37 = 1;
    }
    uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    __int16 v39 = (unsigned __int8 *)a2[5];
    int v40 = *v39;
LABEL_113:
    int v41 = v40 - 48;
    if ((v40 - 48) <= 9)
    {
      uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      if (v37)
      {
        int v42 = *(unsigned __int8 *)a2[5];
        if ((v42 - 48) <= 9)
        {
          while (1)
          {
            uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            int v41 = v42 + 10 * v41 - 48;
            int v42 = *(unsigned __int8 *)a2[5];
            unsigned int v43 = v42 - 48;
            if (v41 > (v35 + 2147483639) / 10) {
              break;
            }
            if (v43 >= 0xA) {
              goto LABEL_124;
            }
          }
          if (v43 <= 9)
          {
            do
              uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
            while (*(unsigned __int8 *)a2[5] - 48 < 0xA);
          }
        }
      }
      else
      {
        while (1)
        {
          int v44 = *(unsigned __int8 *)a2[5];
          if ((v44 - 48) > 9) {
            break;
          }
          uint64_t result = (char *)rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
          int v41 = v44 + 10 * v41 - 48;
          if (v41 > 308 - v35)
          {
            int v45 = 13;
            goto LABEL_122;
          }
        }
      }
LABEL_124:
      if (v37) {
        int v46 = -v41;
      }
      else {
        int v46 = v41;
      }
LABEL_127:
      int v47 = v46 + v35;
      uint64_t v5 = v74;
      if (v47 > -309)
      {
        if (v47 < 0) {
          double v48 = v27 / rapidjson::internal::Pow10(int)::e[-v47];
        }
        else {
          double v48 = v27 * rapidjson::internal::Pow10(int)::e[v47];
        }
      }
      else
      {
        double v48 = 0.0;
        if (v47 < 0xFFFFFD98) {
          goto LABEL_136;
        }
        double v48 = v27 / 1.0e308 / rapidjson::internal::Pow10(int)::e[-308 - v47];
      }
      if (v48 > 1.79769313e308)
      {
        int v45 = 13;
        goto LABEL_135;
      }
LABEL_136:
      if (v72 == 45) {
        double v49 = -v48;
      }
      else {
        double v49 = v48;
      }
      uint64_t v9 = *((void *)a3 + 8);
      if (*((void *)a3 + 9) - v9 <= 23)
      {
        uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)a3 + 5);
        uint64_t v9 = *((void *)a3 + 8);
      }
      *((void *)a3 + 8) = v9 + 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(double *)uint64_t v9 = v49;
      __int16 v10 = 534;
      goto LABEL_142;
    }
    __int16 v36 = &v39[a2[7] - a2[2]];
    int v45 = 15;
LABEL_122:
    uint64_t v5 = v74;
LABEL_135:
    *(_DWORD *)(v5 + 48) = v45;
    *(void *)(v5 + + 56) = v36;
    return result;
  }
  if (v33)
  {
    int v46 = 0;
    goto LABEL_127;
  }
  if (v75)
  {
    if (v72 == 45)
    {
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v32);
    }
    else
    {
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v32);
    }
  }
  else if (v72 == 45)
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v24);
  }
  else
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v24);
  }
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  *(void *)unsigned int v29 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      int v7 = (unsigned char *)a2[5];
      unsigned int v8 = *v7;
      if (v8 != 92) {
        break;
      }
      uint64_t v11 = a2[7];
      uint64_t v12 = a2[2];
      uint64_t result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      uint64_t v13 = *(unsigned __int8 *)a2[5];
      LOBYTE(v8) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::BasicIStreamWrapper<std::istream>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::BasicIStreamWrapper<std::istream> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v13];
      if ((_BYTE)v8) {
        goto LABEL_5;
      }
      uint64_t v14 = (uint64_t)&v7[v11 - v12];
      if (v13 != 117)
      {
        int v28 = 10;
LABEL_37:
        *(_DWORD *)(a1 + 48) = v28;
        *(void *)(a1 + + 56) = v14;
        return result;
      }
      rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
      uint64_t result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(a1, (uint64_t)a2, v14);
      if (*(_DWORD *)(a1 + 48)) {
        return result;
      }
      unsigned int v15 = result;
      if (result >> 11 == 27)
      {
        if (result >> 10 > 0x36) {
          goto LABEL_38;
        }
        if (*(unsigned char *)a2[5] != 92) {
          goto LABEL_38;
        }
        int v16 = result;
        uint64_t result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        if (*(unsigned char *)a2[5] != 117) {
          goto LABEL_38;
        }
        rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
        uint64_t result = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(a1, (uint64_t)a2, v14);
        if (*(_DWORD *)(a1 + 48)) {
          return result;
        }
        if ((result - 57344) <= 0xFFFFFBFF)
        {
LABEL_38:
          int v28 = 9;
          goto LABEL_37;
        }
        unsigned int v15 = ((result - 56320) | ((v16 << 10) - 56623104)) + 0x10000;
      }
      uint64_t result = (uint64_t)rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v29, v15);
    }
    if (v8 == 34) {
      break;
    }
    if (v8 <= 0x1F)
    {
      unsigned int v24 = &v7[a2[7] - a2[2]];
      if (*v7) {
        int v25 = 12;
      }
      else {
        int v25 = 11;
      }
      *(_DWORD *)(a1 + 48) = v25;
      *(void *)(a1 + + 56) = v24;
      return result;
    }
LABEL_5:
    uint64_t result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
    uint64_t v9 = *(void *)v29;
    __int16 v10 = *(unsigned char **)(*(void *)v29 + 24);
    if ((uint64_t)(*(void *)(*(void *)v29 + 32) - (void)v10) <= 0)
    {
      uint64_t result = (uint64_t)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v29);
      __int16 v10 = *(unsigned char **)(v9 + 24);
    }
    *(void *)(v9 + 24) = v10 + 1;
    unsigned char *v10 = v8;
  }
  uint64_t result = rapidjson::BasicIStreamWrapper<std::istream>::Read((uint64_t)a2);
  uint64_t v17 = *(void *)v29;
  uint64_t v18 = *(unsigned char **)(*(void *)v29 + 24);
  if ((uint64_t)(*(void *)(*(void *)v29 + 32) - (void)v18) <= 0)
  {
    uint64_t result = (uint64_t)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v29);
    uint64_t v18 = *(unsigned char **)(v17 + 24);
  }
  *(void *)(v17 + 24) = v18 + 1;
  *uint64_t v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    size_t v19 = __n;
    uint64_t v20 = (__n + 1);
    uint64_t v21 = *(void *)(v17 + 24);
    *(void *)(v17 + 24) = v21 - v20;
    unint64_t v22 = (void *)a3[8];
    if ((uint64_t)(a3[9] - (void)v22) <= 23)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
      unint64_t v22 = (void *)a3[8];
    }
    a3[8] = v22 + 3;
    uint64_t v23 = a3[3];
    *unint64_t v22 = 0;
    v22[1] = 0;
    _OWORD v22[2] = 0;
    if (v19 > 0x15)
    {
      *((_WORD *)v22 + 11) = 3077;
      *(_DWORD *)unint64_t v22 = v19;
      uint64_t v26 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v23, v20);
      v22[1] = v26;
      unint64_t v22 = (void *)v26;
    }
    else
    {
      *((_WORD *)v22 + 11) = 7173;
      *((unsigned char *)v22 + 21) = 21 - v19;
    }
    if (v21) {
      double v27 = (const void *)(v21 - v20);
    }
    else {
      double v27 = &rapidjson::GenericStringRef<char>::emptyString;
    }
    uint64_t result = (uint64_t)memcpy(v22, v27, v19);
    *((unsigned char *)v22 + v19) = 0;
  }
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  unint64_t v3 = a1[3] - v1 + 24;
  if (v2 <= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::BasicIStreamWrapper<std::istream>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v6) = 0;
  int v7 = 4;
  while (1)
  {
    int v8 = **(char **)(a2 + 40);
    if ((v8 - 48) >= 0xA) {
      break;
    }
    int v9 = -48;
LABEL_8:
    uint64_t v6 = (v8 + 16 * v6 + v9);
    rapidjson::BasicIStreamWrapper<std::istream>::Read(a2);
    if (!--v7) {
      return v6;
    }
  }
  if (**(unsigned __int8 **)(a2 + 40) - 65 < 6)
  {
    int v9 = -55;
    goto LABEL_8;
  }
  if (**(unsigned __int8 **)(a2 + 40) - 97 < 6)
  {
    int v9 = -87;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 48) = 8;
  *(void *)(a1 + + 56) = a3;
  return v6;
}

char *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(char *result, unsigned int a2)
{
  unint64_t v3 = result;
  if (a2 <= 0x7F)
  {
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v5) <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    unsigned char *v5 = a2;
    uint64_t v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    unsigned int v7 = (a2 >> 6) | 0xFFFFFFC0;
    uint64_t v8 = *(void *)result;
    int v9 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v9) <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      int v9 = *(unsigned char **)(v8 + 24);
    }
    *(void *)(v8 + 24) = v9 + 1;
    unsigned char *v9 = v7;
    uint64_t v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    double v27 = *(void **)v3;
    int v28 = (unsigned char *)v27[3];
    if ((uint64_t)(v27[4] - (void)v28) <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v27);
      int v28 = (unsigned char *)v27[3];
    }
    v27[3] = v28 + 1;
    *int v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(unsigned char **)(*(void *)result + 24);
  uint64_t v12 = *(void *)(*(void *)result + 32) - (void)v11;
  if (HIWORD(a2))
  {
    unsigned int v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
      uint64_t v11 = *(unsigned char **)(v10 + 24);
    }
    *(void *)(v10 + 24) = v11 + 1;
    unsigned char *v11 = v20;
    uint64_t v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    unint64_t v22 = *(void **)v3;
    uint64_t v23 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v23) <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
      unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      uint64_t v23 = (unsigned char *)v22[3];
    }
    uint64_t v22[3] = v23 + 1;
    *uint64_t v23 = v21;
    ++*((_DWORD *)v3 + 2);
    unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    uint64_t v25 = *(void *)v3;
    uint64_t v26 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v26) <= 0)
    {
      uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
      unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      uint64_t v26 = *(unsigned char **)(v25 + 24);
    }
    *(void *)(v25 + 24) = v26 + 1;
    *uint64_t v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  unsigned int v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)result);
    uint64_t v11 = *(unsigned char **)(v10 + 24);
  }
  *(void *)(v10 + 24) = v11 + 1;
  unsigned char *v11 = v13;
  uint64_t v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  uint64_t v15 = *(void *)v3;
  int v16 = *(unsigned char **)(*(void *)v3 + 24);
  if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v16) <= 0)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(void **)v3);
    unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    int v16 = *(unsigned char **)(v15 + 24);
  }
  *(void *)(v15 + 24) = v16 + 1;
  *int v16 = v14;
  ++*((_DWORD *)v3 + 2);
  char v17 = a2 & 0x3F | 0x80;
  uint64_t v18 = *(void **)v3;
  size_t v19 = (unsigned char *)v18[3];
  if ((uint64_t)(v18[4] - (void)v19) <= 0)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v18);
    char v17 = a2 & 0x3F | 0x80;
    size_t v19 = (unsigned char *)v18[3];
  }
  void v18[3] = v19 + 1;
  *size_t v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  uint64_t v3 = a1[3] - v1;
  if (v2 <= v3 + 1) {
    size_t v4 = v3 + 1;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (_WORD *)(*(void *)(a1 + 64) - 48 * a2);
  *(void *)(a1 + 64) = v3;
  uint64_t result = *(void **)(a1 + 24);
  *(v3 - 1) = 3;
  if (a2)
  {
    uint64_t v5 = 48 * a2;
    uint64_t v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((void *)v3 - 2) = v6;
    uint64_t result = memcpy(v6, v3, v5);
  }
  else
  {
    *((void *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (_WORD *)(*(void *)(a1 + 64) - 24 * a2);
  *(void *)(a1 + 64) = v3;
  uint64_t result = *(void **)(a1 + 24);
  *(v3 - 1) = 4;
  if (a2)
  {
    uint64_t v5 = 24 * a2;
    uint64_t v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((void *)v3 - 2) = v6;
    uint64_t result = memcpy(v6, v3, v5);
  }
  else
  {
    *((void *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(char *result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  *(_WORD *)(v4 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000) {
      return result;
    }
    __int16 v6 = 182;
    goto LABEL_11;
  }
  if (HIDWORD(a2)) {
    __int16 v5 = 406;
  }
  else {
    __int16 v5 = 470;
  }
  *(_WORD *)(v4 + 22) = v5;
  if (!(a2 >> 31))
  {
    __int16 v6 = v5 | 0x20;
LABEL_11:
    *(_WORD *)(v4 + 22) = v6;
  }
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 278;
  }
  else {
    __int16 v5 = 406;
  }
  *(_WORD *)(v4 + 22) = v5;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v4 + 22) = v5 | 0x40;
    if (!((unint64_t)a2 >> 31)) {
      *(_WORD *)(v4 + 22) = v5 | 0x60;
    }
  }
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(char *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 182;
  }
  else {
    __int16 v5 = 502;
  }
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

char *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(char *result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 8);
  if (*((void *)result + 9) - v4 <= 23)
  {
    uint64_t result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((void *)result + 5);
    uint64_t v4 = *((void *)v3 + 8);
  }
  *((void *)v3 + 8) = v4 + 24;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = a2;
  if (a2 < 0) {
    __int16 v5 = 470;
  }
  else {
    __int16 v5 = 502;
  }
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

uint64_t *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(unsigned int a1, int *a2, unsigned int *a3)
{
  if (a1)
  {
    unsigned int v5 = a1;
    __int16 v6 = &a2[12 * a1];
    uint64_t v7 = 48 * a1;
    uint64_t v8 = a2;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::StringEqual<re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>(a3, v8))
    {
      v8 += 12;
      v7 -= 48;
      if (!v7)
      {
        uint64_t v8 = v6;
        break;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
    uint64_t v8 = a2;
  }
  if (v8 != &a2[12 * v5]) {
    return (uint64_t *)(v8 + 6);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_521, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_521))
    {
      qword_26AFA0178 = 0;
      unk_26AFA0180 = 0;
      qword_26AFA0188 = 0;
      __cxa_guard_release(&_MergedGlobals_521);
    }
  }
  uint64_t result = &qword_26AFA0178;
  qword_26AFA0178 = 0;
  unk_26AFA0180 = 0;
  qword_26AFA0188 = 0;
  return result;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(unsigned int a1, int *a2, char *__s)
{
  uint64_t v8[3] = *MEMORY[0x263EF8340];
  v8[1] = __s;
  void v8[2] = 0x405000000000000;
  v8[0] = strlen(__s);
  if (a1)
  {
    unsigned int v5 = &a2[12 * a1];
    uint64_t v6 = 48 * a1;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>::StringEqual<re::internal::RapidJSONPoolAllocator<re::internal::RapidJSONAllocator>>((unsigned int *)v8, a2))
    {
      a2 += 12;
      v6 -= 48;
      if (!v6) {
        return v5;
      }
    }
  }
  return a2;
}

void *REMeshSmoothComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REMeshSmoothComponentGetAssignedMeshDeformation(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t REMeshSmoothComponentSetAssignedMeshDeformation(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 112) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  *(void *)(a1 + 48) = 0;
  ++*(_DWORD *)(a1 + 56);
  *(void *)(a1 + 88) = 0;
  ++*(_DWORD *)(a1 + 96);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshSmoothComponentSetIterations(void *a1, unint64_t a2, int a3)
{
  uint64_t result = re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>((uint64_t)(a1 + 4), a1);
  if (result)
  {
    unint64_t v7 = a1[6];
    if (v7)
    {
      if (v7 <= a2)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a1[8] + 4 * a2) = a3;
      return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    }
  }
  return result;
}

uint64_t re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16)) {
    BOOL v2 = *(void *)(a1 + 56) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = a2[15];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a2[2] + 176);
      if (v6)
      {
        uint64_t result = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32));
        if (!result) {
          return result;
        }
        uint64_t v9 = result;
        uint64_t v10 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(a2 + 14));
        *(void *)(a1 + 16) = 0;
        ++*(_DWORD *)(a1 + 24);
        *(void *)(a1 + + 56) = 0;
        ++*(_DWORD *)(a1 + 64);
        if (*(void *)(v10 + 16))
        {
          uint64_t v11 = v10;
          unint64_t v12 = 0;
          uint64_t v13 = v9 + 448;
          do
          {
            re::MeshNameMap::meshInstancePartsForIdentifier(v13, (unsigned __int8 *)(*(void *)(v11 + 32) + 40 * v12), &v16);
            if (v16)
            {
              for (uint64_t i = 0; i != v16; ++i)
              {
                uint64_t v15 = i;
                (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &v15);
                uint64_t v15 = i;
                (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &v15);
                LODWORD(v15) = 10;
                re::DynamicArray<int>::add((void *)a1, &v15);
                LODWORD(v15) = 1056964608;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)(a1 + 40), (float *)&v15);
              }
            }
            re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v17);
            ++v12;
          }
          while (v12 < *(void *)(v11 + 16));
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t REMeshSmoothComponentSetLambda(void *a1, unint64_t a2, float a3)
{
  uint64_t result = re::initializeAttributes<re::ecs2::MeshSmoothAttributes,re::ecs2::MeshSmoothComponent>((uint64_t)(a1 + 4), a1);
  if (result)
  {
    unint64_t v7 = a1[11];
    if (v7)
    {
      if (v7 <= a2)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(a1[13] + 4 * a2) = a3;
      return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    }
  }
  return result;
}

void *RERayTracedShadowReceiverComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t addRayTracedShadowReceiverToEntitySubtree(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 176)) {
    uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  if (a2)
  {
    uint64_t v4 = *(void *)(v3 + 328);
    if (v4)
    {
      unsigned int v5 = *(re::ecs2::Entity ***)(v3 + 344);
      uint64_t v6 = 8 * v4;
      do
      {
        unint64_t v7 = *v5++;
        uint64_t result = addRayTracedShadowReceiverToEntitySubtree(v7, 1);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void removeRayTracedShadowReceiverFromEntitySubtree(re::ecs2::Entity *a1, int a2)
{
  re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a2)
  {
    uint64_t v4 = *((void *)a1 + 41);
    if (v4)
    {
      unsigned int v5 = (re::ecs2::Entity **)*((void *)a1 + 43);
      uint64_t v6 = 8 * v4;
      do
      {
        unint64_t v7 = *v5++;
        removeRayTracedShadowReceiverFromEntitySubtree(v7, 1);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

uint64_t RERayTracedShadowReceiverSetVisibleForScene(uint64_t a1, char a2)
{
  uint64_t result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a1 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      unsigned int v5 = *(uint64_t **)(result + 40);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5++;
        *(unsigned char *)(v7 + 25) = a2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t RERayTracedShadowReceiverComponentSetVisible(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t RERayTracedShadowReceiverComponentGetVisible(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

re::ecs2::Component *REComponentCreateHandle(re::ecs2::Component *result)
{
  if (result) {
    return (re::ecs2::Component *)re::ecs2::HandleTable::handleIndexAndGeneration((re::ecs2::HandleTable *)re::ecs2::HandleTable::m_instance, result);
  }
  return result;
}

uint64_t REComponentFromHandle(unint64_t a1, uint64_t a2)
{
  unint64_t Slot = re::ecs2::HandleTable::getSlot((re::ecs2::HandleTable *)re::ecs2::HandleTable::m_instance, a1);
  if (*(void *)(Slot + 8) != a2) {
    return 0;
  }
  unint64_t v4 = Slot;
  re::ecs2::HandleTable::garbageCollectIncremental((void *)re::ecs2::HandleTable::m_instance);
  if (*(void *)(*(void *)v4 + 16)) {
    return *(void *)v4;
  }
  else {
    return 0;
  }
}

uint64_t REFrameBoundsGetOccupancyGrid@<X0>(char *__s1@<X3>, uint64_t a2@<X0>, unint64_t a3@<X4>, _OWORD *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentColor");
  uint64_t v11 = "ImmersiveEnvironmentPortal";
  if (v10)
  {
    uint64_t v10 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentDepth");
    if (v10) {
      uint64_t v11 = "Camera";
    }
  }
  unint64_t v12 = (unint64_t *)re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a2 + 64, (uint64_t)&v20);
  if (v12)
  {
    if (*v12 <= a3)
    {
      re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a3, *v12);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    unsigned int v14 = &v12[10 * a3];
    long long v16 = *((_OWORD *)v14 + 1);
    long long v15 = *((_OWORD *)v14 + 2);
    long long v17 = *((_OWORD *)v14 + 4);
    a4[2] = *((_OWORD *)v14 + 3);
    a4[3] = v17;
    *a4 = v16;
    a4[1] = v15;
    *(void *)&long long v15 = v14[10];
    *(void *)&long long v18 = v15;
    *((void *)&v18 + 1) = DWORD1(v15);
    *(_OWORD *)a5 = v18;
    *(void *)(a5 + 16) = 0x3F80000000000000;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  uint64_t result = v20;
  if (v20)
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v20 + 40))();
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 224 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 224 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 224 * v5 + 48;
}

uint64_t REFrameBoundsGetOccupancyGridCount(uint64_t a1, int a2, int a3, char *__s1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentColor");
  uint64_t v7 = "ImmersiveEnvironmentPortal";
  if (v6)
  {
    uint64_t v6 = (_anonymous_namespace_ *)strcmp(__s1, "EnvironmentDepth");
    if (v6) {
      uint64_t v7 = "Camera";
    }
  }
  char v8 = (uint64_t *)re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 64, (uint64_t)&v13);
  if (v8)
  {
    uint64_t v9 = *v8;
  }
  else
  {
    uint64_t v10 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (v14) {
        uint64_t v11 = *(unsigned char **)&v15[7];
      }
      else {
        uint64_t v11 = v15;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v17 = v11;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Attempting to get occupancy count for camera named \"%s\", but could not find any.", buf, 0xCu);
    }
    uint64_t v9 = 0;
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  return v9;
}

void REEntityCharacterSetup(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
}

void setEntityCharacterSkeletalPoseDefinition(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v10 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  uint64_t v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v41 = (id)CoreRELog::log;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      int v42 = "Created entity character does not have a corresponding mesh.";
LABEL_43:
      _os_log_impl(&dword_233120000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, 2u);
    }
LABEL_44:

    return;
  }
  uint64_t v12 = *(void *)(v11 + 32);
  REAssetHandleLoadNow(v12);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 936);
    if (v14)
    {
      uint64_t v104 = a1;
      int v105 = a5;
      uint64_t v103 = a2;
      unint64_t v15 = 0;
      unint64_t v16 = -1;
      do
      {
        unint64_t v17 = v16;
        unint64_t v16 = v15;
        if (v17 != -1)
        {
          SkeletonJointCount = REMeshAssetGetSkeletonJointCount(v12, v15);
          if (SkeletonJointCount != REMeshAssetGetSkeletonJointCount(v12, v17))
          {
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v41 = (id)CoreRELog::log;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              int v42 = "Created entity character contains multiple skeletons.";
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          if (SkeletonJointCount)
          {
            unint64_t v19 = 0;
            while (1)
            {
              SkeletonJointName = REMeshAssetGetSkeletonJointName(v12, v17, v19);
              char v21 = REMeshAssetGetSkeletonJointName(v12, v15, v19);
              if (strcmp((const char *)SkeletonJointName, (const char *)v21)) {
                break;
              }
              if (SkeletonJointCount == (re::MeshAsset *)++v19) {
                goto LABEL_13;
              }
            }
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v41 = (id)CoreRELog::log;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              int v42 = "Created entity character contains multiple skeletons.";
              goto LABEL_43;
            }
            goto LABEL_44;
          }
LABEL_13:
          unint64_t v16 = v17;
        }
        ++v15;
      }
      while (v15 != v14);
      if (v16 == -1) {
        return;
      }
      unint64_t v22 = REMeshAssetGetSkeletonJointCount(v12, v16);
      if (v22)
      {
        uint64_t v23 = v22;
        v100 = &v98;
        MEMORY[0x270FA5388](v22);
        uint64_t v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v24 >= 0x200) {
          size_t v26 = 512;
        }
        else {
          size_t v26 = v24;
        }
        bzero((char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
        for (unint64_t i = 0; (re::MeshAsset *)i != v23; ++i)
        {
          int v28 = REMeshAssetGetSkeletonJointName(v12, v16, i);
          *(void *)&v25[8 * i] = v28;
        }
        if (a3 == 0 || a4 == 0) {
          a4 = v25;
        }
        MEMORY[0x270FA5388](v28);
        unint64_t v32 = (unint64_t *)((char *)&v98 - v31);
        uint64_t v102 = v30;
        v101 = v32;
        if (v33)
        {
          uint64_t v34 = 0;
          v99 = a4;
          while (2)
          {
            *(void *)&long long v106 = v34;
            *(void *)&long long v109 = *(void *)&a4[8 * v34];
            size_t v35 = strlen((const char *)v109);
            unint64_t v36 = 0;
            size_t v37 = v35 + 1;
            *(void *)&long long v108 = ~v35;
            *(void *)&long long v107 = -(uint64_t)v35;
            while (1)
            {
              unint64_t v38 = *(const char **)&v25[8 * v36];
              size_t v39 = strlen(v38);
              uint64_t v29 = strcmp((const char *)v109, v38);
              if (!v29) {
                break;
              }
              if (v37 < v39 && v38[v39 + (void)v108] == 47)
              {
                uint64_t v29 = strcmp((const char *)v109, &v38[v39 + v107]);
                if (!v29) {
                  break;
                }
              }
              if (v23 == (re::MeshAsset *)++v36)
              {
                if (CoreRELog::onceToken != -1) {
                  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
                }
                int v75 = (id)CoreRELog::log;
                if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315138;
                  *(void *)&uint8_t buf[4] = v109;
                  _os_log_error_impl(&dword_233120000, v75, OS_LOG_TYPE_ERROR, "Created entity character does not contain supplied joint name: %s.", buf, 0xCu);
                }

                return;
              }
            }
            uint64_t v40 = v106;
            v101[(void)v106] = v36;
            uint64_t v34 = v40 + 1;
            a4 = v99;
            if (v34 != a3) {
              continue;
            }
            break;
          }
        }
        else
        {
          unint64_t v43 = 0;
          do
          {
            v32[v43] = v43;
            ++v43;
          }
          while (v30 != v43);
        }
        uint64_t v113 = 0;
        v114 = 0;
        v115 = 0;
        MEMORY[0x270FA5388](v29);
        int v45 = &v98 - 2 * v44;
        v111 = 0;
        uint64_t v110 = 0;
        v112 = 0;
        MEMORY[0x270FA5388](v46);
        double v49 = &v98 - 8 * v48;
        if (v105)
        {
          int v50 = a4;
          if (v48)
          {
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v47[v51];
              double SkeletonBindPoseTransform = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, v52);
              *(double *)&long long v55 = RESRTMatrix(*(float *)&SkeletonBindPoseTransform, v54);
              long long v109 = v55;
              long long v108 = v56;
              long long v107 = v57;
              long long v106 = v58;
              uint64_t v59 = v12;
              unint64_t v60 = v16;
              for (unint64_t j = v52; ; unint64_t j = SkeletonJointParent)
              {
                unint64_t SkeletonJointParent = REMeshAssetGetSkeletonJointParent(v59, v60, j);
                if (SkeletonJointParent == -1) {
                  break;
                }
                double v63 = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, SkeletonJointParent);
                *(double *)v65.i64 = RESRTMatrix(*(float *)&v63, v64);
                uint64_t v69 = 0;
                v116[0] = v109;
                v116[1] = v108;
                v116[2] = v107;
                v116[3] = v106;
                *(_OWORD *)long long buf = 0u;
                long long v118 = 0u;
                long long v119 = 0u;
                long long v120 = 0u;
                do
                {
                  *(float32x4_t *)&buf[v69 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, COERCE_FLOAT(v116[v69])), v66, *(float32x2_t *)&v116[v69], 1), v67, (float32x4_t)v116[v69], 2), v68, (float32x4_t)v116[v69], 3);
                  ++v69;
                }
                while (v69 != 4);
                long long v109 = *(_OWORD *)buf;
                long long v108 = v118;
                long long v107 = v119;
                long long v106 = v120;
                uint64_t v59 = v12;
                unint64_t v60 = v16;
              }
              unsigned int v70 = &v49[8 * v51];
              long long v71 = v108;
              *(_OWORD *)unsigned int v70 = v109;
              *((_OWORD *)v70 + 1) = v71;
              long long v72 = v106;
              *((_OWORD *)v70 + 2) = v107;
              *((_OWORD *)v70 + 3) = v72;
              ++v51;
              uint64_t v48 = v102;
              int v47 = v101;
            }
            while (v51 != v102);
          }
          uint64_t v73 = 0;
          uint64_t v110 = v48;
          v111 = v50;
          v112 = v49;
          uint64_t v74 = 1;
        }
        else
        {
          if (v48)
          {
            __int16 v76 = v45 + 4;
            uint64_t v77 = v102;
            do
            {
              __int16 v78 = v47 + 1;
              double v79 = REMeshAssetGetSkeletonBindPoseTransform(v12, v16, *v47);
              int v47 = v78;
              *((_DWORD *)v76 - 6) = v80;
              *((double *)v76 - 4) = v79;
              *((_OWORD *)v76 - 1) = v81;
              v82 = v76 + 1;
              *__int16 v76 = v83;
              v76 += 6;
              _DWORD *v82 = v84;
              --v77;
            }
            while (v77);
          }
          uint64_t v74 = 0;
          uint64_t v113 = v102;
          v114 = a4;
          uint64_t v73 = 1;
          v115 = v45;
        }
        if (v85) {
          unint64_t v86 = *(void *)(v85 + 416);
        }
        else {
          unint64_t v86 = 0;
        }
        MEMORY[0x270FA5388](v85);
        v88 = (char *)&v98 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v88, v87);
        if (v86)
        {
          unint64_t v89 = 0;
          v90 = v88 + 36;
          do
          {
            *((unsigned char *)v90 - 36) = 2;
            if (v91) {
              uint64_t v92 = *(void *)(v91 + 8);
            }
            else {
              uint64_t v92 = 0;
            }
            *(void *)(v90 - 7) = v92;
            *((unsigned char *)v90 - 4) = v105;
            _DWORD *v90 = 0;
            v90 += 10;
            ++v89;
          }
          while (v86 != v89);
        }
        v93 = (re *)re::ServiceLocator::serviceOrNull<re::AssetService>(v104);
        uint64_t AssetWithDefinitions = RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx(v93, v73, (uint64_t)&v113, v74, (uint64_t)&v110, v86, (uint64_t)v88);
        if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
          dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
        }
        uint64_t v95 = v103;
        char v96 = v105;
        v97 = (void *)re::ecs2::EntityComponentCollection::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        RESkeletalPoseComponentSetSkeletalPoseDefinition(v97, AssetWithDefinitions);
        if (v96) {
          REEntityCharacterSetSkeletalPoseModelSpace(v95, (uint64_t)v112);
        }
        else {
          REEntityCharacterSetSkeletalPoseLocalSpace(v95, (uint64_t)v115);
        }

        return;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v41 = (id)CoreRELog::log;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v42 = "Created entity character does not contain any joints.";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
  }
}

uint64_t REEntityCharacterCreate(re *a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v6 = (AssetService *)re::ServiceLocator::serviceOrNull<re::AssetService>((uint64_t)a1);
  uint64_t v7 = RESceneImportOperationCreateWithURL(a2, a1);
  char v8 = v7;
  if (!*((_DWORD *)v7 + 6))
  {
    *((unsigned char *)v7 + 192) = 1;
    *((_DWORD *)v7 + 78) = 0;
  }
  CFTypeRef cf = 0;
  if ((RESceneImportOperationRun((uint64_t)v7, (CFErrorRef *)&cf) & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v23 = CFURLGetString((CFURLRef)a2);
      CStringPtr = CFStringGetCStringPtr(v23, 0x8000100u);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v30 = (uint64_t)CStringPtr;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Could not load resource: %s.", buf, 0xCu);
    }

    if (cf)
    {
      uint64_t v12 = [(id)cf localizedDescription];
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = [v12 cStringUsingEncoding:1];
        *(_DWORD *)long long buf = 136315138;
        uint64_t v30 = v25;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Resource load error: %s.", buf, 0xCu);
      }

      CFRelease(cf);
    }

    return 0;
  }
  uint64_t v9 = RESceneCreate((_anonymous_namespace_ *)"REEntityCharacterCreateInScene - Temporary Scene");
  if (*((_DWORD *)v8 + 6) == 3 && v8[84]) {
    uint64_t v10 = *((void *)v8[86] + 12);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = (void *)(v10 + 8);
  id v15 = (id)(v10 + 8);

  if ((RESceneLoadFromAsset(v9, v6, v10) & 1) == 0)
  {

    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v18 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    CFStringRef v19 = CFURLGetString((CFURLRef)a2);
    uint64_t v20 = CFStringGetCStringPtr(v19, 0x8000100u);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v30 = (uint64_t)v20;
    char v21 = "Could create scene for resource: %s.";
    goto LABEL_34;
  }
  if (*((void *)v9 + 16) != 1)
  {

    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v18 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    CFStringRef v26 = CFURLGetString((CFURLRef)a2);
    double v27 = CFStringGetCStringPtr(v26, 0x8000100u);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v30 = (uint64_t)v27;
    char v21 = "Could not load a single entity from the resource: %s.";
LABEL_34:
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
LABEL_30:

    return 0;
  }
  uint64_t v16 = **((void **)v9 + 18);
  id v17 = (id)(v16 + 8);
  RESceneRemoveEntity((uint64_t)v9, v16);

  if (v16) {
    setEntityCharacterSkeletalPoseDefinition((uint64_t)a1, v16, *((void *)a3 + 1), *((char **)a3 + 2), *a3);
  }
  return v16;
}

uint64_t REEntityCharacterAddToScene(uint64_t a1, re *a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v5 = REEntityCharacterCreate(a2, a3, a4);
  RESceneAddEntity(a1, v5);

  return v5;
}

uint64_t REEntityCharacterGetJointCount(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v2 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    __int16 v8 = 0;
    uint64_t v5 = "No skeleton found for entity.";
    uint64_t v6 = (uint8_t *)&v8;
    goto LABEL_21;
  }
  if (*(void *)(v2 + 72) == 1)
  {
    return RESkeletalPoseComponentGetJointCount(v2, 0);
  }
  if (*(void *)(v2 + 112) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    __int16 v7 = 0;
    uint64_t v5 = "Cannot get joint count for non-character entity.";
    uint64_t v6 = (uint8_t *)&v7;
LABEL_21:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, v5, v6, 2u);
LABEL_19:

    return 0;
  }
  return RESkeletalPoseComponentGetModelSpaceJointCount(v2, 0);
}

const char *REEntityCharacterGetJointName(uint64_t a1, unint64_t a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v12 = 0;
    __int16 v8 = "No skeleton found for entity.";
    uint64_t v9 = (uint8_t *)&v12;
    goto LABEL_30;
  }
  uint64_t v5 = *(void *)(v4 + 32);
  if (!v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    __int16 v8 = "Skeletal pose has not been defined, not a proper entity character.";
    uint64_t v9 = buf;
    goto LABEL_30;
  }
  if (!REAssetHandleIsLoaded(*(void *)(v4 + 32))) {
    return 0;
  }
  if (RESkeletalPoseDefinitionAssetGetPoseCount(v5) == 1)
  {
    if (RESkeletalPoseDefinitionAssetGetJointCount(v5, 0) > a2)
    {
      return RESkeletalPoseDefinitionAssetGetJointName(v5, 0, a2);
    }
    return 0;
  }
  if (RESkeletalPoseDefinitionAssetGetModelSpacePoseCount(v5) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    __int16 v10 = 0;
    __int16 v8 = "Cannot get joint name for non-character entity.";
    uint64_t v9 = (uint8_t *)&v10;
LABEL_30:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
LABEL_18:

    return 0;
  }
  if (RESkeletalPoseDefinitionAssetGetModelSpaceJointCount(v5, 0) <= a2) {
    return 0;
  }
  return RESkeletalPoseDefinitionAssetGetModelSpaceJointName(v5, 0, a2);
}

uint64_t REEntityCharacterGetSkeletalPoseLocalSpace(uint64_t a1, void *a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = (re::ecs2::SkeletalPoseComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v12 = 0;
    __int16 v8 = "No skeleton found for entity.";
    uint64_t v9 = (uint8_t *)&v12;
    goto LABEL_16;
  }
  if (*((void *)v4 + 9) != 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v11 = 0;
    __int16 v8 = "Cannot set local space transforms for non-character entity.";
    uint64_t v9 = (uint8_t *)&v11;
LABEL_16:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
LABEL_13:

    return 0;
  }
  uint64_t v5 = 1;
  unint64_t v6 = re::ecs2::SkeletalPoseComponent::skeletalPose(v4, 0, 1);
  memcpy(a2, *(const void **)(v6 + 32), 48 * *(void *)(v6 + 24));
  return v5;
}

uint64_t REEntityCharacterGetSkeletalPoseModelSpace(uint64_t a1, void *a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v10 = 0;
    __int16 v7 = "No skeleton found for entity.";
    __int16 v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(void *)(v4 + 112) == 1)
  {
    RESkeletalPoseComponentGetModelSpaceJointTransforms(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = 0;
    __int16 v7 = "Cannot set model space transforms for non-character entity.";
    __int16 v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseLocalSpace(uint64_t a1, uint64_t a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v10 = 0;
    __int16 v7 = "No skeleton found for entity.";
    __int16 v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(void *)(v4 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointTransforms(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = 0;
    __int16 v7 = "Cannot set local space transforms for non-character entity.";
    __int16 v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseLocalRotations(uint64_t a1, uint64_t a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v10 = 0;
    __int16 v7 = "No skeleton found for entity.";
    __int16 v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(void *)(v4 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointRotations(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = 0;
    __int16 v7 = "Cannot set local space transforms for non-character entity.";
    __int16 v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseJointLocalSpace(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v7)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v16 = 0;
    __int16 v10 = "No skeleton found for entity.";
    __int16 v11 = (uint8_t *)&v16;
    goto LABEL_15;
  }
  if (*(void *)(v7 + 72) == 1)
  {
    RESkeletalPoseComponentSetJointTransform(v7, 0, a2, a3, a4, a5);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  __int16 v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    __int16 v10 = "Cannot set local space transforms for non-character entity.";
    __int16 v11 = buf;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseModelSpace(uint64_t a1, uint64_t a2)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v6 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v10 = 0;
    uint64_t v7 = "No skeleton found for entity.";
    __int16 v8 = (uint8_t *)&v10;
    goto LABEL_15;
  }
  if (*(void *)(v4 + 112) == 1)
  {
    RESkeletalPoseComponentSetModelSpaceJointTransforms(v4, 0, a2);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = 0;
    uint64_t v7 = "Cannot set model space transforms for non-character entity.";
    __int16 v8 = (uint8_t *)&v9;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCharacterSetSkeletalPoseJointModelSpace(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v8)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    __int16 v18 = 0;
    __int16 v11 = "No skeleton found for entity.";
    __int16 v12 = (uint8_t *)&v18;
    goto LABEL_15;
  }
  if (*(void *)(v8 + 112) == 1)
  {
    RESkeletalPoseComponentSetModelSpaceJointTransform(v8, 0, a2, a3, a4, a5, a6);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  __int16 v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    __int16 v11 = "Cannot set model space transforms for non-character entity.";
    __int16 v12 = buf;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, v12, 2u);
  }
LABEL_13:

  return 0;
}

uint64_t REEntityCreateRenderFrameWorkloadPatch(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 == 1)
  {
    uint64_t v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13[0]) = 0;
      uint64_t v8 = "Failed to create transform patch. Not yet implemented.";
LABEL_11:
      __int16 v10 = v7;
      uint32_t v11 = 2;
      goto LABEL_12;
    }
    return 0;
  }
  if (a2)
  {
    __int16 v9 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109120;
      v13[1] = a2;
      uint64_t v8 = "Failed to create patch for unexpected patch type '%d'.";
      __int16 v10 = v9;
      uint32_t v11 = 8;
LABEL_12:
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v13, v11);
      return 0;
    }
    return 0;
  }
  uint64_t v3 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v3)
  {
    uint64_t v7 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13[0]) = 0;
      uint64_t v8 = "Failed to create camera patch for entity with no CameraViewDescriptorsComponent.";
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = re::globalAllocators(v3);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 400, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(_DWORD *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 28) = 0;
  *(void *)uint64_t v6 = &unk_26E70EF38;
  *(unsigned char *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 112) = 0;
  *(unsigned char *)(v6 + 192) = 0;
  *(unsigned char *)(v6 + 288) = 0;
  *(unsigned char *)(v6 + 384) = 0;
  objc_storeWeak((id *)v4 + 4, (id)(v6 + 8));
  return v6;
}

uint64_t RERenderFrameWorkloadPatchGetComponentPatch(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = a1;
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  if (re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != a2) {
    return 0;
  }
  return v3;
}

uint64_t RERenderFrameWorkloadPatchEnablePostEncodePatch(uint64_t result)
{
  *(unsigned char *)(result + 28) = 1;
  return result;
}

void RETransformComponentPatchSetWorldMatrix4x4F(__n128 *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1[1].n128_u32[2])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "RETransformComponentPatchSetWorldMatrix4x4F presently only supports camera patches.", v6, 2u);
    }
  }
  else
  {
    if (!a1[2].n128_u8[0]) {
      a1[2].n128_u8[0] = 1;
    }
    a1[3] = a2;
    a1[4] = a3;
    a1[5] = a4;
    a1[6] = a5;
  }
}

void RETransformComponentPatchSetEnvironmentWorldMatrix4x4F(__n128 *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1[1].n128_u32[2])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "RETransformComponentPatchSetEnvironmentWorldMatrix4x4F presently only supports camera patches.", v6, 2u);
    }
  }
  else
  {
    if (!a1[7].n128_u8[0]) {
      a1[7].n128_u8[0] = 1;
    }
    a1[8] = a2;
    a1[9] = a3;
    a1[10] = a4;
    a1[11] = a5;
  }
}

uint64_t RECameraViewDescriptorsComponentPatchSetSkipEnvironmentRender(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 384)) {
    *(unsigned char *)(result + 384) = 1;
  }
  *(unsigned char *)(result + 385) = a2;
  return result;
}

uint64_t RECALayerVisiblityComponentIsReportingHidden()
{
  return 0;
}

void *REDynamicTextComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 *REDynamicTextComponentSetColor(__n128 *result, __n128 a2)
{
  result[6] = a2;
  result[7].n128_u8[0] = 0;
  return result;
}

__n128 *REDynamicTextComponentSetColorGamut4F(__n128 *result, unsigned __int8 a2, __n128 a3)
{
  result[6] = a3;
  result[7].n128_u8[0] = a2;
  return result;
}

double REDynamicTextComponentGetColor(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 96);
  char v4 = v1;
  re::ColorGamut4F::as((uint64_t)&v3, 0, 1, (uint64_t)v5);
  return v5[0];
}

__n128 REDynamicTextComponentGetColorGamut4F(__n128 *a1, __n128 *a2, unsigned __int8 *a3)
{
  __n128 result = a1[6];
  unsigned __int8 v4 = a1[7].n128_u8[0];
  *a2 = result;
  *a3 = v4;
  return result;
}

uint64_t REDynamicTextComponentSetTextAnchor(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

uint64_t REDynamicTextComponentGetTextAnchor(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

double REDynamicTextComponentComputeObjectSpaceSize(re::ecs2::DynamicTextComponent *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 24);
  }
  while (v2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0.0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v4 + 56) + 32))(*(void *)(v4 + 56));
  uint64_t v6 = re::ServiceLocator::service<re::RenderManager>(v5);
  return COERCE_DOUBLE(re::ecs2::DynamicTextComponent::computeObjectSpaceSize(a1, *(re::TextManager **)(v6 + 72)));
}

re::DynamicString *REDynamicTextComponentSetText(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 32);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REDynamicTextComponentGetText(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    return *(void *)(a1 + 48);
  }
  else {
    return a1 + 41;
  }
}

void REDynamicTextComponentSetFont(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

uint64_t REDynamicTextComponentGetFont(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void *REAnchoringComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REAnchoringComponentGetDescriptorType(uint64_t a1)
{
}

uint64_t anonymous namespace'::convert(uint64_t a1)
{
  if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) component must be of type 'Anchoring', got '%s'", "&baseComponent->componentType() == &AnchoringComponent::classComponentType()", "convert", 117, *(void *)(v3 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) component must be of type 'Anchor', got '%s'", "&baseComponent->componentType() == &AnchorComponent::classComponentType()", "convert", 17, *(void *)(v3 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REAnchoringComponentSetDescriptorType(uint64_t a1, int a2)
{
  if (*(_DWORD *)(result + 32) != a2)
  {
    *(_DWORD *)(result + 32) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

__n128 REAnchoringComponentGetDescriptorTransform(uint64_t a1)
{
}

float32x4_t *REAnchoringComponentSetDescriptorTransform(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(result[4], a3), (int8x16_t)vceqq_f32(result[3], a2)), vandq_s8((int8x16_t)vceqq_f32(result[5], a4), (int8x16_t)vceqq_f32(result[6], a5)))) & 0x80000000) == 0)
  {
    result[3] = a2;
    result[4] = a3;
    result[5] = a4;
    result[6] = a5;
    if (result[23].i8[0]) {
      result[23].i8[0] = 0;
    }
    return (float32x4_t *)re::ecs2::Component::enqueueMarkDirty((uint64_t)result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorAnchorIdentifier(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetDescriptorAnchorIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = uuid_compare(a2, v4);
  if (result)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    return re::ecs2::Component::enqueueMarkDirty(a1);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorAlignment(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetDescriptorAlignment(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(result + 128) != a2)
  {
    *(unsigned char *)(result + 128) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorClassification(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetDescriptorClassification(uint64_t a1, uint64_t a2)
{
  if (*(void *)(result + 136) != a2)
  {
    *(void *)(result + 136) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

double REAnchoringComponentGetDescriptorBounds(uint64_t a1)
{
}

float32x2_t *REAnchoringComponentSetDescriptorBounds(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v4 = (uint32x2_t)vceq_f32(result[18], a2);
  if ((vpmin_u32(v4, v4).u32[0] & 0x80000000) == 0)
  {
    result[18] = a2;
    return (float32x2_t *)re::ecs2::Component::enqueueMarkDirty((uint64_t)result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorResourceGroup(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 168)) {
    return *(void *)(v1 + 176);
  }
  else {
    return v1 + 169;
  }
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup(void *a1, const char *a2)
{
  if (!a2)
  {
    if (v4)
    {
      a1[21] = 1;
      uint64_t v7 = (unsigned char *)a1[22];
    }
    else
    {
      *((unsigned char *)a1 + 168) = v4 & 1;
      uint64_t v7 = (char *)a1 + 169;
    }
    *uint64_t v7 = 0;
    goto LABEL_12;
  }
  if (v4) {
    long long v5 = (const char *)a1[22];
  }
  else {
    long long v5 = (char *)a1 + 169;
  }
  uint64_t result = strcmp(a2, v5);
  if (result)
  {
    v8[0] = a2;
    v8[1] = strlen(a2);
    re::DynamicString::operator=((re::DynamicString *)(a1 + 20), (uint64_t)v8);
LABEL_12:
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorResourceName(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 200)) {
    return *(void *)(v1 + 208);
  }
  else {
    return v1 + 201;
  }
}

uint64_t REAnchoringComponentSetDescriptorResourceName(void *a1, const char *a2)
{
  if (!a2)
  {
    if (v4)
    {
      a1[25] = 1;
      uint64_t v7 = (unsigned char *)a1[26];
    }
    else
    {
      *((unsigned char *)a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = v4 & 1;
      uint64_t v7 = (char *)a1 + 201;
    }
    *uint64_t v7 = 0;
    goto LABEL_12;
  }
  if (v4) {
    long long v5 = (const char *)a1[26];
  }
  else {
    long long v5 = (char *)a1 + 201;
  }
  uint64_t result = strcmp(a2, v5);
  if (result)
  {
    v8[0] = a2;
    v8[1] = strlen(a2);
    re::DynamicString::operator=((re::DynamicString *)(a1 + 24), (uint64_t)v8);
LABEL_12:
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t REAnchoringComponentSetDescriptorPhysicsSimulation(uint64_t a1, int a2)
{
  if (*(_DWORD *)(result + 244) != a2)
  {
    *(_DWORD *)(result + 244) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorPhysicsSimulation(uint64_t a1)
{
}

uint64_t REAnchoringComponentGetPreviousWorldTransform(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 272)) {
    return v1 + 288;
  }
  else {
    return 0;
  }
}

uint64_t REAnchoringComponentSetPreviousWorldTransform(uint64_t a1, long long *a2)
{
  if (a2)
  {
    long long v5 = *a2;
    long long v4 = a2[1];
    long long v7 = a2[2];
    long long v6 = a2[3];
    if (!*(unsigned char *)(v3 + 272)) {
      *(unsigned char *)(v3 + 272) = 1;
    }
    *(_OWORD *)(v3 + 288) = v5;
    *(_OWORD *)(v3 + 304) = v4;
    *(_OWORD *)(v3 + 32ArcSharedObject::ArcSharedObject(this, 0) = v7;
    *(_OWORD *)(v3 + 336) = v6;
  }
  else if (*(unsigned char *)(v3 + 272))
  {
    *(unsigned char *)(v3 + 272) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REAnchoringComponentGetIsRequired(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetIsRequired(uint64_t a1, int a2)
{
  {
    *(unsigned char *)(a1 + 352) = a2;
    long long v4 = *(re::ecs2::Entity **)(a1 + 16);
    if (v4) {
      re::ecs2::Entity::setSelfRequiresAnchoring(v4, a2);
    }
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

float REAnchoringComponentGetScaleFactor(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetScaleFactor(uint64_t a1, float a2)
{
  *(float *)(v3 + 3+ 56) = a2;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

id REAnchoringComponentGetTrackingImageMTLTexture(uint64_t a1)
{
  if (AnchoringResourceComponent)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)(AnchoringResourceComponent + 32));
    if (v9)
    {
      unsigned int v2 = atomic_load((unsigned int *)(v9 + 704));
      if (v2 == 2)
      {
        uint64_t v3 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v8);
        if (v3)
        {
          if (*(_DWORD *)(v3 + 240))
          {
            uint64_t v7 = std::__throw_bad_variant_access[abi:nn180100]();
          }
          id v4 = *(id *)(v3 + 160);
          long long v5 = v4;
          if (v4) {

          }
          goto LABEL_11;
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)v8);
      }
    }
    long long v5 = 0;
LABEL_11:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
    goto LABEL_12;
  }
  long long v5 = 0;
LABEL_12:
  return v5;
}

uint64_t anonymous namespace'::getAnchoringResourceComponent(uint64_t a1)
{
  if (v1) {
    return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  else {
    return 0;
  }
}

uint64_t REAnchoringComponentSetTrackingImage(uint64_t a1, uint64_t a2, float a3, float a4)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v11);
  long long v8 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v7 + 32) = v11;
  long long v11 = v8;
  uint64_t v9 = *(void *)(v7 + 48);
  *(void *)(v7 + 48) = v12;
  uint64_t v12 = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  re::AssetHandle::loadAsync((re::AssetHandle *)(v7 + 32));
  *(float *)(v7 + + 56) = a3;
  *(float *)(v7 + 6ArcSharedObject::ArcSharedObject(this, 0) = a4;
  return re::ecs2::Component::enqueueMarkDirty(v7);
}

uint64_t anonymous namespace'::getOrAddAnchoringResourceComponent(uint64_t a1)
{
  if (v1) {
    return re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  else {
    return 0;
  }
}

double REAnchoringComponentGetTrackingImageWidth(uint64_t a1)
{
  if (!AnchoringResourceComponent) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(AnchoringResourceComponent + 56);
  return result;
}

double REAnchoringComponentGetTrackingImageHeight(uint64_t a1)
{
  if (!AnchoringResourceComponent) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(AnchoringResourceComponent + 60);
  return result;
}

uint64_t REAnchoringComponentGetCoordinateSpaceOfDescriptorTransform(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 368)) {
    return v1 + 384;
  }
  else {
    return 0;
  }
}

void REAnchoringComponentSetCoordinateSpaceOfDescriptorTransform(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    long long v4 = a2[1];
    long long v5 = a2[2];
    long long v6 = a2[3];
    v7[0] = *a2;
    v7[1] = v4;
    v7[2] = v5;
    _OWORD v7[3] = v6;
    re::ecs2::AnchoringComponent::setCoordinateSpaceTransformOfDescriptorTransform(v3, (float *)v7);
  }
  else if (*(unsigned char *)(v3 + 368))
  {
    *(unsigned char *)(v3 + 368) = 0;
  }
}

double re::ecs2::AnchoringComponent::setCoordinateSpaceTransformOfDescriptorTransform(uint64_t a1, float *a2)
{
  if (!*(unsigned char *)(a1 + 368))
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *((_OWORD *)a2 + 1);
    long long v11 = *((_OWORD *)a2 + 2);
    long long v12 = *((_OWORD *)a2 + 3);
    long long v4 = (_OWORD *)(a1 + 384);
    goto LABEL_6;
  }
  long long v4 = (_OWORD *)(a1 + 384);
  if (!re::areAlmostEqual<float>(a2, (float *)(a1 + 384)))
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *((_OWORD *)a2 + 1);
    long long v11 = *((_OWORD *)a2 + 2);
    long long v12 = *((_OWORD *)a2 + 3);
    if (*(unsigned char *)(a1 + 368))
    {
      long long v5 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      long long v7 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 432) = v7;
      _OWORD *v4 = v5;
      *(_OWORD *)(a1 + 40ArcSharedObject::ArcSharedObject(this, 0) = v6;
      return *(double *)&v5;
    }
LABEL_6:
    *(unsigned char *)(a1 + 368) = 1;
    _OWORD *v4 = v9;
    v4[1] = v10;
    *(void *)&long long v5 = v11;
    void v4[2] = v11;
    _OWORD v4[3] = v12;
  }
  return *(double *)&v5;
}

double REAnchoringComponentUpdateCoordinateSpaceOfDescriptorTransform(float32x4_t *a1, _OWORD *a2)
{
  if (a2)
  {
    long long v5 = a2[1];
    long long v6 = a2[2];
    long long v7 = a2[3];
    v8[0] = *a2;
    v8[1] = v5;
    void v8[2] = v6;
    uint64_t v8[3] = v7;
    re::ecs2::AnchoringComponent::setCoordinateSpaceTransformOfDescriptorTransform((uint64_t)a1, (float *)v8);
    *(void *)&double result = re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform(a1).n128_u64[0];
  }
  return result;
}

__n128 re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform(float32x4_t *this)
{
  if (this[23].i8[0])
  {
    uint64_t v1 = 0;
    float32x4_t v2 = this[24];
    float32x4_t v3 = this[25];
    float32x4_t v4 = this[26];
    float32x4_t v5 = this[27];
    float32x4_t v6 = this[4];
    float32x4_t v7 = this[5];
    float32x4_t v8 = this[6];
    v15[0] = this[3];
    v15[1] = v6;
    uint64_t v15[2] = v7;
    void v15[3] = v8;
    do
    {
      v16[v1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v15[v1])), v3, *(float32x2_t *)&v15[v1], 1), v4, (float32x4_t)v15[v1], 2), v5, (float32x4_t)v15[v1], 3);
      ++v1;
    }
    while (v1 != 4);
    float32x4_t v10 = (float32x4_t)v16[0];
    float32x4_t v9 = (float32x4_t)v16[1];
    float32x4_t v12 = (float32x4_t)v16[2];
    __n128 result = (__n128)v16[3];
    if (!this[28].i8[0]) {
      this[28].i8[0] = 1;
    }
    this[29] = v10;
    this[30] = v9;
    this[31] = v12;
    this[32] = (float32x4_t)result;
  }
  else
  {
    if (!this[28].i8[0]) {
      this[28].i8[0] = 1;
    }
    float32x4_t v13 = this[4];
    this[29] = this[3];
    this[30] = v13;
    __n128 result = (__n128)this[5];
    float32x4_t v14 = this[6];
    this[31] = (float32x4_t)result;
    this[32] = v14;
  }
  return result;
}

__n128 REAnchoringComponentGetWorldTransformOfDescriptorTransform(uint64_t a1)
{
  if (re::ecs2::AnchoringComponent::isDescriptorWorldTransformDirty(v2)) {
    re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform((float32x4_t *)a1);
  }
  return *(__n128 *)(a1 + 464);
}

double REAnchoringComponentGetWorldScaleOfDescriptorTransform(float32x4_t *a1)
{
  if (re::ecs2::AnchoringComponent::isDescriptorWorldTransformDirty(v2)) {
    __n128 v3 = re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform(a1);
  }
  v3.n128_u64[0] = a1[29].u64[0];
  v4.i64[0] = a1[30].i64[0];
  v5.i64[0] = a1[31].i64[0];
  v3.n128_u32[2] = a1[29].u32[2];
  v4.i32[2] = a1[30].i32[2];
  v5.i32[2] = a1[31].i32[2];
  float32x4_t v6 = vmulq_f32((float32x4_t)v3, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL)));
  BOOL v7 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0] <= 0.0;
  float v8 = -1.0;
  if (!v7) {
    float v8 = 1.0;
  }
  float32x4_t v9 = vmulq_f32((float32x4_t)v3, (float32x4_t)v3);
  float32x4_t v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)));
  v10.f32[0] = sqrtf(v10.f32[0]);
  float32x4_t v11 = vmulq_f32(v4, v4);
  float32x4_t v12 = vmulq_f32(v5, v5);
  v10.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v10.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
  *(void *)&double result = vmulq_n_f32(v10, v8).u64[0];
  return result;
}

uint64_t REAnchoringComponentGetMode(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetMode(uint64_t a1, int a2)
{
  if (*(_DWORD *)(result + 256) != a2)
  {
    *(_DWORD *)(result + 2+ 56) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorCachedAnchorIdentifier(uint64_t a1)
{
}

__n128 REAnchoringComponentSetDescriptorCachedAnchorIdentifier(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(v3 + 224) = *a2;
  return result;
}

BOOL REAnchoringComponentGetIsDescriptorWorldTransformDirty(uint64_t a1)
{
  return re::ecs2::AnchoringComponent::isDescriptorWorldTransformDirty(v1);
}

BOOL re::ecs2::AnchoringComponent::isDescriptorWorldTransformDirty(float32x4_t *this)
{
  if (this[28].i8[0])
  {
    if (this[23].i8[0])
    {
      uint64_t v1 = 0;
      float32x4_t v2 = this[24];
      float32x4_t v3 = this[25];
      float32x4_t v4 = this[26];
      float32x4_t v5 = this[27];
      float32x4_t v6 = this[4];
      float32x4_t v7 = this[5];
      float32x4_t v8 = this[6];
      v12[0] = this[3];
      v12[1] = v6;
      void v12[2] = v7;
      v12[3] = v8;
      do
      {
        *(long long *)((char *)&v13 + v1 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v12[v1])), v3, *(float32x2_t *)&v12[v1], 1), v4, (float32x4_t)v12[v1], 2), v5, (float32x4_t)v12[v1], 3);
        ++v1;
      }
      while (v1 != 4);
      f32 = this[29].f32;
      float32x4_t v10 = (float *)&v13;
    }
    else
    {
      float32x4_t v10 = this[3].f32;
      f32 = this[29].f32;
    }
    return !re::areAlmostEqual<float>(f32, v10);
  }
  else
  {
    re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform(this);
    return 1;
  }
}

void REAnchoringComponentInitializeWorldTransformIfNeeded(float32x4_t *a1)
{
  {
    re::ecs2::AnchoringComponent::recalculateCachedWorldTransformOfDescriptorTransform(a1);
    a1[33].i8[0] = 1;
  }
}

uint64_t REAnchoringComponentInvalidateCachedDescriptorTransform(uint64_t a1)
{
  if (*(unsigned char *)(result + 448)) {
    *(unsigned char *)(result + 448) = 0;
  }
  return result;
}

void REAnchoringComponentSetARReferenceObjectAsset(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a2, v4);
    re::AssetHandle::operator=(v3 + 64, v4);
    re::ecs2::Component::enqueueMarkDirty(v3);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  }
}

uint64_t REAnchoringComponentGetARReferenceObjectAsset(uint64_t a1)
{
  if (v1) {
    id v2 = (id)(v1 + 8);
  }
  return v1;
}

uint64_t REAnchoringComponentSetDescriptorResourceStyle(uint64_t a1, int a2)
{
  if (*(_DWORD *)(result + 240) != a2)
  {
    *(_DWORD *)(result + 24ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(result);
  }
  return result;
}

uint64_t REAnchoringComponentGetDescriptorResourceStyle(uint64_t a1)
{
}

uint64_t REAnchoringComponentSetARReferenceObjectIdentifier(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = uuid_compare(a2, (const unsigned __int8 *)(v3 + 88));
  if (result)
  {
    *(_OWORD *)(v3 + 88) = *(_OWORD *)a2;
    return re::ecs2::Component::enqueueMarkDirty(v3);
  }
  return result;
}

uint64_t REAnchoringComponentGetARReferenceObjectIdentifier(uint64_t a1)
{
}

void *REAnchoringResourceComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::internal::destroy(re::internal *this, re::IntrospectionBase *a2)
{
  uint64_t v3 = re::introspectionAllocator(this);
  int v5 = *((_DWORD *)this + 4);
  if ((v5 - 1) < 2)
  {
    float32x4_t v7 = v3;
    (**(void (***)(re::internal *))this)(this);
    float32x4_t v8 = *(uint64_t (**)(void *, re::internal *))(*(void *)v7 + 40);
    return v8(v7, this);
  }
  else if (v5 == 8)
  {
    return re::internal::destroy((re **)this, (re::IntrospectionStructure *)1);
  }
  else if (v5 == 9)
  {
    return re::internal::destroy((unsigned int **)this, (re::IntrospectionEnum *)1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Unsupported type. C-introspection currently only supports enum, struct, pointer, and C-style array.", "!\"Unreachable code\"", "destroy", 30);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::destroy(unsigned int **this, re::IntrospectionEnum *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = re::introspectionAllocator((re *)this);
  if (v2)
  {
    int v5 = this[8];
    uint64_t v6 = *((void *)v5 + 1);
    if (v6)
    {
      re::internal::destroy(*((re **)v5 + 1), *v5);
      (*(void (**)(void *, uint64_t))(*(void *)v4 + 40))(v4, v6);
      (*(void (**)(void *, unsigned int *))(*(void *)v4 + 40))(v4, v5);
    }
  }
  if (this[6]) {
    (*(void (**)(void *))(*(void *)v4 + 40))(v4);
  }
  (*(void (**)(unsigned int **))*this)(this);
  float32x4_t v7 = *(uint64_t (**)(void *, unsigned int **))(*(void *)v4 + 40);
  return v7(v4, this);
}

uint64_t re::internal::destroy(re **this, re::IntrospectionStructure *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = re::introspectionAllocator((re *)this);
  if (v2)
  {
    int v5 = this[8];
    if (v5)
    {
      re::internal::destroy(v5, *((unsigned int *)this + 14));
      (*(void (**)(void *, re *))(*(void *)v4 + 40))(v4, this[8]);
      this[8] = 0;
      *((_DWORD *)this + 14) = 0;
    }
  }
  if (this[6])
  {
    (*(void (**)(void *))(*(void *)v4 + 40))(v4);
    this[6] = 0;
  }
  (*(void (**)(re **))*this)(this);
  uint64_t v6 = *(uint64_t (**)(void *, re **))(*(void *)v4 + 40);
  return v6(v4, this);
}

void *re::internal::destroy(re *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t result = re::introspectionAllocator(a1);
  if (a2)
  {
    int v5 = result;
    uint64_t v6 = 8 * a2;
    do
    {
      uint64_t v7 = *(void *)v3;
      if (*(void *)(*(void *)v3 + 16)) {
        (*(void (**)(void *))(*(void *)v5 + 40))(v5);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 40))(v5, v7);
      uint64_t v3 = (re *)((char *)v3 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

{
  re *v3;
  void *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v3 = a1;
  uint64_t result = re::introspectionAllocator(a1);
  if (a2)
  {
    int v5 = result;
    uint64_t v6 = 8 * a2;
    do
    {
      uint64_t v7 = *(void *)v3;
      if (*(void *)(*(void *)v3 + 8)) {
        (*(void (**)(void *))(*(void *)v5 + 40))(v5);
      }
      re::SerializedReference<re::IntrospectionBase const*>::reset(v7 + 48);
      re::SerializedReference<re::IntrospectionBase const*>::reset(v7 + 16);
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 40))(v5, v7);
      uint64_t v3 = (re *)((char *)v3 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

__n128 RETextureAssetGetSize(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  if (*(unsigned char *)(v13[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v13);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v13);
  }
  uint64_t v3 = v1;
  if (!v1)
  {
    long long v2 = 0uLL;
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(v1 + 96);
  if (v4)
  {
    *(void *)&long long v2 = *(void *)(v4 + 24);
LABEL_12:
    long long v12 = v2;
    goto LABEL_13;
  }
  int v5 = (id *)(v1 + 112);
  if (!*(void *)(v3 + 112)
    || (uint64_t v6 = re::DirectTexturePayload::directTexture(v5)) == 0)
  {
    *(void *)&long long v2 = *(void *)(v3 + 360);
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  float32x4_t v8 = (void *)DRTextureCopyDescriptor();
  unsigned int Width = DRTextureDescriptorGetWidth();
  *(void *)&long long v10 = __PAIR64__(DRTextureDescriptorGetHeight(), Width);
  long long v12 = v10;

LABEL_13:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return (__n128)v12;
}

uint64_t re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>(re::TextureAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)a1 + 1) + 312))
  {
    long long v2 = re::TextureAsset::assetType(a1);
    uint64_t result = re::AssetHandle::assetWithTypeRaw((uint64_t)a1, (uint64_t)v2, 1);
    if (result) {
      return result;
    }
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = v4;
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      float32x4_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return 0;
}

uint64_t RETextureAssetGetMipmapLevelCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v11);
  if (*(unsigned char *)(v11[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v11);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v11);
  }
  uint64_t MipmapLevelCount = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 96);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 44))
      {
        unsigned int v4 = 32 - __clz(*(_DWORD *)(v3 + 24));
        unsigned int v5 = 32 - __clz(*(_DWORD *)(v3 + 28));
        if (v4 <= v5) {
          uint64_t MipmapLevelCount = v5;
        }
        else {
          uint64_t MipmapLevelCount = v4;
        }
      }
      else
      {
        uint64_t MipmapLevelCount = 1;
      }
    }
    else
    {
      uint64_t v6 = (id *)(v1 + 112);
      if (*(void *)(MipmapLevelCount + 112)
        && (uint64_t v7 = re::DirectTexturePayload::directTexture(v6)) != 0)
      {
        int v8 = v7;
        float32x4_t v9 = (void *)DRTextureCopyDescriptor();
        uint64_t MipmapLevelCount = DRTextureDescriptorGetMipmapLevelCount();
      }
      else
      {
        uint64_t MipmapLevelCount = (int)re::TextureData::mipmapLevelCount((re::TextureData *)(MipmapLevelCount + 152));
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return MipmapLevelCount;
}

uint64_t RETextureAssetGetArrayLength(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  if (*(unsigned char *)(v8[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v8);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v8);
  }
  uint64_t ArrayLength = v1;
  if (v1)
  {
    if (*(void *)(v1 + 96))
    {
      uint64_t ArrayLength = 0;
    }
    else
    {
      uint64_t v3 = (id *)(v1 + 112);
      if (*(void *)(ArrayLength + 112)
        && (unsigned int v4 = re::DirectTexturePayload::directTexture(v3)) != 0)
      {
        unsigned int v5 = v4;
        uint64_t v6 = (void *)DRTextureCopyDescriptor();
        uint64_t ArrayLength = DRTextureDescriptorGetArrayLength();
      }
      else
      {
        uint64_t ArrayLength = *(int *)(ArrayLength + 372);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return ArrayLength;
}

uint64_t RETextureAssetGetTextureType(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  if (*(unsigned char *)(v9[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v9);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v9);
  }
  uint64_t v2 = v1;
  if (v1 && !*(void *)(v1 + 96))
  {
    unsigned int v5 = (id *)(v1 + 112);
    if (*(void *)(v2 + 112)
      && (uint64_t v6 = re::DirectTexturePayload::directTexture(v5)) != 0)
    {
      uint64_t v7 = v6;
      int v8 = (void *)DRTextureCopyDescriptor();
      uint64_t TextureType = DRTextureDescriptorGetTextureType();
    }
    else
    {
      uint64_t TextureType = *(int *)(v2 + 380);
    }
  }
  else
  {
    uint64_t TextureType = 2;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return TextureType;
}

uint64_t RETextureAssetGetSemantic(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  if (!*(unsigned char *)(v4[1] + 312))
  {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v4);
    if (v1) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 6;
    goto LABEL_6;
  }
  uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v4);
  if (!v1) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *(unsigned int *)(v1 + 388);
LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

__n128 RETextureAssetGetDimensions(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v15);
  if (*(unsigned char *)(v15[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v15);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v15);
  }
  uint64_t v3 = v1;
  if (!v1)
  {
    long long v2 = 0uLL;
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(v1 + 96);
  if (v4)
  {
    *(void *)&long long v2 = *(void *)(v4 + 24);
LABEL_12:
    long long v14 = v2;
    goto LABEL_13;
  }
  unsigned int v5 = (id *)(v1 + 112);
  if (!*(void *)(v3 + 112)
    || (uint64_t v6 = re::DirectTexturePayload::directTexture(v5)) == 0)
  {
    *(void *)&long long v2 = *(void *)(v3 + 360);
    DWORD2(v2) = *(_DWORD *)(v3 + 368);
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  int v8 = (void *)DRTextureCopyDescriptor();
  unsigned int Width = DRTextureDescriptorGetWidth();
  unsigned int Height = DRTextureDescriptorGetHeight();
  int Depth = DRTextureDescriptorGetDepth();
  *(void *)&long long v12 = __PAIR64__(Height, Width);
  DWORD2(v12) = Depth;
  long long v14 = v12;

LABEL_13:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return (__n128)v14;
}

uint64_t RETextureAssetGetPixelFormat(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  if (*(unsigned char *)(v9[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v9);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v9);
  }
  uint64_t PixelFormat = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 96);
    if (v3)
    {
      uint64_t PixelFormat = *(int *)(v3 + 32);
    }
    else
    {
      uint64_t v4 = (id *)(v1 + 112);
      if (*(void *)(PixelFormat + 112)
        && (unsigned int v5 = re::DirectTexturePayload::directTexture(v4)) != 0)
      {
        uint64_t v6 = v5;
        uint64_t v7 = (void *)DRTextureCopyDescriptor();
        uint64_t PixelFormat = DRTextureDescriptorGetPixelFormat();
      }
      else
      {
        uint64_t PixelFormat = *(int *)(PixelFormat + 376);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return PixelFormat;
}

id RETextureAssetGetColorSpace(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  if (*(unsigned char *)(v4[1] + 312)) {
    uint64_t v1 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v4);
  }
  else {
    uint64_t v1 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v4);
  }
  id v2 = *(id *)(v1 + 248);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithCGImage(unsigned char *a1, id *this, CGImage *a3, uint64_t a4)
{
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)this, (re::ImportGraphicsContext *)v37);
  id v8 = this[23];
  id v36 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v36, sel_setStorageMode_, 2);
  v23[0] = 0;
  v23[1] = 0;
  int v24 = 1;
  int v28 = 0;
  char v29 = 0;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  char v27 = 0;
  int v30 = 0;
  int v32 = 6;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  id v33 = 0;
  if (a1[1344]) {
    float32x4_t v9 = (_anonymous_namespace_ *)[v8 supportsSharedTextureHandles];
  }
  else {
    float32x4_t v9 = 0;
  }
  char v31 = (char)v9;
  uint64_t v10 = CGImageRetain(a3);
  if (v21)
  {
    uint64_t v18 = std::__throw_bad_variant_access[abi:nn180100]();
    return REAssetManagerTextureMemoryAssetCreateWithMTLTexture(v18);
  }
  else
  {
    id v11 = v20[0];

    if (v21 != -1) {
      ((void (*)(int *, id *))*(&off_26E734500 + v21))(&v38, v20);
    }
    if (v11)
    {
      LOBYTE(v19) = 0;
      v20[0] = v11;
      unsigned int v21 = 0;
      id v22 = 0;
      *(void *)((char *)v41 + 5) = 0;
      v41[0] = 0;
      int v38 = 16777473;
      char v39 = 1;
      int v40 = 1;
      int v42 = 0;
      uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)&v19, 6, (long long *)&v38);

      if (v21 != -1) {
        long long v13 = (re::TextureAsset *)((uint64_t (*)(int *, id *))*(&off_26E734500 + v21))(&v38, v20);
      }
      long long v14 = re::TextureAsset::assetType(v13);
      (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v19, a1, TextureAsset, v14, 0, 0, 0);
      uint64_t v15 = v19;
      if (v19) {
        id v16 = (id)(v19 + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
    }
    else
    {
      uint64_t v15 = 0;
    }

    if (v36) {
    return v15;
    }
  }
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithMTLTexture(unsigned char *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  v11[0] = 0;
  v12[0] = v3;
  unsigned int v13 = 0;
  id v14 = 0;
  if (v3) {

  }
  uint64_t v8 = 0x100000001;
  HIDWORD(v9) = 0;
  int v7 = 16777473;
  int v10 = 0;
  *(void *)((char *)&v9 + 5) = 0;
  *(void *)&long long v9 = 0;
  uint64_t v5 = re::CoreREAssetUtils::assetManagerTextureMemoryAssetCreateWithTextureData(a1, (uint64_t)v11, 6, 0, (long long *)&v7);

  if (v13 != -1) {
    ((void (*)(char *, id *))*(&off_26E734500 + v13))(&v15, v12);
  }

  return v5;
}

uint64_t RETextureAssetDataCreateWithTexture(void *a1, const __CFDictionary *Value)
{
  id v3 = a1;
  int v19 = re::CoreREAssetUtils::textureSemanticOption(Value, 0);
  if (Value) {
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"kRETextureAssetCreateOptionColorSpaceName");
  }
  BOOL v4 = (unint64_t)[v3 mipmapLevelCount] > 1;
  id v5 = v3;
  v15[0] = 0;
  v16[0] = v3;
  unsigned int v17 = 0;
  CFDictionaryRef v18 = Value;
  if (v3) {

  }
  v9[0] = v4;
  v9[1] = v4;
  __int16 v10 = 256;
  char v11 = 1;
  int v12 = 1;
  int v14 = 0;
  v13[0] = 0;
  *(void *)((char *)v13 + 5) = 0;
  re::make::shared::object<re::TextureAssetData,re::TextureData &,re::TextureSemantic &,re::TextureCompileOptions &>((re *)&v8, (uint64_t)v15, &v19, v9);
  uint64_t v6 = v8;

  if (v17 != -1) {
    ((void (*)(unsigned char *, id *))*(&off_26E734500 + v17))(v9, v16);
  }

  return v6;
}

uint64_t REAssetServiceTextureAssetCreateWithIOSurface(uint64_t a1, uint64_t a2, re::mtl::Device *a3, __IOSurface *a4, MTLPixelFormat a5)
{
  uint64_t v8 = (id *)(a2 + 184);
  TextureAssetWithIOSurface = (re::TextureAsset *)re::TextureAsset::makeTextureAssetWithIOSurface(v8, &v15, (uint64_t)a3, (uint64_t)a4);
  __int16 v10 = re::TextureAsset::assetType(TextureAssetWithIOSurface);
  (*(void (**)(void *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v14, a1, TextureAssetWithIOSurface, v10, 0, 0, 0);
  uint64_t v11 = v14[0];
  id v12 = (id)(v14[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
  if (v15) {

  }
  return v11;
}

id anonymous namespace'::makeTextureDescriptorWithIOSurface(_anonymous_namespace_ *this, const re::mtl::Device *a2, __IOSurface *a3, uint64_t a4, MTLPixelFormat a5)
{
  id v9 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc, a3, a4, a5), sel_init);
  *(void *)this = v9;
  objc_msgSend(v9, sel_setTextureType_, 2);
  objc_msgSend(v9, sel_setWidth_, IOSurfaceGetWidthOfPlane(a2, (size_t)a3));
  objc_msgSend(v9, sel_setHeight_, IOSurfaceGetHeightOfPlane(a2, (size_t)a3));
  objc_msgSend(v9, sel_setPixelFormat_, a4);
  objc_msgSend(v9, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v9, sel_setUsage_, 1);
  return objc_msgSend(v9, sel_setStorageMode_, 0);
}

id RETextureAssetDataCreateWithIOSurface(void *a1, const re::mtl::Device *a2, __IOSurface *a3, uint64_t a4, const __CFDictionary *a5)
{
  id v9 = a1;

  int v23 = re::CoreREAssetUtils::textureSemanticOption(a5, 0);
  id v18 = v9;

  id v11 = v24;
  re::mtl::Device::makeTextureWithIOSurface(v24, &v18, (uint64_t)a2, (uint64_t)a3, &v14);
  v19[0] = 0;
  v20[0] = v14;
  unsigned int v21 = 0;
  id v22 = 0;
  if (v14)
  {

    id v14 = 0;
  }

  LODWORD(v14) = 0x1000000;
  BYTE4(v14) = 1;
  int v15 = 1;
  int v17 = 0;
  v16[0] = 0;
  *(void *)((char *)v16 + 5) = 0;
  re::make::shared::object<re::TextureAssetData,re::TextureData &,re::TextureSemantic &,re::TextureCompileOptions &>((re *)&v18, (uint64_t)v19, &v23, &v14);
  id v12 = v18;

  if (v21 != -1) {
    ((void (*)(id *, id *))*(&off_26E734500 + v21))(&v14, v20);
  }
  if (v11) {

  }
  return v12;
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithData(unsigned char *a1, id *a2, void *a3, const char *a4, const __CFDictionary *a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v10 = re::CoreREAssetUtils::textureSemanticOption(a5, 0);
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)a2, (re::ImportGraphicsContext *)v35);
  id v11 = a3;
  id v12 = a2[23];
  id v34 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v34, sel_setStorageMode_, 2);
  v21[0] = 0;
  v21[1] = 0;
  int v22 = 1;
  int v26 = 0;
  char v27 = 0;
  int v28 = 0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  char v25 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  id v31 = 0;
  if (v10 == 3) {
    HIDWORD(v21[0]) = 2;
  }
  if (a1[1344]) {
    uint64_t Value = [v12 supportsSharedTextureHandles];
  }
  else {
    uint64_t Value = 0;
  }
  char v29 = Value;
  int v30 = v10;
  if (a5)
  {
    uint64_t Value = (uint64_t)CFDictionaryGetValue(a5, @"kRETextureAssetCreateOptionColorSpace");
    if (Value)
    {
      id v14 = (const void *)Value;
      uint64_t Value = CFEqual((CFTypeRef)Value, @"kRETextureAssetCreateColorSpacePreserveSourceValues");
      if (Value)
      {
        int v30 = 1;
      }
      else
      {
        uint64_t Value = CFEqual(v14, @"kRETextureAssetCreateColorSpaceSampleInLinearSpace");
        if (Value)
        {
          int v28 = 2;
        }
        else
        {
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v15 = (id)CoreRELog::log;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)int v38 = v14;
            _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid texture asset color space mode: %@", buf, 0xCu);
          }
        }
      }
    }
  }
  id v16 = v11;
  id v20 = v16;
  if (v39) {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  id v17 = *(id *)&v38[4];

  if (v39 != -1) {
    ((void (*)(char *, unsigned char *))*(&off_26E734500 + v39))(&v36, &v38[4]);
  }
  unsigned int v39 = -1;

  if (v17)
  {
    uint64_t v18 = REAssetManagerTextureMemoryAssetCreateWithMTLTexture(a1, v17);
  }
  else
  {
    uint64_t v18 = 0;
  }

  if (v34) {
  return v18;
  }
}

uint64_t REAssetServiceCreateTextureAssetWithDirectTexture(uint64_t a1, void *a2)
{
  void (*v6)(void *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, void);
  uint64_t v7;
  id v8;
  void v10[3];

  id v3 = a2;
  TextureAssetWithDirectTexture = (re::TextureAsset *)re::TextureAsset::makeTextureAssetWithDirectTexture(v3);
  id v5 = re::TextureAsset::assetType(TextureAssetWithDirectTexture);
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, re::TextureAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416);

  v6(v10, a1, TextureAssetWithDirectTexture, v5, 0, 0, 0);
  int v7 = v10[0];
  uint64_t v8 = (id)(v10[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v7;
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithURL(unsigned char *a1, id *this, void *a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)this, (re::ImportGraphicsContext *)v29);
  id v8 = a3;
  if (([v8 isFileURL] & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)uint64_t v32 = v8;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "URL passed to REAssetManagerTextureMemoryAssetCreateWithURL must be a file URL: %@", buf, 0xCu);
    }
    uint64_t v11 = 0;
    goto LABEL_18;
  }
  id v9 = this[23];
  id v28 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v28, sel_setStorageMode_, 2);
  v15[0] = 0;
  v15[1] = 0;
  int v16 = 1;
  int v20 = 0;
  char v21 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v19 = 0;
  int v22 = 0;
  int v24 = 6;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  id v25 = 0;
  if (a1[1344]) {
    int v10 = (_anonymous_namespace_ *)[v9 supportsSharedTextureHandles];
  }
  else {
    int v10 = 0;
  }
  char v23 = (char)v10;
  if (!v33)
  {
    id v12 = *(id *)&v32[4];

    if (v33 != -1) {
      ((void (*)(char *, unsigned char *))*(&off_26E734500 + v33))(&v30, &v32[4]);
    }
    if (v12)
    {
      uint64_t v11 = REAssetManagerTextureMemoryAssetCreateWithMTLTexture(a1, v12);
    }
    else
    {
      uint64_t v11 = 0;
    }

    if (v28) {
LABEL_18:
    }

    return v11;
  }
  uint64_t v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return RETextureAssetCopyToDestination(v14);
}

uint64_t RETextureAssetCopyToDestination(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v5 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v6 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v29);
  if (!v6)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid texture", (uint8_t *)&v20, 2u);
    }

    BOOL v11 = 0;
    goto LABEL_17;
  }
  if (!*(_DWORD *)(v6 + 240))
  {
    id v7 = *(id *)(v6 + 160);
    id v27 = v5;
    id v28 = v7;
    id v8 = v5;
    id v9 = objc_msgSend(v7, sel_device);
    if (v9 == objc_msgSend(v5, sel_device))
    {
      id v15 = objc_msgSend(v7, sel_device);
      id v16 = objc_msgSend(v7, sel_pixelFormat);
      if (v16 == objc_msgSend(v5, sel_pixelFormat))
      {
        re::ImportGraphicsResources::getOrCreateCommandQueue(*(void *)(a3 + 96), (uint64_t)&re::internal::copyTextureQueueName(void)::queueName, (const char *)1, &v26);
        re::mtl::CommandQueue::makeCommandBuffer(&v26, &v25);
        re::mtl::CommandBuffer::makeBlitCommandEncoder(&v25, &v24);
        [v24 copyFromTexture:v7 toTexture:v5];
        [v24 endEncoding];
        [v25 commit];
        [v25 waitUntilCompleted];
        re::internal::getCommandBufferError(&v25, (uint64_t)&v20);
        BOOL v11 = (_BYTE)v20 != 0;
        if (!(_BYTE)v20)
        {
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          uint64_t v17 = (id)CoreRELog::log;
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            if (v22) {
              uint64_t v18 = *(unsigned char **)&v23[7];
            }
            else {
              uint64_t v18 = v23;
            }
            *(_DWORD *)long long buf = 136315138;
            id v31 = v18;
          }

          if (!(_BYTE)v20 && v21 && (v22 & 1) != 0) {
            (*(void (**)(void))(*(void *)v21 + 40))();
          }
        }
      }
      else
      {
        re::ImportGraphicsContext::ImportGraphicsContext((re::ImportGraphicsContext *)&v20, *(id **)(a3 + 96));
        re::copyTexture(&v20, &v28, &v27, 0x5040302uLL, 0);

        BOOL v11 = 1;
      }

      id v12 = v27;
      if (!v27) {
        goto LABEL_10;
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Cannot copy texture due to device mismatch", (uint8_t *)&v20, 2u);
      }

      BOOL v11 = 0;
      id v12 = v5;
      if (!v5) {
        goto LABEL_10;
      }
    }

LABEL_10:
    if (v28) {

    }
LABEL_17:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);

    return v11;
  }
  uint64_t v19 = std::__throw_bad_variant_access[abi:nn180100]();
  return AssetManagerCreateTextureAssetFromData(v19);
}

uint64_t AssetManagerCreateTextureAssetFromData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10 = *(_DWORD *)(a5 + 128);
  *(void *)&v25[9] = 0;
  *(void *)&v25[4] = 0;
  LODWORD(v24) = 16777473;
  BYTE4(v24) = 1;
  *(_DWORD *)id v25 = 1;
  int v26 = 0;
  uint64_t TextureAsset = re::TextureAsset::makeTextureAsset(a5 + 24, v10, (long long *)&v24);
  uint64_t v12 = TextureAsset;
  long long v13 = *(_OWORD *)(a5 + 132);
  *(_OWORD *)(TextureAsset + 24) = *(_OWORD *)(a5 + 148);
  *(_OWORD *)(TextureAsset + 8) = v13;
  uint64_t v24 = 0;
  *(void *)id v25 = 0;
  *(void *)&v25[8] = 0;
  if (a2)
  {
    uint64_t v14 = re::TextureAsset::assetType((re::TextureAsset *)TextureAsset);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 432))(&v21, a1, v12, v14, a2, 0, a4, 1);
    goto LABEL_9;
  }
  id v15 = re::TextureAsset::assetType((re::TextureAsset *)TextureAsset);
  if (!a3)
  {
    uint64_t v16 = 0;
    if (a4) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v17 = 0;
    goto LABEL_8;
  }
  uint64_t v16 = 1;
  if (!a4) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v17 = 1;
LABEL_8:
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, uint64_t))(*(void *)a1 + 416))(a1, v12, v15, v16, 0, v17);
LABEL_9:
  uint64_t v18 = v21;
  uint64_t v24 = v21;
  *(void *)id v25 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *(void *)&v25[8] = v23;
  uint64_t v23 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
  if (v18) {
    id v19 = (id)(v18 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
  return v18;
}

uint64_t REAssetManagerCreateTextureAssetFromData(uint64_t a1, int a2, uint64_t a3)
{
  return AssetManagerCreateTextureAssetFromData(a1, 0, a2, 0, a3);
}

uint64_t REAssetManagerCreateTextureAssetFromDataAsync(uint64_t a1, int a2, uint64_t a3)
{
  return AssetManagerCreateTextureAssetFromData(a1, 0, a2, 1, a3);
}

uint64_t REAssetManagerCreateTextureAssetFromDataWithParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a3 + 32);
  unint64_t v5 = v4 >> 1;
  if ((v4 & 1) == 0) {
    unint64_t v5 = v4 >> 1;
  }
  if (v5)
  {
    if (v4) {
      uint64_t v6 = *(void *)(a3 + 40);
    }
    else {
      uint64_t v6 = a3 + 33;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return AssetManagerCreateTextureAssetFromData(a1, v6, 0, *(unsigned __int8 *)(a3 + 56), a2);
}

uint64_t textureAssetReplaceWithData(re::ImportGraphicsContext *a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, &v18);
  if (!v19)
  {
    re::TextureAsset::assetType(v7);
    id v8 = 0;
LABEL_6:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *v8;
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "REAssetManagerReplaceTextureAssetWithData: expected Texture, got %s", (uint8_t *)&buf, 0xCu);
    }

    if (a4)
    {
      CFIndex v11 = 1;
LABEL_12:
      uint64_t v9 = 0;
      *a4 = CFErrorCreate(0, @"REAssetRefErrorDomain", v11, 0);
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v9 = 0;
    goto LABEL_19;
  }
  id v8 = *(uint64_t **)(v19 + 264);
  if (v8 != re::TextureAsset::assetType(v7)) {
    goto LABEL_6;
  }
  if (!*(unsigned char *)(v19 + 257))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v15 = (re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)&v18);
      re::AssetPath::fullAssetPath(v15, (re::DynamicString *)&buf);
      if (BYTE8(buf)) {
        uint64_t v16 = v21;
      }
      else {
        uint64_t v16 = (char *)&buf + 9;
      }
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = v16;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "%s is marked as an immutable asset. Cannot replace texture on an immutable asset.", v22, 0xCu);
      if (void)buf && (BYTE8(buf)) {
        (*(void (**)(void))(*(void *)buf + 40))();
      }
    }

    if (a4)
    {
      CFIndex v11 = 2;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  re::ImportGraphicsContext::createFromAvailableManagers(a1, 0, (re::ImportGraphicsContext *)&buf);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v17, (const re::AssetHandle *)&v18);
  re::TextureAsset::setTextureAndSemantic((const re::ImportGraphicsContext *)&buf, v17, a3 + 24, *(_DWORD *)(a3 + 128), (long long *)(a3 + 132));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);

  uint64_t v9 = 1;
LABEL_19:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
  return v9;
}

uint64_t RETextureAssetReplaceTextureAssetWithData(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  return textureAssetReplaceWithData(0, a1, a2, a3);
}

uint64_t textureAssetMakeMutableAndReplaceWithData(re::ImportGraphicsContext *a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, &v14);
  if (v15)
  {
    id v8 = *(uint64_t **)(v15 + 264);
    if (v8 == re::TextureAsset::assetType(v7))
    {
      re::ImportGraphicsContext::createFromAvailableManagers(a1, 0, (re::ImportGraphicsContext *)buf);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)&v14);
      uint64_t Mutable = re::TextureAsset::setTextureAndSemantic_makeMutable((const re::ImportGraphicsContext *)buf, v13, a3 + 24, *(_DWORD *)(a3 + 128), (long long *)(a3 + 132));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);

      goto LABEL_11;
    }
  }
  else
  {
    re::TextureAsset::assetType(v7);
    id v8 = 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  int v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *v8;
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v12;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "REAssetManagerReplaceTextureAssetWithData: expected Texture, got %s", (uint8_t *)buf, 0xCu);
  }

  uint64_t Mutable = 0;
  if (a4) {
    *a4 = CFErrorCreate(0, @"REAssetRefErrorDomain", 1, 0);
  }
LABEL_11:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return Mutable;
}

uint64_t RETextureAssetHackMutateReplaceTextureAssetWithData(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  return textureAssetMakeMutableAndReplaceWithData(0, a1, a2, a3);
}

id RETextureAssetDataGetSize(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) < 2u)
  {
    objc_msgSend(*(id *)(a1 + 32), sel_width);
    if (*(_DWORD *)(a1 + 112) < 2u) {
      return objc_msgSend(*(id *)(a1 + 32), sel_height);
    }
  }
  uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
  return (id)RETextureAssetDataGetSemantic(v3);
}

uint64_t RETextureAssetDataGetSemantic(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

id RETextureAssetDataGetColorSpace(uint64_t a1)
{
  return *(id *)(a1 + 120);
}

uint64_t REAssetManagerTextureNoNetworkSyncMemoryAssetCreateWithURL(unsigned char *a1, id *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v9 = a3;
  if (([v9 isFileURL] & 1) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 138412290;
      *(void *)((char *)buf + 4) = v9;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "URL passed to REAssetManagerTextureNoNetworkSyncMemoryAssetCreateWithURL must be a file URL: %@", (uint8_t *)buf, 0xCu);
    }
    uint64_t v12 = 0;
    goto LABEL_22;
  }
  int v10 = a2[23];
  id v34 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v34, sel_setStorageMode_, 2);
  v21[0] = 0;
  v21[1] = 0;
  int v22 = 1;
  int v26 = 0;
  char v27 = 0;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  char v25 = 0;
  int v28 = 0;
  int v30 = 6;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  id v31 = 0;
  if (a1[1344]) {
    CFIndex v11 = (_anonymous_namespace_ *)[v10 supportsSharedTextureHandles];
  }
  else {
    CFIndex v11 = 0;
  }
  char v29 = (char)v11;
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)a2, (re::ImportGraphicsContext *)v20);
  if (!v41)
  {
    id v13 = *((id *)&buf[0] + 1);

    if (v41 != -1) {
      ((void (*)(int *, char *))*(&off_26E734500 + v41))(&v35, (char *)buf + 8);
    }
    if (v13)
    {
      LOBYTE(buf[0]) = 0;
      *((void *)&buf[0] + 1) = v13;
      unsigned int v41 = 0;
      id v42 = 0;
      *(void *)((char *)v38 + 5) = 0;
      v38[0] = 0;
      int v35 = 16777473;
      char v36 = 1;
      int v37 = 1;
      int v39 = 0;
      uint64_t TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)buf, 6, (long long *)&v35);

      if (v41 != -1) {
        uint64_t v15 = (re::TextureAsset *)((uint64_t (*)(int *, char *))*(&off_26E734500 + v41))(&v35, (char *)buf + 8);
      }
      uint64_t v16 = re::TextureAsset::assetType(v15);
      (*(void (**)(_OWORD *__return_ptr, unsigned char *, uint64_t, uint64_t *, uint64_t, void, uint64_t, void))(*(void *)a1 + 424))(buf, a1, TextureAsset, v16, a4, 0, 2, 0);
      uint64_t v12 = *(void *)&buf[0];
      if (*(void *)&buf[0]) {
        id v17 = (id)(*(void *)&buf[0] + 8);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    }
    else
    {
      uint64_t v12 = 0;
    }

    if (v34) {
LABEL_22:
    }

    return v12;
  }
  uint64_t v19 = std::__throw_bad_variant_access[abi:nn180100]();
  return REAssetManagerTextureMemoryAssetCreateCubeMap(v19);
}

uint64_t REAssetManagerTextureMemoryAssetCreateCubeMap(uint64_t a1, id *a2, const char *a3)
{
  uint64_t CubeMapWithOptions = REAssetManagerTextureMemoryAssetCreateCubeMapWithOptions((unsigned char *)a1, a2, a3, 0);
  if (!CubeMapWithOptions)
  {
    re::BuiltinTextureAssetProvider::makeDescriptor((re::BuiltinTextureAssetProvider *)"fallback.stockEnvMap", (uint64_t)&v8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, (const re::AssetLoadDescriptor *)&v8, v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
    uint64_t CubeMapWithOptions = v7[0];
    if (v7[0]) {
      id v6 = (id)(v7[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
    if ((void)v20)
    {
      if (BYTE8(v20)) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
      long long v20 = 0u;
      long long v21 = 0u;
    }
    if (v15)
    {
      if (v19) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      ++v18;
    }
    if (v10)
    {
      if (v14) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
      uint64_t v14 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v10 = 0;
      ++v13;
    }
    if (v8 && (v9 & 1) != 0) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
  }
  return CubeMapWithOptions;
}

uint64_t REAssetManagerTextureMemoryAssetCreateCubeMapWithOptions(unsigned char *a1, id *a2, const char *a3, const __CFDictionary *a4)
{
  int v8 = re::CoreREAssetUtils::textureSemanticOption(a4, 4);
  if (a4 && (uint64_t Value = (void *)CFDictionaryGetValue(a4, @"kRETextureAssetCreateOptionColorSpaceName")) != 0) {
    id v10 = Value;
  }
  else {
    id v10 = 0;
  }
  id v11 = a2[23];
  id v12 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v12, sel_setStorageMode_, 0);
  re::ImportGraphicsContext::createFromRenderManager((re::ImportGraphicsContext *)a2, (re::ImportGraphicsContext *)v39);
  id v34 = v12;
  long long v21 = 0uLL;
  int v22 = 1;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  char v25 = 0;
  int v26 = 0;
  char v27 = 0;
  int v28 = 0;
  char v29 = 0;
  int v30 = v8;
  id v13 = v10;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  id v31 = v13;
  re::loadTextureFileAndConvertToCubeMap(v39, a3, &v34, &v21, 0, 0, (uint64_t)v35);

  if (v34)
  {

    id v34 = 0;
  }
  if (!v37)
  {
    if (!v36[0])
    {
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v37 != 1)
  {
    uint64_t v16 = std::__throw_bad_variant_access[abi:nn180100]();
    return REAssetManagerTextureMemoryAssetCreateCubeMapNullable(v16);
  }
  uint64_t v14 = 0;
  if (v36[3] && v36[0])
  {
LABEL_13:
    uint64_t v18 = 0x100000001;
    HIDWORD(v19) = 0;
    int v17 = 16777473;
    int v20 = 0;
    *(void *)((char *)&v19 + 5) = 0;
    *(void *)&long long v19 = 0;
    uint64_t v14 = re::CoreREAssetUtils::assetManagerTextureMemoryAssetCreateWithTextureData(a1, (uint64_t)v35, v8, 0, (long long *)&v17);
  }
LABEL_15:

  if (v37 != -1) {
    ((void (*)(char *, void *))*(&off_26E734500 + v37))(&v40, v36);
  }

  if (v12) {
  return v14;
  }
}

uint64_t REAssetManagerTextureMemoryAssetCreateCubeMapNullable(unsigned char *a1, id *a2, const char *a3)
{
  return REAssetManagerTextureMemoryAssetCreateCubeMapWithOptions(a1, a2, a3, 0);
}

uint64_t textureDataCreateCubeMapFromLatLong(re::ImportGraphicsContext *a1, re::TextureData *a2, int a3, int a4, unint64_t a5, unsigned int a6, char *a7)
{
  int v41 = a4;
  re::ImportGraphicsContext::createFromRenderManager(a1, (re::ImportGraphicsContext *)v40);
  if ((re::TextureData::isValid(a2) & 1) == 0)
  {
    uint64_t v16 = re::TextureData::label(a2);
    re::DynamicString::format((re::DynamicString *)"Invalid texture provided when creating cube map from lat long %s", (re::DynamicString *)&v36, v16);
    if (v37[0]) {
      uint64_t v18 = (re::CoreREAssetUtils *)v37[1];
    }
    else {
      uint64_t v18 = (re::CoreREAssetUtils *)((char *)v37 + 1);
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v18, a7, v17);
    if (v36 && (v37[0] & 1) != 0) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    uint64_t v15 = 0;
    goto LABEL_44;
  }
  LOBYTE(v36) = 0;
  v37[0] = 0;
  unsigned int v38 = 0;
  id v39 = 0;
  if (*((_DWORD *)a2 + 22))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "A Metal texture is required to generate a cubemap: converting CPU texture to Metal.", buf, 2u);
    }

    re::loadCPUTextureInMetal((re *)v40, a2, 0, (uint64_t)buf);
    LOBYTE(v36) = buf[0];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)v33);
    id v13 = v35;
    id v35 = 0;
    id v14 = v39;
    id v39 = v13;

    if (v34 != -1) {
      ((void (*)(long long *, void *))*(&off_26E734500 + v34))(&v28, v33);
    }
    if (v38)
    {
      if (v38 != 1) {
        goto LABEL_45;
      }
      if (!v37[3]) {
        goto LABEL_35;
      }
    }
    if (!v37[0])
    {
LABEL_35:
      int v22 = re::TextureData::label((re::TextureData *)&v36);
      re::DynamicString::format((re::DynamicString *)"Conversion from CPU to Metal texture failed for %s", (re::DynamicString *)buf, v22);
      if (v33[0]) {
        uint64_t v24 = (re::CoreREAssetUtils *)v33[1];
      }
      else {
        uint64_t v24 = (re::CoreREAssetUtils *)((char *)v33 + 1);
      }
      re::CoreREAssetUtils::logAndSetErrorFromString(v24, a7, v23);
      if (*(void *)buf && (v33[0] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
      uint64_t v15 = 0;
      goto LABEL_42;
    }
    a2 = (re::TextureData *)&v36;
  }
  re::createCubeMapFromLatLongTexture(v40, a2, (const re::TextureData *)1, a5, a6, 0, (uint64_t)buf);
  if (!v34)
  {
LABEL_17:
    if (v33[0])
    {
      LODWORD(v28) = 16777473;
      BYTE4(v28) = 1;
      DWORD2(v28) = 1;
      HIDWORD(v28) = a3 ^ 1;
      int v31 = 0;
      char v29 = 0;
      char v30 = 0;
      re::make::shared::object<re::TextureAssetData,re::TextureData &,re::TextureSemantic &,re::TextureCompileOptions &>((re *)&v27, (uint64_t)buf, &v41, &v28);
      uint64_t v15 = v27;
LABEL_33:

      if (v34 != -1) {
        ((void (*)(long long *, void *))*(&off_26E734500 + v34))(&v28, v33);
      }
LABEL_42:

      if (v38 != -1) {
        ((void (*)(uint8_t *, void *))*(&off_26E734500 + v38))(buf, v37);
      }
LABEL_44:

      return v15;
    }
LABEL_26:
    long long v19 = re::TextureData::label(a2);
    re::DynamicString::format((re::DynamicString *)"Unable to create cube map from texture: %s", (re::DynamicString *)&v28, v19);
    if (BYTE8(v28)) {
      long long v21 = v29;
    }
    else {
      long long v21 = (re::CoreREAssetUtils *)((char *)&v28 + 9);
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v21, a7, v20);
    if (void)v28 && (BYTE8(v28)) {
      (*(void (**)(void))(*(void *)v28 + 40))();
    }
    uint64_t v15 = 0;
    goto LABEL_33;
  }
  if (v34 == 1)
  {
    if (!v33[3]) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
LABEL_45:
  uint64_t v26 = std::__throw_bad_variant_access[abi:nn180100]();
  return REAssetManagerTextureDataCreateCubeMapFromLatLong(v26);
}

uint64_t REAssetManagerTextureDataCreateCubeMapFromLatLong(uint64_t a1, re::ImportGraphicsContext *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v14);
  uint64_t v4 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v14);
  if (*(_DWORD *)(v4 + 240))
  {
    uint64_t v9 = std::__throw_bad_variant_access[abi:nn180100]();
    return REAssetManagerTextureMemoryAssetCreateCubeMapFromLatLong(v9);
  }
  else
  {
    uint64_t v5 = v4;
    id v6 = *(id *)(v4 + 160);
    v10[0] = 0;
    v11[0] = v6;
    unsigned int v12 = 0;
    id v13 = 0;
    uint64_t CubeMapFromLatLong = textureDataCreateCubeMapFromLatLong(a2, (re::TextureData *)v10, *(_DWORD *)(v5 + 20) == 0, 4, 0, 0, 0);

    if (v12 != -1) {
      ((void (*)(char *, id *))*(&off_26E734500 + v12))(&v15, v11);
    }
    if (v6) {

    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
    return CubeMapFromLatLong;
  }
}

uint64_t REAssetManagerTextureMemoryAssetCreateCubeMapFromLatLong(uint64_t a1, re::ImportGraphicsContext *a2, uint64_t a3)
{
  uint64_t CubeMapFromLatLong = REAssetManagerTextureDataCreateCubeMapFromLatLong(a1, a2, a3);
  return AssetManagerCreateTextureAssetFromData(a1, 0, 0, 0, CubeMapFromLatLong);
}

uint64_t RECreateCubeTextureDataMapFromLatLong(re::ImportGraphicsContext *a1, _DWORD *a2, const __CFDictionary *a3)
{
  uint64_t v4 = 0;
  return RECreateCubeTextureDataFromLatLong(a1, a2, a3, (char *)&v4);
}

uint64_t RECreateCubeTextureDataFromLatLong(re::ImportGraphicsContext *a1, _DWORD *a2, const __CFDictionary *a3, char *a4)
{
  if (a3)
  {
    int v9 = re::CoreREAssetUtils::latLongSamplingQualityOption(a3, 2);
    if (v9) {
      unsigned int v10 = 2 * (v9 == 1);
    }
    else {
      unsigned int v10 = 1;
    }
    unint64_t v11 = Unsigned;
  }
  else
  {
    unint64_t v11 = 0;
    unsigned int v10 = 0;
  }
  BOOL v12 = a2[36] == 0;
  int v13 = a2[32];
  return textureDataCreateCubeMapFromLatLong(a1, (re::TextureData *)(a2 + 6), v12, v13, v11, v10, a4);
}

id RETextureAssetDataGetTexture(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112)) {
    id v1 = 0;
  }
  else {
    id v1 = *(id *)(a1 + 32);
  }
  id v2 = v1;
  uint64_t v3 = v2;
  if (v2) {

  }
  return v3;
}

uint64_t RETextureAssetDataGetTextureType(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) < 2u) {
    return (int)objc_msgSend(*(id *)(a1 + 32), sel_textureType);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return RETextureAssetDataGetPixelFormat(v2);
}

uint64_t RETextureAssetDataGetPixelFormat(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) < 2u) {
    return (int)objc_msgSend(*(id *)(a1 + 32), sel_pixelFormat);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return RETextureAssetDataGetDimensions(v2);
}

id RETextureAssetDataGetDimensions(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) < 2u)
  {
    objc_msgSend(*(id *)(a1 + 32), sel_width);
    if (*(_DWORD *)(a1 + 112) < 2u)
    {
      objc_msgSend(*(id *)(a1 + 32), sel_height);
      if (*(_DWORD *)(a1 + 112) < 2u) {
        return objc_msgSend(*(id *)(a1 + 32), sel_depth);
      }
    }
  }
  uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
  return (id)RETextureAssetDataGetArrayLength(v3);
}

id RETextureAssetDataGetArrayLength(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) >= 2u)
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return (id)RETextureAssetDataGetMipmapLevelCount(v3);
  }
  else
  {
    id v1 = *(void **)(a1 + 32);
    return objc_msgSend(v1, sel_arrayLength);
  }
}

id RETextureAssetDataGetMipmapLevelCount(uint64_t a1)
{
  return re::TextureData::mipmapLevelCount((re::TextureData *)(a1 + 24));
}

uint64_t REAssetManagerCreateDownsampledTextureWithCompiledData(uint64_t a1, void *a2, char *a3, int a4, void *a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v43 = a2;
  int v35 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  int v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v36, 0);
  *((void *)&v40 + 1) = 0;
  long long v41 = 0uLL;
  re::DynamicString::setCapacity(&v40, 0);
  id v42 = 0;
  re::AssetPath::parse((re::AssetPath *)&v35, a3, 0, *(const re::internal::AssetTypeRegistry **)(a1 + 1040), *(os_unfair_lock_s **)(a1 + 1128), v31);
  if (!v31[0])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    if (v33) {
      uint64_t v27 = *(unsigned char **)&v34[7];
    }
    else {
      uint64_t v27 = v34;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v27;
    id v14 = "Failed to parse asset path '%s': %s";
    char v15 = v13;
    uint32_t v16 = 22;
    goto LABEL_42;
  }
  unint64_t v11 = v42;
  BOOL v12 = re::TextureAsset::assetType(v10);
  if (v11 != (const char **)v12)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = a3;
    id v14 = "Trying to load and downsample a compiled asset that is not a texture at path: %s";
    char v15 = v13;
    uint32_t v16 = 12;
LABEL_42:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
LABEL_10:

    uint64_t v17 = 0;
    if (a5) {
      *a5 = 0;
    }
    goto LABEL_23;
  }
  v30[1] = 0;
  void v30[2] = 0;
  uint64_t v18 = *(void *)(a1 + 1040);
  long long v19 = re::TextureAsset::assetType((re::TextureAsset *)v12);
  int v20 = (re::TextureAsset *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v18, (unint64_t)v19);
  memset(buf, 0, sizeof(buf));
  uint64_t v56 = 0x7FFFFFFFLL;
  long long v57 = 0u;
  long long v58 = 0u;
  int v55 = 0;
  int v59 = 0;
  uint64_t v60 = 0x7FFFFFFFLL;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  int v64 = 0;
  long long v21 = re::TextureAsset::assetType(v20);
  int v22 = re::globalAllocators((re *)v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 144, 8);
  *(void *)(v23 + 16) = 0;
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v23 + 48) = 0;
  *(_DWORD *)(v23 + + 56) = 65793;
  *(void *)(v23 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_WORD *)(v23 + 88) = 0;
  *(void *)(v23 + 128) = 0;
  *(void *)(v23 + 104) = 0;
  *(void *)(v23 + 112) = 0;
  *(void *)(v23 + 96) = 0;
  *(_DWORD *)(v23 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)uint64_t v23 = &unk_26E734520;
  *(void *)(v23 + 8) = 0;
  *(_DWORD *)(v23 + 136) = a4;
  re::TextureAssetLoader::initSpecializedTemporaryLoader(v23, (uint64_t)v20);
  int v47 = &unk_26E734678;
  uint64_t v51 = &v47;
  v53[3] = v53;
  uint64_t v52 = v23;
  v53[0] = &unk_26E734678;
  re::internal::AssetTypeRegistry::registerAssetType((uint64_t)buf, (char **)v21, &v52);
  std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v52);
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](&v47);
  v30[0] = (uint64_t)buf;
  v29[0] = 0;
  re::AssetUtilities::loadCompiledAssetFromData((id *)&v43, v30, v11, 0, 0, (uint64_t)v29, (uint64_t)&v47);
  if ((_BYTE)v47)
  {
    re::AssetManager::createAssetEntryForNamedAsset((os_unfair_lock_s *)a1, v48, (const re::AssetPath *)&v35, (uint64_t *)v44);
    uint64_t v17 = *(void *)v44;
    if (*(void *)v44) {
      id v24 = (id)(*(void *)v44 + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v44);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v25 = (id)CoreRELog::log;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      if (v49) {
        long long v28 = v51;
      }
      else {
        long long v28 = (void **)v50;
      }
      *(_DWORD *)uint64_t v44 = 136315394;
      *(void *)&v44[4] = a3;
      __int16 v45 = 2080;
      uint64_t v46 = v28;
      _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Error loading compiled asset '%s': %s", v44, 0x16u);
    }

    uint64_t v17 = 0;
    if (a5) {
      *a5 = 0;
    }
  }
  if (!(_BYTE)v47 && v48 && (v49 & 1) != 0) {
    (*(void (**)(void))(*(void *)v48 + 40))();
  }
  re::internal::AssetTypeRegistry::~AssetTypeRegistry((re::internal::AssetTypeRegistry *)buf);
LABEL_23:
  if (!v31[0] && v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
  if ((void)v40)
  {
    if (BYTE8(v40)) {
      (*(void (**)(void))(*(void *)v40 + 40))();
    }
    long long v40 = 0u;
    long long v41 = 0u;
  }
  if (v36 && (v37 & 1) != 0) {
    (*(void (**)(void))(*v36 + 40))();
  }

  return v17;
}

void *REAssetManagerCreateCompiledTextureFromKtxAndJson(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  id v7 = a2;
  int v8 = a3;
  v62[1] = 0;
  void v62[2] = 0;
  v62[0] = *(void *)(a1 + 1040);
  int v9 = re::TextureAsset::assetType(v8);
  uint64_t v10 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), (unint64_t)v9);
  long long v61 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 112))(v10) + 32);
  re::TypeRegistry::typeInfo((re *)v61, (re **)&v61, &v35);
  re::TypeInfo::TypeInfo((uint64_t)v60, (uint64_t)&v35 + 8);
  unint64_t v11 = v8;
  BOOL v12 = (const char *)[(re::TextureAsset *)v11 bytes];
  int v13 = (_anonymous_namespace_ *)[(re::TextureAsset *)v11 length];
  if (v55[0])
  {
    uint64_t v15 = v56;
    long long v64 = 0u;
    long long v65 = 0u;
    memset(v63, 0, sizeof(v63));
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    memset(v52, 0, sizeof(v52));
    int v53 = 0;
    memset(v49, 0, sizeof(v49));
    int v50 = 0;
    id v16 = v7;
    if (!v46[0] && (void)v47)
    {
      if (BYTE8(v47)) {
        (*(void (**)(void))(*(void *)v47 + 40))();
      }
      long long v47 = 0u;
      long long v48 = 0u;
    }
    if (*(void *)(v15 + 360) != *(void *)((char *)&v64 + 4))
    {
      if (a4)
      {
        re::DynamicString::format((re::DynamicString *)"Texture asset width/height (%i,%i) specified in the json don't match width/height (%u,%u) specified in the KTX.", (re::DynamicString *)&v35, *(unsigned int *)(v15 + 360), *(unsigned int *)(v15 + 364), DWORD1(v64), DWORD2(v64));
        if (BYTE8(v35)) {
          long long v21 = (char *)v36;
        }
        else {
          long long v21 = (char *)&v35 + 9;
        }
        re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)v21, v44);
        id v22 = *(id *)&v44[0];
        *a4 = v22;
        CFRetain(v22);

        if (void)v35 && (BYTE8(v35)) {
          (*(void (**)(void))(*(void *)v35 + 40))();
        }
        a4 = 0;
      }
      goto LABEL_46;
    }
    long long v45 = 0u;
    memset(v44, 0, sizeof(v44));
    DWORD1(v45) = 0x7FFFFFFF;
    id v43 = v16;
    re::TextureAssetLoader::setBlobOverrideSerializationParameter((_anonymous_namespace_ *)v44, &v43);

    id v42 = 0;
    v39[1] = 0;
    long long v40 = 0;
    int v41 = 0;
    v38[0] = &unk_26E7147E8;
    v38[1] = v39;
    v39[0] = 0;
    long long v36 = 0u;
    memset(v37, 0, sizeof(v37));
    long long v35 = 0u;
    uint64_t v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v35 + 1, 0);
    memset(&v37[1], 0, 24);
    long long v19 = (re::TextureAsset *)re::DynamicString::setCapacity((void *)v37 + 1, 0);
    *((void *)&v37[2] + 1) = 0;
    v32[0] = v62;
    v32[1] = 0;
    int v33 = 3;
    __int16 v34 = 257;
    v32[2] = 0;
    v32[3] = v44;
    int v20 = re::TextureAsset::assetType(v19);
    re::AssetUtilities::saveCompiledAssetToStream((uint64_t)v38, (const re::IntrospectionBase **)v15, (const re::AssetPath *)&v35, v20, (uint64_t)v32, v29);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v15);
    if (v29[0])
    {
      re::Data::makeDataWithBytes(v42, v40, &v28);
      a4 = v28;
      CFRetain(a4);
    }
    else
    {
      if (!a4) {
        goto LABEL_32;
      }
      re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)"Failed to create new compiledtexture data.", &v28);
      id v26 = v28;
      *a4 = v26;
      CFRetain(v26);

      a4 = 0;
    }
    if (v29[0])
    {
LABEL_35:
      if (*((void *)&v37[0] + 1))
      {
        if (v37[1]) {
          (*(void (**)(void))(**((void **)&v37[0] + 1) + 40))();
        }
        memset((char *)v37 + 8, 0, 32);
      }
      if (*((void *)&v35 + 1) && (v36 & 1) != 0) {
        (*(void (**)(void))(**((void **)&v35 + 1) + 40))();
      }
      if (v39[0] && v42) {
        (*(void (**)(void))(*(void *)v39[0] + 40))();
      }
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v44);
LABEL_46:
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)v49);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)v52);
      goto LABEL_47;
    }
LABEL_32:
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    goto LABEL_35;
  }
  if (a4)
  {
    if (v58) {
      uint64_t v23 = *(unsigned char **)&v59[7];
    }
    else {
      uint64_t v23 = v59;
    }
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize TextureAsset json due to error: %s.", (re::DynamicString *)&v35, v23);
    if (BYTE8(v35)) {
      id v24 = (char *)v36;
    }
    else {
      id v24 = (char *)&v35 + 9;
    }
    re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)v24, v63);
    id v25 = v63[0];
    *a4 = v25;
    CFRetain(v25);

    if (void)v35 && (BYTE8(v35)) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    a4 = 0;
LABEL_47:
    if (v55[0]) {
      goto LABEL_51;
    }
  }
  if (v57 && (v58 & 1) != 0) {
    (*(void (**)(void))(*(void *)v57 + 40))();
  }
LABEL_51:

  return a4;
}

uint64_t REAssetManagerGetShareableTexturesEnabled(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1344)) {
    return [*(id *)(a2 + 184) supportsSharedTextureHandles];
  }
  else {
    return 0;
  }
}

void RETextureAssetReplaceAllWithDirectTexture(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = re::TextureAsset::assetType(v5);
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), (unint64_t)v6);
  re::AssetAPIHelper::assetHandleCreate(a2, &v16);
  re::AssetHandle::loadNow((uint64_t)v17, 0);
  if (v17)
  {
    int v8 = (os_unfair_lock_s *)*((void *)v17 + 3);
    if (v8) {
      re::AssetManager::convertToMutable(v8, (const re::AssetHandle *)&v16);
    }
  }
  re::AssetHandle::setNetworkSharingMode((uint64_t)&v16, 1);
  if (v17)
  {
    unsigned int v9 = atomic_load((unsigned int *)v17 + 176);
    if (v9 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v16);
      ++*((_DWORD *)v17 + 65);
      uint64_t v10 = (id *)re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)&v16);
      if (v10)
      {
        unint64_t v11 = v10;
        if (v5 && v10[12])
        {
          uint64_t v27 = 0;
          re::TextureAssetLoader::setDrawableQueueForTextureAsset(v7, v10, &v27);
        }
        BOOL v12 = re::AssetHandle::assetInfo((re::AssetHandle *)&v16);
        int v18 = *v12;
        re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)(v12 + 2));
        re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)(v12 + 10));
        int v13 = v12[22];
        uint64_t v14 = *((void *)v12 + 10);
        uint8_t v21[4] = *((void *)v12 + 9);
        v21[5] = v14;
        int v22 = v13;
        re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v12 + 24));
        re::DynamicString::DynamicString((re::DynamicString *)v24, (const re::DynamicString *)(v12 + 32));
        re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v12 + 40));
        re::DynamicString::DynamicString((re::DynamicString *)v26, (const re::DynamicString *)(v12 + 48));
        re::TextureAssetLoader::setDirectTextureForTextureAsset(v7, v11, (uint64_t)v5, (uint64_t)&v18);
        if (v26[0])
        {
          if (v26[1]) {
            (*(void (**)(void))(*(void *)v26[0] + 40))();
          }
          memset(v26, 0, sizeof(v26));
        }
        if (v25[0])
        {
          if (v25[1]) {
            (*(void (**)(void))(*(void *)v25[0] + 40))();
          }
          memset(v25, 0, sizeof(v25));
        }
        if (v24[0])
        {
          if (v24[1]) {
            (*(void (**)(void))(*(void *)v24[0] + 40))();
          }
          memset(v24, 0, sizeof(v24));
        }
        if (v23[0])
        {
          if (v23[1]) {
            (*(void (**)(void))(*(void *)v23[0] + 40))();
          }
          memset(v23, 0, sizeof(v23));
        }
        if (v21[0])
        {
          if (v21[1]) {
            (*(void (**)(void))(*(void *)v21[0] + 40))();
          }
          memset(v21, 0, 32);
        }
        if (v19 && (v20 & 1) != 0) {
          (*(void (**)(void))(*(void *)v19 + 40))();
        }
        uint64_t v15 = (os_unfair_lock_s *)v17;
        *((unsigned char *)v17 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v15);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v17);
      }
    }
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)&v16);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
}

uint64_t RETextureAssetCreateCompressedTextureAssetData(re::ImportGraphicsContext *a1, uint64_t a2, re::CoreREAssetUtils *this, char *a4)
{
  re::CoreREAssetUtils::textureASTCCompressionOptions(this, (const __CFDictionary *)1, (uint64_t)v44);
  if (!v44[0])
  {
    if (BYTE8(v45)) {
      unsigned int v9 = v46;
    }
    else {
      unsigned int v9 = (re::CoreREAssetUtils *)((char *)&v45 + 9);
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v9, a4, v7);
    uint64_t v10 = 0;
    goto LABEL_31;
  }
  re::AssetAPIHelper::assetHandleCreate(a2, v43);
  if (*(unsigned char *)(v43[1] + 312)) {
    uint64_t v8 = re::AssetHandle::maybeUnregisteredMemoryAsset<re::TextureAsset>((re::TextureAsset *)v43);
  }
  else {
    uint64_t v8 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v43);
  }
  uint64_t v10 = v8;
  if (v8)
  {
    if (a1)
    {
      re::ImportGraphicsContext::createFromRenderManager(a1, (re::ImportGraphicsContext *)&v41);
      char v37 = 0;
      v38[0] = 0;
      unsigned int v39 = 0;
      id v40 = 0;
      if ((void)v41 && ![(id)v41 supportsFamily:1002])
      {
        char v37 = *(unsigned char *)(v10 + 152);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v38, v10 + 160);
        unint64_t v11 = (re *)re::ObjCObject::operator=(&v40, (id *)(v10 + 248));
        goto LABEL_21;
      }
    }
    else
    {
      long long v41 = 0u;
      long long v42 = 0u;
      LOWORD(v42) = 257;
      BYTE2(v42) = 1;
      char v37 = 0;
      v38[0] = 0;
      unsigned int v39 = 0;
      id v40 = 0;
    }
    re::logTextureCompressionInfo((re *)"RETextureAssetCreateCompressedTextureAssetData", v10 + 152, (int *)&v45);
    re::createCompressedTextureData(v10 + 152, *(_DWORD *)(v10 + 388), &v45, (id *)&v41, 0, 0, (uint64_t)v30);
    if (!v30[0])
    {
      if (v32) {
        char v20 = *(re::CoreREAssetUtils **)&v33[7];
      }
      else {
        char v20 = (re::CoreREAssetUtils *)v33;
      }
      re::CoreREAssetUtils::logAndSetErrorFromString(v20, a4, v12);
      re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v30);
      uint64_t v10 = 0;
LABEL_27:

      if (v39 != -1) {
        ((void (*)(unsigned char *, void *))*(&off_26E734500 + v39))(v30, v38);
      }

      goto LABEL_30;
    }
    LOBYTE(v24[0]) = 0;
    *((void *)&v24[0] + 1) = 0;
    unsigned int v25 = 0;
    id v26 = 0;
    LOBYTE(v27[0]) = v31[0];
    BYTE8(v27[0]) = 0;
    unsigned int v28 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v27 + 8, (uint64_t)&v32);
    int v13 = v36;
    id v36 = 0;
    id v29 = v13;
    v31[0] = 0;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)&v32, (uint64_t)v24 + 8);
    id v14 = v26;
    id v26 = 0;
    uint64_t v15 = v36;
    id v36 = v14;

    char v37 = v27[0];
    std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>((uint64_t)v38, (uint64_t)v27 + 8);
    id v16 = v29;
    id v29 = 0;
    id v17 = v40;
    id v40 = v16;

    if (v28 != -1) {
      ((void (*)(uint64_t *, char *))*(&off_26E734500 + v28))(&v22, (char *)v27 + 8);
    }
    unsigned int v28 = -1;

    if (v25 != -1) {
      ((void (*)(uint64_t *, char *))*(&off_26E734500 + v25))(&v22, (char *)v24 + 8);
    }
    unint64_t v11 = (re *)re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)v30);
LABEL_21:
    uint64_t v22 = *(void *)(v10 + 8);
    unsigned int v23 = *(_DWORD *)(v10 + 16);
    v24[0] = v45;
    int v18 = *(_DWORD *)(v10 + 388);
    uint64_t v19 = re::globalAllocators(v11);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 168, 8);
    v30[0] = v37;
    v31[0] = 0;
    unsigned int v34 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, (uint64_t)v38);
    id v35 = v40;
    *(void *)&v27[0] = v22;
    *((void *)&v27[0] + 1) = v23 | 0x400000000;
    v27[1] = v24[0];
    re::TextureAssetData::TextureAssetData(v10, (uint64_t)v30, v18, v27);

    if (v34 != -1) {
      ((void (*)(char *, unsigned char *))*(&off_26E734500 + v34))(&v47, v31);
    }
    goto LABEL_27;
  }
LABEL_30:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
LABEL_31:
  if (!v44[0] && (void)v45 && (BYTE8(v45) & 1) != 0) {
    (*(void (**)(void))(*(void *)v45 + 40))();
  }
  return v10;
}

void REAssetManagerCreateDownsampledTextureWithCompiledData::DownsampleTextureAssetLoader::~DownsampleTextureAssetLoader(REAssetManagerCreateDownsampledTextureWithCompiledData::DownsampleTextureAssetLoader *this)
{
  re::TextureAssetLoader::~TextureAssetLoader(this);
  JUMPOUT(0x237DBCBD0);
}

void REAssetManagerCreateDownsampledTextureWithCompiledData::DownsampleTextureAssetLoader::createRuntimeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, int a11, uint64_t a12)
{
}

void re::make::shared::object<re::TextureAssetData,re::TextureData &,re::TextureSemantic &,re::TextureCompileOptions &>(re *a1, uint64_t a2, int *a3, _OWORD *a4)
{
  uint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 168, 8);
  v13[0] = *(unsigned char *)a2;
  v14[0] = 0;
  unsigned int v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2 + 8);
  id v16 = *(id *)(a2 + 96);
  int v10 = *a3;
  long long v11 = a4[1];
  v12[0] = *a4;
  v12[1] = v11;
  re::TextureAssetData::TextureAssetData(v9, (uint64_t)v13, v10, v12);
  *(void *)a1 = v9;

  if (v15 != -1) {
    ((void (*)(char *, unsigned char *))*(&off_26E734500 + v15))(&v17, v14);
  }
}

void std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E734678;
  return result;
}

void std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734678;
}

re *std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"operator()", 1044, *a2);
}

uint64_t std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0,std::allocator<REAssetManagerCreateDownsampledTextureWithCompiledData::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

uint64_t RERigAssetCreateBipedToBipedAutoRetargetAsset(uint64_t a1, re::RigGraphAsset *this, re::ecs2::Entity *a3, CFErrorRef *a4)
{
  v22[6] = *MEMORY[0x263EF8340];
  if (a1 && this && a3)
  {
    AutoRetargetBipedToBipedRigGraphAsset = re::RigGraphAsset::createAutoRetargetBipedToBipedRigGraphAsset(this, a3, (uint64_t)buf);
    if (buf[0])
    {
      uint64_t v7 = v22[0];
      uint64_t v8 = re::RigGraphAsset::assetType((re::RigGraphAsset *)AutoRetargetBipedToBipedRigGraphAsset);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v17, a1, v7, v8, 0, 0, 0);
      if (v18[0])
      {
        v22[0] = 0;
        uint64_t v9 = v17;
        if (v17) {
          id v10 = (id)(v17 + 8);
        }
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        id v14 = (id)CoreRELog::log;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v19 = 0;
          _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "RigAsset AutoRetarget Creation Error - Failed registering the new asset", v19, 2u);
        }

        makeError(@"REAssetRefErrorDomain", "Failed registering the new asset", 32, a4);
        uint64_t v9 = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
    }
    else
    {
      BOOL v12 = (__CFError *)v22[0];
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        getErrorMessage((__CFError *)&v17, v12);
        id v16 = (v18[0] & 1) != 0 ? (void *)v18[1] : (void *)((char *)v18 + 1);
        *(_DWORD *)uint64_t v19 = 136315138;
        char v20 = v16;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "RigAsset AutoRetarget Creation Error - %s", v19, 0xCu);
        if (v17)
        {
          if (v18[0]) {
            (*(void (**)(void))(*(void *)v17 + 40))();
          }
        }
      }

      uint64_t v9 = 0;
      *a4 = v12;
    }
    if (buf[0]) {
      std::unique_ptr<re::RigGraphAsset,std::function<void ()(re::RigGraphAsset*)>>::~unique_ptr[abi:nn180100](v22);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RigAsset AutoRetarget Creation Error - NULL argument detected", buf, 2u);
    }

    makeError(@"REAssetRefErrorDomain", "NULL argument detected", 22, a4);
    return 0;
  }
  return v9;
}

void makeError(const __CFString *a1, const char *a2, uint64_t a3, CFErrorRef *a4)
{
  if (!*a4)
  {
    userInfoValues = (void *)CFStringCreateWithCString(0, a2, 0x8000100u);
    id v6 = (const void *)*MEMORY[0x263EFFC48];
    *a4 = CFErrorCreateWithUserInfoKeysAndValues(0, a1, 4, &v6, (const void *const *)&userInfoValues, 1);
    if (userInfoValues) {
      CFRelease(userInfoValues);
    }
  }
}

void getErrorMessage(__CFError *a1, __CFError *a2)
{
  if (a2)
  {
    uint64_t v3 = (_anonymous_namespace_ *)CFErrorCopyDescription(a2);
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    *((void *)a1 + 1) = 0;
    re::DynamicString::setCapacity(a1, 0);
    CStringPtr = (_anonymous_namespace_ *)CFStringGetCStringPtr((CFStringRef)v3, 0x8000100u);
    if (CStringPtr)
    {
      uint64_t v5 = (const char *)CStringPtr;
      re::DynamicString::operator=(a1, (re::DynamicString *)&v15);
      id v6 = v15;
      if (!v15 || (v16 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v7 = v17;
    }
    else
    {
      CFIndex Length = CFStringGetLength((CFStringRef)v3);
      if (!Length) {
        goto LABEL_18;
      }
      uint64_t v9 = 2 * Length + 2;
      BOOL v12 = 0;
      uint64_t v13 = 0;
      buffer = 0;
      CString = (_anonymous_namespace_ *)CFStringGetCString((CFStringRef)v3, buffer, v9, 0x8000100u);
      if (CString)
      {
        long long v11 = buffer;
        re::DynamicString::operator=(a1, (re::DynamicString *)&v15);
        if (v15)
        {
          if (v16) {
            (*(void (**)(void))(*(void *)v15 + 40))();
          }
        }
      }
      id v6 = v12;
      if (!v12 || !v13) {
        goto LABEL_18;
      }
      uint64_t v7 = buffer;
    }
    (*(void (**)(_anonymous_namespace_ *, char *))(*(void *)v6 + 40))(v6, v7);
LABEL_18:
    CFRelease(v3);
    return;
  }
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  re::DynamicString::setCapacity(a1, 0);
}

uint64_t REMeshAttributeDescriptorCopyDescription(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

re::MeshDefinition::AttributeArray *REMeshAttributesDescriptorCreate(re *a1, unint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::MeshDefinition::AttributeArray *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2]
                                                                                                  + 32))(v4[2], 72, 8);
  re::MeshDefinition::AttributeArray::AttributeArray(v5, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = *((void *)v5 + 4);
      if (v8 <= v7)
      {
        uint64_t v10 = 0;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v12 = 136315906;
        uint64_t v13 = "operator[]";
        __int16 v14 = 1024;
        int v15 = 468;
        __int16 v16 = 2048;
        unint64_t v17 = v7;
        __int16 v18 = 2048;
        unint64_t v19 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_10:
        v11[2] = 0;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v12 = 136315906;
        uint64_t v13 = "operator[]";
        __int16 v14 = 1024;
        int v15 = 468;
        __int16 v16 = 2048;
        unint64_t v17 = v7;
        __int16 v18 = 2048;
        unint64_t v19 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(*((void *)v5 + 5) + 8 * v7) = *((void *)a1 + v7);
      LOBYTE(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
      unint64_t v8 = *((void *)v5 + 7);
      if (v8 <= v7) {
        goto LABEL_10;
      }
      re::Optional<re::StringID>::operator=(*((void *)v5 + 8) + v6, (unsigned __int8 *)&v10);
      if ((_BYTE)v10) {
        re::StringID::destroyString((re::StringID *)v11);
      }
      ++v7;
      v6 += 24;
    }
    while (a2 != v7);
  }
  return v5;
}

void REMeshAttributeDescriptorArraySetCustomName(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  unint64_t v8 = "";
  v9[0] = 1;
  v10[0] = v7;
  v10[1] = v8;
  uint64_t v7 = 0;
  unint64_t v8 = "";
  unint64_t v6 = *((void *)a1 + 7);
  if (v6 <= a2)
  {
    v10[2] = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v11 = 136315906;
    int v12 = "operator[]";
    __int16 v13 = 1024;
    int v14 = 468;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    __int16 v17 = 2048;
    unint64_t v18 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::Optional<re::StringID>::operator=(*((void *)a1 + 8) + 24 * a2, v9);
  if (v9[0]) {
    re::StringID::destroyString((re::StringID *)v10);
  }
  re::StringID::destroyString((re::StringID *)&v7);
}

unint64_t REMeshAttributeDescriptorCopyCustom2sToBuffer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, unint64_t a6)
{
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  v8[0] = a2;
  v8[1] = v6;
}

unint64_t REMeshAttributeDescriptorCopyCustom3sToBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  v8[0] = a2;
  v8[1] = v6;
}

unint64_t REMeshAttributeDescriptorCopyCustom4sToBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float16x4_t *a5, unint64_t a6)
{
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  v8[0] = a2;
  v8[1] = v6;
}

uint64_t REMeshDefinitionCreate(const __CFArray *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(a1);
  MEMORY[0x270FA5388](Count);
  unint64_t v8 = (const void **)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 >= 0x200) {
    size_t v9 = 512;
  }
  else {
    size_t v9 = v7;
  }
  bzero((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v41.location = 0;
  v41.CFIndex length = Count;
  CFArrayGetValues(a1, v41, v8);
  re::MeshDefinition::AttributeArray::AttributeArray((re::MeshDefinition::AttributeArray *)&v18, Count);
  if (Count >= 1)
  {
    uint64_t v10 = 0;
    for (unint64_t i = 0; i != Count; ++i)
    {
      unint64_t v12 = v21;
      if (v21 <= i)
      {
        uint64_t v16 = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v27 = 136315906;
        unsigned int v28 = "operator[]";
        __int16 v29 = 1024;
        int v30 = 468;
        __int16 v31 = 2048;
        unint64_t v32 = i;
        __int16 v33 = 2048;
        unint64_t v34 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        uint64_t v26 = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v27 = 136315906;
        unsigned int v28 = "operator[]";
        __int16 v29 = 1024;
        int v30 = 468;
        __int16 v31 = 2048;
        unint64_t v32 = i;
        __int16 v33 = 2048;
        unint64_t v34 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(v22 + 8 * i) = v8[i];
      LOBYTE(v16) = 0;
      unint64_t v12 = v24;
      if (v24 <= i) {
        goto LABEL_17;
      }
      re::Optional<re::StringID>::operator=(v25 + v10, (unsigned __int8 *)&v16);
      if ((_BYTE)v16) {
        re::StringID::destroyString((re::StringID *)&v17);
      }
      v10 += 24;
    }
  }
  uint64_t InstancedWithAttributes = REMeshDefinitionCreateInstancedWithAttributes((re *)&v18, a2, a3, 1uLL);
  unint64_t v18 = &unk_26E7119E0;
  re::FixedArray<re::Optional<re::StringID>>::deinit(&v23);
  if (v20)
  {
    if (v21)
    {
      (*(void (**)(void))(*(void *)v20 + 40))();
      unint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    uint64_t v20 = 0;
  }
  unint64_t v18 = &unk_26E6DECE0;
  objc_destructInstance(&v19);
  return InstancedWithAttributes;
}

uint64_t REMeshDefinitionCreateWithAttributes(re *a1, unint64_t a2, unint64_t a3)
{
  return REMeshDefinitionCreateInstancedWithAttributes(a1, a2, a3, 1uLL);
}

uint64_t REMeshDefinitionCreateInstancedWithAttributes(re *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (HIDWORD(a2))
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Vertex count (%zu) is too large for a 32-bit integer", "!overflow", "REMeshDefinitionCreateInstancedWithAttributes", 449, a2);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = a3;
  if (HIDWORD(a3))
  {
LABEL_8:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Index count (%zu) is too large for a 32-bit integer", "!overflow", "REMeshDefinitionCreateInstancedWithAttributes", 453, v5);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a4;
  if (HIDWORD(a4))
  {
LABEL_9:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Instance count (%zu) is too large for a 32-bit integer", "!overflow", "REMeshDefinitionCreateInstancedWithAttributes", 457, v4);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 192, 16);
  return re::MeshDefinition::MeshDefinition(v9, a1, a2, v5, v4);
}

void REMeshDefinitionSetIndicesWithData(uint64_t a1, CFDataRef theData)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (theData) {
    CFIndex Length = CFDataGetLength(theData);
  }
  else {
    CFIndex Length = 0;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (Length == 2 * v5)
  {
    id v14 = (id)[(__CFData *)theData copy];

    unint64_t v6 = &v14;
    unint64_t v7 = &v14;
LABEL_13:
    uint64_t v8 = a1;
    unsigned int v9 = 0;
    goto LABEL_14;
  }
  if (Length != 4 * v5)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 134218240;
      CFIndex v16 = Length;
      __int16 v17 = 1024;
      int v18 = v11;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Index data of size %zu is not identifiable as either 16-bit or 32-bit indices, given the mesh definition index count of %u", buf, 0x12u);
    }

    uint64_t v12 = 0;
    unint64_t v6 = (id *)&v12;
    unint64_t v7 = (void **)&v12;
    goto LABEL_13;
  }
  id v13 = (id)[(__CFData *)theData copy];

  unint64_t v6 = &v13;
  unint64_t v7 = &v13;
  uint64_t v8 = a1;
  unsigned int v9 = 1;
LABEL_14:
  re::MeshDefinition::setIndexData(v8, v9, v7);
}

void REMeshDefinitionSetIndicesWithDataUInt16(uint64_t a1, CFDataRef theData)
{
}

void REMeshDefinitionSetIndicesWithDataInternal(uint64_t a1, uint64_t a2, unsigned int a3, CFDataRef theData)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (theData) {
    unint64_t Length = CFDataGetLength(theData);
  }
  else {
    unint64_t Length = 0;
  }
  if (Length >= (unint64_t)*(unsigned int *)(a1 + 40) * a2)
  {
    id v16 = (id)[(__CFData *)theData copy];

    uint64_t v10 = &v16;
    int v11 = &v16;
    uint64_t v12 = a1;
    unsigned int v13 = a3;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v14 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v18 = Length;
      __int16 v19 = 1024;
      int v20 = v14;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Index data of size %zu is not large enough to fulfill the mesh definition index count of %u", buf, 0x12u);
    }

    uint64_t v15 = 0;
    uint64_t v10 = (id *)&v15;
    int v11 = (void **)&v15;
    uint64_t v12 = a1;
    unsigned int v13 = 0;
  }
  re::MeshDefinition::setIndexData(v12, v13, v11);
}

void REMeshDefinitionSetIndicesWithDataUInt32(uint64_t a1, CFDataRef theData)
{
}

void REMeshDefinitionSetAttributeWithData(re *a1, uint64_t a2, void *a3)
{
  id v5 = (id)[a3 copy];

  re::MeshDefinition::setAttribute(a1, a2, (uint64_t *)&v5);
}

void REMeshDefinitionSetCustomAttributeWithData(re *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v5 = *(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32);
  v7[0] = a3;
  v7[1] = v5;
  id v6 = (id)[a4 copy];

  re::MeshDefinition::setAttribute(a1, (uint64_t)v7, (uint64_t *)&v6);
}

__n128 *REMeshDefinitionSetBoundingBox(__n128 *result, __n128 a2, __n128 a3)
{
  if (!result[7].n128_u8[0]) {
    result[7].n128_u8[0] = 1;
  }
  result[8] = a2;
  result[9] = a3;
  return result;
}

uint64_t REMeshDefinitionSetDoubleSided(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 160)) {
    *(unsigned char *)(result + 16ArcSharedObject::ArcSharedObject(this, 0) = 1;
  }
  *(unsigned char *)(result + 161) = a2;
  return result;
}

void REMeshDefinitionSetSkeletonName(_anonymous_namespace_ *a1, const char *a2)
{
  uint64_t v8 = 0;
  unsigned int v9 = "";
  uint64_t v4 = v8;
  unint64_t v5 = v9;
  uint64_t v8 = 0;
  unsigned int v9 = "";
  uint64_t v6 = *((void *)a1 + 21);
  uint64_t v7 = *((void *)a1 + 22);
  *((void *)a1 + 21) = v4;
  *((void *)a1 + 22) = v5;
  v10[0] = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v10[1] = v7;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

re::MeshModelDefinition *REMeshModelDefinitionCreate(re *a1)
{
  id v1 = re::globalAllocators(a1);
  uint64_t v2 = (re::MeshModelDefinition *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 136, 8);
  return re::MeshModelDefinition::MeshModelDefinition(v2);
}

uint64_t REMeshModelDefinitionSetName(uint64_t a1, const char *a2)
{
  re::DynamicString::operator=((re::DynamicString *)(a1 + 24), (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

CFStringRef REMeshModelDefinitionCopyName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    id v1 = *(const char **)(a1 + 40);
  }
  else {
    id v1 = (const char *)(a1 + 33);
  }
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

void REMeshModelDefinitionAppendTrianglesWithName(void *a1, uint64_t a2, int a3, int a4, const char *a5)
{
  uint64_t v11 = a2;
  if (a2) {
    id v9 = (id)(a2 + 8);
  }
  re::MeshModelDefinition::append(a1, &v11, 3, a3, a4, a5);
  uint64_t v10 = v11;
  if (v11)
  {
  }
}

void REMeshModelDefinitionAppendTriangles(void *a1, uint64_t a2, int a3, int a4)
{
}

uint64_t REMeshInstanceDefinitionCreate(re *a1, int a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v10 = re::globalAllocators(a1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 144, 16);
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v11, 0);
  *(void *)uint64_t v11 = &unk_26E734720;
  *(_OWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  unsigned int v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v11 + 24), 0);
  *(unsigned char *)(v11 + 128) = 0;
  *(_DWORD *)(v11 + 132) = 1065353216;
  re::DynamicString::operator=((re::DynamicString *)(v11 + 24), (re::DynamicString *)&v19);
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  *(_DWORD *)(v11 + + 56) = a2;
  *(__n128 *)(v11 + 64) = a4;
  *(__n128 *)(v11 + 8ArcSharedObject::ArcSharedObject(this, 0) = a5;
  *(__n128 *)(v11 + 96) = a6;
  *(__n128 *)(v11 + 112) = a7;
  *(_DWORD *)(v11 + 128) = a3;
  *(_DWORD *)(v11 + 132) = HIDWORD(a3);
  return v11;
}

_anonymous_namespace_ *REMeshResourceDefinitionCreate(_anonymous_namespace_ *a1, unsigned int a2, uint64_t *a3, unsigned int a4, re **a5, unsigned int a6)
{
  uint64_t v26 = a2;
  uint64_t v25 = a4;
  uint64_t v9 = a6;
  __int16 v33 = 0;
  unint64_t v30 = 0;
  unint64_t v31 = 0;
  int v32 = 0;
  MeshSkeletonDefinition = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v29, a6);
  int v11 = ++v32;
  if (a6)
  {
    do
    {
      MeshSkeletonDefinition = (_anonymous_namespace_ *)RESkeletonDefinitionCreateMeshSkeletonDefinition(*a5);
      if (MeshSkeletonDefinition)
      {
        uint64_t v12 = MeshSkeletonDefinition;
        unint64_t v13 = v31;
        if (v31 >= v30)
        {
          unint64_t v14 = v31 + 1;
          if (v30 < v31 + 1)
          {
            if (v29)
            {
              unint64_t v15 = 2 * v30;
              if (!v30) {
                unint64_t v15 = 8;
              }
              if (v15 <= v14) {
                unint64_t v16 = v31 + 1;
              }
              else {
                unint64_t v16 = v15;
              }
              MeshSkeletonDefinition = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v29, v16);
              int v11 = v32;
            }
            else
            {
              MeshSkeletonDefinition = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v29, v14);
              int v11 = v32 + 1;
            }
          }
          unint64_t v13 = v31;
        }
        v33[v13] = (uint64_t)v12;
        unint64_t v31 = v13 + 1;
        int v32 = ++v11;
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        __int16 v17 = (id)CoreRELog::log;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Failed to create a skeleton", buf, 2u);
        }
      }
      ++a5;
      --v9;
    }
    while (v9);
  }
  unint64_t v18 = v33;
  unint64_t v19 = v31;
  char v20 = re::globalAllocators(MeshSkeletonDefinition);
  uint64_t v21 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 312, 8);
  re::MeshResourceDefinition::MeshResourceDefinition(v21, (uint64_t *)a1, v26, a3, v25, v18, v19);
  if (v19)
  {
    uint64_t v22 = v18;
    do
    {

      *v22++ = 0;
      --v19;
    }
    while (v19);
  }
  if (v29) {
    BOOL v23 = v18 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23) {
    (*(void (**)(void))(*v29 + 40))();
  }
  return v21;
}

void re::MeshInstanceDefinition::~MeshInstanceDefinition(re::MeshInstanceDefinition *this)
{
  *(void *)this = &unk_26E734720;
  re::DynamicString::deinit((re::MeshInstanceDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734720;
  re::DynamicString::deinit((re::MeshInstanceDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

BOOL RETypeIDIsValid(uint64_t a1)
{
  return a1 != 0;
}

uint64_t RETypeIDMakeInvalid()
{
  return 0;
}

BOOL RETypeIDAreEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = WORD1(a2) == WORD1(a4) && ((a4 ^ a2) & 0xFFFFFF00000000) == 0;
  if ((unsigned __int16)a2 != (unsigned __int16)a4) {
    BOOL v4 = 0;
  }
  return a1 == a3 && v4;
}

uint64_t RETypeInfoGetRegistry(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[0];
}

uint64_t RETypeInfoGetID(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)&v2, a1);
  return v2;
}

uint64_t RETypeInfoGetCategory(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12];
}

uint64_t RETypeInfoGetSize(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(unsigned int *)(v2[2] + 8);
}

uint64_t RETypeInfoGetAlignment(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(unsigned int *)(v2[2] + 12);
}

unsigned char *RETypeInfoGetName(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  id v1 = re::TypeInfo::name((re::TypeInfo *)v5);
  unint64_t v3 = *v1;
  uint64_t result = (unsigned char *)v1[1];
  if (v3 >= 0xFFFFFFFFFFFFFFFELL && (v3 & 1) == 0 && !*result) {
    return 0;
  }
  return result;
}

uint64_t RETypeInfoGetVersion(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v3, a1);
  uint64_t v1 = re::DataArray<re::TextureAtlasTile>::tryGet(v3[0] + 96, *(void *)v3[2]);
  if (v1) {
    return *(unsigned int *)(v1 + 16);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t RETypeInfoIsPOD(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(_DWORD *)(v2[2] + 48) & 1;
}

uint64_t RETypeInfoHasKnownSize(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return (*(_DWORD *)(v2[2] + 48) >> 1) & 1;
}

void **RETypeInfoCreateInstance(uint64_t a1, re::Allocator *a2, void *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  if (!a2)
  {
  }
  return re::TypeInfo::createInstance((re::TypeInfo *)v7, a2, a3);
}

void RETypeInfoDestroyInstance(uint64_t a1, void *a2, re::Allocator *a3, void *a4)
{
  uint64_t v7 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v8, a1);
  if (!a3)
  {
  }
  re::TypeInfo::releaseInstance((re::TypeInfo *)v8, a2, a3, a4);
}

uint64_t RETypeInfoGetIntroducedInRelease(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return re::TypeAvailabilityUtilities::convertToMajorVersion(*(_DWORD *)(v2[2] + 64));
}

BOOL RETypeInfoIsBasic(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 1;
}

uint64_t RETypeInfoIsInteger(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return re::TypeInfo::isInteger((re::TypeInfo *)v2);
}

BOOL RETypeInfoIsFloatingPoint(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 1 && *(unsigned char *)(v3 + 68) == 2;
}

BOOL RETypeInfoIsEnum(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 2;
}

uint64_t RETypeInfoGetEnumUnderlyingType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t RETypeInfoGetEnumConstantCount(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v3, a1);
  re::TypeInfo::enumConstants((re::TypeInfo *)v3);
  return v1;
}

uint64_t RETypeInfoGetEnumConstantValue(uint64_t a1, unint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = re::TypeInfo::enumConstants((re::TypeInfo *)v6);
  if (v4 > a2) {
    return *(void *)(v3 + 24 * a2);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RETypeInfoGetEnumConstantName(uint64_t a1, unint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = re::TypeInfo::enumConstants((re::TypeInfo *)v6);
  if (v4 > a2) {
    return *(void *)(v3 + 24 * a2 + 16);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v4);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL RETypeInfoIsOptional(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 3;
}

uint64_t RETypeInfoGetOptionalValueType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

BOOL REOptionalAccessorHasValue(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 80))(a2) != 0;
}

uint64_t REOptionalAccessorGetValue(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 80))(a2);
}

uint64_t REOptionalAccessorClearValue(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t, void))(v4[2] + 88))(a2, 0);
}

uint64_t REOptionalAccessorSetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::TypeInfo((uint64_t)v6, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6[2] + 88))(a2, a3);
}

BOOL RETypeInfoIsArray(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 4;
}

uint64_t RETypeInfoGetArrayElementType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

BOOL RETypeInfoIsFixedSizeArray(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v3, a1);
  if (v3[12] != 4) {
    return 0;
  }
  re::TypeInfo::TypeInfo((uint64_t)v2, (uint64_t)v3);
  return (*(_DWORD *)(v2[2] + 84) & 0xFFFFFF) == 0;
}

uint64_t REArrayAccessorGetSize(uint64_t a1, char *a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return re::ArrayAccessor::size((re::ArrayAccessor *)v4, a2);
}

void REArrayAccessorReset(uint64_t a1, void **a2, const re::TypeInfo *a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  uint64_t v5 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v6, (uint64_t)v7);
}

uint64_t REArrayAccessorGetElementAt(uint64_t a1, char *a2, unint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::TypeInfo((uint64_t)v6, (uint64_t)v7);
  return re::ArrayAccessor::elementAt((re::ArrayAccessor *)v6, a2, a3);
}

BOOL RETypeInfoIsList(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 5;
}

uint64_t RETypeInfoGetListElementType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t REListAccessorGetSize(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 80))(a2);
}

uint64_t REListAccessorReset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v9, a1);
  uint64_t v5 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v8, (uint64_t)v9);
  char v6 = *(uint64_t (**)(uint64_t, unsigned char *, uint64_t *, uint64_t))(v8[2] + 88);
  re::TypeInfo::TypeInfo((uint64_t)v10, (uint64_t)v8);
}

BOOL REListAccessorSupportsIndexer(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v3, a1);
  re::TypeInfo::TypeInfo((uint64_t)v2, (uint64_t)v3);
  return *(void *)(v2[2] + 96) != 0;
}

uint64_t REListAccessorGetElementAt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::TypeInfo((uint64_t)v6, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6[2] + 96))(a2, a3);
}

BOOL REListAccessorSupportsIterator(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v4, a1);
  re::TypeInfo::TypeInfo((uint64_t)&v2, (uint64_t)v4);
  return v3[13] && v3[14] && v3[15] != 0;
}

uint64_t REListIteratorCreate(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v5, (uint64_t)v6);
}

uint64_t REListIteratorNextElement(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 112))(a2);
}

uint64_t REListIteratorDestroy(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v5, (uint64_t)v6);
}

BOOL RETypeInfoIsDictionary(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 6;
}

uint64_t RETypeInfoGetDictionaryKeyType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t RETypeInfoGetDictionaryValueType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][10], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t REDictionaryAccessorGetSize(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 88))(a2);
}

uint64_t REDictionaryAccessorReset(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  uint64_t v3 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v6, (uint64_t)v7);
  unint64_t v4 = *(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(v6[2] + 96);
  re::TypeInfo::TypeInfo((uint64_t)v8, (uint64_t)v6);
}

uint64_t REDictionaryAddEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v8, a1);
  uint64_t v5 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v7, (uint64_t)v8);
}

uint64_t REDictionaryIteratorCreate(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v5, (uint64_t)v6);
}

uint64_t REDictionaryIteratorMoveNext(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 120))(a2);
}

uint64_t REDictionaryIteratorGetCurrentKey(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 128))(a2);
}

uint64_t REDictionaryIteratorGetCurrentValue(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return (*(uint64_t (**)(uint64_t))(v4[2] + 136))(a2);
}

uint64_t REDictionaryIteratorDestroy(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v6, a1);
  uint64_t v3 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v5, (uint64_t)v6);
}

BOOL RETypeInfoIsUnion(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 7;
}

uint64_t RETypeInfoGetUnionTagType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t RETypeInfoGetUnionMemberCount(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(unsigned int *)(v2[2] + 88);
}

uint64_t RETypeInfoGetUnionMember@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::unionMember((re::TypeInfo *)v7, a2, (uint64_t)v6);
  return re::TypeInfo::TypeInfo(a3, (uint64_t)v6);
}

BOOL REUnionAccessorGetActiveMemberType(uint64_t a1, char *a2, _OWORD *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::TypeInfo::TypeInfo((uint64_t)v10, a1);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v10);
  re::UnionAccessor::activeMemberType((re::UnionAccessor *)v11, a2, v8);
  int v5 = v8[0];
  if (v8[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v9);
    long long v6 = v11[1];
    *a3 = v11[0];
    a3[1] = v6;
  }
  return v5 != 0;
}

uint64_t REUnionAccessorReadTag(uint64_t a1, char *a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)v5);
  return re::UnionAccessor::readTag((re::UnionAccessor *)v4, a2);
}

unsigned char *REUnionAccessorReset(uint64_t a1, char *a2, const re::TypeInfo *a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v8, a1);
  int v5 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v7, (uint64_t)v8);
}

BOOL RETypeInfoIsObject(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 8;
}

BOOL RETypeInfoIsRootClass(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return (*(_DWORD *)(v2[2] + 76) & 0xFFFFFF) == 0;
}

BOOL RETypeInfoIsSuperClass(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(_DWORD *)(v2[2] + 80) > 1u;
}

BOOL RETypeInfoIsSubClass(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return (*(_DWORD *)(v2[2] + 76) & 0xFFFFFF) != 0;
}

BOOL RETypeInfoIsSubClassOf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  v6[0] = a2;
  v6[1] = a3;
  return re::TypeInfo::isSubClassOf(v7, v6);
}

uint64_t RETypeInfoGetRootClass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeInfo::rootClass((re::TypeInfo *)v5, (uint64_t)v4);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

BOOL RETypeInfoGetSuperClass(uint64_t a1, _OWORD *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  re::TypeInfo::TypeInfo((uint64_t)v8, a1);
  re::TypeRegistry::typeInfo(v8[0], v8[2][9], v6);
  int v3 = v6[0];
  if (v6[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v9, (uint64_t)&v7);
    long long v4 = v9[1];
    *a2 = v9[0];
    a2[1] = v4;
  }
  return v3 != 0;
}

uint64_t RETypeInfoGetSubClassCount(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return re::TypeInfo::subClassCount((re::TypeInfo *)v2);
}

uint64_t RETypeInfoGetSubClass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::subClass((re::TypeInfo *)v7, a2, (uint64_t)v6);
  return re::TypeInfo::TypeInfo(a3, (uint64_t)v6);
}

uint64_t RETypeInfoGetDerivedClassCount(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return (*(_DWORD *)(v2[2] + 80) - 1);
}

uint64_t RETypeInfoGetDerivedClass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeInfo::derivedClass((re::TypeInfo *)v7, a2, (uint64_t)v6);
  return re::TypeInfo::TypeInfo(a3, (uint64_t)v6);
}

uint64_t RETypeInfoGetObjectMemberCount(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v4, a1);
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v2, v4[0], v4[2]);
  return v3;
}

uint64_t *RETypeInfoGetObjectMemberByIndex@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v6, v7[0], v7[2]);
  return re::TypeMemberCollection::operator[](v6, a2, a3);
}

uint64_t RETypeInfoGetObjectMemberByName(uint64_t a1, const char *a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v21, a1);
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v9 = 2 * v5;
  v20[0] = 2 * v5;
  v20[1] = a2;
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v18, v21[0], v21[2]);
  uint64_t v10 = v19;
  if (v19)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v18[3];
    while (1)
    {
      if ((*(void *)(v12 + 8) ^ (unint64_t)v9) <= 1)
      {
        unint64_t v13 = *(const char **)(v12 + 16);
        if (v13 == a2 || !strcmp(v13, a2)) {
          break;
        }
      }
      ++v11;
      v12 += 40;
      if (v10 == v11) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = v18[2];
    int v16 = *(_DWORD *)(v18[0] + 24);
    *(void *)a3 = v18[0];
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 24) = v11;
    *(_DWORD *)(a3 + 28) = v16;
    uint64_t v14 = 1;
  }
  else
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)v20);
  return v14;
}

BOOL RETypeInfoIsPointer(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return v2[12] == 9;
}

uint64_t RETypeInfoGetReferencedType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeInfo::TypeInfo((uint64_t)v5, a1);
  re::TypeRegistry::typeInfo(v5[0], v5[2][9], v6);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v7);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t RETypeInfoGetPointerSharing(uint64_t a1)
{
  re::TypeInfo::TypeInfo((uint64_t)v2, a1);
  return *(unsigned __int8 *)(v2[2] + 80);
}

uint64_t RETypeInfoDereferencePointer(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)&v4, a1);
  return *(void *)a2;
}

BOOL RETypeInfoHasAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(void *)v7[2];
  v8[0] = a3;
  v8[1] = v5;
  int v9 = -1;
  return re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::containsKey(v7[0] + 768, v8);
}

uint64_t RETypeInfoGetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::TypeInfo::TypeInfo((uint64_t)v7, a1);
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(void *)v7[2];
  v8[0] = a3;
  v8[1] = v5;
  int v9 = -1;
  uint64_t result = re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v7[0] + 768, v8);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t RETypeMemberInfoGetName(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 16);
}

uint64_t RETypeMemberInfoGetOffset(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 16) + 24);
}

uint64_t RETypeMemberInfoGetMemberType@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  re::TypeRegistry::typeInfo(*a1, *a1[2], v5);
  re::TypeInfo::TypeInfo((uint64_t)v4, (uint64_t)&v6);
  return re::TypeInfo::TypeInfo(a2, (uint64_t)v4);
}

uint64_t RETypeMemberInfoGetMember(uint64_t a1, uint64_t a2)
{
  return a2 + *(unsigned int *)(*(void *)(a1 + 16) + 24);
}

BOOL RETypeMemberInfoHasAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)a1[1];
  int v5 = *((_DWORD *)a1 + 6);
  v7[0] = a3;
  v7[1] = v4;
  int v8 = v5;
  return re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::containsKey(v3 + 768, v7);
}

uint64_t RETypeMemberInfoGetAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)a1[1];
  int v5 = *((_DWORD *)a1 + 6);
  v7[0] = a3;
  v7[1] = v4;
  int v8 = v5;
  uint64_t result = re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v3 + 768, v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

re::TypeRegistry *RETypeRegistryCreate(_anonymous_namespace_ *a1)
{
}

uint64_t RETypeRegistryGetAllocator(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t RETypeRegistryDeclareType(_anonymous_namespace_ *a1, int a2, const char *a3)
{
  if (a3)
  {
    *(void *)&v9.var0 = 0;
    v9.var1 = "";
  }
  else
  {
    re::StringID::invalid((re::StringID *)&v9);
  }
  re::TypeRegistry::declareType((uint64_t)a1, a2, &v9, 1u, 0, &v8);
  uint64_t v6 = v8;
  re::StringID::destroyString((re::StringID *)&v9);
  return v6;
}

void RETypeRegistryDeclareTypeAlias(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (a4)
  {
    if (*a4)
    {
      *(void *)&v9.var0 = 0;
      v9.var1 = "";
      v8[0] = a2;
      v8[1] = a3;
      re::TypeRegistry::declareTypeAlias(a1, (uint64_t)v8, &v9);
      re::StringID::destroyString((re::StringID *)&v9);
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) typeAlias must not be null.", "cTypeAlias", "RETypeRegistryDeclareTypeAlias", 749);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) typeAlias must not be empty.", "strlen(cTypeAlias) > 0", "RETypeRegistryDeclareTypeAlias", 750);
  _os_crash();
  __break(1u);
}

BOOL RETypeRegistryContainsTypeID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a1 && re::DataArray<re::internal::TypeInfoIndex>::tryGet(a1 + 32, a3) != 0;
}

BOOL RETypeRegistryContainsTypeInfo(uint64_t a1, uint64_t a2)
{
  re::TypeInfo::TypeInfo((uint64_t)v4, a2);
  return v4[0] == a1 && re::DataArray<re::internal::TypeInfoIndex>::tryGet(a1 + 32, *(void *)v4[2]) != 0;
}

BOOL RETypeRegistryContainsTypeName(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (*a2)
    {
      char v3 = a2[1];
      if (v3)
      {
        uint64_t v4 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v2 = 31 * v2 + v3;
          int v5 = *v4++;
          char v3 = v5;
        }
        while (v5);
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  v8[0] = 2 * v2;
  v8[1] = a2;
  BOOL v6 = re::HashTable<re::StringID,re::DataArrayHandle<re::internal::TypeInfoIndex>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(a1 + 200, v8);
  re::StringID::destroyString((re::StringID *)v8);
  return v6;
}

uint64_t RETypeRegistryGetSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t RETypeRegistryGetTypeId(uint64_t a1, char *a2)
{
  uint64_t v2 = a1;
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        int v5 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v8[0] = 2 * v3;
  v8[1] = a2;
  if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 200, v8))uint64_t v2 = 0; {
  re::StringID::destroyString((re::StringID *)v8);
  }
  return v2;
}

uint64_t RETypeRegistryGetTypeCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    return *(unsigned __int8 *)(re::DataArray<re::internal::TypeInfoIndex>::tryGet(a1 + 32, a3) + 3);
  }
  else {
    return 0;
  }
}

BOOL RETypeRegistryGetTypeInfoByTypeID(re *a1, re *a2, re *a3, _OWORD *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v10[0] = a2;
  v10[1] = a3;
  re::TypeRegistry::typeInfo(a1, v10, v8);
  int v5 = v8[0];
  if (v8[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v9);
    long long v6 = v11[1];
    *a4 = v11[0];
    a4[1] = v6;
  }
  return v5 != 0;
}

BOOL RETypeRegistryGetTypeInfoByTypeName(re::TypeRegistry *a1, char *a2, _OWORD *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        long long v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  v13[0] = 2 * v4;
  v13[1] = a2;
  re::TypeRegistry::typeInfo(a1, (const re::StringID *)v13, v11);
  int v8 = v11[0];
  if (v11[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v12);
    long long v9 = v14[1];
    *a3 = v14[0];
    a3[1] = v9;
  }
  re::StringID::destroyString((re::StringID *)v13);
  return v8 != 0;
}

unsigned char *RETypeRegistryGetTypeName(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v3 = re::TypeRegistry::typeName(a1, v7);
  unint64_t v5 = *(void *)v3;
  uint64_t result = (unsigned char *)*((void *)v3 + 1);
  if (v5 >= 0xFFFFFFFFFFFFFFFELL && (v5 & 1) == 0 && !*result) {
    return 0;
  }
  return result;
}

uint64_t RETypeRegistryGetRevisionNumber(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t RETypeRegistryIterateTypes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  uint64_t result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v15, a1 + 32, 0);
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  uint64_t v15 = a1;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  uint64_t v8 = (unsigned __int16)v7;
  uint64_t v9 = v7 & 0xFFFF0000;
  if (v4 != v6 || v8 != 0xFFFF || v9 != 4294901760)
  {
    do
    {
      unint64_t v12 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v16);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a2 + 16))(a2, v15, v12);
      if (!result) {
        break;
      }
      uint64_t result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v16);
      BOOL v13 = v16 == v4 && (unsigned __int16)v17 == 0xFFFF;
    }
    while (!v13 || WORD1(v17) != 0xFFFF);
  }
  return result;
}

_anonymous_namespace_ *RETypeRegistryRemoveType(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v3[0] = a2;
    v3[1] = a3;
    return re::TypeRegistry::removeType(result, v3);
  }
  return result;
}

void REGlobalTypeRegistryWithReadLock(uint64_t a1)
{
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v2);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v2);
}

void REGlobalTypeRegistryWithReadWriteLock(uint64_t a1)
{
  uint64_t v3 = re::introspectionSharedMutex(v2);
  std::__shared_mutex_base::lock(v3);
  std::__shared_mutex_base::unlock(v3);
}

void *RETypeBuilderCreate(_anonymous_namespace_ *a1)
{
  char v2 = re::globalAllocators(v1);
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 512, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  void *v3 = &unk_26E734768;
  return v3;
}

void RETypeBuilderReset(uint64_t a1, uint64_t a2)
{
}

uint64_t RETypeBuilderCommitToRegistry(uint64_t a1, re::TypeRegistry *a2)
{
  re::TypeBuilder::commitTo((re::TypeBuilder *)(a1 + 24), a2, &v3);
  return v3;
}

void RETypeBuilderCommitWithTypeID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  re::TypeBuilder::commitTo((unsigned __int8 *)(a1 + 24), v3);
}

uint64_t RETypeBuilderSetConstructor(uint64_t a1, uint64_t a2)
{
  return re::TypeBuilder::setConstructor(a1 + 24, a2);
}

uint64_t RETypeBuilderSetDestructor(uint64_t a1, uint64_t a2)
{
  return re::TypeBuilder::setDestructor(a1 + 24, a2);
}

void RETypeBuilderBeginBasicType(uint64_t a1, const char *a2, int a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t v12 = a1 + 24;
  v13[0] = 0;
  v13[1] = (uint64_t)"";
  *(_DWORD *)(a1 + + 56) = -1;
  *(_OWORD *)(a1 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(unsigned char *)(a1 + 124) = 0;
  re::TypeBuilder::setSharedInfo(v12, 1, v13, a3, 1, a4, a5);
  *(unsigned char *)(a1 + 124) = a6;
  re::StringID::destroyString((re::StringID *)v13);
}

void RETypeBuilderBeginEnumType(_anonymous_namespace_ *a1, const char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (uint64_t)a1 + 24;
  v14[0] = 0;
  v14[1] = (uint64_t)"";
  int v12 = re::TypeAvailabilityUtilities::convertToRealityKitRelease(a4);
  v13[0] = a5;
  v13[1] = a6;
  re::TypeBuilder::beginEnumType(v11, v14, a3, v12, (uint64_t)v13);
  re::StringID::destroyString((re::StringID *)v14);
}

void RETypeBuilderAddEnumConstant(_anonymous_namespace_ *a1, uint64_t a2, const char *a3)
{
  unint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 24);
  *(void *)&v6.var0 = 0;
  v6.var1 = "";
  re::TypeBuilder::addEnumConstant(v5, a2, &v6);
  re::StringID::destroyString((re::StringID *)&v6);
}

void RETypeBuilderBeginArrayType(_anonymous_namespace_ *a1, const char *a2, re *a3, re *a4, unint64_t a5)
{
  uint64_t v9 = (uint64_t)a1 + 24;
  v11[0] = 0;
  v11[1] = (uint64_t)"";
  v10[0] = a3;
  v10[1] = a4;
  re::TypeBuilder::beginArrayType(v9, v11, v10, a5);
  re::StringID::destroyString((re::StringID *)v11);
}

void RETypeBuilderBeginObjectType(_anonymous_namespace_ *a1, const char *a2, int a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (uint64_t)a1 + 24;
  v18[0] = 0;
  v18[1] = (uint64_t)"";
  int v16 = re::TypeAvailabilityUtilities::convertToRealityKitRelease(a4);
  v17[0] = a7;
  v17[1] = a8;
  re::TypeBuilder::beginObjectType(v15, v18, a3, v16, a5, a6, (uint64_t)v17);
  re::StringID::destroyString((re::StringID *)v18);
}

uint64_t RETypeBuilderAddObjectMember(unsigned int *a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  uint64_t v7 = (uint64_t)(a1 + 6);
  uint64_t v8 = a1[88];
  v12[0] = a2;
  v12[1] = a3;
  v11[0] = 0;
  v11[1] = (uint64_t)"";
  uint64_t v9 = re::TypeBuilder::addObjectMember(v7, v8, (uint64_t)v12, v11, a5);
  re::StringID::destroyString((re::StringID *)v11);
  return v9;
}

uint64_t RETypeBuilderAddObjectMemberWithTag(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  uint64_t v9 = (uint64_t)a1 + 24;
  v13[0] = a3;
  v13[1] = a4;
  v12[0] = 0;
  v12[1] = (uint64_t)"";
  uint64_t v10 = re::TypeBuilder::addObjectMember(v9, a2, (uint64_t)v13, v12, a6);
  re::StringID::destroyString((re::StringID *)v12);
  return v10;
}

void RETypeBuilderBeginPointerType(uint64_t a1, const char *a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v15 = a1 + 24;
  v16[0] = 0;
  v16[1] = (uint64_t)"";
  *(_DWORD *)(a1 + + 56) = -1;
  *(_OWORD *)(a1 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(void *)(a1 + 128) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 152) = 0;
  re::TypeBuilder::setSharedInfo(v15, 9, v16, a3, -1, a4, a5);
  *(void *)(a1 + 128) = a7;
  *(unsigned char *)(a1 + 136) = a8;
  re::StringID::destroyString((re::StringID *)v16);
}

uint64_t RETypeBuilderAddAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  v7[0] = a2;
  v7[1] = a3;
  return re::TypeBuilder::addAttribute((unsigned char *)(a1 + 24), (uint64_t)v7, a4, a5, a6);
}

void *re::Shareable<re::TypeBuilder>::~Shareable(void *a1, uint64_t a2)
{
  *a1 = &unk_26E734768;
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)(a1 + 3), a2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::TypeBuilder>::~Shareable(void *a1, uint64_t a2)
{
  *a1 = &unk_26E734768;
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)(a1 + 3), a2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *REARSegmentationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REARSegmentationComponentSetSegmentationBuffer(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 32), &v5);
  if (v5) {
}
  }

id REARSegmentationComponentGetSegmentationBuffer(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  return v1;
}

void REARSegmentationComponentSetEstimatedDepthData(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 40), &v5);
  if (v5) {
}
  }

id REARSegmentationComponentGetEstimatedDepthData(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  return v1;
}

void REARSegmentationComponentSetCameraTextureY(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 48), &v5);
  if (v5) {
}
  }

id REARSegmentationComponentGetCameraTextureY(uint64_t a1)
{
  id v1 = *(id *)(a1 + 48);
  return v1;
}

void REARSegmentationComponentSetCameraTextureCbCr(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 56), &v5);
  if (v5) {
}
  }

id REARSegmentationComponentGetCameraTextureCbCr(uint64_t a1)
{
  id v1 = *(id *)(a1 + 56);
  return v1;
}

uint64_t REMeshAssetGetModelCount(uint64_t a1)
{
  if (result) {
    return *(void *)(result + 416);
  }
  return result;
}

uint64_t anonymous namespace'::unpackMesh(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REMeshAssetGetMaxMaterialIndex(uint64_t a1)
{
  if (v1 && (uint64_t v2 = v1[52]) != 0)
  {
    id v3 = (void *)v1[54];
    uint64_t v4 = v1[55] + 8;
    id v5 = &v3[v2];
    int v6 = -1;
    do
    {
      uint64_t v7 = re::DataArray<re::MeshModel>::get(v4, *v3);
      uint64_t v8 = *(void *)(v7 + 56);
      if (v8)
      {
        uint64_t v9 = 560 * v8;
        uint64_t v10 = (unsigned __int16 *)(*(void *)(v7 + 64) + 474);
        do
        {
          if (v6 <= *v10) {
            int v6 = *v10;
          }
          v10 += 280;
          v9 -= 560;
        }
        while (v9);
      }
      ++v3;
    }
    while (v3 != v5);
  }
  else
  {
    return -1;
  }
  return v6;
}

uint64_t REMeshAssetGetModelPartMaterialIndex(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (result) {
    return *(unsigned __int16 *)(result + 474);
  }
  return result;
}

uint64_t anonymous namespace'::unpackPart(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v7 = result;
    if (*(void *)(result + 56) <= a3)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v8 = (id)CoreRELog::log;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(v7 + 56);
        int v10 = 136315650;
        uint64_t v11 = a4;
        __int16 v12 = 2048;
        unint64_t v13 = a3;
        __int16 v14 = 2048;
        uint64_t v15 = v9;
        _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "%s partIndex %zu exceeds part count %zu", (uint8_t *)&v10, 0x20u);
      }

      return 0;
    }
    else
    {
      return *(void *)(result + 64) + 560 * a3;
    }
  }
  return result;
}

uint64_t REMeshAssetGetModelName(uint64_t a1, unint64_t a2)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t anonymous namespace'::unpackModel(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (v5[52] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v6[52];
      int v12 = 136315650;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      unint64_t v15 = a2;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "%s modelIndex %zu exceeds model count %zu", (uint8_t *)&v12, 0x20u);
    }

    return 0;
  }
  uint64_t v7 = *(void *)(v5[54] + 8 * a2);
  uint64_t v8 = v5[55] + 8;
  return re::DataArray<re::MeshModel>::get(v8, v7);
}

uint64_t REMeshAssetGetModelVertexCount(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(result + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = result;
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = 560 * v3;
  uint64_t v7 = (_DWORD *)(v5 + 468);
  do
  {
    uint64_t result = (*v7 + result);
    v7 += 140;
    v6 -= 560;
  }
  while (v6);
  return result;
}

uint64_t REMeshAssetGetModelPartCount(uint64_t a1, unint64_t a2)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t REMeshAssetGetModelPartVertexCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (result) {
    return *(unsigned int *)(result + 468);
  }
  return result;
}

uint64_t REMeshAssetGetSkeletonCount(uint64_t a1)
{
  if (result) {
    return *(void *)(result + 936);
  }
  return result;
}

uint64_t REMeshAssetGetTotalSkeletonCount(uint64_t a1)
{
  if (result) {
    return *(void *)(result + 936);
  }
  return result;
}

uint64_t REMeshAssetGetSkeletonAtIndex(uint64_t a1, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 224) <= a2) {
      return 0;
    }
    else {
      return *(void *)(*(void *)(result + 240) + 24 * a2);
    }
  }
  return result;
}

re::MeshAsset *REMeshAssetGetSkeletonName(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v4 = result;
    if (*((void *)result + 117) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *((void *)v4 + 117);
        int v7 = 134218240;
        unint64_t v8 = a2;
        __int16 v9 = 2048;
        uint64_t v10 = v6;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonName skeletonIndex %zu exceeds skeleton count %zu", (uint8_t *)&v7, 0x16u);
      }

      return 0;
    }
    else
    {
      return *(re::MeshAsset **)(re::MeshAsset::skeletonAtIndex(result, a2) + 8);
    }
  }
  return result;
}

re::MeshAsset *REMeshAssetGetJointCount(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return REMeshAssetGetSkeletonJointCount(a1, a3);
}

re::MeshAsset *REMeshAssetGetSkeletonJointCount(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v4 = result;
    if (*((void *)result + 117) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *((void *)v4 + 117);
        int v7 = 134218240;
        unint64_t v8 = a2;
        __int16 v9 = 2048;
        uint64_t v10 = v6;
        _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonJointCount skeletonIndex %zu exceeds skeleton count %zu", (uint8_t *)&v7, 0x16u);
      }

      return 0;
    }
    else
    {
      return *(re::MeshAsset **)(re::MeshAsset::skeletonAtIndex(result, a2) + 24);
    }
  }
  return result;
}

uint64_t REMeshAssetGetJointParent(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  return REMeshAssetGetSkeletonJointParent(a1, a3, a4);
}

uint64_t REMeshAssetGetSkeletonJointParent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!v5) {
    return -1;
  }
  uint64_t v6 = v5;
  if (*((void *)v5 + 117) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *((void *)v6 + 117);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 2048;
      uint64_t v19 = v13;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonJointParent skeletonIndex %zu exceeds skeleton count %zu", buf, 0x16u);
    }

    return -1;
  }
  int v7 = (void *)re::MeshAsset::skeletonAtIndex(v5, a2);
  __int16 v9 = v7;
  if (v7[3] <= a3)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_14:
      __int16 v14 = (id)CoreRELog::log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v9[3];
        *(_DWORD *)long long buf = 134218240;
        unint64_t v17 = a3;
        __int16 v18 = 2048;
        uint64_t v19 = v15;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBindPoseTransform jointIndex %zu exceeds joint count %zu", buf, 0x16u);
      }

      return -1;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_14;
  }
  unint64_t v10 = v7[6];
  if (v10 <= a3)
  {
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v10);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(v7[7] + 4 * a3) == -1) {
    return -1;
  }
  else {
    return *(unsigned int *)(v7[7] + 4 * a3);
  }
}

double REMeshAssetGetBindPoseTransform(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  return REMeshAssetGetSkeletonBindPoseTransform(a1, a3, a4);
}

double REMeshAssetGetSkeletonBindPoseTransform(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!v5)
  {
LABEL_15:
    *(void *)&long long v11 = 0;
    return *(double *)&v11;
  }
  uint64_t v6 = v5;
  if (*((void *)v5 + 117) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *((void *)v6 + 117);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v18 = a2;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonBindPoseTransform skeletonIndex %zu exceeds skeleton count %zu", buf, 0x16u);
    }

    goto LABEL_15;
  }
  int v7 = (void *)re::MeshAsset::skeletonAtIndex(v5, a2);
  __int16 v9 = v7;
  if (v7[3] <= a3)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      __int16 v14 = (id)CoreRELog::log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v9[3];
        *(_DWORD *)long long buf = 134218240;
        unint64_t v18 = a3;
        __int16 v19 = 2048;
        uint64_t v20 = v15;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBindPoseTransform jointIndex %zu exceeds joint count %zu", buf, 0x16u);
      }

      goto LABEL_15;
    }
LABEL_17:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  unint64_t v10 = v7[9];
  if (v10 <= a3)
  {
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v10);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  long long v11 = *(_OWORD *)(v7[10] + 48 * a3);
  return *(double *)&v11;
}

double REMeshAssetGetInverseBindPoseTransform(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  *(void *)&double result = REMeshAssetGetSkeletonInverseBindPoseTransform(a1, a3, a4).n128_u64[0];
  return result;
}

__n128 REMeshAssetGetSkeletonInverseBindPoseTransform(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (v5 && (uint64_t v6 = v5, *(unsigned char *)(v5 + 952)) && *(void *)(v5 + 440))
  {
    re::MeshAsset::skeletonAtIndex((re::MeshAsset *)v5, a2);
    uint64_t v7 = *(void *)(v6 + 440);
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    uint64_t v8 = 416;
    if (!*(unsigned char *)(v6 + 952)) {
      uint64_t v8 = 24;
    }
    uint64_t v9 = *(void *)(v6 + v8);
    if (!v9) {
      goto LABEL_18;
    }
    unint64_t v10 = 0;
    uint64_t v11 = v7 + 8;
    do
    {
      unint64_t v12 = *(void *)(v6 + 416);
      if (v12 <= v10)
      {
        uint64_t v19 = 0;
        memset(v28, 0, sizeof(v28));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v20 = 136315906;
        uint64_t v21 = "operator[]";
        __int16 v22 = 1024;
        int v23 = 797;
        __int16 v24 = 2048;
        unint64_t v25 = v10;
        __int16 v26 = 2048;
        unint64_t v27 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v13 = *(void *)(re::DataArray<re::MeshModel>::get(v11, *(void *)(*(void *)(v6 + 432) + 8 * v10)) + 176);
      if (v13 && *(void *)(v13 + 32) > a2)
      {
        re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(*(void *)(v13 + 40) + 16 * a2), (uint64_t)v28);
        if (LOBYTE(v28[0])) {
          re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)v17, (uint64_t *)v28 + 1);
        }
        re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v28);
      }
      ++v10;
    }
    while (v9 != v10);
    if (a3 < *((void *)&v17[0] + 1) >> 6) {
      __int16 v14 = (long long *)(*(void *)&v17[0] + (a3 << 6));
    }
    else {
LABEL_18:
    }
      __int16 v14 = (long long *)MEMORY[0x263EF89A8];
    long long v16 = *v14;
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v17);
    return (__n128)v16;
  }
  else
  {
    return *(__n128 *)MEMORY[0x263EF89A8];
  }
}

void REMeshAssetCopyInverseBindPoseTransforms(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
}

void REMeshAssetCopySkeletonInverseBindPoseTransforms(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(unsigned char *)(v5 + 952))
    {
      uint64_t v7 = *(void *)(v5 + 440);
      if (v7)
      {
        uint64_t v16 = 0;
        long long v14 = 0u;
        long long v15 = 0u;
        *(_OWORD *)__src = 0u;
        uint64_t v8 = *(void *)(v5 + 416);
        if (v8)
        {
          unint64_t v9 = 0;
          uint64_t v10 = v7 + 8;
          do
          {
            unint64_t v11 = *(void *)(v6 + 416);
            if (v11 <= v9)
            {
              uint64_t v17 = 0;
              memset(v26, 0, sizeof(v26));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v18 = 136315906;
              uint64_t v19 = "operator[]";
              __int16 v20 = 1024;
              int v21 = 797;
              __int16 v22 = 2048;
              unint64_t v23 = v9;
              __int16 v24 = 2048;
              unint64_t v25 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            uint64_t v12 = *(void *)(re::DataArray<re::MeshModel>::get(v10, *(void *)(*(void *)(v6 + 432) + 8 * v9)) + 176);
            if (v12 && *(void *)(v12 + 32) > a2)
            {
              re::ReadOnlyCPUAccessibleBufferSliceContent::make((void *)(*(void *)(v12 + 40) + 16 * a2), (uint64_t)v26);
              if (LOBYTE(v26[0])) {
                re::ReadOnlyCPUAccessibleBufferSliceContent::operator=((uint64_t *)__src, (uint64_t *)v26 + 1);
              }
              re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v26);
            }
            ++v9;
          }
          while (v8 != v9);
          if (__src[1]) {
            memcpy(a3, __src[0], (size_t)__src[1]);
          }
        }
        re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)__src);
      }
    }
  }
}

double REAssetCalculateAABBFromMesh(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  if (v5)
  {
    v11[0] = a2;
    v11[1] = a3;
    uint64_t v11[2] = a4;
    void v11[3] = a5;
    re::MeshAsset::aabbFromMesh(v5, v11, (uint64_t)&v12);
    return *(double *)&v12;
  }
  else
  {
    *(void *)&double result = vdupq_n_s32(0x7F800000u).u64[0];
  }
  return result;
}

re::MeshAsset *REMeshAssetGetJointName(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  return REMeshAssetGetSkeletonJointName(a1, a3, a4);
}

re::MeshAsset *REMeshAssetGetSkeletonJointName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v6 = result;
    if (*((void *)result + 117) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *((void *)v6 + 117);
        int v13 = 134218240;
        unint64_t v14 = a2;
        __int16 v15 = 2048;
        uint64_t v16 = v10;
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonJointName skeletonIndex %zu exceeds skeleton count %zu", (uint8_t *)&v13, 0x16u);
      }
    }
    else
    {
      uint64_t v7 = re::MeshAsset::skeletonAtIndex(result, a2);
      uint64_t v8 = v7;
      if (*(void *)(v7 + 24) > a3) {
        return *(re::MeshAsset **)(*(void *)(v7 + 32) + 16 * a3 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(v8 + 24);
        int v13 = 134218240;
        unint64_t v14 = a3;
        __int16 v15 = 2048;
        uint64_t v16 = v12;
        _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetSkeletonJointName jointIndex %zu exceeds joint count %zu", (uint8_t *)&v13, 0x16u);
      }
    }
    return 0;
  }
  return result;
}

uint64_t REMeshAssetGetBlendShapeGroupCount(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 952))
    {
      if (*(void *)(result + 416) <= a2)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v7 = (id)CoreRELog::log;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = 416;
          if (!*(unsigned char *)(v4 + 952)) {
            uint64_t v8 = 24;
          }
          uint64_t v9 = *(void *)(v4 + v8);
          int v10 = 134218240;
          unint64_t v11 = a2;
          __int16 v12 = 2048;
          uint64_t v13 = v9;
          _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeGroupCount modelIndex %zu exceeds model count %zu", (uint8_t *)&v10, 0x16u);
        }
      }
      else
      {
        uint64_t v5 = *(void *)(re::DataArray<re::MeshModel>::get(*(void *)(result + 440) + 8, *(void *)(*(void *)(result + 432) + 8 * a2))+ 96);
        if (v5) {
          return *(void *)(v5 + 64);
        }
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v6 = (id)CoreRELog::log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeGroupCount called with unregistered mesh asset ", (uint8_t *)&v10, 2u);
      }
    }
    return 0;
  }
  return result;
}

uint64_t REMeshAssetGetBlendShapeGroupMeshPartIndex(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!v5) {
    return (unsigned __int16)-1;
  }
  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    LOWORD(v23) = 0;
    __int16 v15 = "REMeshAssetGetBlendShapeGroupMeshPartIndex called with unregistered mesh asset ";
    uint64_t v16 = v14;
    uint32_t v17 = 2;
    goto LABEL_24;
  }
  if (*(void *)(v5 + 416) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    uint64_t v18 = 416;
    if (!*(unsigned char *)(v6 + 952)) {
      uint64_t v18 = 24;
    }
    uint64_t v19 = *(void *)(v6 + v18);
    int v23 = 134218240;
    unint64_t v24 = a2;
    __int16 v25 = 2048;
    uint64_t v26 = v19;
    __int16 v15 = "REMeshAssetGetBlendShapeGroupMeshPartIndex modelIndex %zu exceeds model count %zu";
    uint64_t v16 = v14;
    uint32_t v17 = 22;
LABEL_24:
    _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v23, v17);
LABEL_25:

    return (unsigned __int16)-1;
  }
  uint64_t v7 = re::DataArray<re::MeshModel>::get(*(void *)(v5 + 440) + 8, *(void *)(*(void *)(v5 + 432) + 8 * a2));
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v7 + 96);
  if (!v9 || v9[8] <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v20 = (id)CoreRELog::log;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(v8 + 96);
      if (v21) {
        uint64_t v21 = *(void *)(v21 + 64);
      }
      int v23 = 134218240;
      unint64_t v24 = a3;
      __int16 v25 = 2048;
      uint64_t v26 = v21;
      _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeGroupMeshPartIndex groupIndex %zu exceeds group count %zu", (uint8_t *)&v23, 0x16u);
    }

    return (unsigned __int16)-1;
  }
  uint64_t v10 = *(void *)(v7 + 56);
  if (!v10) {
    return (unsigned __int16)-1;
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v9[5] <= v11 ? 0xFFFFFFFFLL : *(unsigned int *)(v9[6] + 4 * v11);
    if (v12 == a3) {
      break;
    }
    ++v11;
    unsigned __int16 v13 = -1;
    if (v10 == v11) {
      return v13;
    }
  }
  return (unsigned __int16)v11;
}

uint64_t REMeshAssetGetBlendShapeGroupDefinitionCount(uint64_t a1, const DeformationModelData *a2, const DeformationModelData *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    LOWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
    unsigned __int16 v13 = "REMeshAssetGetBlendShapeGroupDefinitionCount called with unregistered mesh asset";
    uint64_t v14 = v12;
    uint32_t v15 = 2;
    goto LABEL_19;
  }
  if (*(void *)(v5 + 416) <= (unint64_t)a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v16 = 416;
    if (!*(unsigned char *)(v6 + 952)) {
      uint64_t v16 = 24;
    }
    uint64_t v17 = *(void *)(v6 + v16);
    int v20 = 134218240;
    uint64_t v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = v17;
    unsigned __int16 v13 = "REMeshAssetGetBlendDefinitionCount modelIndex %zu exceeds model count %zu";
    uint64_t v14 = v12;
    uint32_t v15 = 22;
LABEL_19:
    _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v20, v15);
LABEL_20:

    return 0;
  }
  uint64_t v7 = re::DataArray<re::MeshModel>::get(*(void *)(v5 + 440) + 8, *(void *)(*(void *)(v5 + 432) + 8 * (void)a2));
  uint64_t v9 = (uint64_t *)(v7 + 96);
  uint64_t v8 = *(void *)(v7 + 96);
  if (!v8 || *(void *)(v8 + 64) <= (unint64_t)a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v18 = (id)CoreRELog::log;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *v9;
      if (*v9) {
        uint64_t v19 = *(void *)(v19 + 64);
      }
      int v20 = 134218240;
      uint64_t v21 = a3;
      __int16 v22 = 2048;
      uint64_t v23 = v19;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendDefinitionCount groupIndex %zu exceeds group count %zu", (uint8_t *)&v20, 0x16u);
    }

    return 0;
  }
  uint64_t v10 = (re::BlendShapeModelUtil *)(v7 + 96);
  return re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v10, a3);
}

uint64_t REMeshAssetGetBlendShapeDefinitionCountForPart(uint64_t a1, const DeformationModelData *a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (!*(unsigned char *)(v5 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int16 v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeDefinitionCountForPart called with unregistered mesh asset", (uint8_t *)&v20, 2u);
    }

    return 0;
  }
  if (*(void *)(v5 + 416) <= (unint64_t)a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    uint64_t v15 = 416;
    if (!*(unsigned char *)(v6 + 952)) {
      uint64_t v15 = 24;
    }
    uint64_t v16 = *(void *)(v6 + v15);
    int v20 = 134218240;
    uint64_t v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = v16;
    uint64_t v17 = "REMeshAssetGetBlendShapeDefinitionCountForPart modelIndex %zu exceeds model count %zu";
    goto LABEL_33;
  }
  uint64_t v7 = re::DataArray<re::MeshModel>::get(*(void *)(v5 + 440) + 8, *(void *)(*(void *)(v5 + 432) + 8 * (void)a2));
  uint64_t v9 = (uint64_t *)(v7 + 96);
  uint64_t v8 = *(void **)(v7 + 96);
  if (!v8) {
    return 0;
  }
  if (v8[5] <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    uint64_t v18 = *v9;
    if (*v9) {
      uint64_t v18 = *(void *)(v18 + 40);
    }
    int v20 = 134218240;
    uint64_t v21 = a2;
    __int16 v22 = 2048;
    uint64_t v23 = v18;
    uint64_t v17 = "REMeshAssetGetBlendShapeDefinitionCountForPart partIndex %zu exceeds part count %zu";
    goto LABEL_33;
  }
  uint64_t v10 = (const DeformationModelData *)*(unsigned int *)(v8[6] + 4 * a3);
  if (v8[8] <= (unint64_t)v10)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    uint64_t v19 = *v9;
    if (*v9) {
      uint64_t v19 = *(void *)(v19 + 64);
    }
    int v20 = 134218240;
    uint64_t v21 = v10;
    __int16 v22 = 2048;
    uint64_t v23 = v19;
    uint64_t v17 = "REMeshAssetGetBlendShapeDefinitionCountForPart groupIndex %zu exceeds group count %zu";
LABEL_33:
    _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v20, 0x16u);
LABEL_34:

    return 0;
  }
  unint64_t v11 = (re::BlendShapeModelUtil *)(v7 + 96);
  return re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v11, v10);
}

uint64_t REMeshAssetGetBlendShapeOffsetsForPart(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (!*(unsigned char *)(v7 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v21 = (id)CoreRELog::log;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeOffsetsForPart called with unregistered mesh asset", buf, 2u);
    }

    return 0;
  }
  if (*(void *)(v7 + 416) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v22 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    uint64_t v23 = 416;
    if (!*(unsigned char *)(v8 + 952)) {
      uint64_t v23 = 24;
    }
    uint64_t v24 = *(void *)(v8 + v23);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v24;
    __int16 v25 = "REMeshAssetGetBlendShapeOffsetsForPart modelIndex %zu exceeds model count %zu";
    goto LABEL_34;
  }
  uint64_t v9 = re::DataArray<re::MeshModel>::get(*(void *)(v7 + 440) + 8, *(void *)(*(void *)(v7 + 432) + 8 * a2));
  unint64_t v11 = (re::BlendShapeModelUtil *)(v9 + 96);
  uint64_t v10 = *(void **)(v9 + 96);
  if (!v10 || v10[5] <= a3)
  {
    if (CoreRELog::onceToken == -1) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
  uint64_t v12 = (const DeformationModelData *)*(unsigned int *)(v10[6] + 4 * a3);
  if (v10[8] <= (unint64_t)v12)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v22 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    uint64_t v29 = *(void *)v11;
    if (*(void *)v11) {
      uint64_t v29 = *(void *)(v29 + 64);
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v29;
    __int16 v25 = "REMeshAssetGetBlendShapeOffsetsForPart groupIndex %zu exceeds group count %zu";
    goto LABEL_34;
  }
  if (re::BlendShapeModelUtil::blendShapeTargetCountForGroup((re::BlendShapeModelUtil *)(v9 + 96), v12) <= a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v22 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v11, v12);
    __int16 v25 = "REMeshAssetGetBlendShapeOffsetsForPart defIndex %zu exceeds definition count %zu";
    goto LABEL_34;
  }
  re::BlendShapeModelUtil::makeBlendShapeGroupDefinitionFromGroup(v11, v12, &v36);
  if (!(_BYTE)v36)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v30 = (id)CoreRELog::log;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message((std::string *)buf, &v37);
      unint64_t v31 = buf[23] >= 0 ? buf : *(const char **)buf;
      *(_DWORD *)CFRange v41 = 136315138;
      long long v42 = v31;
      _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeOffsetsForPart %s", v41, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v27 = 0;
LABEL_64:
    re::Result<re::BlendShapeGroupDefinition,re::DetailedError>::~Result((uint64_t)&v36);
    return v27;
  }
  unsigned __int16 v13 = (_anonymous_namespace_ *)re::FixedArray<re::BlendShapeDefinition>::operator[](v38, v39, a4);
  unint64_t v14 = *((void *)v13 + 6) / 3uLL;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  long long v35 = 0;
  if (!v34)
  {
    int v20 = 0;
LABEL_58:
    re::Data::makeDataWithBytes(v35, v20, buf);
    uint64_t v27 = *(void *)buf;
    if (*(void *)buf)
    {
      CFRetain(*(id *)buf);
      int v32 = *(void **)buf;
    }
    else
    {
      int v32 = 0;
    }

    if (v33 && v34) {
      (*(void (**)(void))(*(void *)v33 + 40))();
    }
    goto LABEL_64;
  }
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v17 = *((void *)v13 + 6);
    if (v17 <= v15) {
      break;
    }
    *(_DWORD *)((char *)v35 + v16) = *(_DWORD *)(*((void *)v13 + 7) + 4 * v15);
    uint64_t v18 = (re::BlendShapeModelUtil *)(v15 + 1);
    unint64_t v17 = *((void *)v13 + 6);
    if (v17 <= v15 + 1) {
      goto LABEL_66;
    }
    unint64_t v17 = v34;
    if (v34 <= (unint64_t)v11) {
      goto LABEL_67;
    }
    *(_DWORD *)((char *)v35 + v16 + 4) = *(_DWORD *)(*((void *)v13 + 7) + 4 * v15 + 4);
    uint64_t v19 = (re::BlendShapeModelUtil *)(v15 + 2);
    unint64_t v17 = *((void *)v13 + 6);
    if (v17 <= v15 + 2) {
      goto LABEL_68;
    }
    unint64_t v17 = v34;
    if (v34 <= (unint64_t)v11) {
      goto LABEL_69;
    }
    *(_DWORD *)((char *)v35 + v16 + 8) = *(_DWORD *)(*((void *)v13 + 7) + 4 * v15 + 8);
    unint64_t v11 = (re::BlendShapeModelUtil *)((char *)v11 + 1);
    v16 += 16;
    v15 += 3;
    if (v34 <= (unint64_t)v11)
    {
      int v20 = (const void *)(16 * v34);
      goto LABEL_58;
    }
  }
  uint64_t v40 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)CFRange v41 = 136315906;
  long long v42 = "operator[]";
  __int16 v43 = 1024;
  int v44 = 476;
  __int16 v45 = 2048;
  uint64_t v46 = (re::BlendShapeModelUtil *)v15;
  __int16 v47 = 2048;
  unint64_t v48 = v17;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_66:
  uint64_t v40 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  memset(buf, 0, sizeof(buf));
  unint64_t v11 = v18;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)CFRange v41 = 136315906;
  long long v42 = "operator[]";
  __int16 v43 = 1024;
  int v44 = 476;
  __int16 v45 = 2048;
  uint64_t v46 = v11;
  __int16 v47 = 2048;
  unint64_t v48 = v17;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_67:
  uint64_t v40 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)CFRange v41 = 136315906;
  long long v42 = "operator[]";
  __int16 v43 = 1024;
  int v44 = 468;
  __int16 v45 = 2048;
  uint64_t v46 = v11;
  __int16 v47 = 2048;
  unint64_t v48 = v17;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_68:
  uint64_t v40 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  memset(buf, 0, sizeof(buf));
  unint64_t v11 = v19;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)CFRange v41 = 136315906;
  long long v42 = "operator[]";
  __int16 v43 = 1024;
  int v44 = 476;
  __int16 v45 = 2048;
  uint64_t v46 = v11;
  __int16 v47 = 2048;
  unint64_t v48 = v17;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_69:
  uint64_t v40 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  memset(buf, 0, sizeof(buf));
  a2 = &_os_log_internal;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)CFRange v41 = 136315906;
  long long v42 = "operator[]";
  __int16 v43 = 1024;
  int v44 = 468;
  __int16 v45 = 2048;
  uint64_t v46 = v11;
  __int16 v47 = 2048;
  unint64_t v48 = v17;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_70:
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_30:
  __int16 v22 = (id)CoreRELog::log;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)v11;
    if (*(void *)v11) {
      uint64_t v26 = *(void *)(v26 + 40);
    }
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v26;
    __int16 v25 = "REMeshAssetGetBlendShapeOffsetsForPart partIndex %zu exceeds part count %zu";
LABEL_34:
    _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, v25, buf, 0x16u);
  }
LABEL_35:

  return 0;
}

uint64_t re::FixedArray<re::BlendShapeDefinition>::operator[](unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a2 + 136 * a3;
}

uint64_t REMeshAssetGetBlendShapeDefinitionNameForPart(uint64_t a1, const DeformationModelData *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (!*(unsigned char *)(v7 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetBlendShapeDefinitionNameForPart called with unregistered mesh asset", (uint8_t *)&v21, 2u);
    }

    return 0;
  }
  if (*(void *)(v7 + 416) <= (unint64_t)a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    uint64_t v16 = 416;
    if (!*(unsigned char *)(v8 + 952)) {
      uint64_t v16 = 24;
    }
    uint64_t v17 = *(void *)(v8 + v16);
    int v21 = 134218240;
    __int16 v22 = a2;
    __int16 v23 = 2048;
    uint64_t v24 = v17;
    uint64_t v18 = "REMeshAssetGetBlendShapeDefinitionNameForPart modelIndex %zu exceeds model count %zu";
    goto LABEL_28;
  }
  uint64_t v9 = re::DataArray<re::MeshModel>::get(*(void *)(v7 + 440) + 8, *(void *)(*(void *)(v7 + 432) + 8 * (void)a2));
  unint64_t v11 = (re::BlendShapeModelUtil *)(v9 + 96);
  uint64_t v10 = *(void **)(v9 + 96);
  if (!v10 || v10[5] <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    uint64_t v19 = *(void *)v11;
    if (*(void *)v11) {
      uint64_t v19 = *(void *)(v19 + 40);
    }
    int v21 = 134218240;
    __int16 v22 = a2;
    __int16 v23 = 2048;
    uint64_t v24 = v19;
    uint64_t v18 = "REMeshAssetGetBlendShapeDefinitionNameForPart partIndex %zu exceeds part count %zu";
    goto LABEL_28;
  }
  uint64_t v12 = (const DeformationModelData *)*(unsigned int *)(v10[6] + 4 * a3);
  if (v10[8] <= (unint64_t)v12)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    uint64_t v20 = *(void *)v11;
    if (*(void *)v11) {
      uint64_t v20 = *(void *)(v20 + 64);
    }
    int v21 = 134218240;
    __int16 v22 = v12;
    __int16 v23 = 2048;
    uint64_t v24 = v20;
    uint64_t v18 = "REMeshAssetGetBlendShapeDefinitionNameForPart groupIndex %zu exceeds group count %zu";
    goto LABEL_28;
  }
  if (re::BlendShapeModelUtil::blendShapeTargetCountForGroup((re::BlendShapeModelUtil *)(v9 + 96), v12) <= a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    int v21 = 134218240;
    __int16 v22 = v12;
    __int16 v23 = 2048;
    uint64_t v24 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v11, v12);
    uint64_t v18 = "REMeshAssetGetBlendShapeDefinitionNameForPart defIndex %zu exceeds definition count %zu";
LABEL_28:
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v21, 0x16u);
LABEL_29:

    return 0;
  }
  return re::BlendShapeModelUtil::DEPRECATED_blendShapeTargetNameDoNotUse(v11, v12, a4);
}

uint64_t REMeshAssetGetBlendShapeDefinitionName(uint64_t a1, const DeformationModelData *a2, const DeformationModelData *a3, unint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (!*(unsigned char *)(v7 + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int16 v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    LOWORD(v22) = 0;
    unint64_t v14 = "REMeshAssetGetBlendShapeDefinitionName called with unregistered mesh asset";
    unint64_t v15 = v13;
    uint32_t v16 = 2;
    goto LABEL_20;
  }
  if (*(void *)(v7 + 416) <= (unint64_t)a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int16 v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    uint64_t v17 = 416;
    if (!*(unsigned char *)(v8 + 952)) {
      uint64_t v17 = 24;
    }
    uint64_t v18 = *(void *)(v8 + v17);
    int v22 = 134218240;
    __int16 v23 = a2;
    __int16 v24 = 2048;
    uint64_t v25 = v18;
    unint64_t v14 = "REMeshAssetGetBlendShapeDefinitionName modelIndex %zu exceeds model count %zu";
    unint64_t v15 = v13;
    uint32_t v16 = 22;
LABEL_20:
    _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v22, v16);
LABEL_21:

    return 0;
  }
  uint64_t v9 = re::DataArray<re::MeshModel>::get(*(void *)(v7 + 440) + 8, *(void *)(*(void *)(v7 + 432) + 8 * (void)a2));
  unint64_t v11 = (re::BlendShapeModelUtil *)(v9 + 96);
  uint64_t v10 = *(void *)(v9 + 96);
  if (!v10 || *(void *)(v10 + 64) <= (unint64_t)a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    uint64_t v20 = *(void *)v11;
    if (*(void *)v11) {
      uint64_t v20 = *(void *)(v20 + 64);
    }
    int v22 = 134218240;
    __int16 v23 = a3;
    __int16 v24 = 2048;
    uint64_t v25 = v20;
    int v21 = "REMeshAssetGetBlendShapeDefinitionName groupIndex %zu exceeds group count %zu";
    goto LABEL_28;
  }
  if (re::BlendShapeModelUtil::blendShapeTargetCountForGroup((re::BlendShapeModelUtil *)(v9 + 96), a3) <= a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_29;
    }
    int v22 = 134218240;
    __int16 v23 = a3;
    __int16 v24 = 2048;
    uint64_t v25 = re::BlendShapeModelUtil::blendShapeTargetCountForGroup(v11, a3);
    int v21 = "REMeshAssetGetBlendShapeDefinitionName defIndex %zu exceeds definition count %zu";
LABEL_28:
    _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v22, 0x16u);
LABEL_29:

    return 0;
  }
  return re::BlendShapeModelUtil::DEPRECATED_blendShapeTargetNameDoNotUse(v11, a3, a4);
}

uint64_t REMeshAssetGetSkinnedVertexCount(uint64_t a1, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (!*(unsigned char *)(result + 952))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    LOWORD(buf[0]) = 0;
    unint64_t v11 = "REMeshAssetGetSkinnedVertexCount called with unregistered mesh asset";
    uint64_t v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_20;
  }
  if (*(void *)(result + 416) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    uint64_t v14 = 416;
    if (!*(unsigned char *)(v4 + 952)) {
      uint64_t v14 = 24;
    }
    uint64_t v15 = *(void *)(v4 + v14);
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + 4) = a2;
    WORD6(buf[0]) = 2048;
    *(void *)((char *)buf + 14) = v15;
    unint64_t v11 = "REMeshAssetGetSkinnedVertexCount modelIndex %zu exceeds model count %zu";
    uint64_t v12 = v10;
    uint32_t v13 = 22;
LABEL_20:
    _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)buf, v13);
LABEL_21:

    return 0;
  }
  uint64_t v5 = re::DataArray<re::MeshModel>::get(*(void *)(result + 440) + 8, *(void *)(*(void *)(result + 432) + 8 * a2));
  uint64_t v6 = *(void *)(v5 + 176);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v5;
  if (*(void *)(v5 + 56) <= (unint64_t)(v7 - 1))
  {
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  LODWORD(result) = 0;
  uint64_t v9 = (_DWORD *)(*(void *)(v8 + 64) + 468);
  do
  {
    uint64_t result = (*v9 + result);
    v9 += 140;
    --v7;
  }
  while (v7);
  return result;
}

float REMeshAssetGetAverageInfluenceCount(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float v4 = 0.0;
  if (v3)
  {
    uint64_t v5 = v3;
    if (*(void *)(v3 + 184) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v6 = (id)CoreRELog::log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(v5 + 184);
        int v9 = 134218240;
        unint64_t v10 = a2;
        __int16 v11 = 2048;
        uint64_t v12 = v7;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetAverageInfluenceCount modelIndex %zu exceeds model count %zu", (uint8_t *)&v9, 0x16u);
      }
    }
    else
    {
      return *(float *)(*(void *)(v3 + 200) + 4 * a2);
    }
  }
  return v4;
}

uint64_t REMeshAssetGetInstanceCount(uint64_t a1)
{
  if (result) {
    return *(void *)(result + 376);
  }
  return result;
}

const char *REMeshAssetGetInstanceName(uint64_t a1, unint64_t a2)
{
  if (v2) {
    return *(const char **)(v2 + 8);
  }
  else {
    return "";
  }
}

uint64_t anonymous namespace'::unpackInstance(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (v5[47] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v6[47];
      int v12 = 136315650;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      unint64_t v15 = a2;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "%s instanceIndex %zu exceeds instance count %zu", (uint8_t *)&v12, 0x20u);
    }

    return 0;
  }
  uint64_t v7 = *(void *)(v5[49] + 8 * a2);
  uint64_t v8 = v5[55] + 72;
  return re::DataArray<re::MeshInstance>::get(v8, v7);
}

uint64_t REMeshAssetGetInstanceModelIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  float v4 = (void *)result;
  if (*(void *)(result + 376) <= a2) {
    goto LABEL_11;
  }
  uint64_t v5 = re::DataArray<re::MeshInstance>::get(*(void *)(result + 440) + 72, *(void *)(*(void *)(result + 392) + 8 * a2));
  uint64_t v7 = v4[52];
  if (!v7)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)5, v6, "assertion failure: '%s' (%s:line %i) %s could not find instance index", "false", "REMeshAssetGetInstanceModelIndex", 827, "REMeshAssetGetInstanceModelIndex");
    _os_crash();
    __break(1u);
LABEL_11:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = v4[47];
      *(_DWORD *)long long buf = 136315650;
      uint64_t v17 = "REMeshAssetGetInstanceModelIndex";
      __int16 v18 = 2048;
      unint64_t v19 = a2;
      __int16 v20 = 2048;
      uint64_t v21 = v15;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "%s instanceIndex %zu exceeds instance count %zu", buf, 0x20u);
    }

    return 0;
  }
  uint64_t v8 = v5;
  uint64_t result = 0;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = 8 * v7;
  while (1)
  {
    uint64_t v11 = *(void *)(v4[54] + 8 * result);
    BOOL v13 = v11 == v9;
    uint64_t v12 = (v11 ^ v9) & 0xFFFFFF00000000;
    BOOL v13 = v13 && v12 == 0;
    if (v13) {
      return result;
    }
    ++result;
    v10 -= 8;
    if (!v10) {
      goto LABEL_10;
    }
  }
}

__n128 REMeshAssetGetInstanceTransform(uint64_t a1, unint64_t a2)
{
}

uint64_t REMeshAssetCopyInstances(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, &v34);
  if (!v35 || (unsigned int v1 = atomic_load((unsigned int *)(v35 + 704)), v1 != 2))
  {
    uint64_t v7 = re::MeshInstanceCollection::make((re::MeshInstanceCollection *)3);
LABEL_24:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
    return (uint64_t)v7;
  }
  uint64_t v3 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)&v34);
  float v4 = (re::MeshInstanceCollection *)v3[47];
  if (!((unint64_t)v4 >> 32))
  {
    uint64_t v5 = v3[55];
    uint64_t v6 = re::MeshInstanceCollection::make(v4);
    uint64_t v7 = v6;
    int v33 = 0;
    uint64_t v8 = v3[47];
    if (v8)
    {
      uint64_t v9 = (void *)v3[49];
      uint64_t v10 = &v9[v8];
      uint64_t v11 = v5 + 72;
      uint64_t v12 = v5 + 8;
      BOOL v13 = v6 + 8;
      uint64_t v29 = (_anonymous_namespace_ *)(v6 + 96);
      unint64_t v30 = (_anonymous_namespace_ *)(v6 + 56);
      unsigned int v28 = (_anonymous_namespace_ *)(v6 + 136);
      uint64_t v31 = v12;
      uint64_t v32 = v11;
      while (1)
      {
        __int16 v14 = (StringID *)re::DataArray<re::MeshInstance>::get(v11, *v9);
        uint64_t v15 = (StringID *)re::DataArray<re::MeshModel>::get(v12, *(void *)&v14[1].var0);
        uint64_t v16 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v7 + 8), v14);
        if (v16)
        {
          uint64_t v17 = (int *)v16;
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          __int16 v18 = (id)CoreRELog::log;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            var1 = v14->var1;
            int v20 = *v17;
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = var1;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v20;
            _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Instance name %s already exists at index %u", buf, 0x12u);
          }

          goto LABEL_21;
        }
        uint64_t v21 = v10;
        unint64_t v22 = 0xBF58476D1CE4E5B9 * ((*(void *)&v14->var0 >> 31) ^ (*(void *)&v14->var0 >> 1));
        unint64_t v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
        if (*v13)
        {
          unint64_t v24 = v23 % *((unsigned int *)v7 + 8);
          uint64_t v25 = *(unsigned int *)(*((void *)v7 + 2) + 4 * v24);
          if (v25 != 0x7FFFFFFF)
          {
            uint64_t v26 = *((void *)v7 + 3);
            while (!re::StringID::operator==((void *)(v26 + 32 * v25 + 8), v14))
            {
              uint64_t v25 = *(_DWORD *)(v26 + 32 * v25) & 0x7FFFFFFF;
              if (v25 == 0x7FFFFFFF) {
                goto LABEL_19;
              }
            }
            goto LABEL_20;
          }
        }
        else
        {
          LODWORD(v24) = 0;
        }
LABEL_19:
        re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>((uint64_t)(v7 + 8), v24, v23, v14, &v33);
        ++*((_DWORD *)v7 + 12);
LABEL_20:
        re::DynamicArray<re::StringID>::add(v30, v14);
        re::DynamicArray<re::StringID>::add(v29, v15);
        int32x4_t v38 = 0u;
        long long v36 = 0u;
        long long v37 = xmmword_23435FBB0;
        re::decomposeScaleRotationTranslation<float>((uint64_t)&v14[2], &v38, &v37, &v36);
        *(int32x4_t *)long long buf = v38;
        *(_OWORD *)&uint8_t buf[16] = v37;
        long long v40 = v36;
        re::DynamicArray<re::Matrix3x3<float>>::add(v28, (uint64_t)buf);
        ++v33;
        uint64_t v10 = v21;
        uint64_t v12 = v31;
        uint64_t v11 = v32;
LABEL_21:
        if (++v9 == v10) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_24;
  }
  re::internal::assertLog((re::internal *)4, v2, "assertion failure: '%s' (%s:line %i) Mesh asset has too many instances", "false", "REMeshAssetCopyInstances", 850);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REAssetServiceMeshAssetCreateMutable(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 960, 8);
  re::MeshAsset::MeshAsset(v3);
  uint64_t v5 = re::MeshAsset::assetType(v4);
  (*(void (**)(void *__return_ptr, re *, re::MeshAsset *, uint64_t *, uint64_t, void, void))(*(void *)a1 + 416))(v9, a1, v3, v5, 1, 0, 0);
  uint64_t v6 = v9[0];
  id v7 = (id)(v9[0] + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v6;
}

void REMeshAssetReplaceAllWithModel(uint64_t a1, uint64_t a2)
{
  v3[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = a2;
  v3[0] = 0;
  REMeshAssetReplaceAllWithModels(a1, (_anonymous_namespace_ *)&v2, 1u, v3, 0);
}

void REMeshAssetReplaceAllWithModels(uint64_t a1, _anonymous_namespace_ *a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v6 = REMeshResourceDefinitionCreate(a2, a3, a4, a5, 0, 0);
  REMeshAssetReplaceAllWithResource(a1, v6);
}

void REAssetManagerReplaceAllMeshWithModel(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a3;
  v4[0] = 0;
  REAssetManagerReplaceAllMeshWithModels(a1, a2, (_anonymous_namespace_ *)&v3, 1u, v4, 0);
}

void REAssetManagerReplaceAllMeshWithModels(uint64_t *a1, uint64_t a2, _anonymous_namespace_ *a3, unsigned int a4, uint64_t *a5, unsigned int a6)
{
  uint64_t v8 = REMeshResourceDefinitionCreate(a3, a4, a5, a6, 0, 0);
  REAssetManagerReplaceAllMeshWithResource(a1, a2, v8);
}

void REMeshAssetReplaceAllWithResource(uint64_t a1, const re::MeshResourceDefinition *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v5);
  if (v6) {
    float v4 = *(uint64_t **)(v6 + 24);
  }
  else {
    float v4 = 0;
  }
  REAssetManagerReplaceAllMeshWithResource(v4, a1, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void REAssetManagerReplaceAllMeshWithResource(uint64_t *a1, uint64_t a2, const re::MeshResourceDefinition *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v11);
  if (!v12 || (unsigned int v6 = atomic_load((unsigned int *)(v12 + 704)), v6 != 2))
  {
    id v7 = re::globalAllocators(v5);
    uint64_t v8 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 960, 8);
    re::MeshAsset::MeshAsset(v8);
    re::AssetManager::setAssetPointerForExistingAsset((re::AssetManager *)a1, v8, (const re::AssetHandle *)&v11, 0, 0);
  }
  uint64_t v9 = re::MeshAsset::assetType(v5);
  uint64_t v10 = (re::MeshAssetLoader *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a1[130], (unint64_t)v9);
  re::MeshAssetLoader::replaceAssetContentsWithMeshResourceDefinition(v10, (re::AssetHandle *)&v11, a3);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
}

void REMeshAssetReplaceAllWithSkinnedModels(uint64_t a1, _anonymous_namespace_ *a2, unsigned int a3, uint64_t *a4, unsigned int a5, re **a6, unsigned int a7)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v16);
  if (v17) {
    __int16 v14 = *(uint64_t **)(v17 + 24);
  }
  else {
    __int16 v14 = 0;
  }
  uint64_t v15 = REMeshResourceDefinitionCreate(a2, a3, a4, a5, a6, a7);
  REAssetManagerReplaceAllMeshWithResource(v14, a1, v15);

  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
}

const char *REMeshAssetGetModelPartName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (v3) {
    return *(const char **)(v3 + 512);
  }
  else {
    return "";
  }
}

uint64_t REMeshAssetGetModelPartMaterial(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (result)
  {
    int v6 = *(unsigned __int16 *)(result + 474);
    if (v6 == 0xFFFF)
    {
      return 0;
    }
    else
    {
      if (a4) {
        *a4 = v6;
      }
      return 1;
    }
  }
  return result;
}

re::AttributeTable *REMeshAssetGetModelPartBufferCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (result)
  {
    re::AttributeTable::buffers(result);
    return (re::AttributeTable *)v4;
  }
  return result;
}

const char *REMeshAssetGetModelPartBufferName(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!v5) {
    return "";
  }
  if (*(void *)(v5 + 344) <= a4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(const char **)(*(void *)(v5 + 352) + 16 * a4 + 8);
}

uint64_t REMeshAssetGetModelPartBufferIndex(uint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 255;
  }
  int v6 = (void *)v5;
  if (a4)
  {
    uint64_t v7 = *a4;
    if (*a4)
    {
      char v8 = a4[1];
      if (v8)
      {
        uint64_t v9 = (unsigned __int8 *)(a4 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v16 = v7;
  uint64_t v11 = v5;
  do
  {
    uint64_t v12 = v11;
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11 && !*(void *)(v12 + 72));
  if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v12 + 48), &v16) == -1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      __int16 v18 = "REMeshAssetGetModelPartBufferIndex";
      __int16 v19 = 2080;
      int v20 = a4;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "%s unable to find specified vertex buffer on mesh: %s", buf, 0x16u);
    }

    return 255;
  }
  do
  {
    BOOL v13 = v6;
    int v6 = (void *)v6[1];
  }
  while (v6 && !v13[9]);
  return *(unsigned __int8 *)(v13[7]
                            + 16
                            * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v13 + 6, &v16)+ 8);
}

uint64_t REMeshAssetGetModelPartBufferAttributeType(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!v5) {
    return 255;
  }
  do
  {
    int v6 = v5;
    uint64_t v5 = (re::AttributeTable *)*((void *)v5 + 1);
    unint64_t v7 = *((void *)v6 + 4);
    if (v5) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
  }
  while (v8);
  if (v7 <= a4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = *((void *)v6 + 5) + 16 * a4;
  if (*(unsigned char *)(v9 + 4) == 1 && (unsigned int v10 = *(unsigned __int8 *)(v9 + 12) - 28, v10 <= 0x18)) {
    return byte_234429929[(char)v10];
  }
  else {
    return 255;
  }
}

re::AttributeTable *anonymous namespace'::unpackAttributes(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  BOOL v8 = v7;
  if (v7)
  {
    re::AttributeTable::buffers(v7);
    if (v9 <= a4)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned int v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        re::AttributeTable::buffers(v8);
        int v13 = 136315650;
        uint64_t v14 = a5;
        __int16 v15 = 2048;
        unint64_t v16 = a4;
        __int16 v17 = 2048;
        uint64_t v18 = v11;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "%s bufferIndex %zu exceeds buffer count %zu", (uint8_t *)&v13, 0x20u);
      }

      return 0;
    }
  }
  return v8;
}

uint64_t REMeshAssetGetModelPartBufferAttributeRate(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (v5)
  {
    do
    {
      int v6 = v5;
      uint64_t v5 = (re::AttributeTable *)*((void *)v5 + 1);
      unint64_t v7 = *((void *)v6 + 4);
      if (v5) {
        BOOL v8 = v7 == 0;
      }
      else {
        BOOL v8 = 0;
      }
    }
    while (v8);
    if (v7 <= a4)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    int v9 = *(unsigned __int8 *)(*((void *)v6 + 5) + 16 * a4 + 5);
    if (v9) {
      unsigned __int8 v10 = -1;
    }
    else {
      unsigned __int8 v10 = 0;
    }
    if (v9 == 1) {
      return 1;
    }
    else {
      return v10;
    }
  }
  else
  {
    return -1;
  }
}

re::AttributeTable *REMeshAssetGetModelPartBufferAttributeCount(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result)
  {
    unint64_t v7 = result;
    BOOL v8 = result;
    do
    {
      int v9 = v8;
      BOOL v8 = (re::AttributeTable *)*((void *)v8 + 1);
      unint64_t v10 = *((void *)v9 + 4);
      if (v8) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 0;
      }
    }
    while (v11);
    if (v10 <= a4)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v12 = *((void *)v9 + 5) + 16 * a4;
    if (*(unsigned char *)(v12 + 4) == 1)
    {
      unsigned int v13 = re::sizeFromVertexFormat(*(unsigned __int8 *)(v12 + 12), v6);
      if (v13)
      {
        unsigned int v14 = v13;
        uint64_t v15 = re::AttributeTable::buffers(v7);
        if (v16 > a4) {
          return (re::AttributeTable *)(*(_DWORD *)(v15 + 16 * a4 + 12) / v14);
        }
LABEL_15:
        re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, v16);
        _os_crash();
        __break(1u);
      }
    }
    return 0;
  }
  return result;
}

uint64_t REMeshAssetModelPartBufferAttributeIsSlow(uint64_t a1)
{
  return 0;
}

unint64_t REMeshAssetGetModelPartBufferAttributeData(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
    return 0;
  if (!v14) {
    return 0;
  }
  uint64_t v15 = v14;
  do
  {
    unint64_t v16 = v15;
    uint64_t v15 = (re::AttributeTable *)*((void *)v15 + 1);
    unint64_t v17 = *((void *)v16 + 4);
    if (v15) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 0;
    }
  }
  while (v18);
  if (v17 <= a4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v19 = *((void *)v16 + 5) + 16 * a4;
  int v20 = *(unsigned __int8 *)(v19 + 4);
  unsigned int v21 = *(unsigned __int8 *)(v19 + 12);
  uint64_t v22 = re::AttributeTable::buffers(v14);
  if (v23 <= a4)
  {
LABEL_23:
    re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, v23);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)4, v30, "assertion failure: '%s' (%s:line %i) ", "storageMode != MTL::StorageModePrivate && storageMode != MTL::StorageModeMemoryless", "REMeshAssetGetModelPartBufferAttributeData", 1203);
    _os_crash();
    __break(1u);
  }
  if (v20 != 1) {
    return 0;
  }
  unint64_t v24 = v22 + 16 * a4;
  uint64_t v25 = *(void **)v24;
  uint64_t v26 = *(unsigned int *)(v24 + 8);
  unsigned int v27 = *(_DWORD *)(v24 + 12);
  unsigned int v28 = re::sizeFromVertexFormat(v21, v23);
  if (!v28) {
    return 0;
  }
  unsigned int v29 = v28;
  if (((unint64_t)objc_msgSend(v25, sel_storageMode) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    goto LABEL_24;
  }
  uint64_t v31 = v29;
  if ((unint64_t)(v27 / v29) - a5 >= a6) {
    unint64_t v32 = a6;
  }
  else {
    unint64_t v32 = v27 / v29 - a5;
  }
  int v33 = (__IOSurface *)objc_msgSend(v25, sel_iosurface);
  if (v33) {
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v33);
  }
  else {
    BaseAddress = (char *)objc_msgSend(v25, sel_contents);
  }
  memcpy(a7, &BaseAddress[v26 + v31 * a5], v32 * v31);
  return v32;
}

re::AttributeTable *REMeshAssetGetModelPartBuffer(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (v5)
  {
    uint64_t v6 = re::AttributeTable::buffers(v5);
    if (v7 <= a4)
    {
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, v7);
      uint64_t result = (re::AttributeTable *)_os_crash();
      __break(1u);
      return result;
    }
    uint64_t v5 = (re::AttributeTable *)*(id *)(v6 + 16 * a4);
  }
  return v5;
}

re::AttributeTable *REMeshAssetGetModelPartBufferOffset(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result)
  {
    uint64_t v6 = re::AttributeTable::buffers(result);
    if (v7 <= a4)
    {
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, v7);
      uint64_t result = (re::AttributeTable *)_os_crash();
      __break(1u);
    }
    else
    {
      return (re::AttributeTable *)*(unsigned int *)(v6 + 16 * a4 + 8);
    }
  }
  return result;
}

re::AttributeTable *REMeshAssetGetModelPartBufferSize(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result)
  {
    uint64_t v6 = re::AttributeTable::buffers(result);
    if (v7 <= a4)
    {
      re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, v7);
      uint64_t result = (re::AttributeTable *)_os_crash();
      __break(1u);
    }
    else
    {
      return (re::AttributeTable *)*(unsigned int *)(v6 + 16 * a4 + 12);
    }
  }
  return result;
}

uint64_t REMeshAssetGetModelPartSkeletonIndex(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = 416;
  if (!*(unsigned char *)(result + 952)) {
    uint64_t v9 = 24;
  }
  if (*(void *)(result + v9) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = 416;
      if (!*(unsigned char *)(v8 + 952)) {
        uint64_t v13 = 24;
      }
      uint64_t v14 = *(void *)(v8 + v13);
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = a2;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = v14;
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "modelIndex %zu exceeds model count %zu", (uint8_t *)buf, 0x16u);
    }

    return 0;
  }
  if (re::MeshAsset::partCountForModel((re::MeshAsset *)result, a2) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = a3;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = re::MeshAsset::partCountForModel((re::MeshAsset *)v8, a2);
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "partIndex %zu exceeds model's part count %zu", (uint8_t *)buf, 0x16u);
    }

    return 0;
  }
  uint64_t v10 = *(void *)(v8 + 440);
  if (!v10)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_26:
      unint64_t v16 = (id)CoreRELog::log;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Call to REMeshAssetGetModelPartSkeletonIndex with unregistered mesh asset", (uint8_t *)buf, 2u);
      }

      return 0;
    }
LABEL_32:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_26;
  }
  if (*(void *)(v8 + 416) <= a2)
  {
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v11 = *(void *)(re::DataArray<re::MeshModel>::get(v10 + 8, *(void *)(*(void *)(v8 + 432) + 8 * a2)) + 176);
  if (!v11 || *(void *)(v11 + 8) <= a3) {
    return 0;
  }
  if (a4) {
    *a4 = *(_DWORD *)(*(void *)(v11 + 16) + 72 * a3 + 4);
  }
  return 1;
}

uint64_t REMeshAssetCopyModelPartSkinInfluences(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = 416;
  if (!*((unsigned char *)v5 + 952)) {
    uint64_t v7 = 24;
  }
  if (*(void *)((char *)v5 + v7) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    uint64_t v20 = 416;
    if (!*((unsigned char *)v6 + 952)) {
      uint64_t v20 = 24;
    }
    uint64_t v21 = *(void *)((char *)v6 + v20);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v21;
    uint64_t v22 = "modelIndex %zu exceeds model count %zu";
    unint64_t v23 = v19;
    uint32_t v24 = 22;
    goto LABEL_34;
  }
  if (re::MeshAsset::partCountForModel(v5, a2) <= a3)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_27:
      uint64_t v25 = (id)CoreRELog::log;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = re::MeshAsset::partCountForModel(v6, a2);
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = a3;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v26;
        _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "partIndex %zu exceeds model's part count %zu", buf, 0x16u);
      }

      return 0;
    }
LABEL_53:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_27;
  }
  if (!*((unsigned char *)v6 + 952) || (uint64_t v8 = *((void *)v6 + 55)) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v19 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_35;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v22 = "REMeshAssetCopyModelPartSkinInfluences called with unregistered MeshAsset";
    unint64_t v23 = v19;
    uint32_t v24 = 2;
LABEL_34:
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
LABEL_35:

    return 0;
  }
  unint64_t v9 = *((void *)v6 + 52);
  if (v9 <= a2)
  {
    *(void *)long long v40 = 0;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    memset(buf, 0, sizeof(buf));
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    *(void *)long long v37 = "operator[]";
    *(_WORD *)&v37[8] = 1024;
    *(_DWORD *)&void v37[10] = 797;
    *(_WORD *)&v37[14] = 2048;
    *(void *)&v37[16] = a2;
    __int16 v38 = 2048;
    unint64_t v39 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_39;
  }
  uint64_t v10 = re::DataArray<re::MeshModel>::get(v8 + 8, *(void *)(*((void *)v6 + 54) + 8 * a2));
  char v34 = 0;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v11 = 0;
  if (!re::SkinningModelUtil::skinnedInfluenceDataBuffer(v10 + 96, a3, &v34, (uint64_t)v33)) {
    goto LABEL_50;
  }
  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v33, (uint64_t)&v36);
  if ((_BYTE)v36)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    if (v34)
    {
      uint64_t v6 = *(re::MeshAsset **)&v37[4];
      unint64_t v13 = *(void *)&v37[12];
      unint64_t v14 = *(void *)&v37[12] >> 2;
      if (v13 >= 4)
      {
        uint64_t v15 = 0;
        a2 = v31;
        if (v14 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v14;
        }
        unint64_t v17 = (float *)((char *)v32 + 4);
        while (a2 != v15)
        {
          unsigned int v18 = *((_DWORD *)v6 + v15);
          *((_DWORD *)v17 - 1) = v18 >> 22;
          *unint64_t v17 = (float)(v18 & 0x3FFFFF) * 0.00000023842;
          v17 += 2;
          if (v16 == ++v15) {
            goto LABEL_43;
          }
        }
        uint64_t v35 = 0;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        memset(buf, 0, sizeof(buf));
        a3 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v40 = 136315906;
        *(void *)&id v40[4] = "operator[]";
        __int16 v41 = 1024;
        int v42 = 468;
        __int16 v43 = 2048;
        unint64_t v44 = a2;
        __int16 v45 = 2048;
        unint64_t v46 = a2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_53;
      }
    }
    else
    {
      *(void *)long long buf = *(void *)&v37[4];
      *(void *)&uint8_t buf[8] = *(void *)&v37[12] >> 3;
      re::FixedArray<re::SkinningInfluence>::operator=((_anonymous_namespace_ *)&v30, (uint64_t)buf);
    }
LABEL_43:
    re::Data::makeDataWithBytes(v32, (const void *)(8 * v31), buf);
    uint64_t v11 = *(void *)buf;
    if (*(void *)buf)
    {
      CFRetain(*(id *)buf);
      unsigned int v29 = *(void **)buf;
    }
    else
    {
      unsigned int v29 = 0;
    }

    if (v30 && v31) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    goto LABEL_49;
  }
  if (CoreRELog::onceToken != -1) {
    goto LABEL_55;
  }
LABEL_39:
  unsigned int v28 = (id)CoreRELog::log;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "REMeshAssetCopyModelPartSkinInfluences failed to get skinning data for part %zu", buf, 0xCu);
  }

  uint64_t v11 = 0;
LABEL_49:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v36);
LABEL_50:
  if (v33[0]) {

  }
  return v11;
}

uint64_t REMeshAssetCopyModelPartSkinInfluenceEndIndices(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = 416;
  if (!*((unsigned char *)v5 + 952)) {
    uint64_t v7 = 24;
  }
  if (*(void *)((char *)v5 + v7) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = 416;
      if (!*((unsigned char *)v6 + 952)) {
        uint64_t v14 = 24;
      }
      uint64_t v15 = *(void *)((char *)v6 + v14);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v15;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "modelIndex %zu exceeds model count %zu", buf, 0x16u);
    }

    return 0;
  }
  if (re::MeshAsset::partCountForModel(v5, a2) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v16 = (id)CoreRELog::log;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = re::MeshAsset::partCountForModel(v6, a2);
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "partIndex %zu exceeds model's part count %zu", buf, 0x16u);
    }

    return 0;
  }
  if (!*((unsigned char *)v6 + 952) || (uint64_t v8 = *((void *)v6 + 55)) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v17 = (id)CoreRELog::log;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "REMeshAssetCopyModelPartSkinInfluences called with unregistered MeshAsset", buf, 2u);
    }

    return 0;
  }
  unint64_t v9 = *((void *)v6 + 52);
  if (v9 <= a2)
  {
    *(void *)uint64_t v20 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    memset(buf, 0, sizeof(buf));
    a3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v21 = 136315906;
    *(void *)&uint64_t v21[4] = "operator[]";
    *(_WORD *)uint64_t v22 = 1024;
    *(_DWORD *)&_OWORD v22[2] = 797;
    __int16 v23 = 2048;
    unint64_t v24 = a2;
    __int16 v25 = 2048;
    unint64_t v26 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v10 = re::DataArray<re::MeshModel>::get(v8 + 8, *(void *)(*((void *)v6 + 54) + 8 * a2));
  re::SkinningModelUtil::skinnedEndIndicesBuffer((void *)(v10 + 96), a3, v21);
  if (!*(_DWORD *)v22)
  {
    uint64_t v11 = 0;
    goto LABEL_40;
  }
  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v21, (uint64_t)buf);
  if (!buf[0])
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_34:
      uint64_t v19 = (id)CoreRELog::log;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v20 = 134217984;
        *(void *)&id v20[4] = a3;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "REMeshAssetCopyModelPartSkinInfluenceEndIndices failed to get skinning data for part %zu", v20, 0xCu);
      }

      uint64_t v11 = 0;
      goto LABEL_39;
    }
LABEL_43:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_34;
  }
  re::Data::makeDataWithBytes(*(re::Data **)&buf[8], *(const void **)&buf[16], v20);
  uint64_t v11 = *(void *)v20;
  if (*(void *)v20)
  {
    CFRetain(*(id *)v20);
    uint64_t v12 = *(void **)v20;
  }
  else
  {
    uint64_t v12 = 0;
  }

LABEL_39:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(buf);
LABEL_40:
  if (*(void *)v21) {

  }
  return v11;
}

re::MeshAsset *REMeshAssetGetModelPartSkinUniformInfluenceCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = 416;
    if (!*((unsigned char *)result + 952)) {
      uint64_t v7 = 24;
    }
    if (*(void *)((char *)result + v7) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = 416;
        if (!*((unsigned char *)v6 + 952)) {
          uint64_t v11 = 24;
        }
        uint64_t v12 = *(void *)((char *)v6 + v11);
        LODWORD(buf[0]) = 134218240;
        *(void *)((char *)buf + 4) = a2;
        WORD6(buf[0]) = 2048;
        *(void *)((char *)buf + 14) = v12;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "modelIndex %zu exceeds model count %zu", (uint8_t *)buf, 0x16u);
      }
    }
    else if (re::MeshAsset::partCountForModel(result, a2) <= a3)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 134218240;
        *(void *)((char *)buf + 4) = a3;
        WORD6(buf[0]) = 2048;
        *(void *)((char *)buf + 14) = re::MeshAsset::partCountForModel(v6, a2);
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "partIndex %zu exceeds model's part count %zu", (uint8_t *)buf, 0x16u);
      }
    }
    else if (*((unsigned char *)v6 + 952) && (uint64_t v8 = *((void *)v6 + 55)) != 0)
    {
      if (*((void *)v6 + 52) <= a2)
      {
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = *(void *)(re::DataArray<re::MeshModel>::get(v8 + 8, *(void *)(*((void *)v6 + 54) + 8 * a2)) + 176);
      if (v9 && *(void *)(v9 + 8) > a3) {
        return (re::MeshAsset *)*(unsigned __int8 *)(*(void *)(v9 + 16) + 72 * a3 + 2);
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v14 = (id)CoreRELog::log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "REMeshAssetGetModelPartSkinUniformInfluenceCount called with unregistered MeshAsset", (uint8_t *)buf, 2u);
      }
    }
    return 0;
  }
  return result;
}

void REMeshAssetReplaceAllWithDirectMesh(uint64_t *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v16);
  if (!v17 || (unsigned int v7 = atomic_load((unsigned int *)(v17 + 704)), v7 != 2))
  {
    uint64_t v8 = re::globalAllocators(v6);
    uint64_t v9 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 960, 8);
    re::MeshAsset::MeshAsset(v9);
    re::AssetManager::setAssetPointerForExistingAsset((re::AssetManager *)a1, v9, (const re::AssetHandle *)&v16, 0, 1);
  }
  re::DirectMeshPayload::make((uint64_t)v5, &v18);
  uint64_t v10 = v18;
  unsigned int v18 = 0;
  uint64_t v11 = (re::MeshAsset *)re::AssetHandle::setNetworkSharingMode((uint64_t)&v16, 1);
  uint64_t v12 = re::MeshAsset::assetType(v11);
  uint64_t v13 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a1[130], (unint64_t)v12);
  uint64_t v14 = v10;
  uint64_t v15 = v14;
  re::MeshAssetLoader::replaceAssetContentsWithMeshPayload(v13, &v16, (id *)&v15);

  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v16);
}

uint64_t REAssetManagerCreateMeshAssetWithDirectMesh(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = re::MeshAsset::assetType(v3);
  uint64_t v5 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a1[130], (unint64_t)v4);
  re::DirectMeshPayload::make((uint64_t)v3, (REDirectMeshPayload **)v20);
  uint64_t v6 = *(void **)&v20[0];
  *(void *)&v20[0] = 0;
  id v21 = v6;
  re::MeshPayload::makeMeshPayloadBuffers(&v21, (id *)(v5 + 8), v20);
  uint64_t v8 = re::globalAllocators(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 960, 8);
  id v10 = v6;
  id v19 = v10;
  re::MeshAsset::MeshAsset(v9, &v19, (uint64_t)v20);

  uint64_t v12 = re::MeshAsset::assetType(v11);
  (*(void (**)(void *__return_ptr, uint64_t *, uint64_t, uint64_t *, void, void, void))(*a1 + 416))(v18, a1, v9, v12, 0, 0, 0);
  re::AssetHandle::setNetworkSharingMode((uint64_t)v18, 1);
  if (v18[0])
  {
    id v13 = (id)(v18[0] + 8);
    uint64_t v14 = v18[0];
  }
  else
  {
    uint64_t v14 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
  for (uint64_t i = 56; i != -8; i -= 8)
  {
    uint64_t v16 = *(void **)((char *)v20 + i);
    if (v16)
    {

      *(void *)((char *)v20 + i) = 0;
    }
  }

  return v14;
}

id REMeshAssetGetDirectMesh(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v5);
  if (v1 && (re::DirectMeshPayload::dynamicCast((id *)(v1 + 288), &v4), v4))
  {
    uint64_t v2 = re::DirectMeshPayload::directMesh(&v4);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REPhysicsSimulationServiceGetDebugRenderingEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t REPhysicsSimulationServiceSetDebugRenderingEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

__n128 REPhysicsSimulationServiceGetDefaultGravity(uint64_t a1)
{
  return *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
}

uint64_t REPhysicsSimulationServiceSetDefaultGravity(uint64_t a1, __n128 a2)
{
  __n128 v3 = a2;
  return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)a1 + 96))(a1, &v3);
}

uint64_t REPhysicsSimulationServiceGetDefaultInitialLinearDamping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t REPhysicsSimulationServiceSetDefaultInitialLinearDamping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t REPhysicsSimulationServiceGetDefaultInitialAngularDamping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t REPhysicsSimulationServiceSetDefaultInitialAngularDamping(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t REPhysicsSimulationServiceGetDefaultFixedTimeStep(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t REPhysicsSimulationServiceSetDefaultFixedTimeStep(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t REPhysicsSimulationServiceGetDefaultMaxSubStepCount(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t REPhysicsSimulationServiceSetDefaultMaxSubStepCount(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t REPhysicsSimulationServiceGetRootSimulationEntity(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1);
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v6);
  uint64_t v9 = a2;
  uint64_t result = re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(v7, &v9);
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t REPhysicsSimulationServiceGetAnchorShouldHaveSharedSimulationByDefault(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

void *REReverbComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REReverbComponentGetReverbPreset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REReverbComponentGetPriority(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 42);
}

uint64_t REReverbComponentSetReverbPreset(uint64_t a1, uint64_t a2)
{
  return REReverbComponentSetReverbPresetWithBlend(a1, a2, 0);
}

uint64_t REReverbComponentSetReverbPresetWithBlend(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 32) != a2 || *(unsigned __int8 *)(result + 40) != a3)
  {
    *(void *)(result + 32) = a2;
    *(unsigned char *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = a3;
    uint64_t v6 = *re::audioLogObjects((re *)result);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(v5 + 16) + 296);
      int v8 = 134218496;
      uint64_t v9 = v7;
      __int16 v10 = 2048;
      uint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = a3;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "[CoreRE][ECS] REReverbComponentSetReverbPresetWithBlend entityID(%llu) preset(%lld) allowSpaceBlending(%d)", (uint8_t *)&v8, 0x1Cu);
    }
    return re::ecs2::Component::enqueueMarkDirty(v5);
  }
  return result;
}

re *REReverbComponentSetPriority(re *result, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((unsigned __int16 *)result + 21) != a2)
  {
    uint64_t v3 = (uint64_t)result;
    *((_WORD *)result + 21) = a2;
    uint64_t v4 = *re::audioLogObjects(result);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(v3 + 16) + 296);
      int v6 = 134218240;
      uint64_t v7 = v5;
      __int16 v8 = 1024;
      int v9 = a2;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[CoreRE][ECS] REReverbComponentSetPriority entityID(%llu) priority(%d)", (uint8_t *)&v6, 0x12u);
    }
    return (re *)re::ecs2::Component::enqueueMarkDirty(v3);
  }
  return result;
}

uint64_t RESignpostEmitREAssetEntityLoadStartedImpulse()
{
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

uint64_t RESignpostHFEmitREAssetEntityLoadStartedImpulse()
{
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyTracing(0, 0);
    if (result)
    {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t RESignpostEmitREAssetEntityLoadEndedImpulse()
{
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

uint64_t RESignpostHFEmitREAssetEntityLoadEndedImpulse()
{
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyTracing(0, 0);
    if (result)
    {
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t RERigAssetBuilderCreate()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_522, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_522))
  {
    byte_26AFA01A8 = 0;
    qword_26AFA0198 = (uint64_t)&unk_26E6DEC70;
    unk_26AFA01A0 = "RigAssetBuilder Allocator";
    __cxa_guard_release(&_MergedGlobals_522);
  }
  uint64_t v0 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(qword_26AFA0198 + 32))(&qword_26AFA0198, 1448, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v0, 0);
  *(void *)(v1 + 16) = &qword_26AFA0198;
  *(void *)uint64_t v1 = &unk_26E7347B0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 48) = 0;
  *(void *)(v1 + 24) = 0;
  v1 += 24;
  *(_OWORD *)(v0 + 2+ 56) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_DWORD *)(v0 + 288) = 0;
  *(_DWORD *)(v0 + 328) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_DWORD *)(v0 + 368) = 0;
  *(_DWORD *)(v0 + 408) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v0 + 448) = 0;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_DWORD *)(v0 + 488) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_DWORD *)(v0 + 528) = 0;
  *(_OWORD *)(v0 + 496) = 0u;
  *(_OWORD *)(v0 + 512) = 0u;
  *(_OWORD *)(v0 + + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_DWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_DWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_DWORD *)(v0 + 168) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_DWORD *)(v0 + 208) = 0;
  *(_DWORD *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_DWORD *)(v0 + 568) = 0;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_DWORD *)(v0 + 672) = 0;
  *(_OWORD *)(v0 + 64ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 6+ 56) = 0u;
  *(_OWORD *)(v0 + 608) = 0u;
  *(_OWORD *)(v0 + 624) = 0u;
  *(_OWORD *)(v0 + 576) = 0u;
  *(_OWORD *)(v0 + 592) = 0u;
  *(_DWORD *)(v0 + 712) = 0;
  *(_OWORD *)(v1 + 6+ 56) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v0 + 72ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 736) = 0u;
  *(_DWORD *)(v0 + 752) = 0;
  *(_DWORD *)(v0 + 792) = 0;
  *(_OWORD *)(v1 + 736) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_DWORD *)(v0 + 832) = 0;
  *(_OWORD *)(v0 + 80ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 816) = 0u;
  *(_DWORD *)(v0 + 872) = 0;
  *(_OWORD *)(v1 + 816) = 0u;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_DWORD *)(v0 + 912) = 0;
  *(_OWORD *)(v0 + 88ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 896) = 0u;
  *(_DWORD *)(v0 + 952) = 0;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_DWORD *)(v0 + 992) = 0;
  *(_OWORD *)(v0 + 96ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 976) = 0u;
  *(_DWORD *)(v0 + 1032) = 0;
  *(_OWORD *)(v1 + 976) = 0u;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_DWORD *)(v0 + 1072) = 0;
  *(_OWORD *)(v0 + 10+ 56) = 0u;
  *(_OWORD *)(v0 + 104ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v0 + 1112) = 0;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_OWORD *)(v1 + 10+ 56) = 0u;
  *(_DWORD *)(v0 + 1152) = 0;
  *(_OWORD *)(v0 + 1136) = 0u;
  *(_OWORD *)(v0 + 112ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v0 + 1176) = 0;
  *(_OWORD *)(v1 + 1136) = 0u;
  *(_DWORD *)(v0 + 1184) = 1;
  *(_DWORD *)(v0 + 1216) = 0;
  *(void *)(v0 + 1208) = 0;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1224) = 0u;
  *(_DWORD *)(v0 + 124ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *(_DWORD *)(v0 + 1272) = 0;
  *(void *)(v0 + 1264) = 0;
  *(_OWORD *)(v0 + 1248) = 0u;
  *(_OWORD *)(v0 + 128ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v0 + 1296) = 1;
  *(_DWORD *)(v0 + 1328) = 0;
  *(void *)(v0 + 132ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(v0 + 1304) = 0u;
  *(_OWORD *)(v0 + 1336) = 0u;
  *(_DWORD *)(v0 + 1352) = 1;
  *(_DWORD *)(v0 + 1384) = 0;
  *(void *)(v0 + 1376) = 0;
  *(_OWORD *)(v0 + 136ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v0 + 1392) = 0u;
  *(_DWORD *)(v0 + 1408) = 1;
  *(void *)(v0 + 1424) = 0;
  *(void *)(v0 + 1416) = 0;
  *(_DWORD *)(v0 + 144ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v0 + 1432) = 0;
  re::RigDefinition::init((re::RigDefinition *)v1, (re::Allocator *)&qword_26AFA0198);
  re::BucketArray<re::RigNodeConstraint,32ul>::init(v0 + 1168, (uint64_t)&qword_26AFA0198, 1uLL);
  re::BucketArray<re::DynamicString,32ul>::init(v0 + 1392, (uint64_t)&qword_26AFA0198, 1uLL);
  return v0;
}

void *RERigAssetBuilderReserveTransformRigNodes(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[112];
  unint64_t v5 = v4 + a2;
  if (v4 < v5) {
    uint64_t result = re::DynamicArray<re::RigTransform>::setCapacity(result + 111, v5);
  }
  unint64_t v6 = v3[132];
  if (v6 < v6 + a2)
  {
    return re::DynamicArray<re::RigNode>::setCapacity(v3 + 131, v6 + a2);
  }
  return result;
}

void *RERigAssetBuilderReserveJointRigNodes(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[112] + a2;
  if (result[117] < v4) {
    uint64_t result = re::DynamicArray<re::RigJoint>::setCapacity(result + 116, v4);
  }
  unint64_t v5 = v3[132];
  if (v5 < v5 + a2)
  {
    return re::DynamicArray<re::RigNode>::setCapacity(v3 + 131, v5 + a2);
  }
  return result;
}

void *RERigAssetBuilderReservePointConstraints(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  unint64_t v5 = v4 + a2;
  if (v4 < v5) {
    uint64_t result = re::DynamicArray<re::RigComponentConstraint>::setCapacity(result + 3, v5);
  }
  unint64_t v6 = v3[122];
  if (v6 < v6 + a2) {
    uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3 + 121, v6 + a2);
  }
  unint64_t v7 = 32 * v3[147];
  if (v7 < a2 + v7)
  {
    return re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity(v3 + 146, (a2 + v7 + 31) >> 5);
  }
  return result;
}

void *RERigAssetBuilderReserveOrientConstraints(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[9];
  unint64_t v5 = v4 + a2;
  if (v4 < v5) {
    uint64_t result = re::DynamicArray<re::RigComponentConstraint>::setCapacity(result + 8, v5);
  }
  unint64_t v6 = v3[122];
  if (v6 < v6 + a2) {
    uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3 + 121, v6 + a2);
  }
  unint64_t v7 = 32 * v3[147];
  if (v7 < a2 + v7)
  {
    return re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity(v3 + 146, (a2 + v7 + 31) >> 5);
  }
  return result;
}

void *RERigAssetBuilderReserveParentConstraints(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[14];
  unint64_t v5 = v4 + a2;
  if (v4 < v5) {
    uint64_t result = re::DynamicArray<re::RigBasicConstraint>::setCapacity(result + 13, v5);
  }
  unint64_t v6 = v3[122];
  if (v6 < v6 + a2) {
    uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3 + 121, v6 + a2);
  }
  unint64_t v7 = 32 * v3[147];
  if (v7 < a2 + v7)
  {
    return re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity(v3 + 146, (a2 + v7 + 31) >> 5);
  }
  return result;
}

void *RERigAssetBuilderReserveAimConstraints(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[19];
  unint64_t v5 = v4 + a2;
  if (v4 < v5) {
    uint64_t result = re::DynamicArray<re::RigAimConstraint>::setCapacity(result + 18, v5);
  }
  unint64_t v6 = v3[122];
  if (v6 < v6 + a2) {
    uint64_t result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3 + 121, v6 + a2);
  }
  unint64_t v7 = 32 * v3[147];
  if (v7 < a2 + v7)
  {
    return re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity(v3 + 146, (a2 + v7 + 31) >> 5);
  }
  return result;
}

uint64_t RERigAssetBuilderAddTransformRigNode(uint64_t a1, const char *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  __n128 v5 = 0u;
  long long v6 = 0u;
  *(void *)&long long v7 = 0x3F8000003F800000;
  *((void *)&v7 + 1) = 1065353216;
  LOBYTE(v8) = 0;
  re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(a1 + 888), (uint64_t)&v5);
  LOBYTE(v6) = 1;
  *((void *)&v6 + 1) = *(void *)(a1 + 904) - 1;
  long long v7 = xmmword_234378E20;
  uint64_t v8 = -1;
  re::DynamicArray<re::RigNode>::add((_anonymous_namespace_ *)(a1 + 1048), &v5);
  re::StringID::destroyString((re::StringID *)&v5);
  return *(void *)(a1 + 1064) - 1;
}

uint64_t anonymous namespace'::RigAssetBuilder::allocateStringID(_anonymous_namespace_::RigAssetBuilder *this, const char *a2, const char *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v6 = (char *)(a2 + 1392);
  long long v7 = (re::Allocator *)(*(uint64_t (**)(const char *))(*(void *)a2 + 24))(a2);
  re::DynamicString::DynamicString((re::DynamicString *)&v23, a3, v7);
  unint64_t v9 = *((void *)a2 + 179);
  unint64_t v10 = *((void *)a2 + 175);
  if (v9 + 1 > 32 * v10)
  {
    re::BucketArray<re::DynamicString,32ul>::setBucketsCapacity(v6, (v9 + 32) >> 5);
    unint64_t v10 = *((void *)a2 + 175);
  }
  if (v10 <= v9 >> 5)
  {
    uint64_t v27 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v28 = 136315906;
    long long v29 = "operator[]";
    __int16 v30 = 1024;
    int v31 = 858;
    __int16 v32 = 2048;
    unint64_t v33 = v9 >> 5;
    __int16 v34 = 2048;
    unint64_t v35 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_22;
  }
  if (a2[1408]) {
    uint64_t v11 = a2 + 1416;
  }
  else {
    uint64_t v11 = (const char *)*((void *)a2 + 178);
  }
  uint64_t v12 = *(void *)&v11[8 * (v9 >> 5)];
  ++*((void *)a2 + 179);
  ++*((_DWORD *)a2 + 360);
  uint64_t v13 = v12 + 32 * (v9 & 0x1F);
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(void *)uint64_t v13 = v23;
  uint64_t v23 = 0;
  uint64_t v14 = *(void *)(v13 + 16);
  *(void *)(v13 + 16) = v25;
  uint64_t v25 = v14;
  *(void *)(v13 + 24) = v26;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v13 + 8);
  *(void *)(v13 + 8) = v24;
  uint64_t v24 = v15;
  if (v23 && (v15 & 1) != 0) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  uint64_t v16 = *((void *)a2 + 179);
  if (!v16)
  {
LABEL_22:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t result = re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)v6, v16 - 1);
  unsigned int v18 = *(char **)(result + 16);
  if ((*(unsigned char *)(result + 8) & 1) == 0) {
    unsigned int v18 = (char *)(result + 9);
  }
  if (v18)
  {
    uint64_t v19 = *v18;
    if (*v18)
    {
      char v20 = v18[1];
      if (v20)
      {
        id v21 = (unsigned __int8 *)(v18 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)this = 2 * v19;
  *((void *)this + 1) = v18;
  return result;
}

uint64_t RERigAssetBuilderAddJointRigNode(uint64_t a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  __n128 v5 = 0u;
  uint64_t v6 = 0;
  uint64_t v7 = 0x3F80000000000000;
  long long v8 = 0u;
  uint64_t v9 = 0;
  uint64_t v10 = 0x3F80000000000000;
  uint64_t v11 = 0x3F8000003F800000;
  uint64_t v12 = 1065353216;
  char v13 = 0;
  re::DynamicArray<re::RigJoint>::add((_anonymous_namespace_ *)(a1 + 928), (uint64_t)&v5);
  LOBYTE(v6) = 2;
  uint64_t v7 = *(void *)(a1 + 944) - 1;
  long long v8 = xmmword_234378E20;
  uint64_t v9 = -1;
  re::DynamicArray<re::RigNode>::add((_anonymous_namespace_ *)(a1 + 1048), &v5);
  re::StringID::destroyString((re::StringID *)&v5);
  return *(void *)(a1 + 1064) - 1;
}

uint64_t RERigAssetBuilderAddPointConstraint(void *a1)
{
  char v7 = 0;
  __int16 v8 = 0;
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v11 = 0;
  v9[1] = 0;
  _OWORD v9[2] = 0;
  int v10 = 0;
  v9[0] = v2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v9, 0);
  ++v10;
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v12 = v3;
  re::DynamicArray<int>::setCapacity(&v12, 0);
  ++v15;
  re::DynamicArray<re::RigComponentConstraint>::add(a1 + 3, (__int16 *)&v7);
  if (v12)
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v12 + 40))();
    }
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    ++v15;
  }
  if (v9[0] && v11) {
    (*(void (**)(void))(*(void *)v9[0] + 40))();
  }
  uint64_t v4 = a1[5] - 1;
  uint64_t v5 = re::BucketArray<re::RigNodeConstraint,32ul>::addUninitialized((uint64_t)(a1 + 146));
  *(unsigned char *)uint64_t v5 = 1;
  *(void *)(v5 + 8) = v4;
  return a1[151] - 1;
}

uint64_t RERigAssetBuilderAddOrientConstraint(void *a1)
{
  char v7 = 0;
  __int16 v8 = 0;
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v11 = 0;
  v9[1] = 0;
  _OWORD v9[2] = 0;
  int v10 = 0;
  v9[0] = v2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v9, 0);
  ++v10;
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v12 = v3;
  re::DynamicArray<int>::setCapacity(&v12, 0);
  ++v15;
  re::DynamicArray<re::RigComponentConstraint>::add(a1 + 8, (__int16 *)&v7);
  if (v12)
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v12 + 40))();
    }
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    ++v15;
  }
  if (v9[0] && v11) {
    (*(void (**)(void))(*(void *)v9[0] + 40))();
  }
  uint64_t v4 = a1[10] - 1;
  uint64_t v5 = re::BucketArray<re::RigNodeConstraint,32ul>::addUninitialized((uint64_t)(a1 + 146));
  *(unsigned char *)uint64_t v5 = 2;
  *(void *)(v5 + 8) = v4;
  return a1[151] - 1;
}

uint64_t RERigAssetBuilderAddParentConstraint(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v9 = 0;
  v7[1] = 0;
  void v7[2] = 0;
  int v8 = 0;
  v7[0] = v2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v7, 0);
  ++v8;
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v10 = v3;
  re::DynamicArray<int>::setCapacity(&v10, 0);
  ++v13;
  re::DynamicArray<re::RigBasicConstraint>::add(a1 + 13, (uint64_t)v7);
  if (v10)
  {
    if (v14) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    ++v13;
  }
  if (v7[0] && v9) {
    (*(void (**)(void))(*(void *)v7[0] + 40))();
  }
  uint64_t v4 = a1[15] - 1;
  uint64_t v5 = re::BucketArray<re::RigNodeConstraint,32ul>::addUninitialized((uint64_t)(a1 + 146));
  *(unsigned char *)uint64_t v5 = 3;
  *(void *)(v5 + 8) = v4;
  return a1[151] - 1;
}

uint64_t RERigAssetBuilderAddAimConstraint(void *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v9 = 0;
  int v8 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v14 = 0;
  v12[1] = 0;
  uint64_t v12[2] = 0;
  int v13 = 0;
  v12[0] = v2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v12, 0);
  ++v13;
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v15 = v3;
  re::DynamicArray<int>::setCapacity(&v15, 0);
  ++v18;
  uint64_t v20 = -1;
  __n128 v4 = re::DynamicArray<re::RigAimConstraint>::add((_anonymous_namespace_ *)(a1 + 18), (uint64_t)&v8);
  if (v15)
  {
    if (v19) {
      (*(void (**)(__n128))(*(void *)v15 + 40))(v4);
    }
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    ++v18;
  }
  if (v12[0] && v14) {
    (*(void (**)(__n128))(*(void *)v12[0] + 40))(v4);
  }
  uint64_t v5 = a1[20] - 1;
  uint64_t v6 = re::BucketArray<re::RigNodeConstraint,32ul>::addUninitialized((uint64_t)(a1 + 146));
  *(unsigned char *)uint64_t v6 = 4;
  *(void *)(v6 + 8) = v5;
  return a1[151] - 1;
}

uint64_t RERigAssetBuilderSetConstraintRigNodes(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v5;
    uint64_t v19 = "Invalid constraint index: %zu";
    uint64_t v20 = v15;
    uint32_t v21 = 12;
    goto LABEL_28;
  }
  uint64_t v10 = (uint64_t)(a1 + 146);
  unint64_t v11 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2)+ 8);
  int v12 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v10, v5);
  if (v12 != 3)
  {
    if (v12 == 2)
    {
      uint64_t v22 = a3;
      uint64_t v23 = a5;
      unint64_t v5 = a1[10];
      if (v5 > v11)
      {
        re::DynamicArray<unsigned long>::operator=((_anonymous_namespace_ *)(a1[12] + 88 * v11 + 8), (uint64_t)&v22);
        if (a4)
        {
          uint64_t v22 = a4;
          uint64_t v23 = a5;
          unint64_t v13 = a1[10];
          if (v13 > v11)
          {
            uint64_t v14 = a1[12];
            goto LABEL_21;
          }
LABEL_35:
          uint64_t v24 = 0;
          long long v37 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v34 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v25 = 136315906;
          uint64_t v26 = "operator[]";
          __int16 v27 = 1024;
          int v28 = 789;
          __int16 v29 = 2048;
          unint64_t v30 = v11;
          __int16 v31 = 2048;
          unint64_t v32 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        return 1;
      }
      goto LABEL_31;
    }
    if (v12 != 1)
    {
      if (CoreRELog::onceToken == -1)
      {
LABEL_25:
        uint64_t v15 = (id)CoreRELog::log;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
LABEL_12:

          return 0;
        }
        int v18 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v10, v5);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        uint64_t v19 = "Cannot set constraint rig nodes for type: %u.";
        uint64_t v20 = v15;
        uint32_t v21 = 8;
LABEL_28:
        _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
        goto LABEL_12;
      }
LABEL_32:
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      goto LABEL_25;
    }
    uint64_t v22 = a3;
    uint64_t v23 = a5;
    unint64_t v5 = a1[5];
    if (v5 > v11)
    {
      re::DynamicArray<unsigned long>::operator=((_anonymous_namespace_ *)(a1[7] + 88 * v11 + 8), (uint64_t)&v22);
      if (a4)
      {
        uint64_t v22 = a4;
        uint64_t v23 = a5;
        unint64_t v13 = a1[5];
        if (v13 > v11)
        {
          uint64_t v14 = a1[7];
LABEL_21:
          uint64_t v17 = (_anonymous_namespace_ *)(v14 + 88 * v11 + 48);
          goto LABEL_22;
        }
        uint64_t v24 = 0;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v25 = 136315906;
        uint64_t v26 = "operator[]";
        __int16 v27 = 1024;
        int v28 = 789;
        __int16 v29 = 2048;
        unint64_t v30 = v11;
        __int16 v31 = 2048;
        unint64_t v32 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_34;
      }
      return 1;
    }
    uint64_t v24 = 0;
    long long v37 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    uint64_t v24 = 0;
    long long v37 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    uint64_t v24 = 0;
    long long v37 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v22 = a3;
  uint64_t v23 = a5;
  unint64_t v5 = a1[15];
  if (v5 <= v11) {
    goto LABEL_30;
  }
  re::DynamicArray<unsigned long>::operator=((_anonymous_namespace_ *)(a1[17] + 80 * v11), (uint64_t)&v22);
  if (a4)
  {
    uint64_t v22 = a4;
    uint64_t v23 = a5;
    unint64_t v13 = a1[15];
    if (v13 > v11)
    {
      uint64_t v17 = (_anonymous_namespace_ *)(a1[17] + 80 * v11 + 40);
LABEL_22:
      re::DynamicArray<float>::operator=(v17, (uint64_t)&v22);
      return 1;
    }
LABEL_34:
    uint64_t v24 = 0;
    long long v37 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    __int16 v31 = 2048;
    unint64_t v32 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  return 1;
}

_anonymous_namespace_ *re::DynamicArray<unsigned long>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<unsigned long>::copy(this, 0, *(char **)a2, v4);
      re::DynamicArray<unsigned long>::resize((uint64_t)this, *(void *)(a2 + 8));
    }
    else
    {
      *((void *)this + 2) = 0;
      ++*((_DWORD *)this + 6);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<unsigned long>::copy(this, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return this;
}

uint64_t RERigAssetBuilderSetConstraintComponentChannels(void *a1, unint64_t a2, char a3, char a4, char a5)
{
  unint64_t v5 = a2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v5;
    uint64_t v19 = "Invalid constraint index: %zu";
    uint64_t v20 = v14;
    uint32_t v21 = 12;
    goto LABEL_21;
  }
  unint64_t v10 = (unint64_t)(a1 + 146);
  unint64_t v11 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2)+ 8);
  int v12 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v10, v5);
  if (v12 != 4)
  {
    if (v12 == 2)
    {
      unint64_t v10 = a1[10];
      if (v10 > v11)
      {
        uint64_t v13 = a1[12];
        goto LABEL_15;
      }
      goto LABEL_24;
    }
    if (v12 != 1)
    {
      if (CoreRELog::onceToken == -1)
      {
LABEL_18:
        uint64_t v14 = (id)CoreRELog::log;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
LABEL_10:

          return 0;
        }
        int v18 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v10, v5);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        uint64_t v19 = "Cannot set constraint component channels for type: %u.";
        uint64_t v20 = v14;
        uint32_t v21 = 8;
LABEL_21:
        _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
        goto LABEL_10;
      }
LABEL_25:
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      goto LABEL_18;
    }
    unint64_t v10 = a1[5];
    if (v10 > v11)
    {
      uint64_t v13 = a1[7];
LABEL_15:
      uint64_t v16 = 88;
      goto LABEL_16;
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v5 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v10 = a1[20];
  if (v10 <= v11) {
    goto LABEL_23;
  }
  uint64_t v13 = a1[22];
  uint64_t v16 = 144;
LABEL_16:
  uint64_t v17 = (unsigned char *)(v13 + v11 * v16);
  *uint64_t v17 = a3;
  v17[1] = a4;
  void v17[2] = a5;
  return 1;
}

uint64_t RERigAssetBuilderSetAimConstraintPointAtRigNodes(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6 = a2;
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    uint64_t v16 = "Invalid constraint index: %zu";
    uint64_t v17 = v15;
    uint32_t v18 = 12;
    goto LABEL_15;
  }
  unint64_t v11 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) != 4)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      uint64_t v15 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_13:

        return 0;
      }
      int v19 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v11, v6);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v19;
      uint64_t v16 = "Cannot set aim constraint point at node for constraint type: %u.";
      uint64_t v17 = v15;
      uint32_t v18 = 8;
LABEL_15:
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
      goto LABEL_13;
    }
LABEL_17:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  unint64_t v11 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v11, v6)+ 8);
  if (a1[20] <= v11)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = a1[22];
  uint64_t v13 = (__n128 *)(v12 + 144 * v11);
  v13->n128_u8[3] = 0;
  v13[1] = a6;
  *(void *)long long buf = a3;
  *(void *)&uint8_t buf[8] = a5;
  re::DynamicArray<unsigned long>::operator=((_anonymous_namespace_ *)&v13[3], (uint64_t)buf);
  if (a4)
  {
    *(void *)long long buf = a4;
    *(void *)&uint8_t buf[8] = a5;
    re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(v12 + 144 * v11 + 88), (uint64_t)buf);
  }
  return 1;
}

uint64_t RERigAssetBuilderSetAimConstraintForwardAxisRigNodes(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  unint64_t v6 = a2;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    uint64_t v16 = "Invalid constraint index: %zu";
    uint64_t v17 = v15;
    uint32_t v18 = 12;
    goto LABEL_15;
  }
  unint64_t v11 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) != 4)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_11:
      uint64_t v15 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
LABEL_12:

        return 0;
      }
      int v20 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v11, v6);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v20;
      uint64_t v16 = "Cannot set aim constraint forward axis node for constraint type: %u.";
      uint64_t v17 = v15;
      uint32_t v18 = 8;
LABEL_15:
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
      goto LABEL_12;
    }
LABEL_17:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v11, v6)+ 8);
  if (a1[20] <= v11)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = a1[22];
  uint64_t v13 = (__n128 *)(v12 + 144 * v11);
  uint64_t v14 = 1;
  v13->n128_u8[3] = 1;
  v13[1] = a6;
  *(void *)long long buf = a3;
  *(void *)&uint8_t buf[8] = a5;
  re::DynamicArray<unsigned long>::operator=((_anonymous_namespace_ *)&v13[3], (uint64_t)buf);
  if (a4)
  {
    *(void *)long long buf = a4;
    *(void *)&uint8_t buf[8] = a5;
    re::DynamicArray<float>::operator=((_anonymous_namespace_ *)(v12 + 144 * v11 + 88), (uint64_t)buf);
  }
  return v14;
}

uint64_t RERigAssetBuilderSetAimConstraintForwardWorldAxis(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid constraint index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v5 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) == 4)
  {
    unint64_t v5 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, v3)+ 8);
    if (a1[20] > v5)
    {
      unint64_t v6 = (__n128 *)(a1[22] + 144 * v5);
      v6->n128_u8[3] = 2;
      v6[1] = a3;
      return 1;
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  char v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, v3);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set aim constraint forward world axis for constraint type: %u.", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetAimConstraintPointUpRigNode(void *a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  unint64_t v4 = a2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid constraint index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v7 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) == 4)
  {
    unint64_t v7 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v7, v4)+ 8);
    if (a1[20] > v7)
    {
      int v8 = (__n128 *)(a1[22] + 144 * v7);
      v8->n128_u8[4] = 0;
      void v8[2] = a4;
      v8[8].n128_u64[0] = a3;
      return 1;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    int v12 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v7, v4);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot set aim constraint point up node for constraint type: %u.", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetAimConstraintUpAxisRigNode(void *a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  unint64_t v4 = a2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid constraint index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v7 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) == 4)
  {
    unint64_t v7 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v7, v4)+ 8);
    if (a1[20] > v7)
    {
      int v8 = (__n128 *)(a1[22] + 144 * v7);
      uint64_t result = 1;
      v8->n128_u8[4] = 1;
      void v8[2] = a4;
      v8[8].n128_u64[0] = a3;
      return result;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    int v12 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v7, v4);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot set aim constraint up axis node for constraint type: %u.", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetAimConstraintUpWorldAxis(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[151] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid constraint index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v5 = (unint64_t)(a1 + 146);
  if (*(unsigned char *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)(a1 + 146), a2) == 4)
  {
    unint64_t v5 = *(void *)(re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, v3)+ 8);
    if (a1[20] > v5)
    {
      unint64_t v6 = (__n128 *)(a1[22] + 144 * v5);
      v6->n128_u8[4] = 2;
      void v6[2] = a3;
      return 1;
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  char v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = *(unsigned __int8 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](v5, v3);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set aim constraint up world axis node for constraint type: %u.", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetRigNodeTranslation(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1[133] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v4 = a1;
  uint64_t v5 = a1[135] + 56 * a2;
  unint64_t v6 = *(void *)(v5 + 24);
  int v7 = *(unsigned __int8 *)(v5 + 16);
  if (v7 == 2)
  {
    unint64_t v11 = (void *)a1[118];
    if ((unint64_t)v11 > v6)
    {
      uint64_t v8 = a1[120];
      uint64_t v9 = 96 * v6;
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  if (v7 == 1)
  {
    if (a1[113] > v6)
    {
      uint64_t v8 = a1[115];
      uint64_t v9 = v6 << 6;
LABEL_13:
      *(__n128 *)(v8 + v9) = a3;
      return 1;
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    unint64_t v4 = v11;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_21:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    int v14 = *(unsigned __int8 *)(re::DynamicArray<re::RigNode>::operator[]((uint64_t)(v4 + 131), v3) + 16);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v14;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Unknown rig node type: %u", buf, 8u);
  }

  return 0;
}

uint64_t re::DynamicArray<re::RigNode>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 56 * a2;
}

uint64_t RERigAssetBuilderSetRigNodeRotation(void *a1, unint64_t a2, char a3, __n128 a4)
{
  unint64_t v4 = a2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1[133] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v5 = a1;
  uint64_t v6 = a1[135] + 56 * a2;
  unint64_t v7 = *(void *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v6 + 16);
  if (v8 == 2)
  {
    if (a1[118] > v7)
    {
      *(__n128 *)(a1[120] + 96 * v7 + 32) = a4;
      int v10 = (void *)a1[118];
      if ((unint64_t)v10 > v7)
      {
        *(unsigned char *)(a1[120] + 96 * v7 + 8ArcSharedObject::ArcSharedObject(this, 0) = a3;
        return 1;
      }
      goto LABEL_24;
    }
LABEL_23:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v4 = &_os_log_internal;
    uint64_t v5 = v10;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  if (v8 == 1)
  {
    if (a1[113] <= v7)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      *(__n128 *)(a1[115] + (v7 << 6) + 16) = a4;
      if (a1[113] > v7)
      {
        *(unsigned char *)(a1[115] + (v7 << 6) + 48) = a3;
        return 1;
      }
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_25:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  int v12 = (id)CoreRELog::log;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = *(unsigned __int8 *)(re::DynamicArray<re::RigNode>::operator[]((uint64_t)(v5 + 131), v4) + 16);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Unknown rig node type: %u", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetRigNodeScale(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1[133] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v4 = a1;
  uint64_t v5 = a1[135] + 56 * a2;
  unint64_t v6 = *(void *)(v5 + 24);
  int v7 = *(unsigned __int8 *)(v5 + 16);
  if (v7 == 2)
  {
    uint64_t v9 = (void *)a1[118];
    if ((unint64_t)v9 > v6)
    {
      *(__n128 *)(a1[120] + 96 * v6 + 64) = a3;
      return 1;
    }
    goto LABEL_20;
  }
  if (v7 == 1)
  {
    if (a1[113] > v6)
    {
      *(__n128 *)(a1[115] + (v6 << 6) + 32) = a3;
      return 1;
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    unint64_t v4 = v9;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_21:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    int v12 = *(unsigned __int8 *)(re::DynamicArray<re::RigNode>::operator[]((uint64_t)(v4 + 131), v3) + 16);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Unknown rig node type: %u", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetRigNodeRotationOrientation(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[133] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v4 = a1;
  uint64_t v5 = a1[135];
  if (*(unsigned char *)(v5 + 56 * a2 + 16) == 2)
  {
    unint64_t v6 = *(void *)(v5 + 56 * a2 + 24);
    int v7 = (void *)a1[118];
    if ((unint64_t)v7 > v6)
    {
      *(__n128 *)(a1[120] + 96 * v6 + 16) = a3;
      return 1;
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    unint64_t v4 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  int v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = *(unsigned __int8 *)(re::DynamicArray<re::RigNode>::operator[]((uint64_t)(v4 + 131), v3) + 16);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid rig node type for rotation orientation: %u", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderSetRigNodeScaleOrientation(void *a1, unint64_t a2, __n128 a3)
{
  unint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[133] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v4 = a1;
  uint64_t v5 = a1[135];
  if (*(unsigned char *)(v5 + 56 * a2 + 16) == 2)
  {
    unint64_t v6 = *(void *)(v5 + 56 * a2 + 24);
    int v7 = (void *)a1[118];
    if ((unint64_t)v7 > v6)
    {
      *(__n128 *)(a1[120] + 96 * v6 + 48) = a3;
      return 1;
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    unint64_t v4 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  int v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = *(unsigned __int8 *)(re::DynamicArray<re::RigNode>::operator[]((uint64_t)(v4 + 131), v3) + 16);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid rig node type for scale orientation: %u", buf, 8u);
  }

  return 0;
}

BOOL RERigAssetBuilderSetRigNodeParent(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 1064);
  if (v4 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid rig node index: %zu", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    *(void *)(*(void *)(a1 + 1080) + 56 * a2 + 32) = a3;
  }
  return v4 > a2;
}

uint64_t RERigAssetBuilderSetRigNodeConstraints(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 1064) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v18 = 134217984;
    unint64_t v19 = a2;
    uint64_t v17 = "Invalid rig node index: %zu";
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(a1 + 1080) + 56 * a2;
  *(void *)(v7 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  unint64_t v8 = (void *)(v7 + 40);
  v8[1] = *(void *)(a1 + 984);
  if (!a4)
  {
LABEL_8:
    *unint64_t v8 = a4;
    return 1;
  }
  uint64_t v10 = a4;
  while (1)
  {
    unint64_t v12 = *a3++;
    unint64_t v11 = v12;
    if (v12 >= *(void *)(a1 + 1208)) {
      break;
    }
    long long v13 = (_OWORD *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](a1 + 1168, v11);
    unint64_t v14 = *(void *)(a1 + 984);
    if (v14 >= *(void *)(a1 + 976))
    {
      re::DynamicArray<re::RigNodeConstraint>::growCapacity((void *)(a1 + 968), v14 + 1);
      unint64_t v14 = *(void *)(a1 + 984);
    }
    *(_OWORD *)(*(void *)(a1 + 1000) + 16 * v14) = *v13;
    ++*(void *)(a1 + 984);
    ++*(_DWORD *)(a1 + 992);
    if (!--v10) {
      goto LABEL_8;
    }
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  long long v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v18 = 134217984;
    unint64_t v19 = v11;
    uint64_t v17 = "Invalid constraint index: %zu";
LABEL_17:
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v18, 0xCu);
  }
LABEL_18:

  return 0;
}

uint64_t RERigAssetBuilderAddTwoBoneIKHandle(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v22 = a3;
  v23[0] = a2;
  uint64_t v20 = a5;
  uint64_t v21 = a4;
  uint64_t v6 = (uint64_t)(a1 + 153);
  uint64_t v7 = a1[158];
  if (v7
    && *(unsigned char *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)(a1 + 153), v7 - 1) == 1)
  {
    uint64_t v9 = a1[158];
    if (!v9) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v9 - 1)+ 8);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    *(void *)&long long v26 = 0;
    *(void *)&long long v25 = 0;
    DWORD2(v25) = 0;
    __n128 v24 = (__n128)(unint64_t)v11;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v24, 0);
    ++DWORD2(v25);
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    *((void *)&v28 + 1) = 0;
    long long v27 = 0uLL;
    LODWORD(v28) = 0;
    *((void *)&v26 + 1) = v12;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((void *)&v26 + 1, 0);
    LODWORD(v28) = v28 + 1;
    uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v29 = v13;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v29, 0);
    ++v32;
    uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v38 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = 0;
    uint64_t v34 = v14;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v34, 0);
    ++v37;
    uint64_t v15 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v43 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = 0;
    uint64_t v39 = v15;
    re::DynamicArray<int>::setCapacity(&v39, 0);
    ++v42;
    uint64_t v16 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v48 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = 0;
    uint64_t v44 = v16;
    re::DynamicArray<int>::setCapacity(&v44, 0);
    ++v47;
    re::DynamicArray<re::RigTwoBoneIKHandles>::add((_anonymous_namespace_ *)(a1 + 96), (uint64_t)&v24);
    if (v44)
    {
      if (v48) {
        (*(void (**)(void))(*(void *)v44 + 40))();
      }
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v44 = 0;
      ++v47;
    }
    if (v39)
    {
      if (v43) {
        (*(void (**)(void))(*(void *)v39 + 40))();
      }
      uint64_t v43 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v39 = 0;
      ++v42;
    }
    if (v34)
    {
      if (v38) {
        (*(void (**)(void))(*(void *)v34 + 40))();
      }
      uint64_t v38 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 0;
      ++v37;
    }
    if (v29)
    {
      if (v33) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      uint64_t v33 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      ++v32;
    }
    if (*((void *)&v26 + 1))
    {
      if (*((void *)&v28 + 1)) {
        (*(void (**)(void))(**((void **)&v26 + 1) + 40))();
      }
      *((void *)&v28 + 1) = 0;
      long long v27 = 0uLL;
      *((void *)&v26 + 1) = 0;
      LODWORD(v28) = v28 + 1;
    }
    if (v24.n128_u64[0] && (void)v26) {
      (*(void (**)(void))(*(void *)v24.n128_u64[0] + 40))();
    }
    unint64_t v10 = a1[98] - 1;
    v24.n128_u8[0] = 1;
    v24.n128_u64[1] = v10;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)(a1 + 126), &v24);
  }
  unint64_t v17 = a1[98];
  if (v17 <= v10)
  {
    v23[1] = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    __n128 v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v49 = 136315906;
    long long v50 = "operator[]";
    __int16 v51 = 1024;
    int v52 = 789;
    __int16 v53 = 2048;
    unint64_t v54 = v10;
    __int16 v55 = 2048;
    unint64_t v56 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  int v18 = (void *)(a1[100] + 240 * v10);
  re::DynamicArray<unsigned long>::add(v18, v23);
  re::DynamicArray<unsigned long>::add(v18 + 5, &v22);
  re::DynamicArray<unsigned long>::add(v18 + 10, &v21);
  re::DynamicArray<unsigned long>::add(v18 + 15, &v20);
  v24.n128_u8[0] = 1;
  v24.n128_u64[1] = v10;
  *(void *)&long long v25 = v18[2] - 1;
  return a1[158] - 1;
}

__n128 re::BucketArray<anonymous namespace'::RigAssetBuilder::MappedIKHandle,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = (__n128 *)(v7 + 24 * (v4 & 0x1F));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  return result;
}

uint64_t RERigAssetBuilderSetTwoBoneIKHandleTwistOffset(void *a1, unint64_t a2, float a3)
{
  unint64_t v3 = a2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a1[158] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v16 = (id)CoreRELog::log;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Invalid IK handle index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v6 = (uint64_t)(a1 + 153);
  if (*(unsigned char *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)(a1 + 153), a2) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_14:
      unint64_t v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v18 = *(unsigned __int8 *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "IK handle type is not a two-bone IK: %u", buf, 8u);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_14;
  }
  unint64_t v7 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3)+ 8);
  unint64_t v8 = a1[98];
  if (v8 <= v7)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    uint64_t v6 = v8;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = a1[100];
  unint64_t v10 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3)+ 16);
  uint64_t v11 = v9 + 240 * v7;
  unint64_t v14 = *(void *)(v11 + 176);
  uint64_t v12 = (unint64_t *)(v11 + 176);
  unint64_t v13 = v14;
  if (v10 >= v14)
  {
    re::DynamicArray<float>::resize(v9 + 240 * v7 + 160, v10 + 1);
    unint64_t v13 = *v12;
  }
  if (v13 <= v10)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(void *)(v9 + 240 * v7 + 192) + 4 * v1ArcSharedObject::ArcSharedObject(this, 0) = a3;
  return 1;
}

uint64_t RERigAssetBuilderSetTwoBoneIKHandleSoftIKPercentage(void *a1, unint64_t a2, float a3)
{
  unint64_t v3 = a2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a1[158] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid IK handle index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v6 = (uint64_t)(a1 + 153);
  if (*(unsigned char *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)(a1 + 153), a2) != 1)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_14:
      uint64_t v16 = (id)CoreRELog::log;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = *(unsigned __int8 *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v17;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "IK handle type is not a two-bone IK: %u", buf, 8u);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_14;
  }
  unint64_t v7 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3)+ 8);
  if (a1[98] <= v7)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = a1[100];
  unint64_t v9 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3)+ 16);
  uint64_t v10 = v8 + 240 * v7;
  unint64_t v13 = *(void *)(v10 + 216);
  uint64_t v11 = (unint64_t *)(v10 + 216);
  unint64_t v12 = v13;
  if (v9 >= v13)
  {
    re::DynamicArray<float>::resize((void *)(v8 + 240 * v7 + 200), v9 + 1, &re::TwoBoneIKOptions::kDefaultSoftIKPercentage);
    unint64_t v12 = *v11;
  }
  if (v12 <= v9)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(void *)(v8 + 240 * v7 + 232) + 4 * v9) = a3;
  return 1;
}

uint64_t RERigAssetBuilderAddSingleChainIKHandle(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  uint64_t v17 = a4;
  uint64_t v5 = (uint64_t)(a1 + 153);
  uint64_t v6 = a1[158];
  if (v6
    && *(unsigned char *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)(a1 + 153), v6 - 1) == 2)
  {
    uint64_t v8 = a1[158];
    if (!v8) {
      goto LABEL_20;
    }
    unint64_t v9 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v5, v8 - 1)+ 8);
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    *(void *)&long long v23 = 0;
    *(void *)&long long v22 = 0;
    DWORD2(v22) = 0;
    __n128 v21 = (__n128)(unint64_t)v10;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v21, 0);
    ++DWORD2(v22);
    uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    *((void *)&v25 + 1) = 0;
    long long v24 = 0uLL;
    LODWORD(v25) = 0;
    *((void *)&v23 + 1) = v11;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((void *)&v23 + 1, 0);
    LODWORD(v25) = v25 + 1;
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v30 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v26 = v12;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v26, 0);
    ++v29;
    int v31 = 1008981770;
    v13.n128_f32[0] = re::DynamicArray<re::RigSingleChainIKHandles>::add((_anonymous_namespace_ *)(a1 + 101), (uint64_t)&v21);
    if (v26)
    {
      if (v30) {
        (*(void (**)(float))(*(void *)v26 + 40))(v13.n128_f32[0]);
      }
      uint64_t v30 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      ++v29;
    }
    if (*((void *)&v23 + 1))
    {
      if (*((void *)&v25 + 1)) {
        (*(void (**)(__n128))(**((void **)&v23 + 1) + 40))(v13);
      }
      *((void *)&v25 + 1) = 0;
      long long v24 = 0uLL;
      *((void *)&v23 + 1) = 0;
      LODWORD(v25) = v25 + 1;
    }
    if (v21.n128_u64[0] && (void)v23) {
      (*(void (**)(__n128))(*(void *)v21.n128_u64[0] + 40))(v13);
    }
    unint64_t v9 = a1[103] - 1;
    v21.n128_u8[0] = 2;
    v21.n128_u64[1] = v9;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)(a1 + 126), &v21);
  }
  unint64_t v14 = a1[103];
  if (v14 <= v9)
  {
    uint64_t v20 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    __n128 v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v32 = 136315906;
    uint64_t v33 = "operator[]";
    __int16 v34 = 1024;
    int v35 = 789;
    __int16 v36 = 2048;
    unint64_t v37 = v9;
    __int16 v38 = 2048;
    unint64_t v39 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v17, v18, v19, v20);
    _os_crash();
    __break(1u);
  }
  uint64_t v15 = (void *)(a1[105] + (v9 << 7));
  re::DynamicArray<unsigned long>::add(v15, &v19);
  re::DynamicArray<unsigned long>::add(v15 + 5, &v18);
  re::DynamicArray<unsigned long>::add(v15 + 10, &v17);
  v21.n128_u8[0] = 2;
  v21.n128_u64[1] = v9;
  *(void *)&long long v22 = v15[2] - 1;
  return a1[158] - 1;
}

uint64_t RERigAssetBuilderSetSingleChainIKHandleTolerance(void *a1, unint64_t a2, float a3)
{
  unint64_t v3 = a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1[158] <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid IK handle index: %zu", buf, 0xCu);
    }

    return 0;
  }
  unint64_t v6 = (unint64_t)(a1 + 153);
  if (*(unsigned char *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)(a1 + 153), a2) == 2)
  {
    unint64_t v6 = *(void *)(re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3)+ 8);
    if (a1[103] > v6)
    {
      *(float *)(a1[105] + (v6 << 7) + 12ArcSharedObject::ArcSharedObject(this, 0) = a3;
      return 1;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = *(unsigned __int8 *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](v6, v3);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v10;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "IK handle type is not a single-chain IK: %u", buf, 8u);
  }

  return 0;
}

uint64_t RERigAssetBuilderFinishRigDefinition(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re::Allocator *)(a1 + 24);
  unint64_t v3 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  re::validateRigDefinitionData(v3, v2, (uint64_t)v13);
  if (v13[0])
  {
    unint64_t v4 = *(void *)(a1 + 1320);
    unint64_t v5 = *(void *)(a1 + 1288);
    if (v4 + 1 > 4 * v5)
    {
      re::BucketArray<re::RigDefinition,4ul>::setBucketsCapacity((void *)(a1 + 1280), (v4 + 4) >> 2);
      unint64_t v5 = *(void *)(a1 + 1288);
    }
    if (v5 > v4 >> 2)
    {
      if (*(unsigned char *)(a1 + 1296)) {
        uint64_t v6 = a1 + 1304;
      }
      else {
        uint64_t v6 = *(void *)(a1 + 1312);
      }
      uint64_t v9 = *(void *)(v6 + 8 * (v4 >> 2));
      ++*(void *)(a1 + 1320);
      ++*(_DWORD *)(a1 + 1328);
      re::RigDefinition::RigDefinition(v9 + 1144 * (v4 & 3), (uint64_t)v2);
      re::RigDefinition::deinit(v2);
      int v10 = (re::Allocator *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      re::RigDefinition::init(v2, v10);
      uint64_t v8 = *(void *)(a1 + 1320) - 1;
      goto LABEL_12;
    }
    uint64_t v18 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v19 = 136315906;
    uint64_t v20 = "operator[]";
    __int16 v21 = 1024;
    int v22 = 858;
    __int16 v23 = 2048;
    unint64_t v24 = v4 >> 2;
    __int16 v25 = 2048;
    unint64_t v26 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_22;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_22:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (v15) {
      long long v12 = v17;
    }
    else {
      long long v12 = v16;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Rig Definition Validation Failed: %s", buf, 0xCu);
  }

  uint64_t v8 = -1;
LABEL_12:
  if (!v13[0] && v14 && (v15 & 1) != 0) {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 40))(v14, v17);
  }
  return v8;
}

void *re::RigDefinition::init(re::RigDefinition *this, re::Allocator *a2)
{
  unint64_t v3 = this;
  unint64_t v5 = a2;
  *(void *)this = a2;
  re::DynamicArray<re::RigComponentConstraint>::setCapacity(this, 0);
  ++*((_DWORD *)v3 + 6);
  *((void *)v3 + 5) = a2;
  re::DynamicArray<re::RigComponentConstraint>::setCapacity((void *)v3 + 5, 0);
  ++*((_DWORD *)v3 + 16);
  *((void *)v3 + 1ArcSharedObject::ArcSharedObject(this, 0) = a2;
  re::DynamicArray<re::RigBasicConstraint>::setCapacity((void *)v3 + 10, 0);
  ++*((_DWORD *)v3 + 26);
  *((void *)v3 + 15) = a2;
  re::DynamicArray<re::RigAimConstraint>::setCapacity((void *)v3 + 15, 0);
  *((void *)v3 + 2ArcSharedObject::ArcSharedObject(this, 0) = a2;
  unint64_t v3 = (re::RigDefinition *)((char *)v3 + 160);
  ++*((_DWORD *)v3 - 4);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3, 0);
  ++*((_DWORD *)v3 + 6);
  re::DynamicRegisterTable::initArrays<re::Allocator *&>((void *)v3 + 5, &v5);
  *((void *)v3 + 45) = v5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 45, 0);
  ++*((_DWORD *)v3 + 96);
  *((void *)v3 + 58) = v5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 58, 0);
  ++*((_DWORD *)v3 + 122);
  *((void *)v3 + 63) = v5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 63, 0);
  ++*((_DWORD *)v3 + 132);
  *((void *)v3 + 68) = v5;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)v3 + 68, 0);
  ++*((_DWORD *)v3 + 142);
  *((void *)v3 + 73) = v5;
  re::DynamicArray<re::RigTwoBoneIKHandles>::setCapacity((void *)v3 + 73, 0);
  ++*((_DWORD *)v3 + 152);
  *((void *)v3 + 78) = v5;
  re::DynamicArray<re::RigSingleChainIKHandles>::setCapacity((void *)v3 + 78, 0);
  ++*((_DWORD *)v3 + 162);
  *((void *)v3 + 88) = v5;
  re::DynamicArray<re::RigTransform>::setCapacity((void *)v3 + 88, 0);
  ++*((_DWORD *)v3 + 182);
  *((void *)v3 + 93) = v5;
  re::DynamicArray<re::RigJoint>::setCapacity((void *)v3 + 93, 0);
  ++*((_DWORD *)v3 + 192);
  *((void *)v3 + 98) = v5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 98, 0);
  ++*((_DWORD *)v3 + 202);
  *((void *)v3 + 103) = v5;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 103, 0);
  ++*((_DWORD *)v3 + 212);
  *((void *)v3 + 108) = v5;
  re::DynamicArray<re::RigNode>::setCapacity((void *)v3 + 108, 0);
  ++*((_DWORD *)v3 + 222);
  *((void *)v3 + 113) = v5;
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)v3 + 113, 0);
  ++*((_DWORD *)v3 + 232);
  *((void *)v3 + 118) = v5;
  __n128 result = re::DynamicArray<re::RigPose>::setCapacity((void *)v3 + 118, 0);
  ++*((_DWORD *)v3 + 242);
  return result;
}

uint64_t RERigAssetBuilderGetRigDefinition(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 1320) <= a2) {
    return 0;
  }
  else {
    return re::BucketArray<re::RigDefinition,4ul>::operator[](a1 + 1280, a2);
  }
}

uint64_t re::BucketArray<re::RigDefinition,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 1144 * (a2 & 3);
}

BOOL RERigAssetBuilderAssignMeshRig(uint64_t a1, unint64_t a2, char a3, const char *a4, const char *a5, const char *a6)
{
  unint64_t v6 = a2;
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)(a1 + 1320);
  if (v7 > a2)
  {
    uint64_t v24 = 0;
    __int16 v25 = "";
    uint64_t v26 = 0;
    uint64_t v27 = "";
    if (a5)
    {
    }
    uint64_t v28 = 0;
    long long v29 = "";
    if (a6)
    {
    }
    int v30 = v6;
    unint64_t v13 = *(void *)(a1 + 1376);
    unint64_t v14 = *(void *)(a1 + 1344);
    if (v13 + 1 > 8 * v14)
    {
      re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity((void *)(a1 + 1336), (v13 + 8) >> 3);
      unint64_t v14 = *(void *)(a1 + 1344);
    }
    if (v14 > v13 >> 3)
    {
      if (*(unsigned char *)(a1 + 1352)) {
        uint64_t v15 = a1 + 1360;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 1368);
      }
      uint64_t v17 = *(void *)(v15 + 8 * (v13 >> 3));
      ++*(void *)(a1 + 1376);
      ++*(_DWORD *)(a1 + 1384);
      uint64_t v18 = v17 + ((v13 & 7) << 6);
      *(unsigned char *)uint64_t v18 = a3;
      int v19 = v25;
      *(void *)(v18 + 8) = v24;
      *(void *)(v18 + 16) = v19;
      uint64_t v24 = 0;
      __int16 v25 = "";
      uint64_t v20 = v27;
      *(void *)(v18 + 24) = v26;
      *(void *)(v18 + 32) = v20;
      uint64_t v26 = 0;
      uint64_t v27 = "";
      __int16 v21 = v29;
      *(void *)(v18 + 4ArcSharedObject::ArcSharedObject(this, 0) = v28;
      *(void *)(v18 + 48) = v21;
      uint64_t v28 = 0;
      long long v29 = "";
      *(_DWORD *)(v18 + + 56) = v6;
      re::StringID::destroyString((re::StringID *)&v28);
      re::StringID::destroyString((re::StringID *)&v26);
      re::StringID::destroyString((re::StringID *)&v24);
      return v7 > v6;
    }
    uint64_t v31 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v32 = 136315906;
    uint64_t v33 = "operator[]";
    __int16 v34 = 1024;
    int v35 = 858;
    __int16 v36 = 2048;
    unint64_t v37 = v13 >> 3;
    __int16 v38 = 2048;
    unint64_t v39 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_19:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Invalid rig definition index: %zu", buf, 0xCu);
  }

  return v7 > v6;
}

uint64_t RERigAssetBuilderCreateRigAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unint64_t v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 120, 8);
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(void *)(v5 + 112) = 0;
  unint64_t v6 = *(void *)(a1 + 1320);
  if (*(void *)(v5 + 8) < v6)
  {
    re::DynamicArray<re::RigDefinition>::setCapacity((void *)v5, *(void *)(a1 + 1320));
    goto LABEL_4;
  }
  if (v6)
  {
LABEL_4:
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (_OWORD *)re::BucketArray<re::RigDefinition,4ul>::operator[](a1 + 1280, v8);
      if (*(void *)(v5 + 16) <= v8) {
        break;
      }
      re::RigDefinition::operator=((_OWORD *)(*(void *)(v5 + 32) + v7), v9);
      ++v8;
      v7 += 1144;
      if (v6 == v8) {
        goto LABEL_7;
      }
    }
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_7:
  uint64_t v47 = a2;
  unint64_t v10 = *(void *)(a1 + 1376);
  if (*(void *)(v5 + 88) < v10)
  {
    re::DynamicArray<re::MeshRigGraphIndex>::setCapacity((void *)(v5 + 80), *(void *)(a1 + 1376));
    goto LABEL_10;
  }
  if (v10)
  {
LABEL_10:
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 1336, v12);
      if (*(void *)(v5 + 96) <= v12) {
        goto LABEL_32;
      }
      unint64_t v14 = v13;
      uint64_t v15 = *(void *)(v5 + 112) + v11;
      *(unsigned char *)uint64_t v15 = *(unsigned char *)v13;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v17 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = "";
      uint64_t v18 = *(void *)(v15 + 16);
      unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v15 + 8) & 1;
      *(void *)(v15 + 16) = v17;
      *(void *)&long long v48 = v19;
      *((void *)&v48 + 1) = v18;
      *(void *)(v15 + 8) = v16;
      re::StringID::destroyString((re::StringID *)&v48);
      uint64_t v20 = *(void *)(v14 + 24);
      uint64_t v21 = *(void *)(v14 + 32);
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = "";
      uint64_t v22 = *(void *)(v15 + 32);
      unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v15 + 24) & 1;
      *(void *)(v15 + 32) = v21;
      *(void *)&long long v48 = v23;
      *((void *)&v48 + 1) = v22;
      *(void *)(v15 + 24) = v20;
      re::StringID::destroyString((re::StringID *)&v48);
      uint64_t v24 = *(void *)(v14 + 40);
      uint64_t v25 = *(void *)(v14 + 48);
      *(void *)(v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v14 + 48) = "";
      uint64_t v26 = *(void *)(v15 + 48);
      unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v15 + 40) & 1;
      *(void *)(v15 + 48) = v25;
      *(void *)&long long v48 = v27;
      *((void *)&v48 + 1) = v26;
      *(void *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = v24;
      re::StringID::destroyString((re::StringID *)&v48);
      *(_DWORD *)(v15 + + 56) = *(_DWORD *)(v14 + 56);
      ++v12;
      v11 += 64;
    }
    while (v10 != v12);
  }
  re::RigDefinition::deinit((re::RigDefinition *)(a1 + 24));
  uint64_t v28 = (re::Allocator *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  long long v29 = (re::RigAsset *)re::RigDefinition::init((re::RigDefinition *)(a1 + 24), v28);
  uint64_t v30 = *(void *)(a1 + 1208);
  if (v30)
  {
    for (unint64_t i = 0; i != v30; ++i)
      long long v29 = (re::RigAsset *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](a1 + 1168, i);
  }
  *(void *)(a1 + 1208) = 0;
  ++*(_DWORD *)(a1 + 1216);
  uint64_t v32 = *(void *)(a1 + 1264);
  if (v32)
  {
    for (unint64_t j = 0; j != v32; ++j)
      long long v29 = (re::RigAsset *)re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](a1 + 1224, j);
  }
  *(void *)(a1 + 1264) = 0;
  ++*(_DWORD *)(a1 + 1272);
  uint64_t v34 = *(void *)(a1 + 1320);
  if (v34)
  {
    for (unint64_t k = 0; k != v34; ++k)
    {
      __int16 v36 = (re::RigDefinition *)re::BucketArray<re::RigDefinition,4ul>::operator[](a1 + 1280, k);
      re::RigDefinition::~RigDefinition(v36);
    }
  }
  *(void *)(a1 + 132ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(a1 + 1328);
  uint64_t v37 = *(void *)(a1 + 1376);
  if (v37)
  {
    for (unint64_t m = 0; m != v37; ++m)
    {
      unint64_t v39 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 1336, m);
      re::StringID::destroyString((re::StringID *)(v39 + 40));
      re::StringID::destroyString((re::StringID *)(v39 + 24));
      re::StringID::destroyString((re::StringID *)(v39 + 8));
    }
  }
  *(void *)(a1 + 1376) = 0;
  ++*(_DWORD *)(a1 + 1384);
  uint64_t v40 = *(void *)(a1 + 1432);
  if (v40)
  {
    for (unint64_t n = 0; n != v40; ++n)
    {
      long long v42 = (re::DynamicString *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[](a1 + 1392, n);
      re::DynamicString::deinit(v42);
    }
  }
  *(void *)(a1 + 1432) = 0;
  ++*(_DWORD *)(a1 + 1440);
  long long v43 = re::RigAsset::assetType(v29);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)v47 + 416))(&v48, v47, v5, v43, 0, 0, 0);
  uint64_t v44 = v48;
  if ((void)v48) {
    id v45 = (id)(v48 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v48);
  return v44;
}

void *re::BucketArray<re::DynamicString,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 1024, 0);
          unint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *re::BucketArray<re::DynamicString,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  __n128 result = re::BucketArray<re::DynamicString,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::RigNodeConstraint,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  __n128 result = re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<anonymous namespace'::RigAssetBuilder::MappedIKHandle,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void anonymous namespace'::RigAssetBuilder::~RigAssetBuilder(_anonymous_namespace_::RigAssetBuilder *this)
{
  *(void *)this = &unk_26E7347B0;
  unint64_t v2 = (uint64_t *)((char *)this + 1392);
  uint64_t v3 = *((void *)this + 179);
  if (v3)
  {
    for (unint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = (re::DynamicString *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)v2, i);
      re::DynamicString::deinit(v5);
    }
  }
  while (*((void *)this + 175))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((void *)this + 179) = 0;
  ++*((_DWORD *)this + 360);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  uint64_t v6 = *((void *)this + 172);
  if (v6)
  {
    for (unint64_t j = 0; j != v6; ++j)
    {
      unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 1336, j);
      re::StringID::destroyString((re::StringID *)(v8 + 40));
      re::StringID::destroyString((re::StringID *)(v8 + 24));
      re::StringID::destroyString((re::StringID *)(v8 + 8));
    }
  }
  while (*((void *)this + 168))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 167);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1336);
  *((void *)this + 172) = 0;
  ++*((_DWORD *)this + 346);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1336);
  uint64_t v9 = *((void *)this + 165);
  if (v9)
  {
    for (unint64_t k = 0; k != v9; ++k)
    {
      BOOL v11 = (re::RigDefinition *)re::BucketArray<re::RigDefinition,4ul>::operator[]((uint64_t)this + 1280, k);
      re::RigDefinition::~RigDefinition(v11);
    }
  }
  while (*((void *)this + 161))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 160);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1280);
  *((void *)this + 165) = 0;
  ++*((_DWORD *)this + 332);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1280);
  uint64_t v12 = *((void *)this + 158);
  if (v12)
  {
    for (unint64_t m = 0; m != v12; ++m)
      re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)this + 1224, m);
  }
  while (*((void *)this + 154))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 153);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1224);
  *((void *)this + 158) = 0;
  ++*((_DWORD *)this + 318);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1224);
  uint64_t v14 = *((void *)this + 151);
  if (v14)
  {
    for (unint64_t n = 0; n != v14; ++n)
      re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)this + 1168, n);
  }
  while (*((void *)this + 147))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 146);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1168);
  *((void *)this + 151) = 0;
  ++*((_DWORD *)this + 304);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1168);
  re::RigDefinition::~RigDefinition((_anonymous_namespace_::RigAssetBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

void *re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *re::BucketArray<anonymous namespace'::RigAssetBuilder::MappedIKHandle,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 768, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::RigNodeConstraint,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::RigNodeConstraint,32ul>::setBucketsCapacity((void *)a1, (v2 + 32) >> 5);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 0x1F);
}

void *re::BucketArray<re::RigDefinition,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        __n128 result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          __n128 result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 4576, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            __n128 result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    void v3[5] = 0;
    __n128 result = (void *)re::BucketArray<re::RigDefinition,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void *REUILayerGeometryComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REUILayerGeometryComponentSetWidthSegmentCount(uint64_t this, int a2)
{
  if (*(unsigned __int16 *)(this + 26) != a2)
  {
    *(_WORD *)(this + 26) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetWidthSegmentCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 110);
}

uint64_t REUILayerGeometryComponentSetHeightSegmentCount(uint64_t this, int a2)
{
  if (*(unsigned __int16 *)(this + 28) != a2)
  {
    *(_WORD *)(this + 28) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetHeightSegmentCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t REUILayerGeometryComponentSetFlatDepthSegmentCount(uint64_t this, int a2)
{
  if (*(unsigned __int16 *)(this + 30) != a2)
  {
    *(_WORD *)(this + 3ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetFlatDepthSegmentCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 114);
}

uint64_t REUILayerGeometryComponentSetCornerRadiusSegmentCount(uint64_t this, int a2)
{
  if (*(unsigned __int16 *)(this + 32) != a2)
  {
    *(_WORD *)(this + 32) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetCornerRadiusSegmentCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 116);
}

uint64_t REUILayerGeometryComponentSetFrontBackBevelSegmentCount(uint64_t this, int a2)
{
  if (*(unsigned __int16 *)(this + 34) != a2)
  {
    *(_WORD *)(this + 34) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetFrontBackBevelSegmentCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 118);
}

uint64_t REUILayerGeometryComponentSetBevelFrontDepth(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 36);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 36) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetBevelFrontDepth(uint64_t a1)
{
  return *(float *)(a1 + 120);
}

uint64_t REUILayerGeometryComponentSetBevelBackDepth(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 40);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetBevelBackDepth(uint64_t a1)
{
  return *(float *)(a1 + 124);
}

uint64_t REUILayerGeometryComponentSetFlatDepth(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 44);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 44) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetFlatDepth(uint64_t a1)
{
  return *(float *)(a1 + 128);
}

uint64_t REUILayerGeometryComponentSetWidth(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 48);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 48) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetWidth(uint64_t a1)
{
  return *(float *)(a1 + 132);
}

uint64_t REUILayerGeometryComponentSetHeight(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 52);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 52) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetHeight(uint64_t a1)
{
  return *(float *)(a1 + 136);
}

uint64_t REUILayerGeometryComponentSetCornerRadius(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 56);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + + 56) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetCornerRadius(uint64_t a1)
{
  return *(float *)(a1 + 140);
}

uint64_t REUILayerGeometryComponentSetNeedsVertDistanceToPlatterEdge(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 60) != a2)
  {
    *(unsigned char *)(this + 6ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetNeedsVertDistanceToPlatterEdge(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t REUILayerGeometryComponentSetCurveTheta(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 64);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    *(float *)(this + 64) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REUILayerGeometryComponentGetCurveTheta(uint64_t a1)
{
  return *(float *)(a1 + 148);
}

uint64_t REUILayerGeometryComponentSetCurveDirectionIsFrontward(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 68) != a2)
  {
    *(unsigned char *)(this + 68) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetCurveDirectionIsFrontward(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

BOOL REUILayerGeometryComponentGetEnableGroundingShadow(uint64_t a1)
{
  return *(unsigned char *)(a1 + 108) != 0;
}

uint64_t REUILayerGeomoetryComponentSetGroundingShadowType(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 108) != a2)
  {
    *(unsigned char *)(this + 108) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUILayerGeometryComponentGetGroundingShadowType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t REAudioFileGroupAssetGetType(re::AudioFileGroupAsset *a1)
{
  uint64_t v1 = *re::AudioFileGroupAsset::assetType(a1);
  float v2 = NSString;
  return [v2 stringWithUTF8String:v1];
}

uint64_t REAudioFileGroupAssetCreateWithFileAssets(re *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  int v8 = re::globalAllocators(a1);
  unint64_t v9 = (re::AudioFileGroupAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 56, 8);
  re::AudioFileGroupAsset::AudioFileGroupAsset(v9);
  uint64_t v19 = 0;
  memset(v17, 0, sizeof(v17));
  for (int i = 0; a4; --a4)
  {
    uint64_t v10 = *a3++;
    re::AssetAPIHelper::assetHandleCreate(v10, v16);
    re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v17, (re::AssetHandle *)v16);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  }
  re::DynamicArray<re::AssetHandle>::operator=((uint64_t)v9 + 8, v17);
  BOOL v11 = (re::AudioFileGroupAsset *)[a2 UTF8String];
  unint64_t v12 = re::AudioFileGroupAsset::assetType(v11);
  (*(void (**)(uint64_t *__return_ptr, re *, re::AudioFileGroupAsset *, uint64_t *, re::AudioFileGroupAsset *, void, void, void))(*(void *)a1 + 424))(v16, a1, v9, v12, v11, 0, 0, 0);
  uint64_t v13 = v16[0];
  if (v16[0]) {
    id v14 = (id)(v16[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v17);
  return v13;
}

uint64_t REAudioFileGroupAssetGetByName(uint64_t a1, id a2)
{
  unint64_t v3 = (re::AudioFileGroupAsset *)[a2 UTF8String];
  unint64_t v4 = re::AudioFileGroupAsset::assetType(v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, re::AudioFileGroupAsset *, uint64_t *))(*(void *)a1 + 32))(&v8, a1, v3, v4);
  re::AssetHandle::loadNow(v9, 0);
  if (v9)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v9 + 704));
    if (v5 == 2) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v6;
}

uint64_t REAudioFileGroupAssetGetAssetCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::AudioFileGroupAsset>((re::AudioFileGroupAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t re::AssetHandle::asset<re::AudioFileGroupAsset>(re::AudioFileGroupAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::AudioFileGroupAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      unint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

uint64_t REAudioFileGroupAssetGetAssetAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::AudioFileGroupAsset>((re::AudioFileGroupAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 24);
    if (v4 <= a2)
    {
      void v7[3] = 0;
      memset(v16, 0, sizeof(v16));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      int v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v16, (const re::AssetHandle *)(*(void *)(v3 + 40) + 24 * a2));
    uint64_t v5 = *(void *)&v16[0];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

uint64_t REAudioFileGroupAssetIsCompletelyLoaded(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::AudioFileGroupAsset>((re::AudioFileGroupAsset *)v4);
  if (v1) {
    uint64_t isCompletelyLoaded = re::AudioFileGroupAsset::isCompletelyLoaded(v1);
  }
  else {
    uint64_t isCompletelyLoaded = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return isCompletelyLoaded;
}

void REAudioFileGroupAssetCompleteLoad(uint64_t a1)
{
  AssetManager = (uint64_t *)REAssetGetAssetManager(a1);
  uint64_t v3 = re::AudioFileGroupAsset::assetType((re::AudioFileGroupAsset *)AssetManager);
  uint64_t v4 = *(void *)(re::internal::AssetTypeRegistry::assetLoaderWithAssetType(AssetManager[130], (unint64_t)v3)
                 + 24);
  if (v4) {
    uint64_t v5 = (AudioSceneService *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  REAudioFileGroupAssetCompleteLoadWithService(a1, v5);
}

void REAudioFileGroupAssetCompleteLoadWithService(uint64_t a1, AudioSceneService *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10 && (unsigned int v4 = atomic_load((unsigned int *)(v10 + 704)), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)(v10 + 704));
    if (v5 == 2)
    {
      ++*(_DWORD *)(v10 + 260);
      uint64_t v6 = (re::AudioFileGroupAsset *)re::AssetHandle::loadedAsset<re::AudioFileGroupAsset>((re::AudioFileGroupAsset *)&v9);
      if (v6) {
        re::AudioFileGroupAsset::completeLoad(v6, a2);
      }
    }
  }
  else
  {
    unint64_t v7 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioFileGroupAsset] Cannot complete loading an audio group file asset that is not loaded.", v8, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

re::ecs2::ComponentTypeBase *RECustomComponentTypeCreateWithType(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)&long long v18 = a1;
  *((void *)&v18 + 1) = a2;
  if (!a1)
  {
    uint64_t v10 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      int v11 = "Invalid type ID.";
      __int16 v12 = v10;
      uint32_t v13 = 2;
LABEL_9:
      _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
    }
    return 0;
  }
  uint64_t v3 = re::TypeRegistry::typeName(a1, &v18);
  re::TypeRegistry::typeInfo(a1, (re **)&v18, buf);
  if (!buf[0])
  {
    __int16 v14 = *re::ecsCoreLogObjects(v4);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *((void *)v3 + 1);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v20 = v15;
      int v11 = "Type information missing for %s. Type has been declared, but no type information was provided.";
      __int16 v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_9;
    }
    return 0;
  }
  unsigned int v5 = re::ecs2::ComponentTypeRegistry::instance(v4);
  uint64_t v6 = (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v5, v3);
  if (!v6)
  {
    unint64_t v7 = re::globalAllocators(0);
    uint64_t v6 = (re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 176, 8);
    long long v17 = v18;
    int v8 = (re::ecs2::ComponentTypeRegistry *)re::ecs2::CustomComponentType::CustomComponentType((uint64_t)v6, (const StringID *)v3, (uint64_t)&v17, 0, 0);
    uint64_t v9 = re::ecs2::ComponentTypeRegistry::instance(v8);
    re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v9, v6);
  }
  return v6;
}

void REDebugRendererDrawLineWithDepth(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    uint64_t v6 = *(os_unfair_lock_s **)(v5 + 304);
  }
  else {
    uint64_t v6 = 0;
  }
  __n128 v9 = a3;
  __n128 v7 = a5;
  __n128 v8 = a4;
  re::DebugRenderer::drawLine(v6, (long long *)&v9, (long long *)&v8, (long long *)&v7, a2);
}

void REDebugRendererDrawLine(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    uint64_t v5 = *(os_unfair_lock_s **)(v4 + 304);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 v8 = a2;
  __n128 v6 = a4;
  __n128 v7 = a3;
  re::DebugRenderer::drawLine(v5, (long long *)&v8, (long long *)&v7, (long long *)&v6, 1);
}

void REDebugRendererDrawLinesWithDepth(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3, int a4)
{
  v19[11] = *MEMORY[0x263EF8340];
  if (!a3)
  {
    int v11 = 0;
    goto LABEL_10;
  }
  if (a3 >= 0x555555555555556)
  {
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, a3);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  if (!v9) {
    goto LABEL_19;
  }
  int v11 = v9;
  __int16 v12 = v9;
  if (a3 != 1)
  {
    bzero(v9, 48 * a3 - 48);
    __int16 v12 = &v11[3 * a3 - 3];
  }
  unint64_t v13 = 0;
  v12[1] = 0u;
  uint64_t v12[2] = 0u;
  _OWORD *v12 = 0u;
  unint64_t v14 = a3;
  do
  {
    uint64_t v15 = &v11[v13 / 0x10];
    _OWORD *v15 = *(_OWORD *)(a2 + v13);
    v15[1] = *(_OWORD *)(a2 + v13 + 16);
    void v15[2] = *(_OWORD *)(a2 + v13 + 32);
    v13 += 48;
    --v14;
  }
  while (v14);
LABEL_10:
  uint64_t v16 = *((void *)a1 + 13);
  if (v16) {
    long long v17 = *(os_unfair_lock_s **)(v16 + 304);
  }
  else {
    long long v17 = 0;
  }
  v19[0] = v11;
  v19[1] = a3;
  re::DebugRenderer::drawLines(v17, (uint64_t)v19, a4);
  if (a3)
  {
                                                     + 40);
  }
}

void REDebugRendererDrawLines(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3)
{
}

void REDebugRendererDrawArrowWithDepth(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, float a5, __n128 a6)
{
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6) {
    __n128 v7 = *(os_unfair_lock_s **)(v6 + 304);
  }
  else {
    __n128 v7 = 0;
  }
  float32x4_t v10 = a3;
  __n128 v8 = a6;
  float32x4_t v9 = a4;
  re::DebugRenderer::drawArrow(v7, &v10, &v9, (long long *)&v8, a2, a5);
}

void REDebugRendererDrawArrow(uint64_t a1, float32x4_t a2, float32x4_t a3, float a4, __n128 a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    uint64_t v6 = *(os_unfair_lock_s **)(v5 + 304);
  }
  else {
    uint64_t v6 = 0;
  }
  float32x4_t v9 = a2;
  __n128 v7 = a5;
  float32x4_t v8 = a3;
  re::DebugRenderer::drawArrow(v6, &v9, &v8, (long long *)&v7, 1, a4);
}

void REDebugRendererDrawAxisWithWorldPoseWithDepth(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, float a5, float a6)
{
  v8[0] = a3;
  v8[1] = a4;
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6) {
    __n128 v7 = *(os_unfair_lock_s **)(v6 + 304);
  }
  else {
    __n128 v7 = 0;
  }
  re::DebugRenderer::drawAxis(v7, v8, a2, a5, a6);
}

void REDebugRendererDrawAxisWithWorldPose(uint64_t a1, float32x4_t a2, float32x4_t a3, float a4, float a5)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    uint64_t v6 = *(os_unfair_lock_s **)(v5 + 304);
  }
  else {
    uint64_t v6 = 0;
  }
  re::DebugRenderer::drawAxis(v6, v7, 1, a4, a5);
}

void REDebugRendererDrawAxisWithWorldTransformWithDepth(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(a1 + 104);
  if (v8) {
    float32x4_t v9 = *(os_unfair_lock_s **)(v8 + 304);
  }
  else {
    float32x4_t v9 = 0;
  }
  v10[0] = a3;
  v10[1] = a4;
  void v10[2] = a5;
  void v10[3] = a6;
  re::DebugRenderer::drawAxis(v9, v10, a2, a7, a8);
}

void REDebugRendererDrawAxisWithWorldTransform(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float a6, float a7)
{
  uint64_t v7 = *(void *)(a1 + 104);
  if (v7) {
    uint64_t v8 = *(os_unfair_lock_s **)(v7 + 304);
  }
  else {
    uint64_t v8 = 0;
  }
  v9[0] = a2;
  v9[1] = a3;
  _OWORD v9[2] = a4;
  void v9[3] = a5;
  re::DebugRenderer::drawAxis(v8, v9, 1, a6, a7);
}

void REDebugRendererDrawPointWithDepth(uint64_t a1, int a2, __n128 a3, float a4, __n128 a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5) {
    uint64_t v6 = *(os_unfair_lock_s **)(v5 + 304);
  }
  else {
    uint64_t v6 = 0;
  }
  __n128 v7 = a5;
  __n128 v8 = a3;
  re::DebugRenderer::drawPoint(v6, (long long *)&v8, (long long *)&v7, a2, a4);
}

void REDebugRendererDrawPoint(uint64_t a1, __n128 a2, float a3, __n128 a4)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4) {
    uint64_t v5 = *(os_unfair_lock_s **)(v4 + 304);
  }
  else {
    uint64_t v5 = 0;
  }
  __n128 v6 = a4;
  __n128 v7 = a2;
  re::DebugRenderer::drawPoint(v5, (long long *)&v7, (long long *)&v6, 1, a3);
}

void debugRendererDrawTextAtWorldPose(_anonymous_namespace_ *a1, char *a2, const char *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, __n128 a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v16[0] = a4;
  v16[1] = a5;
  uint64_t v16[2] = a6;
  *(void *)&v15.var0 = 0;
  v15.var1 = "";
  uint64_t v10 = *((void *)a1 + 9);
  if (re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains(v10 + 8, &v15)&& re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(v10 + 56, &v15))
  {
    uint64_t v11 = *((void *)a1 + 13);
    if (v11) {
      uint64_t v12 = *(void *)(v11 + 304);
    }
    else {
      uint64_t v12 = 0;
    }
    *(__n128 *)long long buf = a7;
    re::DebugRenderer::drawText(v12, v16, a2, &v15, (long long *)buf);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = a2;
    }
  }
  re::StringID::destroyString((re::StringID *)&v15);
}

void REDebugRendererDrawTextAtWorldPose(_anonymous_namespace_ *a1, char *a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, __n128 a7)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v15);
  float32x4_t v9 = (char *)re::AssetHandle::assetInfo((re::AssetHandle *)v15);
  if (*((void *)v9 + 13)) {
    uint64_t v10 = (const char *)*((void *)v9 + 14);
  }
  else {
    uint64_t v10 = v9 + 105;
  }
  debugRendererDrawTextAtWorldPose(a1, a2, v10, a4, a5, a6, a7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
}

void debugRendererDrawTextAtWorldTransform(_anonymous_namespace_ *a1, char *a2, const char *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)&v21.var0 = 0;
  v21.var1 = "";
  uint64_t v11 = *((void *)a1 + 9);
  if (re::HashSetBase<re::FontID,re::FontID,re::internal::ValueAsKey<re::FontID>,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::contains(v11 + 8, &v21)&& re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::containsKey(v11 + 56, &v21))
  {
    uint64_t v12 = *((void *)a1 + 13);
    if (v12) {
      uint64_t v13 = *(void *)(v12 + 304);
    }
    else {
      uint64_t v13 = 0;
    }
    *(__n128 *)long long buf = a4;
    *(__n128 *)&uint8_t buf[16] = a5;
    __n128 v23 = a6;
    __n128 v24 = a7;
    __n128 v20 = a8;
    re::DebugRenderer::drawText(v13, (long long *)buf, a2, &v21, (long long *)&v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = a2;
    }
  }
  re::StringID::destroyString((re::StringID *)&v21);
}

void REDebugRendererDrawTextAtWorldTransform(_anonymous_namespace_ *a1, char *a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v17);
  uint64_t v10 = (char *)re::AssetHandle::assetInfo((re::AssetHandle *)v17);
  if (*((void *)v10 + 13)) {
    uint64_t v11 = (const char *)*((void *)v10 + 14);
  }
  else {
    uint64_t v11 = v10 + 105;
  }
  debugRendererDrawTextAtWorldTransform(a1, a2, v11, a4, a5, a6, a7, a8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
}

void REDebugRendererDrawCollisionWorld(re *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 13);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 304)) != 0)
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __REDebugRendererDrawCollisionWorld_block_invoke;
    aBlock[3] = &__block_descriptor_40_e107_v56__0_Vector3_float________fff__3f___8_Vector3_float________fff__3f___24_Vector3_float________fff__3f___40l;
    aBlock[4] = v3;
    __n128 v6 = _Block_copy(aBlock);
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    v25[2] = __REDebugRendererDrawCollisionWorld_block_invoke_2;
    uint64_t v25[3] = &__block_descriptor_40_e76_v44__0_Vector3_float________fff__3f___8f24_Vector3_float________fff__3f___28l;
    void v25[4] = v3;
    __n128 v7 = _Block_copy(v25);
    (*(void (**)(uint64_t, void *, void *, void, void))(*(void *)a2 + 112))(a2, v6, v7, 0, 0);
    (*(void (**)(uint64_t))(*(void *)a2 + 128))(a2);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v9);
        if (v11)
        {
          uint64_t v12 = v11;
          if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 176))(v11) + 56) == a2)
          {
            uint64_t v14 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v10);
            if (v14)
            {
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 104))(v14);
              uint64_t v16 = *(void *)(v15 + 24);
              if (v16)
              {
                long long v17 = *(void **)(v15 + 40);
                uint64_t v18 = &v17[v16];
                do
                {
                  uint64_t v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 32))(v12, *v17);
                  if (v19)
                  {
                    uint64_t v20 = v19;
                    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, v19, 0);
                    BOOL v21 = v20 == *(void *)buf && (unsigned __int16)v28 == 0xFFFFLL;
                    if (!v21 || (v28 & 0xFFFF0000) != 4294901760)
                    {
                      do
                      {
                        if (*(void *)(*(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)buf)
                                                   + 8)
                                       + 56) != a2)
                          REDebugRendererDrawCollisionWorld(a1);
                        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(buf);
                      }
                      while (*(void *)buf != v20 || (unsigned __int16)v28 != 0xFFFF || WORD1(v28) != 0xFFFF);
                    }
                  }
                  ++v17;
                }
                while (v17 != v18);
              }
            }
          }
        }
      }
    }
  }
  else if ((atomic_exchange(REDebugRendererDrawCollisionWorld::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v13 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "DebugRenderer is null. Probably REDebugRendererDrawCollisionWorld was called from a shared app. Skipping.", buf, 2u);
    }
  }
}

void __REDebugRendererDrawCollisionWorld_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  *(void *)&long long v8 = a4;
  *((void *)&v8 + 1) = a5;
  *(void *)&long long v7 = a6;
  *((void *)&v7 + 1) = a7;
  re::DebugRenderer::drawLine(*(os_unfair_lock_s **)(a1 + 32), &v9, &v8, &v7, 1);
}

void __REDebugRendererDrawCollisionWorld_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  *(void *)&long long v6 = a4;
  *((void *)&v6 + 1) = a5;
  re::DebugRenderer::drawPoint(*(os_unfair_lock_s **)(a1 + 32), &v7, &v6, 1, a6);
}

uint64_t REGetGraphicsDebugSettingsManager(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = *(void *)(a1 + 88);
    if (result) {
      return result;
    }
    uint64_t v2 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v5 = 0;
      uint64_t v3 = "RenderManager is initialized, but DebugSettingsManager is not.";
      uint64_t v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
  else
  {
    uint64_t v2 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v3 = "RenderManager not initialized.";
      uint64_t v4 = buf;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t RESetGraphicsParameterInt(uint64_t a1, const char *a2, unsigned int a3)
{
  if (!a1) {
    return 3;
  }
  unint64_t v21 = 0;
  __s2 = "";
  if (*(unsigned char *)(a1 + 112))
  {
    std::mutex::lock((std::mutex *)(a1 + 48));
    unsigned int v6 = re::DebugSettingsManager::contains<int>(a1, &v21);
    if (v6)
    {
      unsigned int v7 = v6;
      std::mutex::unlock((std::mutex *)(a1 + 48));
      if (v7 >= 6) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v7;
      }
    }
    else
    {
      uint64_t v9 = a3;
      uint64_t v10 = 0x7FFFFFFFLL;
      if (*(void *)a1)
      {
        unint64_t v11 = v21;
        unint64_t v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((v21 >> 31) ^ (v21 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v21 >> 31) ^ (v21 >> 1))) >> 27));
        uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v12 ^ (v12 >> 31)) % *(unsigned int *)(a1 + 24)));
        if (v13 != 0x7FFFFFFF)
        {
          uint64_t v14 = *(void *)(a1 + 16);
          uint64_t v15 = __s2;
          uint64_t v10 = 0x7FFFFFFFLL;
          while (1)
          {
            if ((*(void *)(v14 + 40 * v13 + 8) ^ v11) <= 1)
            {
              uint64_t v16 = *(const char **)(v14 + 40 * v13 + 16);
              if (v16 == v15 || !strcmp(v16, v15)) {
                break;
              }
            }
            uint64_t v13 = *(_DWORD *)(v14 + 40 * v13) & 0x7FFFFFFF;
            if (v13 == 0x7FFFFFFF) {
              goto LABEL_18;
            }
          }
          uint64_t v10 = v13;
        }
      }
LABEL_18:
      uint64_t v17 = *(void *)(a1 + 16) + 40 * v10;
      int v19 = *(unsigned __int8 *)(v17 + 24);
      uint64_t v18 = v17 + 24;
      if (!v19) {
        *(unsigned char *)uint64_t v18 = 1;
      }
      *(void *)(v18 + 4) = v9;
      std::mutex::unlock((std::mutex *)(a1 + 48));
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 3;
  }
  re::StringID::destroyString((re::StringID *)&v21);
  return v8;
}

uint64_t REGetGraphicsParameterInt(_anonymous_namespace_ *a1, const char *a2, _DWORD *a3)
{
  if (!a1) {
    return 3;
  }
  v9[0] = 0;
  v9[1] = "";
  unsigned int v6 = re::DebugSettingsManager::getWithErrorCode<int>((uint64_t)a1, v9, a3);
  if (v6 - 1 >= 5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t RESetGraphicsParameterFloat(uint64_t a1, const char *a2, float a3)
{
  if (!a1) {
    return 3;
  }
  unint64_t v20 = 0;
  __s2 = "";
  if (*(unsigned char *)(a1 + 112))
  {
    std::mutex::lock((std::mutex *)(a1 + 48));
    unsigned int v6 = re::DebugSettingsManager::contains<float>(a1, &v20);
    if (v6)
    {
      unsigned int v7 = v6;
      std::mutex::unlock((std::mutex *)(a1 + 48));
      if (v7 >= 6) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v7;
      }
    }
    else
    {
      uint64_t v9 = 0x7FFFFFFFLL;
      if (*(void *)a1)
      {
        unint64_t v10 = v20;
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((v20 >> 31) ^ (v20 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v20 >> 31) ^ (v20 >> 1))) >> 27));
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 24)));
        if (v12 != 0x7FFFFFFF)
        {
          uint64_t v13 = *(void *)(a1 + 16);
          uint64_t v14 = __s2;
          uint64_t v9 = 0x7FFFFFFFLL;
          while (1)
          {
            if ((*(void *)(v13 + 40 * v12 + 8) ^ v10) <= 1)
            {
              uint64_t v15 = *(const char **)(v13 + 40 * v12 + 16);
              if (v15 == v14 || !strcmp(v15, v14)) {
                break;
              }
            }
            uint64_t v12 = *(_DWORD *)(v13 + 40 * v12) & 0x7FFFFFFF;
            if (v12 == 0x7FFFFFFF) {
              goto LABEL_18;
            }
          }
          uint64_t v9 = v12;
        }
      }
LABEL_18:
      uint64_t v16 = *(void *)(a1 + 16) + 40 * v9;
      int v18 = *(unsigned __int8 *)(v16 + 24);
      uint64_t v17 = v16 + 24;
      if (!v18) {
        *(unsigned char *)uint64_t v17 = 1;
      }
      *(void *)(v17 + 4) = LODWORD(a3) | 0x100000000;
      std::mutex::unlock((std::mutex *)(a1 + 48));
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 3;
  }
  re::StringID::destroyString((re::StringID *)&v20);
  return v8;
}

uint64_t REGetGraphicsParameterFloat(_anonymous_namespace_ *a1, const char *a2, _DWORD *a3)
{
  if (!a1) {
    return 3;
  }
  v9[0] = 0;
  v9[1] = "";
  unsigned int v6 = re::DebugSettingsManager::getWithErrorCode<float>((uint64_t)a1, v9, a3);
  if (v6 - 1 >= 5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t RESetGraphicsParameterBool(_anonymous_namespace_ *a1, const char *a2, unsigned __int8 a3)
{
  unsigned __int8 v9 = a3;
  if (!a1) {
    return 3;
  }
  v8[0] = 0;
  v8[1] = "";
  unsigned int v5 = re::DebugSettingsManager::setWithErrorCode<BOOL>((uint64_t)a1, v8, &v9);
  if (v5 - 1 >= 5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  re::StringID::destroyString((re::StringID *)v8);
  return v6;
}

uint64_t REGetGraphicsParameterBool(_anonymous_namespace_ *a1, const char *a2, unsigned char *a3)
{
  if (!a1) {
    return 3;
  }
  v9[0] = 0;
  v9[1] = "";
  unsigned int v6 = re::DebugSettingsManager::getWithErrorCode<BOOL>((uint64_t)a1, v9, a3);
  if (v6 - 1 >= 5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  re::StringID::destroyString((re::StringID *)v9);
  return v7;
}

uint64_t REGetGraphicsParametersAsString(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 4;
  }
  uint64_t result = 0;
  *a3 = @"Deprecated: params to report.";
  return result;
}

uint64_t REThrottleSetParametersForContext(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) context is null!", "context", "REThrottleSetParametersForContext", 17);
    _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  if (!a2)
  {
LABEL_5:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) parameters is null!", "parameters", "REThrottleSetParametersForContext", 18);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REThrottleGetParametersForContext(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) context is null!", "context", "REThrottleGetParametersForContext", 37);
    _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  if (!a2)
  {
LABEL_5:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) parameters is null!", "parameters", "REThrottleGetParametersForContext", 38);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REThrottleSetParametersForEngine(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REEngineRef is null!", "engineRef", "REThrottleSetParametersForEngine", 54);
    _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  if (!a2)
  {
LABEL_5:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) parameters is null!", "parameters", "REThrottleSetParametersForEngine", 55);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REThrottleGetParametersForEngine(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REEngineRef is null!", "engineRef", "REThrottleGetParametersForEngine", 61);
    _os_crash();
    __break(1u);
    goto LABEL_5;
  }
  if (!a2)
  {
LABEL_5:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) parameters is null!", "parameters", "REThrottleGetParametersForEngine", 62);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REThrottleServiceGetDeformationThrottleInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t REThrottleServiceSetDeformationThrottleInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t REThrottleServiceIsForceSkinnedNormalsThrottled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t REThrottleServiceSetForceSkinnedNormalsThrottle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

void *REPhysicsDebugComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void RESceneAddPhysicsDebugComponent(uint64_t a1)
{
  v11[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v11, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v2 = SceneDataEntity;
  uint64_t v3 = *((unsigned __int16 *)SceneDataEntity + 41);
  if (!*((_WORD *)SceneDataEntity + 41)) {
    goto LABEL_7;
  }
  uint64_t v4 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                       + 16);
  unsigned int v5 = (int16x8_t *)*((void *)SceneDataEntity + 11);
  int16x8_t v6 = vld1q_dup_s16(v4);
  int v7 = 1;
  while (1)
  {
    uint16x8_t v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_23436BBD0);
    v8.i16[0] = vmaxvq_u16(v8);
    if (v8.i32[0]) {
      break;
    }
    v7 -= 8;
    ++v5;
    if (!--v3) {
      goto LABEL_7;
    }
  }
  if (v8.u16[0] - v7 >= *((unsigned __int16 *)SceneDataEntity + 40))
  {
LABEL_7:
    unsigned __int8 v9 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    re::ecs2::Component::markDirty(v9);
    unint64_t v10 = (re::ecs2::NetworkComponent *)*((void *)v2 + 25);
    if (!v10) {
      unint64_t v10 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    re::ecs2::NetworkComponent::markDirty(v10, v9);
  }
}

void RESceneRemovePhysicsDebugComponent(uint64_t a1)
{
  v4[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v4, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  if (SceneDataEntity)
  {
    uint64_t v2 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
    uint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v3);
  }
}

void RESceneSetPhysicsDebugDrawLevel(uint64_t a1, int a2)
{
  v6[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v6, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_DWORD *)(v4 + 28) = a2;
  re::ecs2::Component::markDirty((void *)v4);
  unsigned int v5 = (re::ecs2::NetworkComponent *)*((void *)SceneDataEntity + 25);
  if (!v5) {
    unsigned int v5 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  re::ecs2::NetworkComponent::markDirty(v5, (const re::ecs2::Component *)v4);
}

uint64_t RESceneGetPhysicsDebugDrawLevel(uint64_t a1)
{
  v3[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v3, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

void RESceneSetPhysicsDebugDrawMode(uint64_t a1, int a2)
{
  v6[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v6, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_DWORD *)(v4 + 32) = a2;
  re::ecs2::Component::markDirty((void *)v4);
  unsigned int v5 = (re::ecs2::NetworkComponent *)*((void *)SceneDataEntity + 25);
  if (!v5) {
    unsigned int v5 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  re::ecs2::NetworkComponent::markDirty(v5, (const re::ecs2::Component *)v4);
}

uint64_t RESceneGetPhysicsDebugDrawMode(uint64_t a1)
{
  v4[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v4, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v2 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2) {
    return *(unsigned int *)(v2 + 32);
  }
  else {
    return 3;
  }
}

uint64_t REPhysicsDebugComponentGetDrawLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void REPhysicsDebugComponentSetDrawLevel(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 28) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(re::ecs2::NetworkComponent **)(v3 + 200);
  if (!v4) {
    uint64_t v4 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  re::ecs2::NetworkComponent::markDirty(v4, (const re::ecs2::Component *)a1);
}

uint64_t REPhysicsDebugComponentGetDrawMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void REPhysicsDebugComponentSetDrawMode(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = a2;
  re::ecs2::Component::markDirty((void *)a1);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(re::ecs2::NetworkComponent **)(v3 + 200);
  if (!v4) {
    uint64_t v4 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  re::ecs2::NetworkComponent::markDirty(v4, (const re::ecs2::Component *)a1);
}

void *REAnimationLibraryComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

const char *REAnimationLibraryComponentDefaultGlobalSceneName()
{
  return "global scene animation";
}

const char *REAnimationLibraryComponentDefaultLocalSubtreeSceneName()
{
  return "default subtree animation";
}

const char *REAnimationLibraryComponentDefaultLocalEntitySceneName()
{
  return "default scene animation";
}

const char *REAnimationLibraryComponentDefaultEntityAnimationName()
{
  return "default entity animation";
}

void REAnimationLibraryComponentAssignAnimationLibraryAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

re::ecs2::Entity *REAnimationLibraryComponentCreateDefaultAnimation(re::ecs2::Entity *a1, uint64_t *a2, int a3)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 40);
    if (v7)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v7 + 704));
      if (v8 == 2)
      {
        unsigned __int8 v9 = (void *)re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v6 + 32));
        uint64_t v10 = v9[12];
        if (a3)
        {
          if (v10)
          {
            unint64_t v11 = (void *)v9[14];
            uint64_t v12 = 40 * v10;
            while (!re::StringID::operator==(v11, re::kGlobalSceneAnimationName)
                 && !re::StringID::operator==(v11, re::kLocalSubtreeSceneAnimationName))
            {
              v11 += 5;
              v12 -= 40;
              if (!v12) {
                goto LABEL_51;
              }
            }
LABEL_17:
          }
          uint64_t v16 = v9[17];
          if (v16)
          {
            uint64_t v17 = 24 * v16;
            int v18 = (re::AssetHandle *)v9[19];
            while (1)
            {
              unint64_t v111 = 0;
              __s1 = "";
              int v19 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
              unint64_t v20 = (uint64_t *)*((void *)v18 + 1);
              if (v20) {
                unint64_t v20 = (uint64_t *)v20[33];
              }
              if (v19 == v20)
              {
                unint64_t v21 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v18);
                uint64_t v23 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>(v21) + 16);
                if (v23) {
                  re::StringID::operator=(&v111, (uint64_t *)(v23 + 24));
                }
                if (v111 >> 1 == 0x3455FFA1B1837FA3)
                {
                  __n128 v24 = __s1;
                  if (__s1 == "default subtree animation") {
                    goto LABEL_99;
                  }
                  uint64_t v25 = "default subtree animation";
LABEL_33:
                  if (!strcmp(v24, v25)) {
                    goto LABEL_99;
                  }
                  goto LABEL_34;
                }
                if (v111 >> 1 == 0x3C015B2DF8573273)
                {
                  __n128 v24 = __s1;
                  if (__s1 == "global scene animation") {
                    goto LABEL_99;
                  }
                  uint64_t v25 = "global scene animation";
                  goto LABEL_33;
                }
              }
LABEL_34:
              re::StringID::destroyString((re::StringID *)&v111);
              int v18 = (re::AssetHandle *)((char *)v18 + 24);
              v17 -= 24;
              if (!v17) {
                goto LABEL_51;
              }
            }
          }
          goto LABEL_52;
        }
        if (v10)
        {
          unint64_t v11 = (void *)v9[14];
          uint64_t v14 = 40 * v10;
          while (!re::StringID::operator==(v11, re::kLocalEntitySceneAnimationName)
               && !re::StringID::operator==(v11, re::kDefaultEntityAnimationName))
          {
            v11 += 5;
            v14 -= 40;
            if (!v14) {
              goto LABEL_51;
            }
          }
          goto LABEL_17;
        }
        uint64_t v26 = v9[17];
        if (v26)
        {
          uint64_t v27 = 24 * v26;
          int v18 = (re::AssetHandle *)v9[19];
          while (1)
          {
            unint64_t v111 = 0;
            __s1 = "";
            uint64_t v28 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
            long long v29 = (uint64_t *)*((void *)v18 + 1);
            if (v29) {
              long long v29 = (uint64_t *)v29[33];
            }
            if (v28 != v29) {
              goto LABEL_50;
            }
            uint64_t v30 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v18);
            uint64_t v31 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>(v30) + 16);
            if (v31) {
              re::StringID::operator=(&v111, (uint64_t *)(v31 + 24));
            }
            if (v111 >> 1 == 0x34A574094D1AF786)
            {
              uint64_t v32 = __s1;
              if (__s1 == "default entity animation") {
                goto LABEL_99;
              }
              uint64_t v33 = "default entity animation";
            }
            else
            {
              if (v111 >> 1 != 0x3D5505122B750911) {
                goto LABEL_50;
              }
              uint64_t v32 = __s1;
              if (__s1 == "default scene animation") {
                goto LABEL_99;
              }
              uint64_t v33 = "default scene animation";
            }
            if (!strcmp(v32, v33))
            {
LABEL_99:
              re::StringID::destroyString((re::StringID *)&v111);
              return v65;
            }
LABEL_50:
            re::StringID::destroyString((re::StringID *)&v111);
            int v18 = (re::AssetHandle *)((char *)v18 + 24);
            v27 -= 24;
            if (!v27) {
              goto LABEL_51;
            }
          }
        }
        return 0;
      }
    }
  }
LABEL_51:
  if (!a3) {
    return 0;
  }
LABEL_52:
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v111);
  *(void *)uint64_t v110 = 0;
  v107[1] = 0;
  *(void *)long long v108 = 0;
  int v109 = 0;
  v107[0] = &v111;
  re::DynamicArray<float *>::setCapacity(v107, 0);
  ++v109;
  *(void *)&long long v119 = a2 + 34;
  uint64_t v34 = (uint64_t)re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v107, &v119);
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v35 = a2[3];
  if (v35 && (*(unsigned char *)(v35 + 288) & 0x80) == 0)
  {
    do
    {
      if (v105)
      {
        unsigned int v36 = atomic_load((unsigned int *)(v105 + 704));
        if (v36 == 2) {
          break;
        }
      }
      uint64_t v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v37)
      {
        uint64_t v38 = *(void *)(v37 + 40);
        if (v38)
        {
          unsigned int v39 = atomic_load((unsigned int *)(v38 + 704));
          if (v39 == 2)
          {
            uint64_t v40 = (void *)re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v37 + 32));
            uint64_t v41 = v40[12];
            if (v41)
            {
              long long v42 = (void *)v40[14];
              uint64_t v43 = 40 * v41;
              while (!re::StringID::operator==(v42, re::kGlobalSceneAnimationName)
                   && !re::StringID::operator==(v42, re::kLocalSubtreeSceneAnimationName))
              {
                v42 += 5;
                v43 -= 40;
                if (!v43) {
                  goto LABEL_83;
                }
              }
              re::AssetHandle::operator=((uint64_t)&v104, v42 + 2);
              goto LABEL_83;
            }
            uint64_t v44 = v40[17];
            if (v44)
            {
              id v45 = (re::AssetHandle *)v40[19];
              for (uint64_t i = 24 * v44; i; i -= 24)
              {
                *(void *)&long long v119 = 0;
                *((void *)&v119 + 1) = "";
                uint64_t v47 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
                long long v48 = (uint64_t *)*((void *)v45 + 1);
                if (v48) {
                  long long v48 = (uint64_t *)v48[33];
                }
                if (v47 != v48) {
                  goto LABEL_80;
                }
                long long v49 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v45);
                uint64_t v50 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>(v49) + 16);
                if (v50) {
                  re::StringID::operator=((unint64_t *)&v119, (uint64_t *)(v50 + 24));
                }
                if ((unint64_t)v119 >> 1 == 0x3455FFA1B1837FA3)
                {
                  long long v51 = (const char *)*((void *)&v119 + 1);
                  if (*((char **)&v119 + 1) == "default subtree animation") {
                    goto LABEL_82;
                  }
                  long long v52 = "default subtree animation";
                }
                else
                {
                  if ((unint64_t)v119 >> 1 != 0x3C015B2DF8573273) {
                    goto LABEL_80;
                  }
                  long long v51 = (const char *)*((void *)&v119 + 1);
                  if (*((char **)&v119 + 1) == "global scene animation") {
                    goto LABEL_82;
                  }
                  long long v52 = "global scene animation";
                }
                if (!strcmp(v51, v52))
                {
LABEL_82:
                  re::AssetHandle::operator=((uint64_t)&v104, (uint64_t *)v45);
                  re::StringID::destroyString((re::StringID *)&v119);
                  break;
                }
LABEL_80:
                re::StringID::destroyString((re::StringID *)&v119);
                id v45 = (re::AssetHandle *)((char *)v45 + 24);
              }
            }
          }
        }
      }
LABEL_83:
      *(void *)&long long v119 = v35 + 272;
      uint64_t v34 = (uint64_t)re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v107, &v119);
      uint64_t v35 = *(void *)(v35 + 24);
    }
    while (v35 && (*(unsigned char *)(v35 + 288) & 0x80) == 0);
    if (v105)
    {
      unsigned int v53 = atomic_load((unsigned int *)(v105 + 704));
      if (v53 == 2)
      {
        uint64_t v34 = re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v104);
        uint64_t v55 = v34 + 24;
        LODWORD(v+ 56) = v110[0];
        unint64_t v57 = *(void *)v108;
        uint64_t v99 = *(void *)v110;
        v100 = (re::TimelineAsset *)v34;
        unint64_t v58 = *(void *)v108;
        while (1)
        {
          unint64_t v59 = v58 - 1;
          if (v58 == 1) {
            break;
          }
          uint64_t v34 = re::Slice<re::StringID const*>::range(v56, v58, v59);
          uint64_t v61 = *(void *)(v55 + 32);
          if (!v61) {
            goto LABEL_108;
          }
          unint64_t v58 = v60;
          if (!v60)
          {
            re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
            _os_crash();
            __break(1u);
LABEL_123:
            re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
            _os_crash();
            __break(1u);
LABEL_124:
            v101 = 0;
            long long v122 = 0u;
            long long v123 = 0u;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v119 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v116 = 136315906;
            *(void *)&_OWORD v116[4] = "slice";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 1119;
            __int16 v117 = 2048;
            *(void *)long long v118 = 0;
            *(_WORD *)&v118[8] = 2048;
            *(void *)&v118[10] = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_125;
          }
          uint64_t v56 = v34;
          uint64_t v55 = *(void *)(v55 + 48);
          uint64_t v62 = *(void **)(v34 + 8 * v60 - 8);
          uint64_t v63 = 88 * v61;
          while (1)
          {
            uint64_t v34 = re::StringID::operator==((void *)v55, v62);
            if (v34) {
              break;
            }
            v55 += 88;
            v63 -= 88;
            if (!v63) {
              goto LABEL_108;
            }
          }
          if (!v58) {
            goto LABEL_123;
          }
          uint64_t v34 = re::StringID::operator==((void *)v55, *(void **)(v56 + 8 * v58 - 8));
          if (!v34) {
            goto LABEL_108;
          }
        }
        if (v55)
        {
          if (v57 == -1) {
            goto LABEL_124;
          }
          unint64_t v66 = v57 - 1;
          if (!v57)
          {
LABEL_125:
            re::internal::assertLog((re::internal *)7, v54, v59, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, 0, v66, v57);
            _os_crash();
            __break(1u);
          }
          if (*((void *)&v113 + 1))
          {
            unsigned int v67 = atomic_load((unsigned int *)(*((void *)&v113 + 1) + 704));
            if (v67 == 2)
            {
              if (fabs(v69) >= 1.0e-12)
              {
                size_t v87 = re::globalAllocators(v68);
                uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v87[2] + 32))(v87[2], 176, 8);
                uint64_t v89 = re::TimelineAssetData::TimelineAssetData(v88, 1);
                *(void *)uint64_t v89 = &unk_26E6CEBD0;
                *(unsigned char *)(v89 + 112) = 0;
                *(void *)(v89 + 128) = 0;
                *(unsigned char *)(v89 + 136) = 0;
                *(void *)(v89 + 144) = 0;
                *(unsigned char *)(v89 + 152) = 0;
                *(void *)(v89 + 72) = 0;
                *(void *)(v88 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
                *(void *)(v88 + 88) = 0;
                *(_DWORD *)(v88 + 168) = 1065353216;
                *(unsigned char *)(v88 + 172) = 0;
                *(unsigned char *)(v88 + 96) = 1;
                *(double *)(v88 + 104) = v69;
                re::AssetHandle::operator=(v89 + 72, (uint64_t *)&v113);
                TimelineAsset = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v88, v90);
                uint64_t v92 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
                (*(void (**)(long long *__return_ptr, re::ecs2::Entity *, re **, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v119, a1, TimelineAsset, v92, 0, 0, 0);
              }
              else
              {
                re::AssetHandle::AssetHandle((re::AssetHandle *)&v119, (const re::AssetHandle *)&v113);
              }
              long long v93 = v113;
              long long v113 = v119;
              long long v119 = v93;
              uint64_t v94 = v114;
              uint64_t v114 = v120;
              *(void *)&long long v120 = v94;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v119);
              char v96 = re::globalAllocators(v95);
              uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v96[2] + 32))(v96[2], 112, 8);
              *(_OWORD *)(v97 + 32) = 0u;
              *(_OWORD *)(v97 + 48) = 0u;
              *(_OWORD *)(v97 + 64) = 0u;
              *(_OWORD *)uint64_t v97 = 0u;
              *(_OWORD *)(v97 + 16) = 0u;
              *(void *)(v97 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
              *(void *)(v97 + 88) = 0;
              *(void *)(v97 + 32) = "";
              *(void *)(v97 + 48) = 0;
              *(void *)(v97 + + 56) = 0;
              *(_DWORD *)(v97 + 64) = 0;
              *(void *)(v97 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
              *(void *)(v97 + 96) = 0;
              *(void *)(v97 + 104) = 0;
              re::AssetHandle::operator=(v97, (uint64_t *)&v113);
              re::StringID::operator=((unint64_t *)(v97 + 24), (uint64_t *)v55);
              re::DynamicArray<re::AnimationSceneEntityData>::operator=(v97 + 40, (uint64_t *)(v55 + 16));
              *(unsigned char *)(v97 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(v55 + 56);
              re::AssetHandle::operator=(v97 + 88, (uint64_t *)(v55 + 64));
              uint64_t v98 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
              (*(void (**)(long long *__return_ptr, re::ecs2::Entity *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v119, a1, v97, v98, 0, 0, 0);
              long long v65 = (re::ecs2::Entity *)v119;
              *(void *)&long long v119 = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v119);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v113);
              goto LABEL_115;
            }
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v113);
        }
      }
    }
  }
LABEL_108:
  unsigned int v70 = re::globalAllocators((re *)v34);
  uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70[2] + 32))(v70[2], 112, 8);
  *(_OWORD *)(v71 + 32) = 0u;
  *(_OWORD *)(v71 + 48) = 0u;
  *(_OWORD *)(v71 + 64) = 0u;
  *(_OWORD *)uint64_t v71 = 0u;
  *(_OWORD *)(v71 + 16) = 0u;
  *(void *)(v71 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v71 + 88) = 0;
  *(void *)(v71 + 32) = "";
  *(void *)(v71 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v71 + 48) = 0;
  *(void *)(v71 + + 56) = 0;
  *(_DWORD *)(v71 + 64) = 0;
  *(void *)(v71 + 96) = 0;
  *(void *)(v71 + 104) = 0;
  *(void *)v116 = &unk_26E734918;
  *(void *)&v118[4] = v116;
  *(void *)&long long v121 = (char *)&v119 + 8;
  *(void *)&long long v119 = v71;
  *((void *)&v119 + 1) = &unk_26E734918;
  std::__function::__value_func<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__value_func[abi:nn180100](v116);
  long long v72 = re::StringID::operator=((unint64_t *)(v119 + 24), a2 + 34);
  uint64_t v73 = re::globalAllocators((re *)v72);
  uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73[2] + 32))(v73[2], 112, 8);
  uint64_t v75 = re::TimelineAssetData::TimelineAssetData(v74, 2);
  *(void *)uint64_t v75 = &unk_26E6CEC28;
  *(void *)(v75 + 104) = 0;
  *(void *)(v75 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v75 + 88) = 0;
  *(void *)(v75 + 72) = 0;
  *(_DWORD *)(v75 + 96) = 0;
  *(void *)&long long v113 = &unk_26E734998;
  v115 = &v113;
  *(void *)&v118[12] = &v116[8];
  *(void *)v116 = v75;
  *(void *)&v116[8] = &unk_26E734998;
  __int16 v76 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(re::TimelineGroupAssetData *)>::~__value_func[abi:nn180100](&v113);
  __int16 v78 = *(re::AssetHelper **)v116;
  if (*(void *)(*(void *)v116 + 88))
  {
    *(void *)v116 = 0;
    double v79 = re::AssetHelper::makeTimelineAsset(v78, v77);
    int v80 = re::TimelineAsset::assetType((re::TimelineAsset *)v79);
    (*(void (**)(re::ecs2::Entity **__return_ptr, re::ecs2::Entity *, re **, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v101, a1, v79, v80, 0, 0, 0);
    long long v81 = (re::ecs2::Entity **)v119;
    uint64_t v82 = *(void *)(v119 + 8);
    uint64_t v83 = *(re::ecs2::Entity **)(v119 + 16);
    *(void *)(v119 + 8) = v102;
    uint64_t v102 = v82;
    int v84 = *v81;
    *long long v81 = 0;
    *long long v81 = v101;
    v81[2] = v103;
    v101 = v84;
    uint64_t v103 = v83;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v101);
    uint64_t v85 = v119;
    *(void *)&long long v119 = 0;
    unint64_t v86 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    (*(void (**)(re::ecs2::Entity **__return_ptr, re::ecs2::Entity *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v101, a1, v85, v86, 0, 0, 0);
    long long v65 = v101;
    v101 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v101);
  }
  else
  {
    long long v65 = 0;
  }
  if (void)v113 && (BYTE8(v113)) {
    (*(void (**)(void))(*(void *)v113 + 40))();
  }
  std::unique_ptr<re::TimelineGroupAssetData,std::function<void ()(re::TimelineGroupAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v116);
  std::unique_ptr<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>,std::function<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v119);
LABEL_115:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v104);
  if (v107[0])
  {
    if (*(void *)v110) {
      (*(void (**)(void))(*(void *)v107[0] + 40))();
    }
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v111);
  return v65;
}

re::ecs2::Entity *anonymous namespace'::validateAndRetainSceneAsset(_anonymous_namespace_ *this, const re::AssetHandle *a2, re::ecs2::Entity *a3, AssetService *a4)
{
  v38[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(this);
  if (!v7) {
    goto LABEL_9;
  }
  BOOL v8 = re::StringID::operator==((void *)(v7 + 24), (void *)a2 + 34);
  if (v8) {
    goto LABEL_9;
  }
  unsigned __int8 v9 = re::globalAllocators((re *)v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 112, 8);
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v10 + 88) = 0;
  *(void *)(v10 + 32) = "";
  *(void *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 104) = 0;
  uint64_t v35 = (re::AssetHelper *)&unk_26E7347F8;
  v36[2] = &v35;
  uint64_t v38[3] = v38;
  uint64_t v37 = (void *)v10;
  v38[0] = &unk_26E7347F8;
  std::__function::__value_func<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__value_func[abi:nn180100](&v35);
  unint64_t v11 = re::StringID::operator=(v37 + 3, (uint64_t *)a2 + 34);
  uint64_t v12 = re::globalAllocators((re *)v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 112, 8);
  uint64_t v14 = re::TimelineAssetData::TimelineAssetData(v13, 2);
  *(void *)uint64_t v14 = &unk_26E6CEC28;
  *(void *)(v14 + 104) = 0;
  *(void *)(v14 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v14 + 88) = 0;
  *(void *)(v14 + 72) = 0;
  *(_DWORD *)(v14 + 96) = 0;
  uint64_t v32 = &unk_26E734888;
  uint64_t v34 = &v32;
  uint64_t v35 = (re::AssetHelper *)v14;
  v36[3] = v36;
  v36[0] = &unk_26E734888;
  uint64_t v15 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(re::TimelineGroupAssetData *)>::~__value_func[abi:nn180100](&v32);
  uint64_t v17 = v35;
  uint64_t v18 = *((void *)v35 + 11);
  if (v18)
  {
    uint64_t v35 = 0;
    TimelineAsset = re::AssetHelper::makeTimelineAsset(v17, v16);
    unint64_t v20 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
    (*(void (**)(re::ecs2::Entity **__return_ptr, re::ecs2::Entity *, re **, uint64_t *, void, void, void))(*(void *)a3 + 416))(&v29, a3, TimelineAsset, v20, 0, 0, 0);
    unint64_t v21 = (re::ecs2::Entity **)v37;
    uint64_t v22 = v37[1];
    uint64_t v23 = (re::ecs2::Entity *)v37[2];
    v37[1] = v30;
    uint64_t v30 = v22;
    __n128 v24 = *v21;
    *unint64_t v21 = 0;
    *unint64_t v21 = v29;
    void v21[2] = v31;
    long long v29 = v24;
    uint64_t v31 = v23;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
    uint64_t v25 = v37;
    uint64_t v37 = 0;
    uint64_t v26 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    (*(void (**)(re::ecs2::Entity **__return_ptr, re::ecs2::Entity *, void *, uint64_t *, void, void, void))(*(void *)a3 + 416))(&v29, a3, v25, v26, 0, 0, 0);
    a3 = v29;
    long long v29 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
  }
  if (v32 && (v33 & 1) != 0) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
  std::unique_ptr<re::TimelineGroupAssetData,std::function<void ()(re::TimelineGroupAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v35);
  std::unique_ptr<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>,std::function<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v37);
  if (!v18)
  {
LABEL_9:
    a3 = *(re::ecs2::Entity **)this;
    if (*(void *)this) {
      uint64_t v27 = (char *)a3 + 8;
    }
  }
  return a3;
}

void anonymous namespace'::findTimelineSubtreeWithEntityPath(re::AssetHandle *a1, re::TimelineAsset *a2, re::TimelineAsset *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7 = a3;
  uint64_t v10 = re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v10) {
    goto LABEL_46;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  v69[0] = 46;
  uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::find((re::DynamicString *)(v11 + 40), v69, 1, 0, (uint64_t)&v71);
  if (!(_BYTE)v71)
  {
    unint64_t v13 = 0;
    if (!a5) {
      goto LABEL_27;
    }
    goto LABEL_15;
  }
  unsigned int v67 = v7;
  float32x4_t v68 = a2;
  unint64_t v13 = 0;
  if (!a5)
  {
LABEL_13:
    a2 = v68;
    uint64_t v7 = v67;
    goto LABEL_27;
  }
  uint64_t v14 = v72;
  while (1)
  {
    uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::operator[](v11 + 40, v13);
    *(void *)double v69 = 0;
    __s1 = "";
    uint64_t v16 = *(void **)(a4 + 8 * (a5 - 1));
    if ((*v16 ^ *(void *)v69) >= 2)
    {
      re::StringID::destroyString((re::StringID *)v69);
LABEL_44:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      *((void *)a1 + 2) = 0;
      return;
    }
    uint64_t v17 = (const char *)v16[1];
    if (__s1 == v17)
    {
      re::StringID::destroyString((re::StringID *)v69);
    }
    else
    {
      int v18 = strcmp(__s1, v17);
      re::StringID::destroyString((re::StringID *)v69);
      if (v18) {
        goto LABEL_44;
      }
    }
    a4 = re::Slice<re::StringID const*>::range(a4, a5, a5 - 1);
    a5 = v19;
    unint64_t v13 = (unint64_t)(v14 + 1);
    char v76 = 46;
    uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::find((re::DynamicString *)(v11 + 40), &v76, 1, (unint64_t)(v14 + 1), (uint64_t)v69);
    if (!(v69[0] | 1) || !v69[0]) {
      break;
    }
    uint64_t v14 = __s1;
    if (!a5) {
      goto LABEL_13;
    }
  }
  a2 = v68;
  uint64_t v7 = v67;
  if (!a5)
  {
LABEL_27:
    unint64_t v30 = *(void *)(v11 + 48);
    uint64_t v31 = v30 & 1;
    unint64_t v32 = v30 >> 1;
    unint64_t v33 = v30 >> 1;
    goto LABEL_28;
  }
LABEL_15:
  unint64_t v20 = *(void *)(v11 + 48);
  if (v20) {
    unint64_t v21 = v20 >> 1;
  }
  else {
    unint64_t v21 = v20 >> 1;
  }
  if (v13 >= v21)
  {
LABEL_55:
    int v49 = *(_DWORD *)(v11 + 8);
    switch(v49)
    {
      case 1:
        uint64_t v50 = v11 + 72;
        goto LABEL_57;
      case 2:
        uint64_t v75 = 0;
        long long v72 = 0;
        uint64_t v73 = 0;
        unint64_t v71 = 0;
        int v74 = 0;
        uint64_t v51 = *(void *)(v11 + 88);
        if (!v51) {
          goto LABEL_74;
        }
        uint64_t v52 = *(void *)(v11 + 104);
        uint64_t v53 = 24 * v51;
        do
        {
          if (__s1)
          {
            unsigned int v54 = atomic_load((unsigned int *)__s1 + 176);
            if (v54 == 2) {
              re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)&v71, (re::AssetHandle *)v69);
            }
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v69);
          v52 += 24;
          v53 -= 24;
        }
        while (v53);
        if (v73 == 1)
        {
          uint64_t v56 = (const re::AssetHandle *)v75;
          unint64_t v57 = a1;
LABEL_75:
          re::AssetHandle::AssetHandle(v57, v56);
          goto LABEL_77;
        }
        uint64_t v58 = *(void *)(v11 + 88);
        if (v73 == v58)
        {
          if (!v58)
          {
LABEL_74:
            unint64_t v57 = a1;
            uint64_t v56 = v7;
            goto LABEL_75;
          }
          unint64_t v59 = (void *)(*(void *)(v11 + 104) + 8);
          uint64_t v60 = 24 * v58;
          uint64_t v61 = v75 + 1;
          while (*v61 == *v59)
          {
            v59 += 3;
            v61 += 3;
            v60 -= 24;
            if (!v60) {
              goto LABEL_74;
            }
          }
        }
        uint64_t v62 = re::globalAllocators(v55);
        uint64_t v63 = (re::AssetHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62[2] + 32))(v62[2], 112, 8);
        uint64_t v64 = re::TimelineAssetData::TimelineAssetData((uint64_t)v63, 2);
        *(void *)uint64_t v64 = &unk_26E6CEC28;
        *(void *)(v64 + 104) = 0;
        *(void *)(v64 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
        *(void *)(v64 + 88) = 0;
        *(_DWORD *)(v64 + 96) = 0;
        *(void *)(v64 + 72) = 0;
        re::DynamicArray<re::AssetHandle>::operator=(v64 + 72, (uint64_t)&v71);
        TimelineAsset = re::AssetHelper::makeTimelineAsset(v63, v65);
        re::AssetService::createMemoryAsset<re::TimelineAsset>(a2, (uint64_t)TimelineAsset, 0);
LABEL_77:
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v71);
        return;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_56;
      default:
        if (v49 != 60) {
          goto LABEL_46;
        }
LABEL_56:
        uint64_t v50 = v11 + 80;
LABEL_57:
        return;
    }
  }
  uint64_t v22 = (_anonymous_namespace_ *)re::DynamicString::operator[](v11 + 40, v13);
  uint64_t v23 = (const char *)v22;
  unint64_t v24 = *(void *)(v11 + 48);
  if (v24) {
    unint64_t v25 = v24 >> 1;
  }
  else {
    unint64_t v25 = v24 >> 1;
  }
  size_t v26 = v25 - v13;
  unint64_t v71 = 0;
  long long v72 = "";
  uint64_t v27 = *(void **)(a4 + 8 * (a5 - 1));
  if ((*v27 ^ v71) >= 2)
  {
    re::StringID::destroyString((re::StringID *)&v71);
LABEL_46:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    return;
  }
  uint64_t v28 = (char *)v27[1];
  if (v72 == v28)
  {
    re::StringID::destroyString((re::StringID *)&v71);
    goto LABEL_50;
  }
  int v29 = strcmp(v72, v28);
  re::StringID::destroyString((re::StringID *)&v71);
  if (v29) {
    goto LABEL_46;
  }
LABEL_50:
  uint64_t v12 = (_anonymous_namespace_ *)re::Slice<re::StringID const*>::range(a4, a5, a5 - 1);
  unint64_t v48 = *(void *)(v11 + 48);
  uint64_t v31 = v48 & 1;
  unint64_t v32 = v48 >> 1;
  unint64_t v33 = v48 >> 1;
  if (*(void *)(v11 + 48)) {
    unint64_t v13 = v32;
  }
  else {
    unint64_t v13 = v33;
  }
  if (v47)
  {
    a4 = (uint64_t)v12;
    a5 = v47;
    goto LABEL_55;
  }
LABEL_28:
  if (v31) {
    unint64_t v34 = v32;
  }
  else {
    unint64_t v34 = v33;
  }
  if (v13 >= v34)
  {
    if (v34)
    {
      uint64_t v43 = v41[6];
      if (v43)
      {
        v41[6] = 1;
        uint64_t v44 = (unsigned char *)v41[7];
      }
      else
      {
        *((unsigned char *)v41 + 48) = v43 & 1;
        uint64_t v44 = (char *)v41 + 49;
      }
      *uint64_t v44 = 0;
      id v45 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v41, v42);
      uint64_t v46 = re::TimelineAsset::assetType((re::TimelineAsset *)v45);
      (*(void (**)(re::TimelineAsset *, re **, uint64_t *, void, void, void))(*(void *)a2 + 416))(a2, v45, v46, 0, 0, 0);
    }
    else
    {
      re::AssetHandle::AssetHandle(a1, v7);
    }
  }
  else
  {
    unint64_t v36 = *(void *)(v11 + 48);
    if (v36) {
      size_t v37 = v36 >> 1;
    }
    else {
      size_t v37 = v36 >> 1;
    }
    re::DynamicString::substr((re::DynamicString *)(v11 + 40), v13, v37, (re::DynamicString *)&v71);
    re::DynamicString::operator=((re::DynamicString *)(v35 + 40), (re::DynamicString *)&v71);
    if (v71)
    {
      if (v72) {
        (*(void (**)(void))(*(void *)v71 + 40))();
      }
    }
    unsigned int v39 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v35, v38);
    uint64_t v40 = re::TimelineAsset::assetType((re::TimelineAsset *)v39);
    (*(void (**)(re::TimelineAsset *, re **, uint64_t *, void, void, void))(*(void *)a2 + 416))(a2, v39, v40, 0, 0, 0);
  }
}

void anonymous namespace'::createDefaultSubtreeAnimation(_anonymous_namespace_ *this, re::AnimationSceneEntityData *a2, re::TimelineGroupAssetData *a3, re::DynamicString *a4, AssetService *a5, re::ecs2::Entity *a6)
{
  v59[0] = a6;
  uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)&a5[4], (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 40);
    if (v9)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
      if (v10 == 2)
      {
        uint64_t v11 = (void *)re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v8 + 32));
        uint64_t v12 = v11[12];
        if (v12)
        {
          unint64_t v13 = (void *)v11[14];
          uint64_t v14 = 40 * v12;
          while (1)
          {
            if (v59[0])
            {
              if (!re::StringID::operator==(v13, re::kDefaultEntityAnimationName)) {
                goto LABEL_16;
              }
            }
            else if (!re::StringID::operator==(v13, re::kGlobalSceneAnimationName) {
                   && !re::StringID::operator==(v13, re::kLocalSubtreeSceneAnimationName)
            }
                   && !re::StringID::operator==(v13, re::kLocalEntitySceneAnimationName)
                   && !re::StringID::operator==(v13, re::kDefaultEntityAnimationName))
            {
              goto LABEL_16;
            }
            uint64_t v15 = re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)(v13 + 2));
            re::StringID::operator=((unint64_t *)this, (uint64_t *)(v15 + 24));
            re::DynamicArray<re::AnimationSceneEntityData>::operator=((uint64_t)this + 16, (uint64_t *)(v15 + 40));
            *((unsigned char *)this + + 56) = *(unsigned char *)(v15 + 80);
            re::AssetHandle::operator=((uint64_t)this + 64, (uint64_t *)(v15 + 88));
            uint64_t v16 = re::StringID::operator=((unint64_t *)this, (uint64_t *)&a5[34]);
            uint64_t v17 = re::globalAllocators((re *)v16);
            int v18 = (re::AssetHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 176, 8);
            uint64_t v19 = re::TimelineAssetData::TimelineAssetData((uint64_t)v18, 1);
            *(void *)uint64_t v19 = &unk_26E6CEBD0;
            *(unsigned char *)(v19 + 112) = 0;
            *(void *)(v19 + 128) = 0;
            *(unsigned char *)(v19 + 136) = 0;
            *(void *)(v19 + 144) = 0;
            *(unsigned char *)(v19 + 152) = 0;
            *(void *)(v19 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v19 + 88) = 0;
            *(unsigned char *)(v19 + 96) = 0;
            *(void *)(v19 + 72) = 0;
            uint64_t v20 = v19 + 72;
            *(_DWORD *)(v19 + 168) = 1065353216;
            *((unsigned char *)v18 + 172) = 0;
            re::DynamicString::operator=((re::DynamicString *)(v19 + 40), a3);
            re::AssetHandle::operator=(v20, (uint64_t *)v15);
            TimelineAsset = re::AssetHelper::makeTimelineAsset(v18, v21);
            re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
            (*(void (**)(_DWORD *__return_ptr))(*(void *)a4 + 416))(&v59[1]);
            re::DynamicArray<re::AssetHandle>::add((void *)a2 + 9, (uint64_t *)&v59[1]);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59[1]);
            if ((v59[0] & 1) == 0
              && (re::StringID::operator==(v13, re::kGlobalSceneAnimationName)
               || re::StringID::operator==(v13, re::kLocalSubtreeSceneAnimationName)))
            {
              return;
            }
LABEL_16:
            v13 += 5;
            v14 -= 40;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        uint64_t v23 = v11[17];
        if (v23)
        {
          unint64_t v24 = (re::AssetHandle *)v11[19];
          uint64_t v25 = 24 * v23;
          while (1)
          {
            unint64_t v68 = 0;
            double v69 = "";
            size_t v26 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
            uint64_t v27 = (uint64_t *)*((void *)v24 + 1);
            if (v27) {
              uint64_t v27 = (uint64_t *)v27[33];
            }
            if (v26 == v27)
            {
              uint64_t v28 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v24);
              uint64_t v29 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>(v28) + 16);
              if (v29) {
                re::StringID::operator=(&v68, (uint64_t *)(v29 + 24));
              }
            }
            if (v59[0]) {
              break;
            }
            unint64_t v30 = v68 >> 1;
            if (v68 >> 1 > 0x3C015B2DF8573272)
            {
              if (v30 != 0x3D5505122B750911)
              {
                if (v30 != 0x3C015B2DF8573273) {
                  goto LABEL_50;
                }
                uint64_t v31 = v69;
                if (v69 == "global scene animation") {
                  goto LABEL_42;
                }
                unint64_t v32 = "global scene animation";
                goto LABEL_41;
              }
              uint64_t v31 = v69;
              if (v69 != "default scene animation")
              {
                unint64_t v32 = "default scene animation";
LABEL_41:
                if (strcmp(v31, v32)) {
                  goto LABEL_50;
                }
              }
            }
            else
            {
              if (v30 != 0x3455FFA1B1837FA3)
              {
                if (v30 != 0x34A574094D1AF786) {
                  goto LABEL_50;
                }
LABEL_31:
                uint64_t v31 = v69;
                if (v69 != "default entity animation")
                {
                  unint64_t v32 = "default entity animation";
                  goto LABEL_41;
                }
                goto LABEL_42;
              }
              uint64_t v31 = v69;
              if (v69 != "default subtree animation")
              {
                unint64_t v32 = "default subtree animation";
                goto LABEL_41;
              }
            }
LABEL_42:
            uint64_t v33 = re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v24);
            re::StringID::operator=((unint64_t *)this, (uint64_t *)(v33 + 24));
            re::DynamicArray<re::AnimationSceneEntityData>::operator=((uint64_t)this + 16, (uint64_t *)(v33 + 40));
            *((unsigned char *)this + + 56) = *(unsigned char *)(v33 + 80);
            re::AssetHandle::operator=((uint64_t)this + 64, (uint64_t *)(v33 + 88));
            unint64_t v34 = re::StringID::operator=((unint64_t *)this, (uint64_t *)&a5[34]);
            uint64_t v35 = re::globalAllocators((re *)v34);
            unint64_t v36 = (re::AssetHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35[2] + 32))(v35[2], 176, 8);
            uint64_t v37 = re::TimelineAssetData::TimelineAssetData((uint64_t)v36, 1);
            *(void *)uint64_t v37 = &unk_26E6CEBD0;
            *(unsigned char *)(v37 + 112) = 0;
            *(void *)(v37 + 128) = 0;
            *(unsigned char *)(v37 + 136) = 0;
            *(void *)(v37 + 144) = 0;
            *(unsigned char *)(v37 + 152) = 0;
            *(void *)(v37 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v37 + 88) = 0;
            *(unsigned char *)(v37 + 96) = 0;
            *(void *)(v37 + 72) = 0;
            uint64_t v38 = v37 + 72;
            *(_DWORD *)(v37 + 168) = 1065353216;
            *((unsigned char *)v36 + 172) = 0;
            re::DynamicString::operator=((re::DynamicString *)(v37 + 40), a3);
            re::AssetHandle::operator=(v38, (uint64_t *)v33);
            uint64_t v40 = re::AssetHelper::makeTimelineAsset(v36, v39);
            re::TimelineAsset::assetType((re::TimelineAsset *)v40);
            (*(void (**)(_DWORD *__return_ptr))(*(void *)a4 + 416))(&v59[1]);
            re::DynamicArray<re::AssetHandle>::add((void *)a2 + 9, (uint64_t *)&v59[1]);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59[1]);
            if ((v59[0] & 1) == 0)
            {
              if (v68 >> 1 == 0x3455FFA1B1837FA3)
              {
                uint64_t v41 = v69;
                if (v69 == "default subtree animation") {
                  goto LABEL_78;
                }
                long long v42 = "default subtree animation";
              }
              else
              {
                if (v68 >> 1 != 0x3C015B2DF8573273) {
                  goto LABEL_50;
                }
                uint64_t v41 = v69;
                if (v69 == "global scene animation") {
                  goto LABEL_78;
                }
                long long v42 = "global scene animation";
              }
              if (!strcmp(v41, v42))
              {
LABEL_78:
                re::StringID::destroyString((re::StringID *)&v68);
                return;
              }
            }
LABEL_50:
            re::StringID::destroyString((re::StringID *)&v68);
            unint64_t v24 = (re::AssetHandle *)((char *)v24 + 24);
            v25 -= 24;
            if (!v25) {
              goto LABEL_51;
            }
          }
          if (v68 >> 1 != 0x34A574094D1AF786) {
            goto LABEL_50;
          }
          goto LABEL_31;
        }
      }
    }
  }
LABEL_51:
  var0 = a5[41].var0;
  if (var0)
  {
    uint64_t v44 = a5[43].var0;
    id v45 = (void *)((char *)this + 16);
    uint64_t v46 = 8 * (void)var0;
    do
    {
      unint64_t v47 = *v44;
      unint64_t v48 = re::DynamicString::DynamicString((re::DynamicString *)&v68, a3);
      if (v69) {
        unint64_t v49 = (unint64_t)v69 >> 1;
      }
      else {
        unint64_t v49 = v69 >> 1;
      }
      if (v49) {
        unint64_t v48 = (re::DynamicString *)re::DynamicString::append(v48, ".", 1uLL);
      }
      long long v66 = 0u;
      long long v67 = 0u;
      re::DynamicString::setCapacity(&v66, 0);
      size_t v50 = strlen(*((const char **)v47 + 35));
      *(void *)&v59[1] = *((void *)v47 + 35);
      size_t v60 = v50;
      re::internal::escapeBindingKey(&v59[1], (re::DynamicString *)&v66);
      if (BYTE8(v66)) {
        uint64_t v51 = (char *)v67;
      }
      else {
        uint64_t v51 = (char *)&v66 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"entities[%s]", (re::DynamicString *)&v59[1], v51);
      size_t v52 = v60 & 1;
      if (v60) {
        uint64_t v53 = (const char *)v61[0];
      }
      else {
        uint64_t v53 = (char *)&v60 + 1;
      }
      if (v60) {
        size_t v54 = v60 >> 1;
      }
      else {
        size_t v54 = v60 >> 1;
      }
      re::DynamicString::append((re::DynamicString *)&v68, v53, v54);
      if (*(void *)&v59[1] && v52) {
        (*(void (**)(void))(**(void **)&v59[1] + 40))();
      }
      *(void *)&v59[1] = 0;
      size_t v60 = (size_t)"";
      uint64_t v63 = 0;
      memset(v61, 0, sizeof(v61));
      int v62 = 0;
      char v64 = 0;
      memset(v65, 0, sizeof(v65));
      re::StringID::operator=((unint64_t *)&v59[1], (uint64_t *)v47 + 34);
      re::DynamicArray<re::AnimationSceneEntityData>::add(v45, (uint64_t *)&v59[1]);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v65);
      re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)v61);
      re::StringID::destroyString((re::StringID *)&v59[1]);
      if (void)v66 && (BYTE8(v66)) {
        (*(void (**)(void))(*(void *)v66 + 40))();
      }
      if (v68)
      {
        if (v69) {
          (*(void (**)(void))(*(void *)v68 + 40))();
        }
      }
      ++v44;
      v46 -= 8;
    }
    while (v46);
  }
}

uint64_t re::AssetService::createMemoryAsset<re::TimelineAsset>(re::TimelineAsset *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = re::TimelineAsset::assetType(a1);
  uint64_t v7 = *(uint64_t (**)(re::TimelineAsset *, uint64_t, uint64_t *, void, uint64_t, void))(*(void *)a1 + 416);
  return v7(a1, a2, v6, 0, a3, 0);
}

uint64_t REAnimationLibraryComponentGetAnimationLibraryAsset(uint64_t a1)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)(a1 + 32));
  if (v3[1]) {
    uint64_t v1 = v3[0];
  }
  else {
    uint64_t v1 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAnimationLibraryComponentGetFirstTransformAnimation(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t v2 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (!v2 || (uint64_t v3 = v2, !*(void *)(v2 + 56)))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v35, (const re::AssetHandle *)v1);
    if (v35)
    {
      if (v36) {
        uint64_t v4 = *(void *)(v36 + 24);
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(v4, v35);
      uint64_t v6 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v5);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 136);
        if (v7)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          while (1)
          {
            uint64_t v10 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v5);
            if (*(void *)(v10 + 136) <= v9) {
              uint64_t v11 = 0;
            }
            else {
              uint64_t v11 = *(void *)(*(void *)(v10 + 152) + v8);
            }
            CFStringRef Type = (const __CFString *)REAssetGetType(v11);
            if (CFStringCompare(Type, @"Timeline", 0)) {
              goto LABEL_31;
            }
            uint64_t v13 = RETimelineDefinitionCreateFromTimeline(v11);
            uint64_t v14 = v13;
            uint64_t v15 = *(void *)(v13 + 48);
            if (!v15) {
              uint64_t v15 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v13 + 24)) + 8);
            }
            uint64_t v16 = *(unsigned int *)(v15 + 8);
            if (v16 > 0x3D) {
              break;
            }
            if (v17 > 0x1A || ((1 << v17) & 0x4040400) == 0) {
              goto LABEL_28;
            }
            re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v34);
            uint64_t v1 = v34;
            if (!*(void *)(v34 + 32)) {
              re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)(v34 + 24), 1uLL);
            }
            *(void *)&v31.char var0 = 0;
            v31.var1 = "";
            uint64_t v33 = 0;
            long long v32 = 0uLL;
            re::AssetAPIHelper::assetHandleCreate(v11, (uint64_t *)&v29);
            long long v19 = v32;
            long long v32 = v29;
            long long v29 = v19;
            uint64_t v20 = v33;
            uint64_t v33 = v30;
            uint64_t v30 = v20;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
            Name = (_anonymous_namespace_ *)RETimelineDefinitionGetName(v14);
            uint64_t v27 = 0;
            uint64_t v28 = "";
            uint64_t v22 = v27;
            uint64_t v23 = (char *)v28;
            uint64_t v27 = 0;
            uint64_t v28 = "";
            char var0 = (char)v31.var0;
            var1 = v31.var1;
            *(void *)&v31.char var0 = v22;
            v31.var1 = v23;
            *(void *)&long long v29 = v22 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
            *((void *)&v29 + 1) = var1;
            re::StringID::destroyString((re::StringID *)&v29);
            re::StringID::destroyString((re::StringID *)&v27);
            re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v1 + 24), &v31);

            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
            re::StringID::destroyString((re::StringID *)&v31);
LABEL_29:
            if (v17 <= 0x1A && ((1 << v17) & 0x4040400) != 0)
            {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
              return v1;
            }
LABEL_31:
            ++v9;
            v8 += 24;
            if (v7 == v9) {
              goto LABEL_32;
            }
          }
          unsigned int v17 = 0;
LABEL_28:

          goto LABEL_29;
        }
      }
LABEL_32:
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
    return 0;
  }
  re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v31);
  uint64_t v1 = *(void *)&v31.var0;
  if (!*(void *)(*(void *)&v31.var0 + 32)) {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)(*(void *)&v31.var0 + 24), 1uLL);
  }
  re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v1 + 24), *(StringID **)(v3 + 72));
  return v1;
}

uint64_t REAnimationLibraryComponentCreateQueryTransformAnimationWithName(uint64_t a1, const char *a2)
{
  uint64_t v3 = (const re::AssetHandle *)(a1 + 32);
  uint64_t v4 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        uint64_t v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v9 = 2 * v5;
  v48[0] = 2 * v5;
  v48[1] = a2;
  if (v4 && (uint64_t v10 = *(void *)(v4 + 56)) != 0)
  {
    uint64_t v11 = *(StringID **)(v4 + 72);
    uint64_t v12 = 40 * v10;
    while (1)
    {
      if ((*(void *)&v11->var0 ^ (unint64_t)v9) <= 1)
      {
        var1 = v11->var1;
        if (var1 == a2 || !strcmp(var1, a2)) {
          break;
        }
      }
      uint64_t v11 = (StringID *)((char *)v11 + 40);
      v12 -= 40;
      if (!v12) {
        goto LABEL_45;
      }
    }
    re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v42);
    uint64_t v15 = *(void *)&v42.var0;
    if (!*(void *)(*(void *)&v42.var0 + 32)) {
      re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)(*(void *)&v42.var0 + 24), 1uLL);
    }
    re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v15 + 24), v11);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v46, v3);
    if (v46)
    {
      if (v47) {
        uint64_t v14 = *(void *)(v47 + 24);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v16 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(v14, v46);
      uint64_t v17 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v16);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 136);
        if (v18)
        {
          uint64_t v19 = 0;
          for (unint64_t i = 0; v18 != i; ++i)
          {
            uint64_t v21 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v16);
            if (*(void *)(v21 + 136) <= i) {
              uint64_t v22 = 0;
            }
            else {
              uint64_t v22 = *(void *)(*(void *)(v21 + 152) + v19);
            }
            CFStringRef Type = (const __CFString *)REAssetGetType(v22);
            if (CFEqual(Type, @"Timeline"))
            {
              uint64_t v24 = RETimelineDefinitionCreateFromTimeline(v22);
              uint64_t v25 = v24;
              uint64_t v26 = *(void *)(v24 + 48);
              if (!v26) {
                uint64_t v26 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v24 + 24)) + 8);
              }
              uint64_t v27 = *(unsigned int *)(v26 + 8);
              if (v27 <= 0x3D)
              {
                BOOL v29 = v28 > 0x1A;
                int v30 = (1 << v28) & 0x4040400;
                if (!v29 && v30 != 0)
                {
                  re::AssetAPIHelper::assetHandleCreate(v22, v45);
                  uint64_t v32 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)v45) + 16);
                  if ((*(void *)(v32 + 24) ^ (unint64_t)v9) <= 1)
                  {
                    uint64_t v33 = *(const char **)(v32 + 32);
                    if (v33 == a2 || !strcmp(v33, a2))
                    {
                      re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v44);
                      uint64_t v15 = v44;
                      if (!*(void *)(v44 + 32)) {
                        re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)(v44 + 24), 1uLL);
                      }
                      *(void *)&v42.char var0 = 0;
                      v42.var1 = "";
                      memset(v43, 0, sizeof(v43));
                      uint64_t v35 = (_anonymous_namespace_ *)re::AssetHandle::operator=((uint64_t)v43, v45);
                      uint64_t v40 = 0;
                      uint64_t v41 = "";
                      uint64_t v36 = v40;
                      uint64_t v37 = (char *)v41;
                      uint64_t v40 = 0;
                      uint64_t v41 = "";
                      char var0 = (char)v42.var0;
                      unsigned int v39 = v42.var1;
                      *(void *)&v42.char var0 = v36;
                      v42.var1 = v37;
                      v49[0] = v36 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
                      v49[1] = v39;
                      re::StringID::destroyString((re::StringID *)v49);
                      re::StringID::destroyString((re::StringID *)&v40);
                      re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v15 + 24), &v42);

                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
                      re::StringID::destroyString((re::StringID *)&v42);
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v45);
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
                      goto LABEL_46;
                    }
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v45);
                }
              }
            }
            v19 += 24;
          }
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
LABEL_45:
    uint64_t v15 = 0;
  }
LABEL_46:
  re::StringID::destroyString((re::StringID *)v48);
  return v15;
}

uint64_t REAnimationLibraryComponentCreateQueryAllTransformAnimations(uint64_t a1)
{
  uint64_t v1 = (const re::AssetHandle *)(a1 + 32);
  uint64_t v2 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (v2 && *(void *)(v2 + 56))
  {
    uint64_t v3 = (uint64_t *)(v2 + 40);
    re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)v44);
    uint64_t v4 = v44[0];
    re::DynamicArray<re::NamedAnimationLibraryEntry>::operator=(v44[0] + 24, v3);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v45, v1);
    if (!v45) {
      goto LABEL_35;
    }
    if (v46) {
      uint64_t v5 = *(void *)(v46 + 24);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v4 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(v5, v45);
    uint64_t v6 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v4);
    if (v6) {
      uint64_t v7 = *(void *)(v6 + 136);
    }
    else {
      uint64_t v7 = 0;
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v44);
    uint64_t v43 = 0;
    v40[1] = 0;
    unint64_t v41 = 0;
    int v42 = 0;
    v40[0] = v44;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity(v40, 0);
    ++v42;
    if (v7)
    {
      uint64_t v8 = 0;
      for (unint64_t i = 0; i != v7; ++i)
      {
        uint64_t v10 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v4);
        if (*(void *)(v10 + 136) <= i) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)(*(void *)(v10 + 152) + v8);
        }
        CFStringRef Type = (const __CFString *)REAssetGetType(v11);
        if (CFEqual(Type, @"Timeline"))
        {
          uint64_t v13 = RETimelineDefinitionCreateFromTimeline(v11);
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)(v13 + 48);
          if (!v15) {
            uint64_t v15 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v13 + 24)) + 8);
          }
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 > 0x3D
                 BOOL v18 = v17 > 0x1A,
                 int v19 = (1 << v17) & 0x4040400,
                 !v18)
              ? (BOOL v20 = v19 == 0)
              : (BOOL v20 = 1),
                v20))
          {
          }
          else
          {
            *(void *)&v37.char var0 = 0;
            v37.var1 = "";
            uint64_t v39 = 0;
            long long v38 = 0uLL;
            re::AssetAPIHelper::assetHandleCreate(v11, (uint64_t *)&v35);
            long long v21 = v38;
            long long v38 = v35;
            long long v35 = v21;
            uint64_t v22 = v39;
            uint64_t v39 = v36;
            uint64_t v36 = v22;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
            Name = (_anonymous_namespace_ *)RETimelineDefinitionGetName(v14);
            uint64_t v33 = 0;
            uint64_t v34 = "";
            uint64_t v24 = v33;
            uint64_t v25 = (char *)v34;
            uint64_t v33 = 0;
            uint64_t v34 = "";
            char var0 = (char)v37.var0;
            var1 = v37.var1;
            *(void *)&v37.char var0 = v24;
            v37.var1 = v25;
            *(void *)&long long v35 = v24 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
            *((void *)&v35 + 1) = var1;
            re::StringID::destroyString((re::StringID *)&v35);
            re::StringID::destroyString((re::StringID *)&v33);
            re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)v40, &v37);

            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
            re::StringID::destroyString((re::StringID *)&v37);
          }
        }
        v8 += 24;
      }
    }

    unint64_t v28 = v41;
    if (v41)
    {
      re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v37);
      uint64_t v4 = *(void *)&v37.var0;
      unint64_t v29 = v41;
      if (*(void *)(*(void *)&v37.var0 + 32) < v41)
      {
        re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)(*(void *)&v37.var0 + 24), v41);
        unint64_t v29 = v41;
      }
      if (v29)
      {
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        do
        {
          re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v4 + 24), (StringID *)(v43 + v30));
          ++v31;
          v30 += 40;
        }
        while (v31 < v41);
      }
    }
    re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit((uint64_t)v40);
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v44);
    if (v28)
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v45);
    }
    else
    {
LABEL_35:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v45);
      return 0;
    }
  }
  return v4;
}

uint64_t re::DynamicArray<re::NamedAnimationLibraryEntry>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::NamedAnimationLibraryEntry>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::NamedAnimationLibraryEntry>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::NamedAnimationLibraryEntry>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t REAnimationLibraryComponentGetNamedTransformAnimation(const char *a1, uint64_t a2)
{
  return REAnimationLibraryComponentCreateQueryTransformAnimationWithName(a2, a1);
}

uint64_t REAnimationLibraryComponentGetTransformQueryResultCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

CFStringRef REAnimationLibraryComponentCopyTransformQueryResultAnimationName(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(const char **)(*(void *)(a1 + 56) + 40 * a2 + 8);
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t REAnimationLibraryComponentGetTransformQueryResultAnimationAsset(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 40) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(void *)(*(void *)(result + 56) + 40 * a2 + 16);
  }
  return result;
}

uint64_t REAnimationLibraryComponentGetFirstSkeletalAnimation(uint64_t a1)
{
  re::ecs2::AnimationLibraryComponent::constructAnimationLibraryMeshMapping((re::ecs2::AnimationLibraryComponent *)a1);
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v13);
  uint64_t v12 = 0;
  v9[1] = 0;
  unint64_t v10 = 0;
  int v11 = 0;
  v9[0] = v13;
  re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v9, 0);
  ++v11;
  uint64_t v2 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (v2 && re::AnimationLibraryMeshMapping::getFirstSkeletalAnimation(a1 + 56, v2, (_anonymous_namespace_ *)v9))
  {
    re::make::shared::object<re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>>((re *)&v8);
    uint64_t v3 = v8;
    unint64_t v4 = v10;
    if (*(void *)(v8 + 32) < v10)
    {
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)(v8 + 24), v10);
      unint64_t v4 = v10;
    }
    if (v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        re::DynamicArray<re::SkeletalAnimationQueryEntry>::add((_anonymous_namespace_ *)(v3 + 24), (uint64_t *)(v12 + v5));
        ++v6;
        v5 += 40;
      }
      while (v6 < v10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v9);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v13);
  return v3;
}

uint64_t REAnimationLibraryComponentCreateQuerySkeletalAnimationWithName(uint64_t a1, const char *a2)
{
  re::ecs2::AnimationLibraryComponent::constructAnimationLibraryMeshMapping((re::ecs2::AnimationLibraryComponent *)a1);
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
  uint64_t v16 = 0;
  v13[1] = 0;
  unint64_t v14 = 0;
  int v15 = 0;
  v13[0] = v17;
  re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v13, 0);
  ++v15;
  unint64_t v4 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    v12[0] = 0;
    v12[1] = "";
    NamedSkeletalAnimatiounint64_t n = re::AnimationLibraryMeshMapping::getNamedSkeletalAnimation(a1 + 56, v12, v5, (_anonymous_namespace_ *)v13);
    re::StringID::destroyString((re::StringID *)v12);
    uint64_t v7 = 0;
    if (NamedSkeletalAnimation)
    {
      re::make::shared::object<re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>>((re *)v12);
      uint64_t v7 = v12[0];
      unint64_t v8 = v14;
      if (*(void *)(v12[0] + 32) < v14)
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)(v12[0] + 24), v14);
        unint64_t v8 = v14;
      }
      if (v8)
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        do
        {
          re::DynamicArray<re::SkeletalAnimationQueryEntry>::add((_anonymous_namespace_ *)(v7 + 24), (uint64_t *)(v16 + v9));
          ++v10;
          v9 += 40;
        }
        while (v10 < v14);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v13);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  return v7;
}

uint64_t REAnimationLibraryComponentCreateQueryAllSkeletalAnimations(re::ecs2::AnimationLibraryComponent *a1)
{
  re::ecs2::AnimationLibraryComponent::constructAnimationLibraryMeshMapping(a1);
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v13);
  uint64_t v12 = 0;
  v9[1] = 0;
  unint64_t v10 = 0;
  int v11 = 0;
  v9[0] = v13;
  re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v9, 0);
  ++v11;
  BOOL AllSkeletalAnimations = re::AnimationLibraryMeshMapping::getAllSkeletalAnimations((uint64_t)a1 + 56, (_anonymous_namespace_ *)v9);
  uint64_t v3 = 0;
  if (AllSkeletalAnimations)
  {
    re::make::shared::object<re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>>((re *)&v8);
    uint64_t v3 = v8;
    unint64_t v4 = v10;
    if (*(void *)(v8 + 32) < v10)
    {
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)(v8 + 24), v10);
      unint64_t v4 = v10;
    }
    if (v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        re::DynamicArray<re::SkeletalAnimationQueryEntry>::add((_anonymous_namespace_ *)(v3 + 24), (uint64_t *)(v12 + v5));
        ++v6;
        v5 += 40;
      }
      while (v6 < v10);
    }
  }
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v9);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v13);
  return v3;
}

uint64_t REAnimationLibraryComponentGetNamedSkeletalAnimation(const char *a1, uint64_t a2)
{
  return REAnimationLibraryComponentCreateQuerySkeletalAnimationWithName(a2, a1);
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultCount(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultAnimationCount(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 40) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *(void *)(*(void *)(result + 56) + 40 * a2 + 16);
  }
  return result;
}

CFStringRef REAnimationLibraryComponentCopySkeletalQueryResultAnimationName(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (!a2 || !v7) {
    return 0;
  }
  if (*(void *)(a2 + 40) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 56) + 40 * a3;
  if (*(void *)(v8 + 16) <= a4)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v9 = *(unsigned int *)(*(void *)(v8 + 32) + 12 * a4);
  if (*(void *)(v7 + 16) <= v9) {
    goto LABEL_12;
  }
  unint64_t v10 = *(const char **)(*(void *)(v7 + 32) + 120 * v9 + 64);
  return CFStringCreateWithCString(0, v10, 0x8000100u);
}

CFStringRef REAnimationLibraryComponentCopySkeletalQueryResultSkeletonName(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (!a2 || !v7) {
    return 0;
  }
  if (*(void *)(a2 + 40) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 56) + 40 * a3;
  if (*(void *)(v8 + 16) <= a4)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v9 = *(unsigned int *)(*(void *)(v8 + 32) + 12 * a4);
  if (*(void *)(v7 + 16) <= v9) {
    goto LABEL_12;
  }
  unint64_t v10 = *(const char **)(*(void *)(v7 + 32) + 120 * v9 + 48);
  return CFStringCreateWithCString(0, v10, 0x8000100u);
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultAnimationAsset(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  uint64_t v8 = 0;
  if (a2 && v7)
  {
    if (*(void *)(a2 + 40) <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 56) + 40 * a3;
      if (*(void *)(v9 + 16) > a4)
      {
        unint64_t v10 = *(unsigned int *)(*(void *)(v9 + 32) + 12 * a4);
        if (*(void *)(v7 + 16) > v10) {
          return *(void *)(*(void *)(v7 + 32) + 120 * v10 + 72);
        }
LABEL_10:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  return v8;
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultAnimationClipAsset(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  uint64_t v8 = 0;
  if (a2 && v7)
  {
    if (*(void *)(a2 + 40) <= a3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 56) + 40 * a3;
      if (*(void *)(v9 + 16) > a4)
      {
        unint64_t v10 = *(unsigned int *)(*(void *)(v9 + 32) + 12 * a4);
        if (*(void *)(v7 + 16) > v10) {
          return *(void *)(*(void *)(v7 + 32) + 120 * v10 + 96);
        }
LABEL_10:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  return v8;
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultMeshInstanceIndex(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1)
  {
    if (*(void *)(a1 + 40) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 56) + 40 * a2;
      if (*(void *)(v3 + 16) > a3) {
        return *(unsigned int *)(*(void *)(v3 + 32) + 12 * a3 + 4);
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t REAnimationLibraryComponentGetSkeletalQueryResultSkeletonIndex(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1)
  {
    if (*(void *)(a1 + 40) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 56) + 40 * a2;
      if (*(void *)(v3 + 16) > a3) {
        return *(unsigned int *)(*(void *)(v3 + 32) + 12 * a3 + 8);
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t REAnimationLibraryComponentGetAnimationSceneByName(uint64_t a1, const char *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        uint64_t v5 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *v5++;
          char v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v7 = 2 * v3;
  v31[0] = 2 * v3;
  v31[1] = a2;
  uint64_t v8 = (const re::AssetHandle *)(a1 + 32);
  uint64_t v9 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (v9 && (uint64_t v10 = *(void *)(v9 + 96)) != 0)
  {
    int v11 = (uint64_t *)(*(void *)(v9 + 112) + 16);
    uint64_t v12 = 40 * v10;
    while (1)
    {
      if ((*(v11 - 2) ^ (unint64_t)v7) <= 1)
      {
        uint64_t v13 = (const char *)*(v11 - 1);
        if (v13 == a2 || !strcmp(v13, a2)) {
          break;
        }
      }
      v11 += 5;
      v12 -= 40;
      if (!v12) {
        goto LABEL_36;
      }
    }
    uint64_t v15 = *v11;
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v29, v8);
    if (v29)
    {
      if (v30) {
        uint64_t v14 = *(void *)(v30 + 24);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v16 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(v14, v29);
      uint64_t v17 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v16);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 136);
        if (v18)
        {
          uint64_t v19 = 0;
          for (unint64_t i = 0; v18 != i; ++i)
          {
            uint64_t v21 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v16);
            if (*(void *)(v21 + 136) <= i) {
              uint64_t v22 = 0;
            }
            else {
              uint64_t v22 = *(void *)(*(void *)(v21 + 152) + v19);
            }
            CFStringRef Type = (const __CFString *)REAssetGetType(v22);
            if (CFEqual(Type, @"AnimationScene"))
            {
              re::AssetAPIHelper::assetHandleCreate(v22, v28);
              uint64_t v24 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)v28);
              uint64_t v25 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>(v24) + 16);
              if (v25)
              {
                if ((*(void *)(v25 + 24) ^ (unint64_t)v7) <= 1)
                {
                  uint64_t v26 = *(const char **)(v25 + 32);
                  if (v26 == a2 || !strcmp(v26, a2))
                  {

                    uint64_t v15 = v28[0];
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
                    goto LABEL_37;
                  }
                }
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
            }
            v19 += 24;
          }
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
LABEL_36:
    uint64_t v15 = 0;
  }
LABEL_37:
  re::StringID::destroyString((re::StringID *)v31);
  return v15;
}

uint64_t REAnimationLibraryComponentCreateQueryAllAnimationScenes(uint64_t a1)
{
  uint64_t v1 = (const re::AssetHandle *)(a1 + 32);
  uint64_t v2 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(a1 + 32));
  if (v2 && *(void *)(v2 + 96))
  {
    uint64_t v3 = (uint64_t *)(v2 + 80);
    re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v24);
    uint64_t v4 = v24;
    re::DynamicArray<re::NamedAnimationLibraryEntry>::operator=(v24 + 24, v3);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v29, v1);
    if (v29)
    {
      if (v30) {
        uint64_t v5 = *(void *)(v30 + 24);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset(v5, v29);
      uint64_t v7 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v6);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 136);
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        int v27 = 0;
        if (v8)
        {
          uint64_t v9 = 0;
          for (unint64_t i = 0; i != v8; ++i)
          {
            uint64_t v11 = AnimationLibraryDefinition::assetData((AnimationLibraryDefinition *)v6);
            if (*(void *)(v11 + 136) <= i) {
              uint64_t v12 = 0;
            }
            else {
              uint64_t v12 = *(void *)(*(void *)(v11 + 152) + v9);
            }
            CFStringRef Type = (const __CFString *)REAssetGetType(v12);
            if (CFEqual(Type, @"AnimationScene"))
            {
              *(void *)&v21.char var0 = 0;
              v21.var1 = "";
              uint64_t v23 = 0;
              long long v22 = 0uLL;
              re::AssetAPIHelper::assetHandleCreate(v12, (uint64_t *)&v19);
              long long v14 = v22;
              long long v22 = v19;
              long long v19 = v14;
              uint64_t v15 = v23;
              uint64_t v23 = v20;
              uint64_t v20 = v15;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
              re::AssetAPIHelper::assetHandleCreate(v12, (uint64_t *)&v19);
              uint64_t v16 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v19);
              uint64_t v17 = re::AssetHandle::asset<re::TimelineAsset>(v16);
              re::StringID::operator=((unint64_t *)&v21, (uint64_t *)(*(void *)(v17 + 16) + 24));
              re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)&v24, &v21);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v19);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
              re::StringID::destroyString((re::StringID *)&v21);
            }
            v9 += 24;
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        int v27 = 0;
      }

      re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>((re *)&v21);
      uint64_t v4 = *(void *)&v21.var0;
      re::DynamicArray<re::NamedAnimationLibraryEntry>::operator=(*(void *)&v21.var0 + 24, &v24);
      re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit((uint64_t)&v24);
    }
    else
    {
      uint64_t v4 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
  }
  return v4;
}

uint64_t REAnimationLibraryComponentGetAnimationSceneQueryResultCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

CFStringRef REAnimationLibraryComponentCopyAnimationSceneResultAnimationName(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = *(const char **)(*(void *)(a1 + 56) + 40 * a2 + 8);
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t REAnimationLibraryComponentGetAnimationSceneResultAnimationAsset(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 56) + 40 * a2 + 16);
}

void std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E7347F8;
  return result;
}

void std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7347F8;
}

re *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"operator()", 461, *a2);
}

uint64_t std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::target_type()
{
}

void std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E734888;
  return result;
}

void std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734888;
}

re *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::TimelineGroupAssetData>(*a2);
}

uint64_t std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1,std::allocator<anonymous namespace'::validateAndRetainSceneAsset(re::AssetHandle const&,re::ecs2::Entity *,re::AssetService *)::$_1>,void ()(re::TimelineGroupAssetData *)>::target_type()
{
}

re *re::internal::destroyPersistent<re::TimelineGroupAssetData>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v1 + 72);
    *(void *)uint64_t v1 = &unk_26E6D3730;
    re::DynamicString::deinit((re *)((char *)v1 + 40));
    re::StringID::destroyString((re *)((char *)v1 + 24));
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t re::Slice<re::StringID const*>::range(int a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, 0, a2, v3, v4);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

double anonymous namespace'::minimumClipDelay(_anonymous_namespace_ *this, const re::AssetHandle *a2)
{
  uint64_t v3 = re::AssetHandle::asset<re::TimelineAsset>(this);
  if (!v3) {
    return 1.79769313e308;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  int v6 = *(_DWORD *)(v5 + 8);
  switch(v6)
  {
    case 1:
      double v8 = *(double *)(v5 + 144);
      goto LABEL_4;
    case 2:
      uint64_t v11 = *(void *)(v5 + 88);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v12 = *(_anonymous_namespace_ **)(v5 + 104);
      uint64_t v13 = 24 * v11;
      double v9 = 1.79769313e308;
      do
      {
        if (v9 > v14) {
          double v9 = v14;
        }
        uint64_t v12 = (_anonymous_namespace_ *)((char *)v12 + 24);
        v13 -= 24;
      }
      while (v13);
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      goto LABEL_3;
    default:
      if (v6 == 60)
      {
LABEL_3:
        double v8 = *(double *)(v5 + 152);
LABEL_4:
        if (v8 <= v7) {
          double v9 = v8;
        }
        else {
          double v9 = v7;
        }
      }
      else
      {
LABEL_18:
        if (a2) {
          double v9 = 1.79769313e308;
        }
        else {
          double v9 = 0.0;
        }
      }
      break;
  }
  return v9;
}

void *std::__function::__value_func<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>,std::function<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = a1[4];
  uint64_t v6 = v2;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
LABEL_4:
    std::__function::__value_func<void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__value_func[abi:nn180100](a1 + 1);
    return a1;
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::TimelineGroupAssetData *)>::~__value_func[abi:nn180100](v5);
}

void *std::__function::__value_func<void ()(re::TimelineGroupAssetData *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::TimelineGroupAssetData,std::function<void ()(re::TimelineGroupAssetData*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v5 = v2;
    if (!v3)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x2342708B8);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
  }
  std::__function::__value_func<void ()(re::TimelineGroupAssetData *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::~__func()
{
}

void *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E734918;
  return result;
}

void std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734918;
}

re *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re *)"operator()", 691, *a2);
}

uint64_t std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_0,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_0>,void ()(re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension> *)>::target_type()
{
}

void std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::~__func()
{
}

void *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E734998;
  return result;
}

void std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734998;
}

re *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::TimelineGroupAssetData>(*a2);
}

uint64_t std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<REAnimationLibraryComponentCreateDefaultAnimation::$_1,std::allocator<REAnimationLibraryComponentCreateDefaultAnimation::$_1>,void ()(re::TimelineGroupAssetData *)>::target_type()
{
}

void re::make::shared::object<re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E734A18;
  *(void *)(v3 + + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void *re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>::~Shareable(void *a1)
{
  *a1 = &unk_26E734A18;
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::NamedAnimationLibraryEntry>>::~Shareable(void *a1)
{
  *a1 = &unk_26E734A18;
  re::DynamicArray<re::NamedAnimationLibraryEntry>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::DynamicArray<re::NamedAnimationLibraryEntry>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::NamedAnimationLibraryEntry>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * *(void *)(a1 + 16)), *(unint64_t **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = 5 * v8;
      uint64_t v10 = (const StringID *)(*(void *)(a2 + 32) + 8 * v9);
      uint64_t v11 = *(void *)(a1 + 32) + 8 * v9;
      uint64_t v12 = 40 * v4 - 8 * v9;
      do
      {
        re::StringID::StringID((re::StringID *)v11, v10);
        re::AssetHandle::AssetHandle((re::AssetHandle *)(v11 + 16), (const re::AssetHandle *)&v10[1]);
        uint64_t v10 = (const StringID *)((char *)v10 + 40);
        v11 += 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *>((uint64_t)&v13, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 40 * v4), *(unint64_t **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = *(void *)(a1 + 32) + 40 * v4;
      uint64_t v7 = 40 * v5 - 40 * v4;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 16));
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 40;
        v7 -= 40;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *,re::NamedAnimationLibraryEntry *>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::StringID::operator=(a4, v5);
      re::AssetHandle::operator=((uint64_t)(a4 + 2), v5 + 2);
      v5 += 5;
      a4 += 5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void re::make::shared::object<re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E734A60;
  *(void *)(v3 + + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void *re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>::~Shareable(void *a1)
{
  *a1 = &unk_26E734A60;
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::DynamicArray<re::SkeletalAnimationQueryEntry>>::~Shareable(void *a1)
{
  *a1 = &unk_26E734A60;
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RENetworkSyncManagerObserverOnSessionDidAdd()
{
  return RESyncServiceObserverOnSessionDidAdd();
}

uint64_t __RENetworkSyncManagerObserverOnSessionDidAdd_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetworkSyncManagerObserverOnSessionWillRemove()
{
  return RESyncServiceObserverOnSessionWillRemove();
}

uint64_t __RENetworkSyncManagerObserverOnSessionWillRemove_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

float REPhysicsForceEffectSimplexNoiseDerivative4(_OWORD *a1, __n128 a2, float a3)
{
  float32x2_t v95 = (float32x2_t)a2.n128_u64[0];
  float v4 = a2.n128_f32[2];
  __float2 v6 = __sincosf_stret(a3);
  double v7 = (float)(v4 + vaddv_f32(v95)) * 0.333333333;
  *(float *)&double v7 = v7;
  float v8 = v4 + *(float *)&v7;
  float32x2_t v9 = vadd_f32(v95, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0));
  int32x2_t v10 = vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vcgtz_f32(v9)), vcvt_s32_f32(v9));
  int v11 = (int)v8 - (v8 <= 0.0);
  unsigned __int8 v12 = v10.u8[4];
  float32x2_t v13 = vcvt_f32_s32(v10);
  unsigned __int8 v14 = v10.i8[0];
  double v15 = (float)(v10.i32[0] + v11 + v10.i32[1]) * 0.166666667;
  *(float *)&double v15 = v15;
  float v16 = (float)v11 - *(float *)&v15;
  float32x2_t v17 = vsub_f32(v95, vsub_f32(v13, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v15, 0)));
  float v18 = v4 - v16;
  if (v17.f32[0] >= v17.f32[1])
  {
    int v20 = 0;
    if (v17.f32[1] < v18)
    {
      BOOL v19 = v17.f32[0] >= v18;
      BOOL v22 = v17.f32[0] < v18;
      int32x2_t v21 = (int32x2_t)1;
      goto LABEL_6;
    }
    BOOL v22 = 0;
    BOOL v23 = 0;
    int32x2_t v21 = (int32x2_t)0x100000001;
    BOOL v19 = 1;
  }
  else
  {
    BOOL v19 = 0;
    if (v17.f32[1] < v18)
    {
      int v20 = 0;
      int32x2_t v21 = (int32x2_t)0x100000000;
      BOOL v22 = 1;
LABEL_6:
      BOOL v23 = 1;
      goto LABEL_9;
    }
    BOOL v22 = 0;
    BOOL v23 = v17.f32[0] < v18;
    v21.i32[1] = 1;
    v21.i32[0] = v17.f32[0] >= v18;
    int v20 = 1;
  }
LABEL_9:
  float v24 = (float)(v18 - (float)v22) + 0.166666667;
  __asm { FMOV            V4.2S, #-1.0 }
  float32x2_t v30 = vadd_f32(v17, _D4);
  _D4 = vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(vsub_f32(v17, vcvt_f32_s32((int32x2_t)__PAIR64__(v20, v19)))), (float64x2_t)vdupq_n_s64(0x3FC55555560C95D4uLL)));
  float64x2_t v32 = vaddq_f64(vcvtq_f64_f32(vsub_f32(v17, vcvt_f32_s32(v21))), (float64x2_t)vdupq_n_s64(0x3FD55555560C95D4uLL));
  float64x2_t v33 = vcvtq_f64_f32(v30);
  float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x3FE000000089705FuLL);
  float v35 = (float)((float)(0.6 - (float)(v17.f32[0] * v17.f32[0])) - (float)(v17.f32[1] * v17.f32[1])) - (float)(v18 * v18);
  float32x2_t v36 = 0;
  float v37 = 0.0;
  float v38 = 0.0;
  float v39 = 0.0;
  float v40 = 0.0;
  float v41 = 0.0;
  float v42 = 0.0;
  float32x2_t v43 = 0;
  if (v35 >= 0.0)
  {
    uint64_t v44 = (float32x2_t *)((char *)&grad3u
                        + 12
                        * (perm[perm[perm[v11] + (unint64_t)v12] + (unint64_t)v14] & 0xF));
    uint64_t v45 = (float32x2_t *)((char *)&grad3v
                        + 12
                        * (perm[perm[perm[v11] + (unint64_t)v12] + (unint64_t)v14] & 0xF));
    float32x2_t v43 = vmla_n_f32(vmul_n_f32(*v45, v6.__sinval), *v44, v6.__cosval);
    float v38 = (float)(v6.__sinval * v45[1].f32[0]) + (float)(v6.__cosval * v44[1].f32[0]);
    float v40 = v35 * v35;
    float v41 = v40 * v40;
    float v42 = (float)(v40 * v40)
        * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v17, v43).i32[1]), v17.f32[0], v43.f32[0]) + (float)(v38 * v18));
    float v39 = (float)((float)(0.6 - (float)(v17.f32[0] * v17.f32[0])) - (float)(v17.f32[1] * v17.f32[1]))
        - (float)(v18 * v18);
  }
  float v94 = v39;
  float v96 = v42;
  float64x2_t v46 = vaddq_f64(v33, v34);
  float v47 = (float)(v18 - (float)v23) + 0.333333334;
  _D20 = vcvt_f32_f64(v32);
  __asm { FMLS            S6, S4, V4.S[0] }
  _S22 = _D4.i32[1];
  __asm { FMLS            S6, S22, V4.S[1] }
  float v52 = _S6 - (float)(v24 * v24);
  float v53 = 0.0;
  float v54 = 0.0;
  float v55 = 0.0;
  float v56 = 0.0;
  if (v52 >= 0.0)
  {
    uint64_t v57 = 3
        * (perm[v19
              + v14
              + (unint64_t)perm[v20
                                     + v12
                                     + (unint64_t)perm[v22 + (unint64_t)v11]]] & 0xF);
    uint64_t v58 = (float32x2_t *)((char *)&grad3u + 4 * v57);
    unint64_t v59 = (float32x2_t *)((char *)&grad3v + 4 * v57);
    float32x2_t v36 = vmla_n_f32(vmul_n_f32(*v59, v6.__sinval), *v58, v6.__cosval);
    float v37 = (float)(v6.__sinval * v59[1].f32[0]) + (float)(v6.__cosval * v58[1].f32[0]);
    float v54 = v52 * v52;
    float v55 = v54 * v54;
    float v56 = (float)(v54 * v54)
        * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v36, _D4).i32[1]), _D4.f32[0], v36.f32[0]) + (float)(v37 * v24));
    float v53 = _S6 - (float)(v24 * v24);
  }
  _D28 = vcvt_f32_f64(v46);
  float v61 = (float)(v18 + -1.0) + 0.500000001;
  __asm { FMLS            S6, S20, V20.S[0] }
  _S22 = _D20.i32[1];
  __asm { FMLS            S6, S22, V20.S[1] }
  float v65 = _S6 - (float)(v47 * v47);
  float32x2_t v66 = 0;
  float v67 = 0.0;
  float v68 = 0.0;
  float v69 = 0.0;
  float v70 = 0.0;
  float v71 = 0.0;
  float v72 = 0.0;
  float32x2_t v73 = 0;
  if (v65 >= 0.0)
  {
    uint64_t v74 = 3
        * (perm[v21.i32[0]
              + v14
              + (unint64_t)perm[v21.i32[1]
                                     + v12
                                     + (unint64_t)perm[v23 + (unint64_t)v11]]] & 0xF);
    uint64_t v75 = (float32x2_t *)((char *)&grad3u + 4 * v74);
    char v76 = (float32x2_t *)((char *)&grad3v + 4 * v74);
    float32x2_t v73 = vmla_n_f32(vmul_n_f32(*v76, v6.__sinval), *v75, v6.__cosval);
    float v68 = (float)(v6.__sinval * v76[1].f32[0]) + (float)(v6.__cosval * v75[1].f32[0]);
    float v70 = v65 * v65;
    float v71 = v70 * v70;
    float v72 = (float)(v70 * v70)
        * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v73, _D20).i32[1]), _D20.f32[0], v73.f32[0]) + (float)(v68 * v47));
    float v69 = _S6 - (float)(v47 * v47);
  }
  __asm { FMLS            S26, S28, V28.S[0] }
  _S6 = _D28.i32[1];
  __asm { FMLS            S26, S6, V28.S[1] }
  float v80 = _S26 - (float)(v61 * v61);
  float v81 = 0.0;
  float v82 = 0.0;
  float v83 = 0.0;
  if (v80 >= 0.0)
  {
    uint64_t v84 = 3
        * (perm[v14
              + 1
              + (unint64_t)perm[v12 + 1 + (unint64_t)perm[v11 + 1]]] & 0xF);
    uint64_t v85 = (float32x2_t *)((char *)&grad3u
                        + 12
                        * (perm[v14
                              + 1
                              + (unint64_t)perm[v12
                                                     + 1
                                                     + (unint64_t)perm[v11 + 1]]] & 0xF));
    unint64_t v86 = (float32x2_t *)((char *)&grad3v + 4 * v84);
    float32x2_t v66 = vmla_n_f32(vmul_n_f32(*v86, v6.__sinval), *v85, v6.__cosval);
    float v67 = (float)(v6.__sinval * v86[1].f32[0]) + (float)(v6.__cosval * v85[1].f32[0]);
    float v81 = (float)(v80 * v80) * (float)(v80 * v80);
    float v82 = v81
        * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v66, _D28).i32[1]), _D28.f32[0], v66.f32[0]) + (float)(v67 * v61));
    float v83 = v80 * (float)(v80 * v80);
  }
  if (a1)
  {
    float v87 = (float)((float)((float)(v37 * v55) + (float)(v41 * v38)) + (float)(v71 * v68)) + (float)(v81 * v67);
    *(float *)&long long v5 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v66, _D28).i32[1]), _D28.f32[0], v66.f32[0])
                          + (float)(v67 * v61))
                  * v83;
    float v88 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v73, _D20).i32[1]), _D20.f32[0], v73.f32[0]) + (float)(v68 * v47))
        * (float)(v69 * v70);
    float v89 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v36, _D4).i32[1]), _D4.f32[0], v36.f32[0]) + (float)(v37 * v24))
        * (float)(v53 * v54);
    float v90 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v17, v43).i32[1]), v17.f32[0], v43.f32[0]) + (float)(v38 * v18))
        * (float)(v94 * v40);
    float v91 = (float)((float)((float)(v18 * v90) + (float)(v89 * v24)) + (float)(v88 * v47)) + (float)(*(float *)&v5 * v61);
    *(float32x2_t *)&long long v5 = vadd_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v36, v55), v43, v41), v73, v71), v66, v81), vmul_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v17, v90), _D4, v89), _D20, v88), _D28, *(float *)&v5), (float32x2_t)0xC1000000C1000000));
    __asm { FMOV            V2.2S, #28.0 }
    *(float32x2_t *)&long long v5 = vmul_f32(*(float32x2_t *)&v5, _D2);
    *((float *)&v5 + 2) = (float)(v87 + (float)(v91 * -8.0)) * 28.0;
    *a1 = v5;
  }
  return (float)((float)((float)(v96 + v56) + v72) + v82) * 28.0;
}

void *REMeshOffsetsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REMeshOffsetsComponentGetAssignedMeshDeformation(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REMeshOffsetsComponentSetAssignedMeshDeformationEx(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

void REMeshOffsetsComponentSetOffsetsCounts(re::ecs2::Component *this, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 6);
  BOOL v7 = v6 != a2;
  if (v6 != a2) {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize((void *)this + 4, a2);
  }
  if (a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      if (*((void *)this + 6) <= v9)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = *((void *)this + 8) + v8;
      unint64_t v11 = *(unsigned int *)(a3 + 4 * v9);
      if (*(void *)(v10 + 16) != v11)
      {
        re::DynamicArray<float>::resize(v10, v11);
        BOOL v7 = 1;
      }
      ++v9;
      v8 += 192;
    }
    while (a2 != v9);
  }
  if (v7)
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
  }
}

uint64_t REMeshOffsetsComponentGetOffsetsMeshCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t REMeshOffsetsComponentGetOffsetsCountEx(re *a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 6) > a2) {
    return *(void *)(*((void *)a1 + 8) + 192 * a2 + 16);
  }
  long long v5 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v5;
    if (v10) {
      BOOL v7 = *(unsigned char **)&v11[7];
    }
    else {
      BOOL v7 = v11;
    }
    uint64_t v8 = *((void *)a1 + 6);
    *(_DWORD *)long long buf = 136315650;
    float32x2_t v13 = v7;
    __int16 v14 = 2048;
    unint64_t v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_233120000, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "[%s] Trying to set offsets count for mesh %zu, but only %zu offset meshes are present.", buf, 0x20u);

    if (v9)
    {
      if (v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  return 0;
}

uint64_t REMeshOffsetsComponentSetOffsetsEx(re *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 6) <= a2)
  {
    uint64_t v9 = *re::graphicsLogObjects(a1);
    uint64_t result = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (result)
    {
      char v10 = v9;
      unint64_t v11 = (v14 & 1) != 0 ? *(unsigned char **)&v15[7] : v15;
      uint64_t v12 = *((void *)a1 + 6);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v17 = 2048;
      uint64_t v18 = v12;
      _os_log_impl(&dword_233120000, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, "[%s] Trying to set offsets for mesh %zu, but only %zu offset meshes are present. Adjust the offset counts first.", buf, 0x20u);

      uint64_t result = v13;
      if (v13)
      {
        if (v14) {
          return (*(uint64_t (**)(void))(*(void *)v13 + 40))();
        }
      }
    }
  }
  else
  {
    uint64_t v6 = (_anonymous_namespace_ *)(*((void *)a1 + 8) + 192 * a2);
    unint64_t v7 = *((void *)v6 + 2);
    if (v7 >= a4) {
      unint64_t v7 = a4;
    }
    *(void *)long long buf = a3;
    *(void *)&uint8_t buf[8] = v7;
    re::DynamicArray<float>::operator=(v6, (uint64_t)buf);
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t REMeshOffsetsComponentSetPreTransform(re *this, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)this + 6) <= a2)
  {
    char v10 = *re::graphicsLogObjects(this);
    uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (result)
    {
      unint64_t v11 = v10;
      uint64_t v12 = (v15 & 1) != 0 ? *(unsigned char **)&v16[7] : v16;
      uint64_t v13 = *((void *)this + 6);
      *(_DWORD *)long long buf = 136315650;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      __int16 v21 = 2048;
      uint64_t v22 = v13;
      _os_log_impl(&dword_233120000, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "[%s] Trying to set pre-transform for mesh %zu, but only %zu offset meshes are present. Adjust the offset counts first.", buf, 0x20u);

      uint64_t result = v14;
      if (v14)
      {
        if (v15) {
          return (*(uint64_t (**)(void))(*(void *)v14 + 40))();
        }
      }
    }
  }
  else
  {
    uint64_t v8 = (__n128 *)(*((void *)this + 8) + 192 * a2);
    uint64_t v8[3] = a3;
    void v8[4] = a4;
    void v8[5] = a5;
    v8[6] = a6;
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
  }
  return result;
}

double REMeshOffsetsComponentGetPreTransform(re *a1, unint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 6) <= a2)
  {
    long long v5 = *re::graphicsLogObjects(a1);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    *(void *)&long long v4 = 0;
    if (v6)
    {
      unint64_t v7 = v5;
      if (v12) {
        uint64_t v8 = *(unsigned char **)&v13[7];
      }
      else {
        uint64_t v8 = v13;
      }
      uint64_t v9 = *((void *)a1 + 6);
      *(_DWORD *)long long buf = 136315650;
      char v15 = v8;
      __int16 v16 = 2048;
      unint64_t v17 = a2;
      __int16 v18 = 2048;
      uint64_t v19 = v9;
      _os_log_impl(&dword_233120000, (os_log_t)v7, OS_LOG_TYPE_DEFAULT, "[%s] Trying to get post-transform for mesh %zu, but only %zu offset meshes are present.", buf, 0x20u);

      if (v11 && (v12 & 1) != 0) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      *(void *)&long long v4 = 0;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(*((void *)a1 + 8) + 192 * a2 + 48);
  }
  return *(double *)&v4;
}

uint64_t REMeshOffsetsComponentSetPostTransform(re *this, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)this + 6) <= a2)
  {
    char v10 = *re::graphicsLogObjects(this);
    uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (result)
    {
      uint64_t v11 = v10;
      char v12 = (v15 & 1) != 0 ? *(unsigned char **)&v16[7] : v16;
      uint64_t v13 = *((void *)this + 6);
      *(_DWORD *)long long buf = 136315650;
      __int16 v18 = v12;
      __int16 v19 = 2048;
      unint64_t v20 = a2;
      __int16 v21 = 2048;
      uint64_t v22 = v13;
      _os_log_impl(&dword_233120000, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "[%s] Trying to set pre-transform for mesh %zu, but only %zu offset meshes are present. Adjust the offset counts first.", buf, 0x20u);

      uint64_t result = v14;
      if (v14)
      {
        if (v15) {
          return (*(uint64_t (**)(void))(*(void *)v14 + 40))();
        }
      }
    }
  }
  else
  {
    uint64_t v8 = (__n128 *)(*((void *)this + 8) + 192 * a2);
    v8[7] = a3;
    uint8_t v8[8] = a4;
    v8[9] = a5;
    v8[10] = a6;
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
  }
  return result;
}

double REMeshOffsetsComponentGetPostTransform(re *a1, unint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 6) <= a2)
  {
    long long v5 = *re::graphicsLogObjects(a1);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    *(void *)&long long v4 = 0;
    if (v6)
    {
      unint64_t v7 = v5;
      if (v12) {
        uint64_t v8 = *(unsigned char **)&v13[7];
      }
      else {
        uint64_t v8 = v13;
      }
      uint64_t v9 = *((void *)a1 + 6);
      *(_DWORD *)long long buf = 136315650;
      char v15 = v8;
      __int16 v16 = 2048;
      unint64_t v17 = a2;
      __int16 v18 = 2048;
      uint64_t v19 = v9;
      _os_log_impl(&dword_233120000, (os_log_t)v7, OS_LOG_TYPE_DEFAULT, "[%s] Trying to get post-transform for mesh %zu, but only %zu offset meshes are present.", buf, 0x20u);

      if (v11 && (v12 & 1) != 0) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
      *(void *)&long long v4 = 0;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(*((void *)a1 + 8) + 192 * a2 + 112);
  }
  return *(double *)&v4;
}

uint64_t REMeshOffsetsComponentSetBlendingModeEx(uint64_t this, unint64_t a2, int a3)
{
  uint64_t v4 = this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(this + 48) <= a2)
  {
    uint64_t v8 = *re::graphicsLogObjects((re *)this);
    this = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (this)
    {
      uint64_t v9 = v8;
      char v10 = (v13 & 1) != 0 ? *(unsigned char **)&v14[7] : v14;
      uint64_t v11 = *(void *)(v4 + 48);
      *(_DWORD *)long long buf = 136315650;
      __int16 v16 = v10;
      __int16 v17 = 2048;
      unint64_t v18 = a2;
      __int16 v19 = 2048;
      uint64_t v20 = v11;
      _os_log_impl(&dword_233120000, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "[%s] Trying to set blending mode to offsets for mesh %zu, but only %zu offset meshes are present. Adjust the offset counts first.", buf, 0x20u);

      this = v12;
      if (v12)
      {
        if (v13) {
          return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
        }
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(this + 64) + 192 * a2;
    int v7 = *(_DWORD *)(v5 + 176);
    BOOL v6 = (_DWORD *)(v5 + 176);
    if (v7 != a3)
    {
      *BOOL v6 = a3;
      return re::ecs2::Component::enqueueMarkDirty(this);
    }
  }
  return this;
}

uint64_t REMeshOffsetsComponentGetBlendingMode(re *a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 6) > a2) {
    return *(unsigned int *)(*((void *)a1 + 8) + 192 * a2 + 176);
  }
  uint64_t v5 = *re::graphicsLogObjects(a1);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    int v7 = v5;
    if (v11) {
      uint64_t v8 = *(unsigned char **)&v12[7];
    }
    else {
      uint64_t v8 = v12;
    }
    uint64_t v9 = *((void *)a1 + 6);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v14 = v8;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    _os_log_impl(&dword_233120000, (os_log_t)v7, OS_LOG_TYPE_DEFAULT, "[%s] Trying to get blending mode for mesh %zu, but only %zu offset meshes are present.", buf, 0x20u);

    if (v10)
    {
      if (v11) {
        (*(void (**)(void))(*(void *)v10 + 40))();
      }
    }
    return 0;
  }
  return result;
}

uint64_t REMeshOffsetsComponentSetAssignedMeshDeformation(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear(a1 + 32);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMeshOffsetsComponentGetOffsetsCount(void *a1, unint64_t a2)
{
  if (!re::initializeAttributes<re::ecs2::MeshOffsetsAttributes,re::ecs2::MeshOffsetsComponent>((re::ecs2::MeshOffsetsAttributes *)(a1 + 4), a1))return 0; {
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  unint64_t v4 = a1[6];
  if (!v4) {
    return 0;
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1[8] + 192 * a2 + 16);
}

uint64_t re::initializeAttributes<re::ecs2::MeshOffsetsAttributes,re::ecs2::MeshOffsetsComponent>(re::ecs2::MeshOffsetsAttributes *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 2)) {
    return 1;
  }
  uint64_t v4 = a2[10];
  if (!v4) {
    return 0;
  }
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2[2] + 176);
  if (!v6) {
    return 0;
  }
  uint64_t result = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32));
  if (result)
  {
    uint64_t v8 = (const re::MeshAsset *)result;
    uint64_t v9 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(a2 + 9));
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear((uint64_t)a1);
    if (!*(void *)(v9 + 16)) {
      return 1;
    }
    unint64_t v10 = 0;
    do
    {
      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v8 + 448, (unsigned __int8 *)(*(void *)(v9 + 32) + 40 * v10), &v15);
      if (v15)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v14 = i;
          unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v14);
          uint64_t v14 = i;
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, &v14);
          re::ecs2::MeshOffsetsAttributes::add(a1, v8, v12, WORD2(v13));
        }
      }
      re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v16);
      ++v10;
      uint64_t result = 1;
    }
    while (v10 < *(void *)(v9 + 16));
  }
  return result;
}

double REMeshOffsetsComponentSetOffsets(void *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)&double result = REMeshOffsetsComponentSetOffsetsWithTransform(a1, a2, a3, a4, *MEMORY[0x263EF89A8], *(__n128 *)(MEMORY[0x263EF89A8] + 16), *(__n128 *)(MEMORY[0x263EF89A8] + 32), *(__n128 *)(MEMORY[0x263EF89A8] + 48), *MEMORY[0x263EF89A8], *(__n128 *)(MEMORY[0x263EF89A8] + 16), *(__n128 *)(MEMORY[0x263EF89A8] + 32), *(__n128 *)(MEMORY[0x263EF89A8] + 48)).n128_u64[0];
  return result;
}

__n128 REMeshOffsetsComponentSetOffsetsWithTransform(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (re::initializeAttributes<re::ecs2::MeshOffsetsAttributes,re::ecs2::MeshOffsetsComponent>((re::ecs2::MeshOffsetsAttributes *)(a1 + 4), a1))
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v17 = a1[6];
    if (v17)
    {
      if (v17 <= a2)
      {
        memset(v28, 0, sizeof(v28));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v18 = (__n128 *)(a1[8] + 192 * a2);
      unint64_t v19 = v18[1].n128_u64[0];
      if (v19 >= a4) {
        unint64_t v19 = a4;
      }
      *(void *)&v28[0] = a3;
      *((void *)&v28[0] + 1) = v19;
      re::DynamicArray<float>::operator=((_anonymous_namespace_ *)v18, (uint64_t)v28);
      void v18[3] = a5;
      void v18[4] = a6;
      _OWORD v18[5] = a7;
      v18[6] = a8;
      v18[7] = a9;
      char v18[8] = a10;
      __n128 result = a12;
      v18[9] = a11;
      v18[10] = a12;
      v18[11].n128_u32[0] = 0;
    }
  }
  return result;
}

uint64_t REMeshOffsetsComponentSetBlendingMode(void *a1, unint64_t a2, int a3)
{
  uint64_t result = re::initializeAttributes<re::ecs2::MeshOffsetsAttributes,re::ecs2::MeshOffsetsComponent>((re::ecs2::MeshOffsetsAttributes *)(a1 + 4), a1);
  if (result)
  {
    uint64_t result = re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v7 = a1[6];
    if (v7)
    {
      if (v7 <= a2)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a1[8] + 192 * a2 + 176) = a3;
    }
  }
  return result;
}

void *REAmbientLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REAmbientLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 64) = a2;
  *(unsigned char *)(this + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REAmbientLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 64) = a3;
  *(unsigned char *)(this + 8ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REAmbientLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 72) | ((unint64_t)*(unsigned __int8 *)(a1 + 80) << 32);
  v3[0] = *(void *)(a1 + 64);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 REAmbientLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 80);
  a4.n128_u64[0] = *(void *)(a1 + 64);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 72);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float REAmbientLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REAmbientLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REDirectionalLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REDirectionalLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 336) = a2;
  *(unsigned char *)(this + 352) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDirectionalLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 336) = a3;
  *(unsigned char *)(this + 352) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REDirectionalLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 344) | ((unint64_t)*(unsigned __int8 *)(a1 + 352) << 32);
  v3[0] = *(void *)(a1 + 336);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 REDirectionalLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 352);
  a4.n128_u64[0] = *(void *)(a1 + 336);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 344);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float REDirectionalLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REDirectionalLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDirectionalLightComponentSetIsProxy(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDirectionalLightComponentGetIsProxy(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

void *RESpotLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RESpotLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 288) = a2;
  *(unsigned char *)(this + 304) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RESpotLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 288) = a3;
  *(unsigned char *)(this + 304) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double RESpotLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 296) | ((unint64_t)*(unsigned __int8 *)(a1 + 304) << 32);
  v3[0] = *(void *)(a1 + 288);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 RESpotLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 304);
  a4.n128_u64[0] = *(void *)(a1 + 288);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 296);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float RESpotLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t RESpotLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESpotLightComponentGetInnerAngle(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t RESpotLightComponentSetInnerAngle(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESpotLightComponentGetOuterAngle(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RESpotLightComponentSetOuterAngle(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESpotLightComponentGetAttenuationRadius(uint64_t a1)
{
  return *(float *)(a1 + 40);
}

uint64_t RESpotLightComponentSetAttenuationRadius(uint64_t this, float a2)
{
  *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RESpotLightComponentGetAttenuationFalloffExponent(uint64_t a1)
{
  return *(float *)(a1 + 44);
}

uint64_t RESpotLightComponentSetAttenuationFalloffExponent(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 44);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    if (a2 < 0.0) {
      a2 = 0.0;
    }
    *(float *)(this + 44) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

void *REPointLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPointLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 272) = a2;
  *(unsigned char *)(this + 288) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPointLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 272) = a3;
  *(unsigned char *)(this + 288) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REPointLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 280) | ((unint64_t)*(unsigned __int8 *)(a1 + 288) << 32);
  v3[0] = *(void *)(a1 + 272);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 REPointLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 288);
  a4.n128_u64[0] = *(void *)(a1 + 272);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 280);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float REPointLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REPointLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPointLightComponentGetAttenuationRadius(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t REPointLightComponentSetAttenuationRadius(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REPointLightComponentGetAttenuationFalloffExponent(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REPointLightComponentSetAttenuationFalloffExponent(uint64_t this, float a2)
{
  float v2 = *(float *)(this + 36);
  if (v2 != a2 && vabds_f32(v2, a2) >= (float)((float)((float)(fabsf(a2) + fabsf(v2)) + 1.0) * 0.00001))
  {
    if (a2 < 0.0) {
      a2 = 0.0;
    }
    *(float *)(this + 36) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

void *RERectAreaLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RERectAreaLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 192) = a2;
  *(unsigned char *)(this + 208) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERectAreaLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 192) = a3;
  *(unsigned char *)(this + 208) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double RERectAreaLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 200) | ((unint64_t)*(unsigned __int8 *)(a1 + 208) << 32);
  v3[0] = *(void *)(a1 + 192);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 RERectAreaLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 208);
  a4.n128_u64[0] = *(void *)(a1 + 192);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 200);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float RERectAreaLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t RERectAreaLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERectAreaLightComponentSetExtents(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double RERectAreaLightComponentGetExtents(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t RERectAreaLightComponentGetEmitsDoubleSided(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t RERectAreaLightComponentSetEmitsDoubleSided(uint64_t this, char a2)
{
  *(unsigned char *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REFrustumLightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REFrustumLightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 304) = a2;
  *(unsigned char *)(this + 32ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REFrustumLightComponentSetColorGamut3F(uint64_t this, char a2, __n128 a3)
{
  *(__n128 *)(this + 304) = a3;
  *(unsigned char *)(this + 32ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REFrustumLightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 312) | ((unint64_t)*(unsigned __int8 *)(a1 + 320) << 32);
  v3[0] = *(void *)(a1 + 304);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

__n128 REFrustumLightComponentGetColorGamut3F(uint64_t a1, __n128 *a2, unsigned char *a3, __n128 a4)
{
  char v4 = *(unsigned char *)(a1 + 320);
  a4.n128_u64[0] = *(void *)(a1 + 304);
  a4.n128_u32[2] = *(_DWORD *)(a1 + 312);
  *a2 = a4;
  *a3 = v4;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

float REFrustumLightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REFrustumLightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REFrustumLightComponentGetInnerAngle(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t REFrustumLightComponentSetInnerAngle(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REFrustumLightComponentGetOuterAngle(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t REFrustumLightComponentSetOuterAngle(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REFrustumLightComponentGetAttenuationRadius(uint64_t a1)
{
  return *(float *)(a1 + 40);
}

uint64_t REFrustumLightComponentSetAttenuationRadius(uint64_t this, float a2)
{
  *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REFrustumLightComponentSetExtents(uint64_t this, double a2)
{
  *(double *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double REFrustumLightComponentGetExtents(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

void *REFilterMapComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REFilterMapComponentGetMaterial(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void REFilterMapComponentSetMaterial(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v5);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  long long v5 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  uint64_t v6 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
}

void *REShadowMapComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

float REShadowMapComponentGetDepthBias(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REShadowMapComponentSetDepthBias(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float REShadowMapComponentGetDistance(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t REShadowMapComponentSetDistance(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REPointLightShadowMapComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float REPointLightShadowMapComponentGetDepthBias(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REPointLightShadowMapComponentSetDepthBias(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

uint64_t REPointLightShadowMapComponentGetZNear(uint64_t a1, _DWORD *a2)
{
  if (!a2 || !*(unsigned char *)(a1 + 36)) {
    return 0;
  }
  *a2 = *(_DWORD *)(a1 + 40);
  return 1;
}

uint64_t REPointLightShadowMapComponentSetZNear(uint64_t this, float *a2)
{
  if (a2)
  {
    float v2 = *a2;
    if (!*(unsigned char *)(this + 36))
    {
      *(unsigned char *)(this + 36) = 1;
LABEL_10:
      *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = v2;
      return re::ecs2::Component::enqueueMarkDirty(this);
    }
    if (*(float *)(this + 40) != v2) {
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(this + 36))
  {
    *(unsigned char *)(this + 36) = 0;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REPointLightShadowMapComponentGetZFar(uint64_t a1, _DWORD *a2)
{
  if (!a2 || !*(unsigned char *)(a1 + 44)) {
    return 0;
  }
  *a2 = *(_DWORD *)(a1 + 48);
  return 1;
}

uint64_t REPointLightShadowMapComponentSetZFar(uint64_t this, float *a2)
{
  if (a2)
  {
    float v2 = *a2;
    if (!*(unsigned char *)(this + 44))
    {
      *(unsigned char *)(this + 44) = 1;
LABEL_10:
      *(float *)(this + 48) = v2;
      return re::ecs2::Component::enqueueMarkDirty(this);
    }
    if (*(float *)(this + 48) != v2) {
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(this + 44))
  {
    *(unsigned char *)(this + 44) = 0;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REPointLightShadowMapComponentGetCullMode()
{
  return 0;
}

uint64_t REPointLightShadowMapComponentGetCullModeEx(uint64_t a1, void *a2)
{
  if (a2) {
    BOOL v3 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t result = !v3;
  if (!v3) {
    *a2 = *(unsigned __int8 *)(a1 + 33);
  }
  return result;
}

uint64_t REPointLightShadowMapComponentSetCullMode(uint64_t this, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*(unsigned char *)(this + 32)) {
      *(unsigned char *)(this + 32) = 1;
    }
    *(unsigned char *)(this + 33) = v2;
  }
  else if (*(unsigned char *)(this + 32))
  {
    *(unsigned char *)(this + 32) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REDirectionalLightShadowMapComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float REDirectionalLightShadowMapComponentGetDepthBias(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REDirectionalLightShadowMapComponentSetDepthBias(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float REDirectionalLightShadowMapComponentGetDistance(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t REDirectionalLightShadowMapComponentSetDistance(re::ecs2::Component *this, float a2)
{
  if (this) {
    *((unsigned char *)this + 52) = dyld_program_sdk_at_least() ^ 1;
  }
  *((float *)this + 8) = a2;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

float REDirectionalLightShadowMapComponentGetZNear(uint64_t a1)
{
  return *(float *)(a1 + 40);
}

uint64_t REDirectionalLightShadowMapComponentSetZNear(uint64_t this, float a2)
{
  if (*(float *)(this + 40) != a2)
  {
    *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REDirectionalLightShadowMapComponentGetZFar(uint64_t a1)
{
  return *(float *)(a1 + 44);
}

uint64_t REDirectionalLightShadowMapComponentSetZFar(uint64_t this, float a2)
{
  if (*(float *)(this + 44) != a2)
  {
    *(float *)(this + 44) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

float REDirectionalLightShadowMapComponentGetOrthographicScale(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

uint64_t REDirectionalLightShadowMapComponentSetOrthographicScale(uint64_t this, float a2)
{
  *(float *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDirectionalLightShadowMapComponentGetAutomaticallyAdjustsShadowProjection(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 38);
}

uint64_t REDirectionalLightShadowMapComponentSetAutomaticallyAdjustsShadowProjection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 38) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REDirectionalLightShadowMapComponentGetCullMode()
{
  return 0;
}

uint64_t REDirectionalLightShadowMapComponentGetCullModeEx(uint64_t a1, void *a2)
{
  if (a2) {
    BOOL v3 = *(unsigned char *)(a1 + 36) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t result = !v3;
  if (!v3) {
    *a2 = *(unsigned __int8 *)(a1 + 37);
  }
  return result;
}

uint64_t REDirectionalLightShadowMapComponentSetCullMode(uint64_t this, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*(unsigned char *)(this + 36)) {
      *(unsigned char *)(this + 36) = 1;
    }
    *(unsigned char *)(this + 37) = v2;
  }
  else if (*(unsigned char *)(this + 36))
  {
    *(unsigned char *)(this + 36) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *RESpotLightShadowMapComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

float RESpotLightShadowMapComponentGetDepthBias(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t RESpotLightShadowMapComponentGetZNear(uint64_t a1, _DWORD *a2)
{
  if (!a2 || !*(unsigned char *)(a1 + 36)) {
    return 0;
  }
  *a2 = *(_DWORD *)(a1 + 40);
  return 1;
}

uint64_t RESpotLightShadowMapComponentSetZNear(uint64_t this, float *a2)
{
  if (a2)
  {
    float v2 = *a2;
    if (!*(unsigned char *)(this + 36))
    {
      *(unsigned char *)(this + 36) = 1;
LABEL_10:
      *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = v2;
      return re::ecs2::Component::enqueueMarkDirty(this);
    }
    if (*(float *)(this + 40) != v2) {
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(this + 36))
  {
    *(unsigned char *)(this + 36) = 0;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t RESpotLightShadowMapComponentGetZFar(uint64_t a1, _DWORD *a2)
{
  if (!a2 || !*(unsigned char *)(a1 + 44)) {
    return 0;
  }
  *a2 = *(_DWORD *)(a1 + 48);
  return 1;
}

uint64_t RESpotLightShadowMapComponentSetZFar(uint64_t this, float *a2)
{
  if (a2)
  {
    float v2 = *a2;
    if (!*(unsigned char *)(this + 44))
    {
      *(unsigned char *)(this + 44) = 1;
LABEL_10:
      *(float *)(this + 48) = v2;
      return re::ecs2::Component::enqueueMarkDirty(this);
    }
    if (*(float *)(this + 48) != v2) {
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(this + 44))
  {
    *(unsigned char *)(this + 44) = 0;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t RESpotLightShadowMapComponentSetDepthBias(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

uint64_t RESpotLightShadowMapComponentGetCullMode()
{
  return 0;
}

uint64_t RESpotLightShadowMapComponentGetCullModeEx(uint64_t a1, void *a2)
{
  if (a2) {
    BOOL v3 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t result = !v3;
  if (!v3) {
    *a2 = *(unsigned __int8 *)(a1 + 33);
  }
  return result;
}

uint64_t RESpotLightShadowMapComponentSetCullMode(uint64_t this, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*(unsigned char *)(this + 32)) {
      *(unsigned char *)(this + 32) = 1;
    }
    *(unsigned char *)(this + 33) = v2;
  }
  else if (*(unsigned char *)(this + 32))
  {
    *(unsigned char *)(this + 32) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RECombinedLightComponentGetShadowedLightMaximumCount()
{
  return 8;
}

void *RELightComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

float RELightIntensityDefault()
{
  return 26964.0;
}

uint64_t RELightComponentSetColor(uint64_t this, __n128 a2)
{
  *(__n128 *)(this + 848) = a2;
  *(unsigned char *)(this + 864) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double RELightComponentGetColor(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 856) | ((unint64_t)*(unsigned __int8 *)(a1 + 864) << 32);
  v3[0] = *(void *)(a1 + 848);
  v3[1] = v1;
  return COERCE_DOUBLE(re::ColorGamut3F::as(v3, 0, 1));
}

uint64_t RELightComponentSetLightType(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RELightComponentGetLightType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t RELightComponentSetIntensity(uint64_t this, float a2)
{
  *(float *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RELightComponentGetIntensity(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RELightComponentSetAngle(uint64_t this, float a2)
{
  *(float *)(this + 36) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RELightComponentGetAngle(uint64_t a1)
{
  return *(float *)(a1 + 36);
}

uint64_t RELightComponentSetRadius(uint64_t this, float a2)
{
  *(float *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RELightComponentGetRadius(uint64_t a1)
{
  return *(float *)(a1 + 40);
}

uint64_t RELightComponentSetRectangleArea(uint64_t this, double a2)
{
  *(double *)(this + 48) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

double RELightComponentGetRectangleArea(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

uint64_t RELightComponentSetRectangleDoubleSided(uint64_t this, char a2)
{
  *(unsigned char *)(this + + 56) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RELightComponentGetRectangleDoubleSided(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t RELightComponentSetShadowBias(uint64_t this, float a2)
{
  *(float *)(this + 6ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float RELightComponentGetShadowBias(uint64_t a1)
{
  return *(float *)(a1 + 60);
}

re::ecs2::Entity *REMakeEntityWithDirectionalLight(__n128 a1, __n128 a2, __n128 a3)
{
  v8[0] = a1;
  v8[1] = a2;
  __n128 v6 = a3;
  re::ecs2::LightComponentHelper::makeEntityWithDirectionalLight((re::ecs2::EntityFactory *)v8, (uint64_t)&v6, 0, &v7, 0.01, 100.0);
  BOOL v3 = v7;
  uint64_t v4 = (char *)v7 + 8;
  if (v7) {

  }
  return v3;
}

void *REEntityFunctionConstantComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void REEntityFunctionConstantComponentClear(uint64_t a1)
{
}

uint64_t REEntityFunctionConstantComponentAddOrReplace(uint64_t a1, char *__s, int a3)
{
  uint64_t v16[2] = *MEMORY[0x263EF8340];
  int v15 = a3;
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v16);
    unint64_t v7 = (v16[1] + (v16[0] << 6) + (v16[0] >> 2) - 0x61C8864680B583E9) ^ v16[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t result = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  v16[0] = v7;
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  if (!v9)
  {
    LODWORD(v12) = 0;
    goto LABEL_11;
  }
  unint64_t v12 = v11 % *(unsigned int *)(a1 + 56);
  uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 40) + 4 * v12);
  if (v13 == 0x7FFFFFFF)
  {
LABEL_11:
    uint64_t result = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v12, v11, v16, &v15);
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  while (*(void *)(v14 + 32 * v13 + 16) != v7)
  {
    uint64_t v13 = *(_DWORD *)(v14 + 32 * v13 + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  *(_DWORD *)(v14 + 32 * v13 + 24) = a3;
LABEL_12:
  ++*(_DWORD *)(a1 + 72);
  return result;
}

uint64_t REEntityFunctionConstantComponentRemove(uint64_t a1, char *__s)
{
  float32x4_t v7[2] = *MEMORY[0x263EF8340];
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v7);
    unint64_t v5 = (v7[1] + (v7[0] << 6) + ((unint64_t)v7[0] >> 2) - 0x61C8864680B583E9) ^ v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v7[0] = v5;
  return re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 32, v7);
}

uint64_t REEntityFunctionConstantComponentTryGet(uint64_t a1, char *__s)
{
  _OWORD v8[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 32;
  size_t v4 = strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, v4, 0, (unint64_t *)v8);
    unint64_t v5 = (v8[1] + (v8[0] << 6) + ((unint64_t)v8[0] >> 2) - 0x61C8864680B583E9) ^ v8[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  v8[0] = v5;
  size_t v6 = (unsigned int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v3, v8);
  if (v6) {
    return *v6;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL REEntityFunctionConstantComponentCanGet(uint64_t a1, char *__s, _DWORD *a3)
{
  void v10[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 32;
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, (unint64_t *)v10);
    unint64_t v7 = (v10[1] + (v10[0] << 6) + ((unint64_t)v10[0] >> 2) - 0x61C8864680B583E9) ^ v10[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  v10[0] = v7;
  uint64_t v8 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v5, v10);
  if (v8) {
    *a3 = *v8;
  }
  return v8 != 0;
}

uint64_t REAssetTypeBuilderCreate(re *a1)
{
  unint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 104, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E734AA8;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)(v2 + 24), 0);
  *(void *)(v2 + 24) = &unk_26E6C9468;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  re::DynamicString::setCapacity((void *)(v2 + 48), 0);
  *(void *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  return v2;
}

re::DynamicString *REAssetTypeBuilderSetName(uint64_t a1, const char *a2)
{
  if (result)
  {
    size_t v4 = (re::DynamicString *)((char *)result + 48);
    v5[0] = a2;
    v5[1] = strlen(a2);
    return re::DynamicString::operator=(v4, (uint64_t)v5);
  }
  return result;
}

uint64_t anonymous namespace'::castAssetTypeBuilder(uint64_t result)
{
  if (*(void *)(result + 96))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v1 = (id)CoreRELog::log;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_error_impl(&dword_233120000, v1, OS_LOG_TYPE_ERROR, "This REAssetTypeBuilder has already completed registering an asset type. It should be released.", v2, 2u);
    }

    return 0;
  }
  return result;
}

void REAssetTypeBuilderSetDataDecoderCallback(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v3) {
    re::CustomAssetRegistrationParameters::setAssetDecoder(v3 + 24, v4);
  }
}

void REAssetTypeBuilderSetDataEncoderCallback(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v3) {
    re::CustomAssetRegistrationParameters::setAssetEncoder(v3 + 24, v4);
  }
}

id REAssetTypeBuilderFinalize(uint64_t a1, re::AssetManager *a2, CFErrorRef *a3)
{
  if (v5)
  {
    uint64_t v6 = v5;
    re::AssetManager::registerCustomAssetType(a2, (const re::CustomAssetRegistrationParameters *)(v5 + 24), (uint64_t)v9);
    if (v9[0])
    {
      id result = v10;
      *(void *)(v6 + 96) = v10;
      return result;
    }
    if (!a3 || (*a3 = (CFErrorRef)v10, CFRetain(a3), !v9[0])) {
  }
    }
  else if (a3)
  {
    CFErrorRef v8 = CFErrorCreate(0, @"REAssetTypeRegistrationErrorDomain", 5, 0);
    id result = 0;
    *a3 = v8;
    return result;
  }
  return 0;
}

void anonymous namespace'::AssetTypeBuilder::~AssetTypeBuilder(_anonymous_namespace_::AssetTypeBuilder *this)
{
  *(void *)this = &unk_26E734AA8;
  re::CustomAssetRegistrationParameters::~CustomAssetRegistrationParameters((_anonymous_namespace_::AssetTypeBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E734AA8;
  re::CustomAssetRegistrationParameters::~CustomAssetRegistrationParameters((_anonymous_namespace_::AssetTypeBuilder *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *RERemoteEffectsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RERemoteEffectsComponentGetEffects()
{
  return 0;
}

uint64_t RERemoteEffectsComponentGetEffectsNullable()
{
  return 0;
}

void *RERemoteEffectsComponentSetIsPlanar(void *this, char a2)
{
  *((unsigned char *)this + 45) = a2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentIsPlanar(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 45);
}

void *RERemoteEffectsComponentSetIsHierarchical(void *this, char a2)
{
  *((unsigned char *)this + 48) = a2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentIsHierarchical(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void *RERemoteEffectsComponentSetEnableEntityHoverEffect(void *this, char a2)
{
  *((unsigned char *)this + 46) = a2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentGetEnableEntityHoverEffect(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 46);
}

void *RERemoteEffectsComponentSetColorTint(void *this, char a2, __n128 a3)
{
  *(void *)((char *)this + 52) = a3.n128_u64[0];
  *((_DWORD *)this + 15) = a3.n128_u32[2];
  *((unsigned char *)this + 64) = a2;
  return re::ecs2::Component::markDirty(this);
}

float RERemoteEffectsComponentGetColorTint(uint64_t a1, __n128 *a2, unsigned char *a3, double a4, __n128 a5)
{
  uint64_t v5 = *(void *)(a1 + 60);
  float result = *(float *)&v5;
  a5.n128_u64[0] = *(void *)(a1 + 52);
  a5.n128_u32[2] = v5;
  *a2 = a5;
  *a3 = BYTE4(v5);
  return result;
}

void *RERemoteEffectsComponentSetStyle(void *this, int a2)
{
  int v2 = 2 * (a2 == 2);
  if (a2 == 1) {
    int v2 = 1;
  }
  *((_DWORD *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = v2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentGetStyle(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1 == 1) {
    return 1;
  }
  else {
    return 2 * (v1 == 2);
  }
}

void *RERemoteEffectsComponentSetIntensityMultiplier(void *this, float a2)
{
  *((float *)this + 17) = a2;
  return re::ecs2::Component::markDirty(this);
}

float RERemoteEffectsComponentGetIntensityMultiplier(uint64_t a1)
{
  return *(float *)(a1 + 68);
}

void *RERemoteEffectsComponentSetGlowAppearDurationOverride(void *this, double a2)
{
  *((double *)this + 9) = a2;
  *((unsigned char *)this + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
  return re::ecs2::Component::markDirty(this);
}

void *RERemoteEffectsComponentResetGlowAppearDurationOverride(void *this)
{
  this[9] = 0;
  *((unsigned char *)this + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return re::ecs2::Component::markDirty(this);
}

double RERemoteEffectsComponentGetGlowAppearDurationOverride(uint64_t a1)
{
  double result = *(double *)(a1 + 72);
  if (!*(unsigned char *)(a1 + 80)) {
    return 0.2;
  }
  return result;
}

void *RERemoteEffectsComponentSetGlowDisappearDurationOverride(void *this, double a2)
{
  *((double *)this + 11) = a2;
  *((unsigned char *)this + 96) = 1;
  return re::ecs2::Component::markDirty(this);
}

void *RERemoteEffectsComponentResetGlowDisappearDurationOverride(void *this)
{
  this[11] = 0;
  *((unsigned char *)this + 96) = 0;
  return re::ecs2::Component::markDirty(this);
}

double RERemoteEffectsComponentGetGlowDisappearDurationOverride(uint64_t a1)
{
  double result = *(double *)(a1 + 88);
  if (!*(unsigned char *)(a1 + 96)) {
    return 0.1;
  }
  return result;
}

void *RERemoteEffectsComponentSetEnableAutoFade(void *this, char a2)
{
  *((unsigned char *)this + 47) = a2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentGetEnableAutoFade(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 47);
}

void *RERemoteEffectsComponentSetOpacityFunction(void *this, int a2)
{
  char v2 = a2 == 1;
  if (a2 == 2) {
    char v2 = 2;
  }
  *((unsigned char *)this + 44) = v2;
  return re::ecs2::Component::markDirty(this);
}

uint64_t RERemoteEffectsComponentGetOpacityFunction(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 44);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

void *RERemoteEffectsComponentSetVersion(void *this, int a2)
{
  *((_DWORD *)this + 26) = a2 != 0;
  return re::ecs2::Component::markDirty(this);
}

BOOL RERemoteEffectsComponentGetVersion(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) != 0;
}

uint64_t _RECustomComponentTypeCreate(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 72))
  {
    id v4 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)a1);
    uint64_t v5 = *(const char **)(a1 + 8);
    *(void *)&buf.char var0 = 0;
    buf.var1 = "";
    uint64_t v6 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v4, (const re::StringID *)&buf);
    re::StringID::destroyString((re::StringID *)&buf);
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = RESyncSyncableTypeInfoCreate();
      uint64_t v9 = v8;
      if (*(int *)a1 >= 2 && (uint64_t v10 = *(void *)(a1 + 80)) != 0)
      {
        if (!*(void *)(v10 + 24) && *(unsigned char *)(v10 + 40))
        {
          unint64_t v11 = *re::ecsCoreLogObjects((re *)v8);
          uint64_t v8 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          if (v8)
          {
            *(_WORD *)&buf.char var0 = 0;
            _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "writeNetworkSnapshot cannot be null", (uint8_t *)&buf, 2u);
          }
          uint64_t v10 = *(void *)(a1 + 80);
        }
        unint64_t v12 = *(uint64_t (**)())(v10 + 32);
        if (!v12)
        {
          if (*(unsigned char *)(v10 + 40))
          {
            uint64_t v13 = *re::ecsCoreLogObjects((re *)v8);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)&buf.char var0 = 0;
              _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "readNetworkSnapshot cannot be null", (uint8_t *)&buf, 2u);
            }
            uint64_t v10 = *(void *)(a1 + 80);
          }
        }
        uint64_t v14 = *(void *)(v10 + 16);
        RESyncSyncableTypeInfoSetSupportsNetworkSync();
        RESyncSyncableTypeInfoSetDebugName();
        *(void *)&buf.char var0 = MEMORY[0x263EF8330];
        buf.var1 = (char *)3221225472;
        uint64_t v23 = ___ZN12_GLOBAL__N_131GenerateCustomComponentSyncInfoEPK25RECustomComponentTypeInfoP22RESyncSyncableTypeInfo_block_invoke;
        float v24 = &__block_descriptor_48_e56_B32__0__RESyncBitReader__8_v16r__RESyncObjectContext__24l;
        uint64_t v25 = v12;
        uint64_t v26 = v14;
        RESyncSyncableTypeInfoSetReadSnapshotCb();
        RESyncSyncableTypeInfoSetWriteSnapshotCb();
        RESyncSyncableTypeInfoSetReadPayloadCb();
        uint64_t v8 = RESyncSyncableTypeInfoSetWritePayloadCb();
        uint64_t v16 = v9;
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v17 = re::globalAllocators((re *)v8);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 176, 8);
      uint64_t v18 = *(const char **)(a1 + 8);
      *(void *)&buf.char var0 = 0;
      buf.var1 = "";
      re::ecs2::CustomComponentType::CustomComponentType(v6, &buf, v7, v16, a2);
      re::StringID::destroyString((re::StringID *)&buf);
      unint64_t v19 = (re::ecs2::ComponentTypeRegistry *)RESyncRelease();
      *(void *)(v6 + 112) = *(void *)(a1 + 16);
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 24);
      *(void *)(v6 + 64) = *(void *)(a1 + 40);
      *(void *)(v6 + 88) = *(void *)(a1 + 48);
      *(_OWORD *)(v6 + 72) = *(_OWORD *)(a1 + 56);
      uint64_t v20 = re::ecs2::ComponentTypeRegistry::instance(v19);
      re::ecs2::ComponentTypeRegistry::add((re::ecs2::ComponentTypeRegistry *)v20, (re::ecs2::ComponentTypeBase *)v6);
    }
  }
  else
  {
    int v15 = *re::ecsCoreLogObjects((re *)a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&buf.char var0 = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "introspection must not be null", (uint8_t *)&buf, 2u);
    }
    return 0;
  }
  return v6;
}

uint64_t RECustomComponentTypeCreate(_DWORD *a1)
{
  if ((*a1 - 1) > 1) {
    return 0;
  }
  else {
    return _RECustomComponentTypeCreate((uint64_t)a1, 0);
  }
}

uint64_t RECustomComponentTypeGetContext(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t RECustomComponentTypeGetObjectIntrospection(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

re *RECustomComponentTypeDestroy(re::ecs2::ComponentTypeRegistry *a1)
{
  char v2 = re::ecs2::ComponentTypeRegistry::instance(a1);
  double result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v2, a1);
  if (a1)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (*(void (**)(re::ecs2::ComponentTypeRegistry *))(*(void *)a1 + 16))(a1);
    uint64_t v5 = *(uint64_t (**)(uint64_t, re::ecs2::ComponentTypeRegistry *))(*(void *)v4 + 40);
    return (re *)v5(v4, a1);
  }
  return result;
}

uint64_t RECustomComponentGetType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t RECustomComponentGetObject(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RECustomComponentTypeSetEncodeCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)(result + 96) = a2;
      return result;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component type must not be null.", "cComponentType", "RECustomComponentTypeSetEncodeCallback", 220);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Encode callback must not be null.", "encode", "RECustomComponentTypeSetEncodeCallback", 221);
  double result = _os_crash();
  __break(1u);
  return result;
}

uint64_t RECustomComponentTypeSetDecodeCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)(result + 104) = a2;
      return result;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Component type must not be null.", "cComponentType", "RECustomComponentTypeSetDecodeCallback", 230);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Decode callback must not be null.", "decode", "RECustomComponentTypeSetDecodeCallback", 231);
  double result = _os_crash();
  __break(1u);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_131GenerateCustomComponentSyncInfoEPK25RECustomComponentTypeInfoP22RESyncSyncableTypeInfo_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v5 = RESyncBitReaderBytesLeft();
  unint64_t v6 = v5;
  if (v5 < 0x41)
  {
    RESyncBitReaderReadData();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, unsigned char *, unint64_t))(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v14 = a3[2];
    uint64_t v15 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
    return v13(v12, v14, a3, v15, v20, v6);
  }
  else
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v20);
    uint64_t v19 = 0;
    v17[1] = 0;
    void v17[2] = 0;
    int v18 = 0;
    v17[0] = v20;
    re::DynamicArray<BOOL>::setCapacity(v17, 0);
    ++v18;
    re::DynamicArray<BOOL>::resize((uint64_t)v17, v6);
    RESyncBitReaderReadData();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, unint64_t))(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = a3[2];
    uint64_t v10 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
    uint64_t v11 = v8(v7, v9, a3, v10, v19, v6);
    if (v17[0] && v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v20);
  }
  return v11;
}

uint64_t ___ZN12_GLOBAL__N_131GenerateCustomComponentSyncInfoEPK25RECustomComponentTypeInfoP22RESyncSyncableTypeInfo_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(a1 + 32);
  uint64_t v6 = a3[2];
  uint64_t v7 = (*(uint64_t (**)(void *))(*a3 + 40))(a3);
  return v9(v5, v6, a3, v7, a2);
}

uint64_t ___ZN12_GLOBAL__N_131GenerateCustomComponentSyncInfoEPK25RECustomComponentTypeInfoP22RESyncSyncableTypeInfo_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RESyncBitReaderAlignToByte();
  uint64_t v4 = RESyncBitReaderBytesLeft();
  uint64_t v5 = RESyncBitReaderDataPtr();
  RESyncBitReaderSkipData();
  int IsOverflow = RESyncBitReaderIsOverflow();
  if ((IsOverflow & 1) == 0) {
    MEMORY[0x237DBB060](a3, v5, v4);
  }
  return IsOverflow ^ 1u;
}

void ___ZN12_GLOBAL__N_131GenerateCustomComponentSyncInfoEPK25RECustomComponentTypeInfoP22RESyncSyncableTypeInfo_block_invoke_4()
{
  RESyncBitReaderDataPtr();
  RESyncBitReaderBytesLeft();
  JUMPOUT(0x237DBB060);
}

uint64_t anonymous namespace'::GenerateCustomComponentSyncInfo(RECustomComponentTypeInfo const*,RESyncSyncableTypeInfo *)::$_0::__invoke()
{
  return 0;
}

uint64_t anonymous namespace'::GenerateCustomComponentSyncInfo(RECustomComponentTypeInfo const*,RESyncSyncableTypeInfo *)::$_1::__invoke()
{
  return 0;
}

void *RELoadTraceComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECreateLoadTraceTypeBitFieldSignpostArg(unsigned int a1, int a2)
{
  uint64_t v2 = 256;
  if (!a2) {
    uint64_t v2 = 0;
  }
  return v2 | a1;
}

re::ecs2::NetworkComponent *REEntityAddLoadTraceComponent(uint64_t a1, int a2, char a3, char a4)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_DWORD *)(v8 + 28) = a2;
  *(unsigned char *)(v8 + 32) = a3;
  *(unsigned char *)(v8 + 33) = a4;
  return RENetworkMarkComponentDirty((const re::ecs2::Component *)v8);
}

float RECollisionGetMinimumBoxDimension()
{
  if (re::RECollisionFeatureFlags::getMinimumBoxDimension(void)::onceToken != -1) {
    dispatch_once(&re::RECollisionFeatureFlags::getMinimumBoxDimension(void)::onceToken, &__block_literal_global_10);
  }
  return *(float *)&re::RECollisionFeatureFlags::gMinimumBoxDimension;
}

uint64_t RECollisionShapeDestroy(_anonymous_namespace_ *a1)
{
  uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 24))(a1);
  if ((result - 2) < 8) {
    goto LABEL_2;
  }
  if (result == 1) {
    return result;
  }
  if (result == 12)
  {
LABEL_2:
    (**(void (***)(_anonymous_namespace_ *))a1)(a1);
    return v4();
  }
  else if ((result - 10) >= 2)
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Unexpected collision shape type.", "!\"Unreachable code\"", "RECollisionShapeDestroy", 216);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Collision shape type not yet exposed in CoreRE.", "!\"Unreachable code\"", "RECollisionShapeDestroy", 213);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t RECollisionShapeGetType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

double RECollisionShapeGetBoundingBox(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4[2] = a2;
  uint64_t v4[3] = a3;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 16))(v4);
  return *(double *)v4;
}

uint64_t REBoxShapeCreate(re *a1, __n128 a2)
{
  uint64_t v3 = re::globalAllocators(a1)[2];
  __n128 v6 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128 *))(*(void *)v2 + 32))(v2, v3, &v6);
}

double REBoxShapeGetExtent(uint64_t a1)
{
  return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1));
}

uint64_t RECapsuleShapeCreate(re *a1, float a2, float a3)
{
  uint64_t v6 = re::globalAllocators(a1)[2];
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(void *)v5 + 40);
  v8.n128_f32[0] = a2;
  v9.n128_f32[0] = a3;
  return v7(v5, v6, v8, v9);
}

uint64_t RECapsuleShapeGetHeight(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t RECapsuleShapeGetRadius(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t RECompoundShapeCreate(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  float v24 = 0;
  uint64_t v25 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = &v35;
    uint64_t v12 = v24;
    uint64_t v13 = v21;
    do
    {
      if (v12 == v10)
      {
        uint64_t v26 = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v27 = 136315906;
        uint64_t v28 = "operator[]";
        __int16 v29 = 1024;
        int v30 = 468;
        __int16 v31 = 2048;
        float64x2_t v32 = v12;
        __int16 v33 = 2048;
        float64x2_t v34 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        uint64_t v26 = 0;
        void v11[3] = 0u;
        float32x4_t v11[4] = 0u;
        uint64_t v11[2] = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v27 = 136315906;
        uint64_t v28 = "operator[]";
        __int16 v29 = 1024;
        int v30 = 468;
        __int16 v31 = 2048;
        float64x2_t v32 = v13;
        __int16 v33 = 2048;
        float64x2_t v34 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)(v25 + 8 * (void)v1ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 8 * (void)v10);
      if (v13 == v10) {
        goto LABEL_14;
      }
      uint64_t v14 = (_OWORD *)(v22 + v9);
      long long v15 = *(_OWORD *)(a3 + v9 + 16);
      _OWORD *v14 = *(_OWORD *)(a3 + v9);
      v14[1] = v15;
      uint64_t v10 = (_anonymous_namespace_ *)((char *)v10 + 1);
      v9 += 32;
    }
    while (a1 != v10);
  }
  unint64_t v17 = re::globalAllocators(v8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _anonymous_namespace_ *, uint64_t, void))(*(void *)v16 + 160))(v16, v17[2], v25, v22, a1, a4, 0);
  if (v20 && v21) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if (v23 && v24) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  return v18;
}

uint64_t RECompoundShapeGetChildCount(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

__n128 RECompoundShapeGetChildPose(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 32) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 40) + 240 * a2 + 112);
}

uint64_t RECompoundShapeGetChildShape(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 32) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 40) + 240 * a2 + 64);
}

uint64_t REConeShapeCreate(re *a1, float a2, float a3)
{
  uint64_t v6 = re::globalAllocators(a1)[2];
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(void *)v5 + 120);
  v8.n128_f32[0] = a2;
  v9.n128_f32[0] = a3;
  return v7(v5, v6, v8, v9);
}

uint64_t REConeShapeGetHeight(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t REConeShapeGetRadius(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t RECylinderShapeCreate(re *a1, float a2, float a3)
{
  uint64_t v6 = re::globalAllocators(a1)[2];
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(*(void *)v5 + 128);
  v8.n128_f32[0] = a2;
  v9.n128_f32[0] = a3;
  return v7(v5, v6, v8, v9);
}

uint64_t RECylinderShapeGetHeight(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t RECylinderShapeGetRadius(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t REConvexPolyhedronShapeCreate(re *a1, uint64_t a2)
{
  uint64_t v5 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t))(*(void *)v4 + 56))(v4, v5[2], a1, a2);
  if (!result)
  {
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Bad parameters passed for convex mesh creation.", "convexPolyhedronShape != nullptr", "REConvexPolyhedronShapeCreate", 362);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REConvexPolyhedronShapeCreateNullable(re *a1, uint64_t a2)
{
  uint64_t v5 = re::globalAllocators(a1)[2];
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t))(*(void *)v4 + 56);
  return v6(v4, v5, a1, a2);
}

unint64_t REConvexPolyhedronShapeExtractPositions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v7 = v4 + (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) * i;
      *(void *)&long long v8 = *(void *)v7;
      DWORD2(v8) = *(_DWORD *)(v7 + 8);
      *(_OWORD *)(a2 + 16 * i) = v8;
      unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
    }
  }
  return result;
}

uint64_t REConvexPolyhedronShapeGetPositionCount(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t REConvexPolyhedronShapeExtractMeshTriangleIndices(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t REEmptyShapeCreate()
{
}

uint64_t REPlaneShapeCreate(re *a1, __n128 a2, float a3)
{
  uint64_t v5 = re::globalAllocators(a1)[2];
  __n128 v8 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128 *, float))(*(void *)v4 + 104))(v4, v5, &v8, a3);
}

__n128 REPlaneShapeGetNormal(uint64_t a1)
{
  return *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
}

uint64_t REPlaneShapeGetDistanceFromOrigin(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t RESphereShapeCreate(re *a1, float a2)
{
  uint64_t v4 = re::globalAllocators(a1)[2];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v3 + 112);
  v6.n128_f32[0] = a2;
  return v5(v3, v4, v6);
}

uint64_t RESphereShapeGetRadius(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t RECollisionMeshCreate(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v13 = re::globalAllocators(a1);
  char v15 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, char))(*(void *)v12 + 152))(v12, v13[2], a1, a2, a3, a4, a5, 1, a6, a5 / 3, v15);
}

uint64_t RECollisionMeshCreateFromSIMDPositions(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = re::globalAllocators(a1);
  char v15 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(*(void *)v12 + 152))(v12, v13[2], a1, a2, 16, a3, a4, 1, a5, a6, v15);
}

uint64_t RECollisionMeshCreateWithFormatV2(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v17 = re::globalAllocators(a1);
  char v19 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(*(void *)v16 + 152))(v16, v17[2], a1, a2, a3, a4, a6, a5, a7, a8, v19);
}

uint64_t RECollisionMeshCreateWithFormat(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v14 = a6 / 3;
  uint64_t v16 = re::globalAllocators(a1);
  char v18 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, re *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, char))(*(void *)v15 + 152))(v15, v16[2], a1, a2, a3, a4, a6, a5, a7, v14, v18);
}

void RECollisionMeshDestroy(_anonymous_namespace_ *a1)
{
  if (a1)
  {
    (**(void (***)(_anonymous_namespace_ *))a1)(a1);
    v2();
  }
}

uint64_t RECollisionMeshGetMaterialIndex(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, a2);
}

uint64_t RECollisionMeshGetVertexCount(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RECollisionMeshGetIndexCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *RECollisionMeshExtractIndices(void *result, char *__dst)
{
  int v2 = *((unsigned __int8 *)result + 58);
  if (v2 == 2)
  {
    uint64_t v7 = result[5];
    if (v7)
    {
      __n128 v8 = (const void *)result[2];
      return memmove(__dst, v8, 4 * v7);
    }
  }
  else if (v2 == 1)
  {
    uint64_t v3 = result[5];
    if (v3)
    {
      uint64_t v4 = (unsigned __int16 *)result[2];
      uint64_t v5 = 2 * v3;
      do
      {
        int v6 = *v4++;
        *(_DWORD *)long long __dst = v6;
        __dst += 4;
        v5 -= 2;
      }
      while (v5);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)__dst, "assertion failure: '%s' (%s:line %i) unknown index format", "!\"Unreachable code\"", "RECollisionMeshExtractIndices", 571);
    unint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

__n128 RECollisionMeshExtractVertexPositions(void *a1, uint64_t a2, __n128 a3)
{
  if (a1[3])
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v5 = v4 + a1[4] * v3;
      a3.n128_u64[0] = *(void *)v5;
      a3.n128_u32[2] = *(_DWORD *)(v5 + 8);
      *(__n128 *)(a2 + 16 * v3++) = a3;
    }
    while (v3 < a1[3]);
  }
  result.n128_u64[0] = a3.n128_u64[0];
  result.n128_u32[2] = a3.n128_u32[2];
  return result;
}

uint64_t RECollisionMeshShapeCreate(re *a1)
{
  uint64_t v3 = re::globalAllocators(a1)[2];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, re *))(*(void *)v2 + 144);
  return v4(v2, v3, a1);
}

uint64_t RECollisionMeshShapeGetMesh(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RECollisionObjectCreate(re *a1)
{
  uint64_t v3 = re::globalAllocators(a1)[2];
  memset(v5, 0, 24);
  uint64_t v5[3] = 0x3F80000000000000;
  return (*(uint64_t (**)(uint64_t, uint64_t, re *, void *, void, void))(*(void *)v2 + 168))(v2, v3, a1, v5, 0, 0);
}

uint64_t RECollisionObjectCreateWithOptions(re *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 4);
    uint64_t v5 = re::globalAllocators(a1)[2];
    memset(v7, 0, 24);
    uint64_t v7[3] = 0x3F80000000000000;
    return (*(uint64_t (**)(uint64_t, uint64_t, re *, void *, uint64_t, void))(*(void *)v4 + 168))(v4, v5, a1, v7, v3, 0);
  }
  else
  {
    return RECollisionObjectCreate(a1);
  }
}

re *RECollisionObjectDestroy(void (***a1)(void))
{
  return re::internal::destroyPersistent<re::CollisionObject>((re *)"RECollisionObjectDestroy", 630, a1);
}

double RECollisionObjectGetPose(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 40))(&v2);
  return *(double *)&v2;
}

void RECollisionObjectSetPose(re *a1, __n128 a2, float32x4_t a3)
{
  __n128 v13 = a2;
  float32x4_t v14 = a3;
  if ((a2.n128_u32[0] & 0x7FFFFFFF) > 0x7F7FFFFF
    || ((a2.n128_u32[1] & 0x7FFFFFFF) <= 0x7F7FFFFF ? (BOOL v3 = (a2.n128_u32[2] & 0x7FFFFFFF) <= 0x7F7FFFFF) : (BOOL v3 = 0),
        v3 ? (char v4 = 0) : (char v4 = 1),
        !v4 ? (char v5 = 0) : (char v5 = 1),
        !v5 ? (char v6 = 0) : (char v6 = 1),
        v6
     || (int8x16_t v8 = (int8x16_t)vmulq_f32(a3, a3),
         float v9 = vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))),
         v9 != 1.0)
     && fabsf(v9 + -1.0) > 0.00001))
  {
    uint64_t v7 = *re::collisionLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid input to RECollisionObjectSetPose. Skipping.", v12, 2u);
    }
  }
  else
  {
    uint64_t v10 = (_OWORD *)*((void *)a1 + 2);
    float32x4_t v11 = v14;
    v10[1] = v13;
    void v10[2] = v11;
    (*(void (**)(_OWORD *, __n128 *))(*(void *)v10 + 64))(v10, &v13);
  }
}

void RECollisionObjectSetUniformScale(re *a1, int32x2_t a2)
{
  if ((a2.i32[0] & 0x7FFFFFFFu) < 0x7F800000)
  {
    int32x4_t v3 = vdupq_lane_s32(a2, 0);
    re::CollisionObject::setScale((uint64_t)a1, (float32x4_t *)&v3);
  }
  else
  {
    long long v2 = *re::collisionLogObjects(a1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3.i16[0] = 0;
      _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "NaN or infinite input to RECollisionObjectSetUniformScale. Skipping.", (uint8_t *)&v3, 2u);
    }
  }
}

float RECollisionObjectGetUniformScale(uint64_t a1)
{
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return result;
}

void RECollisionObjectSetScale(re *a1, float32x4_t a2)
{
  if ((a2.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (a2.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (a2.i32[2] & 0x7FFFFFFFu) < 0x7F800000)
  {
    float32x4_t v6 = a2;
    re::CollisionObject::setScale((uint64_t)a1, &v6);
  }
  else
  {
    char v5 = *re::collisionLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6.i16[0] = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "NaN or infinite input to RECollisionObjectSetUniformScale. Skipping.", (uint8_t *)&v6, 2u);
    }
  }
}

double RECollisionObjectGetScale(uint64_t a1)
{
  return COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1));
}

uint64_t RECollisionObjectGetShape(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t RECollisionObjectGetType()
{
  return 0;
}

uint64_t RECollisionObjectGetInteractionType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t RECollisionObjectGetGroup(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t RECollisionObjectGetMask(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t RECollisionObjectSetGroupAndMask(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 32) != a2 || *(_DWORD *)(result + 36) != a3)
  {
    *(void *)(result + 32) = a2 | (unint64_t)(a3 << 32);
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

uint64_t RECollisionObjectGetUserData(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t RECollisionObjectSetUserData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t RECollisionObjectSquaredDistanceToPoint(uint64_t a1, uint64_t a2, _OWORD *a3, __n128 a4)
{
  __n128 v6 = a4;
  long long v7 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, long long *))(*(void *)a2 + 88))(a2, &v6, a1, &v7);
  *a3 = v7;
  return result;
}

uint64_t RECollisionObjectGetCollisionWorld(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

_anonymous_namespace_ *RECollisionWorldCreate(re *a1)
{
  long long v2 = re::globalAllocators(a1);
  int32x4_t v3 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 24))(v1, v2[2]);
  return v3;
}

void RECollisionWorldSetLockingNeeded()
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0) {
    physx::shdfnd::g_alwaysUseLocking = 1;
  }
}

re *RECollisionWorldDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    int32x4_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t RECollisionWorldAddCollisionObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  *(void *)(a2 + + 56) = v2;
  return (*(uint64_t (**)(void))(*(void *)v2 + 192))();
}

uint64_t RECollisionWorldRemoveCollisionObject(uint64_t a1, re::CollisionObject *a2)
{
  re::ContactSetCollection::remove((re::ContactSetCollection *)(*(void *)(a1 + 128) + 72), a2);
  uint64_t result = (*(uint64_t (**)(void, re::CollisionObject *))(**(void **)(a1 + 128) + 200))(*(void *)(a1 + 128), a2);
  *((void *)a2 + 7) = 0;
  return result;
}

BOOL RECollisionWorldContainsCollisionObject(uint64_t a1, uint64_t a2)
{
  return a2 && *(void *)(a2 + 56) == *(void *)(a1 + 128);
}

uint64_t RECollisionWorldGetCollisionObjectCount(_anonymous_namespace_ *a1, const re::CollisionWorld *a2)
{
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 160))(a1);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
    uint64_t v5 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v4);
    uint64_t v6 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v4);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6);
    uint64_t v8 = *(void *)(v7 + 24);
    if (!v8) {
      return 0;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void **)(v7 + 40);
    float32x4_t v11 = &v10[v8];
    do
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 32))(v5, *v10);
      if (v12)
      {
        uint64_t v13 = v12;
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, v12, 0);
        BOOL v14 = v13 == v21 && (unsigned __int16)v22 == 0xFFFFLL;
        if (!v14 || (v22 & 0xFFFF0000) != 4294901760)
        {
          do
          {
            uint64_t v16 = *(void *)(*(void *)(*(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v21)
                                                    + 8)
                                        + 56)
                            + 128);
            v9 += (*(uint64_t (**)(uint64_t))(*(void *)v16 + 176))(v16);
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v21);
          }
          while (v21 != v13 || (unsigned __int16)v22 != 0xFFFF || WORD1(v22) != 0xFFFF);
        }
      }
      ++v10;
    }
    while (v10 != v11);
    return v9;
  }
  else
  {
    char v19 = *(uint64_t (**)(void))(**((void **)a1 + 16) + 176);
    return v19();
  }
}

uint64_t anonymous namespace'::isGlobalLegacyCollisionWorld(_anonymous_namespace_ *this, const re::CollisionWorld *a2)
{
  uint64_t result = (*(uint64_t (**)(_anonymous_namespace_ *, const re::CollisionWorld *))(*(void *)this + 160))(this, a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
    if (result)
    {
      uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(result);
      if (result) {
        return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result) + 56) == (void)this;
      }
    }
  }
  return result;
}

uint64_t RECollisionWorldGetCollisionObject(_anonymous_namespace_ *a1, const re::CollisionWorld *a2)
{
  {
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 160))(a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    uint64_t v6 = re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v5);
    uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v5);
    if (result)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)result + 104))(result);
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        uint64_t v10 = *(void **)(v8 + 40);
        float32x4_t v11 = &v10[v9];
        while (1)
        {
          uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 32))(v6, *v10);
          if (v12)
          {
            uint64_t v13 = v12;
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, v12, 0);
            uint64_t v20 = v22;
            uint64_t v21 = v23;
            BOOL v14 = v13 == v22 && (unsigned __int16)v23 == 0xFFFFLL;
            if (!v14 || (v23 & 0xFFFF0000) != 4294901760) {
              break;
            }
          }
LABEL_22:
          if (++v10 == v11) {
            return 0;
          }
        }
        while (1)
        {
          uint64_t v16 = *(void *)(*(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v20)
                                      + 8)
                          + 56);
          if ((*(uint64_t (**)(void))(**(void **)(v16 + 128) + 176))(*(void *)(v16 + 128)) > (unint64_t)a2) {
            return (*(uint64_t (**)(void, const re::CollisionWorld *))(**(void **)(v16 + 128) + 184))(*(void *)(v16 + 128), a2);
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
          if (v20 == v13 && (unsigned __int16)v21 == 0xFFFF && WORD1(v21) == 0xFFFF) {
            goto LABEL_22;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    char v19 = *(uint64_t (**)(void))(**((void **)a1 + 16) + 184);
    return v19();
  }
  return result;
}

uint64_t RECollisionWorldUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t RECollisionWorldEnableContactsDetection(uint64_t a1)
{
  char v2 = 1;
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 216))(a1, &v2);
}

void RECollisionWorldInitDebugRenderer(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id v17 = _Block_copy(v12);
  uint64_t v13 = _Block_copy(v11);
  BOOL v14 = _Block_copy(v10);
  uint64_t v15 = _Block_copy(v9);
  uint64_t v16 = *(void (**)(uint64_t, id, void *, void *, void *))(*(void *)a1 + 112);

  v16(a1, v17, v13, v14, v15);
}

uint64_t RECollisionWorldDoDebugDrawing(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t RECollisionWorldDebugRenderingSetEnabled(_anonymous_namespace_ *a1, const re::CollisionWorld *a2)
{
  if (result)
  {
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 160))(a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v5) + 88);
    return v6();
  }
  return result;
}

uint64_t RECollisionWorldSetRenderingFromPhysicsTransform(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  uint64_t v6[3] = a5;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 120))(a1, v6);
}

BOOL RECollisionWorldHasContactRayVsWorld(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  uint64_t v4[2] = a2[2];
  return RECollisionWorldHasContactRayVsWorldWithFilter(a1, (uint64_t)v4, -1, -1);
}

BOOL RECollisionWorldHasContactRayVsWorldWithFilter(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  int v15 = 0;
  v12[0] = 2;
  v12[1] = a3;
  void v12[2] = a4;
  v6[0] = 0;
  v6[1] = 0;
  int v7 = 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  int v11 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, void *))(*(void *)a1 + 56))(a1, a2, v12, v6);
  uint64_t v4 = v10;
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v6);
  if (v6[0] && (v7 & 1) == 0) {
    (*(void (**)(void))(*(void *)v6[0] + 40))();
  }
  return v4 != 0;
}

BOOL RECollisionWorldHasContactRayVsObject(uint64_t a1, _OWORD *a2, void *a3)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  void v5[2] = a2[2];
  return RECollisionWorldHasContactRayVsObjectWithFilter(a1, (uint64_t)v5, -1, -1, a3);
}

BOOL RECollisionWorldHasContactRayVsObjectWithFilter(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  int v16 = 0;
  v13[0] = 2;
  v13[1] = a3;
  void v13[2] = a4;
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 1;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  int v12 = 0;
  re::CollisionObject::rayCast(a5, a2, (uint64_t)v13, (unint64_t)v7);
  uint64_t v5 = v11;
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v7);
  if (v7[0] && (v8 & 1) == 0) {
    (*(void (**)(void))(*(void *)v7[0] + 40))();
  }
  return v5 != 0;
}

uint64_t RECollisionWorldContacts(uint64_t a1)
{
  return a1 + 72;
}

uint64_t RECollisionWorldContactsObjectVsObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::tryGet(a1 + 72, v4);
}

uint64_t RECollisionWorldGetContactsRayVsWorld(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  void v5[2] = a2[2];
  return RECollisionWorldGetContactsRayVsWorldWithFilter(a1, (uint64_t)v5, -1, -1, a3);
}

uint64_t RECollisionWorldGetContactsRayVsWorldWithFilter(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  int v17 = 0;
  v14[0] = 1;
  v14[1] = a3;
  uint64_t v14[2] = a4;
  v8[0] = 0;
  v8[1] = 0;
  int v9 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  int v13 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, void *))(*(void *)a1 + 56))(a1, a2, v14, v8);
  re::CollisionWorld::DEPRECATED_copyRayHitsToContactSetCollection(a5, (uint64_t)v8, *(float *)(a2 + 32));
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v8);
  uint64_t result = v8[0];
  if (v8[0])
  {
    if ((v9 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v8[0] + 40))();
    }
  }
  return result;
}

uint64_t RECollisionWorldGetClosestContactRayVsWorld(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  void v5[2] = a2[2];
  return RECollisionWorldGetClosestContactRayVsWorldWithFilter(a1, (uint64_t)v5, -1, -1, a3);
}

uint64_t RECollisionWorldGetClosestContactRayVsWorldWithFilter(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  int v18 = 0;
  v15[0] = 0;
  v15[1] = a3;
  void v15[2] = a4;
  v9[0] = 0;
  v9[1] = 0;
  int v10 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  int v14 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, void *))(*(void *)a1 + 56))(a1, a2, v15, v9);
  *(void *)(a5 + 32) = 0;
  ++*(_DWORD *)(a5 + 40);
  if (v13)
  {
    int v7 = (float *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v9, 0);
    re::CollisionWorld::DEPRECATED_copyRayHitsToContactSet(a5, v7, *(float *)(a2 + 32));
  }
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v9);
  uint64_t result = v9[0];
  if (v9[0])
  {
    if ((v10 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v9[0] + 40))();
    }
  }
  return result;
}

uint64_t RECollisionWorldGetContactsRayVsObject(uint64_t a1, _OWORD *a2, void *a3, uint64_t a4)
{
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  void v6[2] = a2[2];
  return RECollisionWorldGetContactsRayVsObjectWithFilter(a1, (uint64_t)v6, -1, -1, a3, a4);
}

uint64_t RECollisionWorldGetContactsRayVsObjectWithFilter(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  v16[0] = 1;
  v16[1] = a3;
  uint64_t v16[2] = a4;
  v10[0] = 0;
  v10[1] = 0;
  int v11 = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  int v15 = 0;
  re::CollisionObject::rayCast(a5, a2, (uint64_t)v16, (unint64_t)v10);
  *(void *)(a6 + 32) = 0;
  ++*(_DWORD *)(a6 + 40);
  if (v14)
  {
    int v8 = (float *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v10, 0);
    re::CollisionWorld::DEPRECATED_copyRayHitsToContactSet(a6, v8, *(float *)(a2 + 32));
  }
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v10);
  uint64_t result = v10[0];
  if (v10[0])
  {
    if ((v11 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v10[0] + 40))();
    }
  }
  return result;
}

void RECollisionWorldGetContactsObjectVsWorld(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 80);
  *a2 = a1;
  a2[1] = v2;
  a2[2] = a1;
  a2[3] = 0;
}

uint64_t RECollisionWorldGetContactsObjectVsWorldAdHoc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t RECollisionWorldGetPenetrationObjectVsObjectAdHoc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t RECollisionWorldGetOverlapsObjectVsWorldAdHoc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

float32x4_t *RECollisionWorldGetContactsObjectVsEntitySimulationAdHoc(_anonymous_namespace_ *a1, const re::ecs2::Entity *a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = result;
    (*(void (**)(int32x4_t *__return_ptr))(**((void **)a2 + 2) + 40))(&v47);
    uint64_t v7 = 0;
    float v8 = *(float *)&v48;
    float v9 = v8 + v8;
    float v10 = *((float *)&v48 + 2);
    float v11 = v10 + v10;
    float v12 = v8 * (float)(v8 + v8);
    float v13 = *((float *)&v48 + 1) * (float)(*((float *)&v48 + 1) + *((float *)&v48 + 1));
    float v14 = v10 * (float)(v10 + v10);
    float v15 = v9 * *((float *)&v48 + 1);
    float v16 = v9 * *((float *)&v48 + 2);
    float v17 = (float)(*((float *)&v48 + 1) + *((float *)&v48 + 1)) * *((float *)&v48 + 2);
    float v18 = (float)(*((float *)&v48 + 1) + *((float *)&v48 + 1)) * *((float *)&v48 + 3);
    float v19 = v11 * *((float *)&v48 + 3);
    v20.i32[3] = 0;
    *(float *)v20.i32 = 1.0 - (float)(v13 + v14);
    *(float *)&v20.i32[1] = (float)(v9 * *((float *)&v48 + 1)) + v19;
    *(float *)&v20.i32[2] = (float)(v9 * *((float *)&v48 + 2)) - v18;
    float v21 = v9 * *((float *)&v48 + 3);
    *(float *)&__int32 v22 = 1.0 - (float)(v12 + v14);
    v23.i32[3] = 0;
    *(float *)v23.i32 = v15 - v19;
    v23.i32[1] = v22;
    *(float *)&v23.i32[2] = v17 + v21;
    v24.i32[3] = 0;
    *(float *)v24.i32 = v16 + v18;
    *(float *)&v24.i32[1] = v17 - v21;
    *(float *)&v24.i32[2] = 1.0 - (float)(v12 + v13);
    int32x4_t v25 = v47;
    v25.i32[3] = 1.0;
    float32x4_t v26 = v6[11];
    float32x4_t v27 = v6[12];
    float32x4_t v28 = v6[13];
    float32x4_t v29 = v6[14];
    v49[0] = v20;
    v49[1] = v23;
    void v49[2] = v24;
    void v49[3] = v25;
    do
    {
      v50[v7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&v49[v7])), v27, *(float32x2_t *)v49[v7].i8, 1), v28, (float32x4_t)v49[v7], 2), v29, (float32x4_t)v49[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    v49[0] = 0u;
    long long v51 = 0u;
    long long v52 = xmmword_23435FBB0;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v50, v49, &v52, &v51);
    v50[0] = v51;
    v50[1] = v52;
    int v30 = (_OWORD *)*((void *)a2 + 2);
    long long v31 = v52;
    v30[1] = v51;
    void v30[2] = v31;
    (*(void (**)(_OWORD *, _OWORD *))(*(void *)v30 + 64))(v30, v50);
    (*(void (**)(void, const re::ecs2::Entity *, uint64_t))(**(void **)(v6->i64[1] + 56) + 72))(*(void *)(v6->i64[1] + 56), a2, a3);
    float64x2_t v32 = (_OWORD *)*((void *)a2 + 2);
    long long v33 = v48;
    v32[1] = v47;
    v32[2] = v33;
    uint64_t result = (float32x4_t *)(*(uint64_t (**)(_OWORD *, int32x4_t *))(*(void *)v32 + 64))(v32, &v47);
    uint64_t v34 = *(unsigned int *)(a3 + 32);
    if (v34)
    {
      uint64_t v35 = 0;
      long long v36 = *(int **)(a3 + 16);
      while (1)
      {
        int v37 = *v36;
        v36 += 36;
        if (v37 < 0) {
          break;
        }
        if (v34 == ++v35)
        {
          LODWORD(v35) = *(_DWORD *)(a3 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v35) = 0;
    }
    if (v34 != v35)
    {
      long long v38 = v6 + 7;
      uint64_t v39 = v35;
      unsigned int v40 = *(_DWORD *)(a3 + 32);
      do
      {
        uint64_t v41 = *(void *)(a3 + 16) + 144 * v39;
        uint64_t v42 = *(void *)(v41 + 48);
        if (v42)
        {
          uint64_t v43 = *(void *)(v41 + 64);
          uint64_t v44 = 80 * v42;
          do
          {
            v43 += 80;
            v44 -= 80;
          }
          while (v44);
          unsigned int v40 = *(_DWORD *)(a3 + 32);
        }
        if (v40 <= (int)v35 + 1) {
          unsigned int v45 = v35 + 1;
        }
        else {
          unsigned int v45 = v40;
        }
        while (1)
        {
          uint64_t v39 = (v35 + 1);
          if (v45 - 1 == v35) {
            break;
          }
          LODWORD(v35) = v35 + 1;
          unsigned int v46 = v39;
          if ((*(_DWORD *)(*(void *)(a3 + 16) + 144 * v39) & 0x80000000) != 0) {
            goto LABEL_23;
          }
        }
        unsigned int v46 = v45;
LABEL_23:
        LODWORD(v35) = v46;
      }
      while (v34 != v46);
    }
  }
  return result;
}

uint64_t anonymous namespace'::physicsSimulationDataForEntity(_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  long long v3 = this;
  do
  {
    long long v4 = v3;
    long long v3 = (_anonymous_namespace_ *)*((void *)v3 + 3);
  }
  while (v3);
  uint64_t v5 = *((void *)v4 + 2);
  if (!v5) {
    return 0;
  }
  re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(*((const re::ecs2::Scene **)v4 + 2), a2);
  uint64_t v6 = *(void *)(v5 + 56);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v8 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v7);
  if (!v8) {
    return 0;
  }
  return re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(v8, (uint64_t)this);
}

float32x4_t *anonymous namespace'::transformContactToWorldSpace(float32x4_t *result, uint64_t a2)
{
  float32x4_t v3 = *result;
  float32x4_t v2 = result[1];
  float32x4_t v4 = result[2];
  float32x4_t v5 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*result, COERCE_FLOAT(*(_OWORD *)(a2 + 32))), v2, *(float32x2_t *)(a2 + 32), 1), v4, *(float32x4_t *)(a2 + 32), 2);
  float v6 = *(float *)(a2 + 64);
  float32x4_t v7 = vmulq_f32(v5, v5);
  int32x2_t v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u64[0];
  if (*(float *)v8.i32 != 1.0
    && vabds_f32(1.0, *(float *)v8.i32) >= (float)((float)((float)(fabsf(*(float *)v8.i32) + 1.0) + 1.0) * 0.00001))
  {
    *(float *)v8.i32 = sqrtf(*(float *)v8.i32);
    float32x4_t v5 = vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(v8, 0));
    float v6 = v6 / *(float *)v8.i32;
  }
  float32x4_t v9 = result[1];
  float32x4_t v10 = result[2];
  float32x4_t v11 = result[3];
  float32x4_t v12 = vaddq_f32(v11, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*result, COERCE_FLOAT(*(_OWORD *)a2)), v9, *(float32x2_t *)a2, 1), v10, *(float32x4_t *)a2, 2));
  float32x4_t v13 = vaddq_f32(v11, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*result, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v9, *(float32x2_t *)(a2 + 16), 1), v10, *(float32x4_t *)(a2 + 16), 2));
  v3.i32[0] = (__int32)*result;
  float32x4_t v14 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)(a2 + 48))), v2, *(float32x2_t *)(a2 + 48), 1), v4, *(float32x4_t *)(a2 + 48), 2);
  *(float32x4_t *)a2 = vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3));
  *(float32x4_t *)(a2 + 16) = vdivq_f32(v13, (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3));
  *(float32x4_t *)(a2 + 32) = v5;
  *(float32x4_t *)(a2 + 48) = v14;
  *(float *)(a2 + 64) = v6;
  return result;
}

uint64_t RECollisionWorldGetContactsObjectVsSceneAdHoc(_anonymous_namespace_ *this, const re::ecs2::Scene *a2, uint64_t *a3)
{
  float32x4_t v4 = a2;
  if (*a3) {
    re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::clear((uint64_t)a3);
  }
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v66, result, 0);
    long long v61 = v66;
    BOOL v8 = v7 == (void)v66 && WORD4(v66) == 0xFFFFLL;
    if (!v8 || (DWORD2(v66) & 0xFFFF0000) != 4294901760)
    {
      uint64_t v57 = v7;
      uint64_t v58 = v4;
      do
      {
        uint64_t v10 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v61);
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11)
        {
          float32x4_t v12 = (float32x4_t *)v10;
          uint64_t v13 = *(void *)(v11 + 56);
          (*(void (**)(long long *__return_ptr))(**((void **)v4 + 2) + 40))(&v59);
          uint64_t v14 = 0;
          float v15 = *(float *)&v60;
          float v16 = v15 + v15;
          float v17 = *((float *)&v60 + 2);
          float v18 = v17 + v17;
          float v19 = v15 * (float)(v15 + v15);
          float v20 = *((float *)&v60 + 1) * (float)(*((float *)&v60 + 1) + *((float *)&v60 + 1));
          float v21 = v17 * (float)(v17 + v17);
          float v22 = v16 * *((float *)&v60 + 1);
          float v23 = v16 * *((float *)&v60 + 2);
          float v24 = (float)(*((float *)&v60 + 1) + *((float *)&v60 + 1)) * *((float *)&v60 + 2);
          float v25 = (float)(*((float *)&v60 + 1) + *((float *)&v60 + 1)) * *((float *)&v60 + 3);
          float v26 = v18 * *((float *)&v60 + 3);
          v27.i32[3] = 0;
          *(float *)v27.i32 = 1.0 - (float)(v20 + v21);
          *(float *)&v27.i32[1] = (float)(v16 * *((float *)&v60 + 1)) + v26;
          *(float *)&v27.i32[2] = (float)(v16 * *((float *)&v60 + 2)) - v25;
          float v28 = v16 * *((float *)&v60 + 3);
          float v29 = 1.0 - (float)(v19 + v21);
          HIDWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = 0;
          *(float *)&long long v30 = v22 - v26;
          *((float *)&v30 + 1) = v29;
          *((float *)&v30 + 2) = v24 + v28;
          float v31 = v24 - v28;
          HIDWORD(v32) = 0;
          *(float *)&long long v32 = v23 + v25;
          *((float *)&v32 + 1) = v31;
          *((float *)&v32 + 2) = 1.0 - (float)(v19 + v20);
          long long v33 = v59;
          HIDWORD(v33) = 1.0;
          float32x4_t v34 = v12[11];
          float32x4_t v35 = v12[12];
          float32x4_t v36 = v12[13];
          float32x4_t v37 = v12[14];
          int32x4_t v62 = v27;
          long long v63 = v30;
          long long v64 = v32;
          long long v65 = v33;
          do
          {
            *(long long *)((char *)&v66 + v14) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)((char *)&v62 + v14))), v35, *(float32x2_t *)&v62.i8[v14], 1), v36, *(float32x4_t *)((char *)&v62 + v14), 2), v37, *(float32x4_t *)((char *)&v62 + v14), 3);
            v14 += 16;
          }
          while (v14 != 64);
          int32x4_t v62 = 0u;
          int32x4_t v71 = 0u;
          long long v72 = xmmword_23435FBB0;
          re::decomposeScaleRotationTranslation<float>((uint64_t)&v66, &v62, &v72, &v71);
          int32x4_t v62 = v71;
          long long v63 = v72;
          unsigned int v68 = 0;
          long long v66 = 0u;
          long long v67 = 0u;
          uint64_t v69 = 0x7FFFFFFFLL;
          *(void *)&long long v70 = 0;
          re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::init((uint64_t)&v66, *a3, 3);
          uint64_t v38 = *((void *)v4 + 2);
          long long v39 = v63;
          *(int32x4_t *)(v38 + 16) = v62;
          *(_OWORD *)(v38 + 32) = v39;
          (*(void (**)(uint64_t, int32x4_t *))(*(void *)v38 + 64))(v38, &v62);
          (*(void (**)(uint64_t, const re::ecs2::Scene *, long long *))(*(void *)v13 + 72))(v13, v4, &v66);
          unsigned int v40 = (_OWORD *)*((void *)v4 + 2);
          long long v41 = v60;
          v40[1] = v59;
          void v40[2] = v41;
          (*(void (**)(_OWORD *, long long *))(*(void *)v40 + 64))(v40, &v59);
          unsigned int v42 = v68;
          if (v68)
          {
            uint64_t v43 = 0;
            uint64_t v44 = (int *)v67;
            while (1)
            {
              int v45 = *v44;
              v44 += 36;
              if (v45 < 0) {
                break;
              }
              if (v68 == ++v43)
              {
                LODWORD(v43) = v68;
                break;
              }
            }
          }
          else
          {
            LODWORD(v43) = 0;
          }
          if (v68 != v43)
          {
            unsigned int v46 = v12 + 7;
            uint64_t v47 = v43;
            uint64_t v48 = v67;
            do
            {
              unint64_t v49 = (uint64_t *)(v48 + 144 * v47);
              uint64_t v50 = v49[6];
              if (v50)
              {
                uint64_t v51 = v49[8];
                uint64_t v52 = 80 * v50;
                do
                {
                  v51 += 80;
                  v52 -= 80;
                }
                while (v52);
              }
              re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::addNew((uint64_t)a3, v49 + 2);
              uint64_t v48 = v67;
              if (v68 <= (int)v43 + 1) {
                unsigned int v53 = v43 + 1;
              }
              else {
                unsigned int v53 = v68;
              }
              while (1)
              {
                uint64_t v47 = (v43 + 1);
                if (v53 - 1 == v43) {
                  break;
                }
                LODWORD(v43) = v43 + 1;
                unsigned int v54 = v47;
                if ((*(_DWORD *)(v67 + 144 * v47) & 0x80000000) != 0) {
                  goto LABEL_33;
                }
              }
              unsigned int v54 = v53;
LABEL_33:
              LODWORD(v43) = v54;
            }
            while (v42 != v54);
          }
          re::ContactSetCollection::~ContactSetCollection((re::ContactSetCollection *)&v66);
          uint64_t v7 = v57;
          float32x4_t v4 = v58;
        }
        uint64_t result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v61);
      }
      while ((void)v61 != v7 || WORD4(v61) != 0xFFFF || WORD5(v61) != 0xFFFF);
    }
  }
  return result;
}

uint64_t anonymous namespace'::physicsSimulationsForScene(_anonymous_namespace_ *this, const re::ecs2::Scene *a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (!v2) {
    return 0;
  }
  re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(this, a2);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v3);
  if (!v4) {
    return 0;
  }
  float32x4_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 32);
  return v5();
}

void RECollisionWorldGetContactsObjectVsActiveScenesAdHoc(uint64_t a1, const re::ecs2::Scene *a2, uint64_t *a3)
{
  if (*a3) {
    re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::clear((uint64_t)a3);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (v7)
  {
    BOOL v8 = (id *)v6;
    float32x4_t v9 = (id *)(v6 + 8 * v7);
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v8);
      if (WeakRetained)
      {
        uint64_t v11 = (_anonymous_namespace_ *)(WeakRetained - 8);

        unsigned int v22 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        uint64_t v23 = 0x7FFFFFFFLL;
        uint64_t v24 = 0;
        re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::init((uint64_t)&v20, *a3, 3);
        RECollisionWorldGetContactsObjectVsSceneAdHoc(v11, a2, (uint64_t *)&v20);
        unsigned int v12 = v22;
        if (v22)
        {
          uint64_t v13 = 0;
          uint64_t v14 = (int *)v21;
          while (1)
          {
            int v15 = *v14;
            v14 += 36;
            if (v15 < 0) {
              break;
            }
            if (v22 == ++v13)
            {
              LODWORD(v13) = v22;
              break;
            }
          }
        }
        else
        {
          LODWORD(v13) = 0;
        }
        if (v22 != v13)
        {
          uint64_t v16 = v13;
          uint64_t v17 = v21;
          do
          {
            re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::addNew((uint64_t)a3, (uint64_t *)(v17 + 144 * v16 + 16));
            uint64_t v17 = v21;
            if (v22 <= (int)v13 + 1) {
              unsigned int v18 = v13 + 1;
            }
            else {
              unsigned int v18 = v22;
            }
            int v19 = v13;
            while (1)
            {
              uint64_t v16 = (v19 + 1);
              if (v18 - 1 == v19) {
                break;
              }
              ++v19;
              LODWORD(v13) = v16;
              if ((*(_DWORD *)(v21 + 144 * v16) & 0x80000000) != 0) {
                goto LABEL_22;
              }
            }
            LODWORD(v13) = v18;
LABEL_22:
            ;
          }
          while (v12 != v13);
        }
        re::ContactSetCollection::~ContactSetCollection((re::ContactSetCollection *)&v20);
      }
      ++v8;
    }
    while (v8 != v9);
  }
}

void RECollisionObjectMinRadianDistanceToRay(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  long long v5 = 0u;
  if ((*(float (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a3 + 96))(a3, a2, a1, &v5) > 0.0) {
    *a4 = v5;
  }
}

uint64_t RECollisionWorldGetContactsForSweep(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  return RECollisionWorldGetContactsForSweepWithFilter(a1, a2, -1, -1, a3, a4, a5, a6, a7);
}

uint64_t RECollisionWorldGetContactsForSweepWithFilter(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v18[0] = a6;
  v18[1] = a7;
  v17[0] = a8;
  v17[1] = a9;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  v19[0] = 1;
  v19[1] = a3;
  int v22 = 0;
  void v19[2] = a4;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  int v16 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, _DWORD *, void *))(*(void *)a1 + 64))(a1, a2, v18, v17, v19, v11);
  re::CollisionWorld::DEPRECATED_copyRayHitsToContactSetCollection(a5, (uint64_t)v11, 1.0);
  re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v11);
  uint64_t result = v11[0];
  if (v11[0])
  {
    if ((v12 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v11[0] + 40))();
    }
  }
  return result;
}

uint64_t RECollisionCastConfigurationInitToDefault(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 4) = 0xFFFFFFFF00000001;
  *(void *)(result + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + 12) = 0;
  return result;
}

uint64_t RECollisionCastConfigurationGetQueryType(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *RECollisionCastConfigurationSetQueryType(unsigned char *result, char a2)
{
  float32x4_t *result = a2;
  return result;
}

uint64_t RECollisionCastConfigurationGetFilter(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(result + 4);
  }
  if (a3) {
    *a3 = *(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t RECollisionCastConfigurationSetFilter(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 4) = a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

uint64_t RECollisionCastRayVsWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 56))(a3, a1, a2);
}

unint64_t RECollisionCastRayVsObject(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  return re::CollisionObject::rayCast(a3, a1, a2, a4);
}

double RECollisionCastRayVsEntitySimulation(float32x2_t *a1, const re::ecs2::Entity *a2, _anonymous_namespace_ *this, uint64_t a4)
{
  if (v7)
  {
    uint64_t v11 = v7;
    float32x4_t v12 = *(float32x4_t *)a1[2].f32;
    float32x4_t v13 = vmulq_n_f32(v12, a1[4].f32[0]);
    v12.i64[0] = v7[11].i64[0];
    v9.i64[0] = v7[12].i64[0];
    v10.i64[0] = v7[13].i64[0];
    v12.i32[2] = v7[11].i32[2];
    v9.i32[2] = v7[12].i32[2];
    v10.i32[2] = v7[13].i32[2];
    float32x4_t v14 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v10, v13, 2);
    float32x4_t v15 = vaddq_f32(v7[14], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7[11], COERCE_FLOAT(*(_OWORD *)a1->f32)), v7[12], *a1, 1), v7[13], *(float32x4_t *)a1->f32, 2));
    float32x4_t v16 = vmulq_f32(v14, v14);
    v16.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
    float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
    float32x2_t v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
    uint64_t v19 = v7->i64[1];
    v20[0] = vdivq_f32(v15, (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3));
    v20[1] = vmulq_n_f32(v14, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
    float v21 = sqrtf(v16.f32[0]);
    uint64_t v22 = 0;
    int v23 = 0;
    (*(void (**)(void, _OWORD *, const re::ecs2::Entity *, uint64_t))(**(void **)(v19 + 56) + 56))(*(void *)(v19 + 56), v20, a2, a4);
  }
  return result;
}

float32x4_t anonymous namespace'::transformCollisionCastHitCollectionToWorldSpace(float32x4_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      unint64_t v6 = re::BucketArray<re::CollisionCastHit,10ul>::operator[](a2, i);
      float32x4_t v7 = *(float32x4_t *)(v6 + 32);
      float32x4_t v8 = vaddq_f32(a1[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)(v6 + 16))), a1[1], *(float32x2_t *)(v6 + 16), 1), a1[2], *(float32x4_t *)(v6 + 16), 2));
      *(float32x4_t *)(v6 + 16) = vdivq_f32(v8, (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 3));
      float32x4_t v9 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, v7.f32[0]), a1[1], *(float32x2_t *)v7.f32, 1), a1[2], v7, 2);
      int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
      v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
      float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
      float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
      float32x4_t result = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      *(float32x4_t *)(v6 + 32) = result;
    }
  }
  return result;
}

uint64_t RECollisionCastRayVsScene(float32x2_t *a1, uint64_t a2, _anonymous_namespace_ *a3, uint64_t *a4)
{
  re::BucketArray<re::CollisionCastHit,10ul>::clear((unint64_t)a4);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v41, result, 0);
    uint64_t v48 = v41;
    uint64_t v49 = v42;
    BOOL v11 = v10 == v41 && (unsigned __int16)v42 == 0xFFFFLL;
    if (!v11 || (v42 & 0xFFFF0000) != 4294901760)
    {
      do
      {
        uint64_t v13 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v48);
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          float32x4_t v15 = (float32x4_t *)v13;
          float32x4_t v16 = vmulq_n_f32(*(float32x4_t *)a1[2].f32, a1[4].f32[0]);
          float32x4_t v17 = *(float32x4_t *)(v13 + 176);
          float32x4_t v18 = *(float32x4_t *)(v13 + 192);
          float32x4_t v19 = *(float32x4_t *)(v13 + 208);
          float32x4_t v20 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v16.f32[0]), v18, *(float32x2_t *)v16.f32, 1), v19, v16, 2);
          uint64_t v21 = *(void *)(v14 + 56);
          float32x4_t v22 = vaddq_f32(*(float32x4_t *)(v13 + 224), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)a1->f32)), v18, *a1, 1), v19, *(float32x4_t *)a1->f32, 2));
          float32x4_t v36 = vdivq_f32(v22, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3));
          float32x4_t v23 = vmulq_f32(v20, v20);
          v23.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).u32[0];
          float v24 = sqrtf(v23.f32[0]);
          *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v23.u32[0]);
          *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
          uint64_t v25 = *a4;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          int v43 = 1;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          float32x4_t v35 = vmulq_n_f32(v20, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
          uint64_t v44 = 0;
          int v47 = 0;
          re::BucketArray<re::CollisionCastHit,10ul>::init((uint64_t)&v41, v25, 1uLL);
          v37[0] = v36;
          v37[1] = v35;
          float v38 = v24;
          uint64_t v39 = 0;
          int v40 = 0;
          (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t *))(*(void *)v21 + 56))(v21, v37, a2, &v41);
          uint64_t v26 = v46;
          if (v46)
          {
            unint64_t v27 = 0;
            do
            {
              float v28 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)&v41, v27);
              float v29 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized((uint64_t)a4);
              *float v29 = *v28;
              long long v30 = v28[4];
              long long v32 = v28[1];
              long long v31 = v28[2];
              uint64_t v29[3] = v28[3];
              id v29[4] = v30;
              v29[1] = v32;
              int v29[2] = v31;
              ++v27;
            }
            while (v26 != v27);
          }
          re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)&v41);
          if (v41 && (v43 & 1) == 0) {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
        }
        uint64_t result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v48);
      }
      while (v48 != v10 || (unsigned __int16)v49 != 0xFFFF || WORD1(v49) != 0xFFFF);
    }
  }
  return result;
}

void RECollisionCastRayVsActiveScenes(_OWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  re::BucketArray<re::CollisionCastHit,10ul>::clear(a4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  if (v9)
  {
    uint64_t v10 = (id *)v8;
    BOOL v11 = (id *)(v8 + 8 * v9);
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v10);
      if (WeakRetained)
      {
        uint64_t v13 = (_anonymous_namespace_ *)(WeakRetained - 8);

        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v29);
        v23[0] = 0;
        v23[1] = 0;
        int v24 = 1;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v25 = 0;
        int v28 = 0;
        re::BucketArray<re::CollisionCastHit,10ul>::init((uint64_t)v23, (uint64_t)v29, 1uLL);
        long long v14 = a1[1];
        v22[0] = *a1;
        v22[1] = v14;
        _OWORD v22[2] = a1[2];
        RECollisionCastRayVsScene((float32x2_t *)v22, a2, v13, v23);
        uint64_t v15 = v27;
        if (v27)
        {
          unint64_t v16 = 0;
          do
          {
            float32x4_t v17 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v23, v16);
            float32x4_t v18 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized(a4);
            *float32x4_t v18 = *v17;
            long long v19 = v17[4];
            long long v21 = v17[1];
            long long v20 = v17[2];
            void v18[3] = v17[3];
            void v18[4] = v19;
            v18[1] = v21;
            _OWORD v18[2] = v20;
            ++v16;
          }
          while (v15 != v16);
        }
        re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v23);
        if (v23[0])
        {
          if ((v24 & 1) == 0) {
            (*(void (**)(void))(*(void *)v23[0] + 40))();
          }
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v29);
      }
      ++v10;
    }
    while (v10 != v11);
  }
}

uint64_t RECollisionCastConvexVsWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  v10[0] = a5;
  v10[1] = a6;
  v9[0] = a7;
  v9[1] = a8;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, a1, v10, v9, a2, a4);
}

double RECollisionCastConvexVsEntitySimulation(uint64_t a1, const re::ecs2::Entity *a2, _anonymous_namespace_ *this, uint64_t a4, __n128 a5, float32x4_t a6, __n128 a7, float32x4_t a8)
{
  if (v11)
  {
    uint64_t v13 = (float32x4_t *)v11;
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)(v11 + 8);
    float32x4_t v16 = a6;
    float v17 = (float)(v16.f32[0] + v16.f32[0]) * v16.f32[0];
    float v18 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], *(float32x2_t *)a6.f32, 1);
    float v19 = vmuls_lane_f32(a6.f32[2] + a6.f32[2], a6, 2);
    float v20 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], *(float32x2_t *)v16.f32, 1);
    float v21 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], v16, 2);
    float v22 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], a6, 2);
    float v23 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], v16, 3);
    float v24 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], a6, 3);
    float v25 = vmuls_lane_f32(a6.f32[2] + a6.f32[2], a6, 3);
    v26.i32[3] = 0;
    *(float *)v26.i32 = 1.0 - (float)(v18 + v19);
    *(float *)&v26.i32[1] = v20 + v25;
    v16.i32[3] = 0;
    *(float *)&v26.i32[2] = v21 - v24;
    HIDWORD(v27) = 0;
    *(float *)&long long v27 = v20 - v25;
    *((float *)&v27 + 1) = 1.0 - (float)(v17 + v19);
    *((float *)&v27 + 2) = v22 + v23;
    v16.f32[0] = v21 + v24;
    v16.f32[1] = v22 - v23;
    v16.f32[2] = 1.0 - (float)(v17 + v18);
    __n128 v28 = a5;
    v28.n128_u32[3] = 1.0;
    float32x4_t v29 = *(float32x4_t *)(v11 + 176);
    float32x4_t v30 = *(float32x4_t *)(v11 + 192);
    float32x4_t v31 = *(float32x4_t *)(v11 + 208);
    float32x4_t v32 = *(float32x4_t *)(v11 + 224);
    int32x4_t v60 = v26;
    long long v61 = v27;
    float32x4_t v62 = v16;
    __n128 v63 = v28;
    do
    {
      v64[v14 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v60 + v14))), v30, *(float32x2_t *)&v60.i8[v14], 1), v31, *(float32x4_t *)((char *)&v60 + v14), 2), v32, *(float32x4_t *)((char *)&v60 + v14), 3);
      v14 += 16;
    }
    while (v14 != 64);
    int32x4_t v60 = 0u;
    int32x4_t v65 = 0u;
    long long v66 = xmmword_23435FBB0;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v64, &v60, &v66, &v65);
    unint64_t v33 = 0;
    int32x4_t v55 = v65;
    long long v57 = v66;
    float32x4_t v34 = a8;
    float v35 = (float)(v34.f32[0] + v34.f32[0]) * v34.f32[0];
    float v36 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], *(float32x2_t *)a8.f32, 1);
    float v37 = vmuls_lane_f32(a8.f32[2] + a8.f32[2], a8, 2);
    float v38 = vmuls_lane_f32(v34.f32[0] + v34.f32[0], *(float32x2_t *)v34.f32, 1);
    float v39 = vmuls_lane_f32(v34.f32[0] + v34.f32[0], v34, 2);
    float v40 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], a8, 2);
    float v41 = vmuls_lane_f32(v34.f32[0] + v34.f32[0], v34, 3);
    float v42 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], a8, 3);
    float v43 = vmuls_lane_f32(a8.f32[2] + a8.f32[2], a8, 3);
    v44.i32[3] = 0;
    *(float *)v44.i32 = 1.0 - (float)(v36 + v37);
    *(float *)&v44.i32[1] = v38 + v43;
    *(float *)&v44.i32[2] = v39 - v42;
    v34.i32[3] = 0;
    v34.f32[0] = v38 - v43;
    v34.f32[1] = 1.0 - (float)(v35 + v37);
    v34.f32[2] = v40 + v41;
    *(float *)&unsigned int v45 = 1.0 - (float)(v35 + v36);
    v46.f32[0] = v39 + v42;
    v46.f32[1] = v40 - v41;
    v46.i64[1] = v45;
    float32x4_t v47 = v46;
    __n128 v48 = a7;
    v48.n128_u32[3] = 1.0;
    float32x4_t v49 = v13[11];
    float32x4_t v50 = v13[12];
    float32x4_t v51 = v13[13];
    float32x4_t v52 = v13[14];
    int32x4_t v60 = v44;
    long long v61 = (__int128)v34;
    float32x4_t v62 = v47;
    __n128 v63 = v48;
    do
    {
      v64[v33 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*(_OWORD *)((char *)&v60 + v33))), v50, *(float32x2_t *)&v60.i8[v33], 1), v51, *(float32x4_t *)((char *)&v60 + v33), 2), v52, *(float32x4_t *)((char *)&v60 + v33), 3);
      v33 += 16;
    }
    while (v33 != 64);
    int32x4_t v60 = 0u;
    int32x4_t v65 = 0u;
    long long v66 = xmmword_23435FBB0;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v64, &v60, &v66, &v65);
    uint64_t v53 = *(void *)(v15 + 56);
    v64[0] = v55;
    v64[1] = v57;
    int32x4_t v60 = v65;
    long long v61 = v66;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, int32x4_t *, const re::ecs2::Entity *, uint64_t))(*(void *)v53 + 64))(v53, a1, v64, &v60, a2, a4);
  }
  return result;
}

uint64_t RECollisionCastConvexVsScene(uint64_t a1, uint64_t a2, _anonymous_namespace_ *a3, unint64_t a4, __n128 a5, float32x4_t a6, __n128 a7, float32x4_t a8)
{
  re::BucketArray<re::CollisionCastHit,10ul>::clear(a4);
  if (result)
  {
    uint64_t v13 = result;
    uint64_t result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v80, result, 0);
    long long v81 = v80;
    BOOL v14 = v13 == (void)v80 && WORD4(v80) == 0xFFFFLL;
    if (!v14 || (DWORD2(v80) & 0xFFFF0000) != 4294901760)
    {
      float32x4_t v16 = a6;
      float v17 = (float)(v16.f32[0] + v16.f32[0]) * v16.f32[0];
      float v18 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], *(float32x2_t *)a6.f32, 1);
      float v19 = vmuls_lane_f32(a6.f32[2] + a6.f32[2], a6, 2);
      float v20 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], *(float32x2_t *)v16.f32, 1);
      float v21 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], v16, 2);
      float v22 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], a6, 2);
      float v23 = vmuls_lane_f32(v16.f32[0] + v16.f32[0], v16, 3);
      float v24 = vmuls_lane_f32(a6.f32[1] + a6.f32[1], a6, 3);
      float v25 = vmuls_lane_f32(a6.f32[2] + a6.f32[2], a6, 3);
      v26.i32[3] = 0;
      *(float *)v26.i32 = 1.0 - (float)(v18 + v19);
      *(float *)&v26.i32[1] = v20 + v25;
      *(float *)&v26.i32[2] = v21 - v24;
      v27.i32[3] = 0;
      v27.f32[0] = v20 - v25;
      v27.f32[1] = 1.0 - (float)(v17 + v19);
      v27.f32[2] = v22 + v23;
      float32x4_t v67 = v27;
      int32x4_t v68 = v26;
      *(float *)&unsigned int v28 = 1.0 - (float)(v17 + v18);
      *(float *)&long long v29 = v21 + v24;
      *((float *)&v29 + 1) = v22 - v23;
      *((void *)&v29 + 1) = v28;
      long long v66 = v29;
      __n128 v30 = a5;
      v30.n128_u32[3] = 1.0;
      __n128 v71 = v30;
      float32x4_t v31 = a8;
      *(float *)&long long v29 = (float)(v31.f32[0] + v31.f32[0]) * v31.f32[0];
      float v32 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], *(float32x2_t *)a8.f32, 1);
      v27.f32[0] = vmuls_lane_f32(a8.f32[2] + a8.f32[2], a8, 2);
      float v33 = vmuls_lane_f32(v31.f32[0] + v31.f32[0], *(float32x2_t *)v31.f32, 1);
      float v34 = vmuls_lane_f32(v31.f32[0] + v31.f32[0], v31, 2);
      float v35 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], a8, 2);
      float v36 = vmuls_lane_f32(a8.f32[1] + a8.f32[1], a8, 3);
      float v37 = vmuls_lane_f32(a8.f32[2] + a8.f32[2], a8, 3);
      v26.i32[3] = 0;
      *(float *)v26.i32 = 1.0 - (float)(v32 + v27.f32[0]);
      *(float *)&v26.i32[1] = v33 + v37;
      *(float *)&v26.i32[2] = v34 - v36;
      v30.n128_f32[0] = vmuls_lane_f32(v31.f32[0] + v31.f32[0], v31, 3);
      v16.i32[3] = 0;
      v16.f32[0] = v33 - v37;
      v16.f32[1] = 1.0 - (float)(*(float *)&v29 + v27.f32[0]);
      v16.f32[2] = v35 + v30.n128_f32[0];
      float32x4_t v64 = v16;
      int32x4_t v65 = v26;
      *(float *)&unsigned int v38 = 1.0 - (float)(*(float *)&v29 + v32);
      *(float *)&long long v29 = v34 + v36;
      *((float *)&v29 + 1) = v35 - v30.n128_f32[0];
      *((void *)&v29 + 1) = v38;
      long long v63 = v29;
      __n128 v39 = a7;
      v39.n128_u32[3] = 1.0;
      __n128 v73 = v39;
      do
      {
        uint64_t v40 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v81);
        uint64_t v41 = *(void *)(v40 + 8);
        if (v41)
        {
          float v42 = (float32x4_t *)v40;
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(v41 + 56);
          float32x4_t v45 = *(float32x4_t *)(v40 + 176);
          float32x4_t v46 = *(float32x4_t *)(v40 + 192);
          float32x4_t v47 = *(float32x4_t *)(v40 + 208);
          float32x4_t v48 = *(float32x4_t *)(v40 + 224);
          int32x4_t v82 = v68;
          float32x4_t v83 = v67;
          long long v84 = v66;
          __n128 v85 = v71;
          do
          {
            *(long long *)((char *)&v80 + v43) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)((char *)&v82 + v43))), v46, *(float32x2_t *)&v82.i8[v43], 1), v47, *(float32x4_t *)((char *)&v82 + v43), 2), v48, *(float32x4_t *)((char *)&v82 + v43), 3);
            v43 += 16;
          }
          while (v43 != 64);
          int32x4_t v82 = 0u;
          v87[0] = xmmword_23435FBB0;
          v86[0] = 0u;
          re::decomposeScaleRotationTranslation<float>((uint64_t)&v80, &v82, v87, v86);
          uint64_t v49 = 0;
          long long v77 = v86[0];
          long long v79 = v87[0];
          float32x4_t v50 = v42[11];
          float32x4_t v51 = v42[12];
          float32x4_t v52 = v42[13];
          float32x4_t v53 = v42[14];
          int32x4_t v82 = v65;
          float32x4_t v83 = v64;
          long long v84 = v63;
          __n128 v85 = v73;
          do
          {
            *(long long *)((char *)&v80 + v49) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)((char *)&v82 + v49))), v51, *(float32x2_t *)&v82.i8[v49], 1), v52, *(float32x4_t *)((char *)&v82 + v49), 2), v53, *(float32x4_t *)((char *)&v82 + v49), 3);
            v49 += 16;
          }
          while (v49 != 64);
          int32x4_t v82 = 0u;
          v87[0] = xmmword_23435FBB0;
          v86[0] = 0u;
          re::decomposeScaleRotationTranslation<float>((uint64_t)&v80, &v82, v87, v86);
          long long v74 = v86[0];
          long long v75 = v87[0];
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v80);
          int32x4_t v82 = 0uLL;
          v83.i32[0] = 1;
          long long v84 = 0uLL;
          v83.i64[1] = 0;
          v85.n128_u32[0] = 0;
          re::BucketArray<re::CollisionCastHit,10ul>::init((uint64_t)&v82, (uint64_t)&v80, 1uLL);
          v87[0] = v77;
          v87[1] = v79;
          v86[0] = v74;
          v86[1] = v75;
          (*(void (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, uint64_t, int32x4_t *))(*(void *)v44 + 64))(v44, a1, v87, v86, a2, &v82);
          uint64_t v54 = *((void *)&v84 + 1);
          if (*((void *)&v84 + 1))
          {
            unint64_t v55 = 0;
            do
            {
              float v56 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)&v82, v55);
              long long v57 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized(a4);
              *long long v57 = *v56;
              long long v58 = v56[4];
              long long v60 = v56[1];
              long long v59 = v56[2];
              v57[3] = v56[3];
              v57[4] = v58;
              v57[1] = v60;
              v57[2] = v59;
              ++v55;
            }
            while (v54 != v55);
          }
          re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)&v82);
          if (v82.i64[0] && (v83.i8[0] & 1) == 0) {
            (*(void (**)(uint64_t, void))(*(void *)v82.i64[0] + 40))(v82.i64[0], v84);
          }
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v80);
        }
        uint64_t result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v81);
      }
      while ((void)v81 != v13 || WORD4(v81) != 0xFFFF || WORD5(v81) != 0xFFFF);
    }
  }
  return result;
}

void RECollisionCastConvexVsActiveScenes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __n128 a5, float32x4_t a6, __n128 a7, float32x4_t a8)
{
  re::BucketArray<re::CollisionCastHit,10ul>::clear(a4);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120))(a3);
  if (v13)
  {
    BOOL v14 = (id *)v12;
    uint64_t v15 = (id *)(v12 + 8 * v13);
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v14);
      if (WeakRetained)
      {
        float v17 = (_anonymous_namespace_ *)(WeakRetained - 8);

        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v35);
        v29[0] = 0;
        v29[1] = 0;
        int v30 = 1;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v31 = 0;
        int v34 = 0;
        re::BucketArray<re::CollisionCastHit,10ul>::init((uint64_t)v29, (uint64_t)v35, 1uLL);
        RECollisionCastConvexVsScene(a1, a2, v17, (unint64_t)v29, a5, a6, a7, a8);
        uint64_t v18 = v33;
        if (v33)
        {
          unint64_t v19 = 0;
          do
          {
            float v20 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v29, v19);
            float v21 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized(a4);
            *float v21 = *v20;
            long long v22 = v20[4];
            long long v24 = v20[1];
            long long v23 = v20[2];
            uint64_t v21[3] = v20[3];
            uint64_t v21[4] = v22;
            v21[1] = v24;
            void v21[2] = v23;
            ++v19;
          }
          while (v18 != v19);
        }
        re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v29);
        if (v29[0])
        {
          if ((v30 & 1) == 0) {
            (*(void (**)(void))(*(void *)v29[0] + 40))();
          }
        }
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v35);
      }
      ++v14;
    }
    while (v14 != v15);
  }
}

uint64_t RECollisionCastHitGetObject(uint64_t a1)
{
  return *(void *)a1;
}

__n128 RECollisionCastHitGetPosition(__n128 *a1)
{
  return a1[1];
}

__n128 RECollisionCastHitGetNormal(__n128 *a1)
{
  return a1[2];
}

float RECollisionCastHitGetHitPercentage(uint64_t a1)
{
  return *(float *)(a1 + 48);
}

uint64_t RECollisionCastHitGetFaceIndex(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 56);
}

double RECollisionCastHitGetFaceUV(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t RECollisionCastHitGetShapeIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

BOOL RECollisionCastHitHasTriangleMeshHitInfo(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) != -1;
}

uint64_t RECollisionCastHitCollectionCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 56, 8);
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v2 + 48) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_DWORD *)(v2 + 16) = 1;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  return v2;
}

re *RECollisionCastHitCollectionDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::BucketArray<re::CollisionCastHit,10ul>::deinit(v1);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t RECollisionCastHitCollectionCount(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

unint64_t RECollisionCastHitCollectionGetByIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 40) <= a2) {
    return 0;
  }
  else {
    return re::BucketArray<re::CollisionCastHit,10ul>::operator[](a1, a2);
  }
}

__n128 *RECollisionCastHitCollectionAddHit(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, float a5)
{
  uint64_t v8 = re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized(a1);
  *(void *)uint64_t v8 = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_DWORD *)(v8 + 48) = 2139095039;
  *(void *)(v8 + 52) = 0xFFFFFFFF00000000;
  *(void *)(v8 + 64) = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    uint64_t result = (__n128 *)re::BucketArray<re::CollisionCastHit,10ul>::operator[](a1, v10 - 1);
    result->n128_u64[0] = a2;
    result[1] = a3;
    result[2] = a4;
    result[3].n128_f32[0] = a5;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    uint64_t result = (__n128 *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t REContactSetCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 128, 16);
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(void *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 55) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  re::DynamicArray<re::RigSplineIKJoint>::setCapacity((void *)(v2 + 16), 0);
  ++*(_DWORD *)(v2 + 40);
  return v2;
}

re *REContactSetDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::ContactSet::~ContactSet(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re::ContactSet *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t REContactSetObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t REContactSetObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t REContactSetHasContact(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 80 * v1;
  for (unint64_t i = (float *)(*(void *)(a1 + 48) + 64); *i > 0.0; i += 20)
  {
    float32x4_t v4 = vmulq_f32(*(float32x4_t *)(i - 4), *(float32x4_t *)(i - 4));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] != 0.0)break; {
    v2 -= 80;
    }
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

BOOL REContactSetIsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0;
}

uint64_t REContactSetCount(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

float REContactSetGetDistance(uint64_t a1, unint64_t a2)
{
  return *(float *)(re::ContactSet::operator[](a1, a2) + 64);
}

uint64_t re::ContactSet::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 32) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 48) + 80 * a2;
}

float REContactSetGetPenetrationDepth(uint64_t a1, unint64_t a2)
{
  return -*(float *)(re::ContactSet::operator[](a1, a2) + 64);
}

__n128 REContactSetGetPositionAWorld(uint64_t a1, unint64_t a2)
{
  return *(__n128 *)re::ContactSet::operator[](a1, a2);
}

__n128 REContactSetGetPositionBWorld(uint64_t a1, unint64_t a2)
{
  return *(__n128 *)(re::ContactSet::operator[](a1, a2) + 16);
}

__n128 REContactSetGetNormal(uint64_t a1, unint64_t a2)
{
  return *(__n128 *)(re::ContactSet::operator[](a1, a2) + 32);
}

__n128 REContactSetGetImpulse(uint64_t a1, unint64_t a2)
{
  return *(__n128 *)(re::ContactSet::operator[](a1, a2) + 48);
}

__n128 REContactSetGetTotalImpulse(__n128 *a1)
{
  return a1[5];
}

__n128 REContactSetGetAveragePosition(__n128 *a1)
{
  return a1[4];
}

float REContactSetGetMaxPenetrationDepth(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

BOOL REContactSetNeedsSwap(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == a2;
}

uint64_t REContactSetCollectionCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 56, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 36) = 0x7FFFFFFFLL;
  *(void *)(v2 + 48) = 0;
  return v2;
}

re *REContactSetCollectionDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::ContactSetCollection::~ContactSetCollection(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re::ContactSetCollection *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

void REContactSetCollectionClear(uint64_t a1)
{
  if (*(void *)a1) {
    re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::clear(a1);
  }
}

uint64_t REContactSetCollectionCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

BOOL REContactSetCollectionContains(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 24);
  uint64_t v4 = 0x7FFFFFFFLL;
  if (v3)
  {
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v6 = v5 ^ (v5 >> 31);
    unint64_t v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    unint64_t v8 = v7 ^ (v7 >> 31);
    if (v6 == v8) {
      unint64_t v8 = 0;
    }
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v8 ^ v6) % v3));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v4 = 0x7FFFFFFFLL;
      while (1)
      {
        uint64_t v11 = v10 + 144 * v9;
        uint64_t v14 = *(void *)(v11 + 16);
        uint64_t v12 = v11 + 16;
        uint64_t v13 = v14;
        if (v14 == a2 && *(void *)(v12 + 8) == a3) {
          break;
        }
        if (v13 == a3 && *(void *)(v12 + 8) == a2) {
          break;
        }
        uint64_t v9 = *(_DWORD *)(v10 + 144 * v9) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          return v4 != 0x7FFFFFFF;
        }
      }
      uint64_t v4 = v9;
    }
  }
  return v4 != 0x7FFFFFFF;
}

uint64_t REContactSetCollectionGet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return re::HashSetBase<re::Pair<re::CollisionObject *,re::CollisionObject *,false>,re::ContactSet,re::ContactSetCollection::Key,re::ContactSetCollection::Hash,re::ContactSetCollection::EqualTo,false,false>::tryGet(a1, v4);
}

uint64_t REContactSetCollectionGetIterator@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(unsigned int *)(result + 32);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(int **)(result + 16);
    while (1)
    {
      int v5 = *v4;
      v4 += 36;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *(_DWORD *)(result + 32);
        break;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    LODWORD(v3) = 0;
  }
  *a2 = result;
  a2[1] = v3;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

BOOL REContactSetCollectionIteratorNext(_DWORD *a1)
{
  uint64_t v1 = *(void *)a1;
  unsigned int v2 = *(_DWORD *)(*(void *)a1 + 32);
  unsigned int v3 = a1[2] + 1;
  do
  {
    unsigned int v4 = v3;
    a1[2] = v3;
    if (v3 >= v2) {
      break;
    }
    int v5 = *(_DWORD *)(*(void *)(v1 + 16) + 144 * v3++);
  }
  while ((v5 & 0x80000000) == 0);
  return a1[6] != v4;
}

uint64_t REContactSetCollectionIteratorCurrent(_DWORD *a1)
{
  unsigned int v1 = a1[2];
  if (v1 == a1[6]) {
    return 0;
  }
  else {
    return *(void *)(*(void *)a1 + 16) + 144 * v1 + 16;
  }
}

BOOL REContactSetIteratorNext(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v1 = (void *)a1[1];
  uint64_t v3 = 15;
  if (*v1 == *a1) {
    uint64_t v3 = 14;
  }
  uint64_t v4 = v1[v3];
  a1[1] = v4;
  return v2 != a1[2] || v4 != a1[3];
}

uint64_t REContactSetIteratorCurrent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = a1 + 1;
  uint64_t result = a1[1];
  if (v2 == v4[1] && result == a1[3]) {
    return 0;
  }
  return result;
}

double REMeshCompileOptionsCreate(re *a1)
{
  unsigned int v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 96, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E734B68;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_WORD *)(v2 + 26) = 257;
  *(unsigned char *)(v2 + 28) = 1;
  *(_DWORD *)(v2 + 29) = 0;
  *(_WORD *)(v2 + 33) = 0;
  *(_DWORD *)(v2 + 36) = 1036831949;
  *(_WORD *)(v2 + 41) = 257;
  *(unsigned char *)(v2 + 43) = 1;
  double result = 0.0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 84) = 0x7FFFFFFF;
  return result;
}

uint64_t REMeshCompileOptionsSetGenerateVertexFaceAdjacencyAttributes(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t REMeshCompileOptionsSetReorderVertexCaching(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetReorderVertexCaching(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REMeshCompileOptionsSetRepairTangents(uint64_t result, char a2)
{
  *(unsigned char *)(result + 26) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetRepairTangents(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t REMeshCompileOptionsSetMergeVerticesIfPolygonSoup(uint64_t result, char a2)
{
  *(unsigned char *)(result + 27) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetMergeVerticesIfPolygonSoup(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 27);
}

uint64_t REMeshCompileOptionsSetPreserveSharpFeatures(uint64_t result, char a2)
{
  *(unsigned char *)(result + 29) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetPreserveSharpFeatures(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t REMeshCompileOptionsSetPreserveSubdivisonSurfaceData(uint64_t result, char a2)
{
  *(unsigned char *)(result + 3ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetPreserveSubdivisonSurfaceData(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 30);
}

uint64_t REMeshCompileOptionsSetGenerateDecimatedMesh(uint64_t result, char a2)
{
  *(unsigned char *)(result + 34) = a2;
  return result;
}

uint64_t REMeshCompileOptionsGetGenerateDecimatedMesh(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 34);
}

uint64_t REMeshCompileOptionsSetAttributeCompressionType(uint64_t a1, const char *a2, char a3, float a4)
{
  LOBYTE(v14) = a3;
  *((float *)&v14 + 1) = a4;
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)&v15);
  unint64_t v9 = v8;
  if (!*(void *)(a1 + 48))
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 56) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1 + 48, v10, v9, (re::DynamicString *)&v15, &v14);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 64);
  while (!re::DynamicString::operator==(v12 + 56 * v11 + 16, (uint64_t)&v15))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 56 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(void *)(v12 + 56 * v11 + 48) = v14;
LABEL_9:
  ++*(_DWORD *)(a1 + 88);
  uint64_t result = v15;
  if (v15)
  {
    if (v16) {
      return (*(uint64_t (**)(void))(*(void *)v15 + 40))();
    }
  }
  return result;
}

BOOL REMeshCompileOptionsGetAttributeCompressionType(uint64_t a1, const char *a2, unsigned char *a3, _DWORD *a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, (uint64_t)&v13);
  if (!*(void *)(a1 + 48)
    || (uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 56) + 4 * (v8 % *(unsigned int *)(a1 + 72))), v9 == 0x7FFFFFFF))
  {
LABEL_6:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 64);
    while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)&v13))
    {
      uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = v10 + 56 * v9 + 48;
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  if (v11)
  {
    *a3 = *(unsigned char *)v11;
    *a4 = *(_DWORD *)(v11 + 4);
  }
  return v11 != 0;
}

uint64_t REMeshCompileOptionsClearAttributeCompressionType(uint64_t a1, const char *a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)&v18);
  if (*(void *)(a1 + 48))
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 72);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 64);
      if (re::DynamicString::operator==(v8 + 56 * v7 + 16, (uint64_t)&v18))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v11 = *(void *)(a1 + 64);
        uint64_t v12 = v11 + 56 * v7;
        int v15 = *(_DWORD *)(v12 + 8);
        char v14 = (int *)(v12 + 8);
        int v13 = v15;
        if (v15 < 0)
        {
          int *v14 = v13 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v11 + 56 * v7 + 16));
          uint64_t v11 = *(void *)(a1 + 64);
          int v13 = *(_DWORD *)(v11 + 56 * v7 + 8);
        }
        *(_DWORD *)(v11 + 56 * v7 + 8) = *(_DWORD *)(a1 + 84) | v13 & 0x80000000;
        --*(_DWORD *)(a1 + 76);
        int v16 = *(_DWORD *)(a1 + 88) + 1;
        *(_DWORD *)(a1 + 84) = v7;
        *(_DWORD *)(a1 + 88) = v16;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 56 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::DynamicString::operator==(v8 + 56 * v7 + 16, (uint64_t)&v18))
          {
            *(_DWORD *)(v8 + 56 * v9 + 8) = *(_DWORD *)(v8 + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  uint64_t result = v18;
  if (v18)
  {
    if (v19) {
      return (*(uint64_t (**)(void))(*(void *)v18 + 40))();
    }
  }
  return result;
}

uint64_t REAssetManagerMeshMemoryAssetCreateWithOptions(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v28 = 0;
  v25[1] = 0;
  unint64_t v26 = 0;
  v25[0] = 0;
  int v27 = 0;
  if (a3)
  {
    unint64_t v6 = a3;
    re::DynamicArray<re::GeomMesh>::setCapacity(v25, a3);
    do
    {
      uint64_t v8 = *a2++;
      re::DynamicArray<re::GeomMesh>::add((_anonymous_namespace_ *)v25, (re::GeomMesh *)(v8 + 24));
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)long long v22 = 16842752;
  uint8_t v22[4] = 1;
  *(_DWORD *)&void v22[5] = 0;
  *(_WORD *)&v22[9] = 0;
  *(_DWORD *)&v22[12] = 1036831949;
  *(_DWORD *)&v22[16] = 16843008;
  v22[20] = 0;
  long long v24 = 0u;
  memset(v23, 0, sizeof(v23));
  DWORD1(v24) = 0x7FFFFFFF;
  if (a4)
  {
    *(_OWORD *)long long v22 = *(_OWORD *)(a4 + 24);
    *(void *)&v22[13] = *(void *)(a4 + 37);
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v23, a4 + 48);
  }
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray(v28, v26, 0, (int *)v22, (uint64_t)v20);
  int v10 = v20[0];
  uint64_t v11 = re::globalAllocators(MeshAssetDataWithGeomMeshArray);
  uint64_t v12 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 960, 8);
  int v13 = v12;
  if (v10) {
    char v14 = (re::MeshAsset *)re::MeshAsset::MeshAsset((uint64_t)v12, (uint64_t)&v21);
  }
  else {
    re::MeshAsset::MeshAsset(v12);
  }
  int v15 = re::MeshAsset::assetType(v14);
  (*(void (**)(void *__return_ptr, uint64_t, re::MeshAsset *, uint64_t *, void, void, void))(*(void *)a1 + 416))(v19, a1, v13, v15, 0, 0, 0);
  uint64_t v16 = v19[0];
  if (v19[0]) {
    id v17 = (id)(v19[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v20);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v23);
  re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v25);
  return v16;
}

uint64_t REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  if (v16[0])
  {
    uint64_t v8 = re::globalAllocators(MeshAssetDataHelper);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 960, 8);
    int v10 = (re::MeshAsset *)re::MeshAsset::MeshAsset(v9, (uint64_t)&v17);
    uint64_t v11 = re::MeshAsset::assetType(v10);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)a1 + 416))(v15, a1, v9, v11, 1, 0, 0);
    uint64_t v12 = v15[0];
    if (v15[0]) {
      id v13 = (id)(v15[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  }
  else
  {
    uint64_t v12 = 0;
    if (a5) {
      *a5 = 0;
    }
  }
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v16);
  return v12;
}

uint64_t anonymous namespace'::makeMeshAssetDataHelper(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8 = a8;
  unint64_t v9 = a7;
  unint64_t v10 = a5;
  uint64_t v11 = a4;
  uint64_t v12 = a1;
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v59 = 0;
  unint64_t v60 = 0;
  int v62 = 0;
  unint64_t v61 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  int v65 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  int v68 = 0;
  memset(v69, 0, sizeof(v69));
  uint64_t v70 = 0x7FFFFFFFLL;
  if (!a3)
  {
    if (!a6 || !a7) {
      goto LABEL_60;
    }
    uint64_t v37 = a6;
    unint64_t v36 = 0;
    goto LABEL_41;
  }
  char v14 = (_anonymous_namespace_ *)re::DynamicArray<re::ModelWithLodsDescriptor>::setCapacity(&v59, a3);
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  unint64_t v56 = a3;
  do
  {
    uint64_t v17 = *(void *)(a2 + 8 * v15);
    uint64_t v58 = v17;
    if (v17) {
      char v14 = (_anonymous_namespace_ *)(id)(v17 + 8);
    }
    memset(v71, 0, 32);
    re::DynamicString::setCapacity(v71, 0);
    memset(&v71[32], 0, 28);
    uint64_t v75 = 0;
    memset(&v71[64], 0, 36);
    long long v72 = 0u;
    long long v73 = 0u;
    int v74 = 0;
    re::DynamicString::operator=((re::DynamicString *)v71, (re::DynamicString *)(v17 + 208));
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(&v71[32], &v58);
    unint64_t v18 = v61;
    if (v61 >= v60)
    {
      re::DynamicArray<re::ModelWithLodsDescriptor>::growCapacity(&v59, v61 + 1);
      unint64_t v18 = v61;
    }
    uint64_t v19 = v63;
    char v20 = (uint64_t **)(v63 + 152 * v18);
    re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)v71);
    unsigned char v20[8] = 0;
    uint64_t v21 = v20 + 8;
    *(v21 - 4) = 0;
    *(v21 - 3) = 0;
    *(v21 - 2) = 0;
    *((_DWORD *)v21 - 2) = 0;
    if (*(void *)&v71[32])
    {
      uint64_t v22 = v19 + 152 * v18;
      unint64_t v23 = *(void *)&v71[48];
      *(v21 - 4) = *(uint64_t **)&v71[32];
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v21 - 4, v23);
      unint64_t v25 = *(void *)(v22 + 48);
      long long v24 = (uint64_t *)(v22 + 48);
      ++*((_DWORD *)v24 + 2);
      uint64_t v26 = *(void *)&v71[48];
      if (*(void *)&v71[48] >= v25)
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v21 - 4, *(unint64_t *)&v71[48]);
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(*(uint64_t **)&v71[64], (uint64_t *)(*(void *)&v71[64] + 8 * *v24), *v21);
        uint64_t v29 = *v24;
        if (*v24 != v26)
        {
          int v30 = (uint64_t *)(*(void *)&v71[64] + 8 * v29);
          uint64_t v31 = &(*v21)[v29];
          uint64_t v32 = 8 * v26 - 8 * v29;
          do
          {
            uint64_t v33 = *v30;
            *uint64_t v31 = *v30;
            if (v33) {
              id v34 = (id)(v33 + 8);
            }
            ++v30;
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(*(uint64_t **)&v71[64], (uint64_t *)(*(void *)&v71[64] + 8 * *(void *)&v71[48]), *v21);
        if (v26 != *v24)
        {
          uint64_t v27 = (uint64_t)&(*v21)[v26];
          uint64_t v28 = 8 * *v24 - 8 * v26;
          do
          {
            if (*(void *)v27)
            {

              *(void *)uint64_t v27 = 0;
            }
            v27 += 8;
            v28 -= 8;
          }
          while (v28);
        }
      }
      *long long v24 = v26;
    }
    uint64_t v35 = v19 + 152 * v18;
    re::DynamicArray<float>::DynamicArray(v35 + 72, (uint64_t *)&v71[72]);
    re::DynamicArray<float>::DynamicArray(v35 + 112, (uint64_t *)&v72 + 1);
    ++v61;
    ++v62;
    if (*((void *)&v72 + 1))
    {
      if (v75) {
        (*(void (**)(void))(**((void **)&v72 + 1) + 40))();
      }
      uint64_t v75 = 0;
      long long v73 = 0uLL;
      *((void *)&v72 + 1) = 0;
      ++v74;
    }
    if (*(void *)&v71[72])
    {
      if ((void)v72) {
        (*(void (**)(void))(**(void **)&v71[72] + 40))();
      }
      *(void *)&long long v72 = 0;
      memset(&v71[72], 0, 24);
      ++*(_DWORD *)&v71[96];
    }
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v71[32]);
    char v14 = *(_anonymous_namespace_ **)v71;
    if (*(void *)v71 && (v71[8] & 1) != 0) {
      char v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v71 + 40))();
    }
    if (v17) {

    }
    uint64_t v15 = ++v16;
  }
  while (v16 < v56);
  unint64_t v36 = v64;
  unint64_t v9 = a7;
  if (a6 && a7)
  {
    uint64_t v8 = a8;
    uint64_t v12 = a1;
    uint64_t v11 = a4;
    unint64_t v10 = a5;
    uint64_t v37 = a6;
LABEL_41:
    if (v36 < v9) {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)&v63 + 1, v9);
    }
    unint64_t v38 = 0;
    unsigned int v39 = 1;
    do
    {
      uint64_t v40 = *(void *)(v37 + 8 * v38);
      *(void *)__n128 v71 = v40;
      if (v40) {
        id v41 = (id)(v40 + 8);
      }
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((void *)&v63 + 1, v71);
      if (*(void *)v71) {

      }
      unint64_t v38 = v39++;
    }
    while (v38 < v9);
    goto LABEL_60;
  }
  uint64_t v8 = a8;
  uint64_t v12 = a1;
  uint64_t v11 = a4;
  unint64_t v10 = a5;
  if ((unint64_t)v64 < v56) {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)&v63 + 1, v56);
  }
  unsigned int v42 = 1;
  do
  {
    *(_OWORD *)__n128 v71 = xmmword_23435FD50;
    *(_OWORD *)&v71[16] = xmmword_23435FD60;
    *(_OWORD *)&v71[32] = xmmword_23435FD80;
    *(_OWORD *)&v71[48] = xmmword_23435FBB0;
    *(_DWORD *)&v71[64] = v42 - 1;
    re::make::shared::object<re::ShareableInternal<re::GeomInstance>,re::GeomInstance>((uint64_t)v71, &v58);
    uint64_t v43 = *((void *)&v64 + 1);
    if (*((void *)&v64 + 1) >= (unint64_t)v64)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((void *)&v63 + 1, *((void *)&v64 + 1) + 1);
      uint64_t v43 = *((void *)&v64 + 1);
    }
    uint64_t v44 = v58;
    *(void *)(v66 + 8 * v43) = v58;
    if (v44)
    {
      id v45 = (id)(v44 + 8);
      uint64_t v43 = *((void *)&v64 + 1);
    }
    *((void *)&v64 + 1) = v43 + 1;
    ++v65;
    if (v58) {

    }
    unint64_t v46 = v42++;
  }
  while (v46 < v56);
LABEL_60:
  if (v11 && v10)
  {
    if ((unint64_t)v67 < v10) {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)&v66 + 1, v10);
    }
    do
    {
      uint64_t v47 = *v11;
      *(void *)__n128 v71 = v47;
      if (v47) {
        id v48 = (id)(v47 + 8);
      }
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((void *)&v66 + 1, v71);
      if (*(void *)v71) {

      }
      ++v11;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)__n128 v71 = 16842752;
  v71[4] = 1;
  *(_DWORD *)&v71[5] = 0;
  *(_WORD *)&v71[9] = 0;
  *(_DWORD *)&v71[12] = 1036831949;
  *(_DWORD *)&v71[16] = 16843008;
  v71[20] = 0;
  memset(&v71[24], 0, 80);
  *(_DWORD *)&v71[60] = 0x7FFFFFFF;
  LODWORD(v72) = 0;
  *(void *)((char *)&v72 + 4) = 0x7FFFFFFFLL;
  if (v8)
  {
    *(_OWORD *)__n128 v71 = *(_OWORD *)(v8 + 24);
    *(void *)&v71[13] = *(void *)(v8 + 37);
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)&v71[24], v8 + 48);
  }
  re::makeMeshAssetDataFromDescriptor(&v59, (uint64_t)v71, v12);
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v71[72]);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v71[24]);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v69[8]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v66 + 8);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v63 + 8);
  return re::DynamicArray<re::ModelWithLodsDescriptor>::deinit((uint64_t)&v59);
}

uint64_t REAssetManagerMeshAssetCreateFromModelsWithOptions(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable(a1, a2, a3, a4, 0);
}

uint64_t REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if (v18[0])
  {
    unint64_t v10 = re::globalAllocators(MeshAssetDataHelper);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 960, 8);
    uint64_t v12 = (re::MeshAsset *)re::MeshAsset::MeshAsset(v11, (uint64_t)&v19);
    id v13 = re::MeshAsset::assetType(v12);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)a1 + 416))(v17, a1, v11, v13, 1, 0, 0);
    uint64_t v14 = v17[0];
    if (v17[0]) {
      id v15 = (id)(v17[0] + 8);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  }
  else
  {
    uint64_t v14 = 0;
  }
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v18);
  return v14;
}

uint64_t REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (v23[0])
  {
    uint64_t v11 = re::globalAllocators(MeshAssetDataHelper);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 960, 8);
    re::MeshAsset::MeshAsset(v12, (uint64_t)&v24);
    id v13 = *(id *)(a1 + 520);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    void v21[2] = __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError_block_invoke;
    uint64_t v21[3] = &unk_264BE9748;
    v22[1] = a1;
    _OWORD v22[2] = v12;
    uint64_t v14 = (id *)v22;
    v22[0] = v9;
    id v15 = v9;
    unsigned int v16 = v21;
  }
  else
  {
    id v13 = *(id *)(a1 + 520);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError_block_invoke_2;
    block[3] = &unk_264BE9770;
    uint64_t v14 = &v20;
    id v20 = v9;
    id v17 = v9;
    unsigned int v16 = block;
  }
  dispatch_async(v13, v16);

  return re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v23);
}

void __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError_block_invoke(re::MeshAsset *a1)
{
  uint64_t v2 = *((void *)a1 + 5);
  uint64_t v3 = *((void *)a1 + 6);
  unint64_t v4 = re::MeshAsset::assetType(a1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v2 + 416))(v6, v2, v3, v4, 1, 0, 0);
  if (v6[0]) {
    id v5 = (id)(v6[0] + 8);
  }
  (*(void (**)(void))(*((void *)a1 + 4) + 16))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void REAssetManagerMeshAssetCreateFromModelsWithOptionsAsync(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  void v11[2] = __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsync_block_invoke;
  void v11[3] = &unk_264BE9798;
  id v12 = v9;
  id v10 = v9;
  REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError(a1, a2, a3, a4, v11);
}

uint64_t __REAssetManagerMeshAssetCreateFromModelsWithOptionsAsync_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

double REMeshAssetDescriptorCreate(re *a1)
{
  unsigned int v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 192, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E734BB0;
  double result = 0.0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 18ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFF;
  return result;
}

uint64_t REMeshAssetDescriptorGetModelCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t REMeshAssetDescriptorGetInstanceCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t REMeshAssetDescriptorGetLodCountForModel(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 56) + 152 * a2 + 48);
  }
}

uint64_t REMeshAssetDescriptorAddModel(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = (_anonymous_namespace_ *)((char *)a1 + 24);
  uint64_t v21 = a2;
  if (a2) {
    a1 = (_anonymous_namespace_ *)(id)(a2 + 8);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  re::DynamicString::setCapacity(&v8, 0);
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  uint64_t v20 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  int v19 = 0;
  re::DynamicString::operator=((re::DynamicString *)&v8, (re::DynamicString *)(a2 + 208));
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v12, &v21);
  v5.n128_f64[0] = re::DynamicArray<re::ModelWithLodsDescriptor>::add(v4, (uint64_t)&v8);
  uint64_t v6 = *((void *)v3 + 5);
  if (*((void *)&v17 + 1))
  {
    if (v20) {
      (*(void (**)(double))(**((void **)&v17 + 1) + 40))(v5.n128_f64[0]);
    }
    uint64_t v20 = 0;
    long long v18 = 0uLL;
    *((void *)&v17 + 1) = 0;
    ++v19;
  }
  if (*((void *)&v14 + 1))
  {
    if ((void)v17) {
      (*(void (**)(__n128))(**((void **)&v14 + 1) + 40))(v5);
    }
    *(void *)&long long v17 = 0;
    long long v15 = 0uLL;
    *((void *)&v14 + 1) = 0;
    ++v16;
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v12);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*v8 + 40))();
  }
  if (a2) {

  }
  return (v6 - 1);
}

uint64_t REMeshAssetDescriptorAddModelWithLods(_DWORD *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2)
  {
    unint64_t v4 = a3;
    if (a3)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      re::DynamicString::setCapacity(&v16, 0);
      memset(v20, 0, sizeof(v20));
      int v21 = 0;
      uint64_t v28 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      int v24 = 0;
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v7 = (re::DynamicString *)(*v4 + 208);
      int v27 = 0;
      re::DynamicString::operator=((re::DynamicString *)&v16, v7);
      uint64_t v8 = a2;
      do
      {
        uint64_t v9 = *v4;
        uint64_t v15 = v9;
        if (v9)
        {
          uint64_t v10 = (void *)(v9 + 8);
          id v11 = (id)(v9 + 8);
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v20, &v15);
        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v20, &v15);
        }
        ++v4;
        --v8;
      }
      while (v8);
      v12.n128_f64[0] = re::DynamicArray<re::ModelWithLodsDescriptor>::add((_anonymous_namespace_ *)(a1 + 6), (uint64_t)&v16);
      int v13 = a1[10];
      if (*((void *)&v25 + 1))
      {
        if (v28) {
          (*(void (**)(double))(**((void **)&v25 + 1) + 40))(v12.n128_f64[0]);
        }
        uint64_t v28 = 0;
        long long v26 = 0uLL;
        *((void *)&v25 + 1) = 0;
        ++v27;
      }
      if (*((void *)&v22 + 1))
      {
        if ((void)v25) {
          (*(void (**)(__n128))(**((void **)&v22 + 1) + 40))(v12);
        }
        *(void *)&long long v25 = 0;
        long long v23 = 0uLL;
        *((void *)&v22 + 1) = 0;
        ++v24;
      }
      uint64_t v3 = (v13 - 1);
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v20);
      if (v16 && (v17 & 1) != 0) {
        (*(void (**)(uint64_t *))(*v16 + 40))(v16);
      }
    }
  }
  return v3;
}

void *REMeshAssetDescriptorSetScreenCoverageLodTransitionThresholdsForModel(void *result, unsigned int a2, const void *a3)
{
  if (result[5] > (unint64_t)a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = a2;
    uint64_t v5 = result[7];
    uint64_t v6 = *(void *)(v5 + 152 * a2 + 48);
    if (v6)
    {
      unint64_t v8 = (v6 - 1);
      re::DynamicArray<float>::resize(v5 + 152 * a2 + 112, v8);
      if (v3[5] <= v4)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = *(void **)(v3[7] + 152 * v4 + 144);
      return memcpy(v9, a3, 4 * v8);
    }
  }
  return result;
}

void *REMeshAssetDescriptorSetViewDepthLodTransitionThresholdsForModel(void *result, unsigned int a2, const void *a3)
{
  if (result[5] > (unint64_t)a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = a2;
    uint64_t v5 = result[7];
    uint64_t v6 = *(void *)(v5 + 152 * a2 + 48);
    if (v6)
    {
      unint64_t v8 = (v6 - 1);
      re::DynamicArray<float>::resize(v5 + 152 * a2 + 72, v8);
      if (v3[5] <= v4)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v9 = *(void **)(v3[7] + 152 * v4 + 104);
      return memcpy(v9, a3, 4 * v8);
    }
  }
  return result;
}

uint64_t REMeshAssetDescriptorAddInstance(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)*(unsigned int *)(a2 + 96)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (void *)(a1 + 64);
  uint64_t v6 = a2;
  id v4 = (id)(a2 + 8);
  re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v3, &v6);
  if (v6) {

  }
  return (*(_DWORD *)(a1 + 80) - 1);
}

uint64_t REMeshAssetDescriptorGetSkeletonCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

unint64_t REMeshAssetDescriptorAddSkeleton(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = (StringID *)(a2 + 24);
  uint64_t v5 = (uint64_t)(a1 + 18);
  uint64_t v6 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(a1 + 18), (void *)(a2 + 24));
  if (v6)
  {
    uint64_t v7 = (unsigned int *)v6;
    if (a2) {
      id v8 = (id)(a2 + 8);
    }
    unint64_t v9 = *v7;
    if (a1[15] <= v9)
    {
      memset(v14, 0, sizeof(v14));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v10 = a1[17];
    uint64_t v11 = *(void *)(v10 + 8 * v9);
    *(void *)(v10 + 8 * v9) = a2;
    if (v11)
    {

      return *v7;
    }
  }
  else
  {
    LODWORD(v14[0]) = a1[15];
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v5, v4, v14);
    *(void *)&v14[0] = a2;
    if (a2) {
      id v12 = (id)(a2 + 8);
    }
    re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(a1 + 13, v14);
    if (*(void *)&v14[0]) {

    }
    return (*((_DWORD *)a1 + 30) - 1);
  }
  return v9;
}

uint64_t REMeshAssetDescriptorGetModel(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (!*(void *)(v2 + 152 * a2 + 48))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return **(void **)(v2 + 152 * a2 + 64);
}

uint64_t REMeshAssetDescriptorGetModelForLodLevel(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (*(void *)(v3 + 152 * a2 + 48) <= (unint64_t)a3) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v3 + 152 * a2 + 64) + 8 * a3);
  }
}

uint64_t REMeshAssetDescriptorGetInstance(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 80) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 96) + 8 * a2);
  }
}

uint64_t REMeshAssetDescriptorGetSkeleton(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 120) <= (unint64_t)a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 136) + 8 * a2);
  }
}

uint64_t AssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptions(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(_DWORD *)unint64_t v55 = 16842752;
  v55[4] = 1;
  *(_DWORD *)&v55[5] = 0;
  *(_WORD *)&v55[9] = 0;
  *(_DWORD *)&v55[12] = 1036831949;
  *(_DWORD *)&v55[16] = 16843008;
  v55[20] = 0;
  long long v57 = 0u;
  memset(v56, 0, sizeof(v56));
  memset(v58, 0, sizeof(v58));
  DWORD1(v57) = 0x7FFFFFFF;
  int v59 = 0;
  uint64_t v60 = 0x7FFFFFFFLL;
  if (a3)
  {
    *(_OWORD *)unint64_t v55 = *(_OWORD *)(a3 + 24);
    *(void *)&v55[13] = *(void *)(a3 + 37);
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v56, a3 + 48);
  }
  MeshAssetDataFromDescriptor = (re *)re::makeMeshAssetDataFromDescriptor((void *)(a2 + 24), (uint64_t)v55, (uint64_t)v51);
  if (!v51[0])
  {
    uint64_t v29 = 0;
    goto LABEL_32;
  }
  uint64_t v50 = 0;
  memset(v48, 0, sizeof(v48));
  int v49 = 0;
  if (v53)
  {
    MeshAssetDataFromDescriptor = (re *)re::DynamicArray<re::AssetHandle>::setCapacity(v48, v53);
    if (v53)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v54;
      unint64_t v11 = 112 * v53;
      do
      {
        re::StringID::StringID((re::StringID *)&v40, v10);
        re::FixedArray<re::StringID>::FixedArray(v41, (uint64_t)&v10[1]);
        re::FixedArray<unsigned int>::FixedArray(&v42, (uint64_t)&v10[2].var1);
        id v12 = (re *)re::FixedArray<re::GenericSRT<float>>::FixedArray(&v45, (uint64_t)&v10[4]);
        int v13 = re::globalAllocators(v12);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 248, 8);
        uint64_t v15 = (re::SkeletonAsset *)re::SkeletonAsset::SkeletonAsset(v14, (const StringID *)&v40);
        StringID v38 = (StringID)0;
        unint64_t v39 = 0;
        if (a5)
        {
          int v16 = (re::SkeletonAsset *)re::DynamicString::format((re::DynamicString *)"%s_skeleton%i", (re::DynamicString *)&v36, a5, v9);
          if ((uint64_t)v36.var1) {
            uint64_t v17 = (char *)v37;
          }
          else {
            uint64_t v17 = (char *)&v36.var1 + 1;
          }
          uint64_t v18 = re::SkeletonAsset::assetType(v16);
          (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, char *, void, void, uint64_t))(*(void *)a1 + 432))(&v34, a1, v14, v18, v17, 0, a4, 1);
          StringID v19 = v38;
          StringID v38 = v34;
          StringID v34 = v19;
          unint64_t v20 = v39;
          unint64_t v39 = v35;
          unint64_t v35 = v20;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
          if (*(void *)&v36.var0 && ((uint64_t)v36.var1 & 1) != 0) {
            (*(void (**)(void))(**(void **)&v36.var0 + 40))();
          }
        }
        else
        {
          int v21 = re::SkeletonAsset::assetType(v15);
          if (a4) {
            (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v36, a1, v14, v21, 0, 0, 1);
          }
          else {
            (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v36, a1, v14, v21, 0, 0, 0);
          }
          StringID v22 = v38;
          StringID v38 = v36;
          StringID v36 = v22;
          unint64_t v23 = v39;
          unint64_t v39 = v37;
          unint64_t v37 = v23;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
        }
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v48, (re::AssetHandle *)&v38);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
        if (v45)
        {
          if (v46)
          {
            (*(void (**)(void))(*(void *)v45 + 40))();
            uint64_t v46 = 0;
            uint64_t v47 = 0;
          }
          uint64_t v45 = 0;
        }
        if (v42)
        {
          if (v43)
          {
            (*(void (**)(void))(*(void *)v42 + 40))();
            uint64_t v43 = 0;
            uint64_t v44 = 0;
          }
          uint64_t v42 = 0;
        }
        re::FixedArray<re::StringID>::deinit(v41);
        re::StringID::destroyString((re::StringID *)&v40);
        v10 += 7;
        uint64_t v9 = (v9 + 1);
        v11 -= 112;
      }
      while (v11);
    }
  }
  int v24 = re::globalAllocators(MeshAssetDataFromDescriptor);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 960, 8);
  uint64_t v26 = re::MeshAsset::MeshAsset(v25, (uint64_t)&v52);
  int v27 = (re::MeshAsset *)re::DynamicArray<re::AssetHandle>::operator=(v26 + 208, (uint64_t)v48);
  unsigned long long v40 = 0uLL;
  v41[0] = 0;
  if (!a5)
  {
    uint64_t v32 = re::MeshAsset::assetType(v27);
    if (a4) {
      (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, uint64_t))(*(void *)a1 + 416))(&v36, a1, v25, v32, 0, 0, 1);
    }
    else {
      (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(&v36, a1, v25, v32, 0, 0, 0);
    }
    uint64_t v29 = *(void *)&v36.var0;
    unsigned long long v40 = (unsigned __int128)v36;
    StringID v36 = (StringID)0;
    v41[0] = v37;
    unint64_t v37 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
    if (!v29) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v28 = re::MeshAsset::assetType(v27);
  (*(void (**)(StringID *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, void, uint64_t))(*(void *)a1 + 432))(&v36, a1, v25, v28, a5, 0, a4, 1);
  uint64_t v29 = *(void *)&v36.var0;
  unsigned long long v40 = (unsigned __int128)v36;
  StringID v36 = (StringID)0;
  v41[0] = v37;
  unint64_t v37 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
  if (v29) {
LABEL_29:
  }
    id v30 = (id)(v29 + 8);
LABEL_30:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v40);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v48);
LABEL_32:
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v51);
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v58);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v56);
  return v29;
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptions(a1, a2, a3, 0, 0);
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptions(a1, a2, a3, 1u, 0);
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsWithParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 32);
  unint64_t v5 = v4 >> 1;
  if ((v4 & 1) == 0) {
    unint64_t v5 = v4 >> 1;
  }
  if (v5)
  {
    if (v4) {
      uint64_t v6 = *(void *)(a4 + 40);
    }
    else {
      uint64_t v6 = a4 + 33;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return AssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptions(a1, a2, a3, *(unsigned __int8 *)(a4 + 56) != 0, v6);
}

double REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  *(_DWORD *)uint64_t v28 = 16842752;
  v28[4] = 1;
  *(_DWORD *)&_OWORD v28[5] = 0;
  *(_WORD *)&uint64_t v28[9] = 0;
  *(_DWORD *)&v28[12] = 1036831949;
  *(_DWORD *)&v28[16] = 16843008;
  v28[20] = 0;
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  memset(v31, 0, sizeof(v31));
  DWORD1(v3ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFF;
  int v32 = 0;
  uint64_t v33 = 0x7FFFFFFFLL;
  if (a3)
  {
    *(_OWORD *)uint64_t v28 = *(_OWORD *)(a3 + 24);
    *(void *)&v28[13] = *(void *)(a3 + 37);
    re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v29, a3 + 48);
  }
  re::makeMeshAssetDataFromDescriptor((void *)(a2 + 24), (uint64_t)v28, (uint64_t)v25);
  if (v25[0])
  {
    id v8 = (re *)re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)v24, v27);
    uint64_t v9 = re::globalAllocators(v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 960, 8);
    re::MeshAsset::MeshAsset(v10, (uint64_t)&v26);
    id v11 = *(id *)(a1 + 520);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3321888768;
    block[2] = __REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsync_block_invoke;
    block[3] = &unk_26E734B28;
    uint64_t v21 = a1;
    uint64_t v22 = v10;
    id v12 = v11;
    re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)v23, v24);
    id v20 = v7;
    id v13 = v7;
    dispatch_async(v12, block);

    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v23);
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)v24);
  }
  else
  {
    uint64_t v14 = *(id *)(a1 + 520);
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    _OWORD v17[2] = __REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsync_block_invoke_3;
    void v17[3] = &unk_264BE9770;
    id v18 = v7;
    id v15 = v7;
    dispatch_async(v14, v17);
  }
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v25);
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v31);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v29);
}

void __REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsync_block_invoke(re::MeshAsset *a1)
{
  uint64_t v2 = *((void *)a1 + 5);
  uint64_t v3 = *((void *)a1 + 6);
  unint64_t v4 = re::MeshAsset::assetType(a1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v2 + 416))(v25, v2, v3, v4, 1, 0, 0);
  if (v25[0]) {
    id v5 = (id)(v25[0] + 8);
  }
  uint64_t v6 = *((void *)a1 + 6);
  unint64_t v7 = *((void *)a1 + 9);
  if (*(void *)(v6 + 216) < v7)
  {
    re::DynamicArray<re::AssetHandle>::setCapacity((void *)(v6 + 208), v7);
    unint64_t v7 = *((void *)a1 + 9);
  }
  if (v7)
  {
    id v8 = (const StringID *)*((void *)a1 + 11);
    uint64_t v9 = 112 * v7;
    do
    {
      re::StringID::StringID((re::StringID *)&v17, v8);
      re::FixedArray<re::StringID>::FixedArray(v18, (uint64_t)&v8[1]);
      re::FixedArray<unsigned int>::FixedArray(&v19, (uint64_t)&v8[2].var1);
      uint64_t v10 = (re *)re::FixedArray<re::GenericSRT<float>>::FixedArray(&v22, (uint64_t)&v8[4]);
      id v11 = re::globalAllocators(v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 248, 8);
      id v13 = (re::SkeletonAsset *)re::SkeletonAsset::SkeletonAsset(v12, &v17);
      uint64_t v14 = *((void *)a1 + 5);
      id v15 = re::SkeletonAsset::assetType(v13);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)v14 + 416))(v16, v14, v12, v15, 0, 0, 0);
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(*((void *)a1 + 6) + 208), (re::AssetHandle *)v16);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
      if (v22)
      {
        if (v23)
        {
          (*(void (**)(void))(*(void *)v22 + 40))();
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v22 = 0;
      }
      if (v19)
      {
        if (v20)
        {
          (*(void (**)(void))(*(void *)v19 + 40))();
          uint64_t v20 = 0;
          uint64_t v21 = 0;
        }
        uint64_t v19 = 0;
      }
      re::FixedArray<re::StringID>::deinit(v18);
      re::StringID::destroyString((re::StringID *)&v17);
      v8 += 7;
      v9 -= 112;
    }
    while (v9);
  }
  (*(void (**)(void))(*((void *)a1 + 4) + 16))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
}

uint64_t __copy_helper_block_a8_56c48_ZTSN2re12DynamicArrayINS_17MeshAssetSkeletonEEE(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray(a1 + 56, (uint64_t *)(a2 + 56));
}

uint64_t __destroy_helper_block_a8_56c48_ZTSN2re12DynamicArrayINS_17MeshAssetSkeletonEEE(uint64_t a1)
{
  return re::DynamicArray<re::MeshAssetSkeleton>::deinit(a1 + 56);
}

uint64_t __REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsync_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *re::Shareable<re::MeshCompileOptions>::~Shareable(void *a1)
{
  *a1 = &unk_26E734B68;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 6);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::MeshCompileOptions>::~Shareable(void *a1)
{
  *a1 = &unk_26E734B68;
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 6);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::Shareable<re::MeshAssetDescriptor>::~Shareable(void *a1)
{
  *a1 = &unk_26E734BB0;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 18);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 13));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 8));
  re::DynamicArray<re::ModelWithLodsDescriptor>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::MeshAssetDescriptor>::~Shareable(void *a1)
{
  *a1 = &unk_26E734BB0;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 18);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 13));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 8));
  re::DynamicArray<re::ModelWithLodsDescriptor>::deinit((uint64_t)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RELinkedOnOrAfterFall2020OSVersions()
{
  return dyld_program_sdk_at_least();
}

uint64_t RELinkedOnOrAfterFall2021OSVersions()
{
  return dyld_program_sdk_at_least();
}

uint64_t RELinkedOnOrAfterFall2022OSVersions()
{
  return dyld_program_sdk_at_least();
}

uint64_t RELinkedOnOrAfterFall2024OSVersions()
{
  return dyld_program_sdk_at_least();
}

uint64_t RELinkedOnOrAfterVisionOS1_1AlignedOSVersions()
{
  return dyld_program_sdk_at_least();
}

void *REAnchorShadowMarkerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double REAnchorShadowMarkerAddToAnchorEntity(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v3 = (re::ecs2::EntityComponentCollection *)(a1 + 32);
  if (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
  {
    uint64_t v5 = re::ecs2::EntityComponentCollection::add(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    __n128 v9 = a3;
    __n128 v10 = a2;
    re::SortingPlane::operator==((float *)(v5 + 32), (float *)&v9);
    double result = v9.n128_f64[0];
    __n128 v6 = v10;
    *(__n128 *)(v5 + 32) = v9;
    *(__n128 *)(v5 + 48) = v6;
    *(unsigned char *)(v5 + 25) = 1;
  }
  return result;
}

uint64_t REAnchorShadowMarkerSetPointAndNormal(uint64_t a1, __n128 a2, __n128 a3)
{
  __n128 v9 = a3;
  __n128 v10 = a2;
  unint64_t v4 = (__n128 *)(a1 + 32);
  uint64_t result = re::SortingPlane::operator==((float *)(a1 + 32), (float *)&v9);
  if (result)
  {
    int v6 = *(unsigned __int8 *)(a1 + 25);
    __n128 v7 = v10;
    __n128 *v4 = v9;
    v4[1] = v7;
    *(unsigned char *)(a1 + 25) = 1;
    if (v6) {
      return result;
    }
  }
  else
  {
    __n128 v8 = v10;
    __n128 *v4 = v9;
    v4[1] = v8;
    *(unsigned char *)(a1 + 25) = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnchorShadowMarkerSetFloorPlane(uint64_t a1, __n128 a2, __n128 a3)
{
  __n128 v5 = a3;
  __n128 v6 = a2;
  uint64_t result = re::ecs2::AnchorShadowMarker::setFloorPlane(a1, (long long *)&v6, (long long *)&v5);
  if (result)
  {
    return re::ecs2::Component::enqueueMarkDirty(a1);
  }
  return result;
}

__n128 REAnchorShadowMarkerGetAnchorPoint(__n128 *a1)
{
  return a1[3];
}

__n128 REAnchorShadowMarkerGetPlaneNormal(__n128 *a1)
{
  return a1[2];
}

uint64_t REAnchorShadowMarkerSetPlaneExists(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 25) != a2)
  {
    *(unsigned char *)(this + 25) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REAnchorShadowMarkerGetPlaneExists(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REAudioGeneratorAssetCreateWithRenderBlock(uint64_t a1, uint64_t a2, void *a3)
{
  __n128 v5 = a3;
  __n128 v6 = re::globalAllocators(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 104, 8);
  *(unsigned char *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 48) = 0;
  *(unsigned char *)(v7 + + 56) = 0;
  *(_DWORD *)(v7 + 64) = 1117126656;
  *(int32x2_t *)(v7 + 68) = vdup_n_s32(0x62616464u);
  *(_DWORD *)(v7 + 76) = 1650549860;
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(unsigned char *)(v7 + 88) = 0;
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
  re::Optional<re::DynamicString>::operator=((unsigned char *)(v7 + 8), (unsigned __int8 *)(a2 + 8));
  __n128 v8 = (re::AudioGeneratorAsset *)_Block_copy(v5);
  if (*(unsigned char *)(v7 + 56))
  {
    __n128 v9 = *(void **)(v7 + 48);
    *(void *)(v7 + 48) = v8;
  }
  else
  {
    *(void *)(v7 + 48) = v8;
    *(unsigned char *)(v7 + + 56) = 1;
  }
  __n128 v10 = re::AudioGeneratorAsset::assetType(v8);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v14, a1, v7, v10, 0, 0, 0);
  uint64_t v11 = v14[0];
  if (v14[0]) {
    id v12 = (id)(v14[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);

  return v11;
}

uint64_t REAudioGeneratorAssetCreate(re *a1, uint64_t a2, int a3, float a4)
{
  __n128 v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 104, 8);
  *(unsigned char *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 48) = 0;
  *(unsigned char *)(v9 + + 56) = 0;
  *(int32x2_t *)(v9 + 68) = vdup_n_s32(0x62616464u);
  *(_DWORD *)(v9 + 76) = 1650549860;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(unsigned char *)(v9 + 88) = 0;
  *(_DWORD *)uint64_t v9 = a3;
  *(float *)(v9 + 64) = a4;
  int v10 = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 68) = *(_OWORD *)a2;
  *(_DWORD *)(v9 + 84) = v10;
  uint64_t v11 = re::AudioGeneratorAsset::assetType((re::AudioGeneratorAsset *)v9);
  (*(void (**)(void *__return_ptr, re *, uint64_t, uint64_t *, void, void, void))(*(void *)a1 + 416))(v15, a1, v9, v11, 0, 0, 0);
  uint64_t v12 = v15[0];
  if (v15[0]) {
    id v13 = (id)(v15[0] + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v12;
}

uint64_t REAudioGeneratorAssetGetSupportedFileExtensions()
{
  if (qword_26AFA01B8 != -1) {
    dispatch_once(&qword_26AFA01B8, &__block_literal_global_61);
  }
  return _MergedGlobals_523;
}

void __REAudioGeneratorAssetGetSupportedFileExtensions_block_invoke()
{
  _MergedGlobals_523 = (uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFStringRef v0 = CFStringCreateWithCString(0, "reaudiogenerator", 0x8000100u);
  CFArrayAppendValue((CFMutableArrayRef)_MergedGlobals_523, v0);
  CFRelease(v0);
}

void REAudioGeneratorAssetSetLayoutTag(uint64_t a1, int a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  if (v10 && (unsigned int v4 = atomic_load((unsigned int *)(v10 + 704)), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)(v10 + 704));
    if (v5 == 2)
    {
      ++*(_DWORD *)(v10 + 260);
      __n128 v6 = (_DWORD *)re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v9);
      if (v6) {
        *__n128 v6 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot set layoutTag when asset is not yet loaded.", v8, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

uint64_t REAudioGeneratorAssetGetLayoutTag(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    uint64_t v3 = *(unsigned int *)re::AssetHandle::asset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v7);
  }
  else
  {
    unsigned int v4 = *re::audioLogObjects(v1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot get layoutTag when asset is not yet loaded.", v6, 2u);
    }
    uint64_t v3 = 4294901760;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

uint64_t re::AssetHandle::asset<re::AudioGeneratorAsset>(re::AudioGeneratorAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v2 = re::AudioGeneratorAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unsigned int v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      __n128 v6 = v4;
      uint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void REAudioGeneratorAssetSetComponentDescription(uint64_t a1, long long *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v11);
  if (v12 && (unsigned int v4 = atomic_load((unsigned int *)v12 + 176), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)v12 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v11);
      ++*((_DWORD *)v12 + 65);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v11);
      if (v6)
      {
        long long v7 = *a2;
        *(_DWORD *)(v6 + 84) = *((_DWORD *)a2 + 4);
        *(_OWORD *)(v6 + 68) = v7;
        uint64_t v8 = (os_unfair_lock_s *)v12;
        *((unsigned char *)v12 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v8);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v12);
      }
    }
  }
  else
  {
    int v9 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot set component description when asset is not yet loaded.", v10, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
}

void REAudioGeneratorAssetGetComponentDescription(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  if (v9 && (unsigned int v4 = atomic_load((unsigned int *)(v9 + 704)), v4 == 2))
  {
    uint64_t v5 = re::AssetHandle::asset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v8);
    *(_OWORD *)a2 = *(_OWORD *)(v5 + 68);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v5 + 84);
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot get component description when asset is not yet loaded.", v7, 2u);
    }
    *(_OWORD *)a2 = xmmword_2343A3A50;
    *(_DWORD *)(a2 + 16) = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
}

void REAudioGeneratorAssetSetReferenceLevel(uint64_t a1, float a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  if (v11 && (unsigned int v4 = atomic_load((unsigned int *)v11 + 176), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)v11 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v10);
      ++*((_DWORD *)v11 + 65);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v10);
      if (v6)
      {
        *(float *)(v6 + 64) = a2;
        long long v7 = (os_unfair_lock_s *)v11;
        *((unsigned char *)v11 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v11);
      }
    }
  }
  else
  {
    uint64_t v8 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot set reference level when asset is not yet loaded.", v9, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

float REAudioGeneratorAssetGetReferenceLevel(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (v8 && (unsigned int v2 = atomic_load((unsigned int *)(v8 + 704)), v2 == 2))
  {
    float v3 = *(float *)(re::AssetHandle::asset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v7) + 64);
  }
  else
  {
    unsigned int v4 = *re::audioLogObjects(v1);
    float v3 = 0.0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot get reference level when asset is not yet loaded.", v6, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v3;
}

CFTypeRef REAudioGeneratorAssetGetType(re::AudioGeneratorAsset *a1)
{
  unsigned int v1 = re::AudioGeneratorAsset::assetType(a1);
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)*v1, 0x8000100u);
  return CFAutorelease(v2);
}

void REAudioGeneratorAssetSetMissedPlayStrategy(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  if (v11 && (unsigned int v4 = atomic_load((unsigned int *)v11 + 176), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)v11 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v10);
      ++*((_DWORD *)v11 + 65);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v10);
      if (v6)
      {
        *(unsigned char *)(v6 + 88) = a2;
        uint64_t v7 = (os_unfair_lock_s *)v11;
        *((unsigned char *)v11 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v11);
      }
    }
  }
  else
  {
    uint64_t v8 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot set input mode when asset is not yet loaded.", v9, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

uint64_t REAudioGeneratorAssetGetMissedPlayStrategy(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned __int8 *)(re::AssetHandle::asset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)v3) + 88);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

void REAudioGeneratorAssetSetMaximumAlignmentLatency(uint64_t a1, double a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  if (v11 && (unsigned int v4 = atomic_load((unsigned int *)v11 + 176), v4 == 2))
  {
    unsigned int v5 = atomic_load((unsigned int *)v11 + 176);
    if (v5 == 2)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)&v10);
      ++*((_DWORD *)v11 + 65);
      uint64_t v6 = re::AssetHandle::loadedAsset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)&v10);
      if (v6)
      {
        *(double *)(v6 + 96) = a2;
        uint64_t v7 = (os_unfair_lock_s *)v11;
        *((unsigned char *)v11 + 2+ 56) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v7);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v11);
      }
    }
  }
  else
  {
    uint64_t v8 = *re::audioLogObjects(v3);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "[CoreRE] [REAudioGeneratorAsset] Cannot set input mode when asset is not yet loaded.", v9, 2u);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

double REAudioGeneratorAssetGetMaximumAlignmentLatency(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  double v1 = *(double *)(re::AssetHandle::asset<re::AudioGeneratorAsset>((re::AudioGeneratorAsset *)v3) + 96);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

void *RERenderOptionsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REEntityIsVisible(re::ecs2::RenderOptionsComponent *this, const re::ecs2::Entity *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  uint64_t v6 = this;
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (re::ecs2::RenderOptionsComponent *)*((void *)v6 + 3);
  }
  while (v6);
  if (!*((void *)v7 + 2)) {
    goto LABEL_13;
  }
  uint64_t v8 = this;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = (re::ecs2::RenderOptionsComponent *)*((void *)v8 + 3);
  }
  while (v8);
  if (!*(void *)(*((void *)v9 + 2) + 56)) {
    goto LABEL_13;
  }
  uint64_t v10 = this;
  do
  {
    uint64_t v11 = v10;
    uint64_t v10 = (re::ecs2::RenderOptionsComponent *)*((void *)v10 + 3);
  }
  while (v10);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(*((void *)v11 + 2) + 56) + 32))(*(void *)(*((void *)v11 + 2) + 56));
  uint64_t v13 = re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = this;
    do
    {
      int v16 = v15;
      id v15 = (re::ecs2::RenderOptionsComponent *)*((void *)v15 + 3);
    }
    while (v15);
    (*(void (**)(void))(**(void **)(*((void *)v16 + 2) + 56) + 200))(*(void *)(*((void *)v16 + 2) + 56));
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    return *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v18, (unint64_t)this);
  }
  else
  {
LABEL_13:
    return re::ecs2::RenderOptionsComponent::calculateVisibilityAgainstHierarchy(this, a2, a3, a4, a5);
  }
}

uint64_t RERenderOptionsComponentSetVisibilityMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentGetVisibilityMode(uint64_t a1)
{
  return *(char *)(a1 + 25);
}

uint64_t RERenderOptionsComponentOverrideEnableCullingTo(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 49) = a3;
  if (!*(unsigned char *)(this + 38)) {
    *(unsigned char *)(this + 38) = 1;
  }
  *(unsigned char *)(this + 39) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetEnableCullingOverride(uint64_t this)
{
  *(unsigned char *)(this + 49) = 0;
  if (*(unsigned char *)(this + 38)) {
    *(unsigned char *)(this + 38) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetEnableCullingOverride(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[38];
  if (a1[38])
  {
    *a2 = a1[39];
    if (a3) {
      *a3 = a1[49];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideDoubleSidedTo(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 33) = a3;
  if (!*(unsigned char *)(this + 26)) {
    *(unsigned char *)(this + 26) = 1;
  }
  *(unsigned char *)(this + 27) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetDoubleSidedOverride(uint64_t this)
{
  *(unsigned char *)(this + 33) = 0;
  if (*(unsigned char *)(this + 26)) {
    *(unsigned char *)(this + 26) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetDoubleSidedOverride(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[26];
  if (a1[26])
  {
    *a2 = a1[27];
    if (a3) {
      *a3 = a1[33];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideCastsShadowsTo(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 5ArcSharedObject::ArcSharedObject(this, 0) = a3;
  if (!*(unsigned char *)(this + 40)) {
    *(unsigned char *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = 1;
  }
  *(unsigned char *)(this + 41) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetCastsShadowsOverride(uint64_t this)
{
  *(unsigned char *)(this + 5ArcSharedObject::ArcSharedObject(this, 0) = 0;
  if (*(unsigned char *)(this + 40)) {
    *(unsigned char *)(this + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetCastsShadowsOverride(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[40];
  if (a1[40])
  {
    *a2 = a1[41];
    if (a3) {
      *a3 = a1[50];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideWindingOrderTo(uint64_t this, int a2, char a3)
{
  *(unsigned char *)(this + 34) = a3;
  if (!*(unsigned char *)(this + 28)) {
    *(unsigned char *)(this + 28) = 1;
  }
  *(unsigned char *)(this + 29) = a2 != 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetWindingOrderOverride(uint64_t this)
{
  *(unsigned char *)(this + 34) = 0;
  if (*(unsigned char *)(this + 28)) {
    *(unsigned char *)(this + 28) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetWindingOrderOverride(unsigned __int8 *a1, BOOL *a2, unsigned char *a3)
{
  int v3 = a1[28];
  if (a1[28])
  {
    *a2 = a1[29] != 0;
    if (a3) {
      *a3 = a1[34];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideWindingOrderToReverse(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 34) = a3;
  *(unsigned char *)(this + 32) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetOverrideWindingOrderToReverse(uint64_t this)
{
  *(unsigned char *)(this + 34) = 0;
  *(unsigned char *)(this + 32) = 0;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentGetOverrideWindingOrderToReverse(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *(unsigned char *)(a1 + 32);
  if (a3) {
    *a3 = *(unsigned char *)(a1 + 34);
  }
  return 1;
}

uint64_t RERenderOptionsComponentOverrideTechniqueQualityLevelBiasTo(uint64_t this, __int16 a2, char a3)
{
  *(unsigned char *)(this + 52) = a3;
  if (!*(unsigned char *)(this + 44)) {
    *(unsigned char *)(this + 44) = 1;
  }
  *(_WORD *)(this + 46) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetTechniqueQualityLevelBiasOverride(uint64_t this)
{
  *(unsigned char *)(this + 52) = 0;
  if (*(unsigned char *)(this + 44)) {
    *(unsigned char *)(this + 44) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetTechniqueQualityLevelBiasOverride(uint64_t a1, _WORD *a2, unsigned char *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  if (*(unsigned char *)(a1 + 44))
  {
    *a2 = *(_WORD *)(a1 + 46);
    if (a3) {
      *a3 = *(unsigned char *)(a1 + 52);
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideEnablePortalCrossingTo(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 51) = a3;
  if (!*(unsigned char *)(this + 42)) {
    *(unsigned char *)(this + 42) = 1;
  }
  *(unsigned char *)(this + 43) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentUnsetEnablePortalCrossingOverride(uint64_t this)
{
  *(unsigned char *)(this + 51) = 0;
  if (*(unsigned char *)(this + 42)) {
    *(unsigned char *)(this + 42) = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetEnablePortalCrossingOverride(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[42];
  if (a1[42])
  {
    *a2 = a1[43];
    if (a3) {
      *a3 = a1[51];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideOccupancyBehavior(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 35) = a3;
  if (!*(unsigned char *)(this + 30)) {
    *(unsigned char *)(this + 3ArcSharedObject::ArcSharedObject(this, 0) = 1;
  }
  *(unsigned char *)(this + 31) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetOccupancyBehavior(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[30];
  if (a1[30])
  {
    *a2 = a1[31];
    if (a3) {
      *a3 = a1[35];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentOverrideMeshAttributes(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 35) = a3;
  if (!*(unsigned char *)(this + 30)) {
    *(unsigned char *)(this + 3ArcSharedObject::ArcSharedObject(this, 0) = 1;
  }
  *(unsigned char *)(this + 31) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

BOOL RERenderOptionsComponentGetMeshAttributes(unsigned __int8 *a1, unsigned char *a2, unsigned char *a3)
{
  int v3 = a1[30];
  if (a1[30])
  {
    *a2 = a1[31];
    if (a3) {
      *a3 = a1[35];
    }
  }
  return v3 != 0;
}

uint64_t RERenderOptionsComponentSetCullingEnabled(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 49) = a3;
  if (!*(unsigned char *)(this + 38)) {
    *(unsigned char *)(this + 38) = 1;
  }
  *(unsigned char *)(this + 39) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderOptionsComponentGetCullingEnabled(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 38)) {
    BOOL v1 = *(unsigned char *)(a1 + 39) != 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !*(unsigned char *)(a1 + 38) || v1;
}

BOOL RERenderOptionsComponentGetCullingInherited(uint64_t a1)
{
  return *(unsigned char *)(a1 + 38) && *(unsigned char *)(a1 + 49) != 0;
}

void RECustomMaterialInstanceCreate(re *a1)
{
  BOOL v1 = re::globalAllocators(a1);
  CFStringRef v2 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 24, 8);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)CFStringRef v2 = 0;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(void *)CFStringRef v2 = &unk_26E734C18;
}

void CustomMaterial::~CustomMaterial(CustomMaterial *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *REImageBasedReflectionContentComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void RECameraViewDescriptorsComponentSetEnvironmentRasterizationRateMap(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, void *a3, unsigned int a4)
{
  id v7 = a3;
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (a4 >= 2)
  {
    if (a4 != 2) {
      goto LABEL_7;
    }
    id v12 = v7;
    id v11 = v7;
    uint64_t v10 = (void **)(ViewDescriptor + 256);
  }
  else
  {
    id v12 = v7;
    id v9 = v7;
    uint64_t v10 = (void **)(ViewDescriptor + 248);
  }
  NS::SharedPtr<MTL::Texture>::operator=(v10, &v12);
  if (v12) {

  }
LABEL_7:
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentSetControllerMaskTexture(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if ([v3 textureType] != 3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)StringID buf = 0;
    unsigned int v5 = "Texture must be a 2D array. Please file a radar if you need provide left/right masks via separate textures.";
    uint64_t v6 = buf;
    goto LABEL_28;
  }
  if ((unint64_t)[v3 arrayLength] >= 3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v13 = 0;
    unsigned int v5 = "Texture may have at most 2 layers.";
    uint64_t v6 = (uint8_t *)&v13;
    goto LABEL_28;
  }
  if ([v3 pixelFormat] != 13)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v12 = 0;
    unsigned int v5 = "Texture pixel format must be 'MTLPixelFormatR8Uint'.";
    uint64_t v6 = (uint8_t *)&v12;
    goto LABEL_28;
  }
  if (([v3 usage] & 2) == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v11 = 0;
    unsigned int v5 = "Texture does not have 'MTLTextureUsageShaderWrite' flag set.";
    uint64_t v6 = (uint8_t *)&v11;
    goto LABEL_28;
  }
  if ([v3 storageMode])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v4 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    __int16 v10 = 0;
    unsigned int v5 = "Texture does not have 'MTLStorageModeShared' flag set.";
    uint64_t v6 = (uint8_t *)&v10;
    goto LABEL_28;
  }
  if (![v3 compressionType])
  {
    uint64_t v7 = 1;
    goto LABEL_11;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unsigned int v4 = (id)CoreRELog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    __int16 v9 = 0;
    unsigned int v5 = "Texture must not be compressed. Lossy or otherwise.";
    uint64_t v6 = (uint8_t *)&v9;
LABEL_28:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, v5, v6, 2u);
  }
LABEL_10:

  uint64_t v7 = 0;
LABEL_11:

  return v7;
}

void *RERenderGraphFileProviderArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t RERenderGraphFileProviderArrayComponentAdd(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v10);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)v10);
  uint64_t v7 = re::ecs2::RenderGraphFileProviderArrayComponent::add(a1, v9, a3, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::ecs2::Component::enqueueMarkDirty(a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v7;
}

uint64_t RERenderGraphFileProviderArrayComponentRemove(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 56);
  if (v2)
  {
    id v3 = (unsigned char *)(*(void *)(this + 72) + 72);
    uint64_t v4 = 80 * v2;
    while (*((void *)v3 - 1) != a2)
    {
      v3 += 80;
      v4 -= 80;
      if (!v4) {
        return re::ecs2::Component::enqueueMarkDirty(this);
      }
    }
    unsigned char *v3 = 1;
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RERenderGraphFileProviderArrayComponentRemoveAll(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 56);
  if (v1)
  {
    uint64_t v2 = 80 * v1;
    id v3 = (unsigned char *)(*(void *)(this + 72) + 72);
    do
    {
      unsigned char *v3 = 1;
      v3 += 80;
      v2 -= 80;
    }
    while (v2);
  }
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void RERenderGraphFileProviderArrayComponentSetRenderGraph(uint64_t a1, unint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, v6);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, (const re::AssetHandle *)v6);
  re::ecs2::RenderGraphFileProviderArrayComponent::setRenderGraph(a1, a2, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  re::ecs2::Component::enqueueMarkDirty(a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

unint64_t RERenderGraphFileProviderArrayComponentGetRenderGraph(re::ecs2::RenderGraphFileProviderArrayComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(a1, a2);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t RERenderGraphFileProviderArrayComponentSetTypeScope(re::ecs2::RenderGraphFileProviderArrayComponent *a1, unint64_t a2, const char *a3)
{
  re::ecs2::RenderGraphFileProviderArrayComponent::setTypeScope(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

unint64_t RERenderGraphFileProviderArrayComponentGetTypeScope(re::ecs2::RenderGraphFileProviderArrayComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(a1, a2);
  if (result)
  {
    unint64_t v3 = result;
    uint64_t v4 = NSString;
    if (*(unsigned char *)(v3 + 32)) {
      unint64_t v5 = *(void *)(v3 + 40);
    }
    else {
      unint64_t v5 = v3 + 33;
    }
    return [v4 stringWithUTF8String:v5];
  }
  return result;
}

uint64_t RERenderGraphFileProviderArrayComponentSetOrder(re::ecs2::RenderGraphFileProviderArrayComponent *a1, unint64_t a2, int a3)
{
  re::ecs2::RenderGraphFileProviderArrayComponent::setOrder(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

unint64_t RERenderGraphFileProviderArrayComponentGetOrder(re::ecs2::RenderGraphFileProviderArrayComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(a1, a2);
  if (result) {
    return *(unsigned int *)(result + 56);
  }
  return result;
}

uint64_t RESceneAddRenderGraphFileProviderArray(uint64_t a1)
{
  v12[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v12, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v2 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
  unint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v4 = *((unsigned __int16 *)SceneDataEntity + 41);
  if (!*((_WORD *)SceneDataEntity + 41)) {
    goto LABEL_7;
  }
  unint64_t v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                       + 16);
  uint64_t v6 = (int16x8_t *)*((void *)SceneDataEntity + 11);
  int16x8_t v7 = vld1q_dup_s16(v5);
  int v8 = 1;
  while (1)
  {
    uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
    v9.i16[0] = vmaxvq_u16(v9);
    if (v9.i32[0]) {
      break;
    }
    v8 -= 8;
    ++v6;
    if (!--v4) {
      goto LABEL_7;
    }
  }
  if (v9.u16[0] - v8 >= *((unsigned __int16 *)SceneDataEntity + 40))
  {
LABEL_7:
    re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    unint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  uint64_t v10 = re::ecs2::EntityComponentCollection::get(v2, v3);
  *(unsigned char *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
  return re::ecs2::Component::enqueueMarkDirty(v10);
}

void RESceneRemoveRenderGraphFileProviderArray(uint64_t a1)
{
  v4[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v4, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  if (SceneDataEntity)
  {
    uint64_t v2 = (re::ecs2::Entity *)((char *)SceneDataEntity + 32);
    unint64_t v3 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    re::ecs2::EntityComponentCollection::remove(v2, v3);
  }
}

void RESceneRenderGraphFileProviderArrayMarkDirty(uint64_t a1)
{
  v6[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v6, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  if (SceneDataEntity)
  {
    uint64_t v2 = SceneDataEntity;
    uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v3)
    {
      uint64_t v4 = (const re::ecs2::Component *)v3;
      unint64_t v5 = (re::ecs2::NetworkComponent *)*((void *)v2 + 25);
      if (v5)
      {
        re::ecs2::NetworkComponent::markDirty(v5, v4);
      }
    }
  }
}

uint64_t RESceneRenderGraphFileProviderArrayAdd(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  LOBYTE(v12[0]) = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v12, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, v12);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)v12);
  uint64_t v9 = re::ecs2::RenderGraphFileProviderArrayComponent::add(v8, v11, a3, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  re::ecs2::Component::enqueueMarkDirty(v8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

uint64_t RESceneRenderGraphFileProviderArrayRemove(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v9, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v5 = *(void *)(v4 + 56);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)(*(void *)(v4 + 72) + 72);
    uint64_t v7 = 80 * v5;
    while (*((void *)v6 - 1) != a2)
    {
      v6 += 80;
      v7 -= 80;
      if (!v7) {
        goto LABEL_7;
      }
    }
    *uint64_t v6 = 1;
  }
LABEL_7:
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t RESceneRenderGraphFileProviderArrayRemoveAll(uint64_t a1)
{
  v7[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v7, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v2 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = (unsigned char *)(*(void *)(v2 + 72) + 72);
    do
    {
      unsigned char *v5 = 1;
      v5 += 80;
      v4 -= 80;
    }
    while (v4);
  }
  return re::ecs2::Component::enqueueMarkDirty(v2);
}

void RESceneRenderGraphFileProviderArraySetRenderGraph(uint64_t a1, unint64_t a2, uint64_t a3)
{
  LOBYTE(v8[0]) = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v8, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v7, (const re::AssetHandle *)v8);
  re::ecs2::RenderGraphFileProviderArrayComponent::setRenderGraph(v6, a2, v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  re::ecs2::Component::enqueueMarkDirty(v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

unint64_t RESceneRenderGraphFileProviderArrayGetRenderGraph(uint64_t a1, unint64_t a2)
{
  v6[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v6, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = (re::ecs2::RenderGraphFileProviderArrayComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(v4, a2);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t RESceneRenderGraphFileProviderArraySetTypeScope(uint64_t a1, unint64_t a2, const char *a3)
{
  v8[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v8, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v6 = (re::ecs2::RenderGraphFileProviderArrayComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::ecs2::RenderGraphFileProviderArrayComponent::setTypeScope(v6, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v6);
}

unint64_t RESceneRenderGraphFileProviderArrayGetTypeScope(uint64_t a1, unint64_t a2)
{
  v9[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v9, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = (re::ecs2::RenderGraphFileProviderArrayComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(v4, a2);
  if (result)
  {
    unint64_t v6 = result;
    uint64_t v7 = NSString;
    if (*(unsigned char *)(v6 + 32)) {
      unint64_t v8 = *(void *)(v6 + 40);
    }
    else {
      unint64_t v8 = v6 + 33;
    }
    return [v7 stringWithUTF8String:v8];
  }
  return result;
}

uint64_t RESceneRenderGraphFileProviderArraySetOrder(uint64_t a1, unint64_t a2, int a3)
{
  v8[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v8, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  unint64_t v6 = (re::ecs2::RenderGraphFileProviderArrayComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::ecs2::RenderGraphFileProviderArrayComponent::setOrder(v6, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v6);
}

unint64_t RESceneRenderGraphFileProviderArrayGetOrder(uint64_t a1, unint64_t a2)
{
  v6[0] = 0;
  SceneDataEntity = makeSceneDataEntity(a1, (uint64_t)v6, 1, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
  uint64_t v4 = (re::ecs2::RenderGraphFileProviderArrayComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t result = re::ecs2::RenderGraphFileProviderArrayComponent::entry(v4, a2);
  if (result) {
    return *(unsigned int *)(result + 56);
  }
  return result;
}

re::MaterialParameterBlock *REMaterialAssetCreateMaterialParameterBlock(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  if (!v8[1])
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "REMaterialAssetCreateMaterialParameterBlock was called with a NULL material handle. This will crash in the future.", buf, 2u);
    }
  }
  *(void *)StringID buf = a2;
  re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)buf, &v6);
  uint64_t v4 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v4;
}

void REMaterialAssetSetBool(uint64_t a1, const char *a2, char a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setBool(*(re::MaterialParameterBlock **)(v5 + 1672), a2, a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetBool(uint64_t a1, char *a2, BOOL *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v32);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v32);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v29);
  if ((BYTE4(v30) & 7) == 1 && v31 == 2)
  {
    *a3 = *(unsigned char *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v29);
LABEL_28:
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v9;
  re::MaterialParameterTable::handle(v8, &v25, (uint64_t)&v26);
  uint64_t v29 = v26;
  long long v30 = v27;
  char v31 = v28;
  uint64_t v25 = 0;
  uint64_t v14 = *(void *)(v6 + 1664);
  if ((BYTE4(v27) & 7) == 1 && v28 == 2)
  {
    *a3 = re::MaterialParameterTable::BOOLValue(v14 + 224, (uint64_t)&v29);
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  if (a2)
  {
    uint64_t v18 = *a2;
    if (*a2)
    {
      char v19 = a2[1];
      if (v19)
      {
        uint64_t v20 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v18 = 31 * v18 + v19;
          int v21 = *v20++;
          char v19 = v21;
        }
        while (v21);
      }
      v18 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v18;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v16 + 248), &v24, (uint64_t)&v26);
  uint64_t v29 = v26;
  char v31 = v28;
  long long v30 = v27;
  uint64_t v24 = 0;
  BOOL v23 = (BYTE4(v27) & 7) == 1 && v31 == 2;
  uint64_t v13 = v23;
  if (v23) {
    *a3 = re::MaterialParameterTable::BOOLValue(v16 + 248, (uint64_t)&v29);
  }
  if (v16) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  return v13;
}

void REMaterialAssetSetFloat(uint64_t a1, const char *a2, float a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setFloat(*(re::MaterialParameterBlock **)(v5 + 1672), a2, a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

void REMaterialAssetLoadedSetFloat(uint64_t a1, const char *a2, float a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setFloat(*(re::MaterialParameterBlock **)(v5 + 1672), a2, a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetFloat(uint64_t a1, char *a2, float *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v33);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v33);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v30);
  if ((BYTE4(v31) & 7) == 1 && v32 == 1)
  {
    float v14 = *(float *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v30);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v9;
  re::MaterialParameterTable::handle(v8, &v26, (uint64_t)&v27);
  uint64_t v30 = v27;
  long long v31 = v28;
  char v32 = v29;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v28) & 7) == 1 && v29 == 1)
  {
    float v14 = re::MaterialParameterTable::floatValue(v15 + 224, (uint64_t)&v30);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        int v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v25, (uint64_t)&v27);
  uint64_t v30 = v27;
  char v32 = v29;
  long long v31 = v28;
  uint64_t v25 = 0;
  BOOL v24 = (BYTE4(v28) & 7) == 1 && v32 == 1;
  uint64_t v13 = v24;
  if (v24) {
    *a3 = re::MaterialParameterTable::floatValue(v17 + 248, (uint64_t)&v30);
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v13;
}

void REMaterialAssetSetInt(uint64_t a1, const char *a2, int a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setInt(*(re::MaterialParameterBlock **)(v5 + 1672), a2, a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetInt(uint64_t a1, char *a2, _DWORD *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v32);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v32);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v29);
  if ((BYTE4(v30) & 7) == 1 && v31 == 3)
  {
    *a3 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v29);
LABEL_28:
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v9;
  re::MaterialParameterTable::handle(v8, &v25, (uint64_t)&v26);
  uint64_t v29 = v26;
  long long v30 = v27;
  char v31 = v28;
  uint64_t v25 = 0;
  uint64_t v14 = *(void *)(v6 + 1664);
  if ((BYTE4(v27) & 7) == 1 && v28 == 3)
  {
    *a3 = re::MaterialParameterTable::intValue(v14 + 224, (uint64_t)&v29);
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  if (a2)
  {
    uint64_t v18 = *a2;
    if (*a2)
    {
      char v19 = a2[1];
      if (v19)
      {
        char v20 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v18 = 31 * v18 + v19;
          int v21 = *v20++;
          char v19 = v21;
        }
        while (v21);
      }
      v18 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v18;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v16 + 248), &v24, (uint64_t)&v26);
  uint64_t v29 = v26;
  char v31 = v28;
  long long v30 = v27;
  uint64_t v24 = 0;
  BOOL v23 = (BYTE4(v27) & 7) == 1 && v31 == 3;
  uint64_t v13 = v23;
  if (v23) {
    *a3 = re::MaterialParameterTable::intValue(v16 + 248, (uint64_t)&v29);
  }
  if (v16) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  return v13;
}

void REMaterialAssetSetUInt(uint64_t a1, const char *a2, int a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setUint(*(re::MaterialParameterBlock **)(v5 + 1672), a2, a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetUInt(uint64_t a1, char *a2, _DWORD *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v32);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v32);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v29);
  if ((BYTE4(v30) & 7) == 1 && v31 == 7)
  {
    *a3 = *(_DWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v29);
LABEL_28:
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v9;
  re::MaterialParameterTable::handle(v8, &v25, (uint64_t)&v26);
  uint64_t v29 = v26;
  long long v30 = v27;
  char v31 = v28;
  uint64_t v25 = 0;
  uint64_t v14 = *(void *)(v6 + 1664);
  if ((BYTE4(v27) & 7) == 1 && v28 == 7)
  {
    *a3 = re::MaterialParameterTable::intValue(v14 + 224, (uint64_t)&v29);
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  if (a2)
  {
    uint64_t v18 = *a2;
    if (*a2)
    {
      char v19 = a2[1];
      if (v19)
      {
        char v20 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v18 = 31 * v18 + v19;
          int v21 = *v20++;
          char v19 = v21;
        }
        while (v21);
      }
      v18 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v24 = v18;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v16 + 248), &v24, (uint64_t)&v26);
  uint64_t v29 = v26;
  char v31 = v28;
  long long v30 = v27;
  uint64_t v24 = 0;
  BOOL v23 = (BYTE4(v27) & 7) == 1 && v31 == 7;
  uint64_t v13 = v23;
  if (v23) {
    *a3 = re::MaterialParameterTable::intValue(v16 + 248, (uint64_t)&v29);
  }
  if (v16) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  return v13;
}

void REMaterialAssetSetFloat2F(uint64_t a1, char *a2, double a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setVector2F(*(re::MaterialParameterBlock **)(v5 + 1672), a2, *(uint64_t *)&a3, (uint64_t)v6);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetFloat2F(uint64_t a1, char *a2, uint64_t *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v30);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v30);
  if (v5)
  {
    uint64_t v6 = v5;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v27);
    if ((BYTE4(v28) & 7) == 1 && v29 == 32)
    {
      *a3 = *(void *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v27);
LABEL_16:
      uint64_t v7 = 1;
      goto LABEL_17;
    }
    uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          __int16 v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
        v9 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = v9;
    re::MaterialParameterTable::handle(v8, &v23, (uint64_t)&v24);
    uint64_t v27 = v24;
    long long v28 = v25;
    char v29 = v26;
    uint64_t v23 = 0;
    uint64_t v13 = *(void *)(v6 + 1664);
    if ((BYTE4(v25) & 7) == 1 && v26 == 32)
    {
      *a3 = re::MaterialParameterTable::vector2FValue(v13 + 224, (uint64_t)&v27);
      goto LABEL_16;
    }
    uint64_t v15 = *(void *)(v13 + 16);
    if (v15) {
      id v16 = (id)(v15 + 8);
    }
    if (a2)
    {
      uint64_t v17 = *a2;
      if (*a2)
      {
        char v18 = a2[1];
        if (v18)
        {
          char v19 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v17 = 31 * v17 + v18;
            int v20 = *v19++;
            char v18 = v20;
          }
          while (v20);
        }
        v17 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v22 = v17;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v15 + 248), &v22, (uint64_t)&v24);
    uint64_t v27 = v24;
    char v29 = v26;
    long long v28 = v25;
    uint64_t v22 = 0;
    BOOL v21 = (BYTE4(v25) & 7) == 1 && v29 == 32;
    uint64_t v7 = v21;
    if (v21) {
      *a3 = re::MaterialParameterTable::vector2FValue(v15 + 248, (uint64_t)&v27);
    }
    if (v15) {
  }
    }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  return v7;
}

void REMaterialAssetSetInt2(uint64_t a1, char *a2, double a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setInt2(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetInt2(uint64_t a1, char *a2, double *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v33);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v33);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v30);
  if ((BYTE4(v31) & 7) == 1 && v32 == 4)
  {
    double v14 = *(double *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v30);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v9;
  re::MaterialParameterTable::handle(v8, &v26, (uint64_t)&v27);
  uint64_t v30 = v27;
  long long v31 = v28;
  char v32 = v29;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v28) & 7) == 1 && v29 == 4)
  {
    double v14 = re::MaterialParameterTable::int2Value(v15 + 224, (uint64_t)&v30);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        BOOL v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v25, (uint64_t)&v27);
  uint64_t v30 = v27;
  char v32 = v29;
  long long v31 = v28;
  uint64_t v25 = 0;
  BOOL v24 = (BYTE4(v28) & 7) == 1 && v32 == 4;
  uint64_t v13 = v24;
  if (v24) {
    *a3 = re::MaterialParameterTable::int2Value(v17 + 248, (uint64_t)&v30);
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v13;
}

void REMaterialAssetSetUInt2(uint64_t a1, char *a2, double a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v5)
  {
    re::MaterialParameterBlock::setUint2(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetUInt2(uint64_t a1, char *a2, double *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v33);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v33);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v30);
  if ((BYTE4(v31) & 7) == 1 && v32 == 8)
  {
    double v14 = *(double *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v30);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        __int16 v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v9;
  re::MaterialParameterTable::handle(v8, &v26, (uint64_t)&v27);
  uint64_t v30 = v27;
  long long v31 = v28;
  char v32 = v29;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v28) & 7) == 1 && v29 == 8)
  {
    double v14 = re::MaterialParameterTable::int2Value(v15 + 224, (uint64_t)&v30);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        BOOL v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v25, (uint64_t)&v27);
  uint64_t v30 = v27;
  char v32 = v29;
  long long v31 = v28;
  uint64_t v25 = 0;
  BOOL v24 = (BYTE4(v28) & 7) == 1 && v32 == 8;
  uint64_t v13 = v24;
  if (v24) {
    *a3 = re::MaterialParameterTable::int2Value(v17 + 248, (uint64_t)&v30);
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v13;
}

void REMaterialAssetSetFloat3F(uint64_t a1, const re::MaterialAsset *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  ++*(_DWORD *)(v13 + 260);
  uint64_t v4 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v12);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v8 = (re::MaterialParameterBlock *)*((void *)v6 + 209);
    if (v7)
    {
      re::MaterialParameterBlock::setColorGamut3F(v8, (char *)a2, a3.n128_u32[0] | ((unint64_t)a3.n128_u32[1] << 32), a3.n128_u32[2], (uint64_t)v11);
      v11[0] = 0;
    }
    else
    {
      re::MaterialParameterBlock::setVector3F(v8, (char *)a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)v10);
      v10[0] = 0;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
}

uint64_t anonymous namespace'::warnIfColorParameter(_anonymous_namespace_ *this, const re::MaterialAsset *a2, const char *a3, const char *a4, const char *a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (_anonymous_namespace_ *)((char *)this + 40));
  uint64_t v9 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v13);
  if ((re::MaterialDefinitionAsset::getOriginalConstantParameterType(v9, (const char *)a2) & 0xFE) == 0x14)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    char v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((re::MaterialAsset::getOriginalConstantParameterType(this, (const char *)a2) & 0xFE) != 0x14)
  {
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  char v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_10:
    *(_DWORD *)StringID buf = 136315394;
    uint64_t v15 = a3;
    __int16 v16 = 2080;
    uint64_t v17 = a4;
    _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "%s was called for a Color parameter. To get the right color space context for the color value, %s should be used instead.", buf, 0x16u);
  }
LABEL_11:

  uint64_t v11 = 1;
LABEL_13:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v11;
}

uint64_t REMaterialAssetGetFloat3F(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v52);
  uint64_t v5 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v52);
  if (v5)
  {
    int v7 = v5;
    re::MaterialParameterBlock::handle(*((re::MaterialParameterBlock **)v7 + 209), (const char *)a2, (uint64_t)&v49);
    if ((BYTE4(v50) & 7) == 1 && v51 == 33)
    {
      if (v8)
      {
        uint64_t v46 = re::MaterialParameterBlock::colorGamut3FValue(*((void *)v7 + 209), (uint64_t)&v49);
        *(void *)&long long v47 = v9;
        goto LABEL_6;
      }
      *(_OWORD *)a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*((void *)v7 + 209), (uint64_t)&v49);
      goto LABEL_31;
    }
    uint64_t v12 = (re::MaterialParameterTable *)(*((void *)v7 + 208) + 224);
    if (a2)
    {
      uint64_t v13 = (char)*a2;
      if (*a2)
      {
        char v14 = a2[1];
        if (v14)
        {
          uint64_t v15 = a2 + 2;
          do
          {
            uint64_t v13 = 31 * v13 + v14;
            int v16 = *v15++;
            char v14 = v16;
          }
          while (v16);
        }
        v13 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v45 = v13;
    re::MaterialParameterTable::handle(v12, &v45, (uint64_t)&v46);
    uint64_t v49 = v46;
    long long v50 = v47;
    char v51 = v48;
    uint64_t v45 = 0;
    if ((BYTE4(v47) & 7) == 1 && v48 == 33)
    {
      if (v8)
      {
        re::MaterialAsset::tryGetOriginalColorGamut3FParameterValue(v7, (const char *)a2, (uint64_t)&v46);
        if ((_BYTE)v46)
        {
          uint64_t v11 = (uint64_t *)((char *)&v46 + 4);
          uint64_t v10 = 1;
          goto LABEL_21;
        }
        re::MaterialParameterTable::vector3FValue(*((void *)v7 + 208) + 224, (uint64_t)&v49);
        *(void *)a3 = v34;
        *(void *)(a3 + 8) = v35;
        uint64_t v36 = *((void *)v7 + 209);
        if (v36)
        {
          uint64_t v36 = *(void *)(v36 + 968);
          if (v36)
          {
            uint64_t v36 = *(void *)(v36 + 152);
            if (v36) {
              LOBYTE(v36) = *(unsigned char *)v36;
            }
          }
        }
        uint64_t v46 = v34;
        LODWORD(v47) = v35;
        BYTE4(v47) = v36;
LABEL_6:
        uint64_t v10 = 1;
        uint64_t v11 = &v46;
LABEL_21:
        *(void *)&long long v17 = re::ColorGamut3F::as(v11, 0, 1);
        DWORD2(v17) = v18;
        *(_OWORD *)a3 = v17;
        goto LABEL_48;
      }
      re::MaterialParameterTable::vector3FValue(*((void *)v7 + 208) + 224, (uint64_t)&v49);
      *(void *)a3 = v25;
      *(void *)(a3 + 8) = v26;
LABEL_31:
      uint64_t v10 = 1;
      goto LABEL_48;
    }
    uint64_t v19 = *(void *)(*((void *)v7 + 208) + 16);
    if (v19) {
      id v20 = (id)(v19 + 8);
    }
    if (a2)
    {
      uint64_t v21 = (char)*a2;
      if (*a2)
      {
        char v22 = a2[1];
        if (v22)
        {
          uint64_t v23 = a2 + 2;
          do
          {
            uint64_t v21 = 31 * v21 + v22;
            int v24 = *v23++;
            char v22 = v24;
          }
          while (v24);
        }
        v21 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v44 = v21;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v19 + 248), &v44, (uint64_t)&v46);
    uint64_t v49 = v46;
    char v51 = v48;
    long long v50 = v47;
    uint64_t v44 = 0;
    BOOL v27 = (BYTE4(v47) & 7) == 1 && v51 == 33;
    uint64_t v10 = v27;
    if (!v27) {
      goto LABEL_46;
    }
    if (!v8)
    {
      re::MaterialParameterTable::vector3FValue(v19 + 248, (uint64_t)&v49);
      *(void *)a3 = v31;
      *(void *)(a3 + 8) = v32;
LABEL_46:
      if (!v19) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v46, (_anonymous_namespace_ *)((char *)v7 + 40));
    long long v28 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)&v46);
    re::MaterialDefinitionAsset::tryGetOriginalColorGamut3FParameterValue(v28, (const char *)a2, (uint64_t)v42);
    if (v42[0])
    {
      *(void *)&long long v29 = re::ColorGamut3F::as(&v43, 0, 1);
      DWORD2(v29) = v30;
      *(_OWORD *)a3 = v29;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
      if (!v19) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
    re::MaterialParameterTable::vector3FValue(v19 + 248, (uint64_t)&v49);
    *(void *)a3 = v37;
    *(void *)(a3 + 8) = v38;
    uint64_t v39 = *((void *)v7 + 209);
    if (v39)
    {
      uint64_t v39 = *(void *)(v39 + 968);
      if (v39)
      {
        uint64_t v39 = *(void *)(v39 + 152);
        if (v39) {
          LOBYTE(v39) = *(unsigned char *)v39;
        }
      }
    }
    uint64_t v46 = v37;
    LODWORD(v47) = v38;
    BYTE4(v47) = v39;
    *(void *)&long long v40 = re::ColorGamut3F::as(&v46, 0, 1);
    DWORD2(v4ArcSharedObject::ArcSharedObject(this, 0) = v41;
    *(_OWORD *)a3 = v40;
    if (v19) {
LABEL_47:
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_48:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v52);
  return v10;
}

void REMaterialAssetSetColor3F(uint64_t a1, char *a2, unsigned int a3, int8x16_t a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  ++*(_DWORD *)(v14 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v13);
  if (v6)
  {
    int32x2_t v7 = vzip1_s32(*(int32x2_t *)a4.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL));
    v8.i64[0] = v7.u32[0];
    v8.i64[1] = v7.u32[1];
    v9.i64[0] = a4.u32[1];
    v9.i64[1] = a3;
    int8x16_t v10 = vorrq_s8((int8x16_t)vshlq_n_s64(v9, 0x20uLL), v8);
    re::MaterialParameterBlock::setColorGamut3F(*(re::MaterialParameterBlock **)(v6 + 1672), a2, v10.i64[0], v10.i64[1], (uint64_t)v12);
    v12[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
}

uint64_t REMaterialAssetGetColor3F(uint64_t a1, char *a2, uint64_t a3, unsigned char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v45);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v45);
  if (v7)
  {
    int8x16_t v8 = (void *)v7;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v7 + 1672), a2, (uint64_t)&v42);
    int v9 = BYTE4(v43) & 7;
    if ((BYTE4(v43) & 7) != 0)
    {
      if (v9 == 1 && v44 == 20)
      {
        *(void *)&long long v13 = re::MaterialParameterBlock::colorGamut3FValue(v8[209], (uint64_t)&v42);
        DWORD2(v13) = v14;
        *(_OWORD *)a3 = v13;
        *a4 = v15;
        goto LABEL_25;
      }
      if (v9 == 1 && v44 == 33)
      {
        *(_OWORD *)a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(v8[209], (uint64_t)&v42);
LABEL_24:
        *a4 = 0;
        goto LABEL_25;
      }
    }
    re::MaterialAsset::tryGetOriginalColorGamut3FParameterValue((re::MaterialAsset *)v8, a2, (uint64_t)v40);
    if (v40[0])
    {
      char v12 = BYTE12(v41);
      *(_OWORD *)a3 = v41;
      *a4 = v12;
LABEL_25:
      uint64_t v11 = 1;
      goto LABEL_26;
    }
    int v16 = (re::MaterialParameterTable *)(v8[208] + 224);
    if (a2)
    {
      uint64_t v17 = *a2;
      if (*a2)
      {
        char v18 = a2[1];
        if (v18)
        {
          uint64_t v19 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v17 = 31 * v17 + v18;
            int v20 = *v19++;
            char v18 = v20;
          }
          while (v20);
        }
        v17 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v37 = v17;
    re::MaterialParameterTable::handle(v16, &v37, (uint64_t)v38);
    uint64_t v42 = v38[0];
    long long v43 = *(_OWORD *)&v38[1];
    char v44 = v39;
    uint64_t v37 = 0;
    if ((BYTE4(v38[1]) & 7) == 1 && v39 == 33)
    {
      re::MaterialParameterTable::vector3FValue(v8[208] + 224, (uint64_t)&v42);
      *(void *)a3 = v21;
      *(void *)(a3 + 8) = v22;
      goto LABEL_24;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v36, (const re::AssetHandle *)(v8 + 5));
    int v24 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v36);
    re::MaterialDefinitionAsset::tryGetOriginalColorGamut3FParameterValue(v24, a2, (uint64_t)v38);
    if (LOBYTE(v38[0]))
    {
      long long v41 = *(_OWORD *)((char *)v38 + 4);
      char v25 = v38[2];
      *(_OWORD *)a3 = *(_OWORD *)((char *)v38 + 4);
      *a4 = v25;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v26 = *(void *)(v8[208] + 16);
      if (v26) {
        id v27 = (id)(v26 + 8);
      }
      if (a2)
      {
        uint64_t v28 = *a2;
        if (*a2)
        {
          char v29 = a2[1];
          if (v29)
          {
            int v30 = (unsigned __int8 *)(a2 + 2);
            do
            {
              uint64_t v28 = 31 * v28 + v29;
              int v31 = *v30++;
              char v29 = v31;
            }
            while (v31);
          }
          v28 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v35 = v28;
      re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v26 + 248), &v35, (uint64_t)v38);
      uint64_t v42 = v38[0];
      char v44 = v39;
      long long v43 = *(_OWORD *)&v38[1];
      uint64_t v35 = 0;
      BOOL v32 = (BYTE4(v38[1]) & 7) == 1 && v44 == 33;
      uint64_t v11 = v32;
      if (v32)
      {
        re::MaterialParameterTable::vector3FValue(v26 + 248, (uint64_t)&v42);
        *(void *)a3 = v33;
        *(void *)(a3 + 8) = v34;
        *a4 = 0;
      }
      if (v26) {
    }
      }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_26:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v45);
  return v11;
}

void REMaterialAssetSetInt3(uint64_t a1, char *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v4)
  {
    re::MaterialParameterBlock::setInt3(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetInt3(uint64_t a1, char *a2, _OWORD *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v34);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v34);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v31);
  if ((BYTE4(v32) & 7) == 1 && v33 == 5)
  {
    long long v14 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v31);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        uint64_t v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v27 = v9;
  re::MaterialParameterTable::handle(v8, &v27, (uint64_t)&v28);
  uint64_t v31 = v28;
  long long v32 = v29;
  char v33 = v30;
  uint64_t v27 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v29) & 7) == 1 && v30 == 5)
  {
    *(double *)&long long v14 = re::MaterialParameterTable::int3Value(v15 + 224, (uint64_t)&v31);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        uint64_t v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v26, (uint64_t)&v28);
  uint64_t v31 = v28;
  char v33 = v30;
  long long v32 = v29;
  uint64_t v26 = 0;
  BOOL v24 = (BYTE4(v29) & 7) == 1 && v33 == 5;
  uint64_t v13 = v24;
  if (v24)
  {
    *(double *)&long long v25 = re::MaterialParameterTable::int3Value(v17 + 248, (uint64_t)&v31);
    *a3 = v25;
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v34);
  return v13;
}

void REMaterialAssetSetUInt3(uint64_t a1, char *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v4)
  {
    re::MaterialParameterBlock::setUint3(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetUInt3(uint64_t a1, char *a2, _OWORD *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v34);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v34);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v31);
  if ((BYTE4(v32) & 7) == 1 && v33 == 9)
  {
    long long v14 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v31);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        uint64_t v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v27 = v9;
  re::MaterialParameterTable::handle(v8, &v27, (uint64_t)&v28);
  uint64_t v31 = v28;
  long long v32 = v29;
  char v33 = v30;
  uint64_t v27 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v29) & 7) == 1 && v30 == 9)
  {
    *(double *)&long long v14 = re::MaterialParameterTable::int3Value(v15 + 224, (uint64_t)&v31);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        uint64_t v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v26, (uint64_t)&v28);
  uint64_t v31 = v28;
  char v33 = v30;
  long long v32 = v29;
  uint64_t v26 = 0;
  BOOL v24 = (BYTE4(v29) & 7) == 1 && v33 == 9;
  uint64_t v13 = v24;
  if (v24)
  {
    *(double *)&long long v25 = re::MaterialParameterTable::int3Value(v17 + 248, (uint64_t)&v31);
    *a3 = v25;
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v34);
  return v13;
}

void REMaterialAssetSetFloat4F(uint64_t a1, const re::MaterialAsset *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  ++*(_DWORD *)(v15 + 260);
  uint64_t v4 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v14);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v8 = (re::MaterialParameterBlock *)*((void *)v6 + 209);
    if (v7)
    {
      __n128 v11 = a3;
      char v12 = 0;
      re::MaterialParameterBlock::setColorGamut4F(v8, (char *)a2, (uint64_t)&v11, (uint64_t)v13);
      v13[0] = 0;
    }
    else
    {
      re::MaterialParameterBlock::setVector4F(v8, (char *)a2, a3.n128_i64[0], a3.n128_i64[1], (uint64_t)v10);
      v10[0] = 0;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
}

uint64_t REMaterialAssetGetFloat4F(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v43);
  uint64_t v5 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v43);
  uint64_t v7 = (uint64_t)v5;
  if (v5)
  {
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v7 + 1672), (const char *)a2, (uint64_t)&v40);
    if ((BYTE4(v41) & 7) == 1 && (v42 == 48 || v42 == 34))
    {
      if (v8)
      {
        re::MaterialParameterBlock::colorGamut4FValue(*(void *)(v7 + 1672), (uint64_t)&v40, (uint64_t)&v34);
        goto LABEL_48;
      }
      unint64_t Constant = (uint64_t *)re::ShaderGraphMaterial::getConstant(*(void *)(v7 + 1672), (uint64_t)&v40);
      uint64_t v22 = Constant[1];
      *a3 = *Constant;
      a3[1] = v22;
LABEL_40:
      uint64_t v7 = 1;
      goto LABEL_56;
    }
    uint64_t v9 = (re::MaterialParameterTable *)(*(void *)(v7 + 1664) + 224);
    if (a2)
    {
      uint64_t v10 = (char)*a2;
      if (*a2)
      {
        char v11 = a2[1];
        if (v11)
        {
          char v12 = a2 + 2;
          do
          {
            uint64_t v10 = 31 * v10 + v11;
            int v13 = *v12++;
            char v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v37 = v10;
    re::MaterialParameterTable::handle(v9, &v37, (uint64_t)v38);
    uint64_t v40 = *(void *)v38;
    long long v41 = *(_OWORD *)&v38[8];
    char v42 = v39;
    uint64_t v37 = 0;
    if ((v38[12] & 7) == 1 && (v42 == 48 || v42 == 34))
    {
      if (v8)
      {
        re::MaterialAsset::tryGetOriginalColorGamut4FParameterValue((re::MaterialAsset *)v7, (const char *)a2, (uint64_t)v38);
        if (v38[0])
        {
          uint64_t v7 = 1;
          re::ColorGamut4F::as((uint64_t)&v38[4], 0, 1, (uint64_t)&v34);
          long long v14 = v34;
LABEL_49:
          *(_OWORD *)a3 = v14;
          goto LABEL_56;
        }
        uint64_t v26 = re::MaterialParameterTable::vector4FValue(*(void *)(v7 + 1664) + 224, (uint64_t)&v40);
        *a3 = v26;
        a3[1] = v27;
        uint64_t v28 = *(void *)(v7 + 1672);
        if (v28)
        {
          uint64_t v28 = *(void *)(v28 + 968);
          if (v28)
          {
            uint64_t v28 = *(void *)(v28 + 152);
            if (v28) {
              LOBYTE(v28) = *(unsigned char *)v28;
            }
          }
        }
        *(void *)&long long v34 = v26;
        *((void *)&v34 + 1) = v27;
        char v35 = v28;
LABEL_48:
        uint64_t v7 = 1;
        re::ColorGamut4F::as((uint64_t)&v34, 0, 1, (uint64_t)v38);
        long long v14 = *(_OWORD *)v38;
        goto LABEL_49;
      }
      *a3 = re::MaterialParameterTable::vector4FValue(*(void *)(v7 + 1664) + 224, (uint64_t)&v40);
      a3[1] = v24;
      goto LABEL_40;
    }
    uint64_t v15 = *(void *)(*(void *)(v7 + 1664) + 16);
    if (v15) {
      id v16 = (id)(v15 + 8);
    }
    if (a2)
    {
      uint64_t v17 = (char)*a2;
      if (*a2)
      {
        char v18 = a2[1];
        if (v18)
        {
          uint64_t v19 = a2 + 2;
          do
          {
            uint64_t v17 = 31 * v17 + v18;
            int v20 = *v19++;
            char v18 = v20;
          }
          while (v20);
        }
        v17 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v36 = v17;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v15 + 248), &v36, (uint64_t)v38);
    uint64_t v40 = *(void *)v38;
    char v42 = v39;
    long long v41 = *(_OWORD *)&v38[8];
    uint64_t v36 = 0;
    if ((v38[12] & 7) != 1 || v42 != 48 && v42 != 34)
    {
      uint64_t v7 = 0;
      if (!v15) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    if (!v8)
    {
      *a3 = re::MaterialParameterTable::vector4FValue(v15 + 248, (uint64_t)&v40);
      a3[1] = v25;
      uint64_t v7 = 1;
      if (!v15) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v38, (const re::AssetHandle *)(v7 + 40));
    uint64_t v23 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v38);
    re::MaterialDefinitionAsset::tryGetOriginalColorGamut4FParameterValue(v23, (const char *)a2, (uint64_t)&v34);
    if ((_BYTE)v34)
    {
      uint64_t v7 = 1;
      re::ColorGamut4F::as((uint64_t)&v34 + 4, 0, 1, (uint64_t)&v33);
      *(_OWORD *)a3 = v33;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v38);
      if (!v15) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v38);
    uint64_t v29 = re::MaterialParameterTable::vector4FValue(v15 + 248, (uint64_t)&v40);
    *a3 = v29;
    a3[1] = v30;
    uint64_t v31 = *(void *)(v7 + 1672);
    if (v31)
    {
      uint64_t v31 = *(void *)(v31 + 968);
      if (v31)
      {
        uint64_t v31 = *(void *)(v31 + 152);
        if (v31) {
          LOBYTE(v31) = *(unsigned char *)v31;
        }
      }
    }
    *(void *)&long long v34 = v29;
    *((void *)&v34 + 1) = v30;
    char v35 = v31;
    uint64_t v7 = 1;
    re::ColorGamut4F::as((uint64_t)&v34, 0, 1, (uint64_t)v38);
    *(_OWORD *)a3 = *(_OWORD *)v38;
    if (v15) {
LABEL_55:
    }
  }
LABEL_56:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
  return v7;
}

void REMaterialAssetSetColor4F(uint64_t a1, char *a2, char a3, __n128 a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  ++*(_DWORD *)(v13 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v12);
  if (v6)
  {
    uint64_t v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
    __n128 v9 = a4;
    char v10 = a3;
    re::MaterialParameterBlock::setColorGamut4F(v7, a2, (uint64_t)&v9, (uint64_t)v11);
    v11[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
}

uint64_t REMaterialAssetGetColor4F(uint64_t a1, char *a2, uint64_t a3, unsigned char *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v42);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v42);
  if (v7)
  {
    int v8 = (void *)v7;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v7 + 1672), a2, (uint64_t)&v39);
    int v9 = BYTE4(v40) & 7;
    if (v9)
    {
      if (v9 == 1 && v41 == 21)
      {
        re::MaterialParameterBlock::colorGamut4FValue(v8[209], (uint64_t)&v39, (uint64_t)v34);
        *(_OWORD *)a3 = *(_OWORD *)v34;
        char v14 = v34[16];
        goto LABEL_15;
      }
      if (v9 == 1 && (v41 == 48 || v41 == 34))
      {
        unint64_t Constant = (void *)re::ShaderGraphMaterial::getConstant(v8[209], (uint64_t)&v39);
        uint64_t v12 = Constant[1];
        *(void *)a3 = *Constant;
        *(void *)(a3 + 8) = v12;
LABEL_27:
        *a4 = 0;
        goto LABEL_28;
      }
    }
    re::MaterialAsset::tryGetOriginalColorGamut4FParameterValue((re::MaterialAsset *)v8, a2, (uint64_t)v36);
    if (v36[0])
    {
      char v14 = v38;
      *(_OWORD *)a3 = v37;
LABEL_15:
      *a4 = v14;
LABEL_28:
      uint64_t v13 = 1;
      goto LABEL_29;
    }
    uint64_t v15 = (re::MaterialParameterTable *)(v8[208] + 224);
    if (a2)
    {
      uint64_t v16 = *a2;
      if (*a2)
      {
        char v17 = a2[1];
        if (v17)
        {
          char v18 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v16 = 31 * v16 + v17;
            int v19 = *v18++;
            char v17 = v19;
          }
          while (v19);
        }
        v16 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v33 = v16;
    re::MaterialParameterTable::handle(v15, &v33, (uint64_t)v34);
    uint64_t v39 = *(void *)v34;
    long long v40 = *(_OWORD *)&v34[8];
    char v41 = v35;
    uint64_t v33 = 0;
    if ((v34[12] & 7) == 1 && (v41 == 48 || v41 == 34))
    {
      *(void *)a3 = re::MaterialParameterTable::vector4FValue(v8[208] + 224, (uint64_t)&v39);
      *(void *)(a3 + 8) = v20;
      goto LABEL_27;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v32, (const re::AssetHandle *)(v8 + 5));
    uint64_t v22 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v32);
    re::MaterialDefinitionAsset::tryGetOriginalColorGamut4FParameterValue(v22, a2, (uint64_t)v34);
    if (v34[0])
    {
      long long v37 = *(_OWORD *)&v34[4];
      char v23 = v34[20];
      int v38 = *(_DWORD *)&v34[20];
      *(_OWORD *)a3 = *(_OWORD *)&v34[4];
      *a4 = v23;
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v24 = *(void *)(v8[208] + 16);
      if (v24) {
        id v25 = (id)(v24 + 8);
      }
      if (a2)
      {
        uint64_t v26 = *a2;
        if (*a2)
        {
          char v27 = a2[1];
          if (v27)
          {
            uint64_t v28 = (unsigned __int8 *)(a2 + 2);
            do
            {
              uint64_t v26 = 31 * v26 + v27;
              int v29 = *v28++;
              char v27 = v29;
            }
            while (v29);
          }
          v26 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v31 = v26;
      re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v24 + 248), &v31, (uint64_t)v34);
      uint64_t v39 = *(void *)v34;
      char v41 = v35;
      long long v40 = *(_OWORD *)&v34[8];
      uint64_t v31 = 0;
      if ((v34[12] & 7) == 1 && (v41 == 48 || v41 == 34))
      {
        *(void *)a3 = re::MaterialParameterTable::vector4FValue(v24 + 248, (uint64_t)&v39);
        *(void *)(a3 + 8) = v30;
        *a4 = 0;
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (v24) {
    }
      }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v42);
  return v13;
}

void REMaterialAssetSetInt4(uint64_t a1, char *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v4)
  {
    re::MaterialParameterBlock::setInt4(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetInt4(uint64_t a1, char *a2, __n128 *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v33);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v33);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v30);
  if ((BYTE4(v31) & 7) == 1 && v32 == 6)
  {
    __n128 v14 = *(__n128 *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v30);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        char v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v9;
  re::MaterialParameterTable::handle(v8, &v26, (uint64_t)&v27);
  uint64_t v30 = v27;
  long long v31 = v28;
  char v32 = v29;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v28) & 7) == 1 && v29 == 6)
  {
    __n128 v14 = re::MaterialParameterTable::int4Value(v15 + 224, (uint64_t)&v30);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        uint64_t v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v25, (uint64_t)&v27);
  uint64_t v30 = v27;
  char v32 = v29;
  long long v31 = v28;
  uint64_t v25 = 0;
  BOOL v24 = (BYTE4(v28) & 7) == 1 && v32 == 6;
  uint64_t v13 = v24;
  if (v24) {
    *a3 = re::MaterialParameterTable::int4Value(v17 + 248, (uint64_t)&v30);
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v13;
}

void REMaterialAssetSetUInt4(uint64_t a1, char *a2, __n128 a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  ++*(_DWORD *)(v8 + 260);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v7);
  if (v4)
  {
    re::MaterialParameterBlock::setUint4(*(re::MaterialParameterBlock **)(v4 + 1672), a2, (uint64_t)v6, a3);
    v6[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
}

uint64_t REMaterialAssetGetUInt4(uint64_t a1, char *a2, __n128 *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v33);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v33);
  if (!v5)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v5;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v30);
  if ((BYTE4(v31) & 7) == 1 && v32 == 10)
  {
    __n128 v14 = *(__n128 *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v30);
LABEL_28:
    *a3 = v14;
    uint64_t v13 = 1;
    goto LABEL_29;
  }
  uint64_t v8 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        char v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v26 = v9;
  re::MaterialParameterTable::handle(v8, &v26, (uint64_t)&v27);
  uint64_t v30 = v27;
  long long v31 = v28;
  char v32 = v29;
  uint64_t v26 = 0;
  uint64_t v15 = *(void *)(v6 + 1664);
  if ((BYTE4(v28) & 7) == 1 && v29 == 10)
  {
    __n128 v14 = re::MaterialParameterTable::int4Value(v15 + 224, (uint64_t)&v30);
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17) {
    id v18 = (id)(v17 + 8);
  }
  if (a2)
  {
    uint64_t v19 = *a2;
    if (*a2)
    {
      char v20 = a2[1];
      if (v20)
      {
        uint64_t v21 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v19 = 31 * v19 + v20;
          int v22 = *v21++;
          char v20 = v22;
        }
        while (v22);
      }
      v19 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v19;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v25, (uint64_t)&v27);
  uint64_t v30 = v27;
  char v32 = v29;
  long long v31 = v28;
  uint64_t v25 = 0;
  BOOL v24 = (BYTE4(v28) & 7) == 1 && v32 == 10;
  uint64_t v13 = v24;
  if (v24) {
    *a3 = re::MaterialParameterTable::int4Value(v17 + 248, (uint64_t)&v30);
  }
  if (v17) {

  }
LABEL_29:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  return v13;
}

void REMaterialAssetSetFloat2x2F(uint64_t a1, char *a2, double a3, double a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  ++*(_DWORD *)(v10 + 260);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v9);
  if (v7)
  {
    re::MaterialParameterBlock::setMatrix2x2F(*(re::MaterialParameterBlock **)(v7 + 1672), a2, *(uint64_t *)&a3, *(uint64_t *)&a4, (uint64_t)v8);
    v8[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

uint64_t REMaterialAssetGetFloat2x2F(uint64_t a1, char *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v30);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v30);
  if (v5)
  {
    uint64_t v6 = v5;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v27);
    if ((BYTE4(v28) & 7) == 1 && (v29 == 48 || v29 == 34))
    {
      *(_OWORD *)a3 = *(_OWORD *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v27);
    }
    else
    {
      uint64_t v7 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
      if (a2)
      {
        uint64_t v8 = *a2;
        if (*a2)
        {
          char v9 = a2[1];
          if (v9)
          {
            uint64_t v10 = (unsigned __int8 *)(a2 + 2);
            do
            {
              uint64_t v8 = 31 * v8 + v9;
              int v11 = *v10++;
              char v9 = v11;
            }
            while (v11);
          }
          v8 &= ~0x8000000000000000;
        }
      }
      else
      {
        uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v23 = v8;
      re::MaterialParameterTable::handle(v7, &v23, (uint64_t)&v24);
      uint64_t v27 = v24;
      long long v28 = v25;
      char v29 = v26;
      uint64_t v23 = 0;
      if ((BYTE4(v25) & 7) != 1 || v29 != 48 && v29 != 34)
      {
        uint64_t v14 = *(void *)(*(void *)(v6 + 1664) + 16);
        if (v14) {
          id v15 = (id)(v14 + 8);
        }
        if (a2)
        {
          uint64_t v16 = *a2;
          if (*a2)
          {
            char v17 = a2[1];
            if (v17)
            {
              id v18 = (unsigned __int8 *)(a2 + 2);
              do
              {
                uint64_t v16 = 31 * v16 + v17;
                int v19 = *v18++;
                char v17 = v19;
              }
              while (v19);
            }
            v16 &= ~0x8000000000000000;
          }
        }
        else
        {
          uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v22 = v16;
        re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v14 + 248), &v22, (uint64_t)&v24);
        uint64_t v27 = v24;
        char v29 = v26;
        long long v28 = v25;
        uint64_t v22 = 0;
        if ((BYTE4(v25) & 7) == 1 && (v29 == 48 || v29 == 34))
        {
          *(void *)a3 = re::MaterialParameterTable::vector4FValue(v14 + 248, (uint64_t)&v27);
          *(void *)(a3 + 8) = v20;
          uint64_t v12 = 1;
          if (!v14) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v12 = 0;
          if (!v14) {
            goto LABEL_35;
          }
        }

        goto LABEL_35;
      }
      *(void *)a3 = re::MaterialParameterTable::vector4FValue(*(void *)(v6 + 1664) + 224, (uint64_t)&v27);
      *(void *)(a3 + 8) = v13;
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_35:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  return v12;
}

void REMaterialAssetSetFloat3x3F(uint64_t a1, char *a2, __n128 a3, __n128 a4, __n128 a5)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  ++*(_DWORD *)(v14 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v13);
  if (v6)
  {
    uint64_t v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
    v11[0] = a3;
    v11[1] = a4;
    void v11[2] = a5;
    re::MaterialParameterBlock::setMatrix3x3F(v7, a2, v11, (uint64_t)v12);
    v12[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
}

uint64_t REMaterialAssetGetFloat3x3F(uint64_t a1, char *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v45);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v45);
  if (v5)
  {
    uint64_t v6 = v5;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v42);
    if ((BYTE4(v43) & 7) == 1 && v44 == 49)
    {
      unint64_t Constant = re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v42);
      int v8 = *(_DWORD *)(Constant + 8);
      int v9 = *(_DWORD *)(Constant + 24);
      uint64_t v10 = *(void *)(Constant + 16);
      int v11 = *(_DWORD *)(Constant + 40);
      uint64_t v12 = *(void *)(Constant + 32);
      *(void *)a3 = *(void *)Constant;
      *(_DWORD *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 32) = v12;
      *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = v11;
LABEL_16:
      uint64_t v13 = 1;
      goto LABEL_17;
    }
    uint64_t v14 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
    if (a2)
    {
      uint64_t v15 = *a2;
      if (*a2)
      {
        char v16 = a2[1];
        if (v16)
        {
          char v17 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v15 = 31 * v15 + v16;
            int v18 = *v17++;
            char v16 = v18;
          }
          while (v18);
        }
        v15 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v41 = v15;
    re::MaterialParameterTable::handle(v14, &v41, (uint64_t)&v38);
    uint64_t v41 = 0;
    uint64_t v42 = v38;
    long long v43 = *(_OWORD *)v39;
    char v44 = v39[16];
    if ((v39[4] & 7) == 1 && v39[16] == 49)
    {
      re::MaterialParameterTable::matrix3x3FValue(*(void *)(v6 + 1664) + 224, (uint64_t)&v42, (__n128 *)&v38, *(__n128 *)v39, v19, v20);
      uint64_t v21 = v38;
      long long v22 = *(_OWORD *)&v39[8];
      long long v23 = v40;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)v39;
      *(void *)a3 = v21;
      *(_DWORD *)(a3 + 24) = DWORD2(v22);
      *(void *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = DWORD2(v23);
      *(void *)(a3 + 32) = v23;
      goto LABEL_16;
    }
    uint64_t v25 = *(void *)(*(void *)(v6 + 1664) + 16);
    if (v25) {
      id v26 = (id)(v25 + 8);
    }
    if (a2)
    {
      uint64_t v27 = *a2;
      if (*a2)
      {
        char v28 = a2[1];
        if (v28)
        {
          char v29 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v27 = 31 * v27 + v28;
            int v30 = *v29++;
            char v28 = v30;
          }
          while (v30);
        }
        v27 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v37 = v27;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v25 + 248), &v37, (uint64_t)&v38);
    uint64_t v42 = v38;
    char v44 = v39[16];
    long long v43 = *(_OWORD *)v39;
    uint64_t v37 = 0;
    BOOL v33 = (v39[4] & 7) == 1 && v44 == 49;
    uint64_t v13 = v33;
    if (v33)
    {
      re::MaterialParameterTable::matrix3x3FValue(v25 + 248, (uint64_t)&v42, (__n128 *)&v38, *(__n128 *)v39, v31, v32);
      uint64_t v34 = v38;
      long long v35 = *(_OWORD *)&v39[8];
      long long v36 = v40;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)v39;
      *(_DWORD *)(a3 + 24) = DWORD2(v35);
      *(void *)a3 = v34;
      *(void *)(a3 + 16) = v35;
      *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = DWORD2(v36);
      *(void *)(a3 + 32) = v36;
    }
    if (v25) {
  }
    }
  else
  {
    uint64_t v13 = 0;
  }
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v45);
  return v13;
}

void REMaterialAssetSetFloat4x4F(uint64_t a1, char *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v15);
  ++*(_DWORD *)(v16 + 260);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v15);
  if (v7)
  {
    int v8 = *(re::MaterialParameterBlock **)(v7 + 1672);
    v13[0] = a3;
    v13[1] = a4;
    void v13[2] = a5;
    _DWORD v13[3] = a6;
    re::MaterialParameterBlock::setMatrix4x4F(v8, a2, v13, (uint64_t)v14);
    v14[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
}

uint64_t REMaterialAssetGetFloat4x4F(uint64_t a1, char *a2, _OWORD *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v37);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v37);
  if (v5)
  {
    uint64_t v6 = v5;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v5 + 1672), a2, (uint64_t)&v34);
    if ((BYTE4(v35) & 7) == 1 && v36 == 50)
    {
      unint64_t Constant = (long long *)re::ShaderGraphMaterial::getConstant(*(void *)(v6 + 1672), (uint64_t)&v34);
      long long v8 = *Constant;
      long long v9 = Constant[1];
      long long v10 = Constant[2];
      long long v11 = Constant[3];
LABEL_16:
      *a3 = v8;
      a3[1] = v9;
      a3[2] = v10;
      a3[3] = v11;
      uint64_t v12 = 1;
      goto LABEL_17;
    }
    uint64_t v13 = (re::MaterialParameterTable *)(*(void *)(v6 + 1664) + 224);
    if (a2)
    {
      uint64_t v14 = *a2;
      if (*a2)
      {
        char v15 = a2[1];
        if (v15)
        {
          uint64_t v16 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v14 = 31 * v14 + v15;
            int v17 = *v16++;
            char v15 = v17;
          }
          while (v17);
        }
        v14 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v33 = v14;
    re::MaterialParameterTable::handle(v13, &v33, (uint64_t)v30);
    uint64_t v33 = 0;
    uint64_t v34 = *(void *)v30;
    long long v35 = *(_OWORD *)&v30[8];
    char v36 = v30[24];
    if ((v30[12] & 7) == 1 && v30[24] == 50)
    {
      re::MaterialParameterTable::matrix4x4FValue(*(void *)(v6 + 1664) + 224, (uint64_t)&v34, v30);
      long long v8 = *(_OWORD *)v30;
      long long v9 = *(_OWORD *)&v30[16];
      long long v10 = v31;
      long long v11 = v32;
      goto LABEL_16;
    }
    uint64_t v19 = *(void *)(*(void *)(v6 + 1664) + 16);
    if (v19) {
      id v20 = (id)(v19 + 8);
    }
    if (a2)
    {
      uint64_t v21 = *a2;
      if (*a2)
      {
        char v22 = a2[1];
        if (v22)
        {
          long long v23 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v21 = 31 * v21 + v22;
            int v24 = *v23++;
            char v22 = v24;
          }
          while (v24);
        }
        v21 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v29 = v21;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v19 + 248), &v29, (uint64_t)v30);
    uint64_t v34 = *(void *)v30;
    char v36 = v30[24];
    long long v35 = *(_OWORD *)&v30[8];
    uint64_t v29 = 0;
    BOOL v25 = (v30[12] & 7) == 1 && v36 == 50;
    uint64_t v12 = v25;
    if (v25)
    {
      re::MaterialParameterTable::matrix4x4FValue(v19 + 248, (uint64_t)&v34, v30);
      long long v26 = *(_OWORD *)&v30[16];
      long long v27 = v31;
      long long v28 = v32;
      *a3 = *(_OWORD *)v30;
      a3[1] = v26;
      a3[2] = v27;
      a3[3] = v28;
    }
    if (v19) {
  }
    }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_17:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v37);
  return v12;
}

void REMaterialAssetSetTextureFromAsset(uint64_t a1, const char *a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v10);
  re::AssetAPIHelper::assetHandleCreate(a3, v9);
  uint64_t v5 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v9);
  if (v5)
  {
    uint64_t v6 = v5;
    ++*(_DWORD *)(v11 + 260);
    uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v10);
    if (v7)
    {
      re::MaterialParameterBlock::setTextureHandle(*(re::MaterialParameterBlock **)(v7 + 1672), a2, (const re::TextureHandle *)(v6 + 48), (uint64_t)v8);
      v8[0] = 0;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
}

void REMaterialAssetSetTexture(uint64_t a1, const char *a2, void *a3)
{
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, &v13);
  ++*(_DWORD *)(v14 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v13);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 1672);
    id v11 = v5;
    id v9 = v5;
    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*(void *)(v8 + 968) + 64), &v11, v12);
    if (v11) {

    }
    re::MaterialParameterBlock::setTextureHandle(*(re::MaterialParameterBlock **)(v7 + 1672), a2, (const re::TextureHandle *)v12, (uint64_t)v10);
    v10[0] = 0;
    re::TextureHandle::invalidate((re::TextureHandle *)v12);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
}

void REMaterialAssetClearParameter(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v4);
  ++*(_DWORD *)(v5 + 260);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v4);
  if (v3) {
    re::MaterialParameterBlock::removeParameter(*(re::MaterialParameterBlock **)(v3 + 1672), a2);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v4);
}

id REMaterialAssetGetMTLTexture(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v36);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v36);
  if (!v3 || (v4 = v3, (uint64_t v5 = *(re::MaterialParameterBlock **)(v3 + 1672)) == 0))
  {
    uint64_t v8 = 0;
    goto LABEL_50;
  }
  re::MaterialParameterBlock::handle(v5, a2, (uint64_t)&v33);
  int v6 = BYTE4(v34[0]) & 7;
  if (!v6) {
    goto LABEL_13;
  }
  if (v6 != 2)
  {
    if (v6 == 1 && (v34[0] & 0x1000000000) == 0 && v35 == 64) {
      goto LABEL_8;
    }
LABEL_13:
    id v9 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
    if (a2)
    {
      uint64_t v10 = *a2;
      if (*a2)
      {
        char v11 = a2[1];
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v10 = 31 * v10 + v11;
            int v13 = *v12++;
            char v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v28 = v10;
    re::MaterialParameterTable::handle(v9, &v28, (uint64_t)&v29);
    *(_OWORD *)uint64_t v34 = v30;
    char v35 = v31;
    uint64_t v28 = 0;
    int v14 = BYTE4(v30) & 7;
    if (v14)
    {
      if (v14 == 2)
      {
        if ((BYTE4(v30) & 0x10) == 0) {
          goto LABEL_25;
        }
      }
      else if (v14 == 1 && (BYTE4(v30) & 0x10) == 0 && v35 == 64)
      {
LABEL_25:
        char v15 = (os_unfair_lock_s **)re::TextureHandleTable::textureHandleAt((re::TextureHandleTable *)(*(void *)(v4 + 1664) + 904), LOWORD(v34[0]));
        re::TextureHandle::unsynchronizedMetalTexture(v15, &v29);
        id v16 = v29;
        uint64_t v8 = v16;
        if (!v16) {
          goto LABEL_50;
        }
LABEL_49:

        goto LABEL_50;
      }
    }
    uint64_t v17 = *(void *)(*(void *)(v4 + 1664) + 16);
    if (v17) {
      id v18 = (id)(v17 + 8);
    }
    if (a2)
    {
      uint64_t v19 = *a2;
      if (*a2)
      {
        char v20 = a2[1];
        if (v20)
        {
          uint64_t v21 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v19 = 31 * v19 + v20;
            int v22 = *v21++;
            char v20 = v22;
          }
          while (v22);
        }
        v19 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v27 = v19;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v17 + 248), &v27, (uint64_t)&v29);
    id v33 = v29;
    char v35 = v31;
    *(_OWORD *)uint64_t v34 = v30;
    uint64_t v27 = 0;
    int v23 = BYTE4(v30) & 7;
    if (v23)
    {
      if (v23 == 2)
      {
        if ((v34[0] & 0x1000000000) == 0) {
          goto LABEL_44;
        }
      }
      else if (v23 == 1)
      {
        uint64_t v8 = 0;
        if ((v34[0] & 0x1000000000) != 0 || v35 != 64) {
          goto LABEL_47;
        }
LABEL_44:
        int v24 = (os_unfair_lock_s **)re::TextureHandleTable::textureHandleAt((re::TextureHandleTable *)(v17 + 928), LOWORD(v34[0]));
        re::TextureHandle::unsynchronizedMetalTexture(v24, &v29);
        id v25 = v29;
        uint64_t v8 = v25;
        if (v25) {

        }
        goto LABEL_47;
      }
    }
    uint64_t v8 = 0;
LABEL_47:
    if (!v17) {
      goto LABEL_50;
    }
    id v16 = (id)(v17 + 8);
    goto LABEL_49;
  }
  if ((v34[0] & 0x1000000000) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  re::MaterialParameterBlock::textureHandleValue(*(void *)(v4 + 1672), (uint64_t)&v33, (re::TextureHandle *)&v29);
  re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)&v29, &v32);
  id v7 = v32;
  uint64_t v8 = v7;
  if (v7) {

  }
  re::TextureHandle::invalidate((re::TextureHandle *)&v29);
LABEL_50:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
  return v8;
}

uint64_t REMaterialAssetGetTextureAsset(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v21);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v21);
  if (!v4) {
    goto LABEL_24;
  }
  REMaterialAssetGetMTLTexture(a1, a2);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = v5;

  if (!v5)
  {
    uint64_t v4 = 0;
LABEL_24:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
    return v4;
  }
  uint64_t v8 = *(void *)(v4 + 1872);
  if (!v8)
  {
LABEL_21:
    uint64_t v4 = 0;
LABEL_22:

    goto LABEL_24;
  }
  id v9 = *(re::TextureAsset ***)(v4 + 1888);
  uint64_t v10 = 8 * v8;
  while (1)
  {
    char v11 = *v9;
    uint64_t v12 = *((void *)*v9 + 1);
    if (!v12)
    {
      uint64_t v7 = (uint64_t)re::TextureAsset::assetType((re::TextureAsset *)v7);
      goto LABEL_18;
    }
    uint64_t v13 = *(void *)(v12 + 264);
    uint64_t v7 = (uint64_t)re::TextureAsset::assetType((re::TextureAsset *)v7);
    if (v13 != v7) {
      goto LABEL_18;
    }
    uint64_t v7 = re::AssetHandle::asset<re::TextureAsset>(v11);
    if (!v7) {
      goto LABEL_18;
    }
    uint64_t v14 = v7;
    if (*(_DWORD *)(v7 + 240)) {
      break;
    }
    if (*(id *)(v7 + 160) == v5) {
      goto LABEL_25;
    }
    re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)(v7 + 48), &v20);
    char v15 = v20;
    if (v20 == v5)
    {
      BOOL v16 = 1;
      char v15 = v5;
LABEL_14:

      goto LABEL_15;
    }
    re::TextureHandle::unsynchronizedMetalTexture((os_unfair_lock_s **)(v14 + 136), &v19);
    uint64_t v7 = (uint64_t)v19;
    BOOL v16 = v19 == v5;
    if (v19) {

    }
    if (v15) {
      goto LABEL_14;
    }
LABEL_15:
    if (v16)
    {
LABEL_25:
      uint64_t v4 = *(void *)v11;
      goto LABEL_22;
    }
LABEL_18:
    ++v9;
    v10 -= 8;
    if (!v10) {
      goto LABEL_21;
    }
  }
  uint64_t v18 = std::__throw_bad_variant_access[abi:nn180100]();
  return REMaterialAssetSetBuffer(v18);
}

void REMaterialAssetSetBuffer(uint64_t a1, char *a2, void *a3)
{
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, &v14);
  ++*(_DWORD *)(v15 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v14);
  if (v6)
  {
    uint64_t v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
    id v8 = v5;
    id v9 = v5;
    id v10 = v9;
    int v11 = 0;
    unsigned int v12 = objc_msgSend(v5, sel_length);
    re::MaterialParameterBlock::setBuffer(v7, a2, (uint64_t)&v10, (uint64_t)v13);
    v13[0] = 0;
    if (v9) {

    }
    if (v5) {
  }
    }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
}

id REMaterialAssetGetBuffer(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v30);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v30);
  if (!v3)
  {
    id v7 = 0;
    goto LABEL_45;
  }
  uint64_t v4 = v3;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v3 + 1672), a2, (uint64_t)&v27);
  int v5 = BYTE4(v28[0]) & 7;
  if (v5)
  {
    if (v5 == 3)
    {
      if ((v28[0] & 0x1000000000) == 0)
      {
LABEL_7:
        id v6 = *(id *)re::MaterialParameterBlock::bufferValue(*(void *)(v4 + 1672), (uint64_t)&v27);
LABEL_23:
        id v7 = v6;
        goto LABEL_45;
      }
    }
    else if (v5 == 1 && (v28[0] & 0x1000000000) == 0 && v29 == 128)
    {
      goto LABEL_7;
    }
  }
  id v8 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
  if (a2)
  {
    uint64_t v9 = *a2;
    if (*a2)
    {
      char v10 = a2[1];
      if (v10)
      {
        int v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v9 = 31 * v9 + v10;
          int v12 = *v11++;
          char v10 = v12;
        }
        while (v12);
      }
      v9 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v23 = v9;
  re::MaterialParameterTable::handle(v8, &v23, (uint64_t)&v24);
  *(_OWORD *)uint64_t v28 = v25;
  unsigned __int8 v29 = v26;
  uint64_t v23 = 0;
  int v13 = BYTE4(v25) & 7;
  if (v13)
  {
    if (v13 == 3)
    {
      if ((BYTE4(v25) & 0x10) == 0)
      {
LABEL_22:
        id v6 = *(id *)re::BufferTable::bufferAt((re::BufferTable *)(*(void *)(v4 + 1664) + 488), LOWORD(v28[0]));
        goto LABEL_23;
      }
    }
    else if (v13 == 1 && (BYTE4(v25) & 0x10) == 0 && v29 == 128)
    {
      goto LABEL_22;
    }
  }
  uint64_t v14 = *(void *)(*(void *)(v4 + 1664) + 16);
  if (v14) {
    id v15 = (id)(v14 + 8);
  }
  if (a2)
  {
    uint64_t v16 = *a2;
    if (*a2)
    {
      char v17 = a2[1];
      if (v17)
      {
        uint64_t v18 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v16 = 31 * v16 + v17;
          int v19 = *v18++;
          char v17 = v19;
        }
        while (v19);
      }
      v16 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v22 = v16;
  re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v14 + 248), &v22, (uint64_t)&v24);
  uint64_t v27 = v24;
  unsigned __int8 v29 = v26;
  *(_OWORD *)uint64_t v28 = v25;
  uint64_t v22 = 0;
  int v20 = BYTE4(v25) & 7;
  if (!v20) {
    goto LABEL_42;
  }
  if (v20 == 3)
  {
    if ((v28[0] & 0x1000000000) == 0)
    {
LABEL_41:
      id v7 = *(id *)re::BufferTable::bufferAt((re::BufferTable *)(v14 + 512), LOWORD(v28[0]));
      goto LABEL_43;
    }
LABEL_42:
    id v7 = 0;
    goto LABEL_43;
  }
  if (v20 != 1) {
    goto LABEL_42;
  }
  id v7 = 0;
  if ((v28[0] & 0x1000000000) == 0 && v29 == 128) {
    goto LABEL_41;
  }
LABEL_43:
  if (v14) {

  }
LABEL_45:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  return v7;
}

void REMaterialAssetSetSampler(uint64_t a1, char *a2, void *a3)
{
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, &v11);
  ++*(_DWORD *)(v12 + 260);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v11);
  if (v6)
  {
    id v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
    id v9 = v5;
    id v8 = v5;
    re::MaterialParameterBlock::setSampler(v7, a2, &v9, (uint64_t)v10);
    v10[0] = 0;
    if (v5) {
  }
    }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
}

id REMaterialAssetGetSampler(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v30);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v30);
  if (!v3)
  {
    id v6 = 0;
    goto LABEL_46;
  }
  uint64_t v4 = v3;
  re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v3 + 1672), a2, (uint64_t)&v27);
  int v5 = BYTE4(v28[0]) & 7;
  if (!v5) {
    goto LABEL_11;
  }
  if (v5 == 4)
  {
    if ((v28[0] & 0x1000000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    id v8 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
        v9 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = v9;
    re::MaterialParameterTable::handle(v8, &v23, (uint64_t)&v24);
    *(_OWORD *)uint64_t v28 = v25;
    unsigned __int8 v29 = v26;
    uint64_t v23 = 0;
    int v13 = BYTE4(v25) & 7;
    if (v13)
    {
      if (v13 == 4)
      {
        if ((BYTE4(v25) & 0x10) == 0)
        {
LABEL_23:
          id v6 = *(id *)re::SamplerTable::samplerAt((re::SamplerTable *)(*(void *)(v4 + 1664) + 1016), LOWORD(v28[0]));
          goto LABEL_46;
        }
      }
      else if (v13 == 1 && (BYTE4(v25) & 0x10) == 0 && v29 == 192)
      {
        goto LABEL_23;
      }
    }
    uint64_t v14 = *(void *)(*(void *)(v4 + 1664) + 16);
    if (v14) {
      id v15 = (id)(v14 + 8);
    }
    if (a2)
    {
      uint64_t v16 = *a2;
      if (*a2)
      {
        char v17 = a2[1];
        if (v17)
        {
          uint64_t v18 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v16 = 31 * v16 + v17;
            int v19 = *v18++;
            char v17 = v19;
          }
          while (v19);
        }
        v16 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v22 = v16;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v14 + 248), &v22, (uint64_t)&v24);
    id v27 = v24;
    unsigned __int8 v29 = v26;
    *(_OWORD *)uint64_t v28 = v25;
    uint64_t v22 = 0;
    int v20 = BYTE4(v25) & 7;
    if (v20)
    {
      if (v20 == 4)
      {
        if ((v28[0] & 0x1000000000) == 0)
        {
LABEL_41:
          id v6 = *(id *)re::SamplerTable::samplerAt((re::SamplerTable *)(v14 + 1040), LOWORD(v28[0]));
LABEL_43:
          if (!v14) {
            goto LABEL_46;
          }
          id v7 = (id)(v14 + 8);
          goto LABEL_45;
        }
      }
      else if (v20 == 1)
      {
        id v6 = 0;
        if ((v28[0] & 0x1000000000) != 0 || v29 != 192) {
          goto LABEL_43;
        }
        goto LABEL_41;
      }
    }
    id v6 = 0;
    goto LABEL_43;
  }
  if (v5 != 1 || (v28[0] & 0x1000000000) != 0 || v29 != 192) {
    goto LABEL_11;
  }
LABEL_7:
  re::MaterialParameterBlock::samplerValue(*(void *)(v4 + 1672), (uint64_t)&v27, &v24);
  id v6 = v24;
  id v7 = v24;
  if (v24) {
LABEL_45:
  }

LABEL_46:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
  return v6;
}

uint64_t REMaterialAssetGetSamplerNameBoundToTexture(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v3 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v13);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)&v11);
    if (!*(void *)(v4 + 208)
      || (uint64_t v6 = *(unsigned int *)(*(void *)(v4 + 216) + 4 * (v5 % *(unsigned int *)(v4 + 232))),
          v6 == 0x7FFFFFFF))
    {
LABEL_7:
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 224);
      while (!re::DynamicString::operator==(v7 + 160 * v6 + 16, (uint64_t)&v11))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 160 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          goto LABEL_7;
        }
      }
      uint64_t v4 = v7 + 160 * v6 + 48;
    }
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    if (v4)
    {
      unint64_t v8 = *(void *)(v4 + 48);
      unint64_t v9 = v8 >> 1;
      if ((v8 & 1) == 0) {
        unint64_t v9 = v8 >> 1;
      }
      if (v9)
      {
        if (v8) {
          uint64_t v4 = *(void *)(v4 + 56);
        }
        else {
          v4 += 49;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v4;
}

_anonymous_namespace_ *REMaterialAssetCopySamplerDescriptor(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v3 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v12);
  uint64_t v4 = v3;
  if (v3)
  {
    unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v11, (uint64_t)&v9);
    if (!*((void *)v4 + 32)
      || (uint64_t v6 = *(unsigned int *)(*((void *)v4 + 33) + 4 * (v5 % *((unsigned int *)v4 + 70))), v6 == 0x7FFFFFFF))
    {
LABEL_7:
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v7 = *((void *)v4 + 34);
      while (!re::DynamicString::operator==(v7 + 152 * v6 + 16, (uint64_t)&v9))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 152 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          goto LABEL_7;
        }
      }
      uint64_t v4 = (_anonymous_namespace_ *)(v7 + 152 * v6 + 48);
    }
    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
    if (v4)
    {
      re::OptionalMaterialSamplerData::makeSamplerData(v4, (uint64_t)&v9);
      re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)&v9, &v11);
      uint64_t v4 = (_anonymous_namespace_ *)v11;
      if (v11) {
    }
      }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v4;
}

BOOL REMaterialAssetBindTextureToSamplerWithDefaultArray(uint64_t a1, char *a2, char *a3, void *a4)
{
  id v7 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, &v26);
  id v24 = v7;
  id v8 = v7;
  re::MaterialSamplerData::fromDescriptor(&v24, (uint64_t)v25);
  if (v7) {

  }
  ++*(_DWORD *)(v27 + 260);
  uint64_t v9 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v26);
  if (v9)
  {
    char v10 = *(void **)(v9 + 1672);
    if (a2)
    {
      uint64_t v11 = *a2;
      if (*a2)
      {
        char v12 = a2[1];
        if (v12)
        {
          int v13 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v11 = 31 * v11 + v12;
            int v14 = *v13++;
            char v12 = v14;
          }
          while (v14);
        }
        v11 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = v11;
    if (a3)
    {
      uint64_t v16 = *a3;
      if (*a3)
      {
        char v17 = a3[1];
        if (v17)
        {
          uint64_t v18 = (unsigned __int8 *)(a3 + 2);
          do
          {
            uint64_t v16 = 31 * v16 + v17;
            int v19 = *v18++;
            char v17 = v19;
          }
          while (v19);
        }
        v16 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v22 = v16;
    unint64_t v20 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)v25);
    BOOL v15 = re::MaterialParameterBlock::bindTextureToSampler(v10, &v23, &v22, v20);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    BOOL v15 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);

  return v15;
}

BOOL REMaterialAssetBindTextureToSampler(uint64_t a1, char *a2, char *a3, uint64_t a4, void *a5)
{
  return REMaterialAssetBindTextureToSamplerWithDefaultArray(a1, a2, a3, a5);
}

BOOL REMaterialAssetUnbindTextureFromSamplers(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v12);
  ++*(_DWORD *)(v13 + 260);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 1672);
    if (a2)
    {
      uint64_t v5 = *a2;
      if (*a2)
      {
        char v6 = a2[1];
        if (v6)
        {
          id v7 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v5 = 31 * v5 + v6;
            int v8 = *v7++;
            char v6 = v8;
          }
          while (v8);
        }
        v5 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v11 = v5;
    BOOL v9 = re::MaterialParameterBlock::unbindTextureFromSamplers(v4, &v11);
    uint64_t v11 = 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
  return v9;
}

id REMaterialDefinitionAssetCopyTextureParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v5);
  if (v2)
  {
    uint64_t v3 = v2;
    appendKeySet(v2 + 2416, v1);
    appendKeySet(v3 + 2440, v1);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v1;
}

void appendKeySet(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(const re::DynamicString **)(a1 + 16);
    uint64_t v6 = 32 * v4;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v9, v5);
      if (v10) {
        id v7 = *(unsigned char **)&v11[7];
      }
      else {
        id v7 = v11;
      }
      int v8 = [NSString stringWithUTF8String:v7];
      [v3 addObject:v8];

      if (v9 && (v10 & 1) != 0) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
      uint64_t v5 = (const re::DynamicString *)((char *)v5 + 32);
      v6 -= 32;
    }
    while (v6);
  }
}

id REMaterialDefinitionAssetCopyBufferParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v4);
  if (v2) {
    appendKeySet(v2 + 2392, v1);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v1;
}

id REMaterialDefinitionAssetCopyConstantParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v6);
  getValidMaterialDefinitionFromDefinitionAsset((const re::MaterialDefinitionAsset *)&v5, v2);
  uint64_t v3 = v5;
  if (v2 && v5)
  {
    buildConstantDictionaryFromParameters(v2 + 2368, v5 + 248, v1);
  }
  else if (!v5)
  {
    goto LABEL_6;
  }

LABEL_6:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v1;
}

void getValidMaterialDefinitionFromDefinitionAsset(const re::MaterialDefinitionAsset *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 744);
    if (v3) {
      id v4 = (id)(v3 + 8);
    }
    uint64_t v5 = *(void *)(v3 + 120);
    if (v5)
    {
      id v6 = (id)(v3 + 8);
      uint64_t v5 = v3;
    }
    *(void *)a1 = v5;
  }
  else
  {
    *(void *)a1 = 0;
  }
}

void buildConstantDictionaryFromParameters(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = 32 * v6;
    do
    {
      re::StringID::StringID((re::StringID *)v15, (const re::DynamicString *)v7);
      uint64_t v16 = v15[0] >> 1;
      uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a2 + 200), &v16);
      if (v9 == -1)
      {
        uint64_t v16 = 0;
        re::StringID::destroyString((re::StringID *)v15);
      }
      else
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(a2 + 208);
        uint64_t v16 = 0;
        re::StringID::destroyString((re::StringID *)v15);
        uint64_t v12 = [NSNumber numberWithUnsignedInt:*(unsigned __int8 *)(v11 + 16 * v10 + 10)];
        if (*(unsigned char *)(v7 + 8)) {
          uint64_t v13 = *(void *)(v7 + 16);
        }
        else {
          uint64_t v13 = v7 + 9;
        }
        int v14 = [NSString stringWithUTF8String:v13];
        [v5 setObject:v12 forKey:v14];
      }
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
}

id REMaterialDefinitionAssetCopySamplerParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v4);
  if (v2) {
    appendKeySet(v2 + 2464, v1);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v1;
}

id REMaterialAssetCopyTextureParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(*(void *)(v2 + 1664) + 16);
    if (v4) {
      id v5 = (id)(v4 + 8);
    }
    if (*(void *)(v4 + 120))
    {
      uint64_t v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v3 + 40));
      appendKeySet(v6 + 2416, v1);
      appendKeySet(v6 + 2440, v1);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v1;
}

id REMaterialAssetCopyBufferParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(*(void *)(v2 + 1664) + 16);
    if (v4) {
      id v5 = (id)(v4 + 8);
    }
    if (*(void *)(v4 + 120))
    {
      uint64_t v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v3 + 40));
      appendKeySet(v6 + 2392, v1);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v1;
}

id REMaterialAssetCopyConstantParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(*(void *)(v2 + 1664) + 16);
    if (v4) {
      id v5 = (id)(v4 + 8);
    }
    if (*(void *)(v4 + 120))
    {
      uint64_t v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v3 + 40));
      buildConstantDictionaryFromParameters(v6 + 2368, v4 + 248, v1);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v1;
}

id REMaterialAssetCopySamplerParameters(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(*(void *)(v2 + 1664) + 16);
    if (v4) {
      id v5 = (id)(v4 + 8);
    }
    if (*(void *)(v4 + 120))
    {
      uint64_t v6 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v3 + 40));
      appendKeySet(v6 + 2464, v1);
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v1;
}

void REMaterialDefinitionAssetGetParametersDictionary(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v10 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v13);
  getValidMaterialDefinitionFromDefinitionAsset((const re::MaterialDefinitionAsset *)&v12, v10);
  uint64_t v11 = v12;
  if (v12)
  {
    appendKeySet(v10 + 2416, v7);
    appendKeySet(v10 + 2440, v7);
    appendKeySet(v10 + 2392, v8);
    buildConstantDictionaryFromParameters(v10 + 2368, v11 + 248, v9);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
}

uint64_t REMaterialDefinitionAssetGetParameterDisplayName(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v16);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 744);
    if (v4) {
      id v5 = (id)(v4 + 8);
    }
    if (a2)
    {
      unint64_t v6 = *a2;
      if (*a2)
      {
        char v7 = a2[1];
        if (v7)
        {
          id v8 = (unsigned __int8 *)(a2 + 2);
          do
          {
            unint64_t v6 = 31 * v6 + v7;
            int v9 = *v8++;
            char v7 = v9;
          }
          while (v9);
        }
        v6 &= ~0x8000000000000000;
      }
    }
    else
    {
      unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (!*(void *)(v4 + 1376)
      || (unint64_t v11 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27)),
          uint64_t v12 = *(unsigned int *)(*(void *)(v4 + 1384) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(v4 + 1400))),
          v12 == 0x7FFFFFFF))
    {
      uint64_t v10 = 0;
      goto LABEL_22;
    }
    uint64_t v13 = *(void *)(v4 + 1392);
    if (*(void *)(v13 + 48 * v12 + 8) == v6)
    {
LABEL_18:
      uint64_t v14 = v13 + 48 * v12;
      if ((*(unsigned char *)(v14 + 24) & 1) == 0)
      {
        uint64_t v10 = v14 + 25;
        if (!v4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      uint64_t v10 = *(void *)(v14 + 32);
      if (v4) {
LABEL_22:
      }
    }
    else
    {
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v13 + 48 * v12) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 48 * v12 + 8) == v6) {
          goto LABEL_18;
        }
      }
      uint64_t v10 = 0;
      if (v4) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_23:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  return v10;
}

void REMaterialAssetGetParametersDictionary(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, &v18);
  if (!v19)
  {
    re::MaterialDefinitionAsset::assetType(v10);
    goto LABEL_10;
  }
  unint64_t v11 = *(uint64_t **)(v19 + 264);
  if (v11 != re::MaterialDefinitionAsset::assetType(v10))
  {
LABEL_10:
    uint64_t v16 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v18);
    if (!v16) {
      goto LABEL_14;
    }
    uint64_t v15 = *(void *)(*(void *)(v16 + 1664) + 16);
    uint64_t v14 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v16 + 40));
    goto LABEL_12;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v12 = (id)CoreRELog::log;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)char v17 = 0;
    _os_log_fault_impl(&dword_233120000, v12, OS_LOG_TYPE_FAULT, "WARNING: REMaterialAssetGetParametersDictionary only takes MaterialAsset objects; if you have a MaterialDefinition"
      "Asset, use REMaterialDefinitionAssetGetParametersDictionary instead.",
      v17,
      2u);
  }

  uint64_t v13 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)&v18);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 + 744);
LABEL_12:
    if (*(void *)(v15 + 120))
    {
      appendKeySet(v14 + 2416, v7);
      appendKeySet(v14 + 2440, v7);
      appendKeySet(v14 + 2392, v8);
      buildConstantDictionaryFromParameters(v14 + 2368, v15 + 248, v9);
    }
  }
LABEL_14:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
}

void REMaterialDefinitionAssetGetParameterKeys(uint64_t a1, void *a2)
{
  id v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v7);
  getValidMaterialDefinitionFromDefinitionAsset((const re::MaterialDefinitionAsset *)&v6, v4);
  uint64_t v5 = v6;
  if (v6)
  {
    appendKeySet(v4 + 2416, v3);
    appendKeySet(v4 + 2440, v3);
    appendKeySet(v4 + 2392, v3);
    appendKeySet(v4 + 2464, v3);
    appendKeySet(v4 + 2368, v3);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void REMaterialAssetGetMaterialParameterBlockKeys(uint64_t a1, void *a2)
{
  id v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v28);
  uint64_t v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v28);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v3;
    uint64_t v7 = *(unsigned int *)(v5 + 192);
    if (v7)
    {
      uint64_t v8 = 0;
      id v9 = (int *)(*(void *)(v5 + 176) + 8);
      while (1)
      {
        int v10 = *v9;
        v9 += 22;
        if (v10 < 0) {
          break;
        }
        if (v7 == ++v8)
        {
          LODWORD(v8) = *(_DWORD *)(v5 + 192);
          break;
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if (v7 != v8)
    {
      uint64_t v11 = v8;
      uint64_t v12 = *(void *)(v5 + 176);
      do
      {
        if (*(unsigned char *)(v12 + 88 * v11 + 24)) {
          uint64_t v13 = *(void *)(v12 + 88 * v11 + 32);
        }
        else {
          uint64_t v13 = v12 + 88 * v11 + 25;
        }
        uint64_t v14 = [NSString stringWithUTF8String:v13];
        [v6 addObject:v14];

        uint64_t v12 = *(void *)(v5 + 176);
        if (*(_DWORD *)(v5 + 192) <= (v8 + 1)) {
          int v15 = v8 + 1;
        }
        else {
          int v15 = *(_DWORD *)(v5 + 192);
        }
        while (1)
        {
          uint64_t v11 = (v8 + 1);
          if (v15 - 1 == v8) {
            break;
          }
          LODWORD(v8) = v8 + 1;
          int v16 = v11;
          if ((*(_DWORD *)(v12 + 88 * v11 + 8) & 0x80000000) != 0) {
            goto LABEL_20;
          }
        }
        int v16 = v15;
LABEL_20:
        LODWORD(v8) = v16;
      }
      while (v7 != v16);
    }

    id v17 = v6;
    uint64_t v18 = *(unsigned int *)(v5 + 240);
    if (v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = (int *)(*(void *)(v5 + 224) + 8);
      while (1)
      {
        int v21 = *v20;
        v20 += 40;
        if (v21 < 0) {
          break;
        }
        if (v18 == ++v19)
        {
          LODWORD(v19) = *(_DWORD *)(v5 + 240);
          break;
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    if (v18 != v19)
    {
      uint64_t v22 = v19;
      uint64_t v23 = *(void *)(v5 + 224);
      do
      {
        if (*(unsigned char *)(v23 + 160 * v22 + 24)) {
          uint64_t v24 = *(void *)(v23 + 160 * v22 + 32);
        }
        else {
          uint64_t v24 = v23 + 160 * v22 + 25;
        }
        long long v25 = [NSString stringWithUTF8String:v24];
        [v17 addObject:v25];

        uint64_t v23 = *(void *)(v5 + 224);
        if (*(_DWORD *)(v5 + 240) <= (v19 + 1)) {
          int v26 = v19 + 1;
        }
        else {
          int v26 = *(_DWORD *)(v5 + 240);
        }
        while (1)
        {
          uint64_t v22 = (v19 + 1);
          if (v26 - 1 == v19) {
            break;
          }
          LODWORD(v19) = v19 + 1;
          int v27 = v22;
          if ((*(_DWORD *)(v23 + 160 * v22 + 8) & 0x80000000) != 0) {
            goto LABEL_39;
          }
        }
        int v27 = v26;
LABEL_39:
        LODWORD(v19) = v27;
      }
      while (v18 != v27);
    }

    buildKeySetFromParameters<re::DynamicString>(v5 + 112, v17);
    buildKeySetFromParameters<re::DynamicString>(v5 + 64, v17);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
}

void buildKeySetFromParameters<re::DynamicString>(uint64_t a1, void *a2)
{
  id v13 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 20;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      if (*(unsigned char *)(v8 + 80 * v7 + 24)) {
        uint64_t v9 = *(void *)(v8 + 80 * v7 + 32);
      }
      else {
        uint64_t v9 = v8 + 80 * v7 + 25;
      }
      int v10 = [NSString stringWithUTF8String:v9];
      [v13 addObject:v10];

      uint64_t v8 = *(void *)(a1 + 16);
      if (*(_DWORD *)(a1 + 32) <= (v4 + 1)) {
        int v11 = v4 + 1;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v11 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v12 = v7;
        if ((*(_DWORD *)(v8 + 80 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      int v12 = v11;
LABEL_19:
      LODWORD(v4) = v12;
    }
    while (v3 != v12);
  }
}

uint64_t REMaterialAssetGetMaterialDefinition(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v5);
  if (v1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v4, (const re::AssetHandle *)(v1 + 40));
    re::AssetHandle::loadNow(v4[1], 0);
    uint64_t v2 = v4[0];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

uint64_t REMaterialAssetGetFunctionLinkCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v4);
  if (v1) {
    uint64_t v2 = *(void *)(v1 + 392);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REMaterialAssetGetFunctionLinkAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v7);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 392);
    if (v4 <= a2)
    {
      uint64_t v7[3] = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v8 = 136315906;
      uint64_t v9 = "operator[]";
      __int16 v10 = 1024;
      int v11 = 797;
      __int16 v12 = 2048;
      unint64_t v13 = a2;
      __int16 v14 = 2048;
      unint64_t v15 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v5 = *(void *)(v3 + 408) + 272 * a2;
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v5;
}

uint64_t REFunctionLinkGetStage(unsigned __int8 *a1)
{
  return *a1;
}

id REFunctionLinkGetConstantValues(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x263F128B0]);
  uint64_t v3 = *(unsigned int *)(a1 + 216);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a1 + 200) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 16;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a1 + 216);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      uint64_t v8 = *(void *)(a1 + 200);
      uint64_t v9 = v8 + (v7 << 6);
      unint64_t v10 = *(void *)(v9 + 48);
      if (*(void *)(a1 + 248) <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = *(void *)(a1 + 264);
      uint64_t v12 = *(unsigned __int16 *)(v9 + 56);
      id v13 = [NSString alloc];
      if (*(unsigned char *)(v9 + 24)) {
        uint64_t v14 = *(void *)(v8 + (v7 << 6) + 32);
      }
      else {
        uint64_t v14 = v9 + 25;
      }
      unint64_t v15 = (void *)[v13 initWithUTF8String:v14];
      [v2 setConstantValue:v11 + v10 type:v12 withName:v15];

      unsigned int v16 = *(_DWORD *)(a1 + 216);
      if (v16 <= (int)v4 + 1) {
        unsigned int v16 = v4 + 1;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v16 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        unsigned int v17 = v7;
        if ((*(_DWORD *)(*(void *)(a1 + 200) + (v7 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      unsigned int v17 = v16;
LABEL_19:
      LODWORD(v4) = v17;
    }
    while (v3 != v17);
  }
  return v2;
}

uint64_t REFunctionLinkCopyShaderFunctionName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v1 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v1 = a1 + 17;
  }
  return [NSString stringWithUTF8String:v1];
}

uint64_t REFunctionLinkCopyLinkedFunctionName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v1 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v1 = a1 + 49;
  }
  return [NSString stringWithUTF8String:v1];
}

uint64_t REFunctionLinkGetLinkedFunctionLibrary(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REFunctionLinkGetLinkedShaderAPICount(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t REFunctionLinkGetLinkedShaderAPIAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 112) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(void *)(a1 + 128) + 4 * a2);
}

id REFunctionLinkCopyFunctionConstantDictionary(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 164))
  {
    id v2 = (void *)[objc_alloc(MEMORY[0x263EFF9A0]) initWithCapacity:*(unsigned int *)(a1 + 164)];
    uint64_t v3 = *(unsigned int *)(a1 + 168);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (int *)(*(void *)(a1 + 152) + 8);
      while (1)
      {
        int v6 = *v5;
        v5 += 20;
        if (v6 < 0) {
          break;
        }
        if (v3 == ++v4)
        {
          LODWORD(v4) = *(_DWORD *)(a1 + 168);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if (v3 != v4)
    {
      uint64_t v7 = v4;
      do
      {
        uint64_t v8 = *(void *)(a1 + 152);
        uint64_t v9 = v8 + 80 * v7;
        if (*(unsigned char *)(v9 + 56)) {
          uint64_t v10 = *(void *)(v8 + 80 * v7 + 64);
        }
        else {
          uint64_t v10 = v8 + 80 * v7 + 57;
        }
        uint64_t v11 = [NSString stringWithUTF8String:v10];
        if (*(unsigned char *)(v8 + 80 * v7 + 24)) {
          uint64_t v12 = *(void *)(v8 + 80 * v7 + 32);
        }
        else {
          uint64_t v12 = v9 + 25;
        }
        id v13 = [NSString stringWithUTF8String:v12];
        [v2 setObject:v11 forKey:v13];

        unsigned int v14 = *(_DWORD *)(a1 + 168);
        if (v14 <= (int)v4 + 1) {
          unsigned int v14 = v4 + 1;
        }
        while (1)
        {
          uint64_t v7 = (v4 + 1);
          if (v14 - 1 == v4) {
            break;
          }
          LODWORD(v4) = v4 + 1;
          unsigned int v15 = v7;
          if ((*(_DWORD *)(*(void *)(a1 + 152) + 80 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_23;
          }
        }
        unsigned int v15 = v14;
LABEL_23:
        LODWORD(v4) = v15;
      }
      while (v3 != v15);
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

uint64_t REMaterialDefinitionAssetGetOverriddenMaterialDefinition(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v7);
  if (!v8)
  {
    re::MaterialDefinitionAsset::assetType(v1);
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  id v2 = *(uint64_t **)(v8 + 264);
  if (v2 != re::MaterialDefinitionAsset::assetType(v1)) {
    goto LABEL_6;
  }
  uint64_t v3 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)&v7);
  if (!v3) {
    goto LABEL_6;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v6, (const re::AssetHandle *)(v3 + 128));
  uint64_t v4 = v6[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
LABEL_7:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return v4;
}

void REMaterialAssetSetTextureBinding(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  ++*(_DWORD *)(v10 + 260);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v9);
  if (v7)
  {
    re::MaterialParameterBlock::setBinding(*(_anonymous_namespace_ **)(v7 + 1672), a2, a3, a4, 2, (uint64_t)v8);
    v8[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

void REMaterialAssetSetBufferBinding(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  ++*(_DWORD *)(v10 + 260);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v9);
  if (v7)
  {
    re::MaterialParameterBlock::setBinding(*(_anonymous_namespace_ **)(v7 + 1672), a2, a3, a4, 3, (uint64_t)v8);
    v8[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

void REMaterialAssetSetSamplerBinding(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v9);
  ++*(_DWORD *)(v10 + 260);
  uint64_t v7 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)&v9);
  if (v7)
  {
    re::MaterialParameterBlock::setBinding(*(_anonymous_namespace_ **)(v7 + 1672), a2, a3, a4, 4, (uint64_t)v8);
    v8[0] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

CFStringRef REMaterialAssetCopyTextureBindingStructName(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v29);
  if (v3)
  {
    uint64_t v4 = v3;
    re::MaterialParameterBlock::handle(*(re::MaterialParameterBlock **)(v3 + 1672), a2, (uint64_t)&v26);
    int v5 = BYTE4(v27) & 7;
    if (v5)
    {
      if (v5 == 2)
      {
        if ((BYTE4(v27) & 0x10) != 0)
        {
LABEL_7:
          re::MaterialParameterBlock::bindingValue(*(re **)(v4 + 1672), &v26, (uint64_t)&v23);
LABEL_23:
          CFStringRef v6 = CFStringCreateWithCString(0, re::s_materialTableIDMappings[BYTE8(v24)], 0x8000100u);
          goto LABEL_44;
        }
      }
      else if (v5 == 1 && (BYTE4(v27) & 0x10) != 0 && v28 == 64)
      {
        goto LABEL_7;
      }
    }
    uint64_t v7 = (re::MaterialParameterTable *)(*(void *)(v4 + 1664) + 224);
    if (a2)
    {
      uint64_t v8 = *a2;
      if (*a2)
      {
        char v9 = a2[1];
        if (v9)
        {
          uint64_t v10 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v8 = 31 * v8 + v9;
            int v11 = *v10++;
            char v9 = v11;
          }
          while (v11);
        }
        v8 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v22 = v8;
    re::MaterialParameterTable::handle(v7, &v22, (uint64_t)&v23);
    uint64_t v26 = v23;
    long long v27 = v24;
    char v28 = v25;
    uint64_t v22 = 0;
    int v12 = BYTE4(v24) & 7;
    if (v12)
    {
      if (v12 == 2)
      {
        if ((BYTE4(v24) & 0x10) != 0)
        {
LABEL_22:
          re::MaterialParameterTable::bindingValue((re *)(*(void *)(v4 + 1664) + 224), &v26, (uint64_t)&v23);
          goto LABEL_23;
        }
      }
      else if (v12 == 1 && (BYTE4(v24) & 0x10) != 0 && v28 == 64)
      {
        goto LABEL_22;
      }
    }
    uint64_t v13 = *(void *)(*(void *)(v4 + 1664) + 16);
    if (v13) {
      id v14 = (id)(v13 + 8);
    }
    if (a2)
    {
      uint64_t v15 = *a2;
      if (*a2)
      {
        char v16 = a2[1];
        if (v16)
        {
          unsigned int v17 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v15 = 31 * v15 + v16;
            int v18 = *v17++;
            char v16 = v18;
          }
          while (v18);
        }
        v15 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v21 = v15;
    re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v13 + 248), &v21, (uint64_t)&v23);
    uint64_t v26 = v23;
    char v28 = v25;
    long long v27 = v24;
    uint64_t v21 = 0;
    int v19 = BYTE4(v24) & 7;
    if (v19)
    {
      if (v19 == 2)
      {
        if ((BYTE4(v27) & 0x10) != 0) {
          goto LABEL_45;
        }
      }
      else if (v19 == 1)
      {
        CFStringRef v6 = 0;
        if ((BYTE4(v27) & 0x10) == 0 || v28 != 64)
        {
LABEL_42:
          if (!v13) {
            goto LABEL_44;
          }
LABEL_43:

          goto LABEL_44;
        }
LABEL_45:
        re::MaterialParameterTable::bindingValue((re *)(v13 + 248), &v26, (uint64_t)&v23);
        CFStringRef v6 = CFStringCreateWithCString(0, re::s_materialTableIDMappings[BYTE8(v24)], 0x8000100u);
        if (!v13) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
    }
    CFStringRef v6 = 0;
    goto LABEL_42;
  }
  CFStringRef v6 = 0;
LABEL_44:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  return v6;
}

CFStringRef REMaterialAssetCopyTextureBindingMemberName(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v29);
  if (!v3) {
    goto LABEL_33;
  }
  uint64_t v4 = (void *)v3;
  int v5 = (re::MaterialParameterTable *)(*(void *)(v3 + 1664) + 224);
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v6;
  re::MaterialParameterTable::handle(v5, &v25, (uint64_t)v26);
  uint64_t v25 = 0;
  int v10 = BYTE4(v27) & 7;
  if (v10)
  {
    if (v10 == 2)
    {
      if ((BYTE4(v27) & 0x10) == 0) {
        goto LABEL_17;
      }
    }
    else if (v10 != 1 || (BYTE4(v27) & 0x10) == 0 || v28 != 64)
    {
      goto LABEL_17;
    }
    uint64_t ParameterBinding = re::MaterialAsset::tryGetParameterBinding((re::MaterialAsset *)v4, a2);
    if (ParameterBinding)
    {
LABEL_32:
      CFStringRef v18 = CFStringCreateWithCString(0, *(const char **)(ParameterBinding + 32), 0x8000100u);
      goto LABEL_34;
    }
  }
LABEL_17:
  int v12 = (re::MaterialParameterTable *)(*(void *)(v4[208] + 16) + 248);
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v13;
  re::MaterialParameterTable::handle(v12, &v21, (uint64_t)v22);
  long long v27 = v23;
  char v28 = v24;
  uint64_t v21 = 0;
  int v17 = BYTE4(v23) & 7;
  if (!v17) {
    goto LABEL_33;
  }
  if (v17 == 2)
  {
    if ((BYTE4(v23) & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v17 != 1) {
    goto LABEL_33;
  }
  CFStringRef v18 = 0;
  if ((BYTE4(v23) & 0x10) != 0 && v28 == 64)
  {
LABEL_31:
    int v19 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v4 + 5));
    uint64_t ParameterBinding = re::MaterialDefinitionAsset::tryGetParameterBinding(v19, a2);
    if (ParameterBinding) {
      goto LABEL_32;
    }
LABEL_33:
    CFStringRef v18 = 0;
  }
LABEL_34:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  return v18;
}

CFStringRef REMaterialAssetCopyBufferBindingStructName(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v29);
  if (!v3) {
    goto LABEL_33;
  }
  uint64_t v4 = (void *)v3;
  int v5 = (re::MaterialParameterTable *)(*(void *)(v3 + 1664) + 224);
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v6;
  re::MaterialParameterTable::handle(v5, &v25, (uint64_t)v26);
  uint64_t v25 = 0;
  int v10 = BYTE4(v27) & 7;
  if (v10)
  {
    if (v10 == 3)
    {
      if ((BYTE4(v27) & 0x10) == 0) {
        goto LABEL_17;
      }
    }
    else if (v10 != 1 || (BYTE4(v27) & 0x10) == 0 || v28 != 128)
    {
      goto LABEL_17;
    }
    uint64_t ParameterBinding = re::MaterialAsset::tryGetParameterBinding((re::MaterialAsset *)v4, a2);
    if (ParameterBinding)
    {
LABEL_32:
      CFStringRef v18 = CFStringCreateWithCString(0, re::s_materialTableIDMappings[*(unsigned __int8 *)(ParameterBinding + 16)], 0x8000100u);
      goto LABEL_34;
    }
  }
LABEL_17:
  int v12 = (re::MaterialParameterTable *)(*(void *)(v4[208] + 16) + 248);
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v13;
  re::MaterialParameterTable::handle(v12, &v21, (uint64_t)v22);
  long long v27 = v23;
  unsigned __int8 v28 = v24;
  uint64_t v21 = 0;
  int v17 = BYTE4(v23) & 7;
  if (!v17) {
    goto LABEL_33;
  }
  if (v17 == 3)
  {
    if ((BYTE4(v23) & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v17 != 1) {
    goto LABEL_33;
  }
  CFStringRef v18 = 0;
  if ((BYTE4(v23) & 0x10) != 0 && v28 == 128)
  {
LABEL_31:
    int v19 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v4 + 5));
    uint64_t ParameterBinding = re::MaterialDefinitionAsset::tryGetParameterBinding(v19, a2);
    if (ParameterBinding) {
      goto LABEL_32;
    }
LABEL_33:
    CFStringRef v18 = 0;
  }
LABEL_34:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  return v18;
}

CFStringRef REMaterialAssetCopyBufferBindingMemberName(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v29);
  if (!v3) {
    goto LABEL_33;
  }
  uint64_t v4 = (void *)v3;
  int v5 = (re::MaterialParameterTable *)(*(void *)(v3 + 1664) + 224);
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        uint64_t v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v6;
  re::MaterialParameterTable::handle(v5, &v25, (uint64_t)v26);
  uint64_t v25 = 0;
  int v10 = BYTE4(v27) & 7;
  if (v10)
  {
    if (v10 == 3)
    {
      if ((BYTE4(v27) & 0x10) == 0) {
        goto LABEL_17;
      }
    }
    else if (v10 != 1 || (BYTE4(v27) & 0x10) == 0 || v28 != 128)
    {
      goto LABEL_17;
    }
    uint64_t ParameterBinding = re::MaterialAsset::tryGetParameterBinding((re::MaterialAsset *)v4, a2);
    if (ParameterBinding)
    {
LABEL_32:
      CFStringRef v18 = CFStringCreateWithCString(0, *(const char **)(ParameterBinding + 32), 0x8000100u);
      goto LABEL_34;
    }
  }
LABEL_17:
  int v12 = (re::MaterialParameterTable *)(*(void *)(v4[208] + 16) + 248);
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v13;
  re::MaterialParameterTable::handle(v12, &v21, (uint64_t)v22);
  long long v27 = v23;
  unsigned __int8 v28 = v24;
  uint64_t v21 = 0;
  int v17 = BYTE4(v23) & 7;
  if (!v17) {
    goto LABEL_33;
  }
  if (v17 == 3)
  {
    if ((BYTE4(v23) & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  if (v17 != 1) {
    goto LABEL_33;
  }
  CFStringRef v18 = 0;
  if ((BYTE4(v23) & 0x10) != 0 && v28 == 128)
  {
LABEL_31:
    int v19 = (re::MaterialDefinitionAsset *)re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v4 + 5));
    uint64_t ParameterBinding = re::MaterialDefinitionAsset::tryGetParameterBinding(v19, a2);
    if (ParameterBinding) {
      goto LABEL_32;
    }
LABEL_33:
    CFStringRef v18 = 0;
  }
LABEL_34:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  return v18;
}

const char *REMaterialGetDefaultSamplerArrayName()
{
  return "dynamicSamplers";
}

id REMaterialCreateDefaultSamplerDescriptor()
{
  int v3 = 1;
  int v6 = 0;
  long long v9 = 0u;
  uint64_t v4 = 0x200000002;
  int v5 = 2;
  uint64_t v7 = 0x100000001;
  int v8 = 2;
  DWORD2(v9) = 2139095040;
  uint64_t v10 = 1;
  re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)&v3, &v11);
  id v0 = v11;
  uint64_t v1 = v0;
  if (v0) {

  }
  return v1;
}

BOOL REMaterialAssetTechniqueHasVariation(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  v23[0] = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v22);
  uint64_t v6 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v22);
  if (v6
    && (uint64_t v7 = *(void *)(v6 + 1664),
        (uint64_t v8 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v7 + 24, v23)) != 0)&& (v9 = *(void *)(v8 + 8)) != 0)
  {
    uint64_t v10 = *(unsigned int **)(v8 + 16);
    id v11 = &v10[v9];
    while (1)
    {
      unint64_t v12 = *v10;
      unint64_t v13 = *(void *)(v7 + 80);
      if (v13 <= v12)
      {
        v23[1] = 0;
        memset(v32, 0, sizeof(v32));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 476;
        __int16 v28 = 2048;
        unint64_t v29 = v12;
        __int16 v30 = 2048;
        unint64_t v31 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v14 = *(void *)(*(void *)(v7 + 88) + 40 * v12);
      if (*(unsigned char *)(v14 + 40)) {
        uint64_t v15 = v14 + 48;
      }
      else {
        uint64_t v15 = *(void *)v14 + 8;
      }
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(v32, v15);
      *(_OWORD *)((char *)&v32[1] + 8) = *(_OWORD *)(v15 + 24);
      if (re::FunctionConstantsEnumerator::hasMatchingValueInLayer((re::FunctionConstantsEnumerator *)v32, a3, a4))
      {
        BOOL v20 = 1;
        goto LABEL_21;
      }
      uint64_t v16 = *(void *)(v14 + 24);
      if (v16) {
        break;
      }
LABEL_17:
      re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v32);
      BOOL v20 = 0;
      if (++v10 == v11) {
        goto LABEL_22;
      }
    }
    int v17 = *(re::TechniqueFunctionConstant **)(v14 + 32);
    uint64_t v18 = v16 << 6;
    while (1)
    {
      int v19 = (*((void *)v17 + 1) & 1) != 0 ? (const char *)*((void *)v17 + 2) : (char *)v17 + 9;
      if (!strcmp(v19, a3)) {
        break;
      }
      int v17 = (re::TechniqueFunctionConstant *)((char *)v17 + 64);
      v18 -= 64;
      if (!v18) {
        goto LABEL_17;
      }
    }
    BOOL v20 = re::TechniqueFunctionConstant::getAs64Bits(v17) == a4;
LABEL_21:
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v32);
  }
  else
  {
    BOOL v20 = 0;
  }
LABEL_22:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v20;
}

BOOL REMaterialDefinitionAssetHasTechniqueWithHash(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v2 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 744);
    if (v3)
    {
      uint64_t v4 = (void *)(v3 + 8);
      id v5 = (id)(v3 + 8);
      BOOL v6 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v3 + 136, &v9);
    }
    else
    {
      BOOL v6 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(136, &v9);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

BOOL REMaterialDefinitionAssetHasPassTechniqueMappingWithName(uint64_t a1, const char *a2)
{
  void v11[2] = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v10);
  if (v3 && (v4 = v3, (uint64_t v5 = *(void *)(v3 + 744)) != 0))
  {
    size_t v6 = strlen(a2);
    if (v6)
    {
      MurmurHash3_x64_128((uint64_t)a2, v6, 0, (unint64_t *)v11);
      unint64_t v7 = (v11[1] + (v11[0] << 6) + ((unint64_t)v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0];
      uint64_t v5 = *(void *)(v4 + 744);
    }
    else
    {
      unint64_t v7 = 0;
    }
    v11[0] = v7;
    BOOL v8 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v5 + 16, v11);
  }
  else
  {
    BOOL v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v8;
}

uint64_t REMaterialAssetGetValidPassTechniqueMapping(uint64_t a1, const char *a2, void *a3)
{
  _OWORD v20[2] = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a1, v19);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v19);
  if (v5)
  {
    size_t v6 = (void *)v5;
    size_t v7 = strlen(a2);
    if (v7)
    {
      MurmurHash3_x64_128((uint64_t)a2, v7, 0, (unint64_t *)v20);
      unint64_t v8 = (v20[1] + (v20[0] << 6) + ((unint64_t)v20[0] >> 2) - 0x61C8864680B583E9) ^ v20[0];
    }
    else
    {
      unint64_t v8 = 0;
    }
    v20[0] = v8;
    uint64_t v10 = *(void *)(v6[208] + 16);
    if (v10) {
      id v11 = (id)(v10 + 8);
    }
    uint64_t v12 = v6[5];
    unint64_t v13 = (re::MaterialParameterBlock *)v6[209];
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    }
    PassTechniqueMapping = (uint64_t *)re::MaterialParameterBlock::tryGetPassTechniqueMapping(v13, v8, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
    if (!PassTechniqueMapping
      || (uint64_t v15 = PassTechniqueMapping, !REMaterialDefinitionAssetHasTechniqueWithHash(v12, *PassTechniqueMapping)))
    {
      uint64_t v16 = (re::MaterialParameterTable *)(v6[208] + 224);
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      }
      int v17 = (uint64_t *)re::MaterialParameterTable::tryGetPassTechniqueMapping(v16, v8, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      if (!v17 || (uint64_t v15 = v17, !REMaterialDefinitionAssetHasTechniqueWithHash(v12, *v17)))
      {
        uint64_t v15 = (void *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v10 + 16, v20);
        if (!v15)
        {
          uint64_t v9 = 0;
          if (!v10) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }
      }
    }
    *a3 = *v15;
    uint64_t v9 = 1;
    if (v10) {
LABEL_18:
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_19:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
  return v9;
}

const char *REMaterialAssetGetName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  re::AssetHandle::loadNow(v4[1], 0);
  uint64_t v1 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v4);
  if (v1) {
    uint64_t v2 = *(const char **)(*(void *)(v1 + 1664) + 1352);
  }
  else {
    uint64_t v2 = "";
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REMaterialAssetGetSourceName(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  re::AssetHandle::loadNow(v6[1], 0);
  uint64_t v1 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v6);
  if (!v1) {
    goto LABEL_7;
  }
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = v2 >> 1;
  if ((v2 & 1) == 0) {
    unint64_t v3 = v2 >> 1;
  }
  if (v3)
  {
    if (v2) {
      uint64_t v4 = *(void *)(v1 + 24);
    }
    else {
      uint64_t v4 = v1 + 17;
    }
  }
  else
  {
LABEL_7:
    uint64_t v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REMaterialAssetGetFunctionConstant(uint64_t a1, const char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  unint64_t v3 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v10);
  if (v3)
  {
    uint64_t v4 = (uint64_t)v3 + 304;
    uint64_t v5 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v4, (uint64_t)&v8);
    if (v8 && (v9 & 1) != 0) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    if (v5)
    {
      if (*(unsigned char *)(v5 + 8)) {
        size_t v6 = *(const char **)(v5 + 16);
      }
      else {
        size_t v6 = (const char *)(v5 + 9);
      }
      uint64_t v5 = (uint64_t)CFStringCreateWithCString(0, v6, 0x8000100u);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v5;
}

uint64_t REMaterialAssetGetCullMode(uint64_t a1, void *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v3 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v6);
  if (v3 && *(unsigned char *)(v3 + 354))
  {
    *a2 = *(unsigned __int8 *)(v3 + 355);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v4;
}

uint64_t REMaterialAssetGetType(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v4);
  if (v1) {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 1730);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REMaterialAssetGetFeatureFlags(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v4);
  if (v1) {
    uint64_t v2 = *(unsigned __int16 *)(v1 + 1728);
  }
  else {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

id REMaterialAssetCopyShaderGraphParameterNames(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v7);
  if (v1)
  {
    re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray((uint64_t)v6, (uint64_t *)(v1 + 1736));
    id v2 = objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc);
    id v3 = objc_msgSend(v2, sel_initWithObjects_count_, v6[4], v6[2]);
    id v4 = v3;
    if (v3) {

    }
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v6);
  }
  else
  {
    id v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return v4;
}

uint64_t REMaterialAssetIsVisibleShaderGraphParameter(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v13);
    uint64_t v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v13);
    if (v4)
    {
      re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray((uint64_t)v10, (uint64_t *)(v4 + 1736));
      if (v11)
      {
        uint64_t v5 = v12;
        uint64_t v6 = 8 * v11 - 8;
        do
        {
          size_t v7 = *v5++;
          a1 = (uint64_t)objc_msgSend(v7, sel_isEqualToString_, v3);
          if (a1) {
            break;
          }
          uint64_t v8 = v6;
          v6 -= 8;
        }
        while (v8);
      }
      else
      {
        a1 = 0;
      }
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v10);
    }
    else
    {
      a1 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  }

  return a1;
}

id REMaterialAssetGetGeomFlattenedCustomParamNames(uint64_t a1)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v5);
    uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
    if (v1)
    {
      id v2 = *(id *)(v1 + 1776);
      id v3 = v2;
      if (v2) {
    }
      }
    else
    {
      id v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id REMaterialAssetGetSurfFlattenedCustomParamNames(uint64_t a1)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v5);
    uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
    if (v1)
    {
      id v2 = *(id *)(v1 + 1784);
      id v3 = v2;
      if (v2) {
    }
      }
    else
    {
      id v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id REMaterialAssetGetGeometryModifierCustomParamsName(uint64_t a1)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v5);
    uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
    if (v1)
    {
      id v2 = *(id *)(v1 + 1792);
      id v3 = v2;
      if (v2) {
    }
      }
    else
    {
      id v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id REMaterialAssetGetSurfaceShaderCustomParamsName(uint64_t a1)
{
  if (a1)
  {
    re::AssetAPIHelper::assetHandleCreate(a1, v5);
    uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
    if (v1)
    {
      id v2 = *(id *)(v1 + 1800);
      id v3 = v2;
      if (v2) {
    }
      }
    else
    {
      id v3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

BOOL REMaterialAssetHasGeometryModifierCustomParamsName(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
  if (v1)
  {
    id v2 = *(id *)(v1 + 1792);
    BOOL v3 = v2 != 0;
    if (v2)
    {

      BOOL v3 = 1;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

BOOL REMaterialAssetHasSurfaceShaderCustomParamsName(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  re::AssetAPIHelper::assetHandleCreate(a1, v5);
  uint64_t v1 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v5);
  if (v1)
  {
    id v2 = *(id *)(v1 + 1800);
    BOOL v3 = v2 != 0;
    if (v2)
    {

      BOOL v3 = 1;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v3;
}

uint64_t re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = a2[2];
    unint64_t v7 = *(void *)(a1 + 16);
    if (v6 >= v7)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, a2[2]);
      unint64_t v13 = (void **)a2[4];
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void ***)(a1 + 32);
      if (v14)
      {
        uint64_t v16 = 8 * v14;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=(v15++, v13++);
          v16 -= 8;
        }
        while (v16);
        uint64_t v15 = *(void ***)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 16);
        unint64_t v13 = (void **)a2[4];
      }
      if (v14 != v6)
      {
        int v17 = &v13[v14];
        uint64_t v18 = &v15[v14];
        uint64_t v19 = 8 * v6 - 8 * v14;
        do
        {
          BOOL v20 = *v17++;
          *v18++ = v20;
          v19 -= 8;
        }
        while (v19);
      }
    }
    else
    {
      uint64_t v8 = *(void ***)(a1 + 32);
      if (v6)
      {
        char v9 = (void **)a2[4];
        uint64_t v10 = 8 * v6;
        do
        {
          NS::SharedPtr<MTL::Texture>::operator=(v8++, v9++);
          v10 -= 8;
        }
        while (v10);
        uint64_t v8 = *(void ***)(a1 + 32);
        unint64_t v7 = *(void *)(a1 + 16);
      }
      if (v6 != v7)
      {
        uint64_t v11 = &v8[v6];
        uint64_t v12 = 8 * v7 - 8 * v6;
        do
        {
          if (*v11)
          {

            id *v11 = 0;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    *(void *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t REFrameStatisticsHUDSetDisableRendering(uint64_t result, char a2)
{
  *(unsigned char *)(result + 17) = a2;
  return result;
}

void REFrameStatisticsHUDSetStatisticsOptions(re::FrameProfiler *this, const char *a2)
{
  *((_DWORD *)this + 44) = a2;
  re::FrameProfiler::checkUserDefaultsForStatisticsOptions(this, a2);
}

BOOL REFrameStatisticsHUDIsOverlayEnabled(uint64_t a1)
{
  return *(unsigned char *)(a1 + 204) && *(unsigned char *)(a1 + 17) == 0;
}

uint64_t REFrameStatisticsHUDCurStatisticsOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 176);
}

uint64_t REFrameStatisticsHUDSetRenderLayer(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

const char *REFrameStatisticsHUDGetStatisticsForOption(re::FrameProfiler *a1, unsigned int a2)
{
  if (re::FrameProfiler::totalNumberOfFlags(a1, a2) != 1) {
    return "";
  }
  StatisticOutputForOptiounint64_t n = re::FrameProfiler::getStatisticOutputForOption(a1, a2, 0);
  if (*((unsigned char *)StatisticOutputForOption + 8)) {
    return (const char *)*((void *)StatisticOutputForOption + 2);
  }
  else {
    return (char *)StatisticOutputForOption + 9;
  }
}

uint64_t REFrameStatisticsHUDSetActivePeerID(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t REFrameStatisticsHUDGetDefaultOptions()
{
  return 545;
}

void *REClippingBoxComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REClippingBoxComponentSetLocalBounds(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 32) = a2;
  *(__n128 *)(this + 48) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REClippingBoxComponentGetLocalBounds(__n128 *a1)
{
  return a1[2];
}

uint64_t REClippingBoxComponentSetFeatherIntervalPercentage(uint64_t this, float a2)
{
  *(float *)(this + 64) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

float REClippingBoxComponentGetFeatherIntervalPercentage(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t REClippingBoxComponentSetShouldClipChildren(uint64_t this, char a2)
{
  *(unsigned char *)(this + 68) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REClippingBoxComponentGetShouldClipChildren(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

uint64_t REEventBusPublish(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return re::EventBus::publish(a1, a3, a2, a4, 0, 0);
}

uint64_t REEventBusSubscribe(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v13[5] = *MEMORY[0x263EF8340];
  uint64_t v10 = re::globalAllocators(a1)[2];
  void v13[2] = a5;
  uint64_t v13[3] = v10;
  v13[0] = &unk_26E734C60;
  v13[1] = a4;
  void v13[4] = v13;
  uint64_t v11 = re::EventBus::subscribe(a1, a2, a3, (uint64_t)v13, 0, 0);
  re::FunctionBase<24ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v13);
  return v11;
}

uint64_t REEventBusSubscribeBlock(re::EventBus *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void v11[5] = *MEMORY[0x263EF8340];
  unint64_t v7 = a4;
  uint64_t v11[3] = re::globalAllocators(v7)[2];
  v11[0] = &unk_26E734CB8;
  uint64_t v8 = _Block_copy(v7);

  v11[1] = v8;
  void v11[4] = v11;
  uint64_t v9 = re::EventBus::subscribe(a1, a2, a3, (uint64_t)v11, 0, 0);
  re::FunctionBase<24ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v11);
  return v9;
}

uint64_t REEventBusSubscribeWithMatch(re::EventBus *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void v13[5] = *MEMORY[0x263EF8340];
  uint64_t v9 = a4;
  uint64_t v13[3] = re::globalAllocators(v9)[2];
  v13[0] = &unk_26E734CB8;
  uint64_t v10 = _Block_copy(v9);

  v13[1] = v10;
  void v13[4] = v13;
  uint64_t v11 = re::EventBus::subscribe(a1, a2, a3, (uint64_t)v13, a5, 0);
  re::FunctionBase<24ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v13);
  return v11;
}

uint64_t REEventBusGetSwiftObject(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t REEventBusSetSwiftObject(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t REAnimationDidStartEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationDidStartEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationDidStartEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationDidStartEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationDidStartEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAnimationDidCompleteEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationDidCompleteEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationDidCompleteEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationDidCompleteEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationDidCompleteEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAnimationDidLoopEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationDidLoopEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationDidLoopEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationDidLoopEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationDidLoopEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

float REAnimationDidLoopEventCycle(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

uint64_t REAnimationDidTerminateEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationDidTerminateEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationDidTerminateEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationDidTerminateEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationDidTerminateEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAnimationStartEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationStartEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationStartEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationStartEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationStartEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAnimationCompleteEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationCompleteEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationCompleteEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationCompleteEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationCompleteEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAnimationLoopEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationLoopEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationLoopEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationLoopEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationLoopEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

float REAnimationLoopEventCycle(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

uint64_t REAnimationTerminateEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAnimationTerminateEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAnimationTerminateEventTimelineIndex(unsigned int *a1)
{
  return *a1;
}

uint64_t REAnimationTerminateEventEntryIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

float REAnimationTerminateEventTime(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t REAudioPlayerDidChangeStateEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAudioPlayerDidChangeStateEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAudioPlayerDidCompleteEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAudioPlayerDidCompleteEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAudioPlayerDidCreateAudioUnitEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAudioPlayerDidCreateAudioUnitEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAudioPlayerDidPrepareAudioUnitEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAudioPlayerDidPrepareAudioUnitEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REAudioPlayerDidThrowErrorEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REAudioPlayerDidThrowErrorEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REEngineDoUpdateEventSubscribe(re *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REEngineDoUpdateEvent", a2);
  uint64_t v9 = REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
  re::Engine::updateRaiseUpdateEventScheduleState((re::Engine *)a2);
  return v9;
}

float REEngineDoUpdateEventDeltaTime(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t REEngineDoRenderEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REEngineDoRenderEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

float REEngineDoRenderEventDeltaTime(uint64_t a1)
{
  return *(float *)a1;
}

uint64_t RECollisionDidStartEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionDidStartEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionDidStartEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionDidStartEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

__n128 RECollisionDidStartEventPosition(__n128 *a1)
{
  return a1[1];
}

float RECollisionDidStartEventImpulse(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RECollisionDidUpdateEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionDidUpdateEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionDidUpdateEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionDidUpdateEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

__n128 RECollisionDidUpdateEventPosition(__n128 *a1)
{
  return a1[1];
}

float RECollisionDidUpdateEventImpulse(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RECollisionDidStopEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionDidStopEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionDidStopEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionDidStopEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t RECollisionStartEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionStartEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionStartEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionStartEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

__n128 RECollisionStartEventPosition(__n128 *a1)
{
  return a1[1];
}

float RECollisionStartEventImpulse(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RECollisionUpdateEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionUpdateEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionUpdateEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionUpdateEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

__n128 RECollisionUpdateEventPosition(__n128 *a1)
{
  return a1[1];
}

float RECollisionUpdateEventImpulse(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

uint64_t RECollisionStopEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"RECollisionStopEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t RECollisionStopEventObjectA(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t RECollisionStopEventObjectB(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t REMotionStateDidChangeEventSubscribe(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t TypeId = re::EventBus::getTypeId((re::EventBus *)"REMotionStateDidChangeEvent", a2);
  return REEventBusSubscribe(a1, TypeId, (uint64_t)a2, a3, a4);
}

uint64_t REMotionStateDidChangeEventRigidBody(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t REMotionStateDidChangeEventIsSleeping(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void re::internal::Callable<REEventBusSubscribe::$_0,REEventHandlerResult ()(void *,void const*)>::~Callable()
{
}

uint64_t re::internal::Callable<REEventBusSubscribe::$_0,REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *(void *)(a1 + 16));
}

uint64_t re::internal::Callable<REEventBusSubscribe::$_0,REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E734C60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<REEventBusSubscribe::$_0,REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E734C60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<REEventBusSubscribe::$_0,REEventHandlerResult ()(void *,void const*)>::size()
{
  return 24;
}

uint64_t re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734CB8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734CB8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult({block_pointer} {__strong})(void *,void const*),REEventHandlerResult ()(void *,void const*)>::size()
{
  return 16;
}

void *REVideoPlayerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REVideoPlayerComponentGetVideoAsset(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

void REVideoPlayerComponentSetVideoAsset(re *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      re::AssetAPIHelper::assetHandleCreate(a2, v4);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v3, (const re::AssetHandle *)v4);
      re::ecs2::VideoPlayerComponent::setVideoAsset(a1, v3);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
    }
  }
}

uint64_t REVideoPlayerComponentGetGuid(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t REVideoPlayerComponentSetGuid(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 64) = a2;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenRoundedCornerEnabled(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 73) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetScreenRoundedCornerEnabled(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 73) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenAspectRatioAnimationEnabled(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 74) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetScreenAspectRatioAnimationEnabled(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 74) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenDeferAspectRatioTransitionToApp(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 75) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetScreenDeferAspectRatioTransitionToApp(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 75) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenAspectRatio(uint64_t result, float a2)
{
  *(float *)(result + 168) = a2;
  return result;
}

float REVideoPlayerComponentGetScreenAspectRatio(uint64_t a1)
{
  return *(float *)(a1 + 168);
}

BOOL REVideoPlayerComponentGetEnableReflections(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 72) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetEnableReflections(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 72) = a2;
  }
  return result;
}

uint64_t REVideoPlayerComponentEnableReflections(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 72) = a2;
  }
  return result;
}

uint64_t REVideoPlayerComponentGetPreferredViewingMode(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 152);
  }
  else {
    return 1;
  }
}

uint64_t REVideoPlayerComponentGetDesiredViewingMode(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 152);
  }
  else {
    return 1;
  }
}

uint64_t REVideoPlayerComponentSetPreferredViewingMode(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 152) != a2) {
      *(unsigned char *)(result + 152) = a2;
    }
  }
  return result;
}

uint64_t REVideoPlayerComponentSetDesiredViewingMode(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 152) != a2) {
      *(unsigned char *)(result + 152) = a2;
    }
  }
  return result;
}

re::ecs2::NetworkComponent *REVideoPlayerComponentDumpHDRFrameAtTimeStamp(re::ecs2::NetworkComponent *result, CMTime *a2, CMTime *a3, const char *a4)
{
  if (result)
  {
    unint64_t v6 = result;
    CMTime time = *a2;
    double Seconds = CMTimeGetSeconds(&time);
    CMTime v10 = *a3;
    double v9 = CMTimeGetSeconds(&v10);
    if (a4)
    {
      if (Seconds >= 0.0 && v9 >= 0.0)
      {
        *((unsigned char *)v6 + 88) = 1;
        *((double *)v6 + 12) = Seconds;
        *((double *)v6 + 13) = v9;
        re::DynamicString::operator=((re::ecs2::NetworkComponent *)((char *)v6 + 120), (re::DynamicString *)&v12);
        if (v12)
        {
          if (v13) {
            (*(void (**)(void))(*(void *)v12 + 40))();
          }
        }
      }
    }
    return RENetworkMarkComponentDirty(v6);
  }
  return result;
}

void REVideoPlayerComponentPreloadVideoAsset(re::AssetManager *a1, re::ecs2::VideoPlayerComponent *this)
{
  if (a1)
  {
    if (this) {
      re::ecs2::VideoPlayerComponent::preloadVideoAsset(this, a1);
    }
  }
}

uint64_t REVideoPlayerComponentSetLowLatencyEnabled(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 16ArcSharedObject::ArcSharedObject(this, 0) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetLowLatencyEnabled(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 160) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenWrapTheta(uint64_t result, float a2)
{
  if (result) {
    *(float *)(result + 164) = a2;
  }
  return result;
}

double REVideoPlayerComponentGetScreenWrapTheta(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 164);
  return result;
}

uint64_t REVideoPlayerComponentSetScreenWrapPostive(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 172) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetScreenWrapPostive(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 172) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetScreenWrapAnimation(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 173) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetScreenWrapAnimation(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 173) != 0;
  }
  return result;
}

uint64_t REVideoPlayerComponentStartBlurVideoFadeIn(uint64_t result, float a2, float a3)
{
  if (result)
  {
    *(float *)(result + 76) = a2;
    *(float *)(result + 8ArcSharedObject::ArcSharedObject(this, 0) = a3;
    *(_DWORD *)(result + 84) = 1;
  }
  return result;
}

uint64_t REVideoPlayerComponentStartBlurVideoFadeOut(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 84) = 2;
  }
  return result;
}

uint64_t REVideoPlayerComponentSetUsesCurvedUIStyleSystemTreatments(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 174) = a2;
  }
  return result;
}

BOOL REVideoPlayerComponentGetUsesCurvedUIStyleSystemTreatments(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 174) != 0;
  }
  return result;
}

void REVideoPlayerComponentSetMipMapBias(uint64_t a1, float a2)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v4, (const re::AssetHandle *)(a1 + 40));
  uint64_t v3 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v3) {
    *(float *)(**(void **)(v3 + 200) + 8484) = a2;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

float REVideoPlayerComponentGetMipMapBias(uint64_t a1)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v4, (const re::AssetHandle *)(a1 + 40));
  uint64_t v1 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)v4);
  if (v1) {
    float v2 = *(float *)(**(void **)(v1 + 200) + 8484);
  }
  else {
    float v2 = -1.0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void *RECameraViewDescriptorsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t RECameraViewDescriptorsComponentSetViewMode(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (a3 >= 3)
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Invalid View Mode set, options are kREViewModeMono, kREViewModeSinglePass or kREViewModeDualPass", "!\"Unreachable code\"", "RECameraViewDescriptorsComponentSetViewMode", 34);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(ViewDescriptor + 192) = a3;
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t RECameraViewDescriptorsComponentGetViewMode(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t result = *(unsigned __int8 *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 192);
  if (result >= 3)
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Invalid View Mode on camera, supported options are ViewMode::kMono, ViewMode::kSinglePass or ViewMode::kDualPass", "!\"Unreachable code\"", "RECameraViewDescriptorsComponentGetViewMode", 60);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t RECameraViewDescriptorsComponentSetRenderOrder(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t RECameraViewDescriptorsComponentGetRenderOrder(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCount(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex(uint64_t a1, uint64_t a2)
{
  return a2 + 0x10000;
}

uint64_t RECameraViewDescriptorsComponentClearCameraViewDescriptors(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  *(void *)(a1 + 2+ 56) = 0;
  re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(a1 + 272), (re::AssetHandle *)(*(void *)(a1 + 272) + 336 * v2));
  ++*(_DWORD *)(a1 + 264);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t RECameraViewDescriptorsComponentAddViewDescriptor(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(v11, 0, 32);
  void v11[2] = xmmword_23435FBB0;
  int v12 = 0;
  int v13 = 117440767;
  __int16 v14 = 1;
  char v15 = 0;
  uint64_t v18 = 0;
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  do
  {
    uint64_t v3 = (char *)v11 + v2;
    *((void *)v3 + 18) = 0;
    *((void *)v3 + 15) = 0;
    *((void *)v3 + 16) = 0;
    *((void *)v3 + 14) = 0;
    v2 += 40;
    *((_DWORD *)v3 + 34) = 0;
  }
  while (v2 != 80);
  char v19 = 0;
  long long v21 = xmmword_2343854A0;
  long long v20 = xmmword_2343854A0;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  __int16 v25 = 1;
  char v26 = 0;
  uint64_t v29 = 0;
  memset(v27, 0, sizeof(v27));
  int v28 = 0;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(a1 + 240), (re::ecs2::CameraViewDescriptor *)v11);
  uint64_t v4 = *(void *)(a1 + 256);
  re::ecs2::Component::enqueueMarkDirty(a1);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v27);
  for (uint64_t i = 272; i != 256; i -= 8)
  {
    uint64_t v6 = *(void **)((char *)v11 + i);
    if (v6)
    {

      *(void *)((char *)v11 + i) = 0;
    }
  }
  do
  {
    unint64_t v7 = *(void **)((char *)v11 + i);
    if (v7)
    {

      *(void *)((char *)v11 + i) = 0;
    }
    i -= 8;
  }
  while (i != 240);
  do
  {
    uint64_t v8 = *(void **)((char *)v11 + i);
    if (v8)
    {

      *(void *)((char *)v11 + i) = 0;
    }
    i -= 8;
  }
  while (i != 224);
  for (uint64_t j = 152; j != 72; j -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v11 + j);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v16);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v4 + 0xFFFF;
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandCount(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  return *(void *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 304);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandAtIndexLane(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (*(void *)(ViewDescriptor + 304) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(ViewDescriptor + 320) + 136 * a3;
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v6 = *(void *)(v5 + 16);
  }
  else {
    uint64_t v6 = v5 + 9;
  }
  unint64_t v7 = NSString;
  return [v7 stringWithUTF8String:v6];
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandAtIndexRenderTarget(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, unsigned int a4)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (*(void *)(ViewDescriptor + 304) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(ViewDescriptor + 320) + 136 * a3 + 24 * a4 + 32);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandAtIndexRenderLayer(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, unsigned int a4)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (*(void *)(ViewDescriptor + 304) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(void *)(ViewDescriptor + 320) + 136 * a3 + 4 * a4 + 80);
}

id RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandAtIndexTexture(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, unsigned int a4)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (*(void *)(ViewDescriptor + 304) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id v7 = objc_retainAutoreleasedReturnValue(objc_retainAutoreleaseReturnValue(*(id *)(*(void *)(ViewDescriptor + 320)
                                                                                  + 136 * a3
                                                                                  + 8 * a4
                                                                                  + 88)));
  return v7;
}

id RECameraViewDescriptorsComponentCameraViewDescriptorGetSpecifyCommandAtIndexTextureDescriptor(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, unsigned int a4)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (*(void *)(ViewDescriptor + 304) <= (unint64_t)a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id v7 = objc_retainAutoreleasedReturnValue(objc_retainAutoreleaseReturnValue(*(id *)(*(void *)(ViewDescriptor + 320)
                                                                                  + 136 * a3
                                                                                  + 8 * a4
                                                                                  + 104)));
  return v7;
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetScopeName(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t v4 = NSString;
  if (v9) {
    uint64_t v5 = *(unsigned char **)&v10[7];
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v6 = [v4 stringWithUTF8String:v5];
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return v6;
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t v3 = re::globalAllocators((re *)ViewDescriptor);
  uint64_t v4 = (re::RuntimeRenderGraphDataStruct *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 136, 8);
  uint64_t v5 = re::RuntimeRenderGraphDataStruct::RuntimeRenderGraphDataStruct(v4, "CameraData");
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v5, "disableAA", *(unsigned char *)(ViewDescriptor + 24));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "enableUnwarp", *(unsigned char *)(ViewDescriptor + 26));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "disableTonemapping", *(unsigned char *)(ViewDescriptor + 25));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "forceHidePassthroughFeed", *(unsigned char *)(ViewDescriptor + 28));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "disableDebugDraw", *(unsigned char *)(ViewDescriptor + 27));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "disableSceneRenderGraphFileProviders", *(unsigned char *)(ViewDescriptor + 29));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(v4, "loadColor", *(unsigned char *)(ViewDescriptor + 30));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<re::Vector4<float>>(v4, "clearColor", *(void *)(ViewDescriptor + 32), *(void *)(ViewDescriptor + 40));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<float>(v4, "clearDepth", *(float *)(ViewDescriptor + 48));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<unsigned char>(v4, "stencilMask", *(unsigned char *)(ViewDescriptor + 52));
  re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<unsigned char>(v4, "stencilReference", *(unsigned char *)(ViewDescriptor + 53));
  char v47 = *(unsigned char *)(ViewDescriptor + 54);
  {
    re::introspect<re::mtl::StencilOperation>(void)::info = re::mtl::introspect_StencilOperation(0, v44);
  }
  uint64_t v6 = (int *)re::introspect<re::mtl::StencilOperation>(void)::info;
  unsigned int v7 = *((_DWORD *)re::introspect<re::mtl::StencilOperation>(void)::info + 4);
  if (v7 <= 9 && ((1 << v7) & 0x301) != 0)
  {
    uint64_t v8 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::StencilOperation>(v4, v47);
    if ((v8 & 1) == 0)
    {
      char v9 = re::globalAllocators((re *)v8);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 72, 8);
      *(_OWORD *)uint64_t v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)(v10 + 48) = 0u;
      *(void *)(v10 + 64) = 0;
      uint64_t v46 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v10);
      uint64_t v11 = re::globalAllocators(v46);
      int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v11[2] + 32))(v11[2], 17, 0);
      strcpy(v12, "stencilOperation");
      *(void *)(v10 + 8) = v12;
      unint64_t v13 = *((void *)v4 + 10);
      unint64_t v14 = (v13 + v6[6] - 1) & -(uint64_t)v6[6];
      uint64_t v15 = v14 - v13;
      if (v14 > v13)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add((void *)v4 + 8, buf);
          --v15;
        }
        while (v15);
      }
      long long v16 = *(_OWORD *)(v10 + 16);
      *(void *)(v10 + 16) = v6;
      *(void *)(v10 + 24) = 0;
      *(_OWORD *)StringID buf = v16;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v17 = *((void *)v4 + 10);
      *(_DWORD *)(v10 + 36) = v17;
      *(_DWORD *)uint64_t v10 = 1;
      unint64_t v18 = v17;
      uint64_t v19 = (v6[5] + (uint64_t)v6[6] - 1) & -(uint64_t)v6[6];
      if (!v19) {
        goto LABEL_34;
      }
      do
      {
        buf[0] = 0;
        long long v20 = (re *)re::DynamicArray<char>::add((void *)v4 + 8, buf);
        --v19;
      }
      while (v19);
      unint64_t v18 = *((void *)v4 + 10);
      if (v18 <= v17)
      {
LABEL_34:
        uint64_t v48 = 0;
        long long v56 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        *(_OWORD *)StringID buf = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v49 = 136315906;
        *(void *)&int32x4_t v49[4] = "operator[]";
        *(_WORD *)&v49[12] = 1024;
        *(_DWORD *)&v49[14] = 789;
        *(_WORD *)&v49[18] = 2048;
        *(void *)&v49[20] = v17;
        __int16 v50 = 2048;
        unint64_t v51 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_35;
      }
      long long v21 = (const re::IntrospectionBase **)(*((void *)v4 + 12) + v17);
      memset(v49, 0, 24);
      *(void *)StringID buf = re::globalAllocators(v20)[2];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&long long v53 = v49;
      re::DynamicArray<re::TransitionCondition *>::add((void *)v4 + 3, &v46);
    }
  }
  else
  {
    uint64_t v22 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::StencilOperation>(v4, v47);
    if ((v22 & 1) == 0)
    {
      long long v23 = *re::graphicsLogObjects((re *)v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = "stencilOperation";
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  char v47 = *(unsigned char *)(ViewDescriptor + 55);
  {
    re::introspect<re::mtl::CompareFunction>(void)::info = re::mtl::introspect_CompareFunction(0, v45);
  }
  long long v24 = (int *)re::introspect<re::mtl::CompareFunction>(void)::info;
  unsigned int v25 = *((_DWORD *)re::introspect<re::mtl::CompareFunction>(void)::info + 4);
  BOOL v26 = v25 > 9;
  int v27 = (1 << v25) & 0x301;
  if (v26 || v27 == 0)
  {
    uint64_t v41 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::CompareFunction>(v4, v47);
    if ((v41 & 1) == 0)
    {
      uint64_t v42 = *re::graphicsLogObjects((re *)v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = "stencilCompare";
        _os_log_impl(&dword_233120000, v42, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
    goto LABEL_29;
  }
  uint64_t v29 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::CompareFunction>(v4, v47);
  if (v29)
  {
LABEL_29:
    re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<unsigned int>(v4, "stencilOperationUint", *(unsigned __int8 *)(ViewDescriptor + 54));
    return (uint64_t)v4;
  }
  uint64_t v30 = re::globalAllocators((re *)v29);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30[2] + 32))(v30[2], 72, 8);
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(void *)(v31 + 64) = 0;
  uint64_t v46 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v31);
  id v32 = re::globalAllocators(v46);
  uint64_t v33 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32[2] + 32))(v32[2], 15, 0);
  strcpy(v33, "stencilCompare");
  *(void *)(v31 + 8) = v33;
  unint64_t v34 = *((void *)v4 + 10);
  unint64_t v35 = (v34 + v24[6] - 1) & -(uint64_t)v24[6];
  uint64_t v36 = v35 - v34;
  if (v35 > v34)
  {
    do
    {
      buf[0] = 0;
      re::DynamicArray<char>::add((void *)v4 + 8, buf);
      --v36;
    }
    while (v36);
  }
  long long v37 = *(_OWORD *)(v31 + 16);
  *(void *)(v31 + 16) = v24;
  *(void *)(v31 + 24) = 0;
  *(_OWORD *)StringID buf = v37;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
  unint64_t v17 = *((void *)v4 + 10);
  *(_DWORD *)(v31 + 36) = v17;
  *(_DWORD *)uint64_t v31 = 1;
  unint64_t v18 = v17;
  uint64_t v38 = (v24[5] + (uint64_t)v24[6] - 1) & -(uint64_t)v24[6];
  if (v38)
  {
    do
    {
      buf[0] = 0;
      uint64_t v39 = (re *)re::DynamicArray<char>::add((void *)v4 + 8, buf);
      --v38;
    }
    while (v38);
    unint64_t v18 = *((void *)v4 + 10);
    if (v18 > v17)
    {
      long long v40 = (const re::IntrospectionBase **)(*((void *)v4 + 12) + v17);
      memset(v49, 0, 24);
      *(void *)StringID buf = re::globalAllocators(v39)[2];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&long long v53 = v49;
      re::DynamicArray<re::TransitionCondition *>::add((void *)v4 + 3, &v46);
      goto LABEL_29;
    }
  }
LABEL_35:
  uint64_t v48 = 0;
  long long v56 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)StringID buf = 0u;
  long long v53 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v49 = 136315906;
  *(void *)&int32x4_t v49[4] = "operator[]";
  *(_WORD *)&v49[12] = 1024;
  *(_DWORD *)&v49[14] = 789;
  *(_WORD *)&v49[18] = 2048;
  *(void *)&v49[20] = v17;
  __int16 v50 = 2048;
  unint64_t v51 = v18;
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

void re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<unsigned char>(void *a1, char *a2, char a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v29 = a3;
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v27);
  }
  uint64_t v5 = (int *)re::introspect<unsigned char>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<unsigned char>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned char>(a1, a2, v29);
    if ((v25 & 1) == 0)
    {
      BOOL v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned char>(a1, a2, v29);
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 64) = 0;
      int v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      unint64_t v13 = (re *)strlen(a2);
      unint64_t v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      long long v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, a2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = 0;
      *(_OWORD *)StringID buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        long long v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        long long v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v30, 0, sizeof(v30));
        *(void *)StringID buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v32 = v30;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

void re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<unsigned int>(void *a1, char *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v29 = a3;
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v27);
  }
  uint64_t v5 = (int *)re::introspect<unsigned int>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<unsigned int>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned int>(a1, a2, v29);
    if ((v25 & 1) == 0)
    {
      BOOL v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned int>(a1, a2, v29);
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 64) = 0;
      int v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      unint64_t v13 = (re *)strlen(a2);
      unint64_t v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      long long v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, a2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = 0;
      *(_OWORD *)StringID buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        long long v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        long long v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v30, 0, sizeof(v30));
        *(void *)StringID buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v32 = v30;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const re::RuntimeRenderGraphDataStruct *a3)
{
  uint64_t ViewDescriptor = (__n128 *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  re::ecs2::CameraViewDescriptor::updateWithSettings(ViewDescriptor, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetRenderGraph(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3)
{
  uint64_t ViewDescriptor = (uint64_t *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  re::AssetAPIHelper::assetHandleCreate(a3, &v11);
  uint64_t v6 = v11;
  uint64_t v7 = ViewDescriptor[1];
  uint64_t v8 = ViewDescriptor[2];
  ViewDescriptor[1] = v12;
  uint64_t v12 = v7;
  uint64_t v9 = *ViewDescriptor;
  *uint64_t ViewDescriptor = v6;
  ViewDescriptor[2] = v13;
  uint64_t v11 = v9;
  uint64_t v13 = v8;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorGetRenderGraph(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  return *(void *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorClearPickupScopeLanes(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  re::DynamicArray<re::ecs2::ScopeLanePair>::clear(ViewDescriptor + 72);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorAddPickupScopeLane(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const char *a3, const char *a4)
{
  uint64_t ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t v8 = (_anonymous_namespace_ *)((char *)ViewDescriptor + 72);
  *((void *)&v18 + 1) = 0;
  long long v19 = 0uLL;
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  re::DynamicString::operator=((re::DynamicString *)&v18, (re::DynamicString *)&v16);
  re::DynamicString::operator=((re::DynamicString *)&v20, (re::DynamicString *)&v14);
  v12.n128_f64[0] = re::DynamicArray<re::ecs2::ScopeLanePair>::add(v8, &v18);
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(double))(*(void *)v20 + 40))(v12.n128_f64[0]);
    }
    __n128 v12 = 0uLL;
    long long v20 = 0u;
    long long v21 = 0u;
  }
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(__n128))(*(void *)v18 + 40))(v12);
    }
    __n128 v12 = 0uLL;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v14 + 40))(v12);
  }
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v16 + 40))(v12);
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

float RECameraViewDescriptorsComponentCameraViewDescriptorGetViewport(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t v5 = 212;
  if (a3 < 2) {
    uint64_t v5 = 196;
  }
  return *(float *)(ViewDescriptor + v5);
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, float a4, float a5, float a6, float a7)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t v14 = (float *)(ViewDescriptor + 212);
  uint64_t v15 = 212;
  if (a3 < 2) {
    uint64_t v15 = 196;
  }
  *(float *)(ViewDescriptor + v15) = a4;
  if (a3 < 2) {
    uint64_t v14 = (float *)(ViewDescriptor + 196);
  }
  v14[1] = a5;
  uint64_t v14[2] = a6;
  void v14[3] = a7;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentClearSpecifyCommands(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  re::ecs2::CameraViewDescriptorsComponent::clearSpecifyCommands(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromTarget(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const char *a3, uint64_t a4, unsigned int a5)
{
  uint64_t ViewDescriptor = (re::ecs2::CameraViewDescriptor *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t SpecifyByLane = re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(ViewDescriptor, a3);
  __n128 v12 = (_anonymous_namespace_ *)re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (SpecifyByLane)
  {
    if (a5 >= 2)
    {
      if (a5 != 2) {
        return 1;
      }
      re::AssetAPIHelper::assetHandleCreate(a4, (uint64_t *)&v38);
      long long v18 = *(_OWORD *)(SpecifyByLane + 56);
      *(_OWORD *)(SpecifyByLane + + 56) = v38;
      long long v38 = v18;
      uint64_t v14 = *(void *)(SpecifyByLane + 72);
      *(void *)(SpecifyByLane + 72) = v39;
    }
    else
    {
      re::AssetAPIHelper::assetHandleCreate(a4, (uint64_t *)&v38);
      long long v13 = *(_OWORD *)(SpecifyByLane + 32);
      *(_OWORD *)(SpecifyByLane + 32) = v38;
      long long v38 = v13;
      uint64_t v14 = *(void *)(SpecifyByLane + 48);
      *(void *)(SpecifyByLane + 48) = v39;
    }
    uint64_t v39 = v14;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v38);
    return 1;
  }
  *((void *)&v38 + 1) = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  re::DynamicString::setCapacity(&v38, 0);
  memset(v42, 0, sizeof(v42));
  long long v41 = 0u;
  uint64_t v43 = -1;
  long long v44 = 0u;
  memset(v45, 0, 28);
  size_t v15 = strlen(a3);
  *(void *)&long long v46 = a3;
  *((void *)&v46 + 1) = v15;
  re::DynamicString::operator=((re::DynamicString *)&v38, (uint64_t)&v46);
  if (a5 < 2)
  {
    re::AssetAPIHelper::assetHandleCreate(a4, (uint64_t *)&v46);
    long long v16 = v41;
    long long v41 = v46;
    long long v46 = v16;
    uint64_t v17 = *(void *)&v42[0];
    *(void *)&v42[0] = v47;
LABEL_13:
    uint64_t v47 = v17;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
    goto LABEL_14;
  }
  if (a5 == 2)
  {
    re::AssetAPIHelper::assetHandleCreate(a4, (uint64_t *)&v46);
    long long v21 = *(_OWORD *)((char *)v42 + 8);
    *(_OWORD *)((char *)v42 + 8) = v46;
    long long v46 = v21;
    uint64_t v17 = *((void *)&v42[1] + 1);
    *((void *)&v42[1] + 1) = v47;
    goto LABEL_13;
  }
LABEL_14:
  re::DynamicString::DynamicString((re::DynamicString *)v34, (const re::DynamicString *)&v38);
  for (uint64_t i = 32; i != 80; i += 24)
    re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)v34 + i), (const re::AssetHandle *)((char *)&v38 + i));
  uint64_t v35 = v43;
  for (uint64_t j = 88; j != 104; j += 8)
    *(void *)((char *)v34 + j) = *(id *)((char *)&v38 + j);
  do
  {
    *(void *)((char *)v34 + j) = *(id *)((char *)&v38 + j);
    j += 8;
  }
  while (j != 120);
  uint64_t v36 = v45[2];
  int v37 = v45[3];
  uint64_t v19 = re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, a2, (uint64_t)v34);
  for (uint64_t k = 112; k != 96; k -= 8)
  {
    uint64_t v25 = *(void **)((char *)v34 + k);
    if (v25)
    {

      *(void *)((char *)v34 + k) = 0;
    }
  }
  do
  {
    BOOL v26 = *(void **)((char *)v34 + k);
    if (v26)
    {

      *(void *)((char *)v34 + k) = 0;
    }
    k -= 8;
  }
  while (k != 80);
  for (uint64_t m = 56; m != 8; m -= 24)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v34 + m));
  if (*(void *)&v34[0])
  {
    if (BYTE8(v34[0])) {
      (*(void (**)(void))(**(void **)&v34[0] + 40))();
    }
    memset(v34, 0, 32);
  }
  for (uint64_t n = 112; n != 96; n -= 8)
  {
    int v29 = *(void **)((char *)&v38 + n);
    if (v29)
    {

      *(void *)((char *)&v38 + n) = 0;
    }
  }
  do
  {
    uint64_t v30 = *(void **)((char *)&v38 + n);
    if (v30)
    {

      *(void *)((char *)&v38 + n) = 0;
    }
    n -= 8;
  }
  while (n != 80);
  for (iuint64_t i = 56; ii != 8; ii -= 24)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v38 + ii));
  if (void)v38 && (BYTE8(v38)) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)v38 + 40))(v38, v39, v32, v33);
  }
  return v19;
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const char *a3, int a4, unsigned int a5)
{
  uint64_t ViewDescriptor = (re::ecs2::CameraViewDescriptor *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t SpecifyByLane = re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(ViewDescriptor, a3);
  __n128 v12 = (_anonymous_namespace_ *)re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (SpecifyByLane)
  {
    if (a5 >= 2)
    {
      if (a5 == 2) {
        *(_DWORD *)(SpecifyByLane + 84) = a4;
      }
    }
    else
    {
      *(_DWORD *)(SpecifyByLane + 8ArcSharedObject::ArcSharedObject(this, 0) = a4;
    }
    return 1;
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    re::DynamicString::setCapacity(&v32, 0);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    uint64_t v39 = -1;
    long long v40 = 0u;
    memset(v41, 0, 28);
    size_t v13 = strlen(a3);
    v42[0] = a3;
    v42[1] = v13;
    re::DynamicString::operator=((re::DynamicString *)&v32, (uint64_t)v42);
    if (a5 >= 2)
    {
      if (a5 == 2) {
        HIDWORD(v39) = a4;
      }
    }
    else
    {
      LODWORD(v39) = a4;
    }
    re::DynamicString::DynamicString((re::DynamicString *)v28, (const re::DynamicString *)&v32);
    for (uint64_t i = 4; i != 10; i += 3)
      re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)v28 + i * 8), (const re::AssetHandle *)&(&v32)[i]);
    uint64_t v29 = v39;
    for (uint64_t j = 11; j != 13; ++j)
      *(void *)((char *)v28 + j * 8) = (&v32)[j];
    do
    {
      *(void *)((char *)v28 + j * 8) = (&v32)[j];
      ++j;
    }
    while (j != 15);
    uint64_t v30 = v41[2];
    int v31 = v41[3];
    uint64_t v14 = re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, a2, (uint64_t)v28);
    for (uint64_t k = 112; k != 96; k -= 8)
    {
      uint64_t v19 = *(void **)((char *)v28 + k);
      if (v19)
      {

        *(void *)((char *)v28 + k) = 0;
      }
    }
    do
    {
      long long v20 = *(void **)((char *)v28 + k);
      if (v20)
      {

        *(void *)((char *)v28 + k) = 0;
      }
      k -= 8;
    }
    while (k != 80);
    for (uint64_t m = 56; m != 8; m -= 24)
      re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v28 + m));
    if (*(void *)&v28[0])
    {
      if (BYTE8(v28[0])) {
        (*(void (**)(void))(**(void **)&v28[0] + 40))();
      }
      memset(v28, 0, 32);
    }
    for (uint64_t n = 14; n != 12; --n)
    {
      long long v23 = (&v32)[n];
      if (v23)
      {

        (&v32)[n] = 0;
      }
    }
    do
    {
      long long v24 = (&v32)[n];
      if (v24)
      {

        (&v32)[n] = 0;
      }
      --n;
    }
    while (n != 10);
    for (iuint64_t i = 7; ii != 1; ii -= 3)
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&(&v32)[ii]);
    if (v32 && (v33 & 1) != 0) {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v32 + 40))(v32, v34, v26, v27);
    }
  }
  return v14;
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const char *a3, void *a4, unsigned int a5)
{
  id v9 = a4;
  uint64_t ViewDescriptor = (re::ecs2::CameraViewDescriptor *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t SpecifyByLane = re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(ViewDescriptor, a3);
  __n128 v12 = (_anonymous_namespace_ *)re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (SpecifyByLane)
  {
    uint64_t v48 = v9;
    id v13 = v9;
    if (a5 >= 2)
    {
      long long v18 = v9;
      if (a5 != 2)
      {
LABEL_9:
        if (v18)
        {

          uint64_t v48 = 0;
        }
        uint64_t v19 = 1;
        goto LABEL_12;
      }
      uint64_t v14 = (void **)(SpecifyByLane + 96);
    }
    else
    {
      uint64_t v14 = (void **)(SpecifyByLane + 88);
    }
    NS::SharedPtr<MTL::Texture>::operator=(v14, &v48);
    long long v18 = v48;
    goto LABEL_9;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  re::DynamicString::setCapacity(&v39, 0);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  uint64_t v46 = -1;
  memset(v47, 0, 44);
  size_t v15 = strlen(a3);
  v49[0] = a3;
  v49[1] = v15;
  re::DynamicString::operator=((re::DynamicString *)&v39, (uint64_t)v49);
  id v38 = v9;
  id v16 = v9;
  if (a5 < 2)
  {
    uint64_t v17 = (void **)v47;
LABEL_15:
    NS::SharedPtr<MTL::Texture>::operator=(v17, &v38);
    id v21 = v38;
    goto LABEL_16;
  }
  id v21 = v9;
  if (a5 == 2)
  {
    uint64_t v17 = (void **)v47 + 1;
    goto LABEL_15;
  }
LABEL_16:
  if (v21)
  {

    id v38 = 0;
  }
  re::DynamicString::DynamicString((re::DynamicString *)v34, (const re::DynamicString *)&v39);
  for (uint64_t i = 4; i != 10; i += 3)
    re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)v34 + i * 8), (const re::AssetHandle *)&(&v39)[i]);
  uint64_t v35 = v46;
  for (uint64_t j = 11; j != 13; ++j)
    *(void *)((char *)v34 + j * 8) = (&v39)[j];
  do
  {
    *(void *)((char *)v34 + j * 8) = (&v39)[j];
    ++j;
  }
  while (j != 15);
  uint64_t v36 = *(void *)&v47[2];
  int v37 = DWORD2(v47[2]);
  uint64_t v19 = re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, a2, (uint64_t)v34);
  for (uint64_t k = 112; k != 96; k -= 8)
  {
    uint64_t v25 = *(void **)((char *)v34 + k);
    if (v25)
    {

      *(void *)((char *)v34 + k) = 0;
    }
  }
  do
  {
    uint64_t v26 = *(void **)((char *)v34 + k);
    if (v26)
    {

      *(void *)((char *)v34 + k) = 0;
    }
    k -= 8;
  }
  while (k != 80);
  for (uint64_t m = 56; m != 8; m -= 24)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v34 + m));
  if (*(void *)&v34[0])
  {
    if (BYTE8(v34[0])) {
      (*(void (**)(void))(**(void **)&v34[0] + 40))();
    }
    memset(v34, 0, 32);
  }
  for (uint64_t n = 14; n != 12; --n)
  {
    uint64_t v29 = (&v39)[n];
    if (v29)
    {

      (&v39)[n] = 0;
    }
  }
  do
  {
    uint64_t v30 = (&v39)[n];
    if (v30)
    {

      (&v39)[n] = 0;
    }
    --n;
  }
  while (n != 10);
  for (iuint64_t i = 7; ii != 1; ii -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&(&v39)[ii]);
  if (v39 && (v40 & 1) != 0) {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v39 + 40))(v39, v41, v32, v33);
  }
LABEL_12:

  return v19;
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromTextureDescriptor(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, const char *a3, void *a4, unsigned int a5)
{
  id v9 = a4;
  uint64_t ViewDescriptor = (re::ecs2::CameraViewDescriptor *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  uint64_t SpecifyByLane = re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(ViewDescriptor, a3);
  __n128 v12 = (_anonymous_namespace_ *)re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (SpecifyByLane)
  {
    uint64_t v49 = v9;
    id v13 = v9;
    if (a5 >= 2)
    {
      long long v18 = v9;
      if (a5 != 2)
      {
LABEL_9:
        if (v18)
        {

          uint64_t v49 = 0;
        }
        uint64_t v19 = 1;
        goto LABEL_12;
      }
      uint64_t v14 = (void **)(SpecifyByLane + 112);
    }
    else
    {
      uint64_t v14 = (void **)(SpecifyByLane + 104);
    }
    NS::SharedPtr<MTL::Texture>::operator=(v14, &v49);
    long long v18 = v49;
    goto LABEL_9;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  re::DynamicString::setCapacity(&v39, 0);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  uint64_t v46 = -1;
  long long v47 = 0u;
  memset(v48, 0, 28);
  size_t v15 = strlen(a3);
  v50[0] = a3;
  v50[1] = v15;
  re::DynamicString::operator=((re::DynamicString *)&v39, (uint64_t)v50);
  id v38 = v9;
  id v16 = v9;
  if (a5 < 2)
  {
    uint64_t v17 = (void **)v48;
LABEL_15:
    NS::SharedPtr<MTL::Texture>::operator=(v17, &v38);
    id v21 = v38;
    goto LABEL_16;
  }
  id v21 = v9;
  if (a5 == 2)
  {
    uint64_t v17 = (void **)&v48[1];
    goto LABEL_15;
  }
LABEL_16:
  if (v21)
  {

    id v38 = 0;
  }
  re::DynamicString::DynamicString((re::DynamicString *)v34, (const re::DynamicString *)&v39);
  for (uint64_t i = 4; i != 10; i += 3)
    re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)v34 + i * 8), (const re::AssetHandle *)&(&v39)[i]);
  uint64_t v35 = v46;
  for (uint64_t j = 11; j != 13; ++j)
    *(void *)((char *)v34 + j * 8) = (&v39)[j];
  do
  {
    *(void *)((char *)v34 + j * 8) = (&v39)[j];
    ++j;
  }
  while (j != 15);
  uint64_t v36 = v48[2];
  int v37 = v48[3];
  uint64_t v19 = re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, a2, (uint64_t)v34);
  for (uint64_t k = 112; k != 96; k -= 8)
  {
    uint64_t v25 = *(void **)((char *)v34 + k);
    if (v25)
    {

      *(void *)((char *)v34 + k) = 0;
    }
  }
  do
  {
    uint64_t v26 = *(void **)((char *)v34 + k);
    if (v26)
    {

      *(void *)((char *)v34 + k) = 0;
    }
    k -= 8;
  }
  while (k != 80);
  for (uint64_t m = 56; m != 8; m -= 24)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v34 + m));
  if (*(void *)&v34[0])
  {
    if (BYTE8(v34[0])) {
      (*(void (**)(void))(**(void **)&v34[0] + 40))();
    }
    memset(v34, 0, 32);
  }
  for (uint64_t n = 14; n != 12; --n)
  {
    uint64_t v29 = (&v39)[n];
    if (v29)
    {

      (&v39)[n] = 0;
    }
  }
  do
  {
    uint64_t v30 = (&v39)[n];
    if (v30)
    {

      (&v39)[n] = 0;
    }
    --n;
  }
  while (n != 10);
  for (iuint64_t i = 7; ii != 1; ii -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&(&v39)[ii]);
  if (v39 && (v40 & 1) != 0) {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v39 + 40))(v39, v41, v32, v33);
  }
LABEL_12:

  return v19;
}

void RECameraViewDescriptorsComponentSnapshotNextFrame(re *a1, void *a2, void *a3)
{
  _OWORD v16[5] = *MEMORY[0x263EF8340];
  id v5 = a2;
  uint64_t v15 = 0;
  id v12 = v5;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  id v6 = a3;
  id v7 = v5;
  re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v13, &v12);
  if (v12) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray((uint64_t)v11, v13);
  uint64_t v8 = _Block_copy(v6);

  uint64_t v10 = re::globalAllocators(v9)[2];
  v16[0] = &unk_26E734D10;
  v16[1] = v8;
  void v16[3] = v10;
  _OWORD v16[4] = v16;
  re::ecs2::CameraViewDescriptorsComponent::snapshot(a1, (uint64_t)v11, (uint64_t)v16);
  re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v16);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v11);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v13);
}

void RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings(re *a1, void *a2, const re::RuntimeRenderGraphDataStruct *a3, void *a4)
{
  _OWORD v18[5] = *MEMORY[0x263EF8340];
  id v7 = a2;
  uint64_t v17 = 0;
  id v14 = v7;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  id v8 = a4;
  id v9 = v7;
  re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v15, &v14);
  if (v14) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray((uint64_t)v13, v15);
  uint64_t v10 = _Block_copy(v8);

  uint64_t v12 = re::globalAllocators(v11)[2];
  v18[0] = &unk_26E734D68;
  v18[1] = v10;
  unint64_t v18[3] = v12;
  void v18[4] = v18;
  re::ecs2::CameraViewDescriptorsComponent::snapshotWithSettings(a1, (uint64_t)v13, a3, (uint64_t)v18);
  re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v18);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v13);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v15);
}

re::ecs2::CameraViewDescriptorsComponent *RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle(re *a1, void *a2, const re::RuntimeRenderGraphDataStruct *a3, void *a4)
{
  v20[5] = *MEMORY[0x263EF8340];
  id v7 = a2;
  uint64_t v19 = 0;
  id v16 = v7;
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  id v8 = a4;
  id v9 = v7;
  re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v17, &v16);
  if (v16) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::DynamicArray((uint64_t)v15, v17);
  uint64_t v10 = _Block_copy(v8);

  uint64_t v12 = re::globalAllocators(v11)[2];
  v20[0] = &unk_26E734DC0;
  v20[1] = v10;
  uint64_t v20[3] = v12;
  _OWORD v20[4] = v20;
  id v13 = re::ecs2::CameraViewDescriptorsComponent::snapshotWithSettings(a1, (uint64_t)v15, a3, (uint64_t)v20);
  re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v20);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v15);
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v17);

  return v13;
}

void RECameraViewDescriptorsComponentSetRasterizationRateMap(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, void *a3, unsigned int a4)
{
  id v7 = a3;
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (a4 >= 2)
  {
    if (a4 != 2) {
      goto LABEL_7;
    }
    id v12 = v7;
    id v11 = v7;
    uint64_t v10 = (void **)(ViewDescriptor + 240);
  }
  else
  {
    id v12 = v7;
    id v9 = v7;
    uint64_t v10 = (void **)(ViewDescriptor + 232);
  }
  NS::SharedPtr<MTL::Texture>::operator=(v10, &v12);
  if (v12) {

  }
LABEL_7:
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentSetForceWaitOnPipelineCompilation(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, char a3)
{
  *(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 281) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentGetForceWaitOnPipelineCompilation(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  return *(unsigned __int8 *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 281);
}

uint64_t RECameraViewDescriptorsComponentSetFallbackRenderingMode(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, char a3)
{
  *(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 282) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t RECameraViewDescriptorsComponentGetFallbackRenderingMode(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  return *(unsigned __int8 *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2) + 282);
}

void RECameraViewDescriptorsComponentGetAspect(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, unsigned int a3, const re::RenderManager *a4, double a5)
{
}

void re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<BOOL>(void *a1, char *a2, char a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v29 = a3;
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v27);
  }
  id v5 = (int *)re::introspect<BOOL>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<BOOL>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<BOOL>(a1, a2, v29);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<BOOL>(a1, a2, v29);
    if ((v10 & 1) == 0)
    {
      id v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 64) = 0;
      int v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      id v13 = (re *)strlen(a2);
      id v14 = (char *)v13 + 1;
      uint64_t v15 = re::globalAllocators(v13);
      id v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, a2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = 0;
      *(_OWORD *)StringID buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        long long v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        long long v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v30, 0, sizeof(v30));
        *(void *)StringID buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v32 = v30;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<BOOL>(void *a1, char *__s2, char a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  char __src = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  unsigned int v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v12);
  }
  if (re::introspect<BOOL>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      id v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v10;
      __int16 v21 = 2048;
      unint64_t v22 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), &__src, *((int *)re::introspect<BOOL>(void)::info + 5));
  }
  return 1;
}

void *re::DynamicArray<char>::add(void *this, unsigned char *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<char>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(unsigned char *)(v3[4] + v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<re::Vector4<float>>(void *a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  unsigned int v6 = (int *)re::introspect<re::Vector4<float>>(void)::info;
  unsigned int v7 = *((_DWORD *)re::introspect<re::Vector4<float>>(void)::info + 4);
  BOOL v8 = v7 > 9;
  int v9 = (1 << v7) & 0x301;
  if (v8 || v9 == 0)
  {
    uint64_t v26 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector4<float>>(a1, __s2, v29, v30);
    if ((v26 & 1) == 0)
    {
      long long v27 = *re::graphicsLogObjects((re *)v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = __s2;
        _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v11 = re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector4<float>>(a1, __s2, v29, v30);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = re::globalAllocators((re *)v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 72, 8);
      *(_OWORD *)uint64_t v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(void *)(v13 + 64) = 0;
      uint64_t v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v13);
      uint64_t v14 = (re *)strlen(__s2);
      int v15 = (char *)v14 + 1;
      id v16 = re::globalAllocators(v14);
      __int16 v17 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v16[2] + 32))(v16[2], v15, 0);
      *(void *)(v13 + 8) = strcpy(v17, __s2);
      unint64_t v18 = a1[10];
      unint64_t v19 = (v18 + v6[6] - 1) & -(uint64_t)v6[6];
      uint64_t v20 = v19 - v18;
      if (v19 > v18)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v20;
        }
        while (v20);
      }
      long long v21 = *(_OWORD *)(v13 + 16);
      *(void *)(v13 + 16) = v6;
      *(void *)(v13 + 24) = 0;
      *(_OWORD *)StringID buf = v21;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v22 = a1[10];
      *(_DWORD *)(v13 + 36) = v22;
      *(_DWORD *)uint64_t v13 = 1;
      uint64_t v23 = (v6[5] + (uint64_t)v6[6] - 1) & -(uint64_t)v6[6];
      if (!v23) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        long long v24 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v23;
      }
      while (v23);
      if (a1[10] > v22)
      {
        long long v25 = (const re::IntrospectionBase **)(a1[12] + v22);
        memset(v31, 0, sizeof(v31));
        *(void *)StringID buf = re::globalAllocators(v24)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v33 = v31;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::Vector4<float>>(void *a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __src[0] = a3;
  __src[1] = a4;
  uint64_t v4 = a1[5];
  if (!v4) {
    return 0;
  }
  unsigned int v7 = (uint64_t *)a1[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      return 0;
    }
  }
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  if (re::introspect<re::Vector4<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    unint64_t v12 = a1[10];
    if (v12 <= v11)
    {
      __src[3] = 0;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      int v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      unint64_t v19 = v11;
      __int16 v20 = 2048;
      unint64_t v21 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v11), __src, *((int *)re::introspect<re::Vector4<float>>(void)::info + 5));
  }
  return 1;
}

void re::RuntimeRenderGraphDataStruct::setOrAddValueOfType<float>(void *a1, char *a2, float a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  float v29 = a3;
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v27);
  }
  id v5 = (int *)re::introspect<float>(void)::info;
  unsigned int v6 = *((_DWORD *)re::introspect<float>(void)::info + 4);
  BOOL v7 = v6 > 9;
  int v8 = (1 << v6) & 0x301;
  if (v7 || v8 == 0)
  {
    uint64_t v25 = re::RuntimeRenderGraphDataStruct::setValueOfType<float>(a1, a2, v29);
    if ((v25 & 1) == 0)
    {
      long long v26 = *re::graphicsLogObjects((re *)v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 136315138;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Attempted to add a non-basic type to RuntimeRenderGraphData: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v10 = re::RuntimeRenderGraphDataStruct::setValueOfType<float>(a1, a2, v29);
    if ((v10 & 1) == 0)
    {
      unint64_t v11 = re::globalAllocators((re *)v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(void *)(v12 + 64) = 0;
      uint64_t v28 = re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v12);
      uint64_t v13 = (re *)strlen(a2);
      int v14 = (char *)v13 + 1;
      int v15 = re::globalAllocators(v13);
      __int16 v16 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v15[2] + 32))(v15[2], v14, 0);
      *(void *)(v12 + 8) = strcpy(v16, a2);
      unint64_t v17 = a1[10];
      unint64_t v18 = (v17 + v5[6] - 1) & -(uint64_t)v5[6];
      uint64_t v19 = v18 - v17;
      if (v18 > v17)
      {
        do
        {
          buf[0] = 0;
          re::DynamicArray<char>::add(a1 + 8, buf);
          --v19;
        }
        while (v19);
      }
      long long v20 = *(_OWORD *)(v12 + 16);
      *(void *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = 0;
      *(_OWORD *)StringID buf = v20;
      re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)buf);
      unint64_t v21 = a1[10];
      *(_DWORD *)(v12 + 36) = v21;
      *(_DWORD *)uint64_t v12 = 1;
      uint64_t v22 = (v5[5] + (uint64_t)v5[6] - 1) & -(uint64_t)v5[6];
      if (!v22) {
        goto LABEL_19;
      }
      do
      {
        buf[0] = 0;
        long long v23 = (re *)re::DynamicArray<char>::add(a1 + 8, buf);
        --v22;
      }
      while (v22);
      if (a1[10] > v21)
      {
        long long v24 = (const re::IntrospectionBase **)(a1[12] + v21);
        memset(v30, 0, sizeof(v30));
        *(void *)StringID buf = re::globalAllocators(v23)[2];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&long long v32 = v30;
        re::DynamicArray<re::TransitionCondition *>::add(a1 + 3, &v28);
      }
      else
      {
LABEL_19:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<float>(void *a1, char *__s2, float a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  float __src = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  unsigned int v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v12);
  }
  if (re::introspect<float>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      __int16 v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v10;
      __int16 v21 = 2048;
      unint64_t v22 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), &__src, *((int *)re::introspect<float>(void)::info + 5));
  }
  return 1;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734D10;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734D10;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrame::$_0,void ()(re::FrameCount)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734D68;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734D68;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings::$_0,void ()(re::FrameCount)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734DC0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734DC0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle::$_0,void ()(re::FrameCount)>::size()
{
  return 16;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned int>(void *a1, char *__s2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int __src = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  unsigned int v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v12);
  }
  if (re::introspect<unsigned int>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      __int16 v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v10;
      __int16 v21 = 2048;
      unint64_t v22 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), &__src, *((int *)re::introspect<unsigned int>(void)::info + 5));
  }
  return 1;
}

re::RuntimeRenderGraphDataStruct *re::RuntimeRenderGraphDataStruct::RuntimeRenderGraphDataStruct(re::RuntimeRenderGraphDataStruct *this, const char *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E734E18;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  return this;
}

void re::RuntimeRenderGraphDataStruct::~RuntimeRenderGraphDataStruct(uint64_t **this)
{
  re::RuntimeRenderGraphDataStruct::~RuntimeRenderGraphDataStruct(this);
  JUMPOUT(0x237DBCBD0);
}

{
  char *v2;

  *this = (uint64_t *)&unk_26E734E18;
  uint64_t v2 = (char *)(this + 3);
  re::RuntimeRenderGraphDataStruct::deinit(this);
  re::DynamicString::deinit((re::DynamicString *)(this + 13));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 8));
  re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  *this = (uint64_t *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

uint64_t re::RuntimeRenderGraphDataStruct::deinit(uint64_t **this)
{
  uint64_t v1 = (re::RuntimeRenderGraphDataStruct *)this;
  uint64_t v2 = this[5];
  if (v2)
  {
    uint64_t v3 = this[7];
    uint64_t v4 = 8 * (void)v2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = *(void *)(*v3 + 8);
      if (v6)
      {
        uint64_t v7 = re::globalAllocators((re *)this);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7[2] + 40))(v7[2], v6);
      }
      *(void *)(v5 + 8) = 0;
      this = (uint64_t **)re::internal::destroyPersistent<re::IntrospectionMember>((re *)"deinit", 120, v5);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 24);
  return re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 64);
}

re *re::internal::destroyPersistent<re::IntrospectionMember>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 48);
    re::SerializedReference<re::IntrospectionBase const*>::reset(a3 + 16);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<unsigned char>(void *a1, char *__s2, char a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  char __src = a3;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)a1[7];
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t v8 = *v6;
    if (!strcmp(*(const char **)(*v6 + 8), __s2)) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v12);
  }
  if (re::introspect<unsigned char>(void)::info == *(_UNKNOWN **)(v8 + 16))
  {
    unint64_t v10 = *(int *)(v8 + 36);
    unint64_t v11 = a1[10];
    if (v11 <= v10)
    {
      uint64_t v14 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v15 = 136315906;
      __int16 v16 = "operator[]";
      __int16 v17 = 1024;
      int v18 = 789;
      __int16 v19 = 2048;
      unint64_t v20 = v10;
      __int16 v21 = 2048;
      unint64_t v22 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v10), &__src, *((int *)re::introspect<unsigned char>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::StencilOperation>(void *a1, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  char __src = a2;
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)a1[7];
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    if (!strcmp(*(const char **)(*v4 + 8), "stencilOperation")) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  {
    re::introspect<re::mtl::StencilOperation>(void)::info = re::mtl::introspect_StencilOperation(0, v10);
  }
  if (re::introspect<re::mtl::StencilOperation>(void)::info == *(_UNKNOWN **)(v6 + 16))
  {
    unint64_t v8 = *(int *)(v6 + 36);
    unint64_t v9 = a1[10];
    if (v9 <= v8)
    {
      uint64_t v12 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      uint64_t v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 789;
      __int16 v17 = 2048;
      unint64_t v18 = v8;
      __int16 v19 = 2048;
      unint64_t v20 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v8), &__src, *((int *)re::introspect<re::mtl::StencilOperation>(void)::info + 5));
  }
  return 1;
}

uint64_t re::RuntimeRenderGraphDataStruct::setValueOfType<re::mtl::CompareFunction>(void *a1, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  char __src = a2;
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)a1[7];
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    if (!strcmp(*(const char **)(*v4 + 8), "stencilCompare")) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  {
    re::introspect<re::mtl::CompareFunction>(void)::info = re::mtl::introspect_CompareFunction(0, v10);
  }
  if (re::introspect<re::mtl::CompareFunction>(void)::info == *(_UNKNOWN **)(v6 + 16))
  {
    unint64_t v8 = *(int *)(v6 + 36);
    unint64_t v9 = a1[10];
    if (v9 <= v8)
    {
      uint64_t v12 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      uint64_t v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 789;
      __int16 v17 = 2048;
      unint64_t v18 = v8;
      __int16 v19 = 2048;
      unint64_t v20 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(a1[12] + v8), &__src, *((int *)re::introspect<re::mtl::CompareFunction>(void)::info + 5));
  }
  return 1;
}

void *REPortalCrossingFlagsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPortalCrossingFlagsComponentSetEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalCrossingFlagsComponentGetEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t REPortalCrossingFlagsComponentSetInherited(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REPortalCrossingFlagsComponentGetInherited(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 26);
}

uint64_t REVertexCacheComponentGetVertexCacheCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void REVertexCacheComponentSetVertexCacheCount(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::AssetHandle>::resize(a1 + 32, a2);
  re::DynamicArray<float>::resize(a1 + 72, a2);
  if (*(void *)(a1 + 128) > a2)
  {
    re::DynamicArray<re::Optional<BOOL>>::resize((void *)(a1 + 112), a2);
  }
}

uint64_t REVertexCacheComponentGetVertexCache(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 > a2) {
    return *(void *)(*(void *)(a1 + 64) + 24 * a2);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v5 = (id)CoreRELog::log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 134218240;
    unint64_t v7 = a2;
    __int16 v8 = 2048;
    unint64_t v9 = v3;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v6, 0x16u);
  }

  return 0;
}

BOOL REVertexCacheComponentSetVertexCache(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 48);
  if (v4 > a2)
  {
    re::AssetAPIHelper::assetHandleCreate(a3, &v13);
    unint64_t v6 = *(void *)(a1 + 48);
    if (v6 > a2)
    {
      unint64_t v7 = (uint64_t *)(*(void *)(a1 + 64) + 24 * a2);
      uint64_t v8 = v7[1];
      v7[1] = v14;
      uint64_t v14 = v8;
      uint64_t v9 = *v7;
      *unint64_t v7 = 0;
      *unint64_t v7 = v13;
      uint64_t v13 = v9;
      uint64_t v10 = v7[2];
      void v7[2] = v15;
      uint64_t v15 = v10;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
      return v4 > a2;
    }
    uint64_t v16 = 0;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v17 = 136315906;
    unint64_t v18 = "operator[]";
    __int16 v19 = 1024;
    int v20 = 789;
    __int16 v21 = 2048;
    unint64_t v22 = a2;
    __int16 v23 = 2048;
    unint64_t v24 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_10:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + 4) = a2;
    WORD6(buf[0]) = 2048;
    *(void *)((char *)buf + 14) = v4;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)buf, 0x16u);
  }

  return v4 > a2;
}

float REVertexCacheComponentGetBaseTime(uint64_t a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 > a2) {
    return *(float *)(*(void *)(a1 + 104) + 4 * a2);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v5 = (id)CoreRELog::log;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = 134218240;
    unint64_t v7 = a2;
    __int16 v8 = 2048;
    unint64_t v9 = v3;
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v6, 0x16u);
  }

  return 3.4028e38;
}

BOOL REVertexCacheComponentSetBaseTime(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a1 + 88);
  if (v4 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      unint64_t v10 = v4;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    *(float *)(*(void *)(a1 + 104) + 4 * a2) = a3;
  }
  return v4 > a2;
}

uint64_t REVertexCacheComponentIsAnimating(re::ecs2::VertexCacheComponent *a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 11);
  if (v3 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 134218240;
      unint64_t v9 = a2;
      __int16 v10 = 2048;
      unint64_t v11 = v3;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v8, 0x16u);
    }

    return 0;
  }
  re::ecs2::VertexCacheComponent::initializeBindPoint(a1, a2);
  if (*((void *)a1 + 21) <= a2) {
    return 0;
  }
  uint64_t v5 = (re::BindPoint *)(*((void *)a1 + 23) + 48 * a2);
  return re::BindPoint::isOverridden(v5);
}

float REVertexCacheComponentGetAnimatedTime(re::ecs2::VertexCacheComponent *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 11);
  if (v3 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = a2;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = v3;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)buf, 0x16u);
    }

    return 3.4028e38;
  }
  else
  {
    re::ecs2::VertexCacheComponent::initializeBindPoint(a1, a2);
    if (*((void *)a1 + 21) > a2 && (uint64_t v5 = (re::BindPoint *)(*((void *)a1 + 23) + 48 * a2), *((void *)v5 + 3)))
    {
      uint64_t v6 = re::BindPoint::valueUntyped(v5);
    }
    else
    {
      if (*((void *)a1 + 11) <= a2)
      {
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v6 = *((void *)a1 + 13) + 4 * a2;
    }
    return *(float *)v6;
  }
}

BOOL REVertexCacheComponentIsInterpolationOverridden(void *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1[6];
  if (v3 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134218240;
      unint64_t v7 = a2;
      __int16 v8 = 2048;
      unint64_t v9 = v3;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v6, 0x16u);
    }
  }
  else if (a1[16] > a2)
  {
    return *(unsigned char *)(a1[18] + 2 * a2) != 0;
  }
  return 0;
}

BOOL REVertexCacheComponentGetInterpolationOverride(void *a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1[6];
  if (v3 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      unint64_t v10 = v3;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v7, 0x16u);
    }
  }
  else if (a1[16] > a2)
  {
    uint64_t v4 = a1[18];
    if (*(unsigned char *)(v4 + 2 * a2)) {
      return *(unsigned char *)(v4 + 2 * a2 + 1) != 0;
    }
  }
  return 0;
}

BOOL REVertexCacheComponentSetInterpolationOverride(void *a1, unint64_t a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v4 = a1[6];
  if (v4 > a2)
  {
    unint64_t v7 = a1[16];
    if (v7 <= a2)
    {
      re::DynamicArray<re::Optional<BOOL>>::resize(a1 + 14, v4);
      unint64_t v7 = a1[16];
    }
    if (v7 > a2)
    {
      unint64_t v8 = (unsigned char *)(a1[18] + 2 * a2);
      if (!*v8) {
        *unint64_t v8 = 1;
      }
      v8[1] = a3;
      return v4 > a2;
    }
    memset(buf, 0, sizeof(buf));
    unint64_t v4 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_14:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  __int16 v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + 4) = a2;
    WORD6(buf[0]) = 2048;
    *(void *)((char *)buf + 14) = v4;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)buf, 0x16u);
  }

  return v4 > a2;
}

BOOL REVertexCacheComponentDisableInterpolationOverride(void *a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1[6];
  if (v3 <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      unint64_t v10 = v3;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid vertex cache index (%zu), vertex cache count: %zu", (uint8_t *)&v7, 0x16u);
    }
  }
  else if (a1[16] > a2)
  {
    unint64_t v4 = (unsigned char *)(a1[18] + 2 * a2);
    if (*v4) {
      unsigned char *v4 = 0;
    }
  }
  return v3 > a2;
}

re::TextureImportOperation *RETextureImportOperationCreateWithBundleResource(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  unint64_t v10 = [v7 URLForResource:v8 withExtension:v9];
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = re::globalAllocators(v10);
    uint64_t v13 = (re::FileTextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2] + 32))(v12[2], 240, 8);
    int v14 = *(unsigned __int8 *)(re::ServiceLocator::serviceOrNull<re::AssetService>(a4) + 1344);
    re::FileTextureProvider::FileTextureProvider(v13, (id *)&v26, v14, (const char *)[v11 fileSystemRepresentation]);

    id v16 = [v7 bundleIdentifier];
    int v17 = (const char *)[v16 UTF8String];
    unint64_t v18 = (void *)strlen(v17);
    uint64_t v26 = (char *)v17;
    id v27 = v18;
    re::DynamicString::operator=((re::TextureImportOperation *)((char *)v15 + 152), (uint64_t)&v26);

    __int16 v19 = (const char *)[v8 UTF8String];
    int v20 = (void *)strlen(v19);
    uint64_t v26 = (char *)v19;
    id v27 = v20;
    re::DynamicString::operator=((re::TextureImportOperation *)((char *)v15 + 184), (uint64_t)&v26);
    if (v9)
    {
      __int16 v21 = (const char *)[v9 UTF8String];
      if (*((void *)v15 + 24)) {
        unint64_t v22 = (char *)*((void *)v15 + 25);
      }
      else {
        unint64_t v22 = (char *)v15 + 193;
      }
      __int16 v23 = strrchr(v22, 46);
      if (!v23 || strcmp(v23 + 1, v21))
      {
        re::DynamicString::append((re::TextureImportOperation *)((char *)v15 + 184), ".", 1uLL);
        size_t v24 = strlen(v21);
        re::DynamicString::append((re::TextureImportOperation *)((char *)v15 + 184), v21, v24);
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

void anonymous namespace'::getServiceLocationImageImportContext(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (id *)re::ServiceLocator::serviceOrNull<re::ImportGraphicsResources>(a2);
  re::ImportGraphicsContext::ImportGraphicsContext((re::ImportGraphicsContext *)a1, v4);
  if (*(unsigned char *)(re::ServiceLocator::serviceOrNull<re::AssetService>(a2) + 1376))
  {
    int v5 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
    if (*(unsigned char *)(a1 + 19)) {
      char v6 = *(unsigned char *)(a1 + 20);
    }
    else {
      char v6 = 0;
    }
    objc_storeStrong((id *)a1, 0);
    id v7 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;

    *(unsigned char *)(a1 + 18) = BYTE2(v5);
    *(_WORD *)(a1 + 16) = v5;
    if (!*(unsigned char *)(a1 + 19)) {
      *(unsigned char *)(a1 + 19) = 1;
    }
    *(unsigned char *)(a1 + 2ArcSharedObject::ArcSharedObject(this, 0) = v6;
    *(void *)(a1 + 24) = 0;
  }
}

re::TextureImportOperation *anonymous namespace'::newTextureImportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  int v5 = (re::AssetManager *)re::ServiceLocator::serviceOrNull<re::AssetService>(a1);
  char v3 = 1;
  re::make::shared::object<re::TextureImportOperation,re::TextureProvider *&,BOOL,re::AssetManager *&>((re *)&v6, &v3, &v5, &v4);
  return v4;
}

re::TextureImportOperation *RETextureImportOperationCreateWithURL(void *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v3 = a1;
  unint64_t v4 = (re *)[v3 isFileURL];
  if ((v4 & 1) == 0)
  {
    int v5 = *re::pipelineLogObjects(v4);
    unint64_t v4 = (re *)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      LODWORD(v12[0]) = 138412290;
      *(void *)((char *)v12 + 4) = v3;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "URL passed to RETextureImportOperationCreateWithURL must be a file URL: %@", (uint8_t *)v12, 0xCu);
    }
  }
  uint64_t v6 = re::globalAllocators(v4);
  id v7 = (re::FileTextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 240, 8);
  int v8 = *(unsigned __int8 *)(re::ServiceLocator::serviceOrNull<re::AssetService>(a2) + 1344);
  id v9 = v3;
  re::FileTextureProvider::FileTextureProvider(v7, (id *)v12, v8, (const char *)[v9 fileSystemRepresentation]);

  return v10;
}

re::TextureImportOperation *RETextureImportOperationCreateWithData(re *a1, uint64_t a2)
{
  int v8 = a1;
  id v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 224, 8);
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  re::DataTextureProvider::DataTextureProvider(v4, v7, *(unsigned __int8 *)(v5 + 1344), &v8, 0);
}

void RETextureImportOperationSetDoneWithSourceCallback(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 496);
  uint64_t v5 = _Block_copy(v3);

  uint64_t v6 = *(void **)(v4 + 136);
  *(void *)(v4 + 136) = v5;
}

void anonymous namespace'::assertNotRun(re *a1)
{
  if (a1)
  {
    uint64_t v1 = *re::pipelineLogObjects(a1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_233120000, v1, OS_LOG_TYPE_DEFAULT, "Modifying options after RETextureImportOperationRef was run has no effect", v2, 2u);
    }
  }
}

re::TextureImportOperation *RETextureImportOperationCreateWithCGImage(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::TextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 216, 8);
  uint64_t v6 = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  re::TextureProvider::TextureProvider(v5, v8, *(unsigned __int8 *)(v6 + 1344));
  *(void *)uint64_t v5 = &unk_26E715190;
  *((void *)v5 + 26) = a1;
  CGImageRetain(a1);
}

re::TextureImportOperation *RETextureImportOperationCreateFromImageArray(void *a1, uint64_t a2, int a3, char *a4)
{
  id v7 = a1;
  int v8 = (_anonymous_namespace_ *)[v7 count];
  int v9 = (int)v8;
  long long v35 = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  int v34 = 0;
  unint64_t v10 = (int)v8;
  re::DynamicArray<float *>::setCapacity(&v31, v10);
  ++v34;
  if (v9 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v9;
    do
    {
      uint64_t v13 = [v7 objectAtIndexedSubscript:v11];
      unint64_t v14 = v33;
      if (v33 >= v32)
      {
        re::DynamicArray<float *>::growCapacity(&v31, v33 + 1);
        unint64_t v14 = v33;
      }
      *((void *)v35 + v14) = v13;
      unint64_t v33 = v14 + 1;
      ++v34;

      ++v11;
    }
    while (v12 != v11);
  }
  uint64_t v15 = re::internal::ensureImageArrayConsistency(v35, v33, a3, (uint64_t)v27);
  if (v27[0])
  {
    int v17 = re::globalAllocators(v15);
    unint64_t v18 = (re::TextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 248, 8);
    int v19 = *(unsigned __int8 *)(re::ServiceLocator::serviceOrNull<re::AssetService>(a2) + 1344);
    re::DynamicArray<char const*>::DynamicArray((uint64_t)v23, (uint64_t *)&v31);
    re::CGImageArrayTextureProvider::CGImageArrayTextureProvider(v18, v26, v19, v23, a3);
    if (v23[0])
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v23[0] + 40))();
      }
      uint64_t v25 = 0;
      memset(v23, 0, sizeof(v23));
      ++v24;
    }
  }
  else
  {
    if (v29) {
      __int16 v21 = *(re::CoreREAssetUtils **)&v30[7];
    }
    else {
      __int16 v21 = (re::CoreREAssetUtils *)v30;
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v21, a4, v16);
    int v20 = 0;
  }
  if (!v27[0] && v28 && (v29 & 1) != 0) {
    (*(void (**)(void))(*(void *)v28 + 40))();
  }
  if (v31 && v35) {
    (*(void (**)(void))(*v31 + 40))();
  }

  return v20;
}

uint64_t RETextureImportOperationCreateAssetData(uint64_t a1, void *a2)
{
    return 0;
  uint64_t v3 = *(void *)(a1 + 496);
  re::createTextureCompileOptionsFromTextureImageOptions((re *)(v3 + 48), (uint64_t)v8);
  uint64_t v5 = re::globalAllocators(v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 168, 8);
  v9[0] = *(unsigned char *)(a1 + 216);
  v10[0] = 0;
  unsigned int v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, a1 + 224);
  id v12 = *(id *)(a1 + 312);
  re::TextureAssetData::TextureAssetData(v6, (uint64_t)v9, *(_DWORD *)(v3 + 104), v8);

  if (v11 != -1) {
    ((void (*)(char *, unsigned char *))*(&off_26E734E50 + v11))(&v13, v10);
  }
  return v6;
}

uint64_t anonymous namespace'::moveToCreateState(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 496);
  uint64_t v5 = (re *)*(id *)(v4 + 112);
  if (v5)
  {
    if ((*(_DWORD *)(v4 + 104) - 3) >= 2)
    {
      uint64_t v6 = v5;
      id v7 = *re::pipelineLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)StringID buf = 138412290;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Color Space %@ was set for texture without valid texture semantics.", buf, 0xCu);
      }
    }
  }
  int v8 = *(_DWORD *)(a1 + 112);
  if (!v8)
  {
    uint64_t result = RETextureImportOperationRun(a1, a2);
    if (!result) {
      return result;
    }
    int v8 = *(_DWORD *)(a1 + 112);
  }
  if (v8 == 1)
  {
    *(_DWORD *)(a1 + 112) = 2;
    char isValid = re::TextureData::isValid((re::TextureData *)(a1 + 216));
    uint64_t result = 1;
    if ((isValid & 1) == 0 && !*(void *)(a1 + 464))
    {
      uint64_t v11 = *(void *)(a1 + 496);
      if (*(unsigned char *)(v11 + 16)) {
        uint64_t v12 = *(void *)(v11 + 24);
      }
      else {
        uint64_t v12 = v11 + 17;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to create valid texture data from %s", (re::DynamicString *)buf, v12);
      if (buf[8]) {
        id v16 = v20;
      }
      else {
        id v16 = &buf[9];
      }
      re::WrappedError::make((re::WrappedError *)@"REPipelineErrorDomain", (const __CFString *)5, (uint64_t)v16, &v18);
      id v17 = v18;
      *a2 = v17;
      CFRetain(v17);

      if (*(void *)buf)
      {
        if (buf[8]) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
      }
      return 1;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 496);
    if (*(unsigned char *)(v13 + 16)) {
      uint64_t v14 = *(void *)(v13 + 24);
    }
    else {
      uint64_t v14 = v13 + 17;
    }
    re::DynamicString::format((re::DynamicString *)"Failed to create valid texture data from %s", (re::DynamicString *)buf, v14);
    if (buf[8]) {
      uint64_t v15 = v20;
    }
    else {
      uint64_t v15 = &buf[9];
    }
    re::WrappedError::make((re::WrappedError *)@"REPipelineErrorDomain", (const __CFString *)5, (uint64_t)v15, &v18);
    *a2 = v18;

    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    return 0;
  }
  return result;
}

re::TextureImportOperation *RETextureImportOperationCreateWithCGImageSource(re *a1, uint64_t a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::TextureProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 216, 8);
  uint64_t v6 = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  re::TextureProvider::TextureProvider(v5, v8, *(unsigned __int8 *)(v6 + 1344));
  *(void *)uint64_t v5 = &unk_26E715128;
  *((void *)v5 + 26) = a1;
  CFRetain(a1);
}

CFStringRef RETextureImportOperationCopyTextureAssetPath(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v2 = (re::DynamicString *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = v3;
  uint64_t v8 = 0;
  re::DynamicString::setCapacity(&v7, 0);
  re::AssetPath::fullAssetPath(v2, (re::DynamicString *)&v7);
  if (v8) {
    uint64_t v4 = v9;
  }
  else {
    uint64_t v4 = (char *)&v8 + 1;
  }
  CFStringRef v5 = CFStringCreateWithCString(v1, v4, 0x8000100u);
  if (v7 && (v8 & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  return v5;
}

uint64_t RETextureImportOperationGetImageUTType(uint64_t a1, const re::TextureProvider *a2)
{
  uint64_t v2 = *(void *)(a1 + 496);
  re::TextureProvider::lazyFetchProperties((id *)v2, a2);
  return *(void *)(v2 + 192);
}

CFDictionaryRef RETextureImportOperationCopyImageProperties(uint64_t a1, const re::TextureProvider *a2)
{
  uint64_t v2 = *(void *)(a1 + 496);
  re::TextureProvider::lazyFetchProperties((id *)v2, a2);
  CFDictionaryRef v3 = *(const __CFDictionary **)(v2 + 176);
  if (!v3) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  return CFDictionaryCreateCopy(v4, v3);
}

id RETextureImportOperationCopyTextureDescriptor(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 496);
  re::TextureProvider::lazyFetchProperties(v2, v3);
  id v4 = v2[23];
  id v5 = objc_msgSend(v4, sel_copy);
  if (v4) {

  }
  return v5;
}

id RETextureImportOperationCopyTextureDescriptorTemplate(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 496) + 40), sel_copy);
  return v2;
}

void RETextureImportOperationSetTextureDescriptorTemplate(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 496);
  id v5 = objc_msgSend(v3, sel_copy);

  id v6 = v5;
  re::TextureProvider::setTemplateDescriptor(v4, &v6);
  if (v6) {
}
  }

uint64_t RETextureImportOperationGetPixelFormatMode(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 48);
}

void RETextureImportOperationSetPixelFormatMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  v6[0] = *(_OWORD *)(v4 + 48);
  v6[1] = v5;
  v7[0] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(v4 + 92);
  id v8 = *(id *)(v4 + 112);
  long long v9 = *(_OWORD *)(v4 + 120);
  LODWORD(v6[0]) = a2;
  re::TextureProvider::setOptions(v4, v6);
}

uint64_t RETextureImportOperationGetDimensionsMode(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 56);
}

void RETextureImportOperationSetDimensionsMode(uint64_t a1, int a2)
{
  BOOL v4 = a2 == 1;
  uint64_t v5 = *(void *)(a1 + 496);
  long long v6 = *(_OWORD *)(v5 + 64);
  v7[0] = *(_OWORD *)(v5 + 48);
  v7[1] = v6;
  v8[0] = *(_OWORD *)(v5 + 80);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v5 + 92);
  id v9 = *(id *)(v5 + 112);
  long long v10 = *(_OWORD *)(v5 + 120);
  DWORD2(v7[0]) = v4;
  re::TextureProvider::setOptions(v5, v7);
}

uint64_t RETextureImportOperationGetDownsampleFactor(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 64);
}

void RETextureImportOperationSetDownsampleFactor(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v6 = *(_OWORD *)(v4 + 48);
  long long v7 = v5;
  v8[0] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v4 + 92);
  id v9 = *(id *)(v4 + 112);
  long long v10 = *(_OWORD *)(v4 + 120);
  LODWORD(v7) = a2;
  re::TextureProvider::setOptions(v4, &v6);
}

uint64_t RETextureImportOperationGetMipmapMode(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 68);
}

void RETextureImportOperationSetMipmapMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v6 = *(_OWORD *)(v4 + 48);
  long long v7 = v5;
  v8[0] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v4 + 92);
  id v9 = *(id *)(v4 + 112);
  long long v10 = *(_OWORD *)(v4 + 120);
  DWORD1(v7) = a2;
  re::TextureProvider::setOptions(v4, &v6);
}

uint64_t RETextureImportOperationGetCompressionType(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 72);
}

void RETextureImportOperationSetCompressionType(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v6 = *(_OWORD *)(v4 + 48);
  long long v7 = v5;
  v8[0] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v4 + 92);
  id v9 = *(id *)(v4 + 112);
  long long v10 = *(_OWORD *)(v4 + 120);
  DWORD2(v7) = a2;
  re::TextureProvider::setOptions(v4, &v6);
}

BOOL RETextureImportOperationSetASTCCompressionOptions(uint64_t a1, re::CoreREAssetUtils *a2, char *a3)
{
  re::CoreREAssetUtils::textureASTCCompressionOptions(a2, (const __CFDictionary *)1, (uint64_t)v17);
  int v7 = v17[0];
  if (v17[0])
  {
    uint64_t v8 = *(void *)(a1 + 496);
    long long v9 = *(_OWORD *)(v8 + 64);
    long long v13 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)uint64_t v14 = v9;
    *(_OWORD *)&v14[16] = *(_OWORD *)(v8 + 80);
    *(_OWORD *)&v14[28] = *(_OWORD *)(v8 + 92);
    id v15 = *(id *)(v8 + 112);
    long long v16 = *(_OWORD *)(v8 + 120);
    *(_DWORD *)&unsigned char v14[8] = 4;
    *(_OWORD *)&v14[12] = v18;
    re::TextureProvider::setOptions(v8, &v13);
  }
  else
  {
    if (BYTE8(v18)) {
      uint64_t v11 = v19;
    }
    else {
      uint64_t v11 = (re::CoreREAssetUtils *)((char *)&v18 + 9);
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v11, a3, v6);
  }
  if (!v17[0] && (void)v18 && (BYTE8(v18) & 1) != 0) {
    (*(void (**)(void, re::CoreREAssetUtils *, uint64_t))(*(void *)v18 + 40))(v18, v19, v10);
  }
  return v7 != 0;
}

re::DynamicString *RETextureImportOperationSetAssetResourceName(uint64_t a1, const char *a2)
{
  v5[0] = a2;
  v5[1] = strlen(a2);
  return re::DynamicString::operator=((re::DynamicString *)(a1 + 120), (uint64_t)v5);
}

re::DynamicString *RETextureImportOperationSetLabel(uint64_t a1, const char *a2)
{
  uint64_t v4 = (re::DynamicString *)(*(void *)(a1 + 496) + 8);
  v6[0] = a2;
  v6[1] = strlen(a2);
  return re::DynamicString::operator=(v4, (uint64_t)v6);
}

CFTypeRef RETextureImportOperationGetLabel(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 496);
  if (*(unsigned char *)(v1 + 16)) {
    id v2 = *(const char **)(v1 + 24);
  }
  else {
    id v2 = (const char *)(v1 + 17);
  }
  CFStringRef v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  return CFAutorelease(v3);
}

void RETextureImportOperationSetSemantic(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  v6[0] = *(_OWORD *)(v4 + 48);
  v6[1] = v5;
  void v6[2] = *(_OWORD *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 96);
  id v9 = *(id *)(v4 + 112);
  long long v10 = *(_OWORD *)(v4 + 120);
  int v8 = a2;
  if (a2 == 6)
  {
    if (LODWORD(v6[0]) == 2) {
      LODWORD(v6[0]) = 0;
    }
    if (DWORD1(v6[0]) == 3) {
      DWORD1(v6[0]) = 0;
    }
  }
  else
  {
    *(void *)&v6[0] = 0x300000002;
  }
  re::TextureProvider::setOptions(v4, v6);
}

uint64_t RETextureImportOperationGetSemantic(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 496) + 104);
}

void RETextureImportOperationSetColorSpaceName(uint64_t a1, __CFString *a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  long long v5 = *(_OWORD *)(v4 + 64);
  v6[0] = *(_OWORD *)(v4 + 48);
  v6[1] = v5;
  v7[0] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(v4 + 92);
  id v8 = *(id *)(v4 + 112);
  long long v9 = *(_OWORD *)(v4 + 120);
  re::TextureFromImageOptions::setColorSpace((re::TextureFromImageOptions *)v6, a2);
  re::TextureProvider::setOptions(v4, v6);
}

uint64_t RETextureImportOperationGetJSONOptionsFormatHelp()
{
  return re::kTextureFromImageOptionsJSONFormatHelp;
}

BOOL RETextureImportOperationSetOptionsFromJSON(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v12 = a2;
  re::parseTextureFromImageOptions((re *)&v12, (uint64_t)v9);
  int v6 = v9[0];
  if (v9[0])
  {
    re::TextureProvider::setOptions(*(void *)(a1 + 496), &v10);
  }
  else
  {
    if (BYTE8(v10)) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = (re::CoreREAssetUtils *)((char *)&v10 + 9);
    }
    re::CoreREAssetUtils::logAndSetErrorFromString(v7, a3, v5);
  }
  re::Result<re::TextureFromImageOptions,re::DynamicString>::~Result((uint64_t)v9);
  return v6 != 0;
}

uint64_t RETextureImportOperationRun(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 112))
  {
    if (a2)
    {
      uint64_t v4 = *(void *)(a1 + 496);
      if (*(unsigned char *)(v4 + 16)) {
        uint64_t v5 = *(void *)(v4 + 24);
      }
      else {
        uint64_t v5 = v4 + 17;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to import data from %s: operation unsupported in current state", (re::DynamicString *)&v34, v5);
      if (v35) {
        int v6 = (char *)v36[0];
      }
      else {
        int v6 = (char *)&v35 + 1;
      }
      uint64_t v7 = 4;
LABEL_11:
      re::WrappedError::make((re::WrappedError *)@"REPipelineErrorDomain", (const __CFString *)v7, (uint64_t)v6, &v27);
      id v8 = v27;
      *a2 = v8;
      CFRetain(v8);

      if (v34 && (v35 & 1) != 0) {
        (*(void (**)(void))(*(void *)v34 + 40))();
      }
      return 0;
    }
    return 0;
  }
  unint64_t v11 = *(void *)(a1 + 160);
  if (v11) {
    unint64_t v12 = v11 >> 1;
  }
  else {
    unint64_t v12 = v11 >> 1;
  }
  if (v12)
  {
    re::TextureAssetProvider::makeDescriptor((re::TextureAssetProvider *)(a1 + 152), (const re::DynamicString *)(a1 + 184), (const re::DynamicString *)(*(void *)(a1 + 496) + 48), (uint64_t)&v34);
    re::DynamicString::operator=((re::DynamicString *)(a1 + 320), (re::DynamicString *)&v34);
    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + 352, (uint64_t)&v37);
    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + 392, (uint64_t)v42);
    re::DynamicString::operator=((re::DynamicString *)(a1 + 432), (re::DynamicString *)v45);
    if (v45[0])
    {
      if (v45[1]) {
        (*(void (**)(void))(*(void *)v45[0] + 40))();
      }
      memset(v45, 0, sizeof(v45));
    }
    if (v42[0])
    {
      if (v44) {
        (*(void (**)(void))(*(void *)v42[0] + 40))();
      }
      id v44 = 0;
      memset(v42, 0, sizeof(v42));
      ++v43;
    }
    if (v37)
    {
      if (v41) {
        (*(void (**)(void))(*(void *)v37 + 40))();
      }
      uint64_t v41 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v37 = 0;
      ++v40;
    }
    if (v34 && (v35 & 1) != 0) {
      (*(void (**)(void))(*(void *)v34 + 40))();
    }
    long long v13 = *(os_unfair_lock_s **)(a1 + 24);
    os_unfair_lock_lock(v13 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v13, (const re::AssetLoadDescriptor *)(a1 + 320), (uint64_t *)&v27);
    os_unfair_lock_unlock(v13 + 16);
    if (v28[0] && (unsigned int v14 = atomic_load((unsigned int *)(v28[0] + 704)), v14 == 2) && !*(unsigned char *)(v28[0] + 256))
    {
      *(void *)(a1 + 464) = 0;
      re::AssetHandle::operator=(a1 + 472, (uint64_t *)&v27);
    }
    else
    {
      if (*(unsigned char *)(a1 + 328)) {
        id v15 = *(const char **)(a1 + 336);
      }
      else {
        id v15 = (const char *)(a1 + 329);
      }
      uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(*(void *)(a1 + 24) + 1128), v15);
      int v31 = &unk_26E6CA7A8;
      char v32 = 1;
      int v33 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)ProviderForScheme + 40))(&v34);
      if ((_BYTE)v34)
      {
        uint64_t v20 = v38;
        *(void *)(a1 + 464) = v38;
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(v20 + 152);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 224, v20 + 160);
        re::ObjCObject::operator=((id *)(a1 + 312), (id *)(v20 + 248));
        re::AssetHandle::operator=(a1 + 472, (uint64_t *)&v27);
      }
      if (v35 && (v36[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v35 + 40))();
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v27);
  }
  else
  {
    long long v16 = *(re **)(a1 + 496);
    id v17 = re::globalAllocators((re *)a1);
    re::loadTextureDataWithProvider(v16, (re::TextureProvider *)v17[2], v18, (uint64_t)&v34);
    if ((_BYTE)v34)
    {
      *(unsigned char *)(a1 + 216) = v35;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1> const&>(a1 + 224, (uint64_t)v36);
      re::ObjCObject::operator=((id *)(a1 + 312), &v44);
    }
    else
    {
      LOBYTE(v27) = 0;
      v28[0] = 0;
      unsigned int v29 = 0;
      id v30 = 0;
      *(unsigned char *)(a1 + 216) = 0;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<NS::SharedPtr<MTL::Texture>,re::CPUTexture>,(std::__variant_detail::_Trait)1>>(a1 + 224, (uint64_t)v28);
      if ((id *)(a1 + 216) != &v27)
      {
        id v21 = v30;
        id v30 = 0;
        unint64_t v22 = *(void **)(a1 + 312);
        *(void *)(a1 + 312) = v21;
      }
      if (v29 != -1) {
        ((void (*)(void **, void *))*(&off_26E734E50 + v29))(&v31, v28);
      }
      if (v36[0]) {
        __int16 v23 = (char *)v36[1];
      }
      else {
        __int16 v23 = (char *)v36 + 1;
      }
      re::WrappedError::make((re::WrappedError *)@"REPipelineErrorDomain", (const __CFString *)5, (uint64_t)v23, &v27);
      id v24 = v27;
      *a2 = v24;
      CFRetain(v24);
    }
    re::Result<re::TextureData,re::DynamicString>::~Result((uint64_t)&v34);
  }
  uint64_t v9 = 1;
  *(_DWORD *)(a1 + 112) = 1;
  if ((re::TextureData::isValid((re::TextureData *)(a1 + 216)) & 1) == 0
    && !*(void *)(a1 + 464)
    && !*(void *)(a1 + 480))
  {
    if (a2 && !*a2)
    {
      uint64_t v25 = *(void *)(a1 + 496);
      if (*(unsigned char *)(v25 + 16)) {
        uint64_t v26 = *(void *)(v25 + 24);
      }
      else {
        uint64_t v26 = v25 + 17;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to create valid texture data from %s", (re::DynamicString *)&v34, v26);
      if (v35) {
        int v6 = (char *)v36[0];
      }
      else {
        int v6 = (char *)&v35 + 1;
      }
      uint64_t v7 = 5;
      goto LABEL_11;
    }
    return 0;
  }
  return v9;
}

uint64_t RETextureImportOperationCreateAsset(uint64_t a1, int a2, void *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
    return 0;
  uint64_t v5 = *(void *)(a1 + 496);
  long long v6 = *(_OWORD *)(v5 + 48);
  long long v7 = *(_OWORD *)(v5 + 64);
  *(_OWORD *)&v43[12] = *(_OWORD *)(v5 + 92);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  v42[0] = v6;
  v42[1] = v7;
  *(_OWORD *)int v43 = *(_OWORD *)(v5 + 80);
  id v44 = *(id *)(v5 + 112);
  long long v45 = *(_OWORD *)(v5 + 120);
  re::createTextureCompileOptionsFromTextureImageOptions((re *)v42, (uint64_t)&v40);
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9) {
    unint64_t v10 = v9 >> 1;
  }
  else {
    unint64_t v10 = v9 >> 1;
  }
  if (v10)
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 40))(buf, v8, a1 + 320);
    long long v11 = v46;
    long long v46 = *(_OWORD *)buf;
    *(_OWORD *)StringID buf = v11;
    uint64_t v12 = v47;
    uint64_t v47 = *(void *)&buf[16];
    *(void *)&uint8_t buf[16] = v12;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    if (*(void *)(a1 + 464))
    {
      if (*((void *)&v46 + 1)
        && (unsigned int v14 = atomic_load((unsigned int *)(*((void *)&v46 + 1) + 704)), v14 == 2)
        && !*(unsigned char *)(*((void *)&v46 + 1) + 256))
      {
        int v31 = *re::assetsLogObjects(v13);
        BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (*(unsigned char *)(a1 + 192)) {
            uint64_t v33 = *(void *)(a1 + 200);
          }
          else {
            uint64_t v33 = a1 + 193;
          }
          uint64_t v34 = v31;
          uint64_t v35 = re::AssetHandle::assetInfo((re::AssetHandle *)&v46);
          if (v35[17]) {
            uint64_t v36 = (char *)v35[18];
          }
          else {
            uint64_t v36 = (char *)v35 + 137;
          }
          *(_DWORD *)StringID buf = 136315394;
          *(void *)&uint8_t buf[4] = v33;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v36;
          _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "RETextureImportOperationCreateAsset: ignoring m_textureAsset, asset is already loaded and is not mutated: %s, %s", buf, 0x16u);
        }
        if (*(void *)(a1 + 464))
        {
          uint64_t v37 = *(void *)(a1 + 24);
          uint64_t v38 = re::TextureAsset::assetType((re::TextureAsset *)v32);
          uint64_t v39 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v37 + 1040), (unint64_t)v38);
          (*(void (**)(uint64_t, void))(*(void *)v39 + 16))(v39, *(void *)(a1 + 464));
        }
      }
      else
      {
        (*(void (**)(uint64_t, void, long long *, void, void))(*(void *)v8 + 200))(v8, *(void *)(a1 + 464), &v46, 0, 0);
        uint64_t v15 = *(void *)(a1 + 464);
        long long v16 = v41;
        *(_OWORD *)(v15 + 8) = v40;
        *(_OWORD *)(v15 + 24) = v16;
      }
    }
    *(void *)(a1 + 464) = 0;
  }
  else
  {
    *(void *)&buf[17] = 0;
    *(void *)&unsigned char buf[12] = 0;
    *(_DWORD *)StringID buf = 16777473;
    uint8_t buf[4] = 1;
    *(_DWORD *)&uint8_t buf[8] = 1;
    int v49 = 0;
    uint64_t TextureAsset = re::TextureAsset::makeTextureAsset(a1 + 216, *(int *)&v43[24], (long long *)buf);
    int v19 = (void *)TextureAsset;
    long long v20 = v40;
    *(_OWORD *)(TextureAsset + 24) = v41;
    *(_OWORD *)(TextureAsset + 8) = v20;
    unint64_t v21 = *(void *)(a1 + 128);
    if (v21) {
      unint64_t v22 = v21 >> 1;
    }
    else {
      unint64_t v22 = v21 >> 1;
    }
    if (v22)
    {
      uint64_t v23 = *(void *)(a1 + 24);
      id v24 = re::TextureAsset::assetType((re::TextureAsset *)TextureAsset);
      if (*(unsigned char *)(a1 + 128)) {
        uint64_t v25 = *(const char **)(a1 + 136);
      }
      else {
        uint64_t v25 = (const char *)(a1 + 129);
      }
      re::AssetManager::createOrUpdateAssetEntryForNamedAssetDescriptor(v23, v19, (const char **)v24, v25, 0, 0, 0, (re::AssetHandle *)buf);
    }
    else
    {
      uint64_t v26 = re::TextureAsset::assetType((re::TextureAsset *)TextureAsset);
      if (a2) {
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void *, uint64_t *, uint64_t, void, void))(*(void *)v8 + 416))(buf, v8, v19, v26, 1, 0, 0);
      }
      else {
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void *, uint64_t *, void, void, void))(*(void *)v8 + 416))(buf, v8, v19, v26, 0, 0, 0);
      }
    }
    long long v27 = v46;
    long long v46 = *(_OWORD *)buf;
    *(_OWORD *)StringID buf = v27;
    uint64_t v28 = v47;
    uint64_t v47 = *(void *)&buf[16];
    *(void *)&uint8_t buf[16] = v28;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  }
  if (*((void *)&v46 + 1))
  {
    uint64_t v17 = v46;
    id v29 = (id)(v46 + 8);
  }
  else
  {
    uint64_t v17 = 0;
  }

  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v46);
  return v17;
}

id RETextureImportOperationCreateTexture(uint64_t a1, void *a2)
{
  {
    if (*(_DWORD *)(a1 + 304))
    {
      uint64_t v5 = std::__throw_bad_variant_access[abi:nn180100]();
      return (id)RETextureImportGetCGColorSpaceFromOCIOString(v5);
    }
    id v3 = *(id *)(a1 + 224);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

void RETextureImportOperationSetDestinationColorGamut(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  id v6 = *(id *)(v4 + 144);
  id v5 = *(id *)(v4 + 152);
  if (!*(unsigned char *)(v4 + 163)) {
    *(unsigned char *)(v4 + 163) = 1;
  }
  *(unsigned char *)(v4 + 164) = a2;
}

uint64_t REEngineConfigurationCreateDefault(re *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 248, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E734E70;
  *(_OWORD *)(v2 + + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  re::EngineConfiguration::EngineConfiguration((re::EngineConfiguration *)(v3 + 24));
  re::ObjCObject::operator=((void **)(v2 + 40), MEMORY[0x263EF83A0]);
  if (_os_feature_enabled_impl()) {
    int v4 = -73857;
  }
  else {
    int v4 = -77953;
  }
  *(_DWORD *)(v2 + 28) = v4;
  *(_DWORD *)(v2 + 32) = v4;
  *(_DWORD *)uint64_t v12 = 0;
  readGraphicsUserDefaults((uint8_t *)&v12[3], (uint8_t *)&v12[2], (uint8_t *)&v12[1], (uint8_t *)v12);
  if (v12[2]) {
    *(unsigned char *)(v2 + 157) = 0;
  }
  if (v12[3]) {
    *(unsigned char *)(v2 + 1+ 56) = 0;
  }
  if (v12[1]) {
    *(unsigned char *)(v2 + 159) = 0;
  }
  if (v12[0]) {
    *(unsigned char *)(v2 + 158) = 0;
  }
  *(unsigned char *)(v2 + 174) = 0;
  *(unsigned char *)(v2 + 177) = 1;
  LOBYTE(v5) = *(unsigned char *)(v2 + 235) != 0;
  id v6 = [MEMORY[0x263EFFA40] standardUserDefaults];
  long long v7 = [v6 objectForKey:@"com.apple.realitykit.enable-realityio-import-service"];
  uint64_t v8 = v7;
  if (v7)
  {
    int v5 = [v7 BOOLValue];
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v10 = "false";
      if (v5) {
        unint64_t v10 = "true";
      }
      *(_DWORD *)StringID buf = 136315138;
      unsigned int v14 = v10;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "NSUSerDefault com.apple.realitykit.enable-realityio-import-service is set to %s.", buf, 0xCu);
    }
  }
  *(unsigned char *)(v2 + 235) = v5;
  return v2;
}

void readGraphicsUserDefaults(uint8_t *a1, uint8_t *a2, uint8_t *a3, uint8_t *a4)
{
  re::Defaults::BOOLValue((re::Defaults *)"disableTextureColorManagement", (const char *)a2, (char *)v20);
  if (v20[0]) {
    uint8_t v9 = v20[1];
  }
  else {
    uint8_t v9 = 0;
  }
  *a1 = v9;
  re::Defaults::BOOLValue((re::Defaults *)"disableSceneColorManagement", v8, (char *)v20);
  if (v20[0]) {
    uint8_t v11 = v20[1];
  }
  else {
    uint8_t v11 = 0;
  }
  *a2 = v11;
  re::Defaults::BOOLValue((re::Defaults *)"disableColorPipeline", v10, (char *)v20);
  if (v20[0]) {
    uint8_t v13 = v20[1];
  }
  else {
    uint8_t v13 = 0;
  }
  *a3 = v13;
  re::Defaults::BOOLValue((re::Defaults *)"disableTargetDisplayColorConversion", v12, (char *)v20);
  if (v20[0]) {
    uint8_t v15 = v20[1];
  }
  else {
    uint8_t v15 = 0;
  }
  *a4 = v15;
  if (*a1)
  {
    long long v16 = *re::graphicsLogObjects((re *)v14);
    BOOL v14 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "NSUserDefault com.apple.re.disableTextureColorManagement is set to true.", v20, 2u);
    }
  }
  if (*a2)
  {
    uint64_t v17 = *re::graphicsLogObjects((re *)v14);
    BOOL v14 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "NSUserDefault com.apple.re.disableSceneColorManagement is set to true.", v20, 2u);
    }
  }
  if (*a3)
  {
    long long v18 = *re::graphicsLogObjects((re *)v14);
    BOOL v14 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "NSUserDefault com.apple.re.disableColorPipeline is set to true.", v20, 2u);
    }
  }
  if (*a4)
  {
    int v19 = *re::graphicsLogObjects((re *)v14);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v20 = 0;
      _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "NSUserDefault com.apple.re.disableTargetDisplayColorConversion is set to true.", v20, 2u);
    }
  }
}

uint64_t REEngineConfigurationCreateFromEngine(uint64_t a1)
{
  uint64_t Default = REEngineConfigurationCreateDefault((re *)a1);
  int v3 = *(_DWORD *)(a1 + 424);
  *(void *)(Default + 24) = *(void *)(a1 + 416);
  *(_DWORD *)(Default + 32) = v3;
  re::ObjCObject::operator=((id *)(Default + 40), (id *)(a1 + 432));
  re::DynamicString::operator=((re::DynamicString *)(Default + 48), (re::DynamicString *)(a1 + 440));
  *(void *)(Default + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a1 + 472);
  re::ObjCObject::operator=((id *)(Default + 88), (id *)(a1 + 480));
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(Default + 96, a1 + 488);
  long long v4 = *(_OWORD *)(a1 + 556);
  long long v5 = *(_OWORD *)(a1 + 544);
  *(_OWORD *)(Default + 136) = *(_OWORD *)(a1 + 528);
  *(_OWORD *)(Default + 164) = v4;
  *(_OWORD *)(Default + 152) = v5;
  *(_OWORD *)(Default + 184) = *(_OWORD *)(a1 + 576);
  re::ObjCObject::operator=((id *)(Default + 200), (id *)(a1 + 592));
  long long v6 = *(_OWORD *)(a1 + 600);
  long long v7 = *(_OWORD *)(a1 + 616);
  *(unsigned char *)(Default + 24ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a1 + 632);
  *(_OWORD *)(Default + 208) = v6;
  *(_OWORD *)(Default + 224) = v7;
  return Default;
}

re::DynamicString *REEngineConfigurationSetInstanceID(re::DynamicString *result, char *__s)
{
  if (__s)
  {
    uint64_t v2 = (re::DynamicString *)((char *)result + 48);
    v5[0] = __s;
    v5[1] = strlen(__s);
    return re::DynamicString::operator=(v2, (uint64_t)v5);
  }
  else
  {
    uint64_t v3 = *((void *)result + 7);
    if (v3)
    {
      *((void *)result + 7) = 1;
      long long v4 = (unsigned char *)*((void *)result + 8);
    }
    else
    {
      *((unsigned char *)result + + 56) = v3 & 1;
      long long v4 = (char *)result + 57;
    }
    unsigned char *v4 = 0;
  }
  return result;
}

CFStringRef REEngineConfigurationCopyInstanceID(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v1 = *(const char **)(a1 + 64);
  }
  else {
    uint64_t v1 = (const char *)(a1 + 57);
  }
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

uint64_t REEngineConfigurationSetUserData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 192) = a2;
  return result;
}

uint64_t REEngineConfigurationGetUserData(uint64_t a1)
{
  return *(void *)(a1 + 192);
}

uint64_t REEngineConfigurationSetClockMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t REEngineConfigurationGetClockMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t REEngineConfigurationSetServicesToCreate(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t REEngineConfigurationGetServicesToCreate(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t REEngineConfigurationSetServicesToUpdate(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t REEngineConfigurationGetServicesToUpdate(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t REEngineConfigurationSetStartupOptions(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

uint64_t REEngineConfigurationSetUseMetal(uint64_t result, char a2)
{
  *(unsigned char *)(result + 184) = a2;
  return result;
}

uint64_t REEngineConfigurationSetForExportOnly(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t REEngineConfigurationSetUseRealityIO(uint64_t result, char a2)
{
  *(unsigned char *)(result + 235) = a2;
  return result;
}

uint64_t REEngineConfigurationSetUsePhysicsSceneSystem(uint64_t result, char a2)
{
  *(unsigned char *)(result + 233) = a2;
  return result;
}

uint64_t REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t REEngineConfigurationSetEnablePreloadEngineAssets(uint64_t result, char a2)
{
  *(unsigned char *)(result + 238) = a2;
  return result;
}

uint64_t REEngineConfigurationSetAssetRuntimeUpdateTimeout(uint64_t result, uint64_t a2)
{
  *(void *)(result + 224) = a2;
  return result;
}

uint64_t REEngineConfigurationSetLiteHUDTabs(uint64_t result, char a2)
{
  *(unsigned char *)(result + 208) = a2;
  return result;
}

uint64_t REEngineConfigurationSetEnableInteractions(uint64_t result, char a2)
{
  *(unsigned char *)(result + 236) = a2;
  return result;
}

uint64_t REEngineConfigurationSetIsHostingSharedAudioSimulation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 239) = a2;
  return result;
}

uint64_t REEngineConfigurationGetStartupOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t REEngineConfigurationGetUseMetal(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184);
}

uint64_t REEngineConfigurationGetForExportOnly(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 240);
}

uint64_t REEngineConfigurationGetUseRealityIO(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 235);
}

uint64_t REEngineConfigurationGetUsePhysicsSceneSystem(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 233);
}

uint64_t REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

uint64_t REEngineConfigurationGetAssetRuntimeUpdateTimeout(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

void **REEngineConfigurationSetEngineQueue(uint64_t a1, void *a2)
{
  return re::ObjCObject::operator=((void **)(a1 + 40), a2);
}

id REEngineConfigurationGetEngineQueue(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  return v1;
}

void **REEngineConfigurationSetDevice(uint64_t a1, void *a2)
{
  return re::ObjCObject::operator=((void **)(a1 + 88), a2);
}

id REEngineConfigurationGetDevice(uint64_t a1)
{
  id v1 = *(id *)(a1 + 88);
  return v1;
}

uint64_t (***REEngineConfigurationSetRenderThreadInitCallback(void *a1, void *aBlock))(void)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t result = re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)(a1 + 12));
  a1[12] = &unk_26E734EB8;
  a1[13] = v3;
  a1[16] = a1 + 12;
  return result;
}

int8x8_t REEngineConfigurationSetRenderFlags(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)uint8_t v9 = 0;
  readGraphicsUserDefaults((uint8_t *)&v9[3], (uint8_t *)&v9[2], (uint8_t *)&v9[1], (uint8_t *)v9);
  *(unsigned char *)(a1 + 17ArcSharedObject::ArcSharedObject(this, 0) = (a2 & 2) != 0;
  *(unsigned char *)(a1 + 171) = (a2 & 8) != 0;
  *(unsigned char *)(a1 + 173) = (a2 & 0x10) != 0;
  *(unsigned char *)(a1 + 153) = (a2 & 0x40) != 0;
  int8x16_t v4 = (int8x16_t)vdupq_n_s32(a2);
  int16x8_t v5 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_23442A600));
  v6.i16[0] = v9[3];
  v6.i16[1] = v9[2];
  v6.i16[2] = v9[0];
  v6.i16[3] = v9[1];
  *(int8x8_t *)v5.i8 = vand_s8(vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001), (int8x8_t)vceqz_s16(v6));
  *(_DWORD *)(a1 + 1+ 56) = vmovn_s16(v5).u32[0];
  *(unsigned char *)(a1 + 172) = (a2 & 0x200) != 0;
  int16x8_t v7 = (int16x8_t)vshlq_u32((uint32x4_t)v4, (uint32x4_t)xmmword_23442A610);
  *(unsigned char *)(a1 + 178) = (a2 & 0x8000) != 0;
  *(int8x8_t *)v7.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v7), (int8x8_t)0x1000100010001);
  *(unsigned char *)(a1 + 179) = v7.i8[4];
  int8x8_t result = vmovn_s16(v7);
  *(_DWORD *)(a1 + 174) = result.i32[0];
  return result;
}

uint64_t REEngineConfigurationGetRenderFlags(unsigned char *a1)
{
  *(_DWORD *)uint64_t v8 = 0;
  readGraphicsUserDefaults((uint8_t *)&v8[3], (uint8_t *)&v8[2], (uint8_t *)&v8[1], (uint8_t *)v8);
  unsigned int v2 = 2 * a1[170];
  if (a1[171]) {
    v2 |= 8u;
  }
  if (a1[173]) {
    v2 |= 0x10u;
  }
  if (a1[153]) {
    v2 |= 0x40u;
  }
  if (v8[3] || a1[156] == 0) {
    v2 |= 0x100u;
  }
  if (v8[2] || a1[157] == 0) {
    v2 |= 0x400u;
  }
  if (v8[0] || a1[158] == 0) {
    v2 |= 0x1000u;
  }
  if (v8[1] || a1[159] == 0) {
    v2 |= 0x800u;
  }
  if (a1[172]) {
    v2 |= 0x200u;
  }
  if (a1[174]) {
    v2 |= 0x2000u;
  }
  if (a1[177]) {
    v2 |= 0x4000u;
  }
  if (a1[178]) {
    v2 |= 0x8000u;
  }
  if (a1[175]) {
    v2 |= 0x10000u;
  }
  if (a1[179]) {
    return v2 | 0x20000;
  }
  else {
    return v2;
  }
}

uint64_t REEngineConfigurationSetShareAssetStates(uint64_t result, char a2)
{
  *(unsigned char *)(result + 209) = a2;
  return result;
}

uint64_t REEngineConfigurationSetAutoCalculateNonSharedAssetDataSize(uint64_t result, char a2)
{
  *(unsigned char *)(result + 232) = a2;
  return result;
}

uint64_t REEngineConfigurationGetShareAssetStates(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 209);
}

uint64_t REEngineConfigurationGetAutoCalculateNonSharedAssetDataSize(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 232);
}

uint64_t REEngineConfigurationClone(uint64_t a1)
{
  uint64_t Default = REEngineConfigurationCreateDefault((re *)a1);
  int v3 = *(_DWORD *)(a1 + 32);
  *(void *)(Default + 24) = *(void *)(a1 + 24);
  *(_DWORD *)(Default + 32) = v3;
  re::ObjCObject::operator=((id *)(Default + 40), (id *)(a1 + 40));
  re::DynamicString::operator=((re::DynamicString *)(Default + 48), (re::DynamicString *)(a1 + 48));
  *(void *)(Default + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a1 + 80);
  re::ObjCObject::operator=((id *)(Default + 88), (id *)(a1 + 88));
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(Default + 96, a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 152);
  long long v5 = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(Default + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(Default + 164) = v5;
  *(_OWORD *)(Default + 152) = v4;
  *(_OWORD *)(Default + 184) = *(_OWORD *)(a1 + 184);
  re::ObjCObject::operator=((id *)(Default + 200), (id *)(a1 + 200));
  long long v6 = *(_OWORD *)(a1 + 208);
  long long v7 = *(_OWORD *)(a1 + 224);
  *(unsigned char *)(Default + 24ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a1 + 240);
  *(_OWORD *)(Default + 208) = v6;
  *(_OWORD *)(Default + 224) = v7;
  return Default;
}

uint64_t REEngineConfigurationGetLiteHUDTabs(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t REEngineConfigurationGetEnableInteractions(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 236);
}

uint64_t REEngineConfigurationGetIsHostingSharedAudioSimulation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 239);
}

uint64_t re::Shareable<re::EngineConfiguration>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E734E70;

  re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 96);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 48));

  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  return a1;
}

void re::Shareable<re::EngineConfiguration>::~Shareable(uint64_t a1)
{
  *(void *)a1 = &unk_26E734E70;

  re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 96);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 48));

  *(void *)a1 = &unk_26E6DECE0;
  objc_destructInstance((id)(a1 + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734EB8;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734EB8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEngineConfigurationSetRenderThreadInitCallback::$_0,void ()(void)>::size()
{
  return 16;
}

void *REDockingRegionComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

double REDockingRegionComponentGetBounds(uint64_t a1)
{
  if (a1) {
    long long v1 = *(_OWORD *)(a1 + 32);
  }
  else {
    *(void *)&long long v1 = vdupq_n_s32(0x7F800000u).u64[0];
  }
  return *(double *)&v1;
}

__n128 *REDockingRegionComponentSetBounds(__n128 *result, __n128 a2, __n128 a3)
{
  if (result)
  {
    result[2] = a2;
    result[3] = a3;
  }
  return result;
}

uint64_t REDockingRegionComponentGetDockTransitionStyle(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 64);
  }
  return result;
}

uint64_t REDockingRegionComponentSetDockTransitionStyle(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 64) = a2;
  }
  return result;
}

void REDockingRegionComponentBuildDockAnimations(re::ecs2::CustomDockingRegionComponent *this, const char *a2, const char *a3)
{
  if (this) {
    re::ecs2::CustomDockingRegionComponent::buildDockAnimation(this, a2, a3);
  }
}

void REDockingRegionComponentActivateDockAnimationOverrides(re::ecs2::CustomDockingRegionComponent *this)
{
  if (this) {
    re::ecs2::CustomDockingRegionComponent::activateDockAnimationOverrides(this);
  }
}

__n128 *REDockingRegionComponentSetPosition(__n128 *result, __n128 a2)
{
  if (result) {
    result[5] = a2;
  }
  return result;
}

double REDockingRegionComponentGetPosition(uint64_t a1)
{
  if (a1) {
    long long v1 = *(_OWORD *)(a1 + 80);
  }
  else {
    *(void *)&long long v1 = 0;
  }
  return *(double *)&v1;
}

uint64_t RERenderManagerGetLateLatchingManager(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

double RELateLatchingManagerProcessLateLatchAnchorPoseForAnchorId(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  v7[0] = a3;
  v7[1] = a4;
  _OWORD v7[2] = a5;
  uint64_t v7[3] = a6;
  return re::LateLatchingManager::processLateLatchAnchorPose(a1, a2, v7);
}

uint64_t REAnimationLibraryAssetCreateAssetWithDefinitions(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint8_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 224, 8);
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v10 + 196) = 0x7FFFFFFF;
  *(void *)(v10 + 208) = 0;
  *(void *)(v10 + 216) = "";
  re::AnimationLibraryAsset::init((re::AnimationLibraryAsset *)v10, 0);
  if (a4)
  {
    uint64_t v12 = (uint64_t *)(a5 + 8);
    do
    {
      *(void *)&v54.char var0 = 0;
      v54.var1 = "";
      long long v56 = 0;
      long long v55 = 0uLL;
      uint8_t v13 = (const char *)*(v12 - 1);
      int v62 = 0;
      long long v63 = "";
      BOOL v14 = v62;
      uint8_t v15 = (char *)v63;
      int v62 = 0;
      long long v63 = "";
      char var0 = (char)v54.var0;
      var1 = v54.var1;
      *(void *)&v54.char var0 = v14;
      v54.var1 = v15;
      *(void *)&long long v60 = (unint64_t)v14 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *((void *)&v60 + 1) = var1;
      re::StringID::destroyString((re::StringID *)&v60);
      re::StringID::destroyString((re::StringID *)&v62);
      uint64_t v18 = *v12;
      v12 += 2;
      re::AssetAPIHelper::assetHandleCreate(v18, (uint64_t *)&v60);
      long long v19 = v55;
      long long v55 = v60;
      long long v60 = v19;
      long long v20 = v56;
      long long v56 = v61;
      unint64_t v61 = v20;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v60);
      re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_anonymous_namespace_ *)(v10 + 40), &v54);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v55);
      re::StringID::destroyString((re::StringID *)&v54);
      --a4;
    }
    while (a4);
  }
  if (a2)
  {
    uint64_t v21 = a3 + 24;
    do
    {
      uint64_t v53 = a2;
      *(unsigned char *)&v54.char var0 = 0;
      v54.var1 = 0;
      long long v55 = (unint64_t)"";
      long long v56 = "";
      *(void *)&v57.char var0 = 0;
      v57.var1 = "";
      *(void *)&v58.char var0 = 0;
      v58.var1 = "";
      memset(v59, 0, sizeof(v59));
      unint64_t v22 = *(const char **)(v21 + 8);
      int v62 = 0;
      long long v63 = "";
      uint64_t v23 = v62;
      id v24 = (char *)v63;
      int v62 = 0;
      long long v63 = "";
      char v25 = (char)v58.var0;
      uint64_t v26 = v58.var1;
      *(void *)&v58.char var0 = v23;
      v58.var1 = v24;
      *(void *)&long long v60 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *((void *)&v60 + 1) = v26;
      re::StringID::destroyString((re::StringID *)&v60);
      re::StringID::destroyString((re::StringID *)&v62);
      long long v27 = *(const char **)v21;
      int v62 = 0;
      long long v63 = "";
      id v29 = v62;
      id v30 = (char *)v63;
      int v62 = 0;
      long long v63 = "";
      char v31 = (char)v57.var0;
      BOOL v32 = v57.var1;
      *(void *)&v57.char var0 = v29;
      v57.var1 = v30;
      *(void *)&long long v60 = (unint64_t)v29 & 0xFFFFFFFFFFFFFFFELL | v31 & 1;
      *((void *)&v60 + 1) = v32;
      re::StringID::destroyString((re::StringID *)&v60);
      re::StringID::destroyString((re::StringID *)&v62);
      uint64_t v33 = *(const char **)(v21 - 16);
      int v62 = 0;
      long long v63 = "";
      uint64_t v35 = v62;
      uint64_t v36 = v63;
      int v62 = 0;
      long long v63 = "";
      char v37 = (char)v54.var1;
      uint64_t v38 = v55;
      v54.var1 = v35;
      *(void *)&long long v55 = v36;
      *(void *)&long long v60 = (unint64_t)v35 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
      *((void *)&v60 + 1) = v38;
      re::StringID::destroyString((re::StringID *)&v60);
      re::StringID::destroyString((re::StringID *)&v62);
      uint64_t v39 = *(const char **)(v21 - 8);
      int v62 = 0;
      long long v63 = "";
      long long v41 = v62;
      uint64_t v42 = v63;
      int v62 = 0;
      long long v63 = "";
      char v43 = BYTE8(v55);
      id v44 = v56;
      *((void *)&v55 + 1) = v41;
      long long v56 = v42;
      *(void *)&long long v60 = (unint64_t)v41 & 0xFFFFFFFFFFFFFFFELL | v43 & 1;
      *((void *)&v60 + 1) = v44;
      re::StringID::destroyString((re::StringID *)&v60);
      re::StringID::destroyString((re::StringID *)&v62);
      *(unsigned char *)&v54.char var0 = *(unsigned char *)(v21 - 24);
      re::AssetAPIHelper::assetHandleCreate(*(void *)(v21 + 16), (uint64_t *)&v60);
      long long v45 = v59[0];
      v59[0] = v60;
      long long v60 = v45;
      long long v46 = *(const char **)&v59[1];
      *(void *)&v59[1] = v61;
      unint64_t v61 = v46;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v60);
      unint64_t v47 = *(void *)(v10 + 16);
      if (v47 >= *(void *)(v10 + 8))
      {
        re::DynamicArray<re::SkeletalAnimationLibraryEntry>::growCapacity((void *)v10, v47 + 1);
        unint64_t v47 = *(void *)(v10 + 16);
      }
      uint64_t v48 = (unsigned char *)(*(void *)(v10 + 32) + 120 * v47);
      *uint64_t v48 = v54.var0;
      re::StringID::StringID((re::StringID *)(v48 + 8), (const StringID *)&v54.var1);
      re::StringID::StringID((re::StringID *)(v48 + 24), (const StringID *)((char *)&v55 + 8));
      re::StringID::StringID((re::StringID *)(v48 + 40), &v57);
      re::StringID::StringID((re::StringID *)(v48 + 56), &v58);
      re::AssetHandle::AssetHandle((re::AssetHandle *)(v48 + 72), (const re::AssetHandle *)v59);
      re::AssetHandle::AssetHandle((re::AssetHandle *)(v48 + 96), (const re::AssetHandle *)((char *)&v59[1] + 8));
      ++*(void *)(v10 + 16);
      ++*(_DWORD *)(v10 + 24);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v59[1] + 8));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v59);
      re::StringID::destroyString((re::StringID *)&v58);
      re::StringID::destroyString((re::StringID *)&v57);
      re::StringID::destroyString((re::StringID *)((char *)&v55 + 8));
      re::StringID::destroyString((re::StringID *)&v54.var1);
      v21 += 48;
      --a2;
    }
    while (v53 != 1);
  }
  re::AnimationLibraryAsset::assetType(v11);
  (*(void (**)(StringID *__return_ptr))(*(void *)a1 + 416))(&v54);
  uint64_t v49 = *(void *)&v54.var0;
  if (*(void *)&v54.var0) {
    id v50 = (id)(*(void *)&v54.var0 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v54);
  return v49;
}

uint64_t REAnimationLibraryAssetGetEntryByKey(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v3 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v12);
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        long long v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  v11[0] = 2 * v4;
  v11[1] = a2;
  uint64_t v8 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 160, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v8 && *v8 < *(void *)(v3 + 136)) {
    uint64_t v9 = *(void *)(*(void *)(v3 + 152) + 24 * *v8);
  }
  else {
    uint64_t v9 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

void *REAnimationLibraryAssetGetEntryIndexFromKey(uint64_t a1, char *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v11);
  uint64_t v3 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v11);
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        long long v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  v10[0] = 2 * v4;
  v10[1] = a2;
  uint64_t v8 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 160, v10);
  re::StringID::destroyString((re::StringID *)v10);
  if (!v8 || *v8 >= *(void *)(v3 + 136)) {
    uint64_t v8 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

uint64_t REAnimationLibraryAssetGetDefaultEntry(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v8);
  uint64_t v1 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v8);
  uint64_t v2 = v1;
  if (*(void *)(v1 + 208) <= 1uLL && (uint64_t v3 = *(unsigned char **)(v1 + 216)) != 0 && !*v3
    || (uint64_t v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v1 + 160, (void *)(v1 + 208))) == 0)
  {
    uint64_t v5 = 0;
    if (!*(void *)(v2 + 136)) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v6 = *(void *)(*(void *)(v2 + 152) + 24 * v5);
    goto LABEL_9;
  }
  uint64_t v5 = *v4;
  if ((unint64_t)*v4 < *(void *)(v2 + 136)) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v6 = 0;
LABEL_9:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  return v6;
}

unsigned char *REAnimationLibraryAssetGetDefaultEntryKey(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v4);
  uint64_t v2 = *(unsigned char **)(v1 + 216);
  if (*(void *)(v1 + 208) <= 1uLL && v2 && !*v2) {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t REAnimationLibraryAssetGetEntry(uint64_t a1, unint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v7);
  if (*(void *)(v3 + 136) <= a2)
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "index < asset->animationLibraryEntries.size()", "REAnimationLibraryAssetGetEntry", 113);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(v3 + 152) + 24 * a2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
    return v5;
  }
  return result;
}

uint64_t REAnimationLibraryAssetGetEntryCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(void *)(re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v3) + 136);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

uint64_t REAnimationLibraryAssetGetKeyCount(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v3);
  uint64_t v1 = *(unsigned int *)(re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v3) + 188);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v3);
  return v1;
}

void REAnimationLibraryAssetGetKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v14);
  uint64_t v5 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)v14);
  uint64_t v6 = *(unsigned int *)(v5 + 192);
  if (!v6)
  {
    LODWORD(v7) = 0;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(int **)(v5 + 176);
  while (1)
  {
    int v9 = *v8;
    v8 += 8;
    if (v9 < 0) {
      break;
    }
    if (v6 == ++v7)
    {
      LODWORD(v7) = *(_DWORD *)(v5 + 192);
      break;
    }
  }
  if (a3)
  {
LABEL_9:
    uint64_t v10 = 0;
    uint64_t v7 = v7;
    do
    {
      if (v6 == v7) {
        break;
      }
      uint64_t v11 = v10 + 1;
      *(void *)(a2 + 8 * v1ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(*(void *)(v5 + 176) + 32 * v7 + 16);
      unsigned int v12 = v7 + 1;
      do
      {
        uint64_t v7 = v12;
        if (v12 >= v6) {
          break;
        }
        int v13 = *(_DWORD *)(*(void *)(v5 + 176) + 32 * v12++);
      }
      while ((v13 & 0x80000000) == 0);
      uint64_t v10 = v11;
    }
    while (v11 != a3);
  }
LABEL_15:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
}

uint64_t REGeomSkeletonGetName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REGeomSkeletonGetJointCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void *REPhysicsConstraintComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REPhysicsConstraintComponentCreate(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v2 = REEntityGetOrAddComponentByClass(a1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  uint64_t v3 = v2;
  if (v2) {
    id v4 = (id)(v2 + 8);
  }
  return v3;
}

uint64_t REPhysicsConstraintComponentGetExistingComponent(uint64_t a1)
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v2 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  return re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), v2);
}

BOOL REPhysicsConstraintComponentNameIsUnique(uint64_t a1, const char *a2)
{
  id v4 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2);
  if (!a2 || !*a2) {
    return 0;
  }
  unint64_t v38 = 0;
  uint64_t v39 = "";
  unint64_t v19 = *(void *)(a1 + 64);
  if (!v19)
  {
    BOOL v5 = 1;
    goto LABEL_15;
  }
  BOOL v5 = 0;
  uint64_t v6 = 0;
  __s1 = (char *)v39;
  unint64_t v18 = v38;
  uint64_t v7 = (const StringID *)(*(void *)(a1 + 80) + 288);
  while (1)
  {
    re::StringID::StringID((re::StringID *)&v20, (const StringID *)((char *)v7 - 280));
    char var1 = (char)v7[-17].var1;
    re::ecs2::EntityHandle::EntityHandle(v23, (const re::ecs2::EntityHandle *)&v7[-16]);
    StringID v8 = v7[-13];
    StringID v24 = v7[-14];
    StringID v25 = v8;
    re::StringID::StringID((re::StringID *)v26, v7 - 12);
    re::ecs2::EntityHandle::EntityHandle(v27, (const re::ecs2::EntityHandle *)&v7[-11]);
    StringID v28 = v7[-9];
    StringID v9 = v7[-8];
    StringID v10 = v7[-7];
    StringID v11 = v7[-5];
    StringID v31 = v7[-6];
    StringID v32 = v11;
    StringID v29 = v9;
    StringID v30 = v10;
    StringID v12 = v7[-4];
    StringID v13 = v7[-3];
    StringID v14 = v7[-1];
    StringID v35 = v7[-2];
    StringID v36 = v14;
    StringID v33 = v12;
    StringID v34 = v13;
    re::StringID::StringID((re::StringID *)v37, v7);
    if ((v20 ^ v18) <= 1) {
      break;
    }
    re::StringID::destroyString((re::StringID *)v37);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v27);
    objc_destroyWeak(v27);
    v27[0] = 0;
    re::StringID::destroyString((re::StringID *)v26);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v23);
    objc_destroyWeak(v23);
    v23[0] = 0;
    re::StringID::destroyString((re::StringID *)&v20);
LABEL_10:
    BOOL v5 = ++v6 >= v19;
    v7 += 19;
    if (v19 == v6) {
      goto LABEL_15;
    }
  }
  if (__s1 != __s2)
  {
    int v15 = strcmp(__s1, __s2);
    re::StringID::destroyString((re::StringID *)v37);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v27);
    objc_destroyWeak(v27);
    v27[0] = 0;
    re::StringID::destroyString((re::StringID *)v26);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v23);
    objc_destroyWeak(v23);
    v23[0] = 0;
    re::StringID::destroyString((re::StringID *)&v20);
    if (!v15) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  re::StringID::destroyString((re::StringID *)v37);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v27);
  objc_destroyWeak(v27);
  v27[0] = 0;
  re::StringID::destroyString((re::StringID *)v26);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v23);
  objc_destroyWeak(v23);
  v23[0] = 0;
  re::StringID::destroyString((re::StringID *)&v20);
LABEL_15:
  re::StringID::destroyString((re::StringID *)&v38);
  return v5;
}

uint64_t REPhysicsConstraintComponentGetUniqueConstraintNameSuffix(uint64_t a1, const char *a2)
{
  if (!*(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2)+ 64))return 1; {
  re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, v4);
  }
  re::StringID::invalid((re::StringID *)&v31);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = (_anonymous_namespace_ *)strlen(a2);
  size_t v8 = (size_t)v7 + 4;
  StringID v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  re::DynamicString::setCapacity(&v27, v8);
  LODWORD(v8) = 0;
  StringID v9 = "%s%d";
  for (uint64_t i = ""; ; uint64_t i = v18)
  {
    size_t v8 = (v8 + 1);
    StringID v11 = v9;
    re::DynamicString::assignf((re::DynamicString *)&v27, v9, a2, v8);
    StringID v12 = (v28 & 1) != 0 ? v29 : (char *)&v28 + 1;
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        StringID v14 = (v28 & 1) != 0 ? v29 + 1 : (char *)&v28 + 2;
        char v15 = *v14;
        if (*v14)
        {
          long long v16 = (unsigned __int8 *)(v14 + 1);
          do
          {
            uint64_t v13 = 31 * v13 + v15;
            int v17 = *v16++;
            char v15 = v17;
          }
          while (v17);
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v18 = i;
    v26[0] = 0;
    v26[1] = i;
    char v19 = v31;
    uint64_t v20 = v32;
    uint64_t v31 = 2 * v13;
    StringID v32 = v12;
    v33[0] = (2 * v13) | v19 & 1;
    v33[1] = v20;
    re::StringID::destroyString((re::StringID *)v33);
    re::StringID::destroyString((re::StringID *)v26);
    if (!v6) {
      break;
    }
    uint64_t v22 = v31;
    uint64_t v21 = v32;
    uint64_t v23 = 304 * v6;
    StringID v24 = (const char **)(v5 + 16);
    while (((unint64_t)*(v24 - 1) ^ v22) > 1 || v21 != *v24 && strcmp(v21, *v24))
    {
      v24 += 38;
      v23 -= 304;
      if (!v23) {
        goto LABEL_24;
      }
    }
    StringID v9 = v11;
  }
LABEL_24:
  if (v27 && (v28 & 1) != 0) {
    (*(void (**)(void))(*v27 + 40))();
  }
  re::StringID::destroyString((re::StringID *)&v31);
  return v8;
}

uint64_t REPhysicsConstraintComponentGetConstraintCount(uint64_t a1, uint64_t a2)
{
  return *(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 64);
}

void REPhysicsConstraintComponentAddConstraint(re::ecs2::PhysicsConstraintsComponent *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, char a6, int a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  char v15 = a3;
  if (REPhysicsConstraintComponentNameIsUnique((uint64_t)a1, a3))
  {
    if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
      dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
    }
    uint64_t v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v20 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v18, v19);
    re::ecs2::EntityHandle::EntityHandle((uint64_t)v43, *(void *)(v20 + 16));
    if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
      dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
    }
    uint64_t v21 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v23 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v21, v22);
    re::ecs2::EntityHandle::EntityHandle((uint64_t)v42, *(void *)(v23 + 16));
    StringID v25 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, v24);
    if (!v15) {
      char v15 = "";
    }
    v35[0] = 0;
    v35[1] = (uint64_t)"";
    re::ecs2::EntityHandle::EntityHandle(v34, (const re::ecs2::EntityHandle *)v43);
    v33[0] = a8;
    v33[1] = a9;
    re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)v42);
    v31[0] = a10;
    v31[1] = a11;
    re::ecs2::PhysicsConstraint::PhysicsConstraint((uint64_t)buf, a2, v35, v34, v33, location, v31, a6);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_destroyWeak(location);
    location[0] = 0;
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v34);
    objc_destroyWeak(v34);
    v34[0] = 0;
    re::StringID::destroyString((re::StringID *)v35);
    re::ecs2::PhysicsConstraintsComponent::addOrReplacePhysicsConstraint(a1, (const re::ecs2::PhysicsConstraint *)buf, a7);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    re::StringID::destroyString((re::StringID *)&v41);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v40);
    objc_destroyWeak(v40);
    v40[0] = 0;
    re::StringID::destroyString((re::StringID *)&v39);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v38);
    objc_destroyWeak(v38);
    v38[0] = 0;
    re::StringID::destroyString((re::StringID *)&v37);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v42);
    objc_destroyWeak(v42);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v43);
    objc_destroyWeak(v43);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v26 = (id)CoreRELog::log;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Constraint name must be unique", buf, 2u);
    }
  }
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[277] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t REPhysicsConstraintComponentSyncConstraintArrays(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(v2, 0);
}

void REPhysicsConstraintComponentAddBallSocketJoint(re::ecs2::PhysicsConstraintsComponent *a1, const char *a2, uint64_t a3, uint64_t a4, char a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
}

void REPhysicsConstraintComponentAddHingeJoint(re::ecs2::PhysicsConstraintsComponent *a1, const char *a2, uint64_t a3, uint64_t a4, char a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
}

void REPhysicsConstraintComponentAddSliderJoint(re::ecs2::PhysicsConstraintsComponent *a1, const char *a2, uint64_t a3, uint64_t a4, char a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
}

void REPhysicsConstraintComponentAddSixDOFJoint(re::ecs2::PhysicsConstraintsComponent *a1, const char *a2, uint64_t a3, uint64_t a4, char a5, int a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
}

uint64_t REPhysicsConstraintComponentGetConstraintByName(void *a1, const char *a2)
{
  uint64_t v4 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, (uint64_t)a2);
  uint64_t v11 = 0;
  StringID v12 = "";
  uint64_t v5 = a1[8];
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v8 = v11;
    uint64_t v7 = v12;
    StringID v9 = (const char **)(a1[10] + 16);
    while ((v8 ^ (unint64_t)*(v9 - 1)) > 1 || *v9 != v7 && strcmp(*v9, v7))
    {
      ++v6;
      v9 += 38;
      if (v5 == v6) {
        goto LABEL_7;
      }
    }
    re::StringID::destroyString((re::StringID *)&v11);
    if (a1[13] > v6) {
      return *(void *)(a1[15] + 8 * v6);
    }
  }
  else
  {
LABEL_7:
    re::StringID::destroyString((re::StringID *)&v11);
  }
  return 0;
}

uint64_t REPhysicsConstraintComponentGetConstraintByIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(void *)(v3 + 104) <= a2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v3 + 120) + 8 * a2);
  }
}

re::Constraint *REPhysicsConstraintComponentRemoveAndDeleteConstraint(re::ecs2::PhysicsConstraintsComponent *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const char *)a2;
  unint64_t v6 = (void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, a2);
  uint64_t result = (re::Constraint *)REPhysicsConstraintComponentGetConstraintByName(v6, v4);
  if (result)
  {
    uint64_t v8 = result;
    if (a3)
    {
      v10[0] = result;
      re::DynamicArray<re::Allocator const*>::removeStable((void *)(a3 + 152), v10);
      StringID v9 = re::internal::destroyPersistent<re::PhysicsSimulation>((re *)"REConstraintDestroy", 1092, (void (***)(void))v8);
    }
    else
    {
      StringID v9 = (_anonymous_namespace_ *)re::ecs2::PhysicsConstraintsComponent::deferDeleteConstraint(a1, result);
    }
    if (!v4) {
      uint64_t v4 = "";
    }
    v10[0] = 0;
    v10[1] = "";
    re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraint(a1, (const re::StringID *)v10);
    re::StringID::destroyString((re::StringID *)v10);
    return (re::Constraint *)re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

void REPhysicsConstraintComponentRemoveAndDeleteAllConstraints(re::ecs2::PhysicsConstraintsComponent *a1, uint64_t a2)
{
  unint64_t v16 = *(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, a2)+ 64);
  if ((int)v16 >= 1)
  {
    uint64_t v14 = *((void *)a1 + 10);
    uint64_t v4 = v16 + 1;
    while (1)
    {
      unint64_t v5 = (v4 - 2);
      if (v16 <= v5) {
        break;
      }
      uint64_t v6 = v14 + 304 * v5;
      re::StringID::StringID((re::StringID *)v17, (const StringID *)(v6 + 8));
      char v18 = *(unsigned char *)(v6 + 24);
      re::ecs2::EntityHandle::EntityHandle(v19, (const re::ecs2::EntityHandle *)(v6 + 32));
      long long v7 = *(_OWORD *)(v6 + 80);
      long long v20 = *(_OWORD *)(v6 + 64);
      long long v21 = v7;
      re::StringID::StringID((re::StringID *)v22, (const StringID *)(v6 + 96));
      re::ecs2::EntityHandle::EntityHandle(v23, (const re::ecs2::EntityHandle *)(v6 + 112));
      long long v24 = *(_OWORD *)(v6 + 144);
      long long v8 = *(_OWORD *)(v6 + 160);
      long long v9 = *(_OWORD *)(v6 + 176);
      long long v10 = *(_OWORD *)(v6 + 208);
      long long v27 = *(_OWORD *)(v6 + 192);
      long long v28 = v10;
      long long v25 = v8;
      long long v26 = v9;
      long long v11 = *(_OWORD *)(v6 + 224);
      long long v12 = *(_OWORD *)(v6 + 240);
      long long v13 = *(_OWORD *)(v6 + 272);
      long long v31 = *(_OWORD *)(v6 + 256);
      long long v32 = v13;
      long long v29 = v11;
      long long v30 = v12;
      re::StringID::StringID((re::StringID *)v33, (const StringID *)(v6 + 288));
      REPhysicsConstraintComponentRemoveAndDeleteConstraint(a1, v17[1], a2);
      re::StringID::destroyString((re::StringID *)v33);
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v23);
      objc_destroyWeak(v23);
      v23[0] = 0;
      re::StringID::destroyString((re::StringID *)v22);
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v19);
      objc_destroyWeak(v19);
      v19[0] = 0;
      re::StringID::destroyString((re::StringID *)v17);
      if ((unint64_t)--v4 <= 1) {
        return;
      }
    }
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (v4 - 2), v16);
    _os_crash();
    __break(1u);
  }
}

uint64_t REPhysicsConstraintComponentGetConstraintType(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(void *)(v3 + 64) <= a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(v3 + 80) + 304 * a2);
  }
}

uint64_t REPhysicsConstraintComponentGetConstraintIndex(uint64_t a1, const char *a2)
{
  uint64_t v3 = a1;
  if (!*(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, (uint64_t)a2)+ 64))return 0; {
  unint64_t v5 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v3, v4);
  }
  unint64_t v15 = 0;
  unint64_t v16 = "";
  uint64_t v6 = *(void *)(v3 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v3 + 80);
    unint64_t v10 = v15;
    long long v9 = v16;
    do
    {
      while (1)
      {
        uint64_t v3 = v7;
        if ((v10 ^ *(void *)(v8 + 304 * v7 + 8)) <= 1) {
          break;
        }
        ++v7;
        if (v3 + 1 == v6) {
          goto LABEL_15;
        }
      }
      long long v11 = *(const char **)(v8 + 304 * v7 + 16);
      if (v11 == v9) {
        break;
      }
      int v12 = strcmp(v11, v9);
      uint64_t v7 = v3 + 1;
    }
    while (v12 && v7 != v6);
  }
LABEL_15:
  re::StringID::destroyString((re::StringID *)&v15);
  return v3;
}

unsigned char *REPhysicsConstraintComponentGetConstraintName(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (!*(void *)(v3 + 64)) {
    return 0;
  }
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v3, v4);
  if (*(void *)(v5 + 64) <= a2) {
    uint64_t v6 = v5 + 32;
  }
  else {
    uint64_t v6 = *(void *)(v5 + 80) + 304 * a2 + 8;
  }
  uint64_t v8 = *(unsigned char **)(v6 + 8);
  if (*v8) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t REPhysicsConstraintComponentGetPinNameA(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (!*(void *)(v3 + 64)) {
    return 0;
  }
  uint64_t v5 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v3, v4);
  unint64_t v6 = re::ecs2::PhysicsConstraintsComponent::pinNameA(v5, a2);
  if (**(unsigned char **)(v6 + 8)) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

uint64_t REPhysicsConstraintComponentGetPinNameB(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (!*(void *)(v3 + 64)) {
    return 0;
  }
  uint64_t v5 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v3, v4);
  unint64_t v6 = re::ecs2::PhysicsConstraintsComponent::pinNameB(v5, a2);
  if (**(unsigned char **)(v6 + 8)) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

unsigned char *REPhysicsConstraintComponentGetPinName(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (!*(void *)(v5 + 64)) {
    return 0;
  }
  uint64_t v7 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(v5, v6);
  unint64_t v8 = a3
     ? re::ecs2::PhysicsConstraintsComponent::pinNameA(v7, a2)
     : re::ecs2::PhysicsConstraintsComponent::pinNameB(v7, a2);
  uint64_t result = *(unsigned char **)(v8 + 8);
  if (!*result) {
    return 0;
  }
  return result;
}

uint64_t REPhysicsConstraintComponentSetPinNameA(re::ecs2::PhysicsConstraintsComponent *a1, unint64_t a2, const char *a3)
{
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, a2);
  if (*(void *)(result + 64))
  {
    unint64_t v8 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, v7);
    v9[0] = 0;
    v9[1] = "";
    re::ecs2::PhysicsConstraintsComponent::setPinNameA(a1, a2, (const re::StringID *)v9);
    re::StringID::destroyString((re::StringID *)v9);
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t REPhysicsConstraintComponentSetPinNameB(re::ecs2::PhysicsConstraintsComponent *a1, unint64_t a2, const char *a3)
{
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, a2);
  if (*(void *)(result + 64))
  {
    unint64_t v8 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, v7);
    v9[0] = 0;
    v9[1] = "";
    re::ecs2::PhysicsConstraintsComponent::setPinNameB(a1, a2, (const re::StringID *)v9);
    re::StringID::destroyString((re::StringID *)v9);
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

uint64_t REPhysicsConstraintComponentSetPinName(re::ecs2::PhysicsConstraintsComponent *a1, unint64_t a2, char a3, const char *a4)
{
  uint64_t result = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, a2);
  if (*(void *)(result + 64))
  {
    unint64_t v10 = (_anonymous_namespace_ *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, v9);
    v11[0] = 0;
    v11[1] = "";
    if (a3) {
      re::ecs2::PhysicsConstraintsComponent::setPinNameA(a1, a2, (const re::StringID *)v11);
    }
    else {
      re::ecs2::PhysicsConstraintsComponent::setPinNameB(a1, a2, (const re::StringID *)v11);
    }
    re::StringID::destroyString((re::StringID *)v11);
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetPoseA(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 64);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetPoseB(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 144);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetOffsetPoseA(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 176);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetOffsetPoseB(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 208);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetOffsetPositionB(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 208);
  }
  return result;
}

__n128 REPhysicsConstraintComponentGetOffsetOrientationB(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  result.n128_u64[0] = 0;
  if (*(void *)(v3 + 64) > a2) {
    return *(__n128 *)(*(void *)(v3 + 80) + 304 * a2 + 224);
  }
  return result;
}

__n128 REPhysicsConstraintComponentSetOffsetPoseA(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(void *)(v5 + 64) > a2)
  {
    uint64_t v7 = (__n128 *)(*(void *)(v5 + 80) + 304 * a2);
    __n128 result = a4;
    v7[11] = a3;
    v7[12] = a4;
  }
  return result;
}

__n128 REPhysicsConstraintComponentSetOffsetPoseB(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  if (*(void *)(v5 + 64) > a2)
  {
    uint64_t v7 = (__n128 *)(*(void *)(v5 + 80) + 304 * a2);
    __n128 result = a4;
    v7[13] = a3;
    v7[14] = a4;
  }
  return result;
}

char *REPhysicsConstraintComponentGetEntityA(uint64_t a1, unint64_t a2)
{
  if (*(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 64) <= a2)return 0; {
  re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(*(void *)(a1 + 80) + 304 * a2 + 32));
  }
  uint64_t v4 = re::ecs2::EntityHandle::resolve(location, *(void *)(a1 + 16));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  objc_destroyWeak(location);
  return v4;
}

char *REPhysicsConstraintComponentGetEntityB(uint64_t a1, unint64_t a2)
{
  if (*(void *)(re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2)+ 64) <= a2)return 0; {
  re::ecs2::EntityHandle::EntityHandle(location, (const re::ecs2::EntityHandle *)(*(void *)(a1 + 80) + 304 * a2 + 112));
  }
  uint64_t v4 = re::ecs2::EntityHandle::resolve(location, *(void *)(a1 + 16));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
  objc_destroyWeak(location);
  return v4;
}

void REPhysicsConstraintComponentRemoveConstraintLeaveJoint(re::ecs2::PhysicsConstraintsComponent *a1, const char *a2)
{
  uint64_t v4 = (void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast((uint64_t)a1, (uint64_t)a2);
  ConstraintByName = (_anonymous_namespace_ *)REPhysicsConstraintComponentGetConstraintByName(v4, a2);
  if (ConstraintByName)
  {
    v6[0] = 0;
    v6[1] = "";
    re::ecs2::PhysicsConstraintsComponent::removePhysicsConstraintLeaveJoint(a1, (const re::StringID *)v6);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    re::StringID::destroyString((re::StringID *)v6);
  }
}

uint64_t REPhysicsConstraintComponentSyncJoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(v2, 0);
}

uint64_t REPhysicsConstraintComponentSetLinearLimits(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8 = (void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::ecs2::PhysicsConstraintsComponent::setLinearLimits(v8, a2, a3, a4);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REPhysicsConstraintComponentSetAngularLimits(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8 = (void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::ecs2::PhysicsConstraintsComponent::setAngularLimits(v8, a2, a3, a4);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n64 REPhysicsConstraintComponentGetLinearLimits(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsConstraintsComponent::linearLimits(v5, a2, a3);
}

__n64 REPhysicsConstraintComponentGetAngularLimits(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsConstraintsComponent::linearLimits(v5, a2, a3);
}

uint64_t REPhysicsConstraintComponentGetCollisionEnabled(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  return re::ecs2::PhysicsConstraintsComponent::collisionEnabled(v3, a2);
}

uint64_t REPhysicsConstraintComponentSetCollisionEnabled(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(a1, a2);
  re::ecs2::PhysicsConstraintsComponent::setCollisionEnabled(v6, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::safeCast(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    uint64_t v3 = &qword_268772000;
    if ((_UNKNOWN *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) == re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
      return v2;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) component must not be null.", "component", "safeCast", 98);
    _os_crash();
    __break(1u);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *(void *)(v3[283] + 32);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Component is wrong type. Expected type: %s, but got: %s", "&reinterpret_cast<Derived *>(component)->componentType() == &Derived::classComponentType()", "safeCast", 102, v5, *(void *)(v6 + 32));
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *REAnimationComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REAnimationComponentGetEntryCount(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t REAnimationComponentAddEntry(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  HIDWORD(v5) = 0x80000000;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = "";
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::add(a1 + 32, v4);
  re::ecs2::AnimationComponentEntry::deinit((re::ecs2::AnimationComponentEntry *)v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  re::ecs2::Component::enqueueMarkDirty(a1);
  return v2;
}

uint64_t REAnimationComponentRemoveAllEntries(uint64_t a1)
{
  re::DynamicArray<re::ecs2::AnimationComponentEntry>::clear((re::ecs2::AnimationComponentEntry *)(a1 + 32));
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentSetTimeline(uint64_t a1, unint64_t a2, uint64_t a3)
{
  re::AssetAPIHelper::assetHandleCreate(a3, (uint64_t *)&v9);
  long long v6 = *(_OWORD *)Entry;
  *(_OWORD *)uint64_t Entry = v9;
  long long v9 = v6;
  uint64_t v7 = *(void *)(Entry + 16);
  *(void *)(Entry + 16) = v10;
  uint64_t v10 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t anonymous namespace'::GetEntry(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 64) + 72 * a2;
}

uint64_t REAnimationComponentGetTimeline(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentSetRequest(uint64_t a1, unint64_t a2, char a3)
{
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentGetRequest(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentSetHandoff(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  *(unsigned char *)(Entry + 4ArcSharedObject::ArcSharedObject(this, 0) = (v5 & 0x7FFFFFFF) != 0;
  *(_DWORD *)(Entry + 32) = v3;
  *(_DWORD *)(Entry + 36) = v5;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentGetHandoff(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentActiveAnimationCount(uint64_t a1)
{
  uint64_t v1 = a1 + 136;
  if (!*(void *)(a1 + 152)) {
    uint64_t v1 = a1 + 88;
  }
  return *(void *)(v1 + 16) + *(void *)(a1 + 48);
}

uint64_t REAnimationComponentSetDefaultTimebaseID(uint64_t this, uint64_t a2)
{
  *(void *)(this + 72) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REAnimationComponentGetDefaultTimebaseID(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t REAnimationComponentCopyDefaultTimebaseRef(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  do
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 24);
  }
  while (v1);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 32))(*(void *)(v3 + 56));
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v4);
  if (!v5) {
    return 0;
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v5 + 96);
  return v6();
}

uint64_t REAnimationComponentPlay(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  DWORD1(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a3 + 4);
  HIDWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a3 + 8);
  BYTE8(v1ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a3 + 24);
  LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  re::AssetAPIHelper::assetHandleCreate(a2, v9);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v9);
  uint64_t v6 = re::ecs2::AnimationComponent::play(a1, v8, &v10, a4, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::ecs2::Component::enqueueMarkDirty(a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  return v6;
}

double REAnimationComponentGetDuration(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::animationDuration(a1, a2, (_anonymous_namespace_ *)v3);
  double result = v4;
  if (!v3[0]) {
    return NAN;
  }
  return result;
}

double REAnimationComponentGetCurrentPlaybackTime(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::animationPlaybackTime(a1, a2, (uint64_t)v3);
  double result = v4;
  if (!v3[0]) {
    return NAN;
  }
  return result;
}

uint64_t REAnimationComponentSetCurrentPlaybackTime(re::ecs2::AnimationComponent *a1, unint64_t a2, double a3)
{
  re::ecs2::AnimationComponent::setAnimationPlaybackTime(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

float REAnimationComponentGetPlaybackSpeed(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::animationPlaybackSpeed(a1, a2, (uint64_t)v3);
  float result = v4;
  if (!v3[0]) {
    return NAN;
  }
  return result;
}

BOOL REAnimationComponentSetPlaybackSpeed(re::ecs2::AnimationComponent *a1, unint64_t a2, float a3)
{
  BOOL v4 = re::ecs2::AnimationComponent::setAnimationPlaybackSpeed(a1, a2, a3);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

float REAnimationComponentGetBlendFactor(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::animationBlendFactor(a1, a2, (uint64_t)v3);
  float result = v4;
  if (!v3[0]) {
    return NAN;
  }
  return result;
}

float REAnimationComponentGetFadeBlendFactor(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::fadeBlendFactor(a1, a2, (uint64_t)v3);
  float result = v4;
  if (!v3[0]) {
    return NAN;
  }
  return result;
}

BOOL REAnimationComponentSetBlendFactor(re::ecs2::AnimationComponent *a1, unint64_t a2, float a3)
{
  BOOL v4 = re::ecs2::AnimationComponent::setAnimationBlendFactor(a1, a2, a3);
  if (v4) {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return v4;
}

uint64_t REAnimationComponentGetAnimationParentTimebase(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  re::ecs2::AnimationComponent::animationParentTimebase(a1, a2, v3);
  if (v3[0]) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t REAnimationComponentSetAnimationParentTimebase(re::ecs2::AnimationComponent *a1, unint64_t a2, OpaqueCMTimebase *a3)
{
  re::ecs2::AnimationComponent::setAnimationParentTimebase(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnimationComponentPauseAnimation(re::ecs2::AnimationComponent *a1, uint64_t a2)
{
  re::ecs2::AnimationComponent::pause(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnimationComponentResumeAnimation(re::ecs2::AnimationComponent *a1, uint64_t a2)
{
  re::ecs2::AnimationComponent::resume(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAnimationComponentStopAnimation(uint64_t a1, uint64_t a2)
{
  re::ecs2::AnimationComponent::stop(a1, a2, 0.0);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentStopAnimationWithTime(uint64_t a1, uint64_t a2, float a3)
{
  re::ecs2::AnimationComponent::stop(a1, a2, a3);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

BOOL REAnimationComponentHasRunningAnimations(uint64_t a1)
{
  if (*(void *)(a1 + 152)) {
    uint64_t v1 = a1 + 136;
  }
  else {
    uint64_t v1 = a1 + 88;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 248 * v2 - 248;
  uint64_t v4 = (unsigned __int8 *)(*(void *)(v1 + 32) + 57);
  do
  {
    int v5 = *v4;
    v4 += 248;
    BOOL result = v5 != 2;
    BOOL v7 = v5 != 2 || v3 == 0;
    v3 -= 248;
  }
  while (!v7);
  return result;
}

uint64_t REAnimationComponentStopAllAnimations(re::ecs2::AnimationComponent *a1)
{
  re::ecs2::AnimationComponent::stopAll(a1);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

unint64_t REAnimationComponentIsPlaying(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::AnimationComponent::animationEntry(a1, a2);
  if (result) {
    return *(unsigned char *)(result + 57) == 0;
  }
  return result;
}

unint64_t REAnimationComponentIsPaused(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::AnimationComponent::animationEntry(a1, a2);
  if (result) {
    return (*(unsigned char *)(result + 57) & 0xFD) == 1;
  }
  return result;
}

BOOL REAnimationComponentIsCompleted(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  unint64_t v2 = re::ecs2::AnimationComponent::animationEntry(a1, a2);
  return !v2 || *(unsigned char *)(v2 + 57) == 2;
}

BOOL REAnimationComponentIsAnimationCompleted(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  unint64_t v2 = re::ecs2::AnimationComponent::animationEntry(a1, a2);
  return !v2 || *(unsigned char *)(v2 + 57) == 2;
}

uint64_t REAnimationComponentAllAnimationsCompleted(uint64_t a1)
{
  if (*(void *)(a1 + 152)) {
    uint64_t v1 = a1 + 136;
  }
  else {
    uint64_t v1 = a1 + 88;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = 248 * v2;
  for (uint64_t i = (void *)(*(void *)(v1 + 32) + 128); !*i || *((unsigned char *)i - 71); i += 31)
  {
    v3 -= 248;
    if (!v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t REAnimationComponentAllAnimationsAreCompleted(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 152)) {
    uint64_t v2 = a1 + 136;
  }
  else {
    uint64_t v2 = a1 + 88;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = 248 * v3;
  for (uint64_t i = (void *)(*(void *)(v2 + 32) + 128); *i == a2 || *((unsigned char *)i - 71); i += 31)
  {
    v4 -= 248;
    if (!v4) {
      return 1;
    }
  }
  return 0;
}

BOOL REAnimationComponentIsValid(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  return re::ecs2::AnimationComponent::animationEntry(a1, a2) != 0;
}

unint64_t REAnimationComponentGetTimelineAsset(re::ecs2::AnimationComponent *a1, unint64_t a2)
{
  unint64_t result = re::ecs2::AnimationComponent::animationEntry(a1, a2);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t REAnimationComponentEntryGetTimeline(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentEntrySetTarget(uint64_t a1, unint64_t a2, char a3)
{
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentEntryGetTarget(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentEntrySetRequest(uint64_t a1, unint64_t a2, char a3)
{
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentEntryGetRequest(uint64_t a1, unint64_t a2)
{
}

uint64_t REAnimationComponentEntrySetHandoff(uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  *(unsigned char *)(Entry + 4ArcSharedObject::ArcSharedObject(this, 0) = (v5 & 0x7FFFFFFF) != 0;
  *(_DWORD *)(Entry + 32) = v3;
  *(_DWORD *)(Entry + 36) = v5;
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAnimationComponentEntryGetHandoff(uint64_t a1, unint64_t a2)
{
}

void REAnimationComponentControllerPause(uint64_t a1, unint64_t a2)
{
  re::AnimationController::pause(v2);
}

void REAnimationComponentControllerResume(uint64_t a1, unint64_t a2)
{
  re::AnimationController::resume(v2);
}

double REAnimationComponentControllerStop(uint64_t a1, unint64_t a2, float a3)
{
  *(float *)&double v5 = a3;
  return re::AnimationController::stop(v4, v5);
}

BOOL REAnimationComponentControllerIsValid(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(Entry + 56);
  return v3
      && re::DataArray<re::internal::TimelineTree>::tryGet(v3 + (*(uint64_t *)(Entry + 64) >> 56 << 6) + 72, *(void *)(Entry + 64)) != 0;
}

uint64_t REAnimationComponentControllerIsPaused(uint64_t a1, unint64_t a2)
{
  return re::AnimationController::isPaused(v2);
}

float REAnimationComponentControllerGetSpeed(uint64_t a1, unint64_t a2)
{
  return re::AnimationController::speed(v2);
}

uint64_t REAnimationComponentControllerSetSpeed(uint64_t a1, unint64_t a2, float a3)
{
  return re::AnimationController::setSpeed(v4, a3);
}

double REAnimationComponentControllerGetDuration(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = re::AnimationController::timeline((re::AnimationController *)(Entry + 56));
  if (!v3) {
    return 0.0;
  }
  uint64_t v4 = *(void (**)(void))(*(void *)v3 + 40);
  v4();
  return result;
}

BOOL REAnimationComponentControllerGetTime(uint64_t a1, unint64_t a2, void *a3)
{
  re::AnimationController::time((re::AnimationController *)(Entry + 56), (uint64_t)v7);
  int v5 = v7[0];
  if (v7[0]) {
    *a3 = v8;
  }
  return v5 != 0;
}

void *REAnimationComponentControllerSetTime(uint64_t a1, unint64_t a2, double a3)
{
  return re::AnimationController::setTime(v4, a3);
}

uint64_t REAnimationComponentControllerGetTimeline(uint64_t a1, unint64_t a2)
{
  return re::AnimationController::timeline(v2);
}

float REAnimationComponentControllerGetBlendFactor(uint64_t a1, unint64_t a2, const re::Timeline *a3)
{
  return re::AnimationController::blendFactor(v4, a3);
}

uint64_t REAnimationComponentControllerSetBlendFactor(uint64_t a1, unint64_t a2, const re::Timeline *a3, float a4)
{
  return re::AnimationController::setBlendFactor(v6, a4, a3);
}

uint64_t AnimationComponentPlayAnimation(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v11);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)v11);
  if (a4) {
    unsigned int v7 = 6;
  }
  else {
    unsigned int v7 = 4;
  }
  uint64_t v8 = re::ecs2::AnimationComponent::play(a1, v10, a3, v7, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::ecs2::Component::enqueueMarkDirty(a1);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  return v8;
}

uint64_t REAnimationComponentPlayAnimation(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  HIDWORD(v5) = 0x80000000;
  uint64_t v6 = "";
  BYTE8(v5) = a4 & 1;
  *(void *)&long long v5 = a3;
  return AnimationComponentPlayAnimation(a1, a2, &v5, 0);
}

uint64_t REAnimationComponentPlayAnimationWithDirty(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  HIDWORD(v6) = 0x80000000;
  unsigned int v7 = "";
  BYTE8(v6) = a4 & 1;
  *(void *)&long long v6 = a3;
  return AnimationComponentPlayAnimation(a1, a2, &v6, a5);
}

uint64_t REAnimationComponentPlayAnimationEx(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  DWORD1(v5) = *(_DWORD *)(a3 + 4);
  HIDWORD(v5) = *(_DWORD *)(a3 + 8);
  BYTE8(v5) = *(unsigned char *)(a3 + 24);
  LODWORD(v5) = *(_DWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  return AnimationComponentPlayAnimation(a1, a2, &v5, a4);
}

void *REUISortingComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REUISortingComponentSetSortCategory(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 80) != a2)
  {
    *(_DWORD *)(this + 8ArcSharedObject::ArcSharedObject(this, 0) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUISortingComponentGetSortCategory(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t REUISortingComponentSetSortPriorityHint(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 84) != a2)
  {
    *(_DWORD *)(this + 84) = a2;
    return re::ecs2::Component::enqueueMarkDirty(this);
  }
  return this;
}

uint64_t REUISortingComponentGetSortPriorityHint(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t REUISortingComponentSetExtents(float *a1, __n128 a2)
{
  __n128 v4 = a2;
  uint64_t result = re::ecs2::UISortingComponent::setExtents(a1, (float *)&v4);
  if (result)
  {
    return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  }
  return result;
}

float32x4_t REUISortingComponentGetExtents(float32x4_t *a1)
{
  float32x4_t v1 = a1[3];
  float32x4_t v2 = a1[4];
  uint32x4_t v3 = (uint32x4_t)vcgtq_f32(v1, v2);
  v3.i32[3] = v3.i32[2];
  if ((vmaxvq_u32(v3) & 0x80000000) != 0)
  {
    return a1[2];
  }
  else
  {
    float32x4_t result = vsubq_f32(v2, v1);
    result.i32[3] = 0;
    result.i64[0] = vmaxnmq_f32(result, (float32x4_t)0).u64[0];
  }
  return result;
}

uint64_t REUISortingComponentSetUsesMeshBoundingBox(uint64_t this, char a2)
{
  *(unsigned char *)(this + 95) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REUISortingComponentGetUsesMeshBoundingBox(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 95);
}

uint64_t REUISortingComponentSetIsInsideOutsidePartitionPlane(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REUISortingComponentGetIsInsideOutsidePartitionPlane(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

void *REListenerComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REListenerComponentSetLinearGain(uint64_t result, float a2)
{
  *(float *)(result + 28) = a2;
  return result;
}

float REListenerComponentGetLinearGain(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t REListenerComponentSetSystemListener(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(result + 128) = v2;
  return result;
}

uint64_t REListenerComponentSetReferencesSystemListener(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 3;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(result + 128) = v2;
  return result;
}

void *REIkParametersComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REIkParametersComponentSetAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v6);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  long long v6 = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  uint64_t v7 = v4;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  re::ecs2::IKParametersComponent::createSolversForAsset((re::ecs2::IKParametersComponent *)a1);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REIkParametersComponentGetAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REIkParametersComponentGetSolverCount(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void REIkParametersComponentResetSolver(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  JUMPOUT(0x237DBA3E0);
}

uint64_t solverAtIndex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 64) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 72) + (a2 << 7);
}

uint64_t REIkParametersComponentGetSolverNodeName(uint64_t a1, unint64_t a2)
{
  return *(void *)(solverAtIndex(a1, a2) + 8);
}

uint64_t REIkParametersComponentSolverGetMaxIterations(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = solverAtIndex(a1, a2);
  return (unsigned __int16)MEMORY[0x237DBA3A0](*(void *)(v2 + 16));
}

void REIkParametersComponentSolverSetMaxIterations(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  JUMPOUT(0x237DBA3F0);
}

void REIkParametersComponentSolverGetPGain(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  JUMPOUT(0x237DBA3B0);
}

uint64_t REIkParametersComponentSolverSetPGain(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(solverAtIndex(a1, a2) + 16);
  v5.n128_f32[0] = a3;
  return MEMORY[0x270F1A630](v4, v5);
}

uint64_t REIkParametersComponentSolverGetRetargetingGain(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(solverAtIndex(a1, a2) + 16);
  return MEMORY[0x270F1A5F0](v2);
}

uint64_t REIkParametersComponentSolverSetRetargetingGain(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(solverAtIndex(a1, a2) + 16);
  v5.n128_f32[0] = a3;
  return MEMORY[0x270F1A640](v4, v5);
}

uint64_t REIkParametersComponentSolverGetJointCount(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  return CoreIKGenericSolverGetJointCount();
}

uint64_t REIkParametersComponentJointGetName(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  CoreIKGenericSolverGetJoint();
  return CoreIKJointGetName();
}

uint64_t REIkParametersComponentJointGetRetargetingGain(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  uint64_t Joint = CoreIKGenericSolverGetJoint();
  return MEMORY[0x270F1A688](Joint);
}

uint64_t REIkParametersComponentJointSetRetargetingGain(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  CoreIKGenericSolverGetJoint();
  return CoreIKJointSetRetargetingGain();
}

uint64_t REIkParametersComponentJointGetRetargetingGainPerAxis(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  uint64_t Joint = CoreIKGenericSolverGetJoint();
  return MEMORY[0x270F1A690](Joint);
}

uint64_t REIkParametersComponentJointSetRetargetingGainPerAxis(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  CoreIKGenericSolverGetJoint();
  return CoreIKJointSetRetargetingGainDOF();
}

uint64_t REIkParametersComponentJointGetRotationStiffness(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  uint64_t Joint = CoreIKGenericSolverGetJoint();
  return MEMORY[0x270F1A698](Joint);
}

uint64_t REIkParametersComponentJointSetRotationStiffness(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  CoreIKGenericSolverGetJoint();
  return CoreIKJointSetRotationStiffness();
}

uint64_t REIkParametersComponentSolverGetTaskCount(uint64_t a1, unint64_t a2)
{
  solverAtIndex(a1, a2);
  return CoreIKGenericSolverGetConstraintCount();
}

uint64_t REIkParametersComponentTaskGetName(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  return re::FullBodyIKSolver::taskName(v2);
}

uint64_t REIkParametersComponentTaskGetTargetName(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  return re::FullBodyIKSolver::taskTargetName(v2);
}

void REIkParametersComponentTaskHasPositionEnabled(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  re::FullBodyIKSolver::taskPositionEnabled(v2);
}

void REIkParametersComponentTaskHasRotationEnabled(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  re::FullBodyIKSolver::taskRotationEnabled(v2);
}

void REIkParametersComponentTaskGetPositionWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  MEMORY[0x237DBA220](v5);
  JUMPOUT(0x237DBA480);
}

void REIkParametersComponentTaskSetPositionWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  MEMORY[0x237DBA220](v5);
  JUMPOUT(0x237DBA520);
}

void REIkParametersComponentTaskGetRotationWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  MEMORY[0x237DBA220](v5);
  JUMPOUT(0x237DBA460);
}

void REIkParametersComponentTaskSetRotationWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  MEMORY[0x237DBA220](v5);
  JUMPOUT(0x237DBA510);
}

uint64_t REIkParametersComponentTaskGetLookAtType(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return CoreIKGenericConstraintGetUseLocalSpaceLookAtAxis();
}

uint64_t REIkParametersComponentTaskSetLookAtType(uint64_t result, unint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      uint64_t v5 = solverAtIndex(result, a2);
      uint64_t v6 = MEMORY[0x237DBA340](*(void *)(v5 + 16), a3);
      return MEMORY[0x270F1A590](v6);
    }
  }
  else
  {
    uint64_t v7 = solverAtIndex(result, a2);
    uint64_t v8 = MEMORY[0x237DBA340](*(void *)(v7 + 16), a3);
    return MEMORY[0x270F1A598](v8);
  }
  return result;
}

uint64_t REIkParametersComponentTaskGetLookAtAxis(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return MEMORY[0x270F1A520](v5);
}

uint64_t REIkParametersComponentTaskSetLookAtAxis(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return CoreIKGenericConstraintSetLookAtAxis();
}

uint64_t REIkParametersComponentTaskHasLookAtEnabled(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return CoreIKGenericConstraintHasLookAtEnabled();
}

double REIkParametersComponentTaskGetLookAtTarget(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  *(void *)&double result = re::FullBodyIKSolver::taskLookAtTarget(v4, a3).n128_u64[0];
  return result;
}

uint64_t REIkParametersComponentTaskSetLookAtTarget(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v5 = solverAtIndex(a1, a2);
  return re::FullBodyIKSolver::setTaskLookAtTarget(v5, a3, a4);
}

uint64_t REIkParametersComponentTaskGetPositionTargetBlendWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return MEMORY[0x270F1A538](v5);
}

uint64_t REIkParametersComponentTaskSetPositionTargetBlendWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return CoreIKGenericConstraintSetTranslationTargetBlendWeight();
}

uint64_t REIkParametersComopnentTaskGetRotationTargetBlendWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return MEMORY[0x270F1A530](v5);
}

uint64_t REIkParametersComponentTaskSetRotationTargetBlendWeight(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  return CoreIKGenericConstraintSetOrientationTargetBlendWeight();
}

uint64_t REIkParametersComponentTaskGetTargetPosition(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = solverAtIndex(a1, a2);
  uint64_t v5 = MEMORY[0x237DBA340](*(void *)(v4 + 16), a3);
  uint64_t v6 = MEMORY[0x237DBA220](v5);
  return MEMORY[0x270F1A678](v6);
}

uint64_t REIkParametersComponentTaskSetTargetPosition(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v5 = solverAtIndex(a1, a2);
  return re::FullBodyIKSolver::setTaskTargetPosition(v5, a3, a4);
}

double REIkParametersComponentTaskGetTargetRotation(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = (re::FullBodyIKSolver *)solverAtIndex(a1, a2);
  *(void *)&double result = re::FullBodyIKSolver::taskTargetRotation(v4, a3).n128_u64[0];
  return result;
}

uint64_t REIkParametersComponentTaskSetTargetRotation(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v5 = solverAtIndex(a1, a2);
  simd_quatf v6 = (simd_quatf)a4;
  return re::FullBodyIKSolver::setTaskTargetRotation(v5, a3, v6);
}

uint64_t REIkParametersComponentTaskSetTargetParameters(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, float a5, __n128 a6)
{
  uint64_t v8 = solverAtIndex(a1, a2);
  *(float *)&double v9 = a5;
  return re::FullBodyIKSolver::setTaskTargetParameters(v8, a3, a4, v9, a6);
}

uint64_t REIkParametersComponentTaskSetLookAtTargetParameters(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v5 = solverAtIndex(a1, a2);
  MEMORY[0x237DBA340](*(void *)(v5 + 16), a3);
  CoreIKGenericConstraintSetOrientationTargetBlendWeight();
  return re::FullBodyIKSolver::setTaskLookAtTarget(v5, a3, a4);
}

uint64_t REAssetWithMetadataCreate(re *a1, uint64_t a2)
{
  if (a1)
  {
    long long v3 = re::globalAllocators(a1);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 144, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
    *(void *)uint64_t v4 = &unk_26E735048;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
    *(_OWORD *)(v4 + + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
    *(void *)(v4 + 136) = 0;
    simd_quatf v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v4 + 48), 0);
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
    re::DynamicString::setCapacity((void *)(v4 + 80), 0);
    *(_WORD *)(v4 + 112) = 0;
    *(unsigned char *)(v4 + 114) = 0;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 136) = 0;
    *(void *)(v4 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, (uint64_t *)&v10);
    long long v7 = *(_OWORD *)(v4 + 24);
    *(_OWORD *)(v4 + 24) = v10;
    long long v10 = v7;
    uint64_t v8 = *(void *)(v4 + 40);
    *(void *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v11;
    uint64_t v11 = v8;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
    return v4;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "asset != nullptr", "REAssetWithMetadataCreate", 39);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

re::DynamicString *REAssetWithMetadataSetSceneMetadata(re::DynamicString *result, char *__s, char *a3)
{
  uint64_t v4 = (uint64_t)result;
  if (__s)
  {
    simd_quatf v6 = __s;
    size_t v7 = strlen(__s);
    uint64_t result = re::DynamicString::operator=((re::DynamicString *)(v4 + 80), (uint64_t)&v6);
  }
  if (a3)
  {
    size_t v5 = strlen(a3);
    simd_quatf v6 = a3;
    size_t v7 = v5;
    return re::DynamicString::operator=((re::DynamicString *)(v4 + 48), (uint64_t)&v6);
  }
  return result;
}

re::DynamicString *REAssetWithMetadataSetLabel(uint64_t a1, char *__s)
{
  uint64_t v2 = (re::DynamicString *)(a1 + 80);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REAssetWithMetadataSetTreatAsScene(uint64_t result, char a2)
{
  *(unsigned char *)(result + 112) = a2;
  return result;
}

uint64_t REAssetWithMetadataSetCompressionMethod(uint64_t result, char a2)
{
  *(unsigned char *)(result + 113) = a2;
  return result;
}

uint64_t REAssetWithMetadataSetAssetSerializationFormat(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 114)) {
    *(unsigned char *)(result + 114) = 1;
  }
  *(unsigned char *)(result + 115) = a2;
  return result;
}

uint64_t REAssetWithMetadataClearAssetSerializationFormat(uint64_t result)
{
  if (*(unsigned char *)(result + 114)) {
    *(unsigned char *)(result + 114) = 0;
  }
  return result;
}

void REAssetWithMetadataSetConfigurationNames(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)[v3 count];
  if (v13)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i < v13; ++i)
    {
      id v7 = [v3 objectAtIndexedSubscript:i];
      uint64_t v8 = (const char *)[v7 cStringUsingEncoding:4];
      unint64_t v9 = v13;
      if (v13 <= i)
      {
        uint64_t v15 = 0;
        memset(v24, 0, sizeof(v24));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v16 = 136315906;
        int v17 = "operator[]";
        __int16 v18 = 1024;
        int v19 = 468;
        __int16 v20 = 2048;
        unint64_t v21 = i;
        __int16 v22 = 2048;
        unint64_t v23 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      long long v10 = v8;
      size_t v11 = strlen(v8);
      *(void *)&v24[0] = v10;
      *((void *)&v24[0] + 1) = v11;
      re::DynamicString::operator=((re::DynamicString *)(v14 + v5), (uint64_t)v24);

      v5 += 32;
    }
  }
  re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)(a1 + 120), (uint64_t)&v12);
  re::FixedArray<re::DynamicString>::deinit(&v12);
}

uint64_t RERealityFileAssetWriteReportCreate(re *a1)
{
  float32x4_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 104, 8);
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(v2 + 96) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E735090;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  re::DynamicString::setCapacity((void *)(v2 + 24), 0);
  *(void *)(v2 + + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = 0;
  return v2;
}

uint64_t RERealityFileWritingParametersCreate(re *a1)
{
  re::make::shared::object<re::RealityFileWriter::WritingParameters>(a1, &v2);
  return v2;
}

BOOL RERealityFileWritingParametersSetMajorVersion(re *a1, uint64_t a2)
{
  if (a2)
  {
    *((void *)a1 + 3) = a2;
  }
  else
  {
    id v3 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "It's invalid to set the target version to None. Version wasn't set.", v5, 2u);
    }
  }
  return a2 != 0;
}

uint64_t RERealityFileWritingParametersSetRestrictedToSeed(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

uint64_t RERealityFileWritingParametersSetTargetPlatform(uint64_t result, int a2)
{
  if ((a2 - 1) >= 4) {
    int v2 = 0;
  }
  else {
    int v2 = a2;
  }
  *(_DWORD *)(result + 36) = v2;
  return result;
}

uint64_t RERealityFileWritingParametersSetCrossEngineValidationDisablement(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4ArcSharedObject::ArcSharedObject(this, 0) = a2;
  return result;
}

uint64_t RERealityFileWritingParametersSetMakeSnapshotOfDynamicTextures(uint64_t result, char a2)
{
  *(unsigned char *)(result + 41) = a2;
  return result;
}

uint64_t RERealityFileAssetWriteReportGetSerializationString(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = v1 >> 1;
  if ((v1 & 1) == 0) {
    unint64_t v2 = v1 >> 1;
  }
  if (!v2) {
    return 0;
  }
  if (v1) {
    return *(void *)(a1 + 40);
  }
  return a1 + 33;
}

void *RERealityFileAssetWriteReportGetError(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 96);
  if (v1) {
    id v2 = v1;
  }
  return v1;
}

uint64_t RERealityFileAssetWriteReportGetDependenciesCount(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t RERealityFileAssetWriteReportGetDependencyAtIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 72) <= a2)
  {
    memset(v4, 0, sizeof(v4));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v4, (const re::AssetHandle *)(*(void *)(a1 + 88) + 24 * a2));
  uint64_t v2 = *(void *)&v4[0];
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

uint64_t *RERealityFileWriterCreate(re *a1)
{
  unint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 568, 8);
  re::RealityFileWriter::RealityFileWriter((re::RealityFileWriter *)v2);
  re::make::shared::object<re::SceneAssetRemapperImplementation>((re *)&v7);
  uint64_t v3 = v7;
  if (v7)
  {
    uint64_t v4 = (void *)(v7 + 8);
    id v5 = (id)(v7 + 8);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v2 + 51, v3);
  }
  else
  {
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v2 + 51, 0);
  }
  return v2;
}

uint64_t RERealityFileWriterCreateWithParameters(char *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1) {
    a1 = a1 + 8;
  }
  uint64_t v2 = re::globalAllocators((re *)a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 568, 8);
  uint64_t v8 = v1;
  re::RealityFileWriter::RealityFileWriter(v3, &v8);
  if (v1) {

  }
  re::make::shared::object<re::SceneAssetRemapperImplementation>((re *)&v8);
  uint64_t v4 = v8;
  if (v8)
  {
    id v5 = (void *)(v8 + 8);
    id v6 = (id)(v8 + 8);
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v3 + 408), v4);
  }
  else
  {
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v3 + 408), 0);
  }
  return v3;
}

BOOL RERealityFileWriterSetArchiveEnvelopeVersion(uint64_t a1, int a2, CFErrorRef *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v4 = a2 - 1;
  if ((a2 - 1) > 1)
  {
    if (a3) {
      *a3 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], @"RERealityFileWriterErrorDomain", 15, 0);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "%u is not a valid REArchiveEnvelopeVersion enum value.", (uint8_t *)v8, 8u);
    }
  }
  else
  {
    if (a2 == 1) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(a1 + 312) = v5;
  }
  return v4 < 2;
}

uint64_t RERealityFileWriterSetCompressionMethod(uint64_t result, unsigned int a2)
{
  if (a2 > 3) {
    int v2 = 0;
  }
  else {
    int v2 = dword_23436F8A0[(char)a2];
  }
  *(_DWORD *)(result + 312) = v2;
  return result;
}

uint64_t RERealityFileWriterGetCompressionMethod(uint64_t a1, uint64_t a2)
{
  return re::RealityArchiveWriter::getCompressionMethod((re::RealityArchiveWriter *)(a1 + 248), a2);
}

uint64_t RERealityFileWriterGetDefaultVersion()
{
  return 2;
}

uint64_t RERealityFileWriterGetMaxVersion()
{
  return 13;
}

void RERealityFileWriterAddSceneRemappingCallback(uint64_t a1, void *a2)
{
  void v9[5] = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 408);
  if (v4) {
    id v5 = (id)(v4 + 8);
  }
  id v6 = _Block_copy(v3);

  uint64_t v8 = re::globalAllocators(v7)[2];
  v9[0] = &unk_26E734F10;
  v9[1] = v6;
  uint64_t v9[3] = v8;
  BOOL v9[4] = v9;
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::add((_anonymous_namespace_ *)(v4 + 24), (uint64_t)v9);
  re::FunctionBase<24ul,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::destroyCallable((uint64_t)v9);
  if (v4) {
}
  }

uint64_t (***RERealityFileWriterAddPathRemappingCustomizationCallback(uint64_t a1, void *aBlock))(void)
{
  void v6[5] = *MEMORY[0x263EF8340];
  id v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E734F78;
  v6[1] = v3;
  long long v6[3] = v4;
  void v6[4] = v6;
  re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::add((_anonymous_namespace_ *)(a1 + 328), (uint64_t)v6);
  return re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable((uint64_t)v6);
}

uint64_t (***RERealityFileWriterAddRemappingCustomizationCallback(uint64_t a1, void *aBlock))(void)
{
  void v6[5] = *MEMORY[0x263EF8340];
  id v3 = (re *)_Block_copy(aBlock);
  uint64_t v4 = re::globalAllocators(v3)[2];
  v6[0] = &unk_26E734FE0;
  v6[1] = v3;
  long long v6[3] = v4;
  void v6[4] = v6;
  re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::add((_anonymous_namespace_ *)(a1 + 368), (uint64_t)v6);
  return re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable((uint64_t)v6);
}

void RERealityFileWriterSetMetadataString(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  *(void *)&v6.char var0 = 0;
  v6.char var1 = "";
  re::RealityFileWriter::setOrClearMetadataString(a1, &v6, a3);
  re::StringID::destroyString((re::StringID *)&v6);
}

void RERealityFileWriterClearMetadata(_anonymous_namespace_ *a1, const char *a2)
{
  v4[0] = 0;
  v4[1] = "";
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)a1 + 464, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

CFStringRef RERealityFileWriterCopyMetadataString(_anonymous_namespace_ *a1, const char *a2)
{
  v7[0] = 0;
  v7[1] = "";
  re::RealityFileWriter::getMetadataString((uint64_t)a1, v7, v8);
  re::StringID::destroyString((re::StringID *)v7);
  if (!v8[0]) {
    return 0;
  }
  if (v10) {
    uint64_t v4 = *(const char **)&v11[7];
  }
  else {
    uint64_t v4 = v11;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
  if (v8[0] && v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v5;
}

BOOL RERealityFileWriterOpen(_anonymous_namespace_ *a1, const char *a2, void *a3)
{
  re::RealityFileWriter::open(a1, (const re::DynamicString *)&v9, (uint64_t)v11);
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  int v6 = v11[0];
  if (a3 && !v11[0])
  {
    id v7 = v12;
    *a3 = v7;
    if (v7) {
      CFRetain(v7);
    }
    int v6 = v11[0];
  }
  if (!v6) {

  }
  return v6 != 0;
}

BOOL RERealityFileWriterIsAssetWritten(re::RealityFileWriter *a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v5);
  isAssetWritteuint64_t n = re::RealityFileWriter::isAssetWritten(a1, (const re::AssetHandle *)v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return isAssetWritten;
}

uint64_t RERealityFileWriterWriteAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(a2 + 24));
  re::DynamicString::DynamicString((re::DynamicString *)v11, (const re::DynamicString *)(a2 + 48));
  re::DynamicString::DynamicString((re::DynamicString *)v12, (const re::DynamicString *)(a2 + 80));
  __int16 v13 = *(_WORD *)(a2 + 112);
  if (*(unsigned char *)(a2 + 114)) {
    char v15 = *(unsigned char *)(a2 + 115);
  }
  re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v16, a2 + 120);
  uint64_t v9 = (re::RealityFileWriter::AssetWriteResult *)a3;
  if (a3) {
    id v6 = (id)(a3 + 8);
  }
  uint64_t v7 = re::RealityFileWriter::writeAsset(a1, (re::AssetHandle *)v10, &v9);
  if (v9)
  {

    uint64_t v9 = 0;
  }
  re::FixedArray<re::DynamicString>::deinit(v16);
  if (v12[0])
  {
    if (v12[1]) {
      (*(void (**)(void))(*(void *)v12[0] + 40))();
    }
    memset(v12, 0, sizeof(v12));
  }
  if (v11[0])
  {
    if (v11[1]) {
      (*(void (**)(void))(*(void *)v11[0] + 40))();
    }
    memset(v11, 0, sizeof(v11));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  return v7;
}

uint64_t RERealityFileWriterWriteDataEntry(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t a4)
{
  size_t v11 = (re::RealityFileWriter::AssetWriteResult *)a4;
  if (a4) {
    id v8 = (id)(a4 + 8);
  }
  uint64_t v9 = re::RealityFileWriter::writeDataEntry(a1, a2, &v12, &v11);
  if (v11)
  {

    size_t v11 = 0;
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  return v9;
}

uint64_t RERealityFileWriterWriteAllDependencies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v8 = (re::RealityFileWriter::AssetWriteResult *)a3;
  if (a3) {
    id v5 = (id)(a3 + 8);
  }
  uint64_t v6 = re::RealityFileWriter::writeAllDependencies(a1, a2, &v8);
  if (v8) {

  }
  return v6;
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies(_anonymous_namespace_ *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v29 = a3;
  long long v30 = 0;
  if (a3)
  {
    if (a3 < 0x222222222222223)
    {
      long long v30 = v11;
      if (!v11) {
        goto LABEL_31;
      }
      uint64_t v13 = (uint64_t)v11;
      uint64_t v14 = v11;
      unint64_t v15 = a3 - 1;
      if (a3 != 1)
      {
        uint64_t v14 = v11;
        do
        {
          *((void *)v14 + 6) = 0;
          *((_OWORD *)v14 + 1) = 0u;
          *((_OWORD *)v14 + 2) = 0u;
          *(_OWORD *)uint64_t v14 = 0u;
          int v16 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v14 + 3, 0);
          *(_OWORD *)((char *)v14 + + 56) = 0u;
          int v17 = (char *)v14 + 56;
          *((_OWORD *)v17 + 1) = 0u;
          size_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v17, 0);
          *((_WORD *)v17 + 16) = 0;
          v17[34] = 0;
          *((void *)v17 + 6) = 0;
          *((void *)v17 + 7) = 0;
          *((void *)v17 + 5) = 0;
          uint64_t v14 = (_anonymous_namespace_ *)(v17 + 64);
          --v15;
        }
        while (v15);
      }
      *((void *)v14 + 6) = 0;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      __int16 v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v14 + 3, 0);
      *(_OWORD *)((char *)v14 + + 56) = 0u;
      int v19 = (char *)v14 + 56;
      *((_OWORD *)v19 + 1) = 0u;
      re::DynamicString::setCapacity(v19, 0);
      unint64_t v20 = 0;
      *((_WORD *)v19 + 16) = 0;
      v19[34] = 0;
      *((void *)v19 + 6) = 0;
      *((void *)v19 + 7) = 0;
      *((void *)v19 + 5) = 0;
      while (v20 < a3)
      {
        uint64_t v21 = *(void *)(a2 + 8 * v20);
        re::AssetHandle::operator=(v13, (uint64_t *)(v21 + 24));
        re::DynamicString::operator=((re::DynamicString *)(v13 + 24), (re::DynamicString *)(v21 + 48));
        re::DynamicString::operator=((re::DynamicString *)(v13 + 56), (re::DynamicString *)(v21 + 80));
        *(_WORD *)(v13 + 88) = *(_WORD *)(v21 + 112);
        if (*(unsigned char *)(v13 + 90) || *(unsigned char *)(v21 + 114))
        {
          if (!*(unsigned char *)(v13 + 90) || *(unsigned char *)(v21 + 114))
          {
            if (!*(unsigned char *)(v13 + 90) && *(unsigned char *)(v21 + 114)) {
              *(unsigned char *)(v13 + 9ArcSharedObject::ArcSharedObject(this, 0) = 1;
            }
            *(unsigned char *)(v13 + 91) = *(unsigned char *)(v21 + 115);
          }
          else
          {
            *(unsigned char *)(v13 + 9ArcSharedObject::ArcSharedObject(this, 0) = 0;
          }
        }
        re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)(v13 + 96), v21 + 120);
        ++v20;
        v13 += 120;
        if (a3 == v20) {
          goto LABEL_19;
        }
      }
      uint64_t v31 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v32 = 136315906;
      StringID v33 = "operator[]";
      __int16 v34 = 1024;
      int v35 = 468;
      __int16 v36 = 2048;
      unint64_t v37 = v20;
      __int16 v38 = 2048;
      unint64_t v39 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 120, a3);
    _os_crash();
    __break(1u);
LABEL_31:
    re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_19:
  long long v27 = (re::RealityFileWriter::AssetWriteResult *)a5;
  if (a5) {
    id v22 = (id)(a5 + 8);
  }
  uint64_t v23 = re::RealityFileWriter::writeAssetArrayAndDependencies((uint64_t)a1, (uint64_t)&v28, a4, &v27);
  if (v27)
  {

    long long v27 = 0;
  }
  if (v28 && v29)
  {
    long long v24 = v30;
    uint64_t v25 = 120 * v29;
    do
    {
      re::FixedArray<re::DynamicString>::deinit((void *)v24 + 12);
      re::DynamicString::deinit((_anonymous_namespace_ *)((char *)v24 + 56));
      re::DynamicString::deinit((_anonymous_namespace_ *)((char *)v24 + 24));
      re::AssetHandle::~AssetHandle(v24);
      long long v24 = (_anonymous_namespace_ *)((char *)v24 + 120);
      v25 -= 120;
    }
    while (v25);
    (*(void (**)(uint64_t *, _anonymous_namespace_ *))(*v28 + 40))(v28, v30);
  }
  return v23;
}

BOOL RERealityFileWriterEditAssetLabel(re::RealityFileWriter *a1, uint64_t a2, const char *a3, void *a4)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v15);
  re::RealityFileWriter::editAssetLabel(a1, (const re::AssetHandle *)v15, (const re::DynamicString *)&v11, (uint64_t)v13);
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  int v8 = v13[0];
  if (a4 && !v13[0])
  {
    id v9 = v14;
    *a4 = v9;
    if (v9) {
      CFRetain(v9);
    }
    int v8 = v13[0];
  }
  if (!v8) {

  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  return v8 != 0;
}

uint64_t RERealityFileWriterCertifyFreeOfChangeSceneActions(uint64_t result, char a2)
{
  *(unsigned char *)(result + 512) = a2;
  return result;
}

void RERealityFileWriterSetConfigurationSetNames(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)[v3 count];
  if (v13)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i < v13; ++i)
    {
      id v7 = [v3 objectAtIndexedSubscript:i];
      int v8 = (const char *)[v7 cStringUsingEncoding:4];
      unint64_t v9 = v13;
      if (v13 <= i)
      {
        uint64_t v15 = 0;
        memset(v24, 0, sizeof(v24));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v16 = 136315906;
        int v17 = "operator[]";
        __int16 v18 = 1024;
        int v19 = 468;
        __int16 v20 = 2048;
        unint64_t v21 = i;
        __int16 v22 = 2048;
        unint64_t v23 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = v8;
      size_t v11 = strlen(v8);
      *(void *)&v24[0] = v10;
      *((void *)&v24[0] + 1) = v11;
      re::DynamicString::operator=((re::DynamicString *)(v14 + v5), (uint64_t)v24);

      v5 += 32;
    }
  }
  re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)(a1 + 520), (uint64_t)&v12);
  re::FixedArray<re::DynamicString>::deinit(&v12);
}

void RERealityFileWriterSetDefaultConfigurationNames(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)[v3 count];
  if (v13)
  {
    uint64_t v5 = 0;
    for (unint64_t i = 0; i < v13; ++i)
    {
      id v7 = [v3 objectAtIndexedSubscript:i];
      int v8 = (const char *)[v7 cStringUsingEncoding:4];
      unint64_t v9 = v13;
      if (v13 <= i)
      {
        uint64_t v15 = 0;
        memset(v24, 0, sizeof(v24));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v16 = 136315906;
        int v17 = "operator[]";
        __int16 v18 = 1024;
        int v19 = 468;
        __int16 v20 = 2048;
        unint64_t v21 = i;
        __int16 v22 = 2048;
        unint64_t v23 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = v8;
      size_t v11 = strlen(v8);
      *(void *)&v24[0] = v10;
      *((void *)&v24[0] + 1) = v11;
      re::DynamicString::operator=((re::DynamicString *)(v14 + v5), (uint64_t)v24);

      v5 += 32;
    }
  }
  re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)(a1 + 544), (uint64_t)&v12);
  re::FixedArray<re::DynamicString>::deinit(&v12);
}

BOOL RERealityFileWriterClose(re::RealityFileWriter *a1, void *a2)
{
  re::RealityFileWriter::close(a1, (uint64_t)v6);
  int v3 = v6[0];
  if (a2 && !v6[0])
  {
    id v4 = v7;
    *a2 = v4;
    if (v4) {
      CFRetain(v4);
    }
    int v3 = v6[0];
  }
  if (!v3) {

  }
  return v3 != 0;
}

uint64_t REGetMaxRealityFileConfigurationSceneCount()
{
  return 0x40000;
}

uint64_t re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (v3)
  {
    uint64_t v5 = v3;
    re::ObjCObject::operator=((void **)(a2 + 8), v3);
    CFRelease(v5);
  }
  *(unsigned char *)a2 = v4 & 1;
}

void *re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734F10;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734F10;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERealityFileWriterAddSceneRemappingCallback::$_0,re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

BOOL re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (*a4)
  {
    int v8 = [MEMORY[0x263EFF980] array];
    unint64_t v9 = [MEMORY[0x263EFF980] array];
    if (*(void *)(a3 + 48)) {
      uint64_t v10 = *(void *)(a3 + 56);
    }
    else {
      uint64_t v10 = a3 + 49;
    }
    (*(void (**)(void, uint64_t, void *, void *))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), v10, v8, v9);
    unint64_t v11 = [v8 count];
    if (v11 == [v9 count])
    {
      if (v11)
      {
        BOOL v12 = 0;
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = [v8 objectAtIndex:v13];
          if (!v14) {
            break;
          }
          uint64_t v15 = (void *)v14;
          uint64_t v16 = [v9 objectAtIndex:v13];
          if (!v16)
          {

            break;
          }
          int v17 = (void *)v16;
          id v18 = v15;
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 8))(v22, v4, [v18 cStringUsingEncoding:4]);
          id v19 = v17;
          unint64_t v21 = (const char *)[v19 cStringUsingEncoding:4];
          re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addInternal<char const*>(a2, (re::AssetHandle *)v22, &v21);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);

          BOOL v12 = ++v13 >= v11;
          if (v11 == v13) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        BOOL v12 = 1;
      }
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  else
  {
    return 0;
  }
  return v12;
}

void *re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734F78;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734F78;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERealityFileWriterAddPathRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::size()
{
  return 16;
}

re::DynamicString *re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addInternal<char const*>(uint64_t a1, re::AssetHandle *a2, const char **a3)
{
  unint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 664);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v9 = v7 ^ (v8 >> 31) ^ v8;
  if (!*(void *)a1)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    goto LABEL_11;
  }
  unint64_t v10 = v9 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_11:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = v9 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 72 * v13 + 8);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 72 * v13 + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 72 * v13 + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 72 * v13 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v10);
    *(void *)(*(void *)(a1 + 16) + 72 * v13) = v9;
    int v17 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 72 * v13 + 16), a2);
    id v18 = (re::DynamicString *)(*(void *)(a1 + 16) + 72 * v13 + 40);
    id v19 = *a3;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1ArcSharedObject::ArcSharedObject(this, 0) = v13;
    ++*(_DWORD *)(a1 + 28);
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (*(void *)(v12 + 72 * v11 + 24) != v6)
  {
    uint64_t v11 = *(_DWORD *)(v12 + 72 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  uint64_t v21 = 9 * v11;
  re::DynamicString::deinit((re::DynamicString *)(v12 + 72 * v11 + 40));
  __int16 v22 = (re::DynamicString *)(*(void *)(a1 + 16) + 8 * v21 + 40);
  unint64_t v23 = *a3;
LABEL_17:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

BOOL re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    unint64_t v6 = [MEMORY[0x263EFF980] array];
    uint64_t v7 = [MEMORY[0x263EFF980] array];
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
    unint64_t v8 = [v6 count];
    if (v8 == [v7 count])
    {
      if (v8)
      {
        BOOL v9 = 0;
        uint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = [v6 objectAtIndex:v10];
          if (!v11) {
            break;
          }
          uint64_t v12 = (void *)v11;
          uint64_t v13 = [v7 objectAtIndex:v10];
          if (!v13)
          {

            break;
          }
          int v14 = (void *)v13;
          id v15 = v12;
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v3 + 8))(v19, v3, [v15 cStringUsingEncoding:4]);
          id v16 = v14;
          id v18 = (const char *)[v16 cStringUsingEncoding:4];
          re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addInternal<char const*>(a2, (re::AssetHandle *)v19, &v18);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);

          BOOL v9 = ++v10 >= v8;
          if (v8 == v10) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        BOOL v9 = 1;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    return 0;
  }
  return v9;
}

void *re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E734FE0;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *a2 = &unk_26E734FE0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<RERealityFileWriterAddRemappingCustomizationCallback::$_0,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::size()
{
  return 16;
}

void *re::Shareable<re::RealityFileWriter::AssetHandleWithMetadata>::~Shareable(void *a1)
{
  *a1 = &unk_26E735048;
  re::FixedArray<re::DynamicString>::deinit(a1 + 15);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 10));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 6));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::RealityFileWriter::AssetHandleWithMetadata>::~Shareable(void *a1)
{
  *a1 = &unk_26E735048;
  re::FixedArray<re::DynamicString>::deinit(a1 + 15);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 10));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 6));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::RealityFileWriter::AssetWriteResult::~AssetWriteResult(id *this)
{
  *this = &unk_26E735090;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 7));
  re::DynamicString::deinit((re::DynamicString *)(this + 3));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26E735090;

  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 7));
  re::DynamicString::deinit((re::DynamicString *)(this + 3));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::make::shared::object<re::SceneAssetRemapperImplementation>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(void *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6D3FC0;
  *(void *)(v3 + + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)a1 = v3;
}

void *REAcousticMeshComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

BOOL REAcousticMeshComponentAreAssetsLoaded(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    return 0;
  }
  unsigned int v2 = atomic_load((unsigned int *)(v1 + 704));
  return v2 == 2;
}

void REAcousticMeshComponentSetMeshAsset(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, &v8);
  if (v9)
  {
    uint64_t v4 = *(uint64_t **)(v9 + 264);
    uint64_t v5 = re::AcousticMeshAsset::assetType(v3);
    if (v4 == v5)
    {
      re::AssetHandle::operator=(a1 + 32, &v8);
      re::ecs2::Component::enqueueMarkDirty(a1);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = re::AcousticMeshAsset::assetType(v3);
  }
  unint64_t v6 = *re::audioLogObjects((re *)v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Asset is not a AcousticMeshAsset.", v7, 2u);
  }
LABEL_7:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
}

uint64_t REAcousticMeshComponentGetMeshAsset(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t REAcousticMeshComponentLoadAssetsSync(uint64_t a1)
{
  re::AssetHandle::loadNow(*(void *)(a1 + 40), 0);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAcousticMeshComponentAddAbsorptionCoefficients(unsigned char *a1, void *a2, uint64_t a3, char *__src, char *a5)
{
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  memset(v32, 0, sizeof(v32));
  int v33 = 0;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  re::DynamicArray<float>::copy(v32, 0, __src, a3);
  re::DynamicArray<float>::copy(v29, 0, a5, a3);
  uint64_t v9 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::DynamicArray<float>::DynamicArray((uint64_t)v23, v29);
  re::DynamicArray<float>::DynamicArray((uint64_t)v26, v32);
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)&v20);
  re::DynamicArray<float>::DynamicArray((uint64_t)v14, v23);
  re::DynamicArray<float>::DynamicArray((uint64_t)v17, v26);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::add((_anonymous_namespace_ *)(a1 + 168), (re::DynamicString *)v13);
  re::DynamicArray<re::AcousticAbsorptionMaterial>::add((_anonymous_namespace_ *)(a1 + 208), (re::DynamicString *)v13);
  a1[408] = 1;
  if (v17[0])
  {
    if (v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    uint64_t v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (v14[0])
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    uint64_t v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (*(void *)&v13[0])
  {
    if (BYTE8(v13[0])) {
      (*(void (**)(void))(**(void **)&v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (v26[0])
  {
    if (v28) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26[0] + 40))(v26[0], v28, v10, v11);
    }
    uint64_t v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v23[0])
  {
    if (v25) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23[0] + 40))(v23[0], v25, v10, v11);
    }
    uint64_t v25 = 0;
    memset(v23, 0, sizeof(v23));
    ++v24;
  }
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, v22, v10, v11);
  }
  if (v29[0] && v31) {
    (*(void (**)(uint64_t))(*(void *)v29[0] + 40))(v29[0]);
  }
  uint64_t result = v32[0];
  if (v32[0])
  {
    if (v34) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v32[0] + 40))(v32[0]);
    }
  }
  return result;
}

uint64_t REAcousticMeshComponentAddScatteringCoefficients(unsigned char *a1, void *a2, uint64_t a3, char *__src, char *a5)
{
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  memset(v32, 0, sizeof(v32));
  int v33 = 0;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  re::DynamicArray<float>::copy(v32, 0, __src, a3);
  re::DynamicArray<float>::copy(v29, 0, a5, a3);
  uint64_t v9 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::DynamicArray<float>::DynamicArray((uint64_t)v23, v29);
  re::DynamicArray<float>::DynamicArray((uint64_t)v26, v32);
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)&v20);
  re::DynamicArray<float>::DynamicArray((uint64_t)v14, v23);
  re::DynamicArray<float>::DynamicArray((uint64_t)v17, v26);
  re::DynamicArray<re::AcousticScatteringMaterial>::add((_anonymous_namespace_ *)(a1 + 248), (re::DynamicString *)v13);
  re::DynamicArray<re::AcousticScatteringMaterial>::add((_anonymous_namespace_ *)(a1 + 288), (re::DynamicString *)v13);
  a1[408] = 1;
  if (v17[0])
  {
    if (v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    uint64_t v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (v14[0])
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    uint64_t v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (*(void *)&v13[0])
  {
    if (BYTE8(v13[0])) {
      (*(void (**)(void))(**(void **)&v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (v26[0])
  {
    if (v28) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26[0] + 40))(v26[0], v28, v10, v11);
    }
    uint64_t v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v23[0])
  {
    if (v25) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23[0] + 40))(v23[0], v25, v10, v11);
    }
    uint64_t v25 = 0;
    memset(v23, 0, sizeof(v23));
    ++v24;
  }
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, v22, v10, v11);
  }
  if (v29[0] && v31) {
    (*(void (**)(uint64_t))(*(void *)v29[0] + 40))(v29[0]);
  }
  uint64_t result = v32[0];
  if (v32[0])
  {
    if (v34) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v32[0] + 40))(v32[0]);
    }
  }
  return result;
}

uint64_t REAcousticMeshComponentAddSoundReductionIndices(unsigned char *a1, void *a2, uint64_t a3, char *__src, char *a5)
{
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  memset(v32, 0, sizeof(v32));
  int v33 = 0;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  re::DynamicArray<float>::copy(v32, 0, __src, a3);
  re::DynamicArray<float>::copy(v29, 0, a5, a3);
  uint64_t v9 = (_anonymous_namespace_ *)[a2 UTF8String];
  re::DynamicArray<float>::DynamicArray((uint64_t)v23, v29);
  re::DynamicArray<float>::DynamicArray((uint64_t)v26, v32);
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)&v20);
  re::DynamicArray<float>::DynamicArray((uint64_t)v14, v23);
  re::DynamicArray<float>::DynamicArray((uint64_t)v17, v26);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::add((_anonymous_namespace_ *)(a1 + 328), (re::DynamicString *)v13);
  re::DynamicArray<re::AcousticSoundReductionMaterial>::add((_anonymous_namespace_ *)(a1 + 368), (re::DynamicString *)v13);
  a1[408] = 1;
  if (v17[0])
  {
    if (v19) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    uint64_t v19 = 0;
    memset(v17, 0, sizeof(v17));
    ++v18;
  }
  if (v14[0])
  {
    if (v16) {
      (*(void (**)(void))(*(void *)v14[0] + 40))();
    }
    uint64_t v16 = 0;
    memset(v14, 0, sizeof(v14));
    ++v15;
  }
  if (*(void *)&v13[0])
  {
    if (BYTE8(v13[0])) {
      (*(void (**)(void))(**(void **)&v13[0] + 40))();
    }
    memset(v13, 0, sizeof(v13));
  }
  re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
  if (v26[0])
  {
    if (v28) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26[0] + 40))(v26[0], v28, v10, v11);
    }
    uint64_t v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v23[0])
  {
    if (v25) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23[0] + 40))(v23[0], v25, v10, v11);
    }
    uint64_t v25 = 0;
    memset(v23, 0, sizeof(v23));
    ++v24;
  }
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, v22, v10, v11);
  }
  if (v29[0] && v31) {
    (*(void (**)(uint64_t))(*(void *)v29[0] + 40))(v29[0]);
  }
  uint64_t result = v32[0];
  if (v32[0])
  {
    if (v34) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v32[0] + 40))(v32[0]);
    }
  }
  return result;
}

__CFArray *convertDynamicArrayFloatToCFArray(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 16), MEMORY[0x263EFFF70]);
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      CFNumberRef v6 = CFNumberCreate(v2, kCFNumberFloatType, (const void *)(*(void *)(a1 + 32) + v4));
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      ++v5;
      v4 += 4;
    }
    while (*(void *)(a1 + 16) > v5);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllAbsorptionCoefficients(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 184), MEMORY[0x263EFFF70]);
  if (*(void *)(a1 + 184))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 72;
    do
    {
      unint64_t v5 = convertDynamicArrayFloatToCFArray(*(void *)(a1 + 200) + v4);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      ++v3;
      v4 += 112;
    }
    while (*(void *)(a1 + 184) > v3);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllScatteringCoefficients(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 264), MEMORY[0x263EFFF70]);
  if (*(void *)(a1 + 264))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 72;
    do
    {
      unint64_t v5 = convertDynamicArrayFloatToCFArray(*(void *)(a1 + 280) + v4);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      ++v3;
      v4 += 112;
    }
    while (*(void *)(a1 + 264) > v3);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllSoundReductionIndices(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 344), MEMORY[0x263EFFF70]);
  if (*(void *)(a1 + 344))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 72;
    do
    {
      unint64_t v5 = convertDynamicArrayFloatToCFArray(*(void *)(a1 + 360) + v4);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      ++v3;
      v4 += 112;
    }
    while (*(void *)(a1 + 344) > v3);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllAbsorptionFrequencies(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 184), MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void *)(a1 + 184);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = *(void *)(a1 + 200) + 32;
    do
    {
      CFNumberRef v6 = convertDynamicArrayFloatToCFArray(v5);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      v5 += 112;
      v4 -= 112;
    }
    while (v4);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllScatteringFrequencies(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 264), MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = *(void *)(a1 + 280) + 32;
    do
    {
      CFNumberRef v6 = convertDynamicArrayFloatToCFArray(v5);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      v5 += 112;
      v4 -= 112;
    }
    while (v4);
  }
  return Mutable;
}

__CFArray *REAcousticMeshComponentCopyAllSoundReductionFrequencies(uint64_t a1)
{
  uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], *(void *)(a1 + 344), MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = *(void *)(a1 + 360) + 32;
    do
    {
      CFNumberRef v6 = convertDynamicArrayFloatToCFArray(v5);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      v5 += 112;
      v4 -= 112;
    }
    while (v4);
  }
  return Mutable;
}

uint64_t REAcousticMeshComponentCopyAllAbsorptionIdentifiers(uint64_t a1)
{
  CFAllocatorRef v2 = [MEMORY[0x263EFF980] arrayWithCapacity:*(void *)(a1 + 184)];
  uint64_t v3 = *(void *)(a1 + 184);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = (char **)(*(void *)(a1 + 200) + 16);
    do
    {
      if (*(unsigned char *)(v5 - 1)) {
        CFNumberRef v6 = *v5;
      }
      else {
        CFNumberRef v6 = (char *)v5 - 7;
      }
      uint64_t v7 = [NSString stringWithUTF8String:v6];
      [v2 addObject:v7];

      v5 += 14;
      v4 -= 112;
    }
    while (v4);
  }
  uint64_t v8 = [v2 copy];

  return v8;
}

uint64_t REAcousticMeshComponentCopyAllScatteringIdentifiers(uint64_t a1)
{
  CFAllocatorRef v2 = [MEMORY[0x263EFF980] arrayWithCapacity:*(void *)(a1 + 264)];
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = (char **)(*(void *)(a1 + 280) + 16);
    do
    {
      if (*(unsigned char *)(v5 - 1)) {
        CFNumberRef v6 = *v5;
      }
      else {
        CFNumberRef v6 = (char *)v5 - 7;
      }
      uint64_t v7 = [NSString stringWithUTF8String:v6];
      [v2 addObject:v7];

      v5 += 14;
      v4 -= 112;
    }
    while (v4);
  }
  uint64_t v8 = [v2 copy];

  return v8;
}

uint64_t REAcousticMeshComponentCopyAllSoundReductionIdentifiers(uint64_t a1)
{
  CFAllocatorRef v2 = [MEMORY[0x263EFF980] arrayWithCapacity:*(void *)(a1 + 344)];
  uint64_t v3 = *(void *)(a1 + 344);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    uint64_t v5 = (char **)(*(void *)(a1 + 360) + 16);
    do
    {
      if (*(unsigned char *)(v5 - 1)) {
        CFNumberRef v6 = *v5;
      }
      else {
        CFNumberRef v6 = (char *)v5 - 7;
      }
      uint64_t v7 = [NSString stringWithUTF8String:v6];
      [v2 addObject:v7];

      v5 += 14;
      v4 -= 112;
    }
    while (v4);
  }
  uint64_t v8 = [v2 copy];

  return v8;
}

__CFArray *REAcousticMeshComponentCopyLastAddedAbsorptionCoefficients(uint64_t a1)
{
  return convertDynamicArrayFloatToCFArray(*(void *)(a1 + 200) + 112 * *(void *)(a1 + 184) - 40);
}

__CFArray *REAcousticMeshComponentCopyLastAddedScatteringCoefficients(uint64_t a1)
{
  return convertDynamicArrayFloatToCFArray(*(void *)(a1 + 280) + 112 * *(void *)(a1 + 264) - 40);
}

__CFArray *REAcousticMeshComponentCopyLastAddedSoundReductionIndices(uint64_t a1)
{
  return convertDynamicArrayFloatToCFArray(*(void *)(a1 + 360) + 112 * *(void *)(a1 + 344) - 40);
}

uint64_t REAcousticMeshComponentClearAllMaterials(re::ecs2::AcousticMeshComponent *a1)
{
  re::ecs2::AcousticMeshComponent::clearAllMeshMaterials(a1);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAcousticMeshComponentAdjustDryWet(re::ecs2::AcousticMeshComponent *a1, float a2)
{
  re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsWetDry(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAcousticMeshComponentAdjustSpecDiffuse(re::ecs2::AcousticMeshComponent *a1, float a2)
{
  re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsSpecDiffuse(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAcousticMeshComponentAdjustDullBright(uint64_t a1, float a2)
{
  re::ecs2::AcousticMeshComponent::adjustAcousticMaterialsDullBright(a1, a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REAcousticMeshComponentResetAllMaterials(re::ecs2::AcousticMeshComponent *a1)
{
  re::ecs2::AcousticMeshComponent::resetAllAcousticMaterials(a1);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

uint64_t REAcousticMeshComponentSetARMesh(uint64_t a1, void *a2)
{
  uint64_t v3 = (re::ecs2::EntityComponentCollection *)(*(void *)(a1 + 16) + 32);
  uint64_t v4 = (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  id v5 = a2;
  uint64_t v6 = re::ecs2::EntityComponentCollection::get(v3, v4);
  if (v6) {
    BOOL v8 = (*(unsigned char *)(v6 + 42) & 1) == 0 || *(unsigned char *)(v6 + 41) != 1;
  }
  else {
    BOOL v8 = 1;
  }
  id v10 = v5;

  *(unsigned char *)(a1 + 161) = 1;
  re::ObjCObject::operator=((id *)(a1 + 80), &v10);
  *(unsigned char *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = v8;
  *(_WORD *)(a1 + 88) = 0;

  return re::ecs2::Component::enqueueMarkDirty(a1);
}

void *REAcousticMeshComponentGetARMesh(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (void *)a1[10];
    if (v2) {
      a1 = v2;
    }
    else {
      a1 = 0;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t REAcousticMeshComponentSetLastUpdateTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 416) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REAssetDescriptorCreate(re *a1)
{
  re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>>(a1, &v4);
  size_t v2 = strlen((const char *)a1);
  v5[0] = a1;
  v5[1] = v2;
  re::DynamicString::operator=((re::DynamicString *)(v4 + 24), (uint64_t)v5);
  return v4;
}

re::DynamicString *REAssetDescriptorSetSchemeName(uint64_t a1, char *__s)
{
  size_t v2 = (re::DynamicString *)(a1 + 24);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

void *REAssetDescriptorSetData(uint64_t a1, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  id v5 = (void *)(a1 + 56);
  re::DynamicArray<BOOL>::resize((uint64_t)v5, Length);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  return re::DynamicArray<REFrameAnalysisBottleneck>::copy(v5, 0, BytePtr, Length);
}

re::DynamicString *REAssetDescriptorSetAssetType(uint64_t a1, char *__s)
{
  size_t v2 = (re::DynamicString *)(a1 + 136);
  v4[0] = __s;
  v4[1] = strlen(__s);
  return re::DynamicString::operator=(v2, (uint64_t)v4);
}

uint64_t REAssetDescriptorGetSchemeName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return *(void *)(a1 + 40);
  }
  else {
    return a1 + 33;
  }
}

CFDataRef REAssetDescriptorCopyData(uint64_t a1)
{
  return CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *(const UInt8 **)(a1 + 88), *(void *)(a1 + 72));
}

uint64_t REAssetDescriptorGetAssetType(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    return *(void *)(a1 + 152);
  }
  else {
    return a1 + 145;
  }
}

const void *REAssetManagerCopyRealityFileDescriptorSource(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 33;
  if (*(void *)(a2 + 32)) {
    id v5 = *(const char **)(a2 + 40);
  }
  else {
    id v5 = (const char *)(a2 + 33);
  }
  if (!strcmp(v5, "RealityFileAsset"))
  {
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(a1 + 1128), v5);
    if (!ProviderForScheme)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(a2 + 32)) {
          uint64_t v4 = *(void *)(a2 + 40);
        }
        *(_DWORD *)StringID buf = 136315138;
        uint64_t v19 = v4;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Could not find AssetProvider registered for scheme %s.", buf, 0xCu);
      }

      return 0;
    }
    (*(void (**)(uint8_t *__return_ptr))(*(void *)ProviderForScheme + 64))(buf);
    if (buf[0])
    {
      LOBYTE(v15) = BYTE4(v19);
      if (BYTE4(v19))
      {
        re::DynamicString::DynamicString((re::DynamicString *)((char *)&v15 + 8), (const re::DynamicString *)&v20);
        if (v16) {
          id v10 = *(unsigned char **)&v17[7];
        }
        else {
          id v10 = v17;
        }
        uint64_t v7 = (const void *)objc_msgSend(NSString, "stringWithUTF8String:", v10, (void)v15);
        CFRetain(v7);
        if (_BYTE)v15 && *((void *)&v15 + 1) && (v16) {
          (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
        }
LABEL_31:
        if (buf[0])
        {
          if (!BYTE4(v19)) {
            return v7;
          }
          uint64_t v13 = (re::DynamicString *)&v20;
        }
        else
        {
          uint64_t v13 = (re::DynamicString *)((char *)&v19 + 4);
        }
        re::DynamicString::deinit(v13);
        return v7;
      }
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v12 = (id)CoreRELog::log;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (v20) {
          int v14 = *(unsigned char **)&v21[7];
        }
        else {
          int v14 = v21;
        }
        LODWORD(v15) = 136315138;
        *(void *)((char *)&v15 + 4) = v14;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Failed to get source string from load descriptor with error: %s", (uint8_t *)&v15, 0xCu);
      }
    }
    uint64_t v7 = 0;
    goto LABEL_31;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)StringID buf = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Only RealityFileAssetLoadDescriptor is supported for REAssetManagerCopyRealityFileDescriptorSource.", buf, 2u);
  }

  return 0;
}

const void *REFrameworkAssetDescriptorGetBundleId(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "Framework");
  if (v3) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v11, 0);
  *((void *)&v15 + 1) = 0;
  long long v16 = 0uLL;
  re::DynamicString::setCapacity(&v15, 0);
  uint64_t v7 = re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v11, 0);
  if (v7)
  {
    if (v12) {
      BOOL v8 = v13;
    }
    else {
      BOOL v8 = (char *)&v12 + 1;
    }
    uint64_t v4 = (const void *)[NSString stringWithUTF8String:v8];
    CFRetain(v4);
  }
  else
  {
    uint64_t v9 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10[0] = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to deserialize Framework Asset parameters", (uint8_t *)v10, 2u);
    }
    uint64_t v4 = 0;
  }
  if ((void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = 0u;
    long long v16 = 0u;
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v4;
}

const void *REFrameworkAssetDescriptorGetResourceNameInBundle(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "Framework");
  if (v3) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v11, 0);
  *((void *)&v15 + 1) = 0;
  long long v16 = 0uLL;
  re::DynamicString::setCapacity(&v15, 0);
  uint64_t v7 = re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v11, 0);
  if (v7)
  {
    if (BYTE8(v15)) {
      BOOL v8 = (char *)v16;
    }
    else {
      BOOL v8 = (char *)&v15 + 9;
    }
    uint64_t v4 = (const void *)[NSString stringWithUTF8String:v8];
    CFRetain(v4);
  }
  else
  {
    uint64_t v9 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v10 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to deserialize Framework Asset parameters", v10, 2u);
    }
    uint64_t v4 = 0;
  }
  if ((void)v15)
  {
    if (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = 0u;
    long long v16 = 0u;
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v4;
}

const void *RERealityFileAssetDescriptorGetBundleId(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "RealityFileAsset");
  if (v3) {
    return 0;
  }
  uint64_t v4 = a1 + 3;
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  id v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v14, 0);
  *((void *)&v18 + 1) = 0;
  long long v19 = 0uLL;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  char v22 = 0;
  uint64_t v23 = 1;
  uint64_t v7 = re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v13, 0);
  if (v7)
  {
    if (v13 == 2)
    {
      BOOL v8 = (v15 & 1) != 0 ? v16 : (uint64_t *)((char *)&v15 + 1);
      uint64_t v4 = (const void *)[NSString stringWithUTF8String:v8];
      CFRetain(v4);
      int v9 = 0;
    }
    else
    {
      int v9 = 1;
    }
  }
  else
  {
    id v10 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to deserialize Reality File Asset parameters", v12, 2u);
    }
    int v9 = 0;
    uint64_t v4 = 0;
  }
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    long long v20 = 0u;
    long long v21 = 0u;
  }
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v9) {
    return 0;
  }
  return v4;
}

const void *RERealityFileAssetDescriptorGetRealityFileNameInBundle(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "RealityFileAsset");
  if (v3) {
    return 0;
  }
  uint64_t v4 = a1 + 3;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  id v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v14, 0);
  *((void *)&v18 + 1) = 0;
  long long v19 = 0uLL;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  char v22 = 0;
  uint64_t v23 = 1;
  uint64_t v7 = re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v13, 0);
  if (v7)
  {
    if (v13 == 2)
    {
      BOOL v8 = (BYTE8(v18) & 1) != 0 ? (long long *)v19 : (long long *)((char *)&v18 + 9);
      uint64_t v4 = (const void *)[NSString stringWithUTF8String:v8];
      CFRetain(v4);
      int v9 = 0;
    }
    else
    {
      int v9 = 1;
    }
  }
  else
  {
    id v10 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to deserialize Reality File Asset parameters", v12, 2u);
    }
    int v9 = 0;
    uint64_t v4 = 0;
  }
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    long long v20 = 0u;
    long long v21 = 0u;
  }
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v9) {
    return 0;
  }
  return v4;
}

const void *RERealityFileAssetDescriptorGetArchiveEntry(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "RealityFileAsset");
  if (v3) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v13, 0);
  *((void *)&v17 + 1) = 0;
  long long v18 = 0uLL;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v17, 0);
  *((void *)&v19 + 1) = 0;
  long long v20 = 0uLL;
  re::DynamicString::setCapacity(&v19, 0);
  char v21 = 0;
  uint64_t v22 = 1;
  uint64_t v8 = re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v12, 0);
  if (v8)
  {
    if (BYTE8(v19)) {
      int v9 = (char *)v20;
    }
    else {
      int v9 = (char *)&v19 + 9;
    }
    uint64_t v4 = (const void *)[NSString stringWithUTF8String:v9];
    CFRetain(v4);
  }
  else
  {
    id v10 = *re::assetsLogObjects((re *)v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to deserialize Reality File Asset parameters", v11, 2u);
    }
    uint64_t v4 = 0;
  }
  if ((void)v19)
  {
    if (BYTE8(v19)) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    long long v19 = 0u;
    long long v20 = 0u;
  }
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    long long v17 = 0u;
    long long v18 = 0u;
  }
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*v13 + 40))();
  }
  return v4;
}

const void *RERealityFileAssetDescriptorGetRealityFileURL(void *a1)
{
  if (a1[4]) {
    size_t v2 = (const char *)a1[5];
  }
  else {
    size_t v2 = (char *)a1 + 33;
  }
  uint64_t v3 = (_anonymous_namespace_ *)strcmp(v2, "RealityFileAsset");
  if (v3) {
    return 0;
  }
  uint64_t v4 = a1 + 3;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  id v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v14, 0);
  *((void *)&v18 + 1) = 0;
  long long v19 = 0uLL;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v20 + 1) = 0;
  long long v21 = 0uLL;
  re::DynamicString::setCapacity(&v20, 0);
  char v22 = 0;
  uint64_t v23 = 1;
  uint64_t v7 = re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(a1 + 3), &v13, 0);
  if (v7)
  {
    if (v13 == 1)
    {
      uint64_t v8 = (v15 & 1) != 0 ? v16 : (uint64_t *)((char *)&v15 + 1);
      uint64_t v4 = (const void *)[NSString stringWithUTF8String:v8];
      CFRetain(v4);
      int v9 = 0;
    }
    else
    {
      int v9 = 1;
    }
  }
  else
  {
    id v10 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Failed to deserialize Reality File Asset parameters", v12, 2u);
    }
    int v9 = 0;
    uint64_t v4 = 0;
  }
  if ((void)v20)
  {
    if (BYTE8(v20)) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    long long v20 = 0u;
    long long v21 = 0u;
  }
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v14 && (v15 & 1) != 0) {
    (*(void (**)(void))(*v14 + 40))();
  }
  if (v9) {
    return 0;
  }
  return v4;
}