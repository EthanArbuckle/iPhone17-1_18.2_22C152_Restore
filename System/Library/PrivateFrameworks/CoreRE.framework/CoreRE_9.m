re::MaterialDefinitionFile *re::makeFlattenedMaterialFile(uint64_t a1, char *a2)
{
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  char *v12;
  re *v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  char *v24;
  char *v25;
  re::MaterialDefinitionFile *v26;
  double v27;
  _OWORD v29[2];
  char *v30;
  void v31[3];
  unsigned char v32[24];
  long long v33;
  long long v34;
  unsigned int v35;
  uint64_t v36;
  void v37[3];
  int v38;
  uint64_t v39;
  unsigned char v40[12];
  __int16 v41;
  unsigned char v42[10];
  long long buf;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x263EF8340];
  v39 = 0;
  memset(v37, 0, sizeof(v37));
  v38 = 0;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v36 = 0x7FFFFFFFLL;
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v33, (re::DynamicString *)a2);
  v30 = a2;
  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v37, &v30);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v32, (const re::AssetHandle *)(a2 + 120));
  while (1)
  {
    re::AssetHandle::serializationString((re::AssetHandle *)v32, (re::DynamicString *)&v30);
    if (v31[0]) {
      v4 = v31[0] >> 1;
    }
    else {
      v4 = LOBYTE(v31[0]) >> 1;
    }
    if (v30) {
      v5 = (v31[0] & 1) == 0;
    }
    else {
      v5 = 1;
    }
    if (!v5) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    if (!v4) {
      break;
    }
    re::AssetHandle::serializationString((re::AssetHandle *)v32, (re::DynamicString *)v29);
    re::makeTruncatedAssetPath((char *)v29, (re::DynamicString *)&v30);
    if (*(void *)&v29[0])
    {
      if (BYTE8(v29[0])) {
        (*(void (**)(void))(**(void **)&v29[0] + 40))();
      }
      memset(v29, 0, sizeof(v29));
    }
    v6 = re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1, (uint64_t)&v30);
    if (!v6)
    {
      v11 = *re::pipelineLogObjects((re *)v6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        if (v31[0]) {
          v12 = (char *)v31[1];
        }
        else {
          v12 = (char *)v31 + 1;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot find asset path %s in overrideMaterials.", (uint8_t *)&buf, 0xCu);
      }
LABEL_65:
      if (v30 && (v31[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v30 + 40))();
      }
      break;
    }
    v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&buf, (uint64_t)&v30);
    if (!*(void *)a1)
    {
      v8 = *(void *)(a1 + 16);
LABEL_22:
      v9 = 0x7FFFFFFFLL;
      goto LABEL_23;
    }
    v8 = *(void *)(a1 + 16);
    v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v7 % *(unsigned int *)(a1 + 24)));
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_22;
    }
    while (!re::DynamicString::operator==(v8 + 784 * v9 + 16, (uint64_t)&v30))
    {
      v9 = *(_DWORD *)(v8 + 784 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF) {
        goto LABEL_22;
      }
    }
LABEL_23:
    v10 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains((uint64_t)&v33, v8 + 784 * v9 + 48);
    if (v10)
    {
      *((void *)&buf + 1) = 0;
      v44 = 0;
      v45 = 0;
      v13 = (re *)re::DynamicString::setCapacity(&buf, 0);
      v14 = v35;
      if (v35)
      {
        v15 = 0;
        v16 = (int *)(v34 + 8);
        while (1)
        {
          v17 = *v16;
          v16 += 12;
          if (v17 < 0) {
            break;
          }
          if (v35 == ++v15)
          {
            LODWORD(v15) = v35;
            break;
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
      }
      if (v35 != v15)
      {
        v18 = v15;
        v19 = v34;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)v40, (const re::DynamicString *)(v19 + 48 * v18 + 16));
          if (v40[8]) {
            v20 = *(const char **)&v42[2];
          }
          else {
            v20 = &v40[9];
          }
          re::DynamicString::appendf((re::DynamicString *)&buf, "-> %s", v20);
          v13 = *(re **)v40;
          if (*(void *)v40 && (v40[8] & 1) != 0) {
            v13 = (re *)(*(uint64_t (**)(void))(**(void **)v40 + 40))();
          }
          v19 = v34;
          if (v35 <= (int)v15 + 1) {
            v21 = v15 + 1;
          }
          else {
            v21 = v35;
          }
          while (1)
          {
            v18 = (v15 + 1);
            if (v21 - 1 == v15) {
              break;
            }
            LODWORD(v15) = v15 + 1;
            v22 = v18;
            if ((*(_DWORD *)(v34 + 48 * v18 + 8) & 0x80000000) != 0) {
              goto LABEL_53;
            }
          }
          v22 = v21;
LABEL_53:
          LODWORD(v15) = v22;
        }
        while (v14 != v22);
      }
      v23 = *re::pipelineLogObjects(v13);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if (*((void *)a2 + 1)) {
          v24 = (char *)*((void *)a2 + 2);
        }
        else {
          v24 = a2 + 9;
        }
        if (BYTE8(buf)) {
          v25 = v44;
        }
        else {
          v25 = (char *)&buf + 9;
        }
        *(_DWORD *)v40 = 136315394;
        *(void *)&v40[4] = v24;
        v41 = 2080;
        *(void *)v42 = v25;
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Found circular dependency in material %s: {%s}", v40, 0x16u);
      }
      if (void)buf && (BYTE8(buf)) {
        (*(void (**)(void))(*(void *)buf + 40))();
      }
      goto LABEL_65;
    }
    re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v33, (re::DynamicString *)(v8 + 784 * v9 + 48));
    *(void *)&buf = v8 + 784 * v9 + 48;
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v37, &buf);
    re::AssetHandle::operator=((uint64_t)v32, (uint64_t *)(v8 + 784 * v9 + 168));
    if (v30)
    {
      if (v31[0]) {
        (*(void (**)(void))(*(void *)v30 + 40))();
      }
    }
  }
  v26 = re::resolveOverrideMaterials((re *)a2, (uint64_t)v37);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
  v27 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v33);
  if (v37[0] && v39) {
    (*(void (**)(double))(*(void *)v37[0] + 40))(v27);
  }
  return v26;
}

void re::makeTruncatedAssetPath(char *a1@<X0>, re::DynamicString *a2@<X8>)
{
  LOBYTE(v18) = 58;
  re::DynamicString::find((re::DynamicString *)a1, (char *)&v18, 1, 0, (uint64_t)v22);
  if (v22[0])
  {
    unint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      size_t v5 = v4 >> 1;
    }
    else {
      size_t v5 = v4 >> 1;
    }
    re::DynamicString::substr((re::DynamicString *)a1, v23 + 1, v5, (re::DynamicString *)&v18);
    if (v19) {
      v6 = v21;
    }
    else {
      v6 = v20;
    }
    memset(&v16, 0, sizeof(v16));
    v7 = v6 - 1;
    while (*++v7)
      ;
    std::string::append[abi:nn180100]<char const*,0>(&v16, v6, v7);
    p_p = &__p;
    std::__fs::filesystem::path::filename[abi:nn180100]((const std::__fs::filesystem::path *)&v16, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18)
    {
      if (v19) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
    }
  }
  else
  {
    if (a1[8]) {
      v11 = (char *)*((void *)a1 + 2);
    }
    else {
      v11 = a1 + 9;
    }
    memset(&__p, 0, sizeof(__p));
    v12 = v11 - 1;
    while (*++v12)
      ;
    std::string::append[abi:nn180100]<char const*,0>(&__p, v11, v12);
    v14 = (const char *)&v18;
    std::__fs::filesystem::path::filename[abi:nn180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v18);
    if (SHIBYTE(v21) < 0) {
      v14 = (const char *)v18;
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

BOOL re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 784 * v6 + 16, a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 784 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

double std::__fs::filesystem::path::filename[abi:nn180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t re::append<re::DynamicString,re::DynamicString>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    std::basic_string_view<_CharT, _Traits>::size_type v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 20;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 16);
    int v20 = *(_DWORD *)(a2 + 32);
    do
    {
      uint64_t v10 = v9 + 80 * v8;
      v11 = (re::DynamicString *)(v10 + 16);
      v12 = (const re::DynamicString *)(v10 + 48);
      unint64_t v13 = re::Hash<re::DynamicString>::operator()((uint64_t)&v21, v10 + 16);
      unint64_t v14 = v13;
      if (*(void *)v3)
      {
        unint64_t v15 = v13 % *(unsigned int *)(v3 + 24);
        uint64_t v4 = *(unsigned int *)(*(void *)(v3 + 8) + 4 * v15);
        if (v4 != 0x7FFFFFFF)
        {
          uint64_t v16 = *(void *)(v3 + 16);
          while (!re::DynamicString::operator==(v16 + 80 * v4 + 16, (uint64_t)v11))
          {
            uint64_t v4 = *(_DWORD *)(v16 + 80 * v4 + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF)
            {
              uint64_t v2 = a2;
              goto LABEL_15;
            }
          }
          re::DynamicString::deinit((re::DynamicString *)(v16 + 80 * v4 + 48));
          double result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v3 + 16) + 80 * v4 + 48), v12);
          uint64_t v2 = a2;
          LODWORD(v4) = v20;
          goto LABEL_18;
        }
LABEL_15:
        LODWORD(v4) = v20;
      }
      else
      {
        LODWORD(v15) = 0;
      }
      double result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(v3, v15, v14, v11, v12);
LABEL_18:
      ++*(_DWORD *)(v3 + 40);
      uint64_t v9 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1)) {
        int v17 = v5 + 1;
      }
      else {
        int v17 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v17 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v18 = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }
      int v18 = v17;
LABEL_25:
      LODWORD(v5) = v18;
    }
    while (v4 != v18);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 160 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 160 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 160 * v5 + 48;
}

re::DynamicString *re::replaceIfValid<re::DynamicString>(re::DynamicString *this, re::DynamicString *a2)
{
  if (*(void *)a2)
  {
    unint64_t v2 = *((void *)a2 + 1);
    if (v2) {
      unint64_t v3 = v2 >> 1;
    }
    else {
      unint64_t v3 = v2 >> 1;
    }
    if (v3) {
      return re::DynamicString::operator=(this, a2);
    }
  }
  return this;
}

void re::resolveOverrideMaterials(re::MaterialDefinitionFile const&,re::DynamicArray<re::MaterialDefinitionFile const*> const&)::$_0::operator()(uint64_t *a1, re::DynamicString *a2, uint64_t a3)
{
  if (!re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(*a1, (uint64_t)a2))
  {
    re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v42, (const re::MaterialTechniqueData *)a3);
    re::DynamicString::operator=((re::DynamicString *)v42, a2);
    uint64_t v11 = *a1;
    unint64_t v12 = re::Hash<re::DynamicString>::operator()((uint64_t)v43, (uint64_t)a2);
    unint64_t v13 = v12;
    if (*(void *)v11)
    {
      unint64_t v14 = v12 % *(unsigned int *)(v11 + 24);
      uint64_t v15 = *(unsigned int *)(*(void *)(v11 + 8) + 4 * v14);
      if (v15 != 0x7FFFFFFF)
      {
        uint64_t v16 = *(void *)(v11 + 16);
        while (!re::DynamicString::operator==(v16 + 712 * v15 + 16, (uint64_t)a2))
        {
          uint64_t v15 = *(_DWORD *)(v16 + 712 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
        goto LABEL_16;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_15:
    re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(v11, v14, v13, a2, (uint64_t)v42);
    ++*(_DWORD *)(v11 + 40);
LABEL_16:
    re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v42);
    return;
  }
  uint64_t v6 = *a1;
  unint64_t v7 = re::Hash<re::DynamicString>::operator()((uint64_t)v42, (uint64_t)a2);
  uint64_t v8 = 0x7FFFFFFFLL;
  if (*(void *)v6)
  {
    uint64_t v9 = *(unsigned int *)(*(void *)(v6 + 8) + 4 * (v7 % *(unsigned int *)(v6 + 24)));
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v8 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v10 + 712 * v9 + 16, (uint64_t)a2))
      {
        uint64_t v9 = *(_DWORD *)(v10 + 712 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          goto LABEL_18;
        }
      }
      uint64_t v8 = v9;
    }
  }
LABEL_18:
  uint64_t v17 = *(void *)(v6 + 16);
  if (*(void *)(a3 + 72) && !*(void *)(v17 + 712 * v8 + 120)) {
    re::AssetHandle::operator=(v17 + 712 * v8 + 112, (uint64_t *)(a3 + 64));
  }
  if (!*(unsigned char *)(a3 + 552))
  {
    uint64_t v18 = v17 + 712 * v8;
    long long v19 = *(_OWORD *)(a3 + 216);
    long long v20 = *(_OWORD *)(a3 + 232);
    long long v21 = *(_OWORD *)(a3 + 200);
    *(_DWORD *)(v18 + 296) = *(_DWORD *)(a3 + 248);
    *(_OWORD *)(v18 + 248) = v21;
    *(_OWORD *)(v18 + 280) = v20;
    *(_OWORD *)(v18 + 264) = v19;
    int v22 = *(unsigned __int8 *)(v18 + 300);
    int v23 = *(unsigned __int8 *)(a3 + 252);
    if (*(unsigned char *)(v18 + 300)) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v23 == 0;
    }
    if (!v24)
    {
      v25 = (unsigned char *)(v18 + 300);
      if (v22) {
        BOOL v26 = v23 == 0;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        unsigned char *v25 = 0;
      }
      else
      {
        if (v22) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = v23 == 0;
        }
        if (!v27) {
          unsigned char *v25 = 1;
        }
        *(unsigned char *)(v17 + 712 * v8 + 301) = *(unsigned char *)(a3 + 253);
      }
    }
    re::DynamicArray<re::RenderAttachmentState>::operator=(v17 + 712 * v8 + 304, (uint64_t *)(a3 + 256));
  }
  if (*(void *)(a3 + 96))
  {
    uint64_t v28 = v17 + 712 * v8;
    if (!*(void *)(v28 + 144)) {
      re::AssetHandle::operator=(v28 + 136, (uint64_t *)(a3 + 88));
    }
  }
  uint64_t v29 = v17 + 712 * v8;
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v29 + 160), (re::DynamicString *)(a3 + 112));
  if (*(void *)(a3 + 152) && !*(void *)(v29 + 200)) {
    re::AssetHandle::operator=(v29 + 192, (uint64_t *)(a3 + 144));
  }
  uint64_t v30 = v17 + 712 * v8;
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v30 + 216), (re::DynamicString *)(a3 + 168));
  re::append<re::DynamicString,re::DynamicString>(v30 + 376, a3 + 328);
  re::append<re::DynamicString,re::DynamicString>(v30 + 608, a3 + 560);
  re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(v30 + 656, a3 + 608);
  if (*(unsigned char *)(a3 + 553)) {
    *(unsigned char *)(v17 + 712 * v8 + 601) = 1;
  }
  if (*(unsigned char *)(a3 + 656)) {
    *(unsigned char *)(v17 + 712 * v8 + 704) = 1;
  }
  if (*(unsigned char *)(a3 + 657))
  {
    uint64_t v31 = v17 + 712 * v8;
    if (!*(unsigned char *)(v31 + 705)) {
      *(unsigned char *)(v31 + 705) = 1;
    }
    *(unsigned char *)(v17 + 712 * v8 + 706) = *(unsigned char *)(a3 + 658);
  }
  uint64_t v32 = v17 + 712 * v8;
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v32 + 344), (re::DynamicString *)(a3 + 296));
  re::appendOrDelete<re::DynamicString,re::DynamicString>(v32 + 512, a3 + 464);
  uint64_t v33 = *(void *)(a3 + 440);
  if (v33)
  {
    v34 = (_anonymous_namespace_ *)(v32 + 472);
    v35 = *(re::DynamicString **)(a3 + 456);
    v36 = (re::DynamicString *)((char *)v35 + 32 * v33);
    uint64_t v37 = v17 + 712 * v8;
    v38 = (uint64_t *)(v37 + 504);
    v39 = (void *)(v37 + 488);
    do
    {
      if (*v39)
      {
        uint64_t v40 = *v38;
        uint64_t v41 = 32 * *v39;
        while (!re::DynamicString::operator==((uint64_t)v35, v40))
        {
          v40 += 32;
          v41 -= 32;
          if (!v41) {
            goto LABEL_59;
          }
        }
      }
      else
      {
LABEL_59:
        re::DynamicArray<re::DynamicString>::add(v34, v35);
      }
      v35 = (re::DynamicString *)((char *)v35 + 32);
    }
    while (v35 != v36);
  }
  re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(v17 + 712 * v8 + 424, a3 + 376);
  if (*(void *)(a3 + 512))
  {
    if (*(void *)(a3 + 528)) {
      re::DynamicArray<re::DynamicString>::operator=(v17 + 712 * v8 + 560, (uint64_t *)(a3 + 512));
    }
  }
}

BOOL re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 712 * v6 + 16, a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 712 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

uint64_t re::appendOrDelete<re::DynamicString,re::DynamicString>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 20;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 16);
    do
    {
      uint64_t v10 = v9 + 80 * v8;
      unsigned int v11 = (re::DynamicString *)(v10 + 16);
      unint64_t v12 = *(void *)(v10 + 56);
      if (v12) {
        unint64_t v13 = v12 >> 1;
      }
      else {
        unint64_t v13 = v12 >> 1;
      }
      if (v13)
      {
        char v14 = (const re::DynamicString *)(v9 + 80 * v8 + 48);
        unint64_t v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v23, (uint64_t)v11);
        unint64_t v16 = v15;
        if (*(void *)v3)
        {
          unint64_t v17 = v15 % *(unsigned int *)(v3 + 24);
          uint64_t v18 = *(unsigned int *)(*(void *)(v3 + 8) + 4 * v17);
          if (v18 != 0x7FFFFFFF)
          {
            uint64_t v19 = *(void *)(v3 + 16);
            while (!re::DynamicString::operator==(v19 + 80 * v18 + 16, (uint64_t)v11))
            {
              uint64_t v18 = *(_DWORD *)(v19 + 80 * v18 + 8) & 0x7FFFFFFF;
              if (v18 == 0x7FFFFFFF)
              {
                uint64_t v2 = a2;
                goto LABEL_22;
              }
            }
            re::DynamicString::deinit((re::DynamicString *)(v19 + 80 * v18 + 48));
            double result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v3 + 16) + 80 * v18 + 48), v14);
            ++*(_DWORD *)(v3 + 40);
            uint64_t v2 = a2;
            goto LABEL_23;
          }
        }
        else
        {
          LODWORD(v17) = 0;
        }
LABEL_22:
        double result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(v3, v17, v16, v11, v14);
        ++*(_DWORD *)(v3 + 40);
      }
      else
      {
        double result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v3, (uint64_t)v11);
        if (result) {
          double result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v3, (uint64_t)v11);
        }
      }
LABEL_23:
      uint64_t v9 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1)) {
        int v20 = v5 + 1;
      }
      else {
        int v20 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v20 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v21 = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_30;
        }
      }
      int v21 = v20;
LABEL_30:
      LODWORD(v5) = v21;
    }
    while (v4 != v21);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        unint64_t v6 = (_DWORD *)(a1[2] + v4);
        int v7 = v6[2];
        if (v7 < 0)
        {
          v6[2] = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 4));
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)(v6 + 12));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 712;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          re::MaterialTechniqueGroupData::deinit((const re::DynamicString **)(v6 + 48));
          re::DynamicArray<re::DynamicString>::deinit(v6 + 80);
          re::DynamicString::deinit((re::DynamicString *)(v6 + 48));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 120;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v6 + 80));
          re::DynamicString::deinit((re::DynamicString *)(v6 + 48));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 128;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((const re::DynamicString **)(v6 + 48));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 152;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::readJsonInCompatibilityMode@<X0>(re *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, const re::IntrospectionBase *a4@<X3>, uint64_t a5@<X8>)
{
  re::FileStreamReader::open(this, (uint64_t)v30);
  if (v30[0])
  {
    v29[1] = 0;
    v29[2] = 0;
    v29[0] = a4;
    if ((_BYTE)v24)
    {
      *(unsigned char *)a5 = 1;
    }
    else
    {
      if (v27) {
        unint64_t v16 = *(unsigned char **)&v28[7];
      }
      else {
        unint64_t v16 = v28;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to read JSON source asset \"%s\": %s", (re::DynamicString *)&v21, this, v16);
      long long v17 = v21;
      uint64_t v18 = v22;
      uint64_t v19 = v23;
      *(unsigned char *)a5 = 0;
      *(_OWORD *)(a5 + 8) = v17;
      *(void *)(a5 + 24) = v18;
      *(void *)(a5 + 32) = v19;
      if (!(_BYTE)v24 && v26 && (v27 & 1) != 0) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
    }
  }
  else
  {
    re::formattedErrorMessage<re::DetailedError>((uint64_t)v31, (re::DynamicString *)&v24);
    long long v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v13;
    *(void *)(a5 + 24) = v14;
    *(void *)(a5 + 32) = v15;
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v30);
}

uint64_t re::compileMaterialFile@<X0>(char *a1@<X0>, re *this@<X1>, re::IntrospectionBase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v6 = a1;
  int v7 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    unint64_t v12 = this;
    uint64_t v11 = a4;
    int v7 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    a4 = v11;
    this = v12;
    uint64_t v6 = a1;
    uint64_t v4 = a3;
    if (v10)
    {
      re::introspect<re::MaterialFile>(void)::info = re::introspect_MaterialFile(0);
      int v7 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a4 = v11;
      this = v12;
      uint64_t v6 = a1;
      uint64_t v4 = a3;
    }
  }
  uint64_t v8 = (uint64_t)v7[82];
  return re::readJsonInCompatibilityMode(this, v6, v8, v4, a4);
}

uint64_t re::compileMaterialDefinitionFile@<X0>(re *this@<X0>, re::MaterialDefinitionFile *a2@<X1>, re::IntrospectionBase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a3;
  int v7 = (const char *)this;
  uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    long long v13 = a2;
    uint64_t v12 = a4;
    uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    a4 = v12;
    a2 = v13;
    int v7 = (const char *)this;
    uint64_t v5 = a3;
    if (v11)
    {
      re::introspect<re::MaterialDefinitionFile>(void)::info = re::introspect_MaterialDefinitionFile(0);
      uint64_t v8 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      a4 = v12;
      a2 = v13;
      int v7 = (const char *)this;
      uint64_t v5 = a3;
    }
  }
  uint64_t v9 = (uint64_t)v8[84];
  return re::readJsonInCompatibilityMode(a2, v7, v9, v5, a4);
}

void re::generateShaderParameterTableBuilder(BOOL a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v164 = *MEMORY[0x263EF8340];
  if (a2 && (uint64_t v6 = *(unsigned __int8 **)(a2 + 152)) != 0) {
    unsigned int v119 = *v6;
  }
  else {
    unsigned int v119 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a4 + 32);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (int *)(*(void *)(a4 + 16) + 8);
    while (1)
    {
      int v10 = *v9;
      v9 += 20;
      if (v10 < 0) {
        break;
      }
      if (v7 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if (v7 == v8) {
    goto LABEL_12;
  }
  uint64_t v15 = v8;
  uint64_t v16 = *(void *)(a4 + 16);
  int v120 = *(_DWORD *)(a4 + 32);
  BOOL v121 = a1;
  do
  {
    uint64_t v17 = v16 + 80 * v15;
    uint64_t v124 = v16;
    uint64_t v125 = v17 + 48;
    int v127 = v8;
    v128 = (const re::DynamicString *)(v17 + 16);
    if (!*(void *)(v17 + 48))
    {
      uint64_t v23 = *re::pipelineLogObjects((re *)a1);
      a1 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (a1)
      {
        if (*(unsigned char *)(v124 + 80 * v15 + 24)) {
          long long v24 = *(char **)(v124 + 80 * v15 + 32);
        }
        else {
          long long v24 = (char *)v128 + 9;
        }
        *(_DWORD *)v160 = 136315394;
        *(void *)&v160[4] = a3;
        *(_WORD *)&v160[12] = 2080;
        *(void *)&v160[14] = v24;
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "%s: skipping constant: %s, Parsed parameters contained invalid types. All floats/arrays must be string data.", v160, 0x16u);
      }
      goto LABEL_188;
    }
    uint64_t v18 = v16;
    int v149 = 3;
    re::StringID::invalid((re::StringID *)v160);
    uint64_t v150 = *(void *)v160 >> 1;
    re::StringID::destroyString((re::StringID *)v160);
    char v151 = 0;
    re::StringID::invalid((re::StringID *)&v152);
    uint64_t v19 = v18 + 80 * v15;
    unint64_t v20 = *(void *)(v19 + 24);
    v122 = (unsigned char *)(v19 + 24);
    if ((v20 & 1) == 0)
    {
      uint64_t v21 = v20 >> 8;
      uint64_t v22 = (char *)v128 + 9;
      goto LABEL_26;
    }
    uint64_t v22 = *(unsigned char **)(v18 + 80 * v15 + 32);
    if (v22)
    {
      LOBYTE(v21) = *v22;
LABEL_26:
      if ((_BYTE)v21)
      {
        uint64_t v21 = (char)v21;
        char v25 = v22[1];
        if (v25)
        {
          uint64_t v26 = v22 + 2;
          do
          {
            uint64_t v21 = 31 * v21 + v25;
            int v27 = *v26++;
            char v25 = v27;
          }
          while (v27);
        }
        uint64_t v28 = v21 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v28 = 0;
      }
      goto LABEL_33;
    }
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
    uint64_t v150 = v28;
    v160[0] = 46;
    *((void *)&v161 + 1) = 0;
    memset(&v160[8], 0, 24);
    LODWORD(v161) = 0;
    v123 = (unsigned char *)(v18 + 80 * v15 + 56);
    if (*v123) {
      uint64_t v29 = *(const char **)(v18 + 80 * v15 + 64);
    }
    else {
      uint64_t v29 = (const char *)(v125 + 9);
    }
    re::TokenizedMember::tokenize(v160, v29);
    if (*(void *)&v160[24] == 2)
    {
      uint64_t v30 = (re::MaterialManager *)re::TokenizedMember::operator[](2uLL, *((uint64_t *)&v161 + 1), 0);
      if (re::MaterialManager::isEngineDefinedConstantBufferTable(v30, v31))
      {
        int v149 = 1;
        uint64_t v32 = (const char *)re::TokenizedMember::operator[](*(unint64_t *)&v160[24], *((uint64_t *)&v161 + 1), 0);
        uint64_t v33 = 0;
        while (strcmp(re::s_materialTableIDMappings[v33], v32))
        {
          if (++v33 == 168)
          {
            LOBYTE(v33) = 0;
            break;
          }
        }
        char v151 = v33;
        v34 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](*(unint64_t *)&v160[24], *((uint64_t *)&v161 + 1), 1u);
        *(void *)__src = 0;
        v144 = "";
        uint64_t v35 = *(void *)__src;
        v36 = (char *)v144;
        *(void *)__src = 0;
        v144 = "";
        char var0 = (char)v152.var0;
        var1 = v152.var1;
        *(void *)&v152.char var0 = v35;
        v152.var1 = v36;
        *(void *)v156 = v35 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *(void *)&v156[8] = var1;
        re::StringID::destroyString((re::StringID *)v156);
        re::StringID::destroyString((re::StringID *)__src);
      }
    }
    re::TokenizedMember::deinit((uint64_t **)v160);
    v39 = *(_anonymous_namespace_ **)&v160[8];
    if (*(void *)&v160[8] && *((void *)&v161 + 1)) {
      v39 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v160[8] + 40))(*(void *)&v160[8]);
    }
    int v40 = v149;
    if (v149 != 3) {
      goto LABEL_186;
    }
    if (*(void *)v123)
    {
      v42 = *(unsigned char **)(v124 + 80 * v15 + 64);
      int v41 = *v42;
    }
    else
    {
      int v41 = BYTE1(*(void *)v123);
      v42 = (unsigned char *)(v125 + 9);
    }
    uint64_t v158 = 0;
    memset(v156, 0, sizeof(v156));
    int v157 = 0;
    if (!v41) {
      goto LABEL_74;
    }
    do
    {
      memset(v160, 0, sizeof(v160));
      re::DynamicString::setCapacity(v160, 0);
      --v42;
      do
      {
        int v45 = *++v42;
        int v44 = v45;
      }
      while (v45 == 32);
      while ((v44 - 32) <= 0x3B && ((1 << (v44 - 32)) & 0x800000000001001) != 0)
      {
        int v46 = *++v42;
        int v44 = v46;
      }
      while (v44 == 32)
      {
LABEL_59:
        int v47 = *++v42;
        int v44 = v47;
      }
      if (v44 && v44 != 93)
      {
        __src[0] = v44;
        re::DynamicString::append((re::DynamicString *)v160, __src, 1uLL);
        goto LABEL_59;
      }
      if (v44 == 93) {
        ++v42;
      }
      if (v160[8]) {
        uint64_t v48 = *(void *)&v160[8] >> 1;
      }
      else {
        uint64_t v48 = v160[8] >> 1;
      }
      if (v48) {
        v43.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v156, v160);
      }
      v39 = *(_anonymous_namespace_ **)v160;
      if (*(void *)v160 && (v160[8] & 1) != 0) {
        v39 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(void **)v160 + 40))(v43);
      }
    }
    while (*v42);
LABEL_74:
    char v148 = 0;
    if (*v122)
    {
      uint64_t v50 = v124;
      uint64_t v49 = *(void *)(v124 + 80 * v15 + 32);
    }
    else
    {
      uint64_t v49 = (uint64_t)v128 + 9;
      uint64_t v50 = v124;
    }
    if (*v123) {
      uint64_t v51 = *(void *)(v50 + 80 * v15 + 64);
    }
    else {
      uint64_t v51 = v125 + 9;
    }
    uint64_t v133 = v51;
    unint64_t v52 = *(void *)&v156[16];
    v147 = 0;
    v144 = 0;
    unint64_t v145 = 0;
    *(void *)__src = 0;
    int v146 = 0;
    if (!*(void *)&v156[16])
    {
      LODWORD(v7) = v120;
      uint64_t v5 = v121;
      goto LABEL_179;
    }
    v134 = 0;
    unint64_t v53 = 0;
    uint64_t v54 = v158;
    uint64_t v129 = v158 + 32 * *(void *)&v156[16];
    unint64_t v131 = *(void *)&v156[16];
    while (2)
    {
      *((void *)&v161 + 1) = 0;
      memset(&v160[8], 0, 24);
      LODWORD(v161) = 0;
      v160[0] = 44;
      if (*(unsigned char *)(v54 + 8)) {
        v55 = *(const char **)(v54 + 16);
      }
      else {
        v55 = (const char *)(v54 + 9);
      }
      v56 = re::TokenizedMember::tokenize(v160, v55);
      if (v52 < 2)
      {
LABEL_90:
        v57 = v134;
      }
      else
      {
        v57 = v134;
        if (v134)
        {
          if (*(StringID **)&v160[24] != v134)
          {
            v58 = *re::graphicsLogObjects((re *)v56);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v49;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v133;
              _os_log_impl(&dword_233120000, v58, OS_LOG_TYPE_DEFAULT, "Inconsistent parameter constant vector size for key '%s' with value '%s'", buf, 0x16u);
            }
            goto LABEL_90;
          }
        }
        else
        {
          v57 = *(StringID **)&v160[24];
        }
      }
      uint64_t v154 = 0;
      float v153 = 0.0;
      v134 = v57;
      if (*(void *)&v160[24])
      {
        uint64_t v59 = 0;
        while (1)
        {
          v60 = *(char **)(*((void *)&v161 + 1) + 8 * v59);
          if (strcasecmp(v60, "true")) {
            break;
          }
          re::validateParsedType((re *)&v148, v49, (uint64_t)v60, 2, (uint64_t)"BOOL");
          buf[0] = 1;
LABEL_143:
          re::DynamicArray<unsigned char>::add(__src, buf);
LABEL_144:
          if (*(void *)&v160[24] <= (unint64_t)++v59) {
            goto LABEL_147;
          }
        }
        if (!strcasecmp(v60, "false"))
        {
          re::validateParsedType((re *)&v148, v49, (uint64_t)v60, 2, (uint64_t)"BOOL");
        }
        else
        {
          size_t v61 = strlen(v60);
          if (!v61)
          {
            re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "tokenLen > 0", "makeConstantBytes", 812);
            _os_crash();
            __break(1u);
LABEL_247:
            __endptr = 0;
            long long v162 = 0u;
            long long v163 = 0u;
            long long v161 = 0u;
            memset(v160, 0, sizeof(v160));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 789;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v60;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v53;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          size_t v63 = v61;
          while ((v145 & 3) != 0)
          {
            buf[0] = 0;
            re::DynamicArray<unsigned char>::add(__src, buf);
          }
          if ((v59 - 3) <= 1)
          {
            uint64_t v64 = *(void *)&v160[24];
            if (*(void *)&v160[24] - 1 == v59)
            {
              if (*v60 < 0
                || (uint64_t v65 = *v60, v65 != 45)
                && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v65 + 60) & 0x400) == 0)
              {
                re::ColorHelpers::getColorGamutFromSerializationLiteral((re::ColorHelpers *)v60, buf);
                if (buf[0])
                {
                  char v66 = v148;
                  if (v148 == 1) {
                    char v66 = 0;
                  }
                  char v148 = v66;
                  if (v59 == 3) {
                    v67 = "color3";
                  }
                  else {
                    v67 = "color4";
                  }
                  if (v59 == 3) {
                    int v68 = 20;
                  }
                  else {
                    int v68 = 21;
                  }
                  re::validateParsedType((re *)&v148, v49, (uint64_t)v60, v68, (uint64_t)v67);
                  if (v59 == 3)
                  {
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                  }
                  LODWORD(v154) = buf[1];
                  v69 = (float *)&v154;
                  goto LABEL_136;
                }
              }
            }
            if (v59 == 4 && v64 == 5)
            {
              if (*v60 < 0
                || (uint64_t v70 = *v60, v70 != 45)
                && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v70 + 60) & 0x400) == 0)
              {
                if (!strcmp(v60, "matrix"))
                {
                  char v148 = 48;
                  goto LABEL_144;
                }
              }
            }
          }
          v71 = &v60[v63];
          int v72 = v60[v63 - 1];
          __endptr = 0;
          switch(v72)
          {
            case 'f':
              --v71;
              goto LABEL_131;
            case 'u':
              --v71;
              re::validateParsedType((re *)&v148, v49, (uint64_t)v60, 7, (uint64_t)"uint");
              v73 = (re *)strtoul(v60, &__endptr, 10);
              LODWORD(v154) = v73;
              v69 = (float *)&v154;
              break;
            case 'i':
              --v71;
              re::validateParsedType((re *)&v148, v49, (uint64_t)v60, 3, (uint64_t)"int");
              v73 = (re *)strtol(v60, &__endptr, 10);
              HIDWORD(v154) = v73;
              v69 = (float *)&v154 + 1;
              break;
            default:
LABEL_131:
              re::validateParsedType((re *)&v148, v49, (uint64_t)v60, 1, (uint64_t)"float");
              float v153 = strtof(v60, &__endptr);
              v69 = &v153;
              break;
          }
          if (__endptr != v71 || __endptr == v60)
          {
            v74 = *re::graphicsLogObjects(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = v49;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v133;
              *(_WORD *)&buf[22] = 2080;
              *(void *)&buf[24] = v60;
              _os_log_impl(&dword_233120000, v74, OS_LOG_TYPE_DEFAULT, "Invalid token found while parsing key '%s' with value '%s': %s", buf, 0x20u);
            }
          }
LABEL_136:
          re::DynamicArray<unsigned char>::add(__src, v69);
          re::DynamicArray<unsigned char>::add(__src, (unsigned char *)v69 + 1);
          re::DynamicArray<unsigned char>::add(__src, (unsigned char *)v69 + 2);
          re::DynamicArray<unsigned char>::add(__src, (unsigned char *)v69 + 3);
          unint64_t v53 = (v53 + 1);
          if (*(void *)&v160[24] == 3)
          {
            if ((-1431655765 * v59 - 1431655766) > 0x55555554) {
              goto LABEL_144;
            }
          }
          else if ((-1431655765 * v59 - 1431655766) > 0x55555554 || *(void *)&v160[24] != 9)
          {
            goto LABEL_144;
          }
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
        }
        buf[0] = 0;
        goto LABEL_143;
      }
LABEL_147:
      re::TokenizedMember::deinit((uint64_t **)v160);
      if (*(void *)&v160[8] && *((void *)&v161 + 1)) {
        (*(void (**)(void))(**(void **)&v160[8] + 40))();
      }
      v54 += 32;
      unint64_t v52 = v131;
      if (v54 != v129) {
        continue;
      }
      break;
    }
    LOBYTE(v52) = v148;
    if (v148 == 1)
    {
      LODWORD(v7) = v120;
      uint64_t v5 = v121;
      char v75 = 32;
      switch((char)v53)
      {
        case 2:
          goto LABEL_167;
        case 3:
          char v75 = 33;
          goto LABEL_167;
        case 4:
          char v75 = 34;
          goto LABEL_167;
        case 9:
          char v75 = 49;
          goto LABEL_167;
        default:
          goto LABEL_179;
      }
    }
    LODWORD(v7) = v120;
    uint64_t v5 = v121;
    if (v148 == 3)
    {
      if ((v53 - 2) >= 3u)
      {
        LOBYTE(v52) = 3;
        goto LABEL_179;
      }
      char v75 = v53 + 2;
LABEL_167:
      char v148 = v75;
      LOBYTE(v52) = v75;
LABEL_168:
      if ((v52 & 0xFE) != 0x14) {
        goto LABEL_179;
      }
      unint64_t v53 = v145;
      v60 = (char *)(v145 - 4);
      if (v145 <= 3) {
        goto LABEL_247;
      }
      v76 = v147;
      int v77 = v60[(void)v147];
      *(_OWORD *)v160 = *v147;
      v160[16] = v77;
      re::ShaderParameterTableBuilder::addOriginalColorConstant(v5, (uint64_t)v128, (uint64_t)v160, v52);
      if (v77 != v119)
      {
        re::ColorGamut4F::as((uint64_t)v160, v119, 1, (uint64_t)buf);
        *(_OWORD *)v160 = *(_OWORD *)buf;
        v160[16] = buf[16];
      }
      if (v52 == 20)
      {
        LOBYTE(v52) = 33;
LABEL_176:
        char v148 = v52;
      }
      else
      {
        if (v52 == 21)
        {
          LOBYTE(v52) = 34;
          goto LABEL_176;
        }
        LOBYTE(v52) = v148;
      }
      _OWORD *v76 = *(_OWORD *)v160;
      re::DynamicArray<BOOL>::resize((uint64_t)__src, (unint64_t)v60);
      goto LABEL_179;
    }
    if (v148 != 7) {
      goto LABEL_168;
    }
    if ((v53 - 2) < 3u)
    {
      char v75 = v53 + 6;
      goto LABEL_167;
    }
    LOBYTE(v52) = 7;
LABEL_179:
    int v149 = 0;
    *(void *)v160 = v147;
    *(void *)&v160[8] = v145;
    re::ShaderParameterTableBuilder::addConstant(v5, v128, (uint64_t)v160, v52);
    if (*(void *)__src && v147) {
      (*(void (**)(void))(**(void **)__src + 40))();
    }
    v78 = (re *)re::DynamicArray<re::DynamicString>::deinit((uint64_t)v156);
    int v40 = v149;
    uint64_t v4 = a4;
    if (v149 != 3)
    {
LABEL_186:
      int v139 = v40;
      uint64_t v140 = v150;
      char v141 = v151;
      re::StringID::StringID((re::StringID *)v142, &v152);
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v5, v128, (uint64_t)&v139);
      re::StringID::destroyString((re::StringID *)v142);
      uint64_t v140 = 0;
      goto LABEL_187;
    }
    v79 = *re::pipelineLogObjects(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      if (*v122)
      {
        uint64_t v81 = v124;
        v80 = *(char **)(v124 + 80 * v15 + 32);
      }
      else
      {
        v80 = (char *)v128 + 9;
        uint64_t v81 = v124;
      }
      if (*v123) {
        uint64_t v85 = *(void *)(v81 + 80 * v15 + 64);
      }
      else {
        uint64_t v85 = v125 + 9;
      }
      *(_DWORD *)v160 = 136315394;
      *(void *)&v160[4] = v80;
      *(_WORD *)&v160[12] = 2080;
      *(void *)&v160[14] = v85;
      _os_log_error_impl(&dword_233120000, v79, OS_LOG_TYPE_ERROR, "Invalid constant \"%s\": \"%s\"", v160, 0x16u);
    }
LABEL_187:
    re::StringID::destroyString((re::StringID *)&v152);
LABEL_188:
    unsigned int v82 = *(_DWORD *)(v4 + 32);
    uint64_t v16 = *(void *)(v4 + 16);
    int v83 = v127;
    if (v82 <= v127 + 1) {
      unsigned int v82 = v127 + 1;
    }
    while (1)
    {
      uint64_t v15 = (v83 + 1);
      if (v82 - 1 == v83) {
        break;
      }
      ++v83;
      unsigned int v84 = v15;
      if ((*(_DWORD *)(v16 + 80 * v15 + 8) & 0x80000000) != 0) {
        goto LABEL_194;
      }
    }
    unsigned int v84 = v82;
LABEL_194:
    LODWORD(v8) = v84;
  }
  while (v7 != v84);
LABEL_12:
  uint64_t v11 = *(unsigned int *)(v4 + 80);
  if (v11)
  {
    uint64_t v12 = 0;
    long long v13 = (int *)(*(void *)(v4 + 64) + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 20;
      if (v14 < 0) {
        break;
      }
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(v4 + 80);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if (v11 != v12)
  {
    uint64_t v86 = v12;
    uint64_t v87 = *(void *)(v4 + 64);
    uint64_t v132 = v5 + 48;
    int v130 = *(_DWORD *)(v4 + 80);
    while (1)
    {
      uint64_t v88 = v87 + 80 * v86;
      int v149 = 3;
      re::StringID::invalid((re::StringID *)v160);
      uint64_t v150 = *(void *)v160 >> 1;
      re::StringID::destroyString((re::StringID *)v160);
      char v151 = 0;
      re::StringID::invalid((re::StringID *)&v152);
      unint64_t v91 = *(void *)(v88 + 24);
      v90 = (unsigned char *)(v88 + 24);
      unint64_t v89 = v91;
      v92 = (re::DynamicString *)(v90 - 8);
      if ((v91 & 1) == 0) {
        break;
      }
      v94 = *(unsigned char **)(v87 + 80 * v86 + 32);
      if (v94)
      {
        LOBYTE(v93) = *v94;
LABEL_208:
        if ((_BYTE)v93)
        {
          uint64_t v93 = (char)v93;
          char v95 = v94[1];
          if (v95)
          {
            v96 = v94 + 2;
            do
            {
              uint64_t v93 = 31 * v93 + v95;
              int v97 = *v96++;
              char v95 = v97;
            }
            while (v97);
          }
          uint64_t v98 = v93 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v98 = 0;
        }
        goto LABEL_215;
      }
      uint64_t v98 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_215:
      uint64_t v150 = v98;
      v160[0] = 46;
      *((void *)&v161 + 1) = 0;
      memset(&v160[8], 0, 24);
      LODWORD(v161) = 0;
      uint64_t v99 = v87 + 80 * v86;
      char v101 = *(unsigned char *)(v99 + 56);
      v100 = (unsigned char *)(v99 + 56);
      if (v101) {
        v102 = *(const char **)(v87 + 80 * v86 + 64);
      }
      else {
        v102 = v90 + 33;
      }
      isEngineDefinedBufferTable = re::TokenizedMember::tokenize(v160, v102);
      if (*(void *)&v160[24] == 2)
      {
        v104 = (re::MaterialManager *)re::TokenizedMember::operator[](2uLL, *((uint64_t *)&v161 + 1), 0);
        isEngineDefinedBufferTable = (unsigned __int8 *)re::MaterialManager::isEngineDefinedBufferTable(v104, v105);
        if (isEngineDefinedBufferTable)
        {
          int v149 = 1;
          v106 = (const char *)re::TokenizedMember::operator[](*(unint64_t *)&v160[24], *((uint64_t *)&v161 + 1), 0);
          uint64_t v11 = 0;
          while (strcmp(re::s_materialTableIDMappings[v11], v106))
          {
            if (++v11 == 168)
            {
              LOBYTE(v11) = 0;
              break;
            }
          }
          char v151 = v11;
          v107 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](*(unint64_t *)&v160[24], *((uint64_t *)&v161 + 1), 1u);
          *(void *)__src = 0;
          v144 = "";
          uint64_t v108 = *(void *)__src;
          v109 = (char *)v144;
          *(void *)__src = 0;
          v144 = "";
          char v110 = (char)v152.var0;
          v111 = v152.var1;
          *(void *)&v152.char var0 = v108;
          v152.var1 = v109;
          *(void *)v156 = v108 & 0xFFFFFFFFFFFFFFFELL | v110 & 1;
          *(void *)&v156[8] = v111;
          re::StringID::destroyString((re::StringID *)v156);
          re::StringID::destroyString((re::StringID *)__src);
          LODWORD(v11) = v130;
          v92 = (re::DynamicString *)(v90 - 8);
        }
      }
      if (v149 == 3)
      {
        v112 = v92;
        v113 = *re::pipelineLogObjects((re *)isEngineDefinedBufferTable);
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          if (*v90) {
            v114 = *(char **)(v87 + 80 * v86 + 32);
          }
          else {
            v114 = (char *)v112 + 9;
          }
          if (*v100) {
            v117 = *(unsigned char **)(v87 + 80 * v86 + 64);
          }
          else {
            v117 = v90 + 33;
          }
          *(_DWORD *)v156 = 136315394;
          *(void *)&v156[4] = v114;
          *(_WORD *)&v156[12] = 2080;
          *(void *)&v156[14] = v117;
          _os_log_error_impl(&dword_233120000, v113, OS_LOG_TYPE_ERROR, "Invalid buffer binding \"%s\": \"%s\"", v156, 0x16u);
        }
      }
      else
      {
        int v135 = v149;
        uint64_t v136 = v150;
        char v137 = v151;
        re::StringID::StringID((re::StringID *)v138, &v152);
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v132, v92, (uint64_t)&v135);
        re::StringID::destroyString((re::StringID *)v138);
        uint64_t v136 = 0;
      }
      re::TokenizedMember::deinit((uint64_t **)v160);
      if (*(void *)&v160[8] && *((void *)&v161 + 1)) {
        (*(void (**)(void))(**(void **)&v160[8] + 40))();
      }
      re::StringID::destroyString((re::StringID *)&v152);
      unsigned int v115 = *(_DWORD *)(a4 + 80);
      uint64_t v87 = *(void *)(a4 + 64);
      if (v115 <= (int)v12 + 1) {
        unsigned int v115 = v12 + 1;
      }
      while (1)
      {
        uint64_t v86 = (v12 + 1);
        if (v115 - 1 == v12) {
          break;
        }
        LODWORD(v12) = v12 + 1;
        unsigned int v116 = v86;
        if ((*(_DWORD *)(v87 + 80 * v86 + 8) & 0x80000000) != 0) {
          goto LABEL_239;
        }
      }
      unsigned int v116 = v115;
LABEL_239:
      LODWORD(v12) = v116;
      if (v11 == v116) {
        return;
      }
    }
    uint64_t v93 = v89 >> 8;
    v94 = v90 + 1;
    goto LABEL_208;
  }
}

unsigned __int8 *re::TokenizedMember::tokenize(unsigned __int8 *this, const char *a2)
{
  if (*a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = this;
    uint64_t v4 = this + 8;
    uint64_t v5 = (re *)(a2 + 2);
    uint64_t v6 = a2 + 1;
    do
    {
      int v7 = *((unsigned __int8 *)v5 - 1);
      if (*((unsigned char *)v5 - 1)) {
        BOOL v8 = v7 == *v3;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        this = (unsigned __int8 *)v5;
        if (v6 != v2)
        {
          int v10 = 0;
          uint64_t v9 = re::globalAllocators(v5);
          int v10 = (char *)(*(uint64_t (**)(uint64_t, int64_t, void))(*(void *)v9[2] + 32))(v9[2], v6 - v2 + 1, 0);
          memcpy(v10, v2, v6 - v2);
          v6[v10 - v2] = 0;
          re::DynamicArray<re::TransitionCondition *>::add(v4, &v10);
          int v7 = *((unsigned __int8 *)v5 - 1);
          this = (unsigned __int8 *)v5;
        }
      }
      else
      {
        this = (unsigned __int8 *)v2;
      }
      uint64_t v5 = (re *)((char *)v5 + 1);
      ++v6;
      uint64_t v2 = (const char *)this;
    }
    while (v7);
  }
  return this;
}

uint64_t re::TokenizedMember::operator[](unint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= a1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 8 * a3);
}

__n128 re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>(uint64_t a1, const re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = *(_DWORD *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      unsigned int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        unsigned int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 104 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 104 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 104 * v12 + 8) = v15 | 0x80000000;
    uint64_t v16 = 104 * v12;
    *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + v16) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v16 + 16), a2);
    uint64_t v17 = *(void *)(a1 + 16) + 104 * v12;
    __n128 result = *(__n128 *)a3;
    long long v18 = *(_OWORD *)(a3 + 16);
    long long v19 = *(_OWORD *)(a3 + 32);
    *(void *)(v17 + 96) = *(void *)(a3 + 48);
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 80) = v19;
    *(__n128 *)(v17 + 48) = result;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 104 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 104 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 16 * v12;
    return v11 + 8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 16 * v9 + 8) != v4)
  {
    uint64_t v9 = *(_DWORD *)(v10 + 16 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 16 * v9;
  return v11 + 8;
}

BOOL re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(void *)(v7 + 16 * v5 + 8) == v3) {
    return 1;
  }
  do
  {
    uint64_t v5 = *(_DWORD *)(v7 + 16 * v5) & 0x7FFFFFFF;
    BOOL result = v5 != 0x7FFFFFFF;
  }
  while (v5 != 0x7FFFFFFF && *(void *)(v7 + 16 * v5 + 8) != v3);
  return result;
}

double re::parseShaderParameterData@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = 0x7FFFFFFFLL;
  long long v19 = 0u;
  long long v20 = 0u;
  unsigned int v21 = 0;
  uint64_t v22 = 0x7FFFFFFFLL;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  int v26 = 0;
  memset(v27, 0, sizeof(v27));
  int v28 = 0;
  memset(v29, 0, sizeof(v29));
  uint64_t v30 = 0x7FFFFFFFLL;
  int v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v33 = 0x7FFFFFFFLL;
  int v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v37 = 0x7FFFFFFFLL;
  re::generateShaderParameterTableBuilder((BOOL)v16, a1, a2, a3);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v15, (uint64_t)v16);
  unsigned int v5 = v21;
  if (v21)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int *)(v20 + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 22;
      if (v8 < 0) {
        break;
      }
      if (v21 == ++v6)
      {
        LODWORD(v6) = v21;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v21 != v6)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v20;
    do
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v15, (re::DynamicString *)(v10 + 88 * v9 + 16), v10 + 88 * v9 + 48);
      uint64_t v10 = v20;
      if (v21 <= (int)v6 + 1) {
        unsigned int v11 = v6 + 1;
      }
      else {
        unsigned int v11 = v21;
      }
      int v12 = v6;
      while (1)
      {
        uint64_t v9 = (v12 + 1);
        if (v11 - 1 == v12) {
          break;
        }
        ++v12;
        LODWORD(v6) = v9;
        if ((*(_DWORD *)(v20 + 88 * v9 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v6) = v11;
LABEL_17:
      ;
    }
    while (v5 != v6);
  }
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = &unk_26E6D3970;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 336) = 0u;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_DWORD *)(a4 + 368) = 0;
  *(void *)(a4 + 384) = 0;
  *(void *)(a4 + 392) = 0;
  *(void *)(a4 + 376) = 0;
  *(_DWORD *)(a4 + 328) = 0;
  *(_OWORD *)(a4 + 312) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_DWORD *)(a4 + 400) = 1;
  *(void *)(a4 + 408) = 0;
  *(void *)(a4 + 416) = 0;
  *(_DWORD *)(a4 + 432) = 0;
  *(void *)(a4 + 424) = 0;
  *(void *)(a4 + 440) = 0;
  *(void *)(a4 + 448) = 0;
  *(_DWORD *)(a4 + 464) = 0;
  *(void *)(a4 + 456) = 0;
  *(void *)(a4 + 512) = 0;
  *(_DWORD *)(a4 + 520) = 0;
  *(_DWORD *)(a4 + 504) = 0;
  *(_OWORD *)(a4 + 488) = 0u;
  *(_OWORD *)(a4 + 472) = 0u;
  re::ShaderParameterTableBuilder::build((re::ShaderParameterTableBuilder *)v16, (void **)a4);
  *(_OWORD *)(a4 + 528) = 0u;
  *(_OWORD *)(a4 + 544) = 0u;
  *(void *)(a4 + 560) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a4 + 568) = 0;
  if ((void)v34)
  {
    if (HIDWORD(v35) <= 3) {
      signed int v13 = 3;
    }
    else {
      signed int v13 = HIDWORD(v35);
    }
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a4 + 528, v34, v13);
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a4 + 528, (uint64_t)&v34);
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a4 + 576, (uint64_t)v15);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v15);
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v34);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v31);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v29[8]);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)v27 + 8);
  if (v23)
  {
    if (*(void *)&v27[0]) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
    *(void *)&v27[0] = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    ++v26;
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v19);
  return re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v16);
}

double re::downgradeShaderParameterDataFromSpring2023@<D0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v31 = 0;
  memset(v30, 0, sizeof(v30));
  uint64_t v32 = 0x7FFFFFFFLL;
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  uint64_t v35 = 0x7FFFFFFFLL;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  memset(v40, 0, sizeof(v40));
  int v39 = 0;
  int v41 = 0;
  memset(v42, 0, sizeof(v42));
  uint64_t v43 = 0x7FFFFFFFLL;
  int v45 = 0;
  memset(v44, 0, sizeof(v44));
  uint64_t v46 = 0x7FFFFFFFLL;
  int v48 = 0;
  memset(v47, 0, sizeof(v47));
  uint64_t v49 = 0x7FFFFFFFLL;
  re::generateShaderParameterTableBuilder((BOOL)v30, 0, (uint64_t)"<downgrade version>", a1);
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  uint64_t v5 = 0;
  if (v4)
  {
    uint64_t v6 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 20;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a1 + 16);
    do
    {
      unint64_t v10 = *(void *)(v9 + 80 * v8 + 24);
      if (v10)
      {
        int v12 = *(unsigned char **)(v9 + 80 * v8 + 32);
        if (!v12)
        {
          uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_19;
        }
        LOBYTE(v9) = *v12;
      }
      else
      {
        unint64_t v11 = v10 >> 8;
        int v12 = (unsigned char *)(v9 + 80 * v8 + 25);
        LOBYTE(v9) = v11;
      }
      if ((_BYTE)v9)
      {
        uint64_t v9 = (char)v9;
        char v13 = v12[1];
        if (v13)
        {
          uint64_t v14 = v12 + 2;
          do
          {
            uint64_t v9 = 31 * v9 + v13;
            int v15 = *v14++;
            char v13 = v15;
          }
          while (v15);
        }
        uint64_t v16 = v9 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v16 = 0;
      }
LABEL_19:
      uint64_t v24 = v16;
      uint64_t v17 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v47, &v24);
      if (v17)
      {
        uint64_t v18 = v17;
        re::ColorGamut4F::as(v17, 0, 3, (uint64_t)&v26);
        if (*(unsigned char *)(v18 + 20) == 20) {
          re::DynamicString::format((re::DynamicString *)"[%f, %f, %f]", (re::DynamicString *)&v24, v26, v27, v28, v23);
        }
        else {
          re::DynamicString::format((re::DynamicString *)"[%f, %f, %f, %f]", (re::DynamicString *)&v24, v26, v27, v28, v29);
        }
        re::DynamicString::operator=((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v8 + 48), (re::DynamicString *)&v24);
        if (v24)
        {
          if (v25) {
            (*(void (**)(void))(*(void *)v24 + 40))();
          }
        }
      }
      unsigned int v19 = *(_DWORD *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 16);
      if (v19 <= (int)v5 + 1) {
        int v20 = v5 + 1;
      }
      else {
        int v20 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v20 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v21 = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_33;
        }
      }
      int v21 = v20;
LABEL_33:
      LODWORD(v5) = v21;
    }
    while (v19 != v21);
  }
  *a2 = 1;
  re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v47);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v44);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v42[8]);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)&v40[1]);
  if (v36)
  {
    if (v40[0]) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    v40[0] = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    ++v39;
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v33);
  return re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v30);
}

void re::parseTextureParameterData(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v150 = a1;
  uint64_t v223 = *MEMORY[0x263EF8340];
  int v154 = 0;
  memset(v153, 0, sizeof(v153));
  uint64_t v155 = 0x7FFFFFFFLL;
  long long v156 = 0u;
  long long v157 = 0u;
  unsigned int v158 = 0;
  uint64_t v159 = 0x7FFFFFFFLL;
  v160[1] = 0;
  uint64_t v161 = 0;
  v160[0] = 0;
  int v162 = 0;
  long long v163 = 0u;
  long long v164 = 0u;
  int v165 = 0;
  memset(v166, 0, sizeof(v166));
  uint64_t v167 = 0x7FFFFFFFLL;
  int v169 = 0;
  memset(v168, 0, sizeof(v168));
  uint64_t v170 = 0x7FFFFFFFLL;
  int v172 = 0;
  memset(v171, 0, sizeof(v171));
  uint64_t v173 = 0x7FFFFFFFLL;
  int v175 = 0;
  memset(v174, 0, sizeof(v174));
  uint64_t v176 = 0x7FFFFFFFLL;
  int v215 = 0;
  long long v213 = 0u;
  long long v214 = 0u;
  uint64_t v216 = 0x7FFFFFFFLL;
  unsigned int v211 = 0;
  long long v209 = 0u;
  long long v210 = 0u;
  uint64_t v212 = 0x7FFFFFFFLL;
  uint64_t v4 = *(unsigned int *)(a2 + 224);
  uint64_t v5 = 0;
  if (v4)
  {
    uint64_t v6 = (int *)(*(void *)(a2 + 208) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 38;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 224);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 208);
    int v147 = *(_DWORD *)(a2 + 224);
    while (1)
    {
      uint64_t v10 = v9 + 152 * v8;
      unint64_t v11 = (re::DynamicString *)(v10 + 16);
      re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)(v10 + 48), (uint64_t)v206);
      unint64_t v12 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)v206);
      unint64_t v13 = v12;
      unint64_t v14 = v12 ^ (v12 >> 30);
      if (!(void)v209) {
        goto LABEL_10;
      }
      unint64_t v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
      uint64_t v16 = *(unsigned int *)(*((void *)&v209 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v210)));
      if (v16 == 0x7FFFFFFF) {
        goto LABEL_10;
      }
      uint64_t v23 = *(unsigned int *)(*((void *)&v209 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v210)));
      if (*(void *)(v210 + 32 * v16 + 16) != v12) {
        break;
      }
LABEL_18:
      id v205 = *(id *)(v210 + 32 * v16 + 24);
      buf[0] = BYTE8(v164);
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)v168, v11, buf);
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)((char *)&v163 + 8), &v205);
      if (v205)
      {

        id v205 = 0;
      }
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>((uint64_t)&v213, v11, (uint64_t)v206);
      uint64_t v3 = a2;
LABEL_38:
      uint64_t v9 = *(void *)(v3 + 208);
      if (*(_DWORD *)(v3 + 224) <= (v5 + 1)) {
        int v30 = v5 + 1;
      }
      else {
        int v30 = *(_DWORD *)(v3 + 224);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v30 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v31 = v8;
        if ((*(_DWORD *)(v9 + 152 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_45;
        }
      }
      int v31 = v30;
LABEL_45:
      LODWORD(v5) = v31;
      if (v4 == v31) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      uint64_t v23 = *(_DWORD *)(v210 + 32 * v23 + 8) & 0x7FFFFFFF;
      if (v23 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v210 + 32 * v23 + 16) == v12)
      {
        uint64_t v24 = *(unsigned int *)(*((void *)&v209 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v210)));
        do
        {
          uint64_t v24 = *(_DWORD *)(v210 + 32 * v24 + 8) & 0x7FFFFFFF;
          uint64_t v16 = 0x7FFFFFFFLL;
          if (v24 == 0x7FFFFFFF) {
            break;
          }
          uint64_t v16 = v24;
        }
        while (*(void *)(v210 + 32 * v24 + 16) != v12);
        goto LABEL_18;
      }
    }
LABEL_10:
    uint64_t v17 = (id *)*((void *)v150 + 6);
    re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v206, &v204);
    id v18 = objc_msgSend(*v17, sel_newSamplerStateWithDescriptor_, v204);
    if (v204)
    {

      id v204 = 0;
    }
    re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>((uint64_t)&v213, v11, (uint64_t)v206);
    unint64_t v19 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
    unint64_t v20 = v19 ^ (v19 >> 31);
    if ((void)v209)
    {
      unint64_t v21 = v20 % DWORD2(v210);
      uint64_t v22 = *(unsigned int *)(*((void *)&v209 + 1) + 4 * v21);
      if (v22 != 0x7FFFFFFF)
      {
        while (*(void *)(v210 + 32 * v22 + 16) != v13)
        {
          uint64_t v22 = *(_DWORD *)(v210 + 32 * v22 + 8) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF) {
            goto LABEL_28;
          }
        }
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
LABEL_28:
    uint64_t v25 = v212;
    if (v212 == 0x7FFFFFFF)
    {
      uint64_t v25 = v211;
      unsigned int v26 = v211;
      if (v211 == DWORD2(v210))
      {
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v209, 2 * HIDWORD(v210));
        unsigned int v26 = v211;
        unint64_t v21 = v20 % DWORD2(v210);
      }
      unsigned int v211 = v26 + 1;
      uint64_t v27 = v210;
      int v28 = *(_DWORD *)(v210 + 32 * v25 + 8);
    }
    else
    {
      uint64_t v27 = v210;
      int v28 = *(_DWORD *)(v210 + 32 * v212 + 8);
      LODWORD(v212) = v28 & 0x7FFFFFFF;
    }
    uint64_t v4 = v27 + 32 * v25;
    *(_DWORD *)(v4 + 8) = v28 | 0x80000000;
    uint64_t v29 = *((void *)&v209 + 1);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(*((void *)&v209 + 1) + 4 * v21) | 0x80000000;
    *(void *)uint64_t v4 = v20;
    *(void *)(v4 + 16) = v13;
    *(void *)(v4 + 24) = v18;
    *(_DWORD *)(v29 + 4 * v21) = v25;
    ++HIDWORD(v210);
    ++HIDWORD(v212);
    LODWORD(v4) = v147;
LABEL_34:
    id v203 = v18;
    buf[0] = BYTE8(v164);
    re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)v168, v11, buf);
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)((char *)&v163 + 8), &v203);
    a1 = (_anonymous_namespace_ *)v203;
    if (v203)
    {

      id v203 = 0;
    }
    uint64_t v3 = a2;
    if (v18) {

    }
    goto LABEL_38;
  }
LABEL_46:
  int v207 = 0;
  memset(v206, 0, sizeof(v206));
  uint64_t v208 = 0x7FFFFFFFLL;
  char v148 = (StringID *)*(unsigned int *)(v3 + 176);
  uint64_t v32 = 0;
  if (v148)
  {
    uint64_t v33 = (int *)(*(void *)(v3 + 160) + 8);
    while (1)
    {
      int v34 = *v33;
      v33 += 40;
      if (v34 < 0) {
        break;
      }
      if (v148 == (StringID *)++v32)
      {
        LODWORD(v32) = *(_DWORD *)(v3 + 176);
        break;
      }
    }
  }
  if (v148 != v32)
  {
    uint64_t v40 = v32;
    uint64_t v41 = *(void *)(v3 + 160);
    while (1)
    {
      uint64_t v42 = v41 + 160 * v40;
      unint64_t v45 = *(void *)(v42 + 24);
      int v44 = (unsigned char *)(v42 + 24);
      unint64_t v43 = v45;
      if ((v45 & 1) == 0) {
        break;
      }
      int v47 = *(unsigned char **)(v41 + 160 * v40 + 32);
      if (v47)
      {
        LOBYTE(v46) = *v47;
LABEL_62:
        if ((_BYTE)v46)
        {
          uint64_t v46 = (char)v46;
          char v48 = v47[1];
          if (v48)
          {
            uint64_t v49 = v47 + 2;
            do
            {
              uint64_t v46 = 31 * v46 + v48;
              int v50 = *v49++;
              char v48 = v50;
            }
            while (v50);
          }
          uint64_t v51 = v46 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v51 = 0;
        }
        goto LABEL_69;
      }
      uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_69:
      *(void *)buf = v51;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)v206, (uint64_t *)buf);
      int v199 = 3;
      re::StringID::invalid((re::StringID *)buf);
      uint64_t v200 = *(void *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      char v201 = 0;
      unint64_t v52 = re::StringID::invalid((re::StringID *)&v202);
      __s = v44 - 8;
      if (*v44) {
        unint64_t v53 = *(const char **)(v41 + 160 * v40 + 32);
      }
      else {
        unint64_t v53 = v44 + 1;
      }
      unint64_t v184 = 0;
      v185[0] = "";
      uint64_t v200 = v184 >> 1;
      v55 = re::MaterialTextureParam::serializationString((re::MaterialTextureParam *)(v44 + 24), v54);
      BOOL isColorTextureParameter = re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)&v184, v56);
      re::tryLoadTexture((re *)&v177, (os_unfair_lock_s **)v150, (AssetService *)v44 + 3, (re::MaterialTextureParam *)isColorTextureParameter);
      int v146 = v55;
      if ((_BYTE)v177)
      {
        re::TextureHandle::TextureHandle((re::TextureHandle *)v198, (const re::TextureHandle *)&v178);
        buf[0] = v161;
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)&v166[8], (re::DynamicString *)__s, buf);
        re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)v160, (re::TextureHandle *)v198);
        re::TextureHandle::invalidate((re::TextureHandle *)v198);
        int v199 = 2;
        v187 = 0;
        v188 = "";
        uint64_t v59 = v187;
        v60 = v188;
        v188 = "";
        v187 = 0;
        char var0 = (char)v202.var0;
        var1 = v202.var1;
        v202.var1 = v60;
        *(void *)&v202.char var0 = v59;
        *(void *)buf = (unint64_t)v59 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *(void *)&buf[8] = var1;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v187);
        char v201 = 0;
      }
      else
      {
        buf[0] = 46;
        v222 = 0;
        *(void *)&buf[16] = 0;
        unint64_t v220 = 0;
        *(void *)&buf[8] = 0;
        int v221 = 0;
        re::TokenizedMember::tokenize(buf, v55);
        if (v220 == 2)
        {
          uint64_t v81 = v222;
          if (re::MaterialManager::isEngineDefinedTextureTable(*v222, v80))
          {
            int v199 = 1;
            unsigned int v82 = (const char *)re::TokenizedMember::operator[](2uLL, (uint64_t)v81, 0);
            uint64_t v83 = 0;
            while (strcmp(re::s_materialTableIDMappings[v83], v82))
            {
              if (++v83 == 168)
              {
                LOBYTE(v83) = 0;
                break;
              }
            }
            char v201 = v83;
            unsigned int v84 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](v220, (uint64_t)v222, 1u);
            unint64_t v217 = 0;
            v218 = "";
            unint64_t v85 = v217;
            uint64_t v86 = (char *)v218;
            unint64_t v217 = 0;
            v218 = "";
            char v87 = (char)v202.var0;
            uint64_t v88 = v202.var1;
            v202.var1 = v86;
            *(void *)&v202.char var0 = v85;
            v188 = v88;
            v187 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFFELL | v87 & 1);
            re::StringID::destroyString((re::StringID *)&v187);
            re::StringID::destroyString((re::StringID *)&v217);
          }
        }
        re::TokenizedMember::deinit((uint64_t **)buf);
        if (*(void *)&buf[8] && v222) {
          (*(void (**)(void))(**(void **)&buf[8] + 40))(*(void *)&buf[8]);
        }
      }
      size_t v63 = (const re::DynamicString *)(v41 + 160 * v40 + 88);
      unint64_t v64 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v63);
      if (!(void)v213
        || (uint64_t v65 = *(unsigned int *)(*((void *)&v213 + 1) + 4 * (v64 % DWORD2(v214))), v65 == 0x7FFFFFFF))
      {
LABEL_79:
        uint64_t v67 = v41 + 160 * v40;
        unint64_t v69 = *(void *)(v67 + 96);
        int v68 = (unsigned char *)(v67 + 96);
        unint64_t v70 = v69 >> 1;
        unint64_t v71 = v69 >> 1;
        if (v69) {
          unint64_t v72 = v70;
        }
        else {
          unint64_t v72 = v71;
        }
        v73 = (const re::DynamicString *)(v44 - 8);
        if (v72)
        {
          v74 = *re::pipelineLogObjects((re *)v64);
          unint64_t v64 = os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
          if (v64)
          {
            if (*v44) {
              v94 = *(unsigned char **)(v41 + 160 * v40 + 32);
            }
            else {
              v94 = v44 + 1;
            }
            if (*v68) {
              uint64_t v95 = *(void *)(v41 + 160 * v40 + 104);
            }
            else {
              uint64_t v95 = v41 + 160 * v40 + 97;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = v94;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v95;
            _os_log_error_impl(&dword_233120000, v74, OS_LOG_TYPE_ERROR, "Invalid sampler binding on texture block \"%s\": \"%s\"", buf, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v66 = v214;
        while (1)
        {
          unint64_t v64 = re::DynamicString::operator==(v66 + 104 * v65 + 16, (uint64_t)v63);
          if (v64) {
            break;
          }
          uint64_t v65 = *(_DWORD *)(v66 + 104 * v65 + 8) & 0x7FFFFFFF;
          if (v65 == 0x7FFFFFFF) {
            goto LABEL_79;
          }
        }
        v73 = (const re::DynamicString *)(v44 - 8);
        re::DynamicString::DynamicString((re::DynamicString *)v197, (const re::DynamicString *)__s);
        re::DynamicString::DynamicString((re::DynamicString *)v196, v63);
        unint64_t v89 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)(v66 + 104 * v65 + 48));
        re::TextureParameterTableBuilder::bindTextureToSampler((uint64_t)v153, (uint64_t)v197, (uint64_t)v196, v89);
        if (*(void *)&v196[0])
        {
          if (BYTE8(v196[0])) {
            (*(void (**)(void))(**(void **)&v196[0] + 40))();
          }
          memset(v196, 0, sizeof(v196));
        }
        unint64_t v64 = *(void *)&v197[0];
        if (*(void *)&v197[0])
        {
          if (BYTE8(v197[0])) {
            unint64_t v64 = (*(uint64_t (**)(void))(**(void **)&v197[0] + 40))();
          }
          memset(v197, 0, sizeof(v197));
        }
      }
      if (*(unsigned char *)(v41 + 160 * v40 + 152))
      {
        uint64_t v75 = v41 + 160 * v40;
        unsigned int v77 = *(_DWORD *)(v75 + 156);
        v76 = (_DWORD *)(v75 + 156);
        if (v77 >= 2)
        {
          v78 = *re::pipelineLogObjects((re *)v64);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            if (*v44) {
              v79 = *(char **)(v41 + 160 * v40 + 32);
            }
            else {
              v79 = (char *)v73 + 9;
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&buf[4] = v79;
            _os_log_impl(&dword_233120000, v78, OS_LOG_TYPE_DEFAULT, "Texture block \"%s\" has uv index > 1; this will be clamped to 1 in RE Pbr materials",
              buf,
              0xCu);
          }
        }
        re::DynamicString::DynamicString((re::DynamicString *)v195, v73);
        *(_DWORD *)buf = *v76;
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<unsigned int &>((uint64_t)v174, (re::DynamicString *)v195, buf);
        unint64_t v64 = *(void *)&v195[0];
        if (*(void *)&v195[0])
        {
          if (BYTE8(v195[0])) {
            unint64_t v64 = (*(uint64_t (**)(void))(**(void **)&v195[0] + 40))();
          }
          memset(v195, 0, sizeof(v195));
        }
      }
      if (v199 == 3)
      {
        v90 = *re::pipelineLogObjects((re *)v64);
        uint64_t v3 = a2;
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          if (*v44) {
            unint64_t v91 = *(char **)(v41 + 160 * v40 + 32);
          }
          else {
            unint64_t v91 = (char *)v73 + 9;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = v91;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v146;
          _os_log_error_impl(&dword_233120000, v90, OS_LOG_TYPE_ERROR, "Invalid texture binding \"%s\": \"%s\"", buf, 0x16u);
        }
      }
      else
      {
        int v191 = v199;
        uint64_t v192 = v200;
        char v193 = v201;
        re::StringID::StringID((re::StringID *)v194, &v202);
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v153, v73, (uint64_t)&v191);
        re::StringID::destroyString((re::StringID *)v194);
        uint64_t v192 = 0;
        uint64_t v3 = a2;
      }
      if ((_BYTE)v177) {
        re::TextureHandle::invalidate((re::TextureHandle *)&v178);
      }
      re::StringID::destroyString((re::StringID *)&v184);
      re::StringID::destroyString((re::StringID *)&v202);
      unsigned int v92 = *(_DWORD *)(v3 + 176);
      uint64_t v41 = *(void *)(v3 + 160);
      if (v92 <= (int)v32 + 1) {
        unsigned int v92 = v32 + 1;
      }
      while (1)
      {
        uint64_t v40 = (v32 + 1);
        if (v92 - 1 == v32) {
          break;
        }
        LODWORD(v32) = v32 + 1;
        unsigned int v93 = v40;
        if ((*(_DWORD *)(v41 + 160 * v40 + 8) & 0x80000000) != 0) {
          goto LABEL_126;
        }
      }
      unsigned int v93 = v92;
LABEL_126:
      LODWORD(v32) = v93;
      if (v148 == v93) {
        goto LABEL_52;
      }
    }
    uint64_t v46 = v43 >> 8;
    int v47 = v44 + 1;
    goto LABEL_62;
  }
LABEL_52:
  v189 = 0;
  v188 = 0;
  uint64_t v190 = 0;
  uint64_t v35 = (re *)re::DynamicString::setCapacity(&v187, 0);
  uint64_t v36 = *(unsigned int *)(v3 + 128);
  if (v36)
  {
    uint64_t v37 = 0;
    uint64_t v38 = (int *)(*(void *)(v3 + 112) + 8);
    while (1)
    {
      int v39 = *v38;
      v38 += 22;
      if (v39 < 0) {
        break;
      }
      if (v36 == ++v37)
      {
        LODWORD(v37) = *(_DWORD *)(v3 + 128);
        break;
      }
    }
  }
  else
  {
    LODWORD(v37) = 0;
  }
  if (v36 != v37)
  {
    uint64_t v103 = v37;
    uint64_t v104 = *(void *)(v3 + 112);
    while (1)
    {
      uint64_t v105 = v104 + 88 * v103;
      unint64_t v108 = *(void *)(v105 + 24);
      v107 = (unsigned char *)(v105 + 24);
      unint64_t v106 = v108;
      if ((v108 & 1) == 0) {
        break;
      }
      char v110 = *(unsigned char **)(v104 + 88 * v103 + 32);
      if (v110)
      {
        LOBYTE(v109) = *v110;
LABEL_156:
        if ((_BYTE)v109)
        {
          uint64_t v109 = (char)v109;
          char v111 = v110[1];
          if (v111)
          {
            v112 = v110 + 2;
            do
            {
              uint64_t v109 = 31 * v109 + v111;
              int v113 = *v112++;
              char v111 = v113;
            }
            while (v113);
          }
          uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v114 = 0;
        }
        goto LABEL_163;
      }
      uint64_t v114 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_163:
      *(void *)buf = v114;
      if (re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)v206, (uint64_t *)buf))
      {
        if (*v107) {
          unsigned int v115 = *(const char **)(v104 + 88 * v103 + 32);
        }
        else {
          unsigned int v115 = v107 + 1;
        }
        uint64_t v35 = (re *)re::DynamicString::appendf((re::DynamicString *)&v187, "%s, ", v115);
      }
      else
      {
        int v199 = 3;
        re::StringID::invalid((re::StringID *)buf);
        uint64_t v200 = *(void *)buf >> 1;
        re::StringID::destroyString((re::StringID *)buf);
        char v201 = 0;
        unsigned int v116 = re::StringID::invalid((re::StringID *)&v202);
        if (*v107) {
          v117 = *(const char **)(v104 + 88 * v103 + 32);
        }
        else {
          v117 = v107 + 1;
        }
        v186[0] = 0;
        v186[1] = "";
        uint64_t v200 = v186[0] >> 1;
        __sa = re::MaterialTextureParam::serializationString((re::MaterialTextureParam *)(v107 + 24), v118);
        if (!strcmp(__sa, "null"))
        {
          int v199 = 1;
          char v201 = 0;
          re::StringID::destroyString((re::StringID *)&v202);
          v202.var1 = "null";
          *(void *)&v202.char var0 = 6785806;
        }
        else
        {
          BOOL v120 = re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)v186, v119);
          re::tryLoadTexture((re *)&v184, (os_unfair_lock_s **)v150, (AssetService *)v107 + 3, (re::MaterialTextureParam *)v120);
          if ((_BYTE)v184)
          {
            re::TextureHandle::TextureHandle((re::TextureHandle *)v183, (const re::TextureHandle *)v185);
            buf[0] = v161;
            re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)&v166[8], (re::DynamicString *)(v107 - 8), buf);
            re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)v160, (re::TextureHandle *)v183);
            re::TextureHandle::invalidate((re::TextureHandle *)v183);
            int v199 = 2;
            unint64_t v217 = 0;
            v218 = "";
            unint64_t v122 = v217;
            v123 = (char *)v218;
            unint64_t v217 = 0;
            v218 = "";
            char v124 = (char)v202.var0;
            uint64_t v125 = v202.var1;
            v202.var1 = v123;
            *(void *)&v202.char var0 = v122;
            *(void *)buf = v122 & 0xFFFFFFFFFFFFFFFELL | v124 & 1;
            *(void *)&buf[8] = v125;
            re::StringID::destroyString((re::StringID *)buf);
            re::StringID::destroyString((re::StringID *)&v217);
            char v201 = 0;
          }
          else
          {
            buf[0] = 46;
            v222 = 0;
            *(void *)&buf[16] = 0;
            unint64_t v220 = 0;
            *(void *)&buf[8] = 0;
            int v221 = 0;
            re::TokenizedMember::tokenize(buf, __sa);
            if (v220 == 2)
            {
              uint64_t v132 = v222;
              if (re::MaterialManager::isEngineDefinedTextureTable(*v222, v131))
              {
                int v199 = 1;
                uint64_t v133 = (const char *)re::TokenizedMember::operator[](2uLL, (uint64_t)v132, 0);
                uint64_t v134 = 0;
                while (strcmp(re::s_materialTableIDMappings[v134], v133))
                {
                  if (++v134 == 168)
                  {
                    LOBYTE(v134) = 0;
                    break;
                  }
                }
                char v201 = v134;
                int v135 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](v220, (uint64_t)v222, 1u);
                uint64_t v181 = 0;
                v182 = "";
                uint64_t v136 = v181;
                char v137 = (char *)v182;
                v182 = "";
                uint64_t v181 = 0;
                char v138 = (char)v202.var0;
                int v139 = v202.var1;
                v202.var1 = v137;
                *(void *)&v202.char var0 = v136;
                unint64_t v217 = v136 & 0xFFFFFFFFFFFFFFFELL | v138 & 1;
                v218 = v139;
                re::StringID::destroyString((re::StringID *)&v217);
                re::StringID::destroyString((re::StringID *)&v181);
                uint64_t v3 = a2;
              }
            }
            re::TokenizedMember::deinit((uint64_t **)buf);
            v126 = *(re **)&buf[8];
            if (*(void *)&buf[8] && v222) {
              v126 = (re *)(*(uint64_t (**)(void))(**(void **)&buf[8] + 40))(*(void *)&buf[8]);
            }
          }
          if ((_BYTE)v184) {
            re::TextureHandle::invalidate((re::TextureHandle *)v185);
          }
        }
        if (v199 == 3)
        {
          int v127 = *re::pipelineLogObjects(v126);
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
          {
            if (*v107) {
              v128 = *(unsigned char **)(v104 + 88 * v103 + 32);
            }
            else {
              v128 = v107 + 1;
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = v128;
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = __sa;
            _os_log_error_impl(&dword_233120000, v127, OS_LOG_TYPE_ERROR, "Invalid texture binding \"%s\": \"%s\"", buf, 0x16u);
          }
        }
        else
        {
          int v177 = v199;
          uint64_t v178 = v200;
          char v179 = v201;
          re::StringID::StringID((re::StringID *)v180, &v202);
          re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v153, (re::DynamicString *)(v107 - 8), (uint64_t)&v177);
          re::StringID::destroyString((re::StringID *)v180);
          uint64_t v178 = 0;
        }
        re::StringID::destroyString((re::StringID *)v186);
        re::StringID::destroyString((re::StringID *)&v202);
      }
      unsigned int v129 = *(_DWORD *)(v3 + 128);
      uint64_t v104 = *(void *)(v3 + 112);
      if (v129 <= (int)v37 + 1) {
        unsigned int v129 = v37 + 1;
      }
      while (1)
      {
        uint64_t v103 = (v37 + 1);
        if (v129 - 1 == v37) {
          break;
        }
        LODWORD(v37) = v37 + 1;
        unsigned int v130 = v103;
        if ((*(_DWORD *)(v104 + 88 * v103 + 8) & 0x80000000) != 0) {
          goto LABEL_189;
        }
      }
      unsigned int v130 = v129;
LABEL_189:
      LODWORD(v37) = v130;
      if (v36 == v130) {
        goto LABEL_139;
      }
    }
    uint64_t v109 = v106 >> 8;
    char v110 = v107 + 1;
    goto LABEL_156;
  }
LABEL_139:
  char v96 = (char)v188;
  unint64_t v97 = (unint64_t)v188 >> 1;
  if ((v188 & 1) == 0) {
    unint64_t v97 = v188 >> 1;
  }
  if (v97)
  {
    uint64_t v98 = *re::pipelineLogObjects(v35);
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      v144 = v189;
      if ((v96 & 1) == 0) {
        v144 = (char *)&v188 + 1;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = v144;
      _os_log_debug_impl(&dword_233120000, v98, OS_LOG_TYPE_DEBUG, "Duplicate texture keys found: %s using TextureBlock entries", buf, 0xCu);
    }
  }
  if (v187 && (v188 & 1) != 0) {
    (*(void (**)(void))(*v187 + 40))();
  }
  re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v206);
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v209);
  re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v213);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v206, (uint64_t)v153);
  unsigned int v99 = v158;
  if (v158)
  {
    uint64_t v100 = 0;
    char v101 = (int *)(v157 + 8);
    while (1)
    {
      int v102 = *v101;
      v101 += 22;
      if (v102 < 0) {
        break;
      }
      if (v158 == ++v100)
      {
        LODWORD(v100) = v158;
        break;
      }
    }
  }
  else
  {
    LODWORD(v100) = 0;
  }
  if (v158 != v100)
  {
    uint64_t v140 = v100;
    uint64_t v141 = v157;
    do
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v206, (re::DynamicString *)(v141 + 88 * v140 + 16), v141 + 88 * v140 + 48);
      uint64_t v141 = v157;
      if (v158 <= (int)v100 + 1) {
        unsigned int v142 = v100 + 1;
      }
      else {
        unsigned int v142 = v158;
      }
      int v143 = v100;
      while (1)
      {
        uint64_t v140 = (v143 + 1);
        if (v142 - 1 == v143) {
          break;
        }
        ++v143;
        LODWORD(v100) = v140;
        if ((*(_DWORD *)(v157 + 88 * v140 + 8) & 0x80000000) != 0) {
          goto LABEL_214;
        }
      }
      LODWORD(v100) = v142;
LABEL_214:
      ;
    }
    while (v99 != v100);
  }
  *(void *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a3 + 128) = &unk_26E6D78A0;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 316) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  re::TextureParameterTableBuilder::build((re::TextureParameterTableBuilder *)v153, (re::TextureParameterTable *)a3);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a3 + 480, (uint64_t)v206);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v206);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v174);
  re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v171);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v168);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v166[8]);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v163 + 8);
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)v160);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v156);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v153);
}

uint64_t re::parseConstant(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, int a4, __int16 a5, uint64_t a6)
{
  unint64_t v11 = a1;
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  re::DynamicString::setCapacity(&v63, 0);
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  long long __dst = 0;
  size_t v12 = strlen(a3);
  *(void *)&v74[0] = a3;
  *((void *)&v74[0] + 1) = v12;
  unint64_t v13 = re::DynamicString::operator=((re::DynamicString *)&v63, (uint64_t)v74);
  LOWORD(v67) = a4;
  HIWORD(v67) = a5;
  if (a4 == 53)
  {
    if (*(unsigned char *)(a6 + 8)) {
      unint64_t v14 = *(re **)(a6 + 16);
    }
    else {
      unint64_t v14 = (re *)(a6 + 9);
    }
    re::stringToLowerCase(v14, (re::DynamicString *)&v61);
    uint64_t v16 = re::DynamicString::find((re::DynamicString *)&v61, "true", 4, 0, (uint64_t)v74);
    if (BYTE8(v61)) {
      uint64_t v17 = *((void *)&v61 + 1) >> 1;
    }
    else {
      uint64_t v17 = BYTE8(v61) >> 1;
    }
    if (LOBYTE(v74[0]) && *((void *)&v74[0] + 1) != v17
      || ((uint64_t v16 = re::DynamicString::find((re::DynamicString *)&v61, "1", 1, 0, (uint64_t)v71), (BYTE8(v61) & 1) != 0)
        ? (uint64_t v18 = *((void *)&v61 + 1) >> 1)
        : (uint64_t v18 = BYTE8(v61) >> 1),
          v71[0] && *(void *)&v71[8] != v18))
    {
      char v19 = 1;
      if (!v69)
      {
        *(void *)&long long v57 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        memset(v74, 0, sizeof(v74));
        unint64_t v11 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v71 = 136315906;
        *(void *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 468;
        *(_WORD *)&v71[18] = 2048;
        *(void *)&v71[20] = 0;
        __int16 v72 = 2048;
        *(void *)v73 = 0;
        _os_log_send_and_compose_impl();
        unint64_t v13 = (_anonymous_namespace_ *)_os_crash_msg();
        __break(1u);
        goto LABEL_20;
      }
LABEL_75:
      *(unsigned char *)long long __dst = v19;
      uint64_t v36 = v61;
      if (void)v61 && (BYTE8(v61))
      {
        uint64_t v37 = v62;
        goto LABEL_98;
      }
      goto LABEL_106;
    }
    uint64_t v33 = re::DynamicString::find((re::DynamicString *)&v61, "false", 5, 0, (uint64_t)v74);
    if (BYTE8(v61)) {
      uint64_t v34 = *((void *)&v61 + 1) >> 1;
    }
    else {
      uint64_t v34 = BYTE8(v61) >> 1;
    }
    if (LOBYTE(v74[0]) && *((void *)&v74[0] + 1) != v34
      || ((uint64_t v33 = re::DynamicString::find((re::DynamicString *)&v61, "0", 1, 0, (uint64_t)v71), (BYTE8(v61) & 1) != 0)
        ? (uint64_t v35 = *((void *)&v61 + 1) >> 1)
        : (uint64_t v35 = BYTE8(v61) >> 1),
          v71[0] && *(void *)&v71[8] != v35))
    {
      if (!v69)
      {
        *(void *)&long long v57 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        memset(v74, 0, sizeof(v74));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v71 = 136315906;
        *(void *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 468;
        *(_WORD *)&v71[18] = 2048;
        *(void *)&v71[20] = 0;
        __int16 v72 = 2048;
        *(void *)v73 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      char v19 = 0;
      goto LABEL_75;
    }
    re::DynamicString::format((re::DynamicString *)"Type mismatch between function constant and material: %s[%s], %s", (re::DynamicString *)v74, a3, "BOOL", a2);
    long long v49 = v74[0];
    long long v50 = v74[1];
    *(unsigned char *)unint64_t v11 = 0;
    *(_OWORD *)((char *)v11 + 8) = v49;
    *(_OWORD *)((char *)v11 + 24) = v50;
    uint64_t v51 = v61;
    if (!(void)v61 || (BYTE8(v61) & 1) == 0) {
      goto LABEL_107;
    }
    uint64_t v52 = v62;
LABEL_130:
    (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 40))(v51, v52);
    goto LABEL_107;
  }
  if ((a4 - 3) > 3)
  {
LABEL_20:
    if (a4 == 33)
    {
      if (*(unsigned char *)(a6 + 8)) {
        uint64_t v38 = *(const char **)(a6 + 16);
      }
      else {
        uint64_t v38 = (const char *)(a6 + 9);
      }
      int v44 = strtoul(v38, 0, 0);
      *(_DWORD *)long long __dst = v44;
      goto LABEL_106;
    }
    if (a4 == 29)
    {
      if (*(unsigned char *)(a6 + 8)) {
        unint64_t v20 = *(const char **)(a6 + 16);
      }
      else {
        unint64_t v20 = (const char *)(a6 + 9);
      }
      int v43 = atoi(v20);
      *(_DWORD *)long long __dst = v43;
      goto LABEL_106;
    }
    re::DynamicString::format((re::DynamicString *)"Unsupported type provided data for function constant in material: %s, %s", (re::DynamicString *)v74, a3, a2);
    long long v39 = v74[0];
    long long v40 = v74[1];
    *(unsigned char *)unint64_t v11 = 0;
    *(_OWORD *)((char *)v11 + 8) = v39;
    *(_OWORD *)((char *)v11 + 24) = v40;
    goto LABEL_107;
  }
  *((void *)&v75 + 1) = 0;
  memset((char *)v74 + 8, 0, 24);
  LODWORD(v75) = 0;
  LOBYTE(v74[0]) = 44;
  long long v61 = 0u;
  long long v62 = 0u;
  re::DynamicString::setCapacity(&v61, 0);
  if (*(unsigned char *)(a6 + 8)) {
    unint64_t v15 = *(unsigned __int8 **)(a6 + 16);
  }
  else {
    unint64_t v15 = (unsigned __int8 *)(a6 + 9);
  }
  do
  {
    int v22 = *v15++;
    int v21 = v22;
  }
  while (v22 == 32);
  if (v21 == 91) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = -1;
  }
  while (1)
  {
    int v24 = v15[v23];
    if (v24 == 32) {
      goto LABEL_33;
    }
    if (!v15[v23] || v24 == 93) {
      break;
    }
    v71[0] = v15[v23];
    re::DynamicString::append((re::DynamicString *)&v61, v71, 1uLL);
LABEL_33:
    ++v23;
  }
  if (BYTE8(v61)) {
    uint64_t v25 = (const char *)v62;
  }
  else {
    uint64_t v25 = (const char *)((unint64_t)&v61 | 9);
  }
  unsigned int v26 = (_anonymous_namespace_ *)re::TokenizedMember::tokenize((unsigned __int8 *)v74, v25);
  *(void *)&v73[2] = 0;
  memset(v71, 0, sizeof(v71));
  if (!*((void *)&v74[1] + 1)) {
    goto LABEL_90;
  }
  uint64_t v27 = 0;
  while (2)
  {
    int v28 = *(const char **)(*((void *)&v75 + 1) + 8 * v27);
    if (!strcasecmp(v28, "true"))
    {
      LOBYTE(v57) = 1;
LABEL_49:
      uint64_t v29 = &v57;
      goto LABEL_56;
    }
    if (!strcasecmp(v28, "false"))
    {
      LOBYTE(v57) = 0;
      goto LABEL_49;
    }
    LODWORD(v57) = 0;
    LODWORD(v57) = strtof(v28, 0);
    while ((v71[16] & 3) != 0)
    {
      char v60 = 0;
      re::DynamicArray<unsigned char>::add(v71, &v60);
    }
    re::DynamicArray<unsigned char>::add(v71, &v57);
    re::DynamicArray<unsigned char>::add(v71, (unsigned char *)&v57 + 1);
    re::DynamicArray<unsigned char>::add(v71, (unsigned char *)&v57 + 2);
    unsigned int v26 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::add(v71, (unsigned char *)&v57 + 3);
    if (*((void *)&v74[1] + 1) == 3)
    {
      if ((-1431655765 * v27 - 1431655766) > 0x55555554) {
        goto LABEL_57;
      }
LABEL_55:
      char v60 = 0;
      re::DynamicArray<unsigned char>::add(v71, &v60);
      char v60 = 0;
      re::DynamicArray<unsigned char>::add(v71, &v60);
      char v60 = 0;
      re::DynamicArray<unsigned char>::add(v71, &v60);
      char v60 = 0;
      uint64_t v29 = (long long *)&v60;
LABEL_56:
      unsigned int v26 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::add(v71, v29);
      goto LABEL_57;
    }
    if ((-1431655765 * v27 - 1431655766) <= 0x55555554 && *((void *)&v74[1] + 1) == 9) {
      goto LABEL_55;
    }
LABEL_57:
    if (*((void *)&v74[1] + 1) > (unint64_t)++v27) {
      continue;
    }
    break;
  }
  if (*((void *)&v74[1] + 1) != 1)
  {
    int v31 = a3;
    uint64_t v32 = a2;
    if ((*((void *)&v74[1] + 1) != 2 || (unsigned __int16)v67 == 4)
      && (*((void *)&v74[1] + 1) != 3 || (unsigned __int16)v67 == 5)
      && (*((void *)&v74[1] + 1) != 4 || (unsigned __int16)v67 == 6))
    {
      goto LABEL_90;
    }
    if ((unsigned __int16)v67 == 3)
    {
      uint64_t v41 = 1;
LABEL_119:
      if (*(unsigned char *)(a6 + 8)) {
        uint64_t v53 = *(void *)(a6 + 16);
      }
      else {
        uint64_t v53 = a6 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"Incorrect data for float type function constant: %s[%s%u], %s[%s]", (re::DynamicString *)&v57, v31, "float", v41, v32, v53);
      long long v54 = v57;
      uint64_t v55 = v58;
      uint64_t v56 = v59;
      *(unsigned char *)unint64_t v11 = 0;
      *(_OWORD *)((char *)v11 + 8) = v54;
      *((void *)v11 + 3) = v55;
      *((void *)v11 + 4) = v56;
      if (*(void *)v71 && *(void *)&v73[2]) {
        (*(void (**)(void))(**(void **)v71 + 40))();
      }
      if (void)v61 && (BYTE8(v61)) {
        (*(void (**)(void))(*(void *)v61 + 40))();
      }
      re::TokenizedMember::deinit((uint64_t **)v74);
      uint64_t v51 = *((void *)&v74[0] + 1);
      if (!*((void *)&v74[0] + 1)) {
        goto LABEL_107;
      }
      uint64_t v52 = *((void *)&v75 + 1);
      if (!*((void *)&v75 + 1)) {
        goto LABEL_107;
      }
      goto LABEL_130;
    }
    if ((unsigned __int16)v67 != 4)
    {
LABEL_99:
      if ((unsigned __int16)v67 == 5) {
        uint64_t v41 = 3;
      }
      else {
        uint64_t v41 = 4;
      }
      goto LABEL_119;
    }
LABEL_89:
    uint64_t v41 = 2;
    goto LABEL_119;
  }
  int v31 = a3;
  uint64_t v32 = a2;
  if ((unsigned __int16)v67 == 3) {
    goto LABEL_90;
  }
  if ((unsigned __int16)v67 == 4) {
    goto LABEL_89;
  }
  if ((unsigned __int16)v67 != 53) {
    goto LABEL_99;
  }
LABEL_90:
  uint64_t v42 = *(void *)&v71[16];
  memcpy(__dst, *(const void **)&v73[2], *(size_t *)&v71[16]);
  if (*(void *)v71 && *(void *)&v73[2]) {
    (*(void (**)(void))(**(void **)v71 + 40))();
  }
  if (void)v61 && (BYTE8(v61)) {
    (*(void (**)(void))(*(void *)v61 + 40))();
  }
  re::TokenizedMember::deinit((uint64_t **)v74);
  uint64_t v36 = *((void *)&v74[0] + 1);
  if (*((void *)&v74[0] + 1))
  {
    uint64_t v37 = *((void *)&v75 + 1);
    if (*((void *)&v75 + 1)) {
LABEL_98:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 40))(v36, v37);
  }
LABEL_106:
  re::DynamicString::DynamicString((re::DynamicString *)v74, (const re::DynamicString *)&v63);
  LODWORD(v75) = v67;
  re::FixedArray<unsigned char>::FixedArray((void *)&v75 + 1, &v68);
  *(unsigned char *)unint64_t v11 = 1;
  uint64_t v45 = *((void *)&v74[1] + 1);
  *((void *)v11 + 1) = *(void *)&v74[0];
  *((void *)v11 + 4) = v45;
  *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)v74 + 8);
  memset(v74, 0, sizeof(v74));
  *((_DWORD *)v11 + 10) = v75;
  uint64_t v46 = *((void *)&v75 + 1);
  unint64_t v47 = v76;
  *((void *)&v75 + 1) = 0;
  *(void *)&long long v76 = 0;
  *((void *)v11 + 6) = v46;
  *(_OWORD *)((char *)v11 + 56) = __PAIR128__(*((unint64_t *)&v76 + 1), v47);
LABEL_107:
  if (v68)
  {
    if (v69)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v68 + 40))(v68, __dst);
      uint64_t v69 = 0;
      long long __dst = 0;
    }
    uint64_t v68 = 0;
  }
  uint64_t result = (uint64_t)v63;
  if (v63)
  {
    if (v64) {
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v63 + 40))(v63, v65);
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2)) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v7 + 48;
}

double re::parseFunctionConstants@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  int v108 = 0;
  long long v106 = 0u;
  long long v107 = 0u;
  uint64_t v109 = 0x7FFFFFFFLL;
  unint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  re::DynamicString::setCapacity(&v102, 0);
  uint64_t v13 = *(unsigned int *)(a2 + 32);
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v16 = *v15;
      v15 += 8;
      if (v16 < 0) {
        break;
      }
      if (v13 == ++v14)
      {
        LODWORD(v14) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if (v13 == v14)
  {
LABEL_136:
    uint64_t v83 = (uint64_t *)re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)buf, (uint64_t)&v106);
    *(unsigned char *)a9 = 1;
    *(_DWORD *)(a9 + 48) = 0;
    *(_OWORD *)(a9 + 8) = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    *(void *)(a9 + 24) = *(void *)&buf[16];
    *(void *)&buf[16] = 0;
    *(_OWORD *)(a9 + 32) = *(_OWORD *)&buf[24];
    *(_OWORD *)&unsigned char buf[24] = xmmword_23436F740;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v83);
    goto LABEL_138;
  }
  char v86 = 0;
  uint64_t v17 = v14;
  uint64_t v85 = a9;
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v89 = (uint64_t)(a4 + 8);
  char v88 = a8;
  int v95 = *(_DWORD *)(a2 + 32);
  uint64_t v91 = a2;
  do
  {
    uint64_t v19 = v18 + 32 * v17;
    int v21 = *(const char **)(v19 + 16);
    unint64_t v20 = (const char **)(v19 + 16);
    int v22 = (id *)(v20 + 1);
    uint64_t v23 = (_anonymous_namespace_ *)objc_msgSend((id)v20[1], sel_index);
    uint64_t v24 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)buf);
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
    }
    BOOL v25 = (unint64_t)v23 < 0x10001 && v24 == 0;
    unsigned int v26 = &selRef_stepFunction_0;
    if (v25)
    {
      uint64_t v27 = (_anonymous_namespace_ *)snprintf(__str, 6uLL, "%lu", v23);
      uint64_t v24 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)buf);
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
      }
      unsigned int v26 = &selRef_stepFunction_0;
    }
    if (!v24)
    {
      uint64_t v32 = a3;
      uint64_t v33 = *v20;
      uint64_t v34 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_index);
      if (*a4 && *(unsigned char *)a5)
      {
        unint64_t v35 = (unint64_t)v34;
        uint64_t v36 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v89, (uint64_t)buf);
        if (*(void *)buf && (buf[8] & 1) != 0) {
          (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
        }
        if (v35 < 0x10001 && !v36)
        {
          uint64_t v37 = (_anonymous_namespace_ *)snprintf(__str, 6uLL, "%lu", v35);
          uint64_t v36 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v89, (uint64_t)buf);
          if (*(void *)buf)
          {
            if (buf[8]) {
              (*(void (**)(void, void))(**(void **)buf + 40))(*(void *)buf, *(void *)&buf[16]);
            }
          }
        }
        if (v36)
        {
          uint64_t v38 = *(void *)(a5 + 40);
          if (v38)
          {
            uint64_t v39 = *(void *)v36;
            int v40 = *(unsigned __int16 *)(v36 + 8);
            TypeSize = (_anonymous_namespace_ *)re::mtl::getTypeSize(v40);
            int v42 = (int)TypeSize;
            size_t v43 = (int)TypeSize;
            memset(v111, 0, 24);
            if (*(void *)&v111[8] < (unint64_t)v42)
            {
              re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Too much data to copy.", "requiredSize <= m_size", "copy", 363);
              _os_crash();
              __break(1u);
LABEL_143:
              uint64_t v110 = 0;
              long long v115 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)char v111 = 136315906;
              *(void *)&v111[4] = "operator[]";
              *(_WORD *)&v111[12] = 1024;
              *(_DWORD *)&v111[14] = 468;
              *(_WORD *)&v111[18] = 2048;
              *(void *)&v111[20] = 0;
              __int16 v112 = 2048;
              uint64_t v113 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            if (v43) {
              memmove(*(void **)&v111[16], (const void *)(v38 + v39), v43);
            }
            uint64_t v45 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_index);
            __int16 v46 = (__int16)v45;
            unint64_t v47 = *v20;
            *(_WORD *)&buf[32] = v40;
            *(_WORD *)&buf[34] = v46;
            *(_OWORD *)&buf[40] = *(_OWORD *)v111;
            uint64_t v49 = *(void *)&v111[16];
            memset(v111, 0, 24);
            *(void *)&buf[56] = v49;
            long long v50 = *v20;
            unint64_t v51 = re::Hash<re::DynamicString>::operator()((uint64_t)&v110, (uint64_t)__str);
            unint64_t v52 = v51;
            if ((void)v106)
            {
              unint64_t v53 = v51 % DWORD2(v107);
              uint64_t v54 = *(unsigned int *)(*((void *)&v106 + 1) + 4 * v53);
              a8 = v88;
              a3 = v32;
              if (v54 != 0x7FFFFFFF)
              {
                uint64_t v55 = v107;
                a2 = v91;
                while (!re::DynamicString::operator==(v55 + 112 * v54 + 16, (uint64_t)__str))
                {
                  uint64_t v54 = *(_DWORD *)(v55 + 112 * v54 + 8) & 0x7FFFFFFF;
                  if (v54 == 0x7FFFFFFF) {
                    goto LABEL_89;
                  }
                }
LABEL_90:
                if (*(void *)__str && (__str[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)__str + 40))();
                }
                LODWORD(v13) = v95;
                if (*(void *)&buf[40])
                {
                  if (*(void *)&buf[48])
                  {
                    (*(void (**)(void))(**(void **)&buf[40] + 40))();
                    *(_OWORD *)&buf[48] = 0uLL;
                  }
                  *(void *)&buf[40] = 0;
                }
                if (*(void *)buf && (buf[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)buf + 40))();
                }
                uint64_t v73 = *(void *)v111;
                if (!*(void *)v111 || !*(void *)&v111[8]) {
                  goto LABEL_27;
                }
                uint64_t v74 = *(void *)&v111[16];
                goto LABEL_128;
              }
            }
            else
            {
              LODWORD(v53) = 0;
              a8 = v88;
              a3 = v32;
            }
            a2 = v91;
LABEL_89:
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v106, v53, v52, (re::DynamicString *)__str, (uint64_t)buf);
            ++HIDWORD(v109);
            goto LABEL_90;
          }
        }
      }
      if (a6 && (uint64_t v56 = *(void *)(a6 + 8)) != 0)
      {
        long long v57 = *v20;
        uint64_t v58 = (v56 << 6) - 64;
        uint64_t v59 = (const char **)(*(void *)(a6 + 16) + 16);
        do
        {
          if ((unint64_t)*(v59 - 1)) {
            char v60 = *v59;
          }
          else {
            char v60 = (char *)v59 - 7;
          }
          int v61 = strcmp(v60, v57);
          BOOL v62 = v61 == 0;
          if (v61) {
            BOOL v63 = v58 == 0;
          }
          else {
            BOOL v63 = 1;
          }
          v58 -= 64;
          v59 += 8;
        }
        while (!v63);
        a8 = v88;
        a3 = v32;
        LODWORD(v13) = v95;
      }
      else
      {
        BOOL v62 = 0;
        a3 = v32;
      }
      a2 = v91;
      if (a8) {
        goto LABEL_27;
      }
      uint64_t v64 = (re *)objc_msgSend(*v22, sel_required);
      if ((v62 | v64 ^ 1)) {
        goto LABEL_27;
      }
      if (a7)
      {
        if (v103) {
          unint64_t v65 = v103 >> 1;
        }
        else {
          unint64_t v65 = v103 >> 1;
        }
        if (!v65) {
          re::DynamicString::append((re::DynamicString *)&v102, "Missing required function constants: ", 0x25uLL);
        }
        if (v86) {
          re::DynamicString::append((re::DynamicString *)&v102, ", ", 2uLL);
        }
        re::DynamicString::appendf((re::DynamicString *)&v102, "%s", *v20);
        char v86 = 1;
        goto LABEL_27;
      }
      uint64_t v66 = *re::pipelineLogObjects(v64);
      BOOL v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        uint64_t v68 = *v20;
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v68;
        _os_log_impl(&dword_233120000, v66, OS_LOG_TYPE_DEFAULT, "Material requires function constant %s but it was not provided by the material. Providing 0s as a fallback.", buf, 0xCu);
      }
      memset(__str, 0, sizeof(__str));
      re::DynamicString::setCapacity(__str, 0);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      long long __dst = 0;
      size_t v69 = strlen(*v20);
      *(void *)buf = *v20;
      *(void *)&buf[8] = v69;
      re::DynamicString::operator=((re::DynamicString *)__str, (uint64_t)buf);
      unsigned __int16 v70 = (unsigned __int16)objc_msgSend(*v22, sel_type);
      unsigned __int16 v71 = (unsigned __int16)objc_msgSend(*v22, sel_index);
      unsigned __int16 v97 = v70;
      unsigned __int16 v98 = v71;
      if (objc_msgSend(*v22, sel_type) == (id)53)
      {
        if (!v100) {
          goto LABEL_143;
        }
        *(unsigned char *)long long __dst = 0;
LABEL_86:
        a8 = v88;
LABEL_118:
        long long v77 = *v20;
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)&v106, (re::DynamicString *)buf, (uint64_t)__str);
        if (*(void *)buf && (buf[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
        if (v99)
        {
          if (v100)
          {
            (*(void (**)(void))(*(void *)v99 + 40))();
            uint64_t v100 = 0;
            long long __dst = 0;
          }
          uint64_t v99 = 0;
        }
        uint64_t v73 = *(void *)__str;
        if (!*(void *)__str || (__str[8] & 1) == 0) {
          goto LABEL_27;
        }
        uint64_t v74 = *(void *)&__str[16];
LABEL_128:
        (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 40))(v73, v74);
        goto LABEL_27;
      }
      if (objc_msgSend(*v22, sel_type) != (id)3
        && objc_msgSend(*v22, sel_type) != (id)4
        && objc_msgSend(*v22, sel_type) != (id)5
        && objc_msgSend(*v22, sel_type) != (id)6)
      {
        uint64_t v78 = (re *)objc_msgSend(*v22, sel_type);
        if (v78 != (re *)29)
        {
          uint64_t v78 = (re *)objc_msgSend(*v22, sel_type);
          if (v78 != (re *)33)
          {
            v79 = *re::pipelineLogObjects(v78);
            __int16 v72 = (_anonymous_namespace_ *)os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
            a8 = v88;
            if (v72)
            {
              v80 = *v20;
              unsigned int v81 = objc_msgSend(*v22, sel_type);
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v80;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v81;
              _os_log_error_impl(&dword_233120000, v79, OS_LOG_TYPE_ERROR, "Required function constant %s is required but not provided and of an unsupported type %i.", buf, 0x12u);
            }
            goto LABEL_118;
          }
        }
        *(_DWORD *)long long __dst = 0;
        goto LABEL_86;
      }
      *(void *)&buf[32] = 0;
      memset(buf, 0, 28);
      if (objc_msgSend(*v22, sel_type) != (id)3)
      {
        if (objc_msgSend(*v22, sel_type) != (id)4)
        {
          if (objc_msgSend(*v22, sel_type) != (id)5)
          {
            long long v75 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_type);
            if (v75 != (_anonymous_namespace_ *)6)
            {
LABEL_115:
              uint64_t v76 = 4 * *(void *)&buf[16];
              memcpy(__dst, *(const void **)&buf[32], 4 * *(void *)&buf[16]);
              __int16 v72 = *(_anonymous_namespace_ **)buf;
              a8 = v88;
              if (*(void *)buf && *(void *)&buf[32]) {
                __int16 v72 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
              }
              goto LABEL_118;
            }
            *(_DWORD *)char v111 = 0;
            re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
          }
          *(_DWORD *)char v111 = 0;
          re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
        }
        *(_DWORD *)char v111 = 0;
        re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
      }
      *(_DWORD *)char v111 = 0;
      re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
      goto LABEL_115;
    }
    int v28 = (_anonymous_namespace_ *)re::parseConstant((_anonymous_namespace_ *)buf, (uint64_t)a1, *v20, (unsigned __int16)[*v22 v26[15]], (__int16)objc_msgSend(*v22, sel_index), v24);
    if (!buf[0])
    {
      re::DynamicString::DynamicString((re::DynamicString *)__str, (const re::DynamicString *)&buf[8]);
      *(unsigned char *)uint64_t v85 = 0;
      *(void *)(v85 + 8) = *(void *)__str;
      *(void *)(v85 + 32) = *(void *)&__str[24];
      *(_OWORD *)(v85 + 16) = *(_OWORD *)&__str[8];
      re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)buf);
      goto LABEL_138;
    }
    uint64_t v29 = *v20;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)&v106, (re::DynamicString *)__str, (uint64_t)&buf[8]);
    if (*(void *)__str && (__str[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)__str + 40))();
    }
    re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)buf);
    LODWORD(v13) = v95;
LABEL_27:
    uint64_t v18 = *(void *)(a2 + 16);
    if (*(_DWORD *)(a2 + 32) <= (v14 + 1)) {
      int v30 = v14 + 1;
    }
    else {
      int v30 = *(_DWORD *)(a2 + 32);
    }
    while (1)
    {
      uint64_t v17 = (v14 + 1);
      if (v30 - 1 == v14) {
        break;
      }
      LODWORD(v14) = v14 + 1;
      int v31 = v17;
      if ((*(_DWORD *)(v18 + 32 * v17 + 8) & 0x80000000) != 0) {
        goto LABEL_34;
      }
    }
    int v31 = v30;
LABEL_34:
    LODWORD(v14) = v31;
  }
  while (v13 != v31);
  a9 = v85;
  if ((v86 & 1) == 0) {
    goto LABEL_136;
  }
  re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v102);
  *(unsigned char *)uint64_t v85 = 0;
  uint64_t v82 = *(void *)&buf[24];
  *(void *)(v85 + 8) = *(void *)buf;
  *(void *)(v85 + 32) = v82;
  *(_OWORD *)(v85 + 16) = *(_OWORD *)&buf[8];
LABEL_138:
  if (v102 && (v103 & 1) != 0) {
    (*(void (**)(void))(*v102 + 40))();
  }
  return re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v106);
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 112 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 112 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 112 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 112 * v9;
  return v12 + 48;
}

BOOL re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 112 * v6 + 16, a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 112 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

double re::parseVariationTable@<D0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v6 = objc_msgSend(*a2, sel_functionConstantsDictionary);
  long long v55 = 0u;
  long long v56 = 0u;
  unsigned int v57 = 0;
  uint64_t v58 = 0x7FFFFFFFLL;
  id v7 = objc_msgSend(v6, sel_keyEnumerator);
  id v8 = objc_msgSend(v7, sel_nextObject);
  if (v8)
  {
    id v9 = v8;
    do
    {
      *(void *)&long long v45 = objc_msgSend(v9, sel_UTF8String);
      v51[0] = objc_msgSend(v6, sel_objectForKey_, v9);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v55, (char **)&v45, v51);
      if (v51[0]) {

      }
      id v9 = objc_msgSend(v7, sel_nextObject);
    }
    while (v9);
    unsigned int v10 = v57;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)unint64_t v51 = 0u;
    long long v52 = 0u;
    uint64_t v11 = 0;
    if (v57)
    {
      uint64_t v12 = (int *)(v56 + 8);
      while (1)
      {
        int v13 = *v12;
        v12 += 8;
        if (v13 < 0) {
          break;
        }
        if (v57 == ++v11)
        {
          LODWORD(v11) = v57;
          break;
        }
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
    LODWORD(v11) = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    *(_OWORD *)unint64_t v51 = 0u;
    long long v52 = 0u;
  }
  if (v10 == v11)
  {
LABEL_13:
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v45, (uint64_t *)v51);
    *(unsigned char *)a4 = 1;
    long long v14 = v46;
    *(_OWORD *)(a4 + 8) = v45;
    uint64_t v15 = *((void *)&v48 + 1);
    *(void *)(a4 + 56) = v48;
    *(void *)(a4 + 64) = v15;
    *(_OWORD *)(a4 + 24) = v14;
    long long v45 = 0u;
    long long v46 = 0u;
    *(_OWORD *)(a4 + 40) = v47;
    long long v47 = 0u;
    long long v48 = 0u;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v45);
  }
  else
  {
    uint64_t v17 = v11;
    unsigned int v39 = v10;
    uint64_t v18 = v56;
    uint64_t v40 = a3;
    while (1)
    {
      uint64_t v19 = v18 + 32 * v17;
      int v21 = *(void **)(v19 + 24);
      unint64_t v20 = (id *)(v19 + 24);
      id v22 = objc_msgSend(v21, sel_name);
      uint64_t v23 = (_anonymous_namespace_ *)objc_msgSend(v22, sel_UTF8String);
      unint64_t v24 = re::Hash<re::DynamicString>::operator()((uint64_t)&v49, (uint64_t)&v45);
      if (!*(void *)a3
        || (uint64_t v25 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * (v24 % *(unsigned int *)(a3 + 24))),
            v25 == 0x7FFFFFFF))
      {
LABEL_21:
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v26 = *(void *)(a3 + 16);
        while (!re::DynamicString::operator==(v26 + 88 * v25 + 16, (uint64_t)&v45))
        {
          uint64_t v25 = *(_DWORD *)(v26 + 88 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF) {
            goto LABEL_21;
          }
        }
        uint64_t v27 = v26 + 88 * v25 + 48;
      }
      if (void)v45 && (BYTE8(v45)) {
        (*(void (**)(void))(*(void *)v45 + 40))();
      }
      if (v27)
      {
        if (re::mtl::getTypeSize((unsigned __int16)objc_msgSend(*v20, sel_type)) > 8)
        {
          re::DynamicString::format((re::DynamicString *)"Function constant variation %s has underlying type larger than 64 bits, which is not supported.", (re::DynamicString *)&v45, objc_msgSend(objc_msgSend(*v20, sel_name), sel_UTF8String));
          long long v37 = v45;
          long long v38 = v46;
          *(unsigned char *)a4 = 0;
          *(_OWORD *)(a4 + 8) = v37;
          *(_OWORD *)(a4 + 24) = v38;
          goto LABEL_14;
        }
        int v28 = (_anonymous_namespace_ *)objc_msgSend(v22, sel_UTF8String);
        LOWORD(v45) = (unsigned __int16)objc_msgSend(*v20, sel_type);
        WORD1(v45) = (unsigned __int16)objc_msgSend(*v20, sel_index);
        long long v46 = 0uLL;
        *((void *)&v45 + 1) = 0;
        LODWORD(v47) = 0;
        *((void *)&v47 + 1) = 0;
        *(void *)&long long v48 = 0;
        WORD4(v48) = 0;
        uint64_t v29 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v51, (const re::DynamicString *)&v49, (uint64_t)&v45);
        if (*((void *)&v45 + 1) && *((void *)&v47 + 1)) {
          (*(void (**)(void))(**((void **)&v45 + 1) + 40))();
        }
        if (v49 && (v50 & 1) != 0) {
          (*(void (**)(void))(*(void *)v49 + 40))();
        }
        uint64_t v30 = *(void *)(v27 + 16);
        if (v30) {
          break;
        }
      }
LABEL_43:
      uint64_t v18 = v56;
      if (v57 <= (int)v11 + 1) {
        unsigned int v35 = v11 + 1;
      }
      else {
        unsigned int v35 = v57;
      }
      a3 = v40;
      while (1)
      {
        uint64_t v17 = (v11 + 1);
        if (v35 - 1 == v11) {
          break;
        }
        LODWORD(v11) = v11 + 1;
        unsigned int v36 = v17;
        if ((*(_DWORD *)(v56 + 32 * v17 + 8) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      unsigned int v36 = v35;
LABEL_51:
      LODWORD(v11) = v36;
      if (v39 == v36) {
        goto LABEL_13;
      }
    }
    int v31 = (void *)(v29 + 8);
    uint64_t v32 = *(const re::DynamicString **)(v27 + 32);
    uint64_t v33 = 32 * v30;
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v49, v32);
      re::parseConstant((_anonymous_namespace_ *)&v45, a1, (const char *)objc_msgSend(objc_msgSend(*v20, sel_name), sel_UTF8String), (unsigned __int16)objc_msgSend(*v20, sel_type), (__int16)objc_msgSend(*v20, sel_index), (uint64_t)&v49);
      int v34 = v45;
      if ((_BYTE)v45)
      {
        uint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)((char *)&v45 + 8));
        re::DynamicArray<re::TransitionCondition *>::add(v31, &As64Bits);
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)&As64Bits, (const re::DynamicString *)((char *)&v45 + 8));
        *(unsigned char *)a4 = 0;
        *(void *)(a4 + 8) = As64Bits;
        *(void *)(a4 + 32) = v44;
        *(_OWORD *)(a4 + 16) = v43;
      }
      re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)&v45);
      if (v49 && (v50 & 1) != 0) {
        (*(void (**)(void))(*(void *)v49 + 40))();
      }
      if (!v34) {
        break;
      }
      uint64_t v32 = (const re::DynamicString *)((char *)v32 + 32);
      v33 -= 32;
      if (!v33) {
        goto LABEL_43;
      }
    }
  }
LABEL_14:
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v51);
  return re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v55);
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(uint64_t *a1, const re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 != -1) {
    return a1[1] + 96 * v6 + 32;
  }
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
}

uint64_t re::parseUsedConstantsMask(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(void *)(result + 52) = 0x7FFFFFFFLL;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 8;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 16);
    do
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(v9 + 32 * v8 + 24), sel_index);
      __int16 v19 = result;
      if ((unsigned __int16)result > 0x7Fu)
      {
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (unsigned __int16)result) ^ ((0xBF58476D1CE4E5B9 * (unsigned __int16)result) >> 27));
        unint64_t v12 = v11 ^ (v11 >> 31);
        unint64_t v13 = *(unsigned int *)(v3 + 40);
        if (v13)
        {
          unint64_t v14 = v12 % v13;
          uint64_t v15 = *(unsigned int *)(*(void *)(v3 + 24) + 4 * (v12 % v13));
          if (v15 != 0x7FFFFFFF)
          {
            uint64_t v16 = *(void *)(v3 + 32);
            while (*(unsigned __int16 *)(v16 + 16 * v15 + 12) != (unsigned __int16)result)
            {
              uint64_t v15 = *(_DWORD *)(v16 + 16 * v15 + 8) & 0x7FFFFFFF;
              if (v15 == 0x7FFFFFFF) {
                goto LABEL_18;
              }
            }
            goto LABEL_19;
          }
        }
        else
        {
          LODWORD(v14) = 0;
        }
LABEL_18:
        uint64_t result = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(v3 + 16, v14, v12, (uint64_t)&v19, &v19);
        ++*(_DWORD *)(v3 + 56);
      }
      else
      {
        uint64_t v10 = 1 << result;
        uint64_t result = re::Bitset<128>::toWordIndex(v3, (unsigned __int16)result);
        *(void *)(v3 + 8 * result) |= v10;
      }
LABEL_19:
      uint64_t v9 = *(void *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1)) {
        int v17 = v5 + 1;
      }
      else {
        int v17 = *(_DWORD *)(a2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v17 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v18 = v8;
        if ((*(_DWORD *)(v9 + 32 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_26;
        }
      }
      int v18 = v17;
LABEL_26:
      LODWORD(v5) = v18;
    }
    while (v4 != v18);
  }
  return result;
}

void re::makeMaterialDefinitionBuilder(uint64_t a1)
{
  v1 = (_anonymous_namespace_ *)MEMORY[0x270FA5388](a1);
  v310 = v3;
  uint64_t v314 = (uint64_t)v1;
  uint64_t v5 = v4;
  uint64_t v388 = *MEMORY[0x263EF8340];
  memset(v376, 0, sizeof(v376));
  uint64_t v315 = v2;
  uint64_t v6 = *(void *)(v2 + 576);
  if (v6)
  {
    uint64_t v7 = *(void *)(v2 + 592);
    uint64_t v8 = v7 + 80 * v6;
    while (1)
    {
      long long v362 = 0u;
      long long v363 = 0u;
      long long v360 = 0u;
      long long v361 = 0u;
      uint64_t v9 = *(unsigned int *)(v7 + 64);
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = (int *)(*(void *)(v7 + 48) + 8);
        while (1)
        {
          int v12 = *v11;
          v11 += 14;
          if (v12 < 0) {
            break;
          }
          if (v9 == ++v10)
          {
            LODWORD(v10) = *(_DWORD *)(v7 + 64);
            break;
          }
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      if (v9 != v10)
      {
        uint64_t v13 = v10;
        do
        {
          uint64_t v14 = *(void *)(v7 + 48) + 56 * v13;
          *(void *)__src = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v14 + 16);
          LOWORD(v384) = *(_DWORD *)(v14 + 48);
          uint64_t v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(&v360, __src);
          if (v15 == -1) {
            re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)&v360, __src, &v384);
          }
          else {
            *(_WORD *)(*((void *)&v360 + 1) + 16 * v15 + 8) = (_WORD)v384;
          }
          if (*(_DWORD *)(v7 + 64) <= (v10 + 1)) {
            int v16 = v10 + 1;
          }
          else {
            int v16 = *(_DWORD *)(v7 + 64);
          }
          while (1)
          {
            uint64_t v13 = (v10 + 1);
            if (v16 - 1 == v10) {
              break;
            }
            LODWORD(v10) = v10 + 1;
            int v17 = v13;
            if ((*(_DWORD *)(*(void *)(v7 + 48) + 56 * v13 + 8) & 0x80000000) != 0) {
              goto LABEL_21;
            }
          }
          int v17 = v16;
LABEL_21:
          LODWORD(v10) = v17;
        }
        while (v9 != v17);
      }
      unint64_t v18 = *(void *)(v7 + 8);
      if ((v18 & 1) == 0) {
        break;
      }
      unint64_t v20 = *(unsigned char **)(v7 + 16);
      if (v20)
      {
        LOBYTE(v19) = *v20;
LABEL_26:
        if ((_BYTE)v19)
        {
          uint64_t v19 = (char)v19;
          char v21 = v20[1];
          if (v21)
          {
            id v22 = v20 + 2;
            do
            {
              uint64_t v19 = 31 * v19 + v21;
              int v23 = *v22++;
              char v21 = v23;
            }
            while (v23);
          }
          uint64_t v24 = v19 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v24 = 0;
        }
        goto LABEL_33;
      }
      uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
      *(void *)__src = v24;
      if (re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v376, (uint64_t *)__src) == -1)re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v376, (uint64_t *)__src, (uint64_t *)&v360); {
      v1 = (_anonymous_namespace_ *)*((void *)&v363 + 1);
      }
      if (*((void *)&v363 + 1))
      {
        if (*((void *)&v360 + 1)) {
          *((void *)&v360 + 1) = 0;
        }
        if ((void)v360) {
          v1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((void **)&v363 + 1) + 40))();
        }
      }
      v7 += 80;
      if (v7 == v8) {
        goto LABEL_41;
      }
    }
    uint64_t v19 = v18 >> 8;
    unint64_t v20 = (unsigned char *)(v7 + 9);
    goto LABEL_26;
  }
LABEL_41:
  uint64_t v25 = v315 + 464;
  uint64_t v26 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v315 + 464, (uint64_t)&v360);
  uint64_t v27 = (_anonymous_namespace_ *)v360;
  if (void)v360 && (BYTE8(v360)) {
    uint64_t v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
  }
  if (v26)
  {
    BOOL v28 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)&v360);
    if (v28)
    {
      BOOL v301 = 1;
    }
    else
    {
      BOOL v301 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)__src);
      if (*(void *)__src && (__src[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__src + 40))();
      }
    }
    uint64_t v29 = (_anonymous_namespace_ *)v360;
    if (void)v360 && (BYTE8(v360)) {
      uint64_t v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
    }
    BOOL v30 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)&v360);
    if (v30)
    {
      BOOL v300 = 1;
    }
    else
    {
      BOOL v300 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)__src);
      if (*(void *)__src && (__src[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__src + 40))();
      }
    }
    uint64_t v27 = (_anonymous_namespace_ *)v360;
    if (void)v360 && (BYTE8(v360)) {
      uint64_t v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
    }
  }
  else
  {
    BOOL v300 = 0;
    BOOL v301 = 0;
  }
  uint64_t v31 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v25, (uint64_t)&v360);
  uint64_t v32 = (_anonymous_namespace_ *)v360;
  if (void)v360 && (BYTE8(v360)) {
    uint64_t v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
  }
  if (v31)
  {
    BOOL v33 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)&v360);
    if (v33)
    {
      BOOL v299 = 1;
    }
    else
    {
      BOOL v299 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)__src);
      if (*(void *)__src && (__src[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__src + 40))();
      }
    }
    int v34 = (_anonymous_namespace_ *)v360;
    if (void)v360 && (BYTE8(v360)) {
      int v34 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
    }
    BOOL v35 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)&v360);
    if (v35)
    {
      BOOL v298 = 1;
    }
    else
    {
      BOOL v298 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v25, (uint64_t)__src);
      if (*(void *)__src && (__src[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)__src + 40))();
      }
    }
    uint64_t v32 = (_anonymous_namespace_ *)v360;
    if (void)v360 && (BYTE8(v360)) {
      uint64_t v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
    }
  }
  else
  {
    BOOL v298 = 0;
    BOOL v299 = 0;
  }
  uint64_t v303 = v31;
  uint64_t v304 = v26;
  uint64_t v311 = v5;
  uint64_t v36 = *(void *)(v315 + 400);
  if (v36)
  {
    char v37 = 0;
    int v312 = 0;
    char v38 = 0;
    int v39 = 0;
    uint64_t v40 = (const char **)(*(void *)(v315 + 416) + 16);
    uint64_t v41 = 664 * v36;
    do
    {
      if ((unint64_t)*(v40 - 1)) {
        int v42 = *v40;
      }
      else {
        int v42 = (char *)v40 - 7;
      }
      uint64_t v32 = (_anonymous_namespace_ *)strcmp(v42, "Transparent");
      if (v32)
      {
        uint64_t v32 = (_anonymous_namespace_ *)strcmp(v42, "TransparentAR");
        if (v32)
        {
          uint64_t v32 = (_anonymous_namespace_ *)strcmp(v42, "TransparentDynamicLighting");
          if (v32)
          {
            uint64_t v32 = (_anonymous_namespace_ *)strcmp(v42, "TransparentARDynamicLighting");
            v39 |= v32 == 0;
          }
          else
          {
            char v38 = 1;
          }
        }
        else
        {
          int v312 = 1;
        }
      }
      else
      {
        char v37 = 1;
      }
      v40 += 83;
      v41 -= 664;
    }
    while (v41);
  }
  else
  {
    int v39 = 0;
    char v38 = 0;
    int v312 = 0;
    char v37 = 0;
  }
  char v305 = v38;
  int v307 = v39;
  int v374 = 0;
  memset(v373, 0, sizeof(v373));
  uint64_t v375 = 0x7FFFFFFFLL;
  uint64_t v43 = *(void *)(v315 + 440);
  if (v43)
  {
    uint64_t v44 = *(uint64_t **)(v315 + 456);
    uint64_t v45 = 72 * v43;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v360, (const re::DynamicString *)v44);
      re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v362, v44 + 4);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)v373, (re::DynamicString *)&v360, (uint64_t *)&v362);
      re::MaterialTechniqueGroupData::deinit((const re::DynamicString **)&v360);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v362);
      uint64_t v32 = (_anonymous_namespace_ *)v360;
      if (void)v360 && (BYTE8(v360)) {
        uint64_t v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
      }
      v44 += 9;
      v45 -= 72;
    }
    while (v45);
  }
  char v302 = v37;
  int v371 = 0;
  long long v369 = 0u;
  long long v370 = 0u;
  uint64_t v372 = 0x7FFFFFFFLL;
  uint64_t v46 = *(void *)(v315 + 664);
  if (v46)
  {
    long long v47 = *(const re::MaterialTechniqueQualityLevelSetData **)(v315 + 680);
    v316 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v47 + 104 * v46);
    do
    {
      re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)&v360, v47);
      re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)__src, v364);
      re::DynamicString::DynamicString((re::DynamicString *)v379, (const re::DynamicString *)&v362);
      unint64_t v48 = re::Hash<re::DynamicString>::operator()((uint64_t)&v384, (uint64_t)&v360);
      unint64_t v49 = v48;
      if ((void)v369)
      {
        unint64_t v50 = v48 % DWORD2(v370);
        uint64_t v51 = *(unsigned int *)(*((void *)&v369 + 1) + 4 * v50);
        if (v51 != 0x7FFFFFFF)
        {
          uint64_t v52 = v370;
          while (!re::DynamicString::operator==(v52 + 120 * v51 + 16, (uint64_t)&v360))
          {
            uint64_t v51 = *(_DWORD *)(v52 + 120 * v51 + 8) & 0x7FFFFFFF;
            if (v51 == 0x7FFFFFFF) {
              goto LABEL_113;
            }
          }
          goto LABEL_114;
        }
      }
      else
      {
        LODWORD(v50) = 0;
      }
LABEL_113:
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v369, v50, v49, (re::DynamicString *)&v360, (uint64_t)__src);
      ++HIDWORD(v372);
LABEL_114:
      if (v379[0])
      {
        if (v379[1]) {
          (*(void (**)(void))(*(void *)v379[0] + 40))();
        }
        memset(v379, 0, 32);
      }
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)__src);
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((const re::DynamicString **)&v360);
      long long v47 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v47 + 104);
    }
    while (v47 != v316);
  }
  int v367 = 0;
  long long v366 = 0u;
  long long v365 = 0u;
  uint64_t v368 = 0x7FFFFFFFLL;
  uint64_t v54 = v314;
  uint64_t v53 = v315;
  signed int v55 = *(_DWORD *)(v315 + 628);
  if (v55)
  {
    uint64_t v57 = *(unsigned int *)(v315 + 632);
    if (v57)
    {
      uint64_t v58 = 0;
      uint64_t v59 = (int *)(*(void *)(v315 + 616) + 8);
      while (1)
      {
        int v60 = *v59;
        v59 += 24;
        if (v60 < 0) {
          break;
        }
        if (v57 == ++v58)
        {
          LODWORD(v58) = *(_DWORD *)(v315 + 632);
          break;
        }
      }
    }
    else
    {
      LODWORD(v58) = 0;
    }
    if (v57 != v58)
    {
      uint64_t v266 = v58;
      unsigned int v267 = *(_DWORD *)(v315 + 632);
      while (1)
      {
        uint64_t v268 = *(void *)(v53 + 616);
        v269 = (unsigned char *)(v268 + 96 * v266);
        if (v269[88] && *(unsigned char *)(v268 + 96 * v266 + 89)) {
          goto LABEL_572;
        }
        uint64_t v270 = (uint64_t)(v269 + 16);
        if (v269[48])
        {
          v271 = (const re::DynamicString *)(v269 + 56);
LABEL_530:
          re::DynamicString::DynamicString((re::DynamicString *)&v360, v271);
          unint64_t v272 = *(void *)(v268 + 96 * v266 + 24);
          goto LABEL_531;
        }
        uint64_t v278 = v268 + 96 * v266;
        unint64_t v280 = *(void *)(v278 + 24);
        v279 = (unint64_t *)(v278 + 24);
        size_t v281 = v280 >> 1;
        size_t v282 = v280 >> 1;
        if (v280) {
          size_t v283 = v281;
        }
        else {
          size_t v283 = v282;
        }
        if (!v283)
        {
          v271 = (const re::DynamicString *)v270;
          goto LABEL_530;
        }
        *((void *)&v360 + 1) = 0;
        long long v361 = 0uLL;
        re::DynamicString::setCapacity(&v360, v283);
        v284 = (char *)re::DynamicString::operator[](v270, 0);
        __src[0] = __toupper(*v284);
        re::DynamicString::append((re::DynamicString *)&v360, __src, 1uLL);
        unint64_t v272 = *v279;
        unint64_t v285 = *v279 >> 1;
        if ((*v279 & 1) == 0) {
          unint64_t v285 = (*v279 >> 1) & 0x7E;
        }
        if (v285 >= 2) {
          break;
        }
LABEL_531:
        if (v272)
        {
          v274 = *(unsigned char **)(v268 + 96 * v266 + 32);
          if (!v274)
          {
            unint64_t v289 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v54 = v314;
            uint64_t v53 = v315;
            goto LABEL_561;
          }
          LOBYTE(v273) = *v274;
        }
        else
        {
          uint64_t v273 = v272 >> 8;
          v274 = (unsigned char *)(v270 + 9);
        }
        if ((_BYTE)v273)
        {
          uint64_t v273 = (char)v273;
          char v275 = v274[1];
          if (v275)
          {
            v276 = v274 + 2;
            uint64_t v54 = v314;
            uint64_t v53 = v315;
            do
            {
              uint64_t v273 = 31 * v273 + v275;
              int v277 = *v276++;
              char v275 = v277;
            }
            while (v277);
          }
          else
          {
            uint64_t v54 = v314;
            uint64_t v53 = v315;
          }
          unint64_t v289 = v273 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v289 = 0;
          uint64_t v54 = v314;
          uint64_t v53 = v315;
        }
LABEL_561:
        *(void *)__src = v289;
        unint64_t v290 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v289 ^ (v289 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v289 ^ (v289 >> 30))) >> 27));
        unint64_t v291 = v290 ^ (v290 >> 31);
        if ((void)v365)
        {
          unint64_t v292 = v291 % DWORD2(v366);
          uint64_t v293 = *(unsigned int *)(*((void *)&v365 + 1) + 4 * v292);
          if (v293 != 0x7FFFFFFF)
          {
            while (*(void *)(v366 + 48 * v293 + 8) != v289)
            {
              LODWORD(v293) = *(_DWORD *)(v366 + 48 * v293) & 0x7FFFFFFF;
              if (v293 == 0x7FFFFFFF) {
                goto LABEL_567;
              }
            }
            goto LABEL_568;
          }
        }
        else
        {
          LODWORD(v292) = 0;
        }
LABEL_567:
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove((uint64_t)&v365, v292, v291, __src, &v360);
        ++HIDWORD(v368);
LABEL_568:
        long long v56 = (_anonymous_namespace_ *)v360;
        if (void)v360 && (BYTE8(v360)) {
          long long v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v360 + 40))();
        }
        unsigned int v267 = *(_DWORD *)(v53 + 632);
LABEL_572:
        if (v267 <= (int)v58 + 1) {
          unsigned int v294 = v58 + 1;
        }
        else {
          unsigned int v294 = v267;
        }
        while (1)
        {
          uint64_t v266 = (v58 + 1);
          if (v294 - 1 == v58) {
            break;
          }
          LODWORD(v58) = v58 + 1;
          unsigned int v295 = v266;
          if ((*(_DWORD *)(*(void *)(v53 + 616) + 96 * v266 + 8) & 0x80000000) != 0) {
            goto LABEL_579;
          }
        }
        unsigned int v295 = v294;
LABEL_579:
        LODWORD(v58) = v295;
        if (v57 == v295) {
          goto LABEL_127;
        }
      }
      unint64_t v286 = 1;
      while (1)
      {
        unsigned int v287 = *(char *)re::DynamicString::operator[](v270, v286);
        if ((v287 & 0x80000000) != 0) {
          break;
        }
        if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v287 + 60) & 0x8000) != 0) {
          goto LABEL_550;
        }
LABEL_551:
        __src[0] = *(unsigned char *)re::DynamicString::operator[](v270, v286);
        re::DynamicString::append((re::DynamicString *)&v360, __src, 1uLL);
        ++v286;
        unint64_t v272 = *v279;
        unint64_t v288 = *v279 >> 1;
        if ((*v279 & 1) == 0) {
          unint64_t v288 = *v279 >> 1;
        }
        if (v288 <= v286) {
          goto LABEL_531;
        }
      }
      if (!__maskrune(v287, 0x8000uLL)) {
        goto LABEL_551;
      }
LABEL_550:
      __src[0] = 32;
      re::DynamicString::append((re::DynamicString *)&v360, __src, 1uLL);
      goto LABEL_551;
    }
  }
LABEL_127:
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)&v360, (const re::DynamicString *)v53, (const re::DynamicString *)(v53 + 32), v310, (uint64_t *)&v365, v315 + 464, v53 + 512, v373, v376, (uint64_t *)&v369);
  uint64_t v61 = *(void *)(v53 + 400);
  uint64_t v62 = v311;
  if (v61)
  {
    uint64_t v63 = *(void *)(v53 + 416);
    uint64_t v64 = v63 + 664 * v61;
    uint64_t v65 = v53 + 9;
    int v297 = v312 | v307;
    char v306 = v305 | v307;
    v313 = (re::mtl::Device *)(v54 + 184);
    uint64_t v309 = v64;
    v317 = (_anonymous_namespace_ *)(v53 + 9);
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)v356, (const re::DynamicString *)v63);
      re::MaterialDefinitionBuilder::addTechnique((uint64_t)&v360, (uint64_t)v356, (uint64_t)v357);
      if (v356[0])
      {
        if (v356[1]) {
          (*(void (**)(void))(*(void *)v356[0] + 40))();
        }
        memset(v356, 0, 32);
      }
      if (!v357[0]) {
        break;
      }
      unint64_t v66 = *(void *)(v63 + 120);
      if (v66) {
        unint64_t v67 = v66 >> 1;
      }
      else {
        unint64_t v67 = v66 >> 1;
      }
      if (!v67)
      {
        uint64_t v75 = v65;
        if (*(unsigned char *)(v53 + 8)) {
          uint64_t v75 = *(void *)(v53 + 16);
        }
        if (*(unsigned char *)(v63 + 8)) {
          uint64_t v76 = *(void *)(v63 + 16);
        }
        else {
          uint64_t v76 = v63 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"[%s] - Failed to create builder because vertex shader for technique '%s' is empty.", (re::DynamicString *)__src, v75, v76, v296);
LABEL_185:
        long long v98 = *(_OWORD *)__src;
        uint64_t v99 = *(void *)&__src[16];
        uint64_t v100 = v378;
        *(unsigned char *)uint64_t v62 = 0;
        *(_OWORD *)(v62 + 8) = v98;
        *(void *)(v62 + 24) = v99;
        *(void *)(v62 + 32) = v100;
LABEL_186:
        int v101 = 1;
        goto LABEL_187;
      }
      uint64_t v68 = v358;
      re::getLibraryHash((re *)v354, v54, v53, v63, (uint64_t *)(v63 + 88));
      if (!v354[0])
      {
        uint64_t v77 = v65;
        if (*(unsigned char *)(v53 + 8)) {
          uint64_t v77 = *(void *)(v53 + 16);
        }
        if (*(unsigned char *)(v63 + 8)) {
          uint64_t v78 = *(void *)(v63 + 16);
        }
        else {
          uint64_t v78 = v63 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"[%s] - unable to get vertex library hash for technique '%s'", (re::DynamicString *)__src, v77, v78, v296);
        goto LABEL_185;
      }
      uint64_t v69 = v355;
      *(void *)(v68 + 32) = v355;
      uint64_t v70 = *(void *)(v54 + 56) + 264;
      *(void *)__src = v69;
      uint64_t v71 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v70, (uint64_t *)__src);
      if (!v71)
      {
        uint64_t v65 = (uint64_t)v317;
        v79 = v317;
        if (*(unsigned char *)(v53 + 8)) {
          v79 = *(_anonymous_namespace_ **)(v53 + 16);
        }
        if (*(unsigned char *)(v63 + 120)) {
          uint64_t v80 = *(void *)(v63 + 128);
        }
        else {
          uint64_t v80 = v63 + 121;
        }
        if (*(unsigned char *)(v63 + 8)) {
          uint64_t v97 = *(void *)(v63 + 16);
        }
        else {
          uint64_t v97 = v63 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"[%s] - makeLibrary failed for vertex shader function '%s' in technique '%s'.", (re::DynamicString *)__src, v79, v80, v97);
        goto LABEL_185;
      }
      uint64_t v72 = v71;
      re::DynamicString::operator=((re::DynamicString *)(v68 + 40), (re::DynamicString *)(v63 + 112));
      if (*(unsigned char *)(v68 + 48)) {
        uint64_t v73 = *(re::ns **)(v68 + 56);
      }
      else {
        uint64_t v73 = (re::ns *)(v68 + 49);
      }
      re::mtl::Library::makeFunction((void **)(v72 + 8), v73, &v353);
      if (!v353)
      {
        uint64_t v65 = (uint64_t)v317;
        int v95 = v317;
        if (*(unsigned char *)(v53 + 8)) {
          int v95 = *(_anonymous_namespace_ **)(v53 + 16);
        }
        uint64_t v64 = v309;
        if (*(unsigned char *)(v68 + 48)) {
          uint64_t v96 = *(void *)(v68 + 56);
        }
        else {
          uint64_t v96 = v68 + 49;
        }
        if (*(unsigned char *)(v63 + 8)) {
          uint64_t v102 = *(void *)(v63 + 16);
        }
        else {
          uint64_t v102 = v63 + 9;
        }
        uint64_t v296 = v102;
        re::DynamicString::format((re::DynamicString *)"[%s] - makeFunction failed for vertex shader function '%s' in technique '%s'.", (re::DynamicString *)__src, v95, v96);
        long long v103 = *(_OWORD *)__src;
        uint64_t v104 = *(void *)&__src[16];
        uint64_t v105 = v378;
        *(unsigned char *)uint64_t v62 = 0;
        *(_OWORD *)(v62 + 8) = v103;
        *(void *)(v62 + 24) = v104;
        *(void *)(v62 + 32) = v105;
        int v101 = 1;
        goto LABEL_520;
      }
      id v81 = objc_msgSend(v353, sel_functionConstantsDictionary);
      memset(v350, 0, sizeof(v350));
      int v351 = 0;
      uint64_t v352 = 0x7FFFFFFFLL;
      id v82 = objc_msgSend(v81, sel_keyEnumerator);
      id v83 = objc_msgSend(v82, sel_nextObject);
      if (v83)
      {
        id v84 = v83;
        do
        {
          *(void *)__src = objc_msgSend(v84, sel_UTF8String);
          id v384 = objc_msgSend(v81, sel_objectForKey_, v84);
          re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v350, (char **)__src, &v384);
          if (v384) {

          }
          id v84 = objc_msgSend(v82, sel_nextObject);
        }
        while (v84);
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v349, v63 + 328);
      uint64_t v85 = (_anonymous_namespace_ *)[*(id *)(v54 + 184) supportsFamily:1003];
      int v86 = *(unsigned __int8 *)(v54 + 305);
      int v87 = [*(id *)(v54 + 184) supportsFamily:1007];
      BOOL v88 = re::mtl::Device::needsArgumentBufferTextureEmulation(v313);
      BOOL v89 = 0;
      if (*(unsigned char *)(v54 + 307))
      {
        uint64_t v65 = (uint64_t)v317;
        if (*(unsigned char *)v54)
        {
          uint64_t v90 = *(void *)(v63 + 272);
          if (v90)
          {
            uint64_t v91 = 32 * v90 - 32;
            unsigned int v92 = (unsigned __int8 *)(*(void *)(v63 + 288) + 1);
            do
            {
              int v93 = *v92;
              v92 += 32;
              BOOL v89 = v93 != 0;
              if (v93) {
                BOOL v94 = 1;
              }
              else {
                BOOL v94 = v91 == 0;
              }
              v91 -= 32;
            }
            while (!v94);
          }
          else
          {
            BOOL v89 = *(unsigned char *)(v63 + 201) != 0;
          }
        }
      }
      else
      {
        uint64_t v65 = (uint64_t)v317;
      }
      re::MaterialManager::addSupportConstantsToArray(v85, v86 != 0, v87, v89, v88, (uint64_t)v349);
      int v106 = *(unsigned __int8 *)(v54 + 251);
      long long v107 = (_anonymous_namespace_ *)v65;
      if (*(unsigned char *)(v53 + 8)) {
        long long v107 = *(_anonymous_namespace_ **)(v53 + 16);
      }
      v347[0] = 0;
      v346[0] = 0;
      re::parseFunctionConstants(v107, (uint64_t)v350, (uint64_t)v349, v347, (uint64_t)v346, 0, v106 != 0, 0, (uint64_t)&v384);
      uint64_t v62 = v311;
      if (v347[0]) {
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v348);
      }
      if ((_BYTE)v384)
      {
        unsigned int v108 = v387;
        int v308 = v106;
        uint64_t v109 = 0;
        if (v387)
        {
          uint64_t v110 = (int *)(v386 + 8);
          while (1)
          {
            int v111 = *v110;
            v110 += 28;
            if (v111 < 0) {
              break;
            }
            if (v387 == ++v109)
            {
              LODWORD(v109) = v387;
              break;
            }
          }
        }
        if (v387 != v109)
        {
          uint64_t v112 = v109;
          uint64_t v113 = v386;
          do
          {
            re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)(v68 + 336), (re::DynamicString *)(v113 + 112 * v112 + 48));
            uint64_t v113 = v386;
            if (v387 <= (int)v109 + 1) {
              unsigned int v114 = v109 + 1;
            }
            else {
              unsigned int v114 = v387;
            }
            int v115 = v109;
            while (1)
            {
              uint64_t v112 = (v115 + 1);
              if (v114 - 1 == v115) {
                break;
              }
              ++v115;
              LODWORD(v109) = v112;
              if ((*(_DWORD *)(v386 + 112 * v112 + 8) & 0x80000000) != 0) {
                goto LABEL_221;
              }
            }
            LODWORD(v109) = v114;
LABEL_221:
            ;
          }
          while (v108 != v109);
        }
        uint64_t v116 = *(void *)(v63 + 440);
        if (v116)
        {
          uint64_t v117 = *(void *)(v63 + 456);
          uint64_t v118 = 32 * v116;
          do
          {
            *(void *)__src = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v117);
            re::DynamicArray<unsigned long>::add((void *)(v68 + 440), __src);
            v117 += 32;
            v118 -= 32;
          }
          while (v118);
        }
        int v119 = *(unsigned __int8 *)(v63 + 553);
        *(unsigned char *)(v68 + 685) = v119;
        if (v119) {
          re::MaterialManager::addDefaultVariationFallbackValues(*(re::MaterialManager **)(v314 + 24), (re::TechniqueDefinitionBuilder *)v68);
        }
        *(unsigned char *)(v68 + 684) = *(unsigned char *)(v63 + 656);
        re::parseUsedConstantsMask((uint64_t)__src, (uint64_t)v350);
        *(_OWORD *)(v68 + 72) = *(_OWORD *)__src;
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v68 + 88, (uint64_t *)&__src[16]);
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&__src[16]);
        uint64_t v62 = v311;
        if (*(unsigned char *)(v68 + 686) || *(unsigned char *)(v63 + 657))
        {
          if (!*(unsigned char *)(v68 + 686) || *(unsigned char *)(v63 + 657))
          {
            if (!*(unsigned char *)(v68 + 686) && *(unsigned char *)(v63 + 657)) {
              *(unsigned char *)(v68 + 686) = 1;
            }
            *(unsigned char *)(v68 + 687) = *(unsigned char *)(v63 + 658);
          }
          else
          {
            *(unsigned char *)(v68 + 686) = 0;
          }
        }
        *(_DWORD *)(v68 + 680) = 0;
        unint64_t v121 = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v63);
        if (*(void *)(v315 + 688))
        {
          uint64_t v122 = *(unsigned int *)(*(void *)(v315 + 696) + 4 * (v121 % *(unsigned int *)(v315 + 712)));
          if (v122 != 0x7FFFFFFF)
          {
            uint64_t v123 = *(void *)(v315 + 704);
            while (!re::DynamicString::operator==(v123 + 56 * v122 + 16, v63))
            {
              uint64_t v122 = *(_DWORD *)(v123 + 56 * v122 + 8) & 0x7FFFFFFF;
              if (v122 == 0x7FFFFFFF) {
                goto LABEL_244;
              }
            }
            *(_DWORD *)(v68 + 680) = *(_DWORD *)(v123 + 56 * v122 + 48);
          }
        }
LABEL_244:
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v342, (const re::AssetHandle *)(v63 + 144));
        re::DynamicString::DynamicString((re::DynamicString *)&v344, (const re::DynamicString *)(v63 + 168));
        if (*(unsigned char *)(v68 + 685))
        {
          char v124 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v380, v63 + 560);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v380, (re::DynamicString *)__src, "true");
          if (*(void *)__src && (__src[8] & 1) != 0) {
            (*(void (**)(void))(**(void **)__src + 40))();
          }
          uint64_t v125 = *(void *)(v314 + 24);
          re::StringID::StringID((re::StringID *)v341, (const re::DynamicString *)(v68 + 40));
          re::MaterialManager::getEngineShaderMetadata(v125, v341, (char *)&v325);
          re::StringID::destroyString((re::StringID *)v341);
          if ((_BYTE)v325 && BYTE1(v325))
          {
            re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v380, (re::DynamicString *)__src, "true");
            if (*(void *)__src && (__src[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)__src + 40))();
            }
            if (BYTE8(v344)) {
              uint64_t v127 = *((void *)&v344 + 1) >> 1;
            }
            else {
              uint64_t v127 = BYTE8(v344) >> 1;
            }
            if (!v127)
            {
              *(void *)__src = "blankFragmentShader";
              *(void *)&char __src[8] = 19;
              re::DynamicString::operator=((re::DynamicString *)&v344, (uint64_t)__src);
              long long v128 = v342;
              long long v342 = 0uLL;
              *(_OWORD *)__src = v128;
              uint64_t v129 = v343;
              uint64_t v343 = 0;
              *(void *)&__src[16] = v129;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)__src);
            }
          }
          unsigned int v130 = v317;
          if (*(unsigned char *)(v315 + 8)) {
            unsigned int v130 = *(_anonymous_namespace_ **)(v315 + 16);
          }
          v339[0] = 0;
          v338[0] = 0;
          re::parseFunctionConstants(v130, (uint64_t)v350, (uint64_t)&v380, v339, (uint64_t)v338, 0, v308 != 0, 1, (uint64_t)__src);
          if (v339[0]) {
            re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v340);
          }
          int v131 = __src[0];
          if (__src[0])
          {
            int v132 = v379[0];
            if (LODWORD(v379[0]))
            {
              uint64_t v133 = 0;
              uint64_t v134 = (int *)(v378 + 8);
              while (1)
              {
                int v135 = *v134;
                v134 += 28;
                if (v135 < 0) {
                  break;
                }
                if (LODWORD(v379[0]) == ++v133)
                {
                  LODWORD(v133) = v379[0];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v133) = 0;
            }
            if (LODWORD(v379[0]) != v133)
            {
              uint64_t v137 = v133;
              uint64_t v138 = v378;
              do
              {
                re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(v68 + 584, (re::DynamicString *)(v138 + 112 * v137 + 16), 2, v138 + 112 * v137 + 48);
                uint64_t v138 = v378;
                if (LODWORD(v379[0]) <= (v133 + 1)) {
                  int v139 = v133 + 1;
                }
                else {
                  int v139 = v379[0];
                }
                int v140 = v133;
                while (1)
                {
                  uint64_t v137 = (v140 + 1);
                  if (v139 - 1 == v140) {
                    break;
                  }
                  ++v140;
                  LODWORD(v133) = v137;
                  if ((*(_DWORD *)(v378 + 112 * v137 + 8) & 0x80000000) != 0) {
                    goto LABEL_280;
                  }
                }
                LODWORD(v133) = v139;
LABEL_280:
                ;
              }
              while (v132 != v133);
            }
          }
          else
          {
            re::DynamicString::DynamicString((re::DynamicString *)v331, (const re::DynamicString *)&__src[8]);
            *(unsigned char *)uint64_t v311 = 0;
            uint64_t v136 = v331[3];
            *(void *)(v311 + 8) = v331[0];
            *(void *)(v311 + 32) = v136;
            *(_OWORD *)(v311 + 16) = *(_OWORD *)&v331[1];
          }
          re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(__src);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v380);
          uint64_t v65 = (uint64_t)v317;
          if (!v131) {
            goto LABEL_404;
          }
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v68 + 632, v63 + 608);
        int v141 = *(_DWORD *)(v63 + 404);
        if (!v141) {
          goto LABEL_291;
        }
        if (*(unsigned char *)(v315 + 8)) {
          uint64_t v65 = *(void *)(v315 + 16);
        }
        id v142 = v353;
        id v337 = v142;
        re::parseVariationTable(v65, &v337, v63 + 376, (uint64_t)__src);
        if (v142)
        {

          id v337 = 0;
        }
        uint64_t v65 = (uint64_t)v317;
        if (!__src[0])
        {
          int v149 = v317;
          if (*(unsigned char *)(v315 + 8)) {
            int v149 = *(_anonymous_namespace_ **)(v315 + 16);
          }
          uint64_t v150 = &__src[17];
          if (__src[16]) {
            uint64_t v150 = (unsigned char *)v378;
          }
          re::DynamicString::format((re::DynamicString *)"[%s] - Failed to parse vertex shader permuted function constants: %s.", (re::DynamicString *)&v380, v149, v150);
          long long v151 = v380;
          uint64_t v152 = v381;
          uint64_t v153 = v382;
          *(unsigned char *)uint64_t v311 = 0;
          *(_OWORD *)(v311 + 8) = v151;
          *(void *)(v311 + 24) = v152;
          *(void *)(v311 + 32) = v153;
          re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(__src);
          goto LABEL_404;
        }
        if ((unsigned char *)(v68 + 376) != &__src[8]) {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy((_anonymous_namespace_ *)(v68 + 376), (uint64_t *)&__src[8]);
        }
        re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(__src);
LABEL_291:
        if (BYTE8(v344)) {
          uint64_t v143 = *((void *)&v344 + 1) >> 1;
        }
        else {
          uint64_t v143 = BYTE8(v344) >> 1;
        }
        if (!v143) {
          goto LABEL_405;
        }
        re::getLibraryHash((re *)v335, v314, v315, v63, (uint64_t *)&v342);
        if (v335[0])
        {
          uint64_t v144 = v336;
          *(void *)(v68 + 136) = v336;
          uint64_t v145 = *(void *)(v314 + 56) + 264;
          *(void *)__src = v144;
          uint64_t v146 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v145, (uint64_t *)__src);
          if (v146)
          {
            uint64_t v147 = v146;
            re::DynamicString::operator=((re::DynamicString *)(v68 + 144), (re::DynamicString *)&v344);
            if (*(unsigned char *)(v68 + 152)) {
              char v148 = *(re::ns **)(v68 + 160);
            }
            else {
              char v148 = (re::ns *)(v68 + 153);
            }
            re::mtl::Library::makeFunction((void **)(v147 + 8), v148, &v334);
            if (v334)
            {
              id v161 = objc_msgSend(v334, sel_functionConstantsDictionary);
              memset(v331, 0, sizeof(v331));
              int v332 = 0;
              uint64_t v333 = 0x7FFFFFFFLL;
              id v162 = objc_msgSend(v161, sel_keyEnumerator);
              id v163 = objc_msgSend(v162, sel_nextObject);
              if (v163)
              {
                id v164 = v163;
                do
                {
                  *(void *)__src = objc_msgSend(v164, sel_UTF8String);
                  *(void *)&long long v380 = objc_msgSend(v161, sel_objectForKey_, v164);
                  re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v331, (char **)__src, &v380);
                  if ((void)v380) {

                  }
                  id v164 = objc_msgSend(v162, sel_nextObject);
                }
                while (v164);
              }
              uint64_t v65 = (uint64_t)v317;
              int v165 = v317;
              if (*(unsigned char *)(v315 + 8)) {
                int v165 = *(_anonymous_namespace_ **)(v315 + 16);
              }
              v329[0] = 0;
              v328[0] = 0;
              re::parseFunctionConstants(v165, (uint64_t)v331, (uint64_t)v349, v329, (uint64_t)v328, 0, v308 != 0, 0, (uint64_t)&v380);
              uint64_t v62 = v311;
              if (v329[0]) {
                re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v330);
              }
              if (!(_BYTE)v380)
              {
                re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)((char *)&v380 + 8));
                *(unsigned char *)uint64_t v311 = 0;
                uint64_t v175 = v378;
                *(void *)(v311 + 8) = *(void *)__src;
                *(void *)(v311 + 32) = v175;
                *(_OWORD *)(v311 + 16) = *(_OWORD *)&__src[8];
                goto LABEL_399;
              }
              unsigned int v166 = v383;
              if (v383)
              {
                uint64_t v167 = 0;
                v168 = (int *)(v382 + 8);
                while (1)
                {
                  int v169 = *v168;
                  v168 += 28;
                  if (v169 < 0) {
                    break;
                  }
                  if (v383 == ++v167)
                  {
                    LODWORD(v167) = v383;
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v167) = 0;
              }
              if (v383 != v167)
              {
                uint64_t v180 = v167;
                uint64_t v181 = v382;
                do
                {
                  if (!re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v385, v181 + 112 * v180 + 16))re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)(v68 + 336), (re::DynamicString *)(v181 + 112 * v180 + 48)); {
                  uint64_t v181 = v382;
                  }
                  if (v383 <= (int)v167 + 1) {
                    unsigned int v182 = v167 + 1;
                  }
                  else {
                    unsigned int v182 = v383;
                  }
                  while (1)
                  {
                    uint64_t v180 = (v167 + 1);
                    if (v182 - 1 == v167) {
                      break;
                    }
                    LODWORD(v167) = v167 + 1;
                    unsigned int v183 = v180;
                    if ((*(_DWORD *)(v382 + 112 * v180 + 8) & 0x80000000) != 0) {
                      goto LABEL_352;
                    }
                  }
                  unsigned int v183 = v182;
LABEL_352:
                  LODWORD(v167) = v183;
                }
                while (v166 != v183);
              }
              re::parseUsedConstantsMask((uint64_t)__src, (uint64_t)v331);
              *(_OWORD *)(v68 + 176) = *(_OWORD *)__src;
              re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v68 + 192, (uint64_t *)&__src[16]);
              re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&__src[16]);
              if (*(unsigned char *)(v68 + 685))
              {
                unint64_t v184 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v325, v63 + 560);
                re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v325, (re::DynamicString *)__src, "true");
                uint64_t v62 = v311;
                if (*(void *)__src && (__src[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)__src + 40))();
                }
                v185 = v317;
                if (*(unsigned char *)(v315 + 8)) {
                  v185 = *(_anonymous_namespace_ **)(v315 + 16);
                }
                v323[0] = 0;
                v322[0] = 0;
                re::parseFunctionConstants(v185, (uint64_t)v331, (uint64_t)&v325, v323, (uint64_t)v322, 0, v308 != 0, 1, (uint64_t)__src);
                if (v323[0]) {
                  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v324);
                }
                int v186 = __src[0];
                if (__src[0])
                {
                  int v187 = v379[0];
                  if (LODWORD(v379[0]))
                  {
                    uint64_t v188 = 0;
                    v189 = (int *)(v378 + 8);
                    while (1)
                    {
                      int v190 = *v189;
                      v189 += 28;
                      if (v190 < 0) {
                        break;
                      }
                      if (LODWORD(v379[0]) == ++v188)
                      {
                        LODWORD(v188) = v379[0];
                        break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v188) = 0;
                  }
                  if (LODWORD(v379[0]) != v188)
                  {
                    uint64_t v191 = v188;
                    uint64_t v192 = v378;
                    do
                    {
                      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(v68 + 584, (re::DynamicString *)(v192 + 112 * v191 + 16), 2, v192 + 112 * v191 + 48);
                      uint64_t v192 = v378;
                      if (LODWORD(v379[0]) <= (v188 + 1)) {
                        int v193 = v188 + 1;
                      }
                      else {
                        int v193 = v379[0];
                      }
                      int v194 = v188;
                      while (1)
                      {
                        uint64_t v191 = (v194 + 1);
                        if (v193 - 1 == v194) {
                          break;
                        }
                        ++v194;
                        LODWORD(v188) = v191;
                        if ((*(_DWORD *)(v378 + 112 * v191 + 8) & 0x80000000) != 0) {
                          goto LABEL_381;
                        }
                      }
                      LODWORD(v188) = v193;
LABEL_381:
                      ;
                    }
                    while (v187 != v188);
                  }
                }
                else
                {
                  re::DynamicString::DynamicString((re::DynamicString *)&v319, (const re::DynamicString *)&__src[8]);
                  *(unsigned char *)uint64_t v311 = 0;
                  *(void *)(v311 + 8) = v319;
                  *(void *)(v311 + 32) = v321;
                  *(_OWORD *)(v311 + 16) = v320;
                }
                BOOL v179 = v186 == 0;
                re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(__src);
                re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v325);
                if (!v141)
                {
                  uint64_t v65 = (uint64_t)v317;
                  goto LABEL_400;
                }
                uint64_t v65 = (uint64_t)v317;
                if (!v186) {
                  goto LABEL_400;
                }
LABEL_384:
                if (*(unsigned char *)(v315 + 8)) {
                  uint64_t v65 = *(void *)(v315 + 16);
                }
                id v195 = v334;
                id v318 = v195;
                re::parseVariationTable(v65, &v318, v63 + 376, (uint64_t)__src);
                if (v195)
                {

                  id v318 = 0;
                }
                if (__src[0])
                {
                  re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator((uint64_t **)&v325, (uint64_t *)&__src[8]);
                  for (uint64_t i = v326; v326 != -1; uint64_t i = v326)
                  {
                    uint64_t v197 = *(void *)(v325 + 8);
                    if (re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find((uint64_t *)(v68 + 376), v197 + 96 * i) == -1)re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)(v68 + 376), (const re::DynamicString *)(v197 + 96 * i), (uint64_t *)(v197 + 96 * i + 32)); {
                    re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v325);
                    }
                  }
                  re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(__src);
                  BOOL v179 = 0;
                  uint64_t v65 = (uint64_t)v317;
                  goto LABEL_400;
                }
                uint64_t v65 = (uint64_t)v317;
                v198 = v317;
                if (*(unsigned char *)(v315 + 8)) {
                  v198 = *(_anonymous_namespace_ **)(v315 + 16);
                }
                int v199 = &__src[17];
                if (__src[16]) {
                  int v199 = (unsigned char *)v378;
                }
                re::DynamicString::format((re::DynamicString *)"[%s] - Failed to parse fragment shader permuted function constants: %s.", (re::DynamicString *)&v325, v198, v199);
                long long v200 = v325;
                uint64_t v201 = v326;
                uint64_t v202 = v327;
                *(unsigned char *)uint64_t v62 = 0;
                *(_OWORD *)(v62 + 8) = v200;
                *(void *)(v62 + 24) = v201;
                *(void *)(v62 + 32) = v202;
                re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(__src);
LABEL_399:
                BOOL v179 = 1;
                goto LABEL_400;
              }
              uint64_t v62 = v311;
              uint64_t v65 = (uint64_t)v317;
              if (v141) {
                goto LABEL_384;
              }
              BOOL v179 = 0;
LABEL_400:
              re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((unsigned __int8 *)&v380);
              re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v331);
            }
            else
            {
              uint64_t v65 = (uint64_t)v317;
              uint64_t v173 = v317;
              if (*(unsigned char *)(v315 + 8)) {
                uint64_t v173 = *(_anonymous_namespace_ **)(v315 + 16);
              }
              if (*(unsigned char *)(v68 + 152)) {
                uint64_t v174 = *(void *)(v68 + 160);
              }
              else {
                uint64_t v174 = v68 + 153;
              }
              re::DynamicString::format((re::DynamicString *)"[%s] - makeFunction failed for pixel shader function %s.", (re::DynamicString *)__src, v173, v174);
              long long v176 = *(_OWORD *)__src;
              uint64_t v177 = *(void *)&__src[16];
              uint64_t v178 = v378;
              *(unsigned char *)uint64_t v311 = 0;
              *(_OWORD *)(v311 + 8) = v176;
              *(void *)(v311 + 24) = v177;
              *(void *)(v311 + 32) = v178;
              BOOL v179 = 1;
            }
            if (v334) {

            }
            if (v179)
            {
LABEL_404:
              int v101 = 1;
              uint64_t v64 = v309;
              goto LABEL_514;
            }
LABEL_405:
            unint64_t v203 = *(void *)(v63 + 304);
            unint64_t v204 = v203 >> 1;
            if ((v203 & 1) == 0) {
              unint64_t v204 = v203 >> 1;
            }
            if (v204)
            {
              if (v203)
              {
                v206 = *(unsigned char **)(v63 + 312);
                if (v206)
                {
                  LOBYTE(v205) = *v206;
                  goto LABEL_412;
                }
                uint64_t v210 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v205 = v203 >> 8;
                v206 = (unsigned char *)(v63 + 305);
LABEL_412:
                if ((_BYTE)v205)
                {
                  uint64_t v205 = (char)v205;
                  char v207 = v206[1];
                  if (v207)
                  {
                    uint64_t v208 = v206 + 2;
                    do
                    {
                      uint64_t v205 = 31 * v205 + v207;
                      int v209 = *v208++;
                      char v207 = v209;
                    }
                    while (v209);
                  }
                  uint64_t v210 = v205 & 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  uint64_t v210 = 0;
                }
              }
              if (!*(unsigned char *)(v68 + 520)) {
                *(unsigned char *)(v68 + 520) = 1;
              }
              *(void *)(v68 + 528) = v210;
            }
            uint64_t v211 = *(unsigned int *)(v63 + 496);
            if (v211)
            {
              uint64_t v212 = 0;
              long long v213 = (int *)(*(void *)(v63 + 480) + 8);
              while (1)
              {
                int v214 = *v213;
                v213 += 20;
                if (v214 < 0) {
                  break;
                }
                if (v211 == ++v212)
                {
                  LODWORD(v212) = *(_DWORD *)(v63 + 496);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v212) = 0;
            }
            if (v211 != v212)
            {
              uint64_t v215 = v212;
              uint64_t v216 = (unint64_t *)(v68 + 536);
              unsigned int v217 = *(_DWORD *)(v63 + 496);
              do
              {
                uint64_t v218 = *(void *)(v63 + 480);
                uint64_t v219 = v218 + 80 * v215;
                unint64_t v220 = *(void *)(v219 + 24);
                if (v220)
                {
                  v222 = *(unsigned char **)(v218 + 80 * v215 + 32);
                  if (!v222)
                  {
                    unint64_t v226 = 0x7FFFFFFFFFFFFFFFLL;
                    goto LABEL_441;
                  }
                  LOBYTE(v221) = *v222;
                }
                else
                {
                  uint64_t v221 = v220 >> 8;
                  v222 = (unsigned char *)(v218 + 80 * v215 + 25);
                }
                if ((_BYTE)v221)
                {
                  uint64_t v221 = (char)v221;
                  char v223 = v222[1];
                  if (v223)
                  {
                    v224 = v222 + 2;
                    do
                    {
                      uint64_t v221 = 31 * v221 + v223;
                      int v225 = *v224++;
                      char v223 = v225;
                    }
                    while (v225);
                  }
                  unint64_t v226 = v221 & 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  unint64_t v226 = 0;
                }
LABEL_441:
                unint64_t v227 = *(void *)(v218 + 80 * v215 + 56);
                if ((v227 & 1) == 0)
                {
                  v228 = (unsigned char *)(v219 + 57);
                  uint64_t v229 = v227 >> 8;
                  goto LABEL_445;
                }
                v228 = *(unsigned char **)(v218 + 80 * v215 + 64);
                if (v228)
                {
                  LOBYTE(v229) = *v228;
LABEL_445:
                  if ((_BYTE)v229)
                  {
                    uint64_t v229 = (char)v229;
                    char v230 = v228[1];
                    if (v230)
                    {
                      v231 = v228 + 2;
                      do
                      {
                        uint64_t v229 = 31 * v229 + v230;
                        int v232 = *v231++;
                        char v230 = v232;
                      }
                      while (v232);
                    }
                    uint64_t v233 = v229 & 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v233 = 0;
                  }
                  goto LABEL_452;
                }
                uint64_t v233 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_452:
                unint64_t v234 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v226 ^ (v226 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v226 ^ (v226 >> 30))) >> 27));
                unint64_t v235 = v234 ^ (v234 >> 31);
                unint64_t v236 = *v216;
                if (!*v216
                  || (unint64_t v236 = v235 % *(unsigned int *)(v68 + 560),
                      uint64_t v237 = *(unsigned int *)(*(void *)(v68 + 544) + 4 * v236),
                      v237 == 0x7FFFFFFF))
                {
LABEL_457:
                  uint64_t v239 = *(unsigned int *)(v68 + 572);
                  if (v239 == 0x7FFFFFFF)
                  {
                    uint64_t v239 = *(unsigned int *)(v68 + 568);
                    int v240 = v239;
                    if (v239 == *(_DWORD *)(v68 + 560))
                    {
                      uint64_t v241 = v211;
                      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(v68 + 536, 2 * *(_DWORD *)(v68 + 564));
                      uint64_t v211 = v241;
                      unint64_t v236 = v235 % *(unsigned int *)(v68 + 560);
                      int v240 = *(_DWORD *)(v68 + 568);
                    }
                    *(_DWORD *)(v68 + 568) = v240 + 1;
                    uint64_t v242 = *(void *)(v68 + 552);
                    int v243 = *(_DWORD *)(v242 + 24 * v239);
                  }
                  else
                  {
                    uint64_t v242 = *(void *)(v68 + 552);
                    int v243 = *(_DWORD *)(v242 + 24 * v239);
                    *(_DWORD *)(v68 + 572) = v243 & 0x7FFFFFFF;
                  }
                  uint64_t v244 = 24 * v239;
                  *(_DWORD *)(v242 + v244) = v243 | 0x80000000;
                  uint64_t v245 = *(void *)(v68 + 544);
                  *(_DWORD *)(*(void *)(v68 + 552) + v244) = *(_DWORD *)(*(void *)(v68 + 552) + 24 * v239) & 0x80000000 | *(_DWORD *)(v245 + 4 * v236);
                  *(void *)(*(void *)(v68 + 552) + 24 * v239 + 8) = v226;
                  *(void *)(*(void *)(v68 + 552) + 24 * v239 + 16) = v233;
                  *(_DWORD *)(v245 + 4 * v236) = v239;
                  ++*(_DWORD *)(v68 + 564);
                  unsigned int v217 = *(_DWORD *)(v63 + 496);
                  uint64_t v62 = v311;
                }
                else
                {
                  uint64_t v238 = *(void *)(v68 + 552);
                  while (*(void *)(v238 + 24 * v237 + 8) != v226)
                  {
                    uint64_t v237 = *(_DWORD *)(v238 + 24 * v237) & 0x7FFFFFFF;
                    if (v237 == 0x7FFFFFFF) {
                      goto LABEL_457;
                    }
                  }
                  *(void *)(v238 + 24 * v237 + 16) = 0;
                  *(void *)(*(void *)(v68 + 552) + 24 * v237 + 16) = v233;
                }
                ++*(_DWORD *)(v68 + 576);
                if (v217 <= (int)v212 + 1) {
                  unsigned int v246 = v212 + 1;
                }
                else {
                  unsigned int v246 = v217;
                }
                while (1)
                {
                  uint64_t v215 = (v212 + 1);
                  if (v246 - 1 == v212) {
                    break;
                  }
                  LODWORD(v212) = v212 + 1;
                  unsigned int v247 = v215;
                  if ((*(_DWORD *)(*(void *)(v63 + 480) + 80 * v215 + 8) & 0x80000000) != 0) {
                    goto LABEL_471;
                  }
                }
                unsigned int v247 = v246;
LABEL_471:
                LODWORD(v212) = v247;
              }
              while (v211 != v247);
            }
            uint64_t v248 = *(void *)(v63 + 528);
            if (v248)
            {
              uint64_t v249 = *(void *)(v63 + 544);
              uint64_t v250 = v249 + 32 * v248;
              while (1)
              {
                unint64_t v251 = *(void *)(v249 + 8);
                if ((v251 & 1) == 0) {
                  break;
                }
                v253 = *(unsigned char **)(v249 + 16);
                if (v253)
                {
                  LOBYTE(v252) = *v253;
LABEL_478:
                  if ((_BYTE)v252)
                  {
                    uint64_t v252 = (char)v252;
                    char v254 = v253[1];
                    if (v254)
                    {
                      v255 = v253 + 2;
                      do
                      {
                        uint64_t v252 = 31 * v252 + v254;
                        int v256 = *v255++;
                        char v254 = v256;
                      }
                      while (v256);
                    }
                    uint64_t v257 = v252 & 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v257 = 0;
                  }
                  goto LABEL_485;
                }
                uint64_t v257 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_485:
                *(void *)__src = v257;
                re::DynamicArray<re::WeakStringID>::add((void *)(v68 + 480), __src);
                v249 += 32;
                if (v249 == v250) {
                  goto LABEL_486;
                }
              }
              uint64_t v252 = v251 >> 8;
              v253 = (unsigned char *)(v249 + 9);
              goto LABEL_478;
            }
LABEL_486:
            long long v258 = *(_OWORD *)(v63 + 200);
            long long v259 = *(_OWORD *)(v63 + 216);
            long long v260 = *(_OWORD *)(v63 + 232);
            *(_DWORD *)(v68 + 288) = *(_DWORD *)(v63 + 248);
            *(_OWORD *)(v68 + 256) = v259;
            *(_OWORD *)(v68 + 272) = v260;
            *(_OWORD *)(v68 + 240) = v258;
            uint64_t v64 = v309;
            if (*(unsigned char *)(v68 + 292) || *(unsigned char *)(v63 + 252))
            {
              if (!*(unsigned char *)(v68 + 292) || *(unsigned char *)(v63 + 252))
              {
                if (!*(unsigned char *)(v68 + 292) && *(unsigned char *)(v63 + 252)) {
                  *(unsigned char *)(v68 + 292) = 1;
                }
                *(unsigned char *)(v68 + 293) = *(unsigned char *)(v63 + 253);
              }
              else
              {
                *(unsigned char *)(v68 + 292) = 0;
              }
            }
            re::DynamicArray<re::RenderAttachmentState>::operator=(v68 + 296, (uint64_t *)(v63 + 256));
            if (v304)
            {
              BOOL v261 = re::DynamicString::operator==(v304, v68);
              int v262 = v261 && v301;
              char v263 = v261 && v300;
              if (!v303 || v261) {
                goto LABEL_502;
              }
LABEL_500:
              BOOL v264 = re::DynamicString::operator==(v303, v68);
              int v262 = v264 && v299;
              char v263 = v264 && v298;
            }
            else
            {
              if (v303) {
                goto LABEL_500;
              }
              int v262 = 0;
              char v263 = 0;
            }
LABEL_502:
            if ((v302 & 1) != 0
              && ((*(void *)(v68 + 8) & 1) != 0
                ? (v265 = *(const char **)(v68 + 16))
                : (v265 = (const char *)(v68 + 9)),
                  !strcmp(v265, "Transparent")))
            {
              v263 |= v306;
              if ((v297 | v262)) {
                goto LABEL_508;
              }
            }
            else if (v262)
            {
LABEL_508:
              MurmurHash3_x64_128((uint64_t)"ARBackwardsCompatibility", 24, 0, (unint64_t *)__src);
              *(void *)__src ^= *(void *)&__src[8]
                                + (*(void *)__src << 6)
                                + (*(void *)__src >> 2)
                                - 0x61C8864680B583E9;
              re::DynamicArray<unsigned long>::add((void *)(v68 + 440), __src);
              int v101 = 0;
              uint64_t v65 = (uint64_t)v317;
              if ((v263 & 1) == 0) {
                goto LABEL_514;
              }
LABEL_512:
              MurmurHash3_x64_128((uint64_t)"DynamicLightingBackwardsCompatibility", 37, 0, (unint64_t *)__src);
              *(void *)__src ^= *(void *)&__src[8]
                                + (*(void *)__src << 6)
                                + (*(void *)__src >> 2)
                                - 0x61C8864680B583E9;
              re::DynamicArray<unsigned long>::add((void *)(v68 + 440), __src);
LABEL_513:
              int v101 = 0;
              goto LABEL_514;
            }
            uint64_t v65 = (uint64_t)v317;
            if (v263) {
              goto LABEL_512;
            }
            goto LABEL_513;
          }
          uint64_t v65 = (uint64_t)v317;
          long long v156 = v317;
          if (*(unsigned char *)(v315 + 8)) {
            long long v156 = *(_anonymous_namespace_ **)(v315 + 16);
          }
          long long v157 = (char *)&v344 + 9;
          if (BYTE8(v344)) {
            long long v157 = (char *)v345;
          }
          re::DynamicString::format((re::DynamicString *)"[%s] - makeLibrary failed for pixel shader function %s.", (re::DynamicString *)__src, v156, v157);
          long long v158 = *(_OWORD *)__src;
          uint64_t v159 = *(void *)&__src[16];
          uint64_t v160 = v378;
          *(unsigned char *)uint64_t v311 = 0;
          *(_OWORD *)(v311 + 8) = v158;
          *(void *)(v311 + 24) = v159;
          *(void *)(v311 + 32) = v160;
          uint64_t v64 = v309;
        }
        else
        {
          uint64_t v154 = v65;
          if (*(unsigned char *)(v315 + 8)) {
            uint64_t v154 = *(void *)(v315 + 16);
          }
          uint64_t v64 = v309;
          if (*(unsigned char *)(v63 + 8)) {
            uint64_t v155 = *(void *)(v63 + 16);
          }
          else {
            uint64_t v155 = v63 + 9;
          }
          re::DynamicString::format((re::DynamicString *)"[%s] - unable to get fragment library hash for technique '%s'", (re::DynamicString *)__src, v154, v155);
          long long v170 = *(_OWORD *)__src;
          uint64_t v171 = *(void *)&__src[16];
          uint64_t v172 = v378;
          *(unsigned char *)uint64_t v311 = 0;
          *(_OWORD *)(v311 + 8) = v170;
          *(void *)(v311 + 24) = v171;
          *(void *)(v311 + 32) = v172;
        }
        int v101 = 1;
LABEL_514:
        if ((void)v344)
        {
          if (BYTE8(v344)) {
            (*(void (**)(void))(*(void *)v344 + 40))();
          }
          long long v344 = 0u;
          long long v345 = 0u;
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v342);
        uint64_t v54 = v314;
        uint64_t v53 = v315;
        goto LABEL_519;
      }
      re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)v385);
      *(unsigned char *)uint64_t v311 = 0;
      uint64_t v120 = v378;
      *(void *)(v311 + 8) = *(void *)__src;
      *(void *)(v311 + 32) = v120;
      *(_OWORD *)(v311 + 16) = *(_OWORD *)&__src[8];
      int v101 = 1;
      uint64_t v64 = v309;
LABEL_519:
      re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((unsigned __int8 *)&v384);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v349);
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v350);
LABEL_520:
      if (v353) {

      }
LABEL_187:
      if (!v357[0] && v358 && (v359 & 1) != 0) {
        (*(void (**)(void))(*(void *)v358 + 40))();
      }
      if (v101) {
        goto LABEL_524;
      }
      v63 += 664;
      if (v63 == v64) {
        goto LABEL_523;
      }
    }
    re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)&v358);
    *(unsigned char *)uint64_t v62 = 0;
    uint64_t v74 = v378;
    *(void *)(v62 + 8) = *(void *)__src;
    *(void *)(v62 + 32) = v74;
    *(_OWORD *)(v62 + 16) = *(_OWORD *)&__src[8];
    goto LABEL_186;
  }
LABEL_523:
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)__src, (uint64_t *)&v360);
  *(unsigned char *)uint64_t v62 = 1;
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(v62 + 8, (uint64_t *)__src);
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)__src);
LABEL_524:
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)&v360);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v365);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v369);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v373);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)v376);
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>(uint64_t a1, re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 88 * v9;
  return v12 + 48;
}

void *re::DynamicArray<re::TechniqueFunctionConstant>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 4) + (v4 << 6)), a2);
  *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
  uint64_t result = re::FixedArray<unsigned char>::FixedArray((void *)v5 + 5, (uint64_t *)a2 + 5);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>(uint64_t a1, re::DynamicString *a2, const char *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 80 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(uint64_t *a1, const re::DynamicString *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 != -1) {
    return a1[1] + 96 * v6 + 32;
  }
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
}

void *re::DynamicArray<re::WeakStringID>::add(void *this, void *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(void *)(v3[4] + 8 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

size_t re::hashString(re *this, const char *a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  size_t result = strlen((const char *)this);
  if (result)
  {
    MurmurHash3_x64_128((uint64_t)this, result, 0, v4);
    return (v4[1] + (v4[0] << 6) + (v4[0] >> 2) - 0x61C8864680B583E9) ^ v4[0];
  }
  return result;
}

unsigned __int8 *re::makeMaterialBuilder@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X3>, unsigned char *a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X6>, _DWORD *a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v283 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 40))
  {
    long long v24 = *(_OWORD *)v259;
    uint64_t v25 = *(void *)&v259[16];
    uint64_t v26 = v260;
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v24;
    *(void *)(a7 + 24) = v25;
    *(void *)(a7 + 32) = v26;
    return result;
  }
  uint64_t v8 = a2;
  uint64_t v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(a2 + 32));
  uint64_t v10 = (re::StringID *)*((void *)v9 + 93);
  memset(v256, 0, 36);
  *(void *)&v256[36] = 0x7FFFFFFFLL;
  uint64_t v11 = *((void *)v10 + 15);
  uint64_t v216 = v8;
  uint64_t v202 = v9;
  uint64_t v203 = a7;
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = (re::StringID *)*((void *)v10 + 16);
    int v214 = (re::StringID *)((char *)v13 + 8 * v11);
    do
    {
      uint64_t v14 = *(void *)(*(void *)v13 + 56);
      if (v14)
      {
        uint64_t v15 = *(void *)(*(void *)v13 + 64);
        for (uint64_t i = v14 << 6; i; i -= 64)
        {
          if (*(unsigned char *)(v15 + 8)) {
            int v17 = *(const char **)(v15 + 16);
          }
          else {
            int v17 = (const char *)(v15 + 9);
          }
          BOOL v18 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v256, (uint64_t)v259);
          uint64_t v9 = *(_anonymous_namespace_ **)v259;
          if (*(void *)v259 && (v259[8] & 1) != 0) {
            uint64_t v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v259 + 40))();
          }
          if (!v18)
          {
            uint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8 + 296, v15);
            if (v9)
            {
              if (*(unsigned char *)(v15 + 8)) {
                uint64_t v19 = *(const char **)(v15 + 16);
              }
              else {
                uint64_t v19 = (const char *)(v15 + 9);
              }
              unint64_t v20 = (_anonymous_namespace_ *)re::parseConstant((_anonymous_namespace_ *)v259, *((void *)v12 + 178), v19, *(unsigned __int16 *)(v15 + 32), *(_WORD *)(v15 + 34), (uint64_t)v9);
              if (!v259[0])
              {
                re::DynamicString::DynamicString((re::DynamicString *)v258, (const re::DynamicString *)&v259[8]);
                v269[0] = 0;
                *(void *)uint64_t v270 = *(void *)&v258[0];
                *(void *)&long long v271 = *((void *)&v258[1] + 1);
                *(_OWORD *)&v270[8] = *(_OWORD *)((char *)v258 + 8);
                re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)v259);
                id v22 = v202;
                a7 = v203;
                goto LABEL_130;
              }
              if (*(unsigned char *)(v15 + 8)) {
                char v21 = *(const char **)(v15 + 16);
              }
              else {
                char v21 = (const char *)(v15 + 9);
              }
              re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v256, (re::DynamicString *)v258, (uint64_t)&v259[8]);
              if (*(void *)&v258[0] && (BYTE8(v258[0]) & 1) != 0) {
                (*(void (**)(void))(**(void **)&v258[0] + 40))();
              }
              uint64_t v9 = (_anonymous_namespace_ *)re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)v259);
            }
          }
          v15 += 64;
        }
      }
      uint64_t v13 = (re::StringID *)((char *)v13 + 8);
    }
    while (v13 != v214);
    LODWORD(v11) = *(_DWORD *)&v256[28];
    id v22 = v202;
    uint64_t v10 = v12;
    a7 = v203;
  }
  else
  {
    id v22 = v9;
  }
  if (v11 < *(_DWORD *)(v8 + 324))
  {
    LODWORD(v255[0]) = 0;
    long long v253 = 0u;
    long long v254 = 0u;
    *(void *)((char *)v255 + 4) = 0x7FFFFFFFLL;
    uint64_t v27 = *(unsigned int *)(v8 + 328);
    long long v213 = v10;
    uint64_t v28 = 0;
    if (v27)
    {
      uint64_t v29 = (int *)(*(void *)(v8 + 312) + 8);
      while (1)
      {
        int v30 = *v29;
        v29 += 20;
        if (v30 < 0) {
          break;
        }
        if (v27 == ++v28)
        {
          LODWORD(v28) = *(_DWORD *)(v8 + 328);
          break;
        }
      }
    }
    if (v27 != v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = *(void *)(v8 + 312);
      do
      {
        if (!re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v256, v32 + 80 * v31 + 16))re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)&v253, (re::DynamicString *)(v32 + 80 * v31 + 16), (const re::DynamicString *)(v32 + 80 * v31 + 48)); {
        unsigned int v33 = *(_DWORD *)(v8 + 328);
        }
        uint64_t v32 = *(void *)(v8 + 312);
        if (v33 <= (int)v28 + 1) {
          unsigned int v33 = v28 + 1;
        }
        while (1)
        {
          uint64_t v31 = (v28 + 1);
          if (v33 - 1 == v28) {
            break;
          }
          LODWORD(v28) = v28 + 1;
          unsigned int v34 = v31;
          if ((*(_DWORD *)(v32 + 80 * v31 + 8) & 0x80000000) != 0) {
            goto LABEL_47;
          }
        }
        unsigned int v34 = v33;
LABEL_47:
        LODWORD(v28) = v34;
      }
      while (v27 != v34);
    }
    uint64_t v35 = *((void *)v213 + 15);
    if (v35)
    {
      uint64_t v36 = (re::StringID *)*((void *)v213 + 16);
      unint64_t v204 = (re::StringID *)((char *)v36 + 8 * v35);
      uint64_t v209 = (uint64_t)(a1[7] + 33);
      while (1)
      {
        uint64_t v215 = v36;
        uint64_t v37 = *(void *)v36;
        *(void *)long long v259 = *(void *)(*(void *)v36 + 2424);
        uint64_t v38 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v209, (uint64_t *)v259);
        if (v38) {
          int v39 = (void **)(v38 + 8);
        }
        else {
          int v39 = 0;
        }
        uint64_t v40 = *(void *)v36;
        if (*(unsigned char *)(*(void *)v36 + 2448)) {
          uint64_t v41 = *(re::ns **)(v40 + 2456);
        }
        else {
          uint64_t v41 = (re::ns *)(v40 + 2449);
        }
        re::mtl::Library::makeFunction(v39, v41, &v252);
        uint64_t v211 = (_anonymous_namespace_ *)*((void *)v213 + 178);
        id v42 = objc_msgSend(v252, sel_functionConstantsDictionary);
        memset(v250, 0, sizeof(v250));
        LODWORD(v251[0]) = 0;
        *(void *)((char *)v251 + 4) = 0x7FFFFFFFLL;
        id v43 = objc_msgSend(v42, sel_keyEnumerator);
        id v44 = objc_msgSend(v43, sel_nextObject);
        if (v44)
        {
          id v45 = v44;
          do
          {
            uint64_t v241 = (char *)objc_msgSend(v45, sel_UTF8String);
            id v257 = objc_msgSend(v42, sel_objectForKey_, v45);
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v250, &v241, &v257);
            if (v257) {

            }
            id v45 = objc_msgSend(v43, sel_nextObject);
          }
          while (v45);
        }
        LOBYTE(v258[0]) = 0;
        LOBYTE(v247[0]) = 0;
        uint64_t v46 = v211;
        uint64_t v212 = v37 + 48;
        re::parseFunctionConstants(v46, (uint64_t)v250, (uint64_t)&v253, v258, (uint64_t)v247, v37 + 48, 0, 0, (uint64_t)v259);
        if (LOBYTE(v258[0])) {
          re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v258 + 1);
        }
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v250);
        int v47 = v259[0];
        uint64_t v8 = v216;
        if (v259[0])
        {
          int v48 = v261;
          if (v261)
          {
            uint64_t v49 = 0;
            unint64_t v50 = (int *)(v260 + 8);
            while (1)
            {
              int v51 = *v50;
              v50 += 28;
              if (v51 < 0) {
                break;
              }
              if (v261 == ++v49)
              {
                LODWORD(v49) = v261;
                break;
              }
            }
          }
          else
          {
            LODWORD(v49) = 0;
          }
          if (v261 != v49)
          {
            uint64_t v52 = v49;
            uint64_t v53 = v260;
            do
            {
              re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v256, (re::DynamicString *)(v53 + 112 * v52 + 16), v53 + 112 * v52 + 48);
              uint64_t v53 = v260;
              if (v261 <= (int)v49 + 1) {
                int v54 = v49 + 1;
              }
              else {
                int v54 = v261;
              }
              int v55 = v49;
              while (1)
              {
                uint64_t v52 = (v55 + 1);
                if (v54 - 1 == v55) {
                  break;
                }
                ++v55;
                LODWORD(v49) = v52;
                if ((*(_DWORD *)(v260 + 112 * v52 + 8) & 0x80000000) != 0) {
                  goto LABEL_81;
                }
              }
              LODWORD(v49) = v54;
LABEL_81:
              ;
            }
            while (v48 != v49);
          }
        }
        else
        {
          re::DynamicString::DynamicString((re::DynamicString *)v250, (const re::DynamicString *)&v259[8]);
          v269[0] = 0;
          *(void *)uint64_t v270 = v250[0];
          *(void *)&long long v271 = v250[3];
          *(_OWORD *)&v270[8] = *(_OWORD *)&v250[1];
        }
        re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(v259);
        if (v252) {

        }
        if (!v47) {
          break;
        }
        unsigned int v56 = *(_DWORD *)&v256[28];
        unsigned int v57 = *(_DWORD *)(v216 + 324);
        if (*(_DWORD *)&v256[28] >= v57) {
          goto LABEL_128;
        }
        uint64_t v58 = v215;
        unint64_t v59 = *(void *)(*(void *)v215 + 2480);
        if (v59) {
          unint64_t v60 = v59 >> 1;
        }
        else {
          unint64_t v60 = v59 >> 1;
        }
        if (v60)
        {
          *(void *)long long v259 = *(void *)(*(void *)v215 + 2432);
          uint64_t v61 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v209, (uint64_t *)v259);
          if (v61) {
            uint64_t v62 = (void **)(v61 + 8);
          }
          else {
            uint64_t v62 = 0;
          }
          uint64_t v63 = *(void *)v215;
          if (*(unsigned char *)(*(void *)v215 + 2480)) {
            uint64_t v64 = *(re::ns **)(v63 + 2488);
          }
          else {
            uint64_t v64 = (re::ns *)(v63 + 2481);
          }
          re::mtl::Library::makeFunction(v62, v64, &v252);
          uint64_t v65 = (_anonymous_namespace_ *)*((void *)v213 + 178);
          id v66 = objc_msgSend(v252, sel_functionConstantsDictionary);
          memset(v250, 0, sizeof(v250));
          LODWORD(v251[0]) = 0;
          *(void *)((char *)v251 + 4) = 0x7FFFFFFFLL;
          id v67 = objc_msgSend(v66, sel_keyEnumerator);
          id v68 = objc_msgSend(v67, sel_nextObject);
          if (v68)
          {
            id v69 = v68;
            do
            {
              uint64_t v241 = (char *)objc_msgSend(v69, sel_UTF8String);
              id v257 = objc_msgSend(v66, sel_objectForKey_, v69);
              re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v250, &v241, &v257);
              if (v257) {

              }
              id v69 = objc_msgSend(v67, sel_nextObject);
            }
            while (v69);
          }
          LOBYTE(v280) = 0;
          v273[0] = 0;
          re::parseFunctionConstants(v65, (uint64_t)v250, (uint64_t)&v253, &v280, (uint64_t)v273, v212, 0, 0, (uint64_t)v259);
          if ((_BYTE)v280) {
            re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v280 + 1);
          }
          re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v250);
          int v70 = v259[0];
          uint64_t v8 = v216;
          if (v259[0])
          {
            int v71 = v261;
            if (v261)
            {
              uint64_t v72 = 0;
              uint64_t v73 = (int *)(v260 + 8);
              while (1)
              {
                int v74 = *v73;
                v73 += 28;
                if (v74 < 0) {
                  break;
                }
                if (v261 == ++v72)
                {
                  LODWORD(v72) = v261;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v72) = 0;
            }
            if (v261 != v72)
            {
              uint64_t v75 = v72;
              uint64_t v76 = v260;
              do
              {
                re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v256, (re::DynamicString *)(v76 + 112 * v75 + 16), v76 + 112 * v75 + 48);
                uint64_t v76 = v260;
                if (v261 <= (int)v72 + 1) {
                  int v77 = v72 + 1;
                }
                else {
                  int v77 = v261;
                }
                int v78 = v72;
                while (1)
                {
                  uint64_t v75 = (v78 + 1);
                  if (v77 - 1 == v78) {
                    break;
                  }
                  ++v78;
                  LODWORD(v72) = v75;
                  if ((*(_DWORD *)(v260 + 112 * v75 + 8) & 0x80000000) != 0) {
                    goto LABEL_121;
                  }
                }
                LODWORD(v72) = v77;
LABEL_121:
                ;
              }
              while (v71 != v72);
            }
          }
          else
          {
            re::DynamicString::DynamicString((re::DynamicString *)v250, (const re::DynamicString *)&v259[8]);
            v269[0] = 0;
            *(void *)uint64_t v270 = v250[0];
            *(void *)&long long v271 = v250[3];
            *(_OWORD *)&v270[8] = *(_OWORD *)&v250[1];
          }
          re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(v259);
          if (v252) {

          }
          if (!v70) {
            break;
          }
          unsigned int v56 = *(_DWORD *)&v256[28];
          unsigned int v57 = *(_DWORD *)(v216 + 324);
          uint64_t v58 = v215;
        }
        if (v56 < v57)
        {
          uint64_t v36 = (re::StringID *)((char *)v58 + 8);
          if (v36 != v204) {
            continue;
          }
        }
        goto LABEL_128;
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v253);
      id v22 = v202;
      a7 = v203;
      goto LABEL_130;
    }
LABEL_128:
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v253);
    a7 = v203;
    id v22 = v202;
  }
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v259, (uint64_t)v256);
  v269[0] = 1;
  int v272 = 0;
  *(_OWORD *)uint64_t v270 = *(_OWORD *)v259;
  memset(v259, 0, sizeof(v259));
  *(void *)&v270[16] = *(void *)&v259[16];
  long long v271 = v260;
  long long v260 = xmmword_23436F740;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v259);
LABEL_130:
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v256);
  if (!v269[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)v259, (const re::DynamicString *)v270);
    *(unsigned char *)a7 = 0;
    *(void *)(a7 + 8) = *(void *)v259;
    *(void *)(a7 + 32) = v260;
    *(_OWORD *)(a7 + 16) = *(_OWORD *)&v259[8];
    return re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(v269);
  }
  *a6 = re::parseMaterialAssetMetadata((_anonymous_namespace_ *)v8, *((void *)v22 + 93), (uint64_t)v270, a3);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FBB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FBB0))
  {
    _MergedGlobals_135 = re::hashString((re *)"OpaqueAR", v195);
    __cxa_guard_release(&qword_26AF7FBB0);
  }
  uint64_t v79 = *((void *)v22 + 93) + 16;
  *(void *)long long v259 = _MergedGlobals_135;
  if (!re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v79, (uint64_t *)v259))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FBC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF7FBC0))
    {
      qword_26AF7FBB8 = re::hashString((re *)"Opaque", v197);
      __cxa_guard_release(&qword_26AF7FBC0);
    }
    uint64_t v80 = *((void *)v22 + 93) + 16;
    *(void *)long long v259 = qword_26AF7FBB8;
    if (re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v80, (uint64_t *)v259))
    {
      uint64_t v81 = *((void *)v22 + 93) + 16;
      *(void *)long long v259 = _MergedGlobals_135;
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(v81, (unint64_t *)v259, &qword_26AF7FBB8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FBD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FBD0))
  {
    qword_26AF7FBC8 = re::hashString((re *)"TransparentAR", v196);
    __cxa_guard_release(&qword_26AF7FBD0);
  }
  uint64_t v82 = *((void *)v22 + 93) + 16;
  *(void *)long long v259 = qword_26AF7FBC8;
  BOOL v83 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v82, (uint64_t *)v259);
  if (!v83)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FBE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF7FBE0))
    {
      qword_26AF7FBD8 = re::hashString((re *)"Transparent", v198);
      __cxa_guard_release(&qword_26AF7FBE0);
    }
    uint64_t v84 = *((void *)v22 + 93) + 16;
    *(void *)long long v259 = qword_26AF7FBD8;
    BOOL v83 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v84, (uint64_t *)v259);
    if (v83)
    {
      uint64_t v85 = *((void *)v22 + 93) + 16;
      *(void *)long long v259 = qword_26AF7FBC8;
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(v85, (unint64_t *)v259, &qword_26AF7FBD8);
    }
  }
  v255[0] = 0;
  *(void *)&long long v254 = 0;
  long long v253 = 0uLL;
  DWORD2(v254) = 0;
  v251[0] = 0;
  memset(v250, 0, 28);
  uint64_t v86 = *(void *)(v8 + 384);
  if (!v86)
  {
    uint64_t v186 = 0;
    unint64_t v185 = 0;
    unint64_t v184 = 0;
    goto LABEL_291;
  }
  int v87 = *(unsigned __int8 **)(v8 + 400);
  uint64_t v210 = &v87[272 * v86];
  uint64_t v88 = v8;
  BOOL v89 = &v261;
  uint64_t v205 = v88 + 9;
  do
  {
    *(void *)&v259[8] = 0;
    *(void *)&v259[16] = "";
    *(void *)&long long v260 = 0;
    *((void *)&v260 + 1) = "";
    *BOOL v89 = 0;
    v89[1] = 0;
    *((_DWORD *)v89 + 4) = 0;
    long long v267 = 0u;
    long long v268 = 0u;
    long long v265 = 0u;
    long long v266 = 0u;
    long long v264 = 0u;
    uint64_t v90 = *((void *)v87 + 10);
    if (v90)
    {
      unsigned int v91 = atomic_load((unsigned int *)(v90 + 704));
      if (v91 == 3)
      {
        unsigned int v92 = re::AssetHandle::assetInfo((re::AssetHandle *)(v87 + 72));
        if (v92[17]) {
          int v93 = (char *)v92[18];
        }
        else {
          int v93 = (char *)v92 + 137;
        }
        re::DynamicString::format((re::DynamicString *)"Found invalid linkedFunctionLibrary asset (%s) in FunctionLink. loadFailed() returned true.", (re::DynamicString *)v258, v93);
        goto LABEL_254;
      }
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v246, (const re::AssetHandle *)(v87 + 72));
    BOOL v94 = re::AssetHandle::assetInfo((re::AssetHandle *)(v87 + 72));
    if (v94[17]) {
      int v95 = (char *)v94[18];
    }
    else {
      int v95 = (char *)v94 + 137;
    }
    re::DynamicString::format((re::DynamicString *)"Searching for linkedFunctionLibrary asset '%s'", (re::DynamicString *)v258, v95);
    if (BYTE8(v258[0])) {
      uint64_t v96 = *(char **)&v258[1];
    }
    else {
      uint64_t v96 = (char *)v258 + 9;
    }
    re::validateAssetType((const re::AssetHandle *)v246, (uint64_t)v96);
    if (*(void *)&v258[0] && (BYTE8(v258[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v258[0] + 40))();
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v246);
    uint64_t v98 = *((void *)v87 + 10);
    if (!v98)
    {
      re::ShaderGraphAsset::assetType(v97);
LABEL_166:
      re::AssetHandle::AssetHandle((re::AssetHandle *)v245, (const re::AssetHandle *)(v87 + 72));
      re::getLibraryHash((re *)&v280, (uint64_t)a1, (const re::AssetHandle *)v245);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v245);
      if ((_BYTE)v280)
      {
        uint64_t v261 = *((void *)&v280 + 1);
        if (*((void *)&v280 + 1)) {
          goto LABEL_168;
        }
        uint64_t v122 = re::AssetHandle::assetInfo((re::AssetHandle *)(v87 + 72));
        if (v122[17]) {
          uint64_t v123 = (char *)v122[18];
        }
        else {
          uint64_t v123 = (char *)v122 + 137;
        }
        re::DynamicString::format((re::DynamicString *)"Could not find hash for linkedFunctionLibrary asset (%s) in FunctionLink.", (re::DynamicString *)v258, v123);
        __n128 v120 = (__n128)v258[0];
        long long v124 = v258[1];
        *(unsigned char *)a7 = 0;
        *(__n128 *)(a7 + 8) = v120;
        *(_OWORD *)(a7 + 24) = v124;
      }
      else
      {
        uint64_t v119 = v205;
        if (*(unsigned char *)(v216 + 8)) {
          uint64_t v119 = *(void *)(v216 + 16);
        }
        re::DynamicString::format((re::DynamicString *)"[%s] - unable to get linked function (%s) library hash", (re::DynamicString *)v258, v119, *((void *)&v260 + 1));
        __n128 v120 = (__n128)v258[0];
        long long v121 = v258[1];
        *(unsigned char *)a7 = 0;
        *(__n128 *)(a7 + 8) = v120;
        *(_OWORD *)(a7 + 24) = v121;
      }
      int v125 = 1;
      goto LABEL_277;
    }
    uint64_t v99 = *(uint64_t **)(v98 + 264);
    if (v99 != re::ShaderGraphAsset::assetType(v97)) {
      goto LABEL_166;
    }
    uint64_t v100 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::ShaderGraphAsset>((re::ShaderGraphAsset *)(v87 + 72));
    if (!v100)
    {
      v126 = "ShaderGraphAsset in FunctionLink was not loaded.";
      goto LABEL_253;
    }
    uint64_t v101 = *((void *)v100 + 6);
    if (v101) {
      uint64_t v100 = (_anonymous_namespace_ *)(id)(v101 + 8);
    }
    uint64_t v102 = v262;
    uint64_t v262 = v101;
    if (v102) {

    }
LABEL_168:
    v259[0] = *v87;
    unint64_t v103 = *((void *)v87 + 6);
    if (v103) {
      unint64_t v104 = v103 >> 1;
    }
    else {
      unint64_t v104 = v103 >> 1;
    }
    if (!v104)
    {
      v126 = "Found empty linkedFunctionName in FunctionLink.";
LABEL_253:
LABEL_254:
      __n128 v120 = (__n128)v258[0];
      long long v168 = v258[1];
      *(unsigned char *)a7 = 0;
      *(__n128 *)(a7 + 8) = v120;
      *(_OWORD *)(a7 + 24) = v168;
      int v125 = 1;
      goto LABEL_277;
    }
    re::StringID::StringID((re::StringID *)&v280, (const re::DynamicString *)(v87 + 40));
    long long v105 = v280;
    *(void *)&long long v280 = 0;
    *((void *)&v280 + 1) = "";
    char v106 = v260;
    uint64_t v107 = *((void *)&v260 + 1);
    long long v260 = v105;
    *(void *)&v258[0] = v105 & 0xFFFFFFFFFFFFFFFELL | v106 & 1;
    *((void *)&v258[0] + 1) = v107;
    re::StringID::destroyString((re::StringID *)v258);
    re::StringID::destroyString((re::StringID *)&v280);
    if (*v87 - 1 > 1) {
      goto LABEL_178;
    }
    unint64_t v109 = *((void *)v87 + 2);
    if (v109) {
      unint64_t v110 = v109 >> 1;
    }
    else {
      unint64_t v110 = v109 >> 1;
    }
    if (!v110)
    {
      v126 = "Found empty shaderFunctionName in FunctionLink.";
      goto LABEL_253;
    }
    re::StringID::StringID((re::StringID *)&v280, (const re::DynamicString *)(v87 + 8));
    long long v111 = v280;
    *(void *)&long long v280 = 0;
    *((void *)&v280 + 1) = "";
    char v112 = v259[8];
    uint64_t v113 = *(void *)&v259[16];
    *(_OWORD *)&v259[8] = v111;
    *(void *)&v258[0] = v111 & 0xFFFFFFFFFFFFFFFELL | v112 & 1;
    *((void *)&v258[0] + 1) = v113;
    re::StringID::destroyString((re::StringID *)v258);
    re::StringID::destroyString((re::StringID *)&v280);
LABEL_178:
    uint64_t v114 = *((void *)v87 + 14);
    if (v114)
    {
      int v115 = 0;
      uint64_t v116 = (int *)*((void *)v87 + 16);
      uint64_t v117 = 4 * v114;
      do
      {
        int v118 = *v116++;
        v115 |= v118;
        v117 -= 4;
      }
      while (v117);
    }
    else
    {
      int v115 = 0;
    }
    int v263 = v115;
    memset(v256, 0, 36);
    *(void *)&v256[36] = 0x7FFFFFFFLL;
    uint64_t v127 = *((void *)v87 + 10);
    if (!v127)
    {
      uint64_t v129 = re::ShaderLibraryAsset::assetType(v108);
LABEL_228:
      re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v129);
LABEL_229:
      uint64_t v155 = v205;
      if (*(unsigned char *)(v216 + 8)) {
        uint64_t v155 = *(void *)(v216 + 16);
      }
      re::DynamicString::format((re::DynamicString *)"%s [LinkedFunction %s]", (re::DynamicString *)&v241, v155, *((void *)&v260 + 1));
      uint64_t v249 = 0;
      memset(v247, 0, sizeof(v247));
      int v248 = 0;
      if (v242) {
        long long v156 = v244;
      }
      else {
        long long v156 = (_anonymous_namespace_ *)v243;
      }
      int v125 = 1;
      v239[0] = 1;
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v240, (uint64_t)(v87 + 184));
      v235[0] = 1;
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)v236, (uint64_t *)v87 + 29);
      double v158 = re::parseFunctionConstants(v156, (uint64_t)v256, (uint64_t)(v87 + 136), v239, (uint64_t)v235, 0, 1, 0, (uint64_t)&v280);
      if (v235[0])
      {
        long long v157 = (_anonymous_namespace_ *)v236[0];
        if (v236[0])
        {
          if (v238) {
            long long v157 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(*(void *)v236[0] + 40))(v158);
          }
          uint64_t v238 = 0;
          memset(v236, 0, sizeof(v236));
          ++v237;
        }
      }
      if (v239[0]) {
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v240);
      }
      if ((_BYTE)v280)
      {
        unint64_t v159 = DWORD1(v282);
        int v160 = DWORD2(v282);
        if (DWORD2(v282))
        {
          uint64_t v161 = 0;
          id v162 = (int *)(*((void *)&v281 + 1) + 8);
          while (1)
          {
            int v163 = *v162;
            v162 += 28;
            if (v163 < 0) {
              break;
            }
            if (DWORD2(v282) == ++v161)
            {
              LODWORD(v161) = DWORD2(v282);
              break;
            }
          }
        }
        else
        {
          LODWORD(v161) = 0;
        }
        if (DWORD2(v282) != v161)
        {
          unint64_t v169 = 0;
          uint64_t v170 = v161;
          do
          {
            uint64_t v171 = *((void *)&v264 + 1);
            if (*((void *)&v264 + 1) <= v169)
            {
              id v257 = 0;
              memset(v258, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v273 = 136315906;
              *(void *)&v273[4] = "operator[]";
              __int16 v274 = 1024;
              int v275 = 468;
              __int16 v276 = 2048;
              unint64_t v277 = v169;
              __int16 v278 = 2048;
              uint64_t v279 = v171;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            uint64_t v172 = *((void *)&v281 + 1) + 112 * v170;
            uint64_t v173 = re::DynamicString::operator=((re::DynamicString *)(v265 + (v169 << 6)), (re::DynamicString *)(v172 + 48));
            *((_DWORD *)v173 + 8) = *(_DWORD *)(v172 + 80);
            re::FixedArray<unsigned char>::operator=((uint64_t *)v173 + 5, (uint64_t *)(v172 + 88));
            ++v169;
            if (DWORD2(v282) <= (v161 + 1)) {
              int v174 = v161 + 1;
            }
            else {
              int v174 = DWORD2(v282);
            }
            while (1)
            {
              uint64_t v170 = (v161 + 1);
              if (v174 - 1 == v161) {
                break;
              }
              LODWORD(v161) = v161 + 1;
              int v175 = v170;
              if ((*(_DWORD *)(*((void *)&v281 + 1) + 112 * v170 + 8) & 0x80000000) != 0) {
                goto LABEL_266;
              }
            }
            int v175 = v174;
LABEL_266:
            LODWORD(v161) = v175;
          }
          while (v160 != v175);
        }
        long long v176 = (_anonymous_namespace_ *)re::TechniqueDefinitionBuilder::hashFunctionConstants(v265, *((uint64_t *)&v264 + 1), 1);
        *((void *)&v265 + 1) = v176;
        a7 = v203;
        switch(*v87)
        {
          case 1u:
          case 3u:
            uint64_t v177 = (_anonymous_namespace_ *)&v253;
            goto LABEL_270;
          case 2u:
          case 4u:
            uint64_t v177 = (_anonymous_namespace_ *)v250;
LABEL_270:
            re::DynamicArray<re::LinkedFunction>::add(v177, (uint64_t)v259);
            int v125 = 0;
            break;
          default:
            long long v178 = v258[0];
            long long v179 = v258[1];
            a7 = v203;
            *(unsigned char *)uint64_t v203 = 0;
            *(_OWORD *)(v203 + 8) = v178;
            *(_OWORD *)(v203 + 24) = v179;
            int v125 = 1;
            break;
        }
      }
      else
      {
        id v164 = (_anonymous_namespace_ *)v243;
        if (v242) {
          id v164 = v244;
        }
        int v165 = (char *)&v281 + 1;
        if (v281) {
          int v165 = (char *)*((void *)&v281 + 1);
        }
        re::DynamicString::format((re::DynamicString *)"Failed to parse %s function constants: %s", (re::DynamicString *)v258, v164, v165);
        long long v166 = v258[0];
        long long v167 = v258[1];
        *(unsigned char *)a7 = 0;
        *(_OWORD *)(a7 + 8) = v166;
        *(_OWORD *)(a7 + 24) = v167;
      }
      re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((unsigned __int8 *)&v280);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v247);
      if (v241 && (v242 & 1) != 0) {
        (*(void (**)(void))(*(void *)v241 + 40))();
      }
      goto LABEL_276;
    }
    long long v128 = *(uint64_t **)(v127 + 264);
    uint64_t v129 = re::ShaderLibraryAsset::assetType(v108);
    if (v128 != v129) {
      goto LABEL_228;
    }
    uint64_t v130 = re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>((re::ShaderLibraryAsset *)(v87 + 72));
    if (v130)
    {
      re::ShaderManager::makeFunction(a1[7], *(void *)(v130 + 72), *((re::ns **)&v260 + 1), 0, v273);
      id v131 = objc_msgSend(*(id *)v273, sel_functionConstantsDictionary);
      memset(v258, 0, 36);
      *(void *)((char *)&v258[2] + 4) = 0x7FFFFFFFLL;
      id v132 = objc_msgSend(v131, sel_keyEnumerator);
      id v133 = objc_msgSend(v132, sel_nextObject);
      if (v133)
      {
        id v134 = v133;
        do
        {
          *(void *)&long long v280 = objc_msgSend(v134, sel_UTF8String);
          v247[0] = objc_msgSend(v131, sel_objectForKey_, v134);
          re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v258, (char **)&v280, v247);
          if (v247[0]) {

          }
          id v134 = objc_msgSend(v132, sel_nextObject);
        }
        while (v134);
      }
      uint64_t v135 = *(void *)&v258[0];
      if (!*(void *)v256 || *(void *)v256 == *(void *)&v258[0])
      {
        *(void *)&v258[0] = *(void *)v256;
        long long v182 = *(_OWORD *)&v256[8];
        *(void *)int v256 = v135;
        *(void *)&v256[8] = *((void *)&v258[0] + 1);
        *(void *)&v256[16] = *(void *)&v258[1];
        *(_OWORD *)((char *)v258 + 8) = v182;
        long long v183 = *(_OWORD *)&v256[24];
        *(_OWORD *)&v256[24] = *(_OWORD *)((char *)&v258[1] + 8);
        *(_OWORD *)((char *)&v258[1] + 8) = v183;
      }
      else
      {
        if (*(_DWORD *)&v256[28])
        {
          uint64_t v136 = a7;
          if (*(_DWORD *)&v256[24]) {
            memset_pattern16(*(void **)&v256[8], &memset_pattern_169, 4 * *(unsigned int *)&v256[24]);
          }
          unint64_t v137 = *(unsigned int *)&v256[32];
          if (*(_DWORD *)&v256[32])
          {
            uint64_t v138 = 0;
            unint64_t v139 = 0;
            do
            {
              uint64_t v140 = *(void *)&v256[16] + v138;
              int v141 = *(_DWORD *)(*(void *)&v256[16] + v138 + 8);
              if (v141 < 0)
              {
                *(_DWORD *)(v140 + 8) = v141 & 0x7FFFFFFF;
                id v142 = *(void **)(v140 + 24);
                if (v142)
                {

                  *(void *)(v140 + 24) = 0;
                  unint64_t v137 = *(unsigned int *)&v256[32];
                }
              }
              ++v139;
              v138 += 32;
            }
            while (v139 < v137);
          }
          *(_DWORD *)&v256[28] = 0;
          *(_DWORD *)&v256[32] = 0;
          *(_DWORD *)&v256[36] = 0x7FFFFFFF;
          ++*(_DWORD *)&v256[40];
          a7 = v136;
        }
        if (v135)
        {
          if (*(_DWORD *)&v256[24] < HIDWORD(v258[1])) {
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity((uint64_t)v256, HIDWORD(v258[1]));
          }
          unint64_t v143 = LODWORD(v258[2]);
          if (LODWORD(v258[2]))
          {
            uint64_t v144 = 0;
            unint64_t v145 = 0;
            int v199 = v89;
            do
            {
              uint64_t v146 = (unint64_t *)(*(void *)&v258[1] + v144);
              if ((*(_DWORD *)(*(void *)&v258[1] + v144 + 8) & 0x80000000) != 0)
              {
                unint64_t v147 = *v146;
                unint64_t v148 = *v146 % *(unsigned int *)&v256[24];
                uint64_t v149 = *(unsigned int *)&v256[36];
                if (*(_DWORD *)&v256[36] == 0x7FFFFFFF)
                {
                  uint64_t v149 = *(unsigned int *)&v256[32];
                  int v150 = *(_DWORD *)&v256[32];
                  if (*(_DWORD *)&v256[32] == *(_DWORD *)&v256[24])
                  {
                    re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity((uint64_t)v256, 2 * *(_DWORD *)&v256[28]);
                    unint64_t v148 = v147 % *(unsigned int *)&v256[24];
                    int v150 = *(_DWORD *)&v256[32];
                  }
                  *(_DWORD *)&v256[32] = v150 + 1;
                  uint64_t v151 = *(void *)&v256[16];
                  int v152 = *(_DWORD *)(*(void *)&v256[16] + 32 * v149 + 8);
                }
                else
                {
                  uint64_t v151 = *(void *)&v256[16];
                  int v152 = *(_DWORD *)(*(void *)&v256[16] + 32 * *(unsigned int *)&v256[36] + 8);
                  *(_DWORD *)&v256[36] = v152 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v151 + 32 * v149 + 8) = v152 | 0x80000000;
                unint64_t v153 = v148;
                *(_DWORD *)(*(void *)&v256[16] + 32 * v149 + 8) = *(_DWORD *)(*(void *)&v256[16] + 32 * v149 + 8) & 0x80000000 | *(_DWORD *)(*(void *)&v256[8] + 4 * v148);
                *(void *)(*(void *)&v256[16] + 32 * v149) = v147;
                *(void *)(*(void *)&v256[16] + 32 * v149 + 16) = v146[2];
                uint64_t v154 = *(void *)&v256[16] + 32 * v149;
                *(void *)(v154 + 24) = (id)v146[3];
                *(_DWORD *)(*(void *)&v256[8] + 4 * v153) = v149;
                ++*(_DWORD *)&v256[28];
                unint64_t v143 = LODWORD(v258[2]);
                BOOL v89 = v199;
              }
              ++v145;
              v144 += 32;
            }
            while (v145 < v143);
          }
          ++*(_DWORD *)&v256[40];
          a7 = v203;
        }
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v258);
      if (*(void *)v273) {

      }
      goto LABEL_229;
    }
    long long v180 = v258[0];
    long long v181 = v258[1];
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v180;
    *(_OWORD *)(a7 + 24) = v181;
    int v125 = 1;
LABEL_276:
    v120.n128_f64[0] = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v256);
LABEL_277:
    if (*((void *)&v267 + 1))
    {
      if ((void)v268)
      {
        (*(void (**)(__n128))(**((void **)&v267 + 1) + 40))(v120);
        long long v268 = 0uLL;
      }
      *((void *)&v267 + 1) = 0;
    }
    re::FixedArray<re::TypedArgument>::deinit(&v266);
    re::FixedArray<re::TechniqueFunctionConstant>::deinit(&v264);
    if (v262)
    {

      uint64_t v262 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v260);
    re::StringID::destroyString((re::StringID *)&v259[8]);
    if (v125) {
      goto LABEL_320;
    }
    v87 += 272;
  }
  while (v87 != v210);
  unint64_t v184 = v254;
  unint64_t v185 = v250[2];
  uint64_t v186 = v255[0];
  uint64_t v8 = v216;
  id v22 = v202;
LABEL_291:
  long long v282 = 0u;
  long long v281 = 0u;
  long long v280 = 0u;
  if (v184)
  {
    uint64_t v188 = v281;
    uint64_t v189 = 144 * v184;
    do
    {
      re::ObjectHelper::move<re::LinkedFunction>(v186, v188);
      v186 += 144;
      v188 += 144;
      v189 -= 144;
    }
    while (v189);
  }
  if (v185)
  {
    uint64_t v190 = v251[0];
    uint64_t v191 = *((void *)&v282 + 1);
    uint64_t v192 = 144 * v185;
    do
    {
      re::ObjectHelper::move<re::LinkedFunction>(v190, v191);
      v190 += 144;
      v191 += 144;
      v192 -= 144;
    }
    while (v192);
  }
  uint64_t v193 = *((void *)v22 + 93);
  uint64_t v234 = v193;
  if (v193) {
    id v194 = (id)(v193 + 8);
  }
  v217[0] = *(unsigned char *)(v8 + 344);
  if (v217[0]) {
    v217[1] = *(unsigned char *)(v8 + 345);
  }
  if (*(unsigned char *)(v8 + 346)) {
    char v219 = *(unsigned char *)(v8 + 347);
  }
  if (*(unsigned char *)(v8 + 348)) {
    char v221 = *(unsigned char *)(v8 + 349);
  }
  if (*(unsigned char *)(v8 + 350)) {
    char v223 = *(unsigned char *)(v8 + 351);
  }
  if (*(unsigned char *)(v8 + 352)) {
    char v225 = *(unsigned char *)(v8 + 353);
  }
  if (*(unsigned char *)(v8 + 354)) {
    char v227 = *(unsigned char *)(v8 + 355);
  }
  if (*(unsigned char *)(v8 + 356)) {
    char v229 = *(unsigned char *)(v8 + 357);
  }
  if (*(unsigned char *)(v8 + 358)) {
    char v231 = *(unsigned char *)(v8 + 359);
  }
  if (*(unsigned char *)(v8 + 360)) {
    char v233 = *(unsigned char *)(v8 + 361);
  }
  re::MaterialBuilder::MaterialBuilder((uint64_t)v259, &v234, a5, (uint64_t *)v270, v217, (uint64_t *)&v280, v8, a4);
  if (v193) {

  }
  re::MaterialBuilder::MaterialBuilder((uint64_t)v258, (uint64_t)v259);
  *(unsigned char *)a7 = 1;
  re::MaterialBuilder::MaterialBuilder(a7 + 8, (uint64_t)v258);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v258);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v259);
  re::FixedArray<re::LinkedFunction>::deinit((void *)&v281 + 1);
  re::FixedArray<re::LinkedFunction>::deinit(&v280);
LABEL_320:
  re::DynamicArray<re::LinkedFunction>::deinit((uint64_t)v250);
  re::DynamicArray<re::LinkedFunction>::deinit((uint64_t)&v253);
  return re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(v269);
}

BOOL re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 24 * v3 + 8) == v2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 24 * v3 + 8) != v2);
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v13 = *(void *)(a1 + 16);
      if (*(void *)(v13 + 24 * v8 + 8) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v13 + 24 * v8 + 8) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
      unint64_t v6 = *a2;
    }
    else
    {
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  uint64_t v15 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(v15 + 4 * v7);
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(void *)(*(void *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(v15 + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::validateAssetType(const re::AssetHandle *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v4 = re::AssetHandle::AssetHandle((re::AssetHandle *)v22, a1);
  *(void *)&long long __src = re::ShaderLibraryAsset::assetType(v4);
  *((void *)&__src + 1) = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)__src);
  long long __dst = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  int v27 = 0;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetType const*>::setCapacity(&v24, 2uLL);
  ++v27;
  uint64_t v6 = v26;
  if (v26 == -1)
  {
    uint64_t v29 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v31 = 136315906;
    uint64_t v32 = "copy";
    __int16 v33 = 1024;
    int v34 = 643;
    __int16 v35 = 2048;
    uint64_t v36 = 0;
    __int16 v37 = 2048;
    uint64_t v38 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v26 > 1)
  {
    uint64_t v9 = (char *)__dst;
    *(_OWORD *)long long __dst = __src;
  }
  else
  {
    if (v25 <= 1)
    {
      if (v24)
      {
        uint64_t v7 = 2 * v25;
        if (2 * v25 <= 2) {
          uint64_t v7 = 2;
        }
        if (v25) {
          unint64_t v8 = v7;
        }
        else {
          unint64_t v8 = 8;
        }
      }
      else
      {
        unint64_t v8 = 2;
      }
      re::DynamicArray<re::AssetType const*>::setCapacity(&v24, v8);
    }
    unint64_t v10 = v26;
    uint64_t v9 = (char *)__dst;
    uint64_t v11 = (char *)&__src + 8 * v26;
    if (v26)
    {
      memcpy(__dst, &__src, 8 * v26);
      size_t v12 = 16 - 8 * v10;
    }
    else
    {
      size_t v12 = 16;
    }
    memcpy(&v9[8 * v10], v11, v12);
    uint64_t v6 = 2;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v6 - 8;
  do
  {
    if (v23) {
      uint64_t v15 = *(void *)(v23 + 264);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)&v9[v13];
    BOOL v17 = v15 == v16 || v14 == v13;
    v13 += 8;
  }
  while (!v17);
  if (v24) {
    BOOL v18 = v9 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    (*(void (**)(void))(*v24 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  if (v15 != v16)
  {
    unint64_t v20 = *re::assetsLogObjects(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = **(void **)(*((void *)a1 + 1) + 264);
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = a2;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "MaterialCompiler: validateAssetType failed for asset type %s. Caller: %s", buf, 0x16u);
    }
  }
}

uint64_t re::AssetHandle::loadedAsset<re::ShaderGraphAsset>(re::ShaderGraphAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::ShaderGraphAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>(re::ShaderLibraryAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::ShaderLibraryAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

_anonymous_namespace_ *re::DynamicArray<re::LinkedFunction>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        BOOL result = (_anonymous_namespace_ *)re::DynamicArray<re::LinkedFunction>::setCapacity(result, v10);
      }
      else
      {
        BOOL result = (_anonymous_namespace_ *)re::DynamicArray<re::LinkedFunction>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  uint64_t v11 = *((void *)v3 + 4) + 144 * v5;
  *(unsigned char *)uint64_t v11 = *(unsigned char *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(v11 + 8) = *(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(void *)(v11 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = "";
  uint64_t v13 = *(void *)(a2 + 24);
  *(void *)(v11 + 24) = *(void *)(v11 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(void *)(v11 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  uint64_t v14 = *(void *)(a2 + 40);
  *(void *)(v11 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = "";
  uint64_t v15 = *(void *)(a2 + 48);
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 48) = v15;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(v11 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(v11 + 72) = 0;
  *(void *)(v11 + 80) = 0;
  *(void *)(v11 + 64) = 0;
  uint64_t v16 = *(void *)(a2 + 72);
  *(void *)(v11 + 64) = *(void *)(a2 + 64);
  *(void *)(v11 + 72) = v16;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v17 = *(void *)(v11 + 80);
  uint64_t v18 = *(void *)(a2 + 88);
  *(void *)(v11 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v17;
  *(void *)(v11 + 88) = v18;
  *(void *)(v11 + 96) = 0;
  *(void *)(v11 + 104) = 0;
  *(void *)(v11 + 112) = 0;
  uint64_t v19 = *(void *)(a2 + 104);
  *(void *)(v11 + 96) = *(void *)(a2 + 96);
  *(void *)(v11 + 104) = v19;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  uint64_t v20 = *(void *)(v11 + 112);
  *(void *)(v11 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v20;
  *(void *)(v11 + 120) = 0;
  *(void *)(v11 + 128) = 0;
  *(void *)(v11 + 136) = 0;
  uint64_t v21 = *(void *)(a2 + 128);
  *(void *)(v11 + 120) = *(void *)(a2 + 120);
  *(void *)(v11 + 128) = v21;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v22 = *(void *)(v11 + 136);
  *(void *)(v11 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = v22;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::DynamicString *re::MaterialCompiler::getCurrentCompiledAssetInfo@<X0>(re::MaterialCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = (re::MaterialAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  v5[0] = (const char *)*re::MaterialAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

char **re::MaterialCompiler::assetIntrospectionType(re::MaterialCompiler *this)
{
  v1 = &off_268773000;
  {
    v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::MaterialAsset>(void)::info = re::introspect_MaterialAsset(0);
      v1 = &off_268773000;
    }
  }
  return v1[248];
}

void *re::MaterialCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((void *)a1, re::MaterialCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::MaterialCompiler::compile@<X0>(re::MaterialCompiler *this@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  BOOL v8 = re::globalAllocators(this);
  unint64_t v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 1896, 8);
  bzero(v9, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v9);
  BOOL result = (re *)re::compileMaterialFile(v9 + 8, a2, a3, (uint64_t)v19);
  if (v19[0])
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = v9;
  }
  else
  {
    uint64_t v11 = re::globalAllocators(result)[2];
    (**(void (***)(char *))v9)(v9);
    (*(void (**)(uint64_t, char *))(*(void *)v11 + 40))(v11, v9);
    *(void *)&long long v15 = 100;
    *((void *)&v15 + 1) = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v20);
    long long v12 = v16;
    *(_OWORD *)(a4 + 8) = v15;
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v12;
    *(void *)(a4 + 40) = v13;
    *(void *)(a4 + 48) = v14;
    BOOL result = v20;
    if (v20)
    {
      if (v21) {
        return (re *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
      }
    }
  }
  return result;
}

re *re::MaterialCompiler::deleteAsset(re::MaterialCompiler *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::MaterialAsset>((re *)"deleteAsset", 2331, a2);
}

re::DynamicString *re::MaterialDefinitionCompiler::getCurrentCompiledAssetInfo@<X0>(re::MaterialDefinitionCompiler *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v3 = (re::MaterialDefinitionAsset *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(void *)a2 = 0x100000001;
  v5[0] = (const char *)*re::MaterialDefinitionAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

char **re::MaterialDefinitionCompiler::assetIntrospectionType(re::MaterialDefinitionCompiler *this)
{
  v1 = &off_268773000;
  {
    v1 = &off_268773000;
    if (v3)
    {
      re::introspect<re::MaterialDefinitionAsset>(void)::info = re::introspect_MaterialDefinitionAsset(0);
      v1 = &off_268773000;
    }
  }
  return v1[348];
}

void *re::MaterialDefinitionCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((void *)a1, &re::MaterialDefinitionCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::MaterialDefinitionCompiler::compile@<X0>(re::MaterialDefinitionCompiler *this@<X0>, re::MaterialDefinitionFile *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  BOOL v8 = re::globalAllocators(this);
  unint64_t v9 = (void (***)(void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 2488, 8);
  bzero(v9, 0x9B8uLL);
  re::MaterialDefinitionAsset::MaterialDefinitionAsset((re::MaterialDefinitionAsset *)v9);
  BOOL result = (re *)re::compileMaterialDefinitionFile((re *)(v9 + 1), a2, a3, (uint64_t)v19);
  if (v19[0])
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = v9;
  }
  else
  {
    uint64_t v11 = re::globalAllocators(result)[2];
    (**v9)(v9);
    (*(void (**)(uint64_t, void (***)(void)))(*(void *)v11 + 40))(v11, v9);
    *(void *)&long long v15 = 100;
    *((void *)&v15 + 1) = re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v20);
    long long v12 = v16;
    *(_OWORD *)(a4 + 8) = v15;
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v12;
    *(void *)(a4 + 40) = v13;
    *(void *)(a4 + 48) = v14;
    BOOL result = v20;
    if (v20)
    {
      if (v21) {
        return (re *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
      }
    }
  }
  return result;
}

re *re::MaterialDefinitionCompiler::deleteAsset(re::MaterialDefinitionCompiler *this, void (***a2)(void))
{
  return re::internal::destroyPersistent<re::MaterialDefinitionAsset>((re *)"deleteAsset", 2382, a2);
}

void re::MaterialCompiler::~MaterialCompiler(re::MaterialCompiler *this)
{
}

void re::MaterialDefinitionCompiler::~MaterialDefinitionCompiler(re::MaterialDefinitionCompiler *this)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 32);
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    BOOL result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6E12D8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6E12E8[v4])(&v5, result, a2);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(re::DynamicString **a1, re::DynamicString *a2, re::DynamicString *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString const&>(*a1, a2, a3);
}

re::AssetHandle *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(re::AssetHandle **a1, re::AssetHandle *a2, re::AssetHandle *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle const&>(*a1, a2, a3);
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString const&>(re::DynamicString *a1, re::DynamicString *this, re::DynamicString *a3)
{
  if (*((_DWORD *)a1 + 8)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString const&>(a1, a3);
  }
  else {
    return re::DynamicString::operator=(this, a3);
  }
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString const&>(re::DynamicString *this, re::DynamicString *a2)
{
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4 != -1) {
    off_26E6E12D8[v4]((int)&v6, this);
  }
  *((_DWORD *)this + 8) = -1;
  BOOL result = re::DynamicString::DynamicString(this, a2);
  *((_DWORD *)this + 8) = 0;
  return result;
}

re::AssetHandle *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle const&>(re::AssetHandle *a1, re::AssetHandle *this, re::AssetHandle *a3)
{
  if (*((_DWORD *)a1 + 8) == 1) {
    return (re::AssetHandle *)re::AssetHandle::operator=((uint64_t)this, (uint64_t *)a3);
  }
  else {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle const&>(a1, a3);
  }
}

re::AssetHandle *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle const&>(re::AssetHandle *this, re::AssetHandle *a2)
{
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4 != -1) {
    off_26E6E12D8[v4]((int)&v6, this);
  }
  *((_DWORD *)this + 8) = -1;
  BOOL result = re::AssetHandle::AssetHandle(this, a2);
  *((_DWORD *)this + 8) = 1;
  return result;
}

re::MaterialTechniqueData *re::MaterialTechniqueData::MaterialTechniqueData(re::MaterialTechniqueData *this, const re::MaterialTechniqueData *a2)
{
  uint64_t v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialTechniqueData *)((char *)a2 + 32));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 64), (const re::MaterialTechniqueData *)((char *)a2 + 64));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 88), (const re::MaterialTechniqueData *)((char *)a2 + 88));
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 112), (const re::MaterialTechniqueData *)((char *)a2 + 112));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 144), (const re::MaterialTechniqueData *)((char *)a2 + 144));
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 168), (const re::MaterialTechniqueData *)((char *)a2 + 168));
  long long v5 = *(_OWORD *)((char *)a2 + 200);
  long long v6 = *(_OWORD *)((char *)a2 + 216);
  long long v7 = *(_OWORD *)((char *)a2 + 232);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *(_OWORD *)((char *)this + 232) = v7;
  *(_OWORD *)((char *)this + 216) = v6;
  *(_OWORD *)((char *)this + 200) = v5;
  int v8 = *((unsigned __int8 *)a2 + 252);
  *((unsigned char *)this + 252) = v8;
  if (v8) {
    *((unsigned char *)this + 253) = *((unsigned char *)a2 + 253);
  }
  re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)this + 256, (uint64_t *)a2 + 32);
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 296), (const re::MaterialTechniqueData *)((char *)a2 + 296));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 328, (uint64_t)a2 + 328);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 376, (uint64_t)a2 + 376);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 424, (uint64_t *)a2 + 53);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 464, (uint64_t)a2 + 464);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 512, (uint64_t *)a2 + 64);
  *((_WORD *)this + 276) = *((_WORD *)a2 + 276);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 560, (uint64_t)a2 + 560);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 608, (uint64_t)a2 + 608);
  *((unsigned char *)this + 656) = *((unsigned char *)a2 + 656);
  int v9 = *((unsigned __int8 *)a2 + 657);
  *((unsigned char *)this + 657) = v9;
  if (v9) {
    *((unsigned char *)this + 658) = *((unsigned char *)a2 + 658);
  }
  return this;
}

uint64_t re::DynamicArray<re::RenderAttachmentState>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::RenderAttachmentState>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RenderAttachmentState>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 32 * (void)v5);
      unint64_t v5 = v3[2];
    }
    BOOL result = (void **)memcpy((char *)v3[4] + 32 * (void)v5, (const void *)(*(void *)(a2 + 32) + 32 * (void)v5), 32 * v4 - 32 * (void)v5);
  }
  else if (v4)
  {
    BOOL result = (void **)memmove(result[4], *(const void **)(a2 + 32), 32 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

void *re::DynamicArray<re::RenderAttachmentState>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          long long v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 4);
          if (result)
          {
            long long v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        BOOL result = (void *)re::DynamicArray<re::RenderAttachmentState>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), (uint64_t *)(v8 + 48));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  re::DynamicArray<re::DynamicString>::DynamicArray(*(void *)(a1 + 16) + 88 * v10 + 48, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 22;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a2 + 16);
    int v20 = *(_DWORD *)(a2 + 32);
    do
    {
      uint64_t v10 = v9 + 88 * v8;
      int v11 = (re::DynamicString *)(v10 + 16);
      uint64_t v12 = (uint64_t *)(v10 + 48);
      unint64_t v13 = re::Hash<re::DynamicString>::operator()((uint64_t)&v21, v10 + 16);
      unint64_t v14 = v13;
      if (*(void *)v3)
      {
        unint64_t v15 = v13 % *(unsigned int *)(v3 + 24);
        uint64_t v4 = *(unsigned int *)(*(void *)(v3 + 8) + 4 * v15);
        if (v4 != 0x7FFFFFFF)
        {
          uint64_t v16 = *(void *)(v3 + 16);
          while (!re::DynamicString::operator==(v16 + 88 * v4 + 16, (uint64_t)v11))
          {
            uint64_t v4 = *(_DWORD *)(v16 + 88 * v4 + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF)
            {
              uint64_t v2 = a2;
              goto LABEL_15;
            }
          }
          re::DynamicArray<re::DynamicString>::deinit(v16 + 88 * v4 + 48);
          BOOL result = re::DynamicArray<re::DynamicString>::DynamicArray(*(void *)(v3 + 16) + 88 * v4 + 48, v12);
          uint64_t v2 = a2;
          LODWORD(v4) = v20;
          goto LABEL_18;
        }
LABEL_15:
        LODWORD(v4) = v20;
      }
      else
      {
        LODWORD(v15) = 0;
      }
      BOOL result = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(v3, v15, v14, v11, v12);
LABEL_18:
      ++*(_DWORD *)(v3 + 40);
      uint64_t v9 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1)) {
        int v17 = v5 + 1;
      }
      else {
        int v17 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v17 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v18 = v8;
        if ((*(_DWORD *)(v9 + 88 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }
      int v18 = v17;
LABEL_25:
      LODWORD(v5) = v18;
    }
    while (v4 != v18);
  }
  return result;
}

uint64_t re::DynamicArray<re::DynamicString>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DynamicString>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DynamicString>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::DynamicString>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DynamicString>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    unsigned int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          long long v16 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v28[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 48), v22 - 32, v22);
              }
              v22 += 712;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 712 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 712 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 712 * v10 + 8) = v24 | 0x80000000;
  uint64_t v26 = 712 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v26 + 16), a4);
  uint64_t result = re::MaterialTechniqueData::MaterialTechniqueData(*(void *)(a1 + 16) + 712 * v10 + 48, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 712 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::MaterialTechniqueData::MaterialTechniqueData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a2 + 56) = 0;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v13;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v14;
  uint64_t v15 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v15;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a2 + 136) = 0;
  uint64_t v19 = *(void *)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = v17;
  *(void *)(a2 + 120) = v19;
  *(void *)(a2 + 128) = v18;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v20 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v20;
  uint64_t v21 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = v21;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v22 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v23 = *(void *)(a2 + 184);
  *(void *)(a2 + 192) = 0;
  uint64_t v25 = *(void *)(a1 + 176);
  uint64_t v24 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v22;
  *(void *)(a1 + 184) = v23;
  *(void *)(a2 + 176) = v25;
  *(void *)(a2 + 184) = v24;
  long long v26 = *(_OWORD *)(a2 + 200);
  long long v27 = *(_OWORD *)(a2 + 216);
  long long v28 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v28;
  *(_OWORD *)(a1 + 216) = v27;
  *(_OWORD *)(a1 + 200) = v26;
  LODWORD(v23) = *(unsigned __int8 *)(a2 + 252);
  *(unsigned char *)(a1 + 252) = v23;
  if (v23) {
    *(unsigned char *)(a1 + 253) = *(unsigned char *)(a2 + 253);
  }
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  uint64_t v29 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v29;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  uint64_t v30 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = v30;
  uint64_t v31 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = v31;
  ++*(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = 0uLL;
  *(_OWORD *)(a1 + 312) = 0uLL;
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  uint64_t v32 = *(void *)(a1 + 304);
  uint64_t v33 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v33;
  *(void *)(a2 + 296) = 0;
  uint64_t v34 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  ++*(_DWORD *)(a1 + 280);
  *(void *)(a2 + 304) = v32;
  *(void *)(a2 + 312) = v34;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0uLL;
  *(_OWORD *)(a1 + 344) = 0uLL;
  *(void *)(a1 + 364) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 416) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 424) = 0;
  uint64_t v35 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v35;
  *(void *)(a2 + 424) = 0;
  *(void *)(a2 + 432) = 0;
  uint64_t v36 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = v36;
  uint64_t v37 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = v37;
  ++*(_DWORD *)(a2 + 448);
  ++*(_DWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 500) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 464), (uint64_t *)(a2 + 464));
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a2 + 512) = 0;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  uint64_t v38 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = v38;
  uint64_t v39 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = v39;
  ++*(_DWORD *)(a2 + 536);
  ++*(_DWORD *)(a1 + 536);
  *(_WORD *)(a1 + 552) = *(_WORD *)(a2 + 552);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 596) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 560), (uint64_t *)(a2 + 560));
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 648) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 608), (uint64_t *)(a2 + 608));
  *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
  int v40 = *(unsigned __int8 *)(a2 + 657);
  *(unsigned char *)(a1 + 657) = v40;
  if (v40) {
    *(unsigned char *)(a1 + 658) = *(unsigned char *)(a2 + 658);
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), (_DWORD *)(v8 + 48));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_169, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

re::MaterialTechniqueQualityLevelSetData *re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(re::MaterialTechniqueQualityLevelSetData *this, const re::MaterialTechniqueQualityLevelSetData *a2)
{
  unint64_t v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialTechniqueQualityLevelSetData *)((char *)a2 + 32));
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 64, (uint64_t *)a2 + 8);
  return this;
}

uint64_t re::TokenizedMember::deinit(uint64_t **this)
{
  v1 = (re::TokenizedMember *)this;
  uint64_t v2 = this[3];
  if (v2)
  {
    unint64_t v3 = this[5];
    uint64_t v4 = 8 * (void)v2;
    do
    {
      uint64_t v5 = *v3;
      if (*v3)
      {
        uint64_t v6 = re::globalAllocators((re *)this);
        this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6[2] + 40))(v6[2], v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)v1 + 3) = 0;
  ++*((_DWORD *)v1 + 8);
  return re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 8);
}

void re::validateParsedType(re *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a1)
  {
    if (*(unsigned __int8 *)a1 != a4)
    {
      int v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315650;
        uint64_t v10 = a2;
        __int16 v11 = 2080;
        uint64_t v12 = a3;
        __int16 v13 = 2080;
        uint64_t v14 = a5;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "parameter %s, token %s is being parsed as %s, but previous tokens were parsed differently.", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = a4;
  }
}

double re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 16 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
        }
        v4 += 16;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::BufferSlice>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(id **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        do
        {
          if (*v3)
          {

            *uint64_t v3 = 0;
          }
          v3 += 2;
          v5 -= 16;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(id **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, id *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
          *(void *)(v6 + 48) = 0;
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 56;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Bitset<128>::toWordIndex(uint64_t a1, unint64_t a2)
{
  if (a2 < 0x80) {
    return a2 >> 6;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a2, 128, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_169, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 16 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 16;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, v8 + 12, (_WORD *)(v8 + 12));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 16;
    }
  }
}

uint64_t re::DynamicArray<re::RenderAttachmentState>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + 16) = 0;
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RenderAttachmentState>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void *re::DynamicArray<re::AssetType const*>::setCapacity(void *result, unint64_t a2)
{
  if (result[1] == a2) {
    return result;
  }
  uint64_t v4 = result;
  if (result[2] > a2) {
    return result;
  }
  uint64_t v5 = *result;
  if (!*v4)
  {
    uint64_t result = (void *)re::DynamicArray<re::AssetType const*>::setCapacity(v4, a2);
    ++*((_DWORD *)v4 + 6);
    return result;
  }
  if (a2 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v2 = 8 * a2;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5 + 32))(v5, 8 * a2, 8);
  if (!result)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v4 + 8));
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  int v7 = result;
  if (v4[1])
  {
    memcpy(result, (const void *)v4[4], 8 * v4[2]);
    uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
  }
  v4[4] = v7;
  v4[1] = a2;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 72 * v3;
        uint64_t v5 = v2 + 8;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v5);
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
          re::DynamicString::deinit((re::DynamicString *)(v8 + 16));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(result + 16));
    return re::DynamicArray<unsigned long>::deinit(v2 + 48);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 48), v22 - 32, v22);
              }
              v22 += 88;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 88 * v10 + 8) = v24 | 0x80000000;
  uint64_t v26 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v26 + 16), a4);
  uint64_t v27 = *(void *)(a1 + 16) + 88 * v10;
  *(void *)(v27 + 80) = 0;
  *(_DWORD *)(v27 + 72) = 0;
  *(void *)(v27 + 56) = 0;
  *(void *)(v27 + 64) = 0;
  *(void *)(v27 + 48) = 0;
  *(void *)(v27 + 48) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v27 + 56) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v28 = *(void *)(v27 + 64);
  *(void *)(v27 + 64) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v28;
  uint64_t v29 = *(void *)(v27 + 80);
  *(void *)(v27 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v29;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v27 + 72);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 48;
        do
        {
          if ((*(_DWORD *)(v13 - 40) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 48);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 120 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 120 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 120 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 120 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 120 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 120 * v17 + 16), (const re::DynamicString *)(v13 - 32));
            re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(*(void *)(a1 + 16) + 120 * v17 + 48, v13);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 120;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 120 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v9;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 56);
  return result;
}

void re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)signed int v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (uint64_t *)(v6 + 80);
        do
        {
          if ((*(_DWORD *)(v13 - 9) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 10);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 7) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 7) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 7) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + (v17 << 7)) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + (v17 << 7) + 16), (const re::DynamicString *)(v13 - 8));
            uint64_t v21 = *(void *)(a1 + 16) + (v17 << 7);
            *(_OWORD *)(v21 + 48) = 0u;
            *(_OWORD *)(v21 + 64) = 0u;
            *(void *)(v21 + 48) = *(v13 - 4);
            *(v13 - 4) = 0;
            uint64_t v22 = *(void *)(v21 + 64);
            *(void *)(v21 + 64) = *(v13 - 2);
            *(v13 - 2) = v22;
            *(void *)(v21 + 72) = *(v13 - 1);
            *(v13 - 1) = 0;
            uint64_t v23 = *(void *)(v21 + 56);
            *(void *)(v21 + 56) = *(v13 - 3);
            *(v13 - 3) = v23;
            *(_OWORD *)(v21 + 80) = 0u;
            v21 += 80;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(void *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 16;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 48;
        do
        {
          if ((*(_DWORD *)(v13 - 40) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 48);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            unsigned int v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              unsigned int v17 = *(_DWORD *)(a1 + 32);
              unsigned int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                unsigned int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 152 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 152 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 152 * v17 + 8) = v20 | 0x80000000;
            uint64_t v21 = *(void *)(a1 + 16) + 152 * v17;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 152 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 152 * v17 + 16), (const re::DynamicString *)(v13 - 32));
            re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(*(void *)(a1 + 16) + 152 * v17 + 48, v13);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 152;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 152 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v9;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v12;
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v13;
  ++*(_DWORD *)(a2 + 88);
  ++*(_DWORD *)(a1 + 88);
  return result;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 96 * v9 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = v14 + 96 * v9;
  int v16 = *a5;
  *(unsigned char *)(v15 + 48) = v16;
  uint64_t v17 = v15 + 48;
  if (v16)
  {
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 8) = 0u;
    *(void *)(v17 + 32) = *((void *)a5 + 4);
    uint64_t v18 = *((void *)a5 + 2);
    *(void *)(v17 + 8) = *((void *)a5 + 1);
    *((void *)a5 + 1) = 0;
    uint64_t v19 = *((void *)a5 + 3);
    *((void *)a5 + 4) = 0;
    uint64_t v21 = *(void *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    *(void *)(v17 + 16) = v18;
    *(void *)(v17 + 24) = v19;
    *((void *)a5 + 2) = v21;
    *((void *)a5 + 3) = v20;
  }
  int v22 = a5[40];
  *(unsigned char *)(v14 + 96 * v9 + 88) = v22;
  if (v22) {
    *(unsigned char *)(v14 + 96 * v9 + 89) = a5[41];
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 96 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 96 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 96 * v10;
  *(_OWORD *)(v14 + 48) = 0u;
  v14 += 48;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void *re::DynamicArray<re::MaterialTechniqueData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MaterialTechniqueData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::MaterialTechniqueData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MaterialTechniqueData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x298uLL))
        {
          uint64_t v2 = 664 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 664 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 664, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (re::MaterialTechniqueData *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 664 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueData::MaterialTechniqueData(v11, (uint64_t)v8);
          re::MaterialTechniqueData::~MaterialTechniqueData(v8);
          long long v8 = (re::MaterialTechniqueData *)((char *)v8 + 664);
          v11 += 664;
          v10 -= 664;
        }
        while (v10);
        long long v8 = (re::MaterialTechniqueData *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::MaterialTechniqueData *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (const re::DynamicString **)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[9 * v9];
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(v11, (uint64_t)v8);
          re::MaterialTechniqueGroupData::deinit(v8);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v8 + 4));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v11 += 72;
          v8 += 9;
        }
        while (v8 != v10);
        long long v8 = (const re::DynamicString **)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, const re::DynamicString **))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MaterialTechniqueGroupData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DebugMapping>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DebugMapping>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DebugMapping>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DebugMapping>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::DebugMapping>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[10 * v9];
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = v8[3];
          uint64_t v12 = v8[1];
          uint64_t *v11 = *v8;
          *long long v8 = 0;
          uint64_t v13 = v8[2];
          v8[3] = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          v8[1] = v15;
          v8[2] = v14;
          *((_OWORD *)v11 + 2) = 0u;
          int v16 = v11 + 4;
          *((_DWORD *)v16 + 8) = 0;
          *((_OWORD *)v16 + 1) = 0u;
          *(void *)((char *)v16 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v16, v8 + 4);
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v8 + 4);
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 10;
          uint64_t v11 = v16 + 6;
        }
        while (v8 != v10);
        long long v8 = (uint64_t *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x68uLL))
        {
          uint64_t v2 = 104 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (const re::DynamicString **)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 104 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(v11, (uint64_t)v8);
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(v8);
          v8 += 13;
          v11 += 104;
          v10 -= 104;
        }
        while (v10);
        long long v8 = (const re::DynamicString **)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, const re::DynamicString **))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 104;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          long long v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(uint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)uint64_t v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v13 = *v6;
            unint64_t v14 = *(unsigned int *)(a1 + 24);
            unint64_t v15 = *v6 % v14;
            unsigned int v16 = *(_DWORD *)(a1 + 36);
            if (v16 == 0x7FFFFFFF)
            {
              unsigned int v16 = *(_DWORD *)(a1 + 32);
              unsigned int v17 = v16;
              if (v16 == v14)
              {
                re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v15 = v13 % *(unsigned int *)(a1 + 24);
                unsigned int v17 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 104 * v16 + 8);
            }
            else
            {
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 104 * v16 + 8);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v18 + 104 * v16 + 8) = v19 | 0x80000000;
            uint64_t v20 = *(void *)(a1 + 16) + 104 * v16;
            *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(void *)(*(void *)(a1 + 16) + 104 * v16) = v13;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 104 * v16 + 16), (const re::DynamicString *)(v6 + 2));
            uint64_t v21 = *(void *)(a1 + 16) + 104 * v16;
            long long v22 = *((_OWORD *)v6 + 3);
            long long v23 = *((_OWORD *)v6 + 4);
            long long v24 = *((_OWORD *)v6 + 5);
            *(void *)(v21 + 96) = v6[12];
            *(_OWORD *)(v21 + 64) = v23;
            *(_OWORD *)(v21 + 80) = v24;
            *(_OWORD *)(v21 + 48) = v22;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 13;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 104 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)long long v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (void *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 3);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(v13 - 1);
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *v13;
            *uint64_t v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  uint64_t v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v12) = *(_DWORD *)(*(void *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 16 * v7 + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)unint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(void *)&v15[16] + v10 + 8, *(void *)&v15[16] + v10 + 8);
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

void re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    signed int v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a1 + 48));
  }
  re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(uint64_t a1, re::DynamicString *a2, int a3, uint64_t a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 112 * v13;
    return v14 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 112 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 112 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 112 * v11;
      break;
    case 2:
    case 3:
      uint64_t v16 = v12 + 112 * v11;
      uint64_t v17 = (re::DynamicString *)(v16 + 48);
      re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v16 + 88));
      re::DynamicString::deinit(v17);
      uint64_t v18 = *(void *)(a1 + 16) + 112 * v11;
      re::DynamicString::DynamicString((re::DynamicString *)(v18 + 48), (const re::DynamicString *)a4);
      *(_DWORD *)(v18 + 80) = *(_DWORD *)(a4 + 32);
      re::FixedArray<unsigned char>::FixedArray((void *)(v18 + 88), (uint64_t *)(a4 + 40));
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 112 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 112 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 112 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 112 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 112 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 112 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 112 * v10;
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 48), (const re::DynamicString *)a5);
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(a5 + 32);
  re::FixedArray<unsigned char>::FixedArray((void *)(v14 + 88), (uint64_t *)(a5 + 40));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), *(void *)&v13[16] + v10 + 48);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 112;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 112 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 112 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 112 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 112 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 112 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 112 * v10;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(void *)(v14 + 72) = *(void *)(a5 + 24);
  uint64_t v15 = *(void *)(a5 + 8);
  *(void *)(v14 + 48) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v16 = *(void *)(a5 + 16);
  *(void *)(a5 + 24) = 0;
  uint64_t v18 = *(void *)(v14 + 56);
  uint64_t v17 = *(void *)(v14 + 64);
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  *(void *)(a5 + 8) = v18;
  *(void *)(a5 + 16) = v17;
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(a5 + 32);
  *(void *)(v14 + 96) = 0;
  *(void *)(v14 + 104) = 0;
  *(void *)(v14 + 88) = 0;
  uint64_t v19 = *(void *)(a5 + 48);
  *(void *)(v14 + 88) = *(void *)(a5 + 40);
  *(void *)(v14 + 96) = v19;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  uint64_t v20 = *(void *)(v14 + 104);
  *(void *)(v14 + 104) = *(void *)(a5 + 56);
  *(void *)(a5 + 56) = v20;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 112;
    }
  }
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_162, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 112;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

unsigned __int8 *re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (v3) {
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v2);
  }
  else {
    re::DynamicString::deinit((re::DynamicString *)v2);
  }
  return a1;
}

uint64_t re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add(uint64_t a1, char **a2, void *a3)
{
  size_t v6 = re::RigEvaluation::HashString::operator()((int)&v15, *a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = v10 + 32 * v9;
    if (!strcmp(*(const char **)(v12 + 16), v11)) {
      return v12 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *a5 = 0;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(re::DynamicString **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 96 * v3;
        do
        {
          re::DynamicArray<unsigned long>::deinit((uint64_t)v2 + 40);
          re::DynamicString::deinit(v2);
          uint64_t v2 = (re::DynamicString *)((char *)v2 + 96);
          v4 -= 96;
        }
        while (v4);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(uint64_t *a1, uint64_t a2)
{
  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    uint64_t v5 = *a1;
    char v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v16, a2);
    int8x16_t v14 = *(int8x16_t *)(v5 + 16 * v4);
    unint64_t v7 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v14), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v8 = __clz(__rbit64(v7));
    if (v8 <= 0x3F) {
      break;
    }
LABEL_10:
    v12.i64[0] = -1;
    v12.i64[1] = -1;
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v14, v12), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4) {
      unint64_t v4 = 0;
    }
    uint64_t v11 = -1;
    if (v4 == re::Hash<re::DynamicString>::operator()((uint64_t)&v17, a2) % ((unint64_t)a1[2] >> 4)) {
      return v11;
    }
  }
  uint64_t v9 = 16 * v4;
  uint64_t v10 = a1[1];
  while (1)
  {
    uint64_t v11 = v8 + v9;
    if (re::DynamicString::operator==(a2, v10 + 96 * (v8 + v9))) {
      return v11;
    }
    if (v8 <= 0x3E)
    {
      unint64_t v8 = __clz(__rbit64((-2 << v8) & v7));
      if (v8 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(_anonymous_namespace_ *a1, const re::DynamicString *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || *((void *)a1 + 2) > (unint64_t)(8 * v6)) {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize(a1, 1);
  }
  unint64_t v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2) % (*((void *)a1 + 2) >> 4);
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    char v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2);
    unint64_t v10 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F) {
      break;
    }
    if (v7 + 1 == *((void *)a1 + 2) >> 4) {
      unint64_t v7 = 0;
    }
    else {
      ++v7;
    }
  }
  uint64_t v11 = v8 + 16 * v7;
  int v12 = *(unsigned __int8 *)(v11 + v10);
  *(unsigned char *)(v11 + v10) = v9 & 0x7F;
  unint64_t v13 = v10 + 16 * v7;
  re::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>((re::DynamicString *)&v18, a2, a3);
  uint64_t v14 = *((void *)a1 + 1) + 96 * v13;
  re::DynamicString::operator=((re::DynamicString *)v14, (re::DynamicString *)&v18);
  *(_DWORD *)(v14 + 32) = v20;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v14 + 40, (uint64_t)v21);
  uint64_t v15 = v24;
  *(_WORD *)(v14 + 88) = v25;
  *(void *)(v14 + 80) = v15;
  if (v21[0])
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v21[0] + 40))();
    }
    uint64_t v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  uint64_t v16 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v16 - (v12 == 255);
  *((void *)a1 + 5) ^= re::Hash<re::DynamicString>::operator()((uint64_t)&v18, *((void *)a1 + 1) + 96 * v13);
  return *((void *)a1 + 1) + 96 * v13 + 32;
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::doResize(a1, v3);
}

void *re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  unint64_t v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = v5 >> 4;
    double result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 97 * v6, 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v8 = 0;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      double result = (void *)*v3;
    }
    v3[1] = &result[2 * v7];
    unint64_t v6 = v3[2];
    if (v6)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(_OWORD *)uint64_t v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        double result = re::DynamicString::setCapacity((void *)v12, 0);
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        unint64_t v6 = v3[2];
        v10 += 96;
      }
    }
  }
  else
  {
    *double result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(v20, v4, a2);
  v18[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)v20, (const re::DynamicString *)(*(void *)(v18[0] + 8) + 96 * v10), *(void *)(v18[0] + 8) + 96 * v10 + 32);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        uint64_t v10 = v19;
      }
      while (v19 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v11 = *((void *)&v20[3] + 1);
  *((void *)&v20[3] + 1) = a1[7];
  long long v12 = v20[0];
  long long v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(void *)&v20[1] = v5;
  long long v14 = v20[2];
  long long v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  long long v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v20);
}

re::DynamicString *re::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>(re::DynamicString *a1, const re::DynamicString *a2, uint64_t a3)
{
  double result = re::DynamicString::DynamicString(a1, a2);
  *((_DWORD *)result + 8) = *(_DWORD *)a3;
  *((void *)result + 9) = 0;
  *((_DWORD *)result + 16) = 0;
  *((void *)result + 6) = 0;
  *((void *)result + 7) = 0;
  *((void *)result + 5) = 0;
  uint64_t v5 = *(void *)(a3 + 16);
  *((void *)result + 5) = *(void *)(a3 + 8);
  *((void *)result + 6) = v5;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = *((void *)result + 7);
  *((void *)result + 7) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v6;
  uint64_t v7 = *((void *)result + 9);
  *((void *)result + 9) = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = v7;
  ++*(_DWORD *)(a3 + 32);
  ++*((_DWORD *)result + 16);
  uint64_t v8 = *(void *)(a3 + 48);
  *((_WORD *)result + 44) = *(_WORD *)(a3 + 56);
  *((void *)result + 10) = v8;
  return result;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[7];
  if (v4)
  {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init((void *)a1, v4, a2[3]);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

void re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::clear(a1);
  v20[0] = a2;
  unint64_t v4 = a2[2];
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a2;
    unint64_t v7 = v4 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v20[0] + 8) + 96 * v9;
      re::DynamicString::DynamicString((re::DynamicString *)&v12, (const re::DynamicString *)v10);
      LODWORD(v14) = *(_DWORD *)(v10 + 32);
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v15, (uint64_t *)(v10 + 40));
      uint64_t v11 = *(void *)(v10 + 80);
      __int16 v19 = *(_WORD *)(v10 + 88);
      uint64_t v18 = v11;
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(a1, (const re::DynamicString *)&v12, &v14);
      if (v15[0])
      {
        if (v17) {
          (*(void (**)(void))(*(void *)v15[0] + 40))();
        }
        uint64_t v17 = 0;
        memset(v15, 0, sizeof(v15));
        ++v16;
      }
      if (v12)
      {
        if (v13) {
          (*(void (**)(void))(*(void *)v12 + 40))();
        }
      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
    }
  }
}

void re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::clear(void *a1)
{
  a1[5] = 0;
  a1[6] = 0;
  unint64_t v1 = a1[2];
  a1[3] = 0;
  a1[4] = v1;
  if (v1 >= 0x10)
  {
    unint64_t v2 = 0;
    *(void *)&long long v3 = -1;
    *((void *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*a1 + 16 * v2++) = v3;
      unint64_t v1 = a1[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    unint64_t v4 = (re::DynamicString *)a1[1];
    uint64_t v5 = 96 * v1;
    do
    {
      re::DynamicArray<unsigned long>::deinit((uint64_t)v4 + 40);
      re::DynamicString::deinit(v4);
      unint64_t v4 = (re::DynamicString *)((char *)v4 + 96);
      v5 -= 96;
    }
    while (v5);
  }
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(_anonymous_namespace_ *a1, const re::DynamicString *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || *((void *)a1 + 2) > (unint64_t)(8 * v6)) {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize((uint64_t *)a1, 1);
  }
  unint64_t v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2) % (*((void *)a1 + 2) >> 4);
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    char v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
    unint64_t v10 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F) {
      break;
    }
    if (++v7 == *((void *)a1 + 2) >> 4) {
      unint64_t v7 = 0;
    }
    if (v7 == re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2) % (*((void *)a1 + 2) >> 4))
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
  }
  uint64_t v12 = v8 + 16 * v7;
  int v13 = *(unsigned __int8 *)(v12 + v10);
  *(unsigned char *)(v12 + v10) = v9 & 0x7F;
  unint64_t v14 = v10 + 16 * v7;
  re::DynamicString::DynamicString((re::DynamicString *)&v19, a2);
  int v21 = *(_DWORD *)a3;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v22, a3 + 1);
  uint64_t v25 = a3[6];
  __int16 v26 = *((_WORD *)a3 + 28);
  uint64_t v15 = *((void *)a1 + 1) + 96 * v14;
  re::DynamicString::operator=((re::DynamicString *)v15, (re::DynamicString *)&v19);
  *(_DWORD *)(v15 + 32) = v21;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v15 + 40, (uint64_t)v22);
  uint64_t v16 = v25;
  *(_WORD *)(v15 + 88) = v26;
  *(void *)(v15 + 80) = v16;
  if (v22[0])
  {
    if (v24) {
      (*(void (**)(void))(*(void *)v22[0] + 40))();
    }
    uint64_t v24 = 0;
    memset(v22, 0, sizeof(v22));
    ++v23;
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  uint64_t v17 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v17 - (v13 == 255);
  *((void *)a1 + 5) ^= re::Hash<re::DynamicString>::operator()((uint64_t)&v19, *((void *)a1 + 1) + 96 * v14);
  return *((void *)a1 + 1) + 96 * v14 + 32;
}

unsigned __int8 *re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  unint64_t v2 = (re::DynamicString *)(a1 + 8);
  if (v3) {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v2);
  }
  else {
    re::DynamicString::deinit(v2);
  }
  return a1;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _WORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  LOWORD(v14) = *a3;
  uint64_t v17 = *((void *)a1 + 1);
  uint64_t v18 = v17 + 16 * v16;
  uint64_t v19 = 16 * v16;
  *(void *)(v17 + v19) = *a2;
  *(_WORD *)(v18 + 8) = v14;
  uint64_t result = v18 + 8;
  uint64_t v21 = v15;
  uint64_t v22 = *((void *)a1 + 4) - v21;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v22;
  uint64_t v23 = *(void *)(v17 + v19) ^ (*(void *)(v17 + v19) >> 30);
  unint64_t v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v23) ^ ((0xBF58476D1CE4E5B9 * v23) >> 27));
  *((void *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

void *re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    unint64_t v9 = &result[2 * v6];
    v3[1] = v9;
    uint64_t v10 = v3[2];
    if (v10)
    {
      unint64_t v11 = v9 + 1;
      uint64_t v12 = v3[2];
      do
      {
        *((void *)v11 - 1) = 0;
        _WORD *v11 = 0;
        v11 += 8;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(v24, *(void *)(v22[0] + 8) + 16 * v12, *(void *)(v22[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        uint64_t v12 = v23;
      }
      while (v23 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v14 = *((void *)&v24[3] + 1);
  *((void *)&v24[3] + 1) = a1[7];
  uint64_t result = *((void *)&v24[3] + 1);
  long long v15 = v24[0];
  long long v16 = v24[1];
  *(void *)&v24[1] = v6;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *(void *)&v24[0] = *a1;
  *((void *)&v24[0] + 1) = v18;
  long long v19 = v24[2];
  long long v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  long long v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18) {
      *((void *)&v24[0] + 1) = 0;
    }
    if (v17) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(void *a1, uint64_t *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = v6 % v3;
  int8x16_t v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  unint64_t v10 = v6 % v3;
  while (1)
  {
    int8x16_t v11 = *(int8x16_t *)(*a1 + 16 * v10);
    unint64_t v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3) {
      unint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    uint64_t v15 = -1;
    if (v10 == v7) {
      return v15;
    }
  }
  uint64_t v14 = 16 * v10;
  while (1)
  {
    uint64_t v15 = v13 + v14;
    if (v4 == *(void *)(a1[1] + 72 * (v13 + v14))) {
      return v15;
    }
    if (v13 <= 0x3E)
    {
      unint64_t v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

void *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 <= 0x3F) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  uint64_t v33 = *a2;
  re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown((uint64_t)&v34, a3);
  uint64_t v17 = *((void *)a1 + 1);
  uint64_t v18 = (uint64_t *)(v17 + 72 * v16);
  uint64_t *v18 = v33;
  if (v18 != &v33)
  {
    long long v19 = (void *)(v17 + 72 * v16);
    uint64_t v20 = v19[8];
    unsigned char v19[8] = v41;
    uint64_t v41 = v20;
    uint64_t v21 = v19[1];
    v19[1] = v34;
    uint64_t v34 = v21;
    uint64_t v22 = v19[2];
    v19[2] = v35;
    uint64_t v35 = v22;
    uint64_t v23 = v19[3];
    v19[3] = v36;
    uint64_t v36 = v23;
    uint64_t v24 = v19[6];
    v19[6] = v39;
    uint64_t v39 = v24;
    uint64_t v25 = v19[7];
    v19[7] = v40;
    uint64_t v40 = v25;
    uint64_t v26 = v19[4];
    v19[4] = v37;
    uint64_t v37 = v26;
    uint64_t v27 = v19[5];
    v19[5] = v38;
    uint64_t v38 = v27;
  }
  if (v41)
  {
    if (v35) {
      uint64_t v35 = 0;
    }
    if (v34) {
      (*(void (**)(void))(*(void *)v41 + 40))();
    }
  }
  uint64_t v28 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v28 - (v15 == 255);
  uint64_t v29 = (unint64_t *)(*((void *)a1 + 1) + 72 * v16);
  unint64_t v31 = *v29;
  uint64_t result = v29 + 1;
  unint64_t v32 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v32 >> 31) ^ v32;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

void *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 73 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = v3[1] + v9;
        *(void *)(v11 + 64) = 0;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_OWORD *)(v11 + 48) = 0uLL;
        *(_OWORD *)uint64_t v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 72;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(v20, v4, a2);
  v18[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v20, (uint64_t *)(*(void *)(v18[0] + 8) + 72 * v10), (long long *)(*(void *)(v18[0] + 8) + 72 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        uint64_t v10 = v19;
      }
      while (v19 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v11 = *((void *)&v20[3] + 1);
  *((void *)&v20[3] + 1) = a1[7];
  long long v12 = v20[0];
  long long v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(void *)&v20[1] = v5;
  long long v14 = v20[2];
  long long v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  long long v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)v20);
}

void *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, long long *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  uint64_t v16 = *a2;
  long long v17 = *a3;
  long long v18 = a3[1];
  *a3 = 0u;
  a3[1] = 0u;
  long long v19 = a3[2];
  a3[2] = 0u;
  unint64_t v20 = v13 + 16 * v11;
  uint64_t v22 = *((void *)a3 + 6);
  uint64_t v21 = *((void *)a3 + 7);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  uint64_t v23 = *((void *)a1 + 1) + 72 * v20;
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = *(void *)(v23 + 8);
  *(_OWORD *)(v23 + 8) = v17;
  *(void *)uint64_t v23 = v16;
  *(void *)(v23 + 56) = v22;
  *(void *)(v23 + 64) = v21;
  *(_OWORD *)(v23 + 24) = v18;
  *(_OWORD *)(v23 + 40) = v19;
  if (v24) {
    BOOL v26 = v25 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (!v26) {
    (*(void (**)(uint64_t))(*(void *)v24 + 40))(v24);
  }
  uint64_t v27 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v27 - (v15 == 255);
  uint64_t v28 = (unint64_t *)(*((void *)a1 + 1) + 72 * v20);
  unint64_t v30 = *v28;
  uint64_t result = v28 + 1;
  unint64_t v31 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v31 >> 31) ^ v31;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[7];
  if (v4)
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init((void *)a1, v4, a2[3]);
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  unint64_t v2 = result;
  *((void *)result + 5) = 0;
  *((void *)result + 6) = 0;
  unint64_t v3 = *((void *)result + 2);
  *((void *)result + 3) = 0;
  *((void *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    unint64_t v4 = 0;
    *(void *)&long long v5 = -1;
    *((void *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(void *)result + 16 * v4++) = v5;
    while (v4 < *((void *)result + 2) >> 4);
  }
  v13[0] = a2;
  unint64_t v6 = a2[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    unint64_t v9 = v6 >> 4;
    while (1)
    {
      unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        return result;
      }
    }
    uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; uint64_t v11 = i)
    {
      long long v12 = *(_OWORD *)(*(void *)(v13[0] + 8) + 16 * v11);
      re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(v2, &v12, (__int16 *)&v12 + 4);
      uint64_t result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, __int16 *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9;
  unint64_t v9 = 0x94D049BB133111EBLL;
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  unint64_t v12 = v7 >> 4;
  uint64_t v13 = *(void *)a1;
  unint64_t v14 = v11 % v12;
  while (1)
  {
    unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40) {
      break;
    }
    if (v14 + 1 == v12) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v16 = v13 + 16 * v14;
  BOOL v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(unsigned char *)(v16 + v15) = v11 & 0x7F;
  unint64_t v18 = v15 + 16 * v14;
  __int16 v19 = *a3;
  uint64_t v20 = *((void *)a1 + 1);
  uint64_t v21 = v20 + 16 * v18;
  uint64_t v22 = 16 * v18;
  *(void *)(v20 + v22) = *a2;
  *(_WORD *)(v21 + 8) = v19;
  uint64_t result = v21 + 8;
  uint64_t v24 = v17;
  uint64_t v25 = *((void *)a1 + 4) - v24;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v25;
  uint64_t v26 = *(void *)(v20 + v22) ^ (*(void *)(v20 + v22) >> 30);
  unint64_t v27 = ((v26 * v8) ^ ((v26 * v8) >> 27)) * v9;
  *((void *)a1 + 5) ^= (v27 >> 31) ^ v27;
  return result;
}

double re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(result + 16));
    re::DynamicString::deinit((re::DynamicString *)(v2 + 88));
    return re::DynamicArray<re::DynamicString>::deinit(v2 + 48);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 120 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 120 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 120 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 120 * v10;
  *(void *)(v14 + 80) = 0;
  *(_DWORD *)(v14 + 72) = 0;
  *(void *)(v14 + 56) = 0;
  *(void *)(v14 + 64) = 0;
  *(void *)(v14 + 48) = 0;
  uint64_t v15 = *(void *)(a5 + 8);
  *(void *)(v14 + 48) = *(void *)a5;
  *(void *)(v14 + 56) = v15;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  uint64_t v16 = *(void *)(v14 + 64);
  *(void *)(v14 + 64) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v16;
  uint64_t v17 = *(void *)(v14 + 80);
  *(void *)(v14 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v17;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v14 + 72);
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(void *)(v14 + 112) = *(void *)(a5 + 64);
  uint64_t v18 = *(void *)(a5 + 48);
  *(void *)(v14 + 88) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = 0;
  uint64_t v19 = *(void *)(a5 + 56);
  *(void *)(a5 + 64) = 0;
  uint64_t v21 = *(void *)(v14 + 96);
  uint64_t v20 = *(void *)(v14 + 104);
  *(void *)(v14 + 96) = v18;
  *(void *)(v14 + 104) = v19;
  *(void *)(a5 + 48) = v21;
  *(void *)(a5 + 56) = v20;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 120;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 48 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v8 + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 48 * v8;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(void *)(v14 + 40) = a5[3];
  uint64_t v15 = a5[1];
  *(void *)(v14 + 16) = *a5;
  *a5 = 0;
  uint64_t v16 = a5[2];
  a5[3] = 0;
  uint64_t v18 = *(void *)(v14 + 24);
  uint64_t v17 = *(void *)(v14 + 32);
  *(void *)(v14 + 24) = v15;
  *(void *)(v14 + 32) = v16;
  a5[1] = v18;
  a5[2] = v17;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(void *)&v15[16] + v10 + 8, *(void *)&v15[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

void *re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 6);
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          void *v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_DWORD *)v11 + 8) = *(_DWORD *)(v8 + 32);
          v11[6] = 0;
          v11[7] = 0;
          v11[5] = 0;
          v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 40) = 0;
          uint64_t v16 = v11[7];
          uint64_t v17 = *(void *)(v8 + 56);
          v11[6] = *(void *)(v8 + 48);
          v11[7] = v17;
          *(void *)(v8 + 48) = 0;
          *(void *)(v8 + 56) = v16;
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v8 + 40));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 64;
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      *(void *)&v15[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v15[16] + v10) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9
                * (*(void *)(*(void *)&v15[16] + v10 + 8) ^ (*(void *)(*(void *)&v15[16] + v10 + 8) >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (void *)(*(void *)&v15[16] + v10 + 8), (void *)(*(void *)&v15[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_169, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = 0;
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 8), (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::DynamicArray<re::LinkedFunction>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 144 * v4;
        do
        {
          unsigned int v7 = (void *)(v3 + v5);
          re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v3 + v5 + 120));
          re::FixedArray<re::TypedArgument>::deinit((void *)(v3 + v5 + 96));
          re::FixedArray<re::TechniqueFunctionConstant>::deinit((void *)(v3 + v5 + 64));
          uint64_t v8 = *(void *)(v3 + v5 + 48);
          if (v8)
          {

            v7[6] = 0;
          }
          re::StringID::destroyString((re::StringID *)(v7 + 3));
          re::StringID::destroyString((re::StringID *)(v7 + 1));
          v5 += 144;
        }
        while (v6 != v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 6;
        do
        {
          re::FixedArray<CoreIKTransform>::deinit(v3 + 5);
          re::DynamicString::deinit((re::DynamicString *)v3);
          v3 += 8;
          v5 -= 64;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(uint64_t **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::FixedArray<re::TechniqueFunctionConstant>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3 << 6, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unsigned int v7 = v5;
  for (unint64_t i = a3 - 1; i; --i)
  {
    *(_OWORD *)unsigned int v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 5) = 0;
    unsigned int v7 = (_anonymous_namespace_ *)((char *)v7 + 64);
  }
  *(_OWORD *)unsigned int v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t result = re::DynamicString::setCapacity(v7, 0);
  *((_DWORD *)v7 + 8) = 0;
  *((void *)v7 + 6) = 0;
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 5) = 0;
  return result;
}

void *re::DynamicArray<re::LinkedFunction>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::LinkedFunction>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 144 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::LinkedFunction>(v8, v11);
          v8 += 144;
          v11 += 144;
          v10 -= 144;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::FixedArray<re::LinkedFunction>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x1C71C71C71C71C8)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 144, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 144 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(unsigned char *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = "";
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = "";
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(_DWORD *)(result + 56) = 0;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      result += 144;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = "";
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = "";
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  return result;
}

void re::ObjectHelper::move<re::LinkedFunction>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)a1;
  uint64_t v4 = (re::StringID *)(a1 + 8);
  char v3 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | *(void *)(a1 + 8) & 1;
  *(void *)(a2 + 8) = *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = "";
  *(void *)(a1 + 8) = 0;
  unint64_t v6 = (re::StringID *)(a1 + 24);
  char v5 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | *(void *)(a1 + 24) & 1;
  *(void *)(a2 + 24) = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = "";
  *(void *)(a1 + 24) = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a1 + 48) = 0;
  LODWORD(v8) = *(_DWORD *)(a1 + 56);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v10 = (void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 80);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a2 + 80) = v12;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v11;
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v13 = (void *)(a1 + 96);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  uint64_t v14 = *(void *)(a2 + 112);
  uint64_t v15 = *(void *)(a1 + 112);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  *(void *)(a2 + 112) = v15;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = v14;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v16 = (uint64_t *)(a1 + 120);
  *(void *)(a2 + 120) = v17;
  *uint64_t v16 = 0;
  uint64_t v18 = *(void *)(a2 + 136);
  uint64_t v19 = v16[2];
  *(void *)(a2 + 128) = v16[1];
  *(void *)(a2 + 136) = v19;
  v16[1] = 0;
  _OWORD v16[2] = v18;
  re::FixedArray<CoreIKTransform>::deinit(v16);
  re::FixedArray<re::TypedArgument>::deinit(v13);
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(v10);
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20)
  {

    *(void *)(a1 + 48) = 0;
  }
  re::StringID::destroyString(v6);
  re::StringID::destroyString(v4);
}

void re::dispatch::Queue::make(const char *a1@<X0>, int *a2@<X1>, NSObject **a3@<X8>)
{
  if (a2[2] == 1)
  {
    unint64_t v6 = MEMORY[0x263EF83A8];
    id v7 = MEMORY[0x263EF83A8];
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v8 = *a2;
  if (v8 > 4) {
    dispatch_qos_class_t v9 = QOS_CLASS_UNSPECIFIED;
  }
  else {
    dispatch_qos_class_t v9 = dword_234380070[v8];
  }
  uint64_t v10 = dispatch_queue_attr_make_with_qos_class(v6, v9, 0);

  int v11 = a2[1];
  if (v11 == 2) {
    dispatch_autorelease_frequency_t v12 = DISPATCH_AUTORELEASE_FREQUENCY_NEVER;
  }
  else {
    dispatch_autorelease_frequency_t v12 = (unint64_t)(v11 == 1);
  }
  attr = dispatch_queue_attr_make_with_autorelease_frequency(v10, v12);

  uint64_t v13 = (dispatch_queue_t *)*((void *)a2 + 2);
  if (v13 && *v13) {
    dispatch_queue_t v14 = dispatch_queue_create_with_target_V2(a1, attr, *v13);
  }
  else {
    dispatch_queue_t v14 = dispatch_queue_create(a1, attr);
  }
  uint64_t v15 = v14;
  *a3 = v15;
}

void re::dispatch::Queue::global(re::dispatch::Queue *this@<X0>, uintptr_t a2@<X1>, void *a3@<X8>)
{
  dispatch_get_global_queue((intptr_t)this, a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  *a3 = v4;
}

void re::dispatch::Group::async(id *a1, NSObject **a2, void *a3, void (__cdecl *a4)(void *))
{
  unint64_t v6 = *a2;
  id v7 = *a1;
  dispatch_group_async_f(v7, v6, a3, a4);
}

void re::dispatch::Group::async(id *a1, NSObject **a2, void *a3)
{
  id v4 = *a2;
  char v5 = *a1;
  dispatch_group_async(v5, v4, a3);
}

void re::dispatch::Group::notify(id *a1, NSObject **a2, void *a3)
{
  id v4 = *a2;
  char v5 = *a1;
  dispatch_group_notify(v5, v4, a3);
}

float32x4_t *re::ecs2::CARESortingManager::optionalSortingPlaneFrom(float32x4_t *this, const re::ecs2::Entity *a2, re::ecs2::SortingTransformCache *a3)
{
  uint64_t result = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a3, a2);
  float32x4_t v6 = result[2];
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) < 1.0e-10) {
    goto LABEL_6;
  }
  unsigned __int32 v8 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
  float32x4_t v11 = vmulq_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  float32x4_t v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1);
  if ((vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v12, v11), (int8x16_t)vcgeq_f32(v11, v12)))).u8[0] & 1) != 0
    || (__int32 v13 = v11.i32[2],
        uint64_t v20 = v11.i64[0],
        float32x4_t v21 = result[2],
        float32x4_t v17 = *result,
        float32x4_t v18 = result[1],
        float32x4_t v19 = result[3],
        (uint64_t result = (float32x4_t *)re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) == 0))
  {
LABEL_6:
    this->i8[0] = 0;
  }
  else
  {
    uint32x4_t v14 = (uint32x4_t)vcgtq_f32(result[3], result[4]);
    v14.i32[3] = v14.i32[2];
    if ((vmaxvq_u32(v14) & 0x80000000) != 0) {
      float v15 = result[2].f32[2] * 0.5;
    }
    else {
      LODWORD(v15) = result[4].i64[1];
    }
    float32x4_t v16 = vaddq_f32(v19, vmlaq_n_f32(vmlaq_f32(vmulq_f32(v17, (float32x4_t)0), (float32x4_t)0, v18), v21, v15));
    this->i8[0] = 1;
    this[1].i64[0] = v20;
    this[1].i32[2] = v13;
    this[2] = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
  }
  return result;
}

uint64_t re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(re::ecs2::SortingTransformCache *this, const re::ecs2::Entity *a2)
{
  id v4 = (char *)this + 8;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  if (*((void *)this + 1))
  {
    uint64_t v7 = *(unsigned int *)(*((void *)this + 2) + 4 * (v6 % *((unsigned int *)this + 8)));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v14 = *((void *)this + 3);
      if (*(const re::ecs2::Entity **)(v14 + 160 * v7 + 16) == a2)
      {
LABEL_12:
        uint64_t v15 = v14 + 160 * v7;
        return v15 + 32;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v14 + 160 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          break;
        }
        if (*(const re::ecs2::Entity **)(v14 + 160 * v7 + 16) == a2) {
          goto LABEL_12;
        }
      }
    }
  }
  memset(v25, 0, sizeof(v25));
  re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)this, (re::ecs2::TransformComponent **)a2, v25);
  v25[1] = __invert_f4(v25[0]);
  unint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    unint64_t v8 = v6 % *((unsigned int *)this + 8);
    uint64_t v9 = *(unsigned int *)(*((void *)this + 2) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v23 = *((void *)this + 3);
      if (*(const re::ecs2::Entity **)(v23 + 160 * v9 + 16) == a2)
      {
LABEL_18:
        uint64_t v15 = v23 + 160 * v9;
        return v15 + 32;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v23 + 160 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(const re::ecs2::Entity **)(v23 + 160 * v9 + 16) == a2) {
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t v10 = *((unsigned int *)this + 11);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *((unsigned int *)this + 10);
    int v11 = v10;
    if (v10 == *((_DWORD *)this + 8))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v4, 2 * *((_DWORD *)this + 9));
      LODWORD(v8) = v6 % *((unsigned int *)this + 8);
      int v11 = *((_DWORD *)this + 10);
    }
    *((_DWORD *)this + 10) = v11 + 1;
    uint64_t v12 = *((void *)this + 3);
    int v13 = *(_DWORD *)(v12 + 160 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *((void *)this + 3);
    int v13 = *(_DWORD *)(v12 + 160 * v10 + 8);
    *((_DWORD *)this + 11) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 160 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*((void *)this + 3) + 160 * v10 + 8) = *(_DWORD *)(*((void *)this + 3) + 160 * v10 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 2) + 4 * v8);
  *(void *)(*((void *)this + 3) + 160 * v10) = v6;
  *(void *)(*((void *)this + 3) + 160 * v10 + 16) = a2;
  uint64_t v16 = *((void *)this + 3) + 160 * v10;
  simd_float4 v17 = v25[0].columns[0];
  simd_float4 v18 = v25[0].columns[1];
  simd_float4 v19 = v25[0].columns[3];
  *(simd_float4 *)(v16 + 64) = v25[0].columns[2];
  *(simd_float4 *)(v16 + 80) = v19;
  *(simd_float4 *)(v16 + 32) = v17;
  *(simd_float4 *)(v16 + 48) = v18;
  simd_float4 v20 = v25[1].columns[0];
  simd_float4 v21 = v25[1].columns[1];
  simd_float4 v22 = v25[1].columns[3];
  *(simd_float4 *)(v16 + 128) = v25[1].columns[2];
  *(simd_float4 *)(v16 + 144) = v22;
  *(simd_float4 *)(v16 + 96) = v20;
  *(simd_float4 *)(v16 + 112) = v21;
  *(_DWORD *)(*((void *)this + 2) + 4 * v8) = v10;
  ++*((_DWORD *)this + 9);
  ++*((_DWORD *)this + 12);
  uint64_t v15 = *((void *)this + 3) + 160 * v10;
  return v15 + 32;
}

uint64_t re::ecs2::CARESortingManager::CARESortingManager(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6E1308;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v7 = a1 + 152;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t v8 = a1 + 248;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  uint64_t v9 = a1 + 296;
  *(void *)(a1 + 284) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  uint64_t v10 = a1 + 344;
  *(void *)(a1 + 332) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 380) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 428) = 0x7FFFFFFFLL;
  uint64_t v11 = a1 + 448;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(void *)(v8 + 232) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v8 + 240) = 0;
  *(void *)(v8 + 248) = a2;
  *(void *)(v8 + 288) = 0;
  *(void *)(v8 + 296) = 0;
  *(void *)(v8 + 280) = 0;
  *(void *)(v8 + 256) = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  uint64_t v12 = re::ServiceLocator::serviceOrNull<re::RenderManager>(*(void *)(v8 + 248));
  *(void *)(v8 + 264) = v12;
  if (!v12)
  {
    int v13 = *re::sortingLogObjects(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "No RenderManager found, CARE sorting will not happen.", buf, 2u);
    }
  }
  uint64_t v14 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(*(void *)(a1 + 496));
  *(void *)(a1 + 520) = v14;
  if (!v14)
  {
    uint64_t v15 = *re::sortingLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "No portal service found, CARE sorting will consider all entities to be in the same world.", buf, 2u);
    }
  }
  uint64_t v16 = (re *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(*(void *)(a1 + 496));
  *(void *)(a1 + 440) = v16;
  if (re::CARESortingDefaults::normalThreshold(void)::onceToken != -1) {
    dispatch_once(&re::CARESortingDefaults::normalThreshold(void)::onceToken, &__block_literal_global_19);
  }
  dword_26AF7FBEC = re::CARESortingDefaults::normalThreshold(void)::sortingNormalThreshold;
  if (re::CARESortingDefaults::distanceThreshold(void)::onceToken != -1) {
    dispatch_once(&re::CARESortingDefaults::distanceThreshold(void)::onceToken, &__block_literal_global_4_0);
  }
  dword_26AF7FBF0 = re::CARESortingDefaults::distanceThreshold(void)::sortingDistanceThreshold;
  if (re::CARESortingDefaults::displacementOrderingThreshold(void)::onceToken != -1) {
    dispatch_once(&re::CARESortingDefaults::displacementOrderingThreshold(void)::onceToken, &__block_literal_global_8);
  }
  dword_26AF7FBF4 = re::CARESortingDefaults::displacementOrderingThreshold(void)::sortingDisplacementOrderingThreshold;
  float v17 = *(float *)&dword_26AF7FBEC;
  simd_float4 v18 = *re::sortingLogObjects(v16);
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
  if (v19)
  {
    float v20 = acosf(1.0 - v17);
    *(_DWORD *)buf = 134218496;
    double v33 = *(float *)&dword_26AF7FBEC;
    __int16 v34 = 2048;
    double v35 = v20;
    __int16 v36 = 2048;
    double v37 = (float)(v20 * 180.0) / 3.14159265;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_INFO, "Sorting NormalThreshold: %f %frad (%fdeg)", buf, 0x20u);
  }
  simd_float4 v21 = *re::sortingLogObjects((re *)v19);
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
  if (v22)
  {
    *(_DWORD *)buf = 134217984;
    double v33 = *(float *)&dword_26AF7FBF0;
    _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_INFO, "Sorting DistanceThreshold: %fm", buf, 0xCu);
  }
  uint64_t v23 = *re::sortingLogObjects((re *)v22);
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
  if (v24)
  {
    *(_DWORD *)buf = 134217984;
    double v33 = *(float *)&dword_26AF7FBF4;
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_INFO, "Sorting DisplacementOrderingThreshold: %fm", buf, 0xCu);
  }
  re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>(v5, &re::kDefaultWorldRootId, a1);
  re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups = 0;
  re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups = 0;
  re::ecs2::CARESortingDebugging::m_sortGroupsResorted = 0;
  re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities = 0;
  re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied = 0;
  re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = 0;
  re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = 0;
  re::ecs2::CARESortingDebugging::m_entitiesActivated = 0;
  re::ecs2::CARESortingDebugging::m_entitiesDeactivated = 0;
  re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated = 0;
  re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated = 0;
  return a1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::PortalService>(void)::info = re::ecs2::introspect_PortalService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::PortalService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::BillboardService>(void)::info = re::ecs2::introspect_BillboardService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::BillboardService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 184 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(void *)(v11 + 184 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 184 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 184 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 36);
  if (v12 == 0x7FFFFFFF)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 32);
    unsigned int v13 = v12;
    if (v12 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((_anonymous_namespace_ *)a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v13 + 1;
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v14 + 184 * v12 + 8);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v14 + 184 * v12 + 8);
    *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
  }
  uint64_t v16 = 184 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + v16) = v8;
  *(void *)(*(void *)(a1 + 16) + v16 + 16) = v6;
  uint64_t v17 = *(void *)(a1 + 16) + v16;
  *(_OWORD *)(v17 + 24) = 0u;
  v17 += 24;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_DWORD *)(v17 + 32) = 0;
  *(void *)(v17 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v17 + 80) = 0;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(void *)(v17 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v17 + 128) = 0;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(void *)(v17 + 132) = 0x7FFFFFFFLL;
  *(void *)(v17 + 144) = a3;
  *(void *)(v17 + 152) = a3 + 440;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v12;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages(re::ecs2::WorldSortingState *this, float32x4_t a2)
{
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    do
    {
      a2 = re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)*(void *)(*((void *)this + 2) + 24 * v7 + 16), a2);
      if (*((_DWORD *)this + 8) <= (v4 + 1)) {
        int v8 = v4 + 1;
      }
      else {
        int v8 = *((_DWORD *)this + 8);
      }
      int v9 = v4;
      while (1)
      {
        uint64_t v7 = (v9 + 1);
        if (v8 - 1 == v9) {
          break;
        }
        ++v9;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((void *)this + 2) + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v4) = v8;
LABEL_17:
      ;
    }
    while (v3 != v4);
  }
}

float32x4_t re::ecs2::CAMeshCodirectionalGroup::recomputeAverages(re::ecs2::CAMeshCodirectionalGroup *this, float32x4_t result)
{
  if (*((unsigned char *)this + 144))
  {
    v3.i32[3] = 0;
    *((_OWORD *)this + 7) = 0u;
    uint64_t v4 = (float32x4_t *)((char *)this + 112);
    *((unsigned char *)this + 144) = 0;
    *((_OWORD *)this + 8) = 0u;
    if (*((_DWORD *)this + 13))
    {
      float32x4_t v6 = *((float32x4_t *)this + 5);
      float32x4_t v5 = *((float32x4_t *)this + 6);
      float32x4_t v7 = vmulq_f32(v6, (float32x4_t)xmmword_23435FD60);
      float32x4_t v8 = vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1));
      float32x4_t v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v8);
      v9.f32[0] = fabsf(v9.f32[0]);
      v8.i32[0] = 0.5;
      float32x4_t v10 = vsubq_f32(v5, vaddq_f32(v6, v5));
      int32x4_t v11 = (int32x4_t)vmulq_f32(v10, v10);
      float32x4_t v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, v8), 0), (int8x16_t)xmmword_23435FD50, (int8x16_t)xmmword_23435FD60);
      unsigned __int32 v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
      *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v13);
      *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v13, vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
      float32x4_t v14 = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v13, vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
      float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
      float32x4_t v16 = vmlaq_f32(vmulq_f32(v15, vnegq_f32(v12)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
      int32x4_t v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), *(float32x2_t *)v17.i8)).u32[0];
      float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
      *(float32x2_t *)v16.f32 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)));
      float32x4_t v19 = vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32))).f32[0]);
      int8x16_t v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v14)), v19, v15);
      float32x4_t v21 = vmulq_f32(v5, v19);
      float32x4_t v22 = vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL));
      float32x4_t v23 = vmulq_f32(v5, v14);
      unint64_t v24 = __PAIR64__(v20.u32[0], v19.u32[1]);
      float v25 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0];
      v3.i64[0] = __PAIR64__(v20.u32[1], v19.u32[2]);
      v19.i32[1] = v20.i32[2];
      v19.i32[2] = v14.i32[0];
      float32x4_t v61 = v19;
      __asm { FMOV            V2.4S, #1.0 }
      _Q2.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0];
      _Q2.f32[1] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
      float32x4_t v59 = _Q2;
      uint64_t v31 = *((unsigned int *)this + 14);
      if (v31)
      {
        uint64_t v32 = 0;
        double v33 = (int *)(*((void *)this + 5) + 8);
        while (1)
        {
          int v34 = *v33;
          v33 += 6;
          if (v34 < 0) {
            break;
          }
          if (v31 == ++v32)
          {
            LODWORD(v32) = *((_DWORD *)this + 14);
            break;
          }
        }
      }
      else
      {
        LODWORD(v32) = 0;
      }
      float32x4_t v35 = v61;
      v35.i32[3] = 0;
      float32x4_t v62 = v35;
      float32x4_t v36 = (float32x4_t)v24;
      v36.i32[2] = v14.i32[1];
      float32x4_t v63 = v36;
      v3.i32[2] = v14.i32[2];
      float32x4_t v37 = v59;
      v37.f32[2] = v25;
      float32x4_t v60 = v37;
      int32x4_t v38 = vdupq_n_s32(0x7F800000u);
      if (v31 == v32)
      {
        float32x4_t v65 = (float32x4_t)v38;
        float32x4_t v39 = *v4;
        v40.i64[0] = 0x7F0000007FLL;
        v40.i64[1] = 0x7F0000007FLL;
        float32x4_t v64 = v40;
      }
      else
      {
        float32x4_t v65 = (float32x4_t)v38;
        uint64_t v41 = v32;
        v42.i64[0] = 0x7F0000007FLL;
        v42.i64[1] = 0x7F0000007FLL;
        float32x4_t v64 = v42;
        float32x4_t v58 = (float32x4_t)v3;
        do
        {
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v66, *(const re::ecs2::Entity **)(*((void *)this + 5) + 24 * v41 + 16), *((re::ecs2::SortingTransformCache **)this + 54));
          simd_float4 v3 = (simd_float4)v58;
          float32x4_t v43 = vaddq_f32(v60, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v67.f32[0]), v63, *(float32x2_t *)v67.f32, 1), v58, v67, 2));
          float32x4_t v44 = vdivq_f32(v43, (float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3));
          float32x4_t v46 = v64;
          float32x4_t v45 = v65;
          v45.i32[3] = 0;
          v44.i32[3] = 0;
          float32x4_t v47 = vminnmq_f32(v45, v44);
          v46.i32[3] = 0;
          float32x4_t v48 = vmaxnmq_f32(v46, v44);
          float32x4_t v39 = vaddq_f32(v66[1], *((float32x4_t *)this + 7));
          *((float32x4_t *)this + 7) = v39;
          if (*((_DWORD *)this + 14) <= (v32 + 1)) {
            int v49 = v32 + 1;
          }
          else {
            int v49 = *((_DWORD *)this + 14);
          }
          int v50 = v32;
          while (1)
          {
            uint64_t v41 = (v50 + 1);
            if (v49 - 1 == v50) {
              break;
            }
            ++v50;
            LODWORD(v32) = v41;
            if ((*(_DWORD *)(*((void *)this + 5) + 24 * v41 + 8) & 0x80000000) != 0) {
              goto LABEL_20;
            }
          }
          LODWORD(v32) = v49;
LABEL_20:
          float32x4_t v64 = v48;
          float32x4_t v65 = v47;
        }
        while (v31 != v32);
      }
      int32x4_t v51 = (int32x4_t)vmulq_f32(v39, v39);
      v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
      float32x2_t v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
      float32x2_t v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
      *uint64_t v4 = vmulq_n_f32(v39, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
      v68.columns[0] = (simd_float4)v62;
      v68.columns[1] = (simd_float4)v63;
      v68.columns[2] = v3;
      v68.columns[3] = (simd_float4)v60;
      simd_float4x4 v69 = __invert_f4(v68);
      uint32x4_t v54 = (uint32x4_t)vcgtq_f32(v65, v64);
      v54.i32[3] = v54.i32[2];
      if ((vmaxvq_u32(v54) & 0x80000000) != 0)
      {
        float32x4_t v56 = 0uLL;
      }
      else
      {
        v55.i64[0] = 0x3F0000003F000000;
        v55.i64[1] = 0x3F0000003F000000;
        float32x4_t v56 = vmulq_f32(vaddq_f32(v65, v64), v55);
      }
      float32x4_t v57 = vaddq_f32((float32x4_t)v69.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69.columns[0], v56.f32[0]), (float32x4_t)v69.columns[1], *(float32x2_t *)v56.f32, 1), (float32x4_t)v69.columns[2], v56, 2));
      uint64_t result = vdivq_f32(v57, (float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3));
      *((float32x4_t *)this + 8) = result;
      *((unsigned char *)this + 145) = 1;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,5ul>::add(_anonymous_namespace_ *result, void *a2)
{
  simd_float4 v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(v3, v10);
    int v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    float32x4_t v12 = (void *)((char *)v3 + 24);
    goto LABEL_19;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *((void *)result + 3);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 6)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 10;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(result, v13);
  if (*((_DWORD *)v3 + 4)) {
    goto LABEL_18;
  }
LABEL_12:
  float32x4_t v12 = (void *)*((void *)v3 + 4);
LABEL_19:
  uint64_t v14 = *((void *)v3 + 1);
  v12[v14] = *a2;
  *((void *)v3 + 1) = v14 + 1;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

void re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = (re::ecs2::SortingTransformCache *)a1[2];
  unint64_t v7 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  BOOL v8 = (unsigned char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v8
    || v8[95]
    && ((uint64_t v9 = *(void *)(a2 + 176)) == 0
     || (uint64_t v10 = *(void *)(v9 + 40)) == 0
     || (unsigned int v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
    || v8[92] && !v8[93]
    || (re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v42, (const re::ecs2::Entity *)a2, v6), !v42[0].i8[0]))
  {
    float32x4_t v21 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    return;
  }
  (*(void (**)(float32x4_t *__return_ptr))(**(void **)a3 + 8))(v42);
  unint64_t v12 = a1[3];
  if (v42[0].i8[0]) {
    unint64_t v13 = v42[0].u64[1];
  }
  else {
    unint64_t v13 = 0;
  }
  unint64_t v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  unint64_t v15 = v14 ^ (v14 >> 31);
  if (v12)
  {
    unint64_t v12 = v15 % *((unsigned int *)a1 + 12);
    uint64_t v16 = *(unsigned int *)(a1[4] + 4 * v12);
    if (v16 != 0x7FFFFFFF)
    {
      uint64_t v25 = a1[5];
      if (*(void *)(v25 + 72 * v16 + 16) == v13)
      {
LABEL_26:
        uint64_t v24 = v25 + 72 * v16;
        goto LABEL_27;
      }
      while (1)
      {
        LODWORD(v16) = *(_DWORD *)(v25 + 72 * v16 + 8) & 0x7FFFFFFF;
        if (v16 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v25 + 72 * v16 + 16) == v13) {
          goto LABEL_26;
        }
      }
    }
  }
  uint64_t v17 = *((unsigned int *)a1 + 15);
  if (v17 == 0x7FFFFFFF)
  {
    uint64_t v17 = *((unsigned int *)a1 + 14);
    int v18 = v17;
    if (v17 == *((_DWORD *)a1 + 12))
    {
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)(a1 + 3), 2 * *((_DWORD *)a1 + 13));
      LODWORD(v12) = v15 % *((unsigned int *)a1 + 12);
      int v18 = *((_DWORD *)a1 + 14);
    }
    *((_DWORD *)a1 + 14) = v18 + 1;
    uint64_t v19 = a1[5];
    int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
  }
  else
  {
    uint64_t v19 = a1[5];
    int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
    *((_DWORD *)a1 + 15) = v20 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
  *(_DWORD *)(a1[5] + 72 * v17 + 8) = *(_DWORD *)(a1[5] + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(a1[4]
                                                                                                 + 4
                                                                                                 * v12);
  *(void *)(a1[5] + 72 * v17) = v15;
  *(void *)(a1[5] + 72 * v17 + 16) = v13;
  uint64_t v23 = a1[5] + 72 * v17;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
  *(_DWORD *)(a1[4] + 4 * v12) = v17;
  ++*((_DWORD *)a1 + 13);
  ++*((_DWORD *)a1 + 16);
  uint64_t v24 = a1[5] + 72 * v17;
LABEL_27:
  uint64_t v26 = v24 + 24;
  if (!*(void *)(v24 + 24)) {
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(v26, a1[3], 64);
  }
  int v27 = *(_DWORD *)(v26 + 40);
  v42[0].i64[0] = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v26, (uint64_t *)v42);
  if (*(_DWORD *)(v26 + 40) != v27)
  {
    uint64_t v29 = *a1;
    uint64_t v28 = a1[1];
    v42[0].i64[0] = a2;
    unint64_t v30 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v28, (uint64_t *)v42);
    if (v30)
    {
      if (*v30 != v13)
      {
        uint64_t v31 = (re::ecs2::WorldSortingState *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v29 + 56, *v30);
        if (v31) {
          re::ecs2::WorldSortingState::removeEntityFromTracking(v31, (re::ecs2::Entity *)a2);
        }
      }
    }
    uint64_t v32 = a1[1];
    unint64_t v33 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v34 = v33 ^ (v33 >> 31);
    unint64_t v35 = *(void *)v32;
    if (*(void *)v32)
    {
      unint64_t v35 = v34 % *(unsigned int *)(v32 + 24);
      uint64_t v36 = *(unsigned int *)(*(void *)(v32 + 8) + 4 * v35);
      if (v36 != 0x7FFFFFFF)
      {
        uint64_t v41 = *(void *)(v32 + 16);
        if (*(void *)(v41 + 32 * v36 + 16) == a2)
        {
LABEL_45:
          *(void *)(v41 + 32 * v36 + 24) = v13;
LABEL_46:
          ++*(_DWORD *)(v32 + 40);
          return;
        }
        while (1)
        {
          uint64_t v36 = *(_DWORD *)(v41 + 32 * v36 + 8) & 0x7FFFFFFF;
          if (v36 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v41 + 32 * v36 + 16) == a2) {
            goto LABEL_45;
          }
        }
      }
    }
    uint64_t v37 = *(unsigned int *)(v32 + 36);
    if (v37 == 0x7FFFFFFF)
    {
      uint64_t v37 = *(unsigned int *)(v32 + 32);
      int v38 = v37;
      if (v37 == *(_DWORD *)(v32 + 24))
      {
        re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(v32, 2 * *(_DWORD *)(v32 + 28));
        LODWORD(v35) = v34 % *(unsigned int *)(v32 + 24);
        int v38 = *(_DWORD *)(v32 + 32);
      }
      *(_DWORD *)(v32 + 32) = v38 + 1;
      uint64_t v39 = *(void *)(v32 + 16);
      int v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
    }
    else
    {
      uint64_t v39 = *(void *)(v32 + 16);
      int v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
      *(_DWORD *)(v32 + 36) = v40 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v39 + 32 * v37 + 8) = v40 | 0x80000000;
    *(_DWORD *)(*(void *)(v32 + 16) + 32 * v37 + 8) = *(_DWORD *)(*(void *)(v32 + 16) + 32 * v37 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v32 + 8) + 4 * v35);
    *(void *)(*(void *)(v32 + 16) + 32 * v37) = v34;
    *(void *)(*(void *)(v32 + 16) + 32 * v37 + 16) = a2;
    *(void *)(*(void *)(v32 + 16) + 32 * v37 + 24) = v13;
    *(_DWORD *)(*(void *)(v32 + 8) + 4 * v35) = v37;
    ++*(_DWORD *)(v32 + 28);
    goto LABEL_46;
  }
}

uint64_t re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v24 = a1;
  uint64_t result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a3, &v24);
  if (result & 1) == 0 && (*(unsigned char *)(v24 + 288))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a5 + 8))(&v19);
    if ((_BYTE)v19) {
      uint64_t v10 = v20;
    }
    else {
      uint64_t v10 = 0;
    }
    int v21 = 1;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v19 = a2;
    uint64_t v20 = 0;
    re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(&v19, 0);
    v21 += 2;
    re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)&v19, &v24);
    uint64_t v11 = v20;
    while (v11)
    {
      unint64_t v18 = 0;
      unint64_t v12 = v23;
      if (v21) {
        unint64_t v12 = &v22;
      }
      unint64_t v18 = v12[--v11];
      uint64_t v20 = v11;
      v21 += 2;
      re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable(a4, v18, a5);
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a3, (uint64_t *)&v18);
      uint64_t v13 = *(void *)(v18 + 328);
      if (v13)
      {
        unint64_t v14 = *(uint64_t **)(v18 + 344);
        uint64_t v15 = 8 * v13;
        do
        {
          uint64_t v17 = 0;
          uint64_t v17 = *v14;
          if ((*(unsigned char *)(v17 + 288) & 1) != 0
            && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a3, &v17))
          {
            (*(void (**)(void *__return_ptr))(**(void **)a5 + 8))(v25);
            uint64_t v16 = LOBYTE(v25[0]) ? v25[1] : 0;
            if (v16 == v10) {
              re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)&v19, &v17);
            }
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
        uint64_t v11 = v20;
      }
    }
    uint64_t result = v19;
    if (v19)
    {
      if ((v21 & 1) == 0) {
        return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
      }
    }
  }
  return result;
}

void re::ecs2::CARESortingManager::update(uint64_t a1)
{
  uint64_t v741 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 512))
  {
    uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(a1 + 520) + 24))(*(void *)(a1 + 520));
    uint64_t v2 = a1;
    uint64_t v3 = v1;
    uint64_t v714 = v1;
    if (*(_DWORD *)(a1 + 476))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 472);
      if (v4)
      {
        memset_pattern16(*(void **)(a1 + 456), &unk_2343655D0, 4 * v4);
        uint64_t v2 = a1;
      }
      uint64_t v5 = *(unsigned int *)(v2 + 480);
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 160 * v5;
        do
        {
          uint64_t v8 = *(void *)(v2 + 464) + v6;
          int v9 = *(_DWORD *)(v8 + 8);
          if (v9 < 0) {
            *(_DWORD *)(v8 + 8) = v9 & 0x7FFFFFFF;
          }
          v6 += 160;
        }
        while (v7 != v6);
      }
      *(_DWORD *)(v2 + 484) = 0x7FFFFFFF;
      *(void *)(v2 + 476) = 0;
      ++*(_DWORD *)(v2 + 488);
    }
    uint64_t v10 = a1;
    uint64_t v11 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(v2 + 512));
    re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = 0;
    unint64_t v12 = &unk_26879F000;
    re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = 0;
    re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = 0;
    re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups = 0;
    re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups = 0;
    re::ecs2::CARESortingDebugging::m_sortGroupsResorted = 0;
    re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities = 0;
    re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied = 0;
    re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = 0;
    re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = 0;
    uint64_t v13 = *(void *)(a1 + 520);
    uint64_t v675 = v11;
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
      LODWORD(v730[0]) = 1;
      *(void *)&v730[1] = 0;
      *((void *)&v730[0] + 1) = 0;
      *(void *)&out[8] = 0;
      *(void *)uuid_t out = v11;
      re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(out, 0);
      uint64_t v16 = a1;
      LODWORD(v730[0]) += 2;
      uint64_t v17 = *(unsigned int *)(a1 + 88);
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = (int *)(*(void *)(a1 + 72) + 8);
        while (1)
        {
          int v20 = *v19;
          v19 += 46;
          if (v20 < 0) {
            break;
          }
          if (v17 == ++v18)
          {
            LODWORD(v18) = *(_DWORD *)(a1 + 88);
            break;
          }
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if (v17 != v18)
      {
        uint64_t v22 = v18;
        do
        {
          uint64_t v23 = *(void *)(v16 + 72) + 184 * v22;
          uint64_t v26 = *(void *)(v23 + 16);
          uint64_t v25 = (uint64_t *)(v23 + 16);
          uint64_t v24 = v26;
          if (v26)
          {
            if (*(_DWORD *)(v15 + 124))
            {
              BOOL v27 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(v15 + 96, v25);
              uint64_t v16 = a1;
              if (v27) {
                goto LABEL_32;
              }
            }
            else
            {
              uint64_t v28 = *(void *)(v15 + 16);
              if (v28)
              {
                uint64_t v29 = 8 * v28;
                unint64_t v30 = (void *)(v15 + 32);
                while (*v30 != v24)
                {
                  ++v30;
                  v29 -= 8;
                  if (!v29) {
                    goto LABEL_31;
                  }
                }
                if (v29) {
                  goto LABEL_32;
                }
              }
            }
LABEL_31:
            re::DynamicOverflowArray<unsigned long long,5ul>::add((_anonymous_namespace_ *)out, v25);
            uint64_t v16 = a1;
          }
LABEL_32:
          if (*(_DWORD *)(v16 + 88) <= (v18 + 1)) {
            int v31 = v18 + 1;
          }
          else {
            int v31 = *(_DWORD *)(v16 + 88);
          }
          while (1)
          {
            uint64_t v22 = (v18 + 1);
            if (v31 - 1 == v18) {
              break;
            }
            LODWORD(v18) = v18 + 1;
            int v32 = v22;
            if ((*(_DWORD *)(*(void *)(v16 + 72) + 184 * v22 + 8) & 0x80000000) != 0) {
              goto LABEL_39;
            }
          }
          int v32 = v31;
LABEL_39:
          LODWORD(v18) = v32;
        }
        while (v17 != v32);
      }
      LODWORD(v716) = 1;
      *(void *)&long long v717 = 0;
      *((void *)&v716 + 1) = 0;
      long long v715 = (unint64_t)v11;
      re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(&v715, 0);
      LODWORD(v716) = v716 + 2;
      int v33 = *(_DWORD *)(v15 + 124);
      if (v33)
      {
        uint64_t v34 = v15 + 96;
        unint64_t v12 = (void *)*(unsigned int *)(v15 + 128);
        if (v12)
        {
          uint64_t v35 = 0;
          uint64_t v36 = *(int **)(v15 + 112);
          while (1)
          {
            int v37 = *v36;
            v36 += 4;
            if (v37 < 0) {
              break;
            }
            if (v12 == (void *)++v35)
            {
              LODWORD(v35) = *(_DWORD *)(v15 + 128);
              break;
            }
          }
          LODWORD(v18) = v35;
        }
        else
        {
          LODWORD(v18) = 0;
        }
        uint64_t v38 = v15 + 96;
      }
      else
      {
        uint64_t v34 = v15 + 32;
        uint64_t v38 = v15 + 32 + 8 * *(void *)(v15 + 16);
      }
      uint64_t v39 = a1;
      int v40 = (void *)(a1 + 56);
      BOOL v41 = v34 != v38;
      if (v33) {
        BOOL v41 = v12 != v18;
      }
      if (v41)
      {
        do
        {
          unint64_t v707 = 0;
          float32x4_t v42 = (unint64_t *)v34;
          if (v33) {
            float32x4_t v42 = (unint64_t *)(*(void *)(v34 + 16) + 16 * v18 + 8);
          }
          unint64_t v43 = *v42;
          unint64_t v707 = v43;
          if (!*v40
            || (unint64_t v44 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27)),
                uint64_t v45 = *(unsigned int *)(*(void *)(v39 + 64) + 4 * ((v44 ^ (v44 >> 31)) % *(unsigned int *)(v39 + 80))),
                v45 == 0x7FFFFFFF))
          {
LABEL_60:
            re::DynamicOverflowArray<unsigned long long,5ul>::add((_anonymous_namespace_ *)&v715, &v707);
            uint64_t v39 = a1;
          }
          else
          {
            uint64_t v46 = *(void *)(v39 + 72);
            while (*(void *)(v46 + 184 * v45 + 16) != v43)
            {
              LODWORD(v45) = *(_DWORD *)(v46 + 184 * v45 + 8) & 0x7FFFFFFF;
              if (v45 == 0x7FFFFFFF) {
                goto LABEL_60;
              }
            }
          }
          if (v33)
          {
            unsigned int v47 = v18 + 1;
            uint64_t v48 = 16 * (v18 + 1);
            do
            {
              LODWORD(v18) = v47;
              if (v47 >= *(_DWORD *)(v34 + 32)) {
                break;
              }
              int v49 = *(_DWORD *)(*(void *)(v34 + 16) + v48);
              ++v47;
              v48 += 16;
            }
            while ((v49 & 0x80000000) == 0);
          }
          else
          {
            v34 += 8;
          }
          BOOL v50 = v34 != v38;
          if (v33) {
            BOOL v50 = v12 != v18;
          }
        }
        while (v50);
      }
      int32x4_t v51 = (uint64_t *)&v716 + 1;
      if (v730[0]) {
        float32x2_t v52 = (uint64_t *)v730 + 1;
      }
      else {
        float32x2_t v52 = *(uint64_t **)&v730[1];
      }
      if (*(void *)&out[8])
      {
        float32x2_t v53 = &v52[*(void *)&out[8]];
        do
        {
          if (*v40)
          {
            uint64_t v54 = *v52;
            unint64_t v55 = 0xBF58476D1CE4E5B9 * (*v52 ^ ((unint64_t)*v52 >> 30));
            unint64_t v56 = ((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) ^ ((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) >> 31))
                % *(unsigned int *)(v39 + 80);
            uint64_t v57 = *(void *)(v39 + 64);
            uint64_t v58 = *(unsigned int *)(v57 + 4 * v56);
            if (v58 != 0x7FFFFFFF)
            {
              uint64_t v59 = *(void *)(v39 + 72);
              if (*(void *)(v59 + 184 * v58 + 16) == v54)
              {
                *(_DWORD *)(v57 + 4 * v56) = *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
LABEL_82:
                re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(void *)(v39 + 72) + 184 * v58);
                uint64_t v39 = a1;
                uint64_t v61 = *(void *)(a1 + 72) + 184 * v58;
                *(_DWORD *)(v61 + 8) = *(_DWORD *)(v61 + 8) & 0x80000000 | *(_DWORD *)(a1 + 92);
                --*(_DWORD *)(a1 + 84);
                int v62 = *(_DWORD *)(a1 + 96) + 1;
                *(_DWORD *)(a1 + 92) = v58;
                *(_DWORD *)(a1 + 96) = v62;
              }
              else
              {
                while (1)
                {
                  uint64_t v60 = v58;
                  uint64_t v58 = *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
                  if (v58 == 0x7FFFFFFF) {
                    break;
                  }
                  if (*(void *)(v59 + 184 * v58 + 16) == v54)
                  {
                    *(_DWORD *)(v59 + 184 * v60 + 8) = *(_DWORD *)(v59 + 184 * v60 + 8) & 0x80000000 | *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
                    goto LABEL_82;
                  }
                }
              }
            }
          }
          ++v52;
        }
        while (v52 != v53);
      }
      if ((v716 & 1) == 0) {
        int32x4_t v51 = (uint64_t *)v717;
      }
      if (*((void *)&v715 + 1))
      {
        uint64_t v63 = 8 * *((void *)&v715 + 1);
        do
        {
          uint64_t v64 = *v51++;
          unint64_t v707 = v64;
          re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>((uint64_t)v40, (uint64_t *)&v707, a1);
          uint64_t v39 = a1;
          v63 -= 8;
        }
        while (v63);
      }
      uint64_t v11 = v675;
      if ((void)v715 && (v716 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v715 + 40))();
        uint64_t v39 = a1;
      }
      if (*(void *)out && (v730[0] & 1) == 0)
      {
        (*(void (**)(void))(**(void **)out + 40))();
        uint64_t v39 = a1;
      }
      uint64_t v65 = *(void *)(v39 + 520);
      unint64_t v707 = v39;
      uint64_t v708 = v39 + 104;
      v666 = (re::ecs2::SortingTransformCache *)(v39 + 440);
      uint64_t v709 = v39 + 440;
      int v713 = 0;
      if (v65)
      {
        uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 24))(v65);
        uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 16))(v66);
        int v68 = *(_DWORD *)(v67 + 124);
        if (!v68) {
          int v68 = *(_DWORD *)(v67 + 16);
        }
        signed int v21 = v68 + 1;
      }
      else
      {
        signed int v21 = 1;
      }
      uint64_t v10 = a1;
    }
    else
    {
      unint64_t v707 = a1;
      uint64_t v708 = a1 + 104;
      v666 = (re::ecs2::SortingTransformCache *)(a1 + 440);
      uint64_t v709 = a1 + 440;
      int v713 = 0;
      signed int v21 = 1;
    }
    *(_OWORD *)uuid_t out = 0u;
    memset(v730, 0, 20);
    *(void *)((char *)&v730[1] + 4) = 0x7FFFFFFFLL;
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)out, v11, v21);
    long long v710 = *(_OWORD *)out;
    memset(out, 0, sizeof(out));
    long long v711 = v730[0];
    *(void *)&v730[0] = 0;
    uint64_t v712 = *(void *)&v730[1];
    *(_OWORD *)((char *)v730 + 8) = xmmword_23436F740;
    re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)out);
    uint64_t v69 = *(unsigned int *)(v10 + 184);
    uint64_t v70 = v10;
    uint64_t v71 = 0;
    if (v69)
    {
      uint64_t v72 = (int *)(*(void *)(v10 + 168) + 8);
      while (1)
      {
        int v73 = *v72;
        v72 += 6;
        if (v73 < 0) {
          break;
        }
        if (v69 == ++v71)
        {
          LODWORD(v71) = *(_DWORD *)(v10 + 184);
          break;
        }
      }
    }
    if (v69 != v71)
    {
      uint64_t v74 = v71;
      uint64_t v75 = v10 + 392;
      do
      {
        *(void *)uuid_t out = 0;
        *(void *)uuid_t out = *(void *)(*(void *)(v70 + 168) + 24 * v74 + 16);
        uint64_t v76 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)out + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v76 && *(unsigned char *)(v76 + 95)) {
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v75, (uint64_t *)out);
        }
        uint64_t v70 = a1;
        if (*(_DWORD *)(a1 + 184) <= (v71 + 1)) {
          int v77 = v71 + 1;
        }
        else {
          int v77 = *(_DWORD *)(a1 + 184);
        }
        while (1)
        {
          uint64_t v74 = (v71 + 1);
          if (v77 - 1 == v71) {
            break;
          }
          LODWORD(v71) = v71 + 1;
          int v78 = v74;
          if ((*(_DWORD *)(*(void *)(a1 + 168) + 24 * v74 + 8) & 0x80000000) != 0) {
            goto LABEL_118;
          }
        }
        int v78 = v77;
LABEL_118:
        LODWORD(v71) = v78;
      }
      while (v69 != v78);
    }
    uint64_t v79 = v70 + 152;
    unint64_t v80 = *(unsigned int *)(v70 + 420);
    *(void *)&long long v717 = 0;
    *(void *)&long long v716 = 0;
    DWORD2(v716) = 0;
    long long v715 = (unint64_t)v675;
    re::DynamicArray<float *>::setCapacity(&v715, v80);
    uint64_t v81 = a1;
    ++DWORD2(v716);
    uint64_t v82 = *(unsigned int *)(a1 + 424);
    if (v82)
    {
      uint64_t v83 = 0;
      uint64_t v84 = (int *)(*(void *)(a1 + 408) + 8);
      while (1)
      {
        int v85 = *v84;
        v84 += 6;
        if (v85 < 0) {
          break;
        }
        if (v82 == ++v83)
        {
          LODWORD(v83) = *(_DWORD *)(a1 + 424);
          break;
        }
      }
    }
    else
    {
      LODWORD(v83) = 0;
    }
    if (v82 != v83)
    {
      uint64_t v86 = v83;
      while (1)
      {
        *(void *)&unsigned long long v722 = 0;
        *(void *)&unsigned long long v722 = *(void *)(*(void *)(v81 + 408) + 24 * v86 + 16);
        uint64_t v87 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v722 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!v87) {
          goto LABEL_131;
        }
        uint64_t v88 = *(void *)(v722 + 176);
        if (v88)
        {
          uint64_t v89 = v87;
          uint64_t v90 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v88 + 32));
          if (v90) {
            break;
          }
        }
LABEL_132:
        uint64_t v81 = a1;
        if (*(_DWORD *)(a1 + 424) <= (v83 + 1)) {
          int v92 = v83 + 1;
        }
        else {
          int v92 = *(_DWORD *)(a1 + 424);
        }
        while (1)
        {
          uint64_t v86 = (v83 + 1);
          if (v92 - 1 == v83) {
            break;
          }
          LODWORD(v83) = v83 + 1;
          int v93 = v86;
          if ((*(_DWORD *)(*(void *)(a1 + 408) + 24 * v86 + 8) & 0x80000000) != 0) {
            goto LABEL_139;
          }
        }
        int v93 = v92;
LABEL_139:
        LODWORD(v83) = v93;
        if (v82 == v93) {
          goto LABEL_140;
        }
      }
      *(_OWORD *)uuid_t out = xmmword_23435FD50;
      v730[0] = xmmword_23435FD60;
      v730[1] = xmmword_23435FD80;
      long long v731 = xmmword_23435FBB0;
      re::MeshAsset::aabbFromMesh(v90, (float32x4_t *)out, (uint64_t)&v726);
      long long v91 = v727;
      *(_OWORD *)(v89 + 48) = v726;
      *(_OWORD *)(v89 + 64) = v91;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v79, (uint64_t *)&v722);
LABEL_131:
      re::DynamicArray<re::TransitionCondition *>::add(&v715, &v722);
      goto LABEL_132;
    }
LABEL_140:
    if ((void)v716)
    {
      BOOL v94 = (uint64_t *)v717;
      uint64_t v95 = 8 * v716;
      do
      {
        uint64_t v96 = *v94++;
        *(void *)uuid_t out = v96;
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 392, (uint64_t *)out);
        v95 -= 8;
      }
      while (v95);
    }
    uint64_t v97 = (re *)v715;
    if ((void)v715 && (void)v717) {
      uint64_t v97 = (re *)(*(uint64_t (**)(void))(*(void *)v715 + 40))();
    }
    uint64_t v98 = a1;
    uint64_t v99 = *(unsigned int *)(a1 + 184);
    if (v99)
    {
      uint64_t v100 = 0;
      uint64_t v101 = (int *)(*(void *)(a1 + 168) + 8);
      while (1)
      {
        int v102 = *v101;
        v101 += 6;
        if (v102 < 0) {
          break;
        }
        if (v99 == ++v100)
        {
          LODWORD(v100) = *(_DWORD *)(a1 + 184);
          break;
        }
      }
    }
    else
    {
      LODWORD(v100) = 0;
    }
    if (v99 != v100)
    {
      uint64_t v103 = v100;
      do
      {
        re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable((uint64_t *)&v707, *(void *)(*(void *)(v98 + 168) + 24 * v103 + 16), (uint64_t)&v714);
        uint64_t v98 = a1;
        if (*(_DWORD *)(a1 + 184) <= (v100 + 1)) {
          int v104 = v100 + 1;
        }
        else {
          int v104 = *(_DWORD *)(a1 + 184);
        }
        int v105 = v100;
        while (1)
        {
          uint64_t v103 = (v105 + 1);
          if (v104 - 1 == v105) {
            break;
          }
          ++v105;
          LODWORD(v100) = v103;
          if ((*(_DWORD *)(*(void *)(a1 + 168) + 24 * v103 + 8) & 0x80000000) != 0) {
            goto LABEL_162;
          }
        }
        LODWORD(v100) = v104;
LABEL_162:
        ;
      }
      while (v99 != v100);
    }
    if (*(_DWORD *)(v98 + 276) || *(_DWORD *)(v98 + 324))
    {
      *(_OWORD *)uuid_t out = 0u;
      memset(v730, 0, 20);
      *(void *)((char *)&v730[1] + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)out, v675, 128);
      uint64_t v106 = a1;
      uint64_t v107 = *(unsigned int *)(a1 + 328);
      if (v107)
      {
        uint64_t v108 = 0;
        unint64_t v109 = (int *)(*(void *)(a1 + 312) + 8);
        while (1)
        {
          int v110 = *v109;
          v109 += 6;
          if (v110 < 0) {
            break;
          }
          if (v107 == ++v108)
          {
            LODWORD(v108) = *(_DWORD *)(a1 + 328);
            break;
          }
        }
      }
      else
      {
        LODWORD(v108) = 0;
      }
      if (v107 != v108)
      {
        uint64_t v111 = v108;
        do
        {
          re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(*(void *)(*(void *)(v106 + 312) + 24 * v111 + 16), v675, (uint64_t)out, (uint64_t *)&v707, (uint64_t)&v714);
          uint64_t v106 = a1;
          if (*(_DWORD *)(a1 + 328) <= (v108 + 1)) {
            int v112 = v108 + 1;
          }
          else {
            int v112 = *(_DWORD *)(a1 + 328);
          }
          int v113 = v108;
          while (1)
          {
            uint64_t v111 = (v113 + 1);
            if (v112 - 1 == v113) {
              break;
            }
            ++v113;
            LODWORD(v108) = v111;
            if ((*(_DWORD *)(*(void *)(a1 + 312) + 24 * v111 + 8) & 0x80000000) != 0) {
              goto LABEL_181;
            }
          }
          LODWORD(v108) = v112;
LABEL_181:
          ;
        }
        while (v107 != v108);
      }
      uint64_t v114 = v106 + 248;
      uint64_t v115 = v106 + 296;
      re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = HIDWORD(v730[0]);
      re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = *(_DWORD *)(v106 + 324);
      uint64_t v116 = *(unsigned int *)(v106 + 280);
      if (v116)
      {
        uint64_t v117 = 0;
        int v118 = (int *)(*(void *)(v106 + 264) + 8);
        while (1)
        {
          int v119 = *v118;
          v118 += 6;
          if (v119 < 0) {
            break;
          }
          if (v116 == ++v117)
          {
            LODWORD(v117) = *(_DWORD *)(v106 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v117) = 0;
      }
      if (v116 != v117)
      {
        uint64_t v120 = v117;
        do
        {
          re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(*(void *)(*(void *)(v106 + 264) + 24 * v120 + 16), v675, (uint64_t)out, (uint64_t *)&v707, (uint64_t)&v714);
          uint64_t v106 = a1;
          if (*(_DWORD *)(a1 + 280) <= (v117 + 1)) {
            int v121 = v117 + 1;
          }
          else {
            int v121 = *(_DWORD *)(a1 + 280);
          }
          int v122 = v117;
          while (1)
          {
            uint64_t v120 = (v122 + 1);
            if (v121 - 1 == v122) {
              break;
            }
            ++v122;
            LODWORD(v117) = v120;
            if ((*(_DWORD *)(*(void *)(a1 + 264) + 24 * v120 + 8) & 0x80000000) != 0) {
              goto LABEL_198;
            }
          }
          LODWORD(v117) = v121;
LABEL_198:
          ;
        }
        while (v116 != v117);
      }
      re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = *(_DWORD *)(v106 + 276);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v114);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v115);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)out);
      uint64_t v98 = a1;
    }
    uint64_t v663 = v79;
    if (*(_DWORD *)(v98 + 372))
    {
      uint64_t v699 = v98 + 344;
      LODWORD(v717) = 0;
      long long v715 = 0u;
      long long v716 = 0u;
      *(void *)((char *)&v717 + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v715, v675, 128);
      uint64_t v123 = a1;
      uint64_t v124 = *(unsigned int *)(a1 + 376);
      if (v124)
      {
        uint64_t v125 = 0;
        v126 = (int *)(*(void *)(a1 + 360) + 8);
        while (1)
        {
          int v127 = *v126;
          v126 += 6;
          if (v127 < 0) {
            break;
          }
          if (v124 == ++v125)
          {
            LODWORD(v125) = *(_DWORD *)(a1 + 376);
            break;
          }
        }
      }
      else
      {
        LODWORD(v125) = 0;
      }
      if (v124 != v125)
      {
        uint64_t v128 = v125;
        do
        {
          *(void *)&unsigned long long v722 = *(void *)(*(void *)(v123 + 360) + 24 * v128 + 16);
          if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)&v715, (uint64_t *)&v722)&& (*(unsigned char *)(v722 + 288) & 1) != 0)
          {
            (*(void (**)(unsigned __int8 *__return_ptr, uint64_t))(*(void *)v3 + 8))(out, v3);
            if (out[0]) {
              uint64_t v129 = *(void *)&out[8];
            }
            else {
              uint64_t v129 = 0;
            }
            LODWORD(v730[0]) = 1;
            *((void *)&v730[0] + 1) = 0;
            *(void *)&v730[1] = 0;
            *(void *)&out[8] = 0;
            *(void *)uuid_t out = v675;
            re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(out, 0);
            LODWORD(v730[0]) += 2;
            re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)out, &v722);
            uint64_t v130 = *(void *)&out[8];
            while (v130)
            {
              v703.f64[0] = 0.0;
              id v131 = *(char **)&v730[1];
              if (v730[0]) {
                id v131 = (char *)v730 + 8;
              }
              --v130;
              v703.f64[0] = *(float64_t *)&v131[8 * v130];
              *(void *)&out[8] = v130;
              LODWORD(v730[0]) += 2;
              re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v715, (uint64_t *)&v703);
              uint64_t v132 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)&v703.f64[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!v132 || *(_DWORD *)(v132 + 80) != 3) {
                re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable((uint64_t *)&v707, *(unint64_t *)&v703.f64[0], (uint64_t)&v714);
              }
              uint64_t v133 = *(void *)(*(void *)&v703.f64[0] + 328);
              if (v133)
              {
                id v134 = *(void **)(*(void *)&v703.f64[0] + 344);
                uint64_t v135 = 8 * v133;
                do
                {
                  *(void *)v734 = 0;
                  *(void *)v734 = *v134;
                  if ((*(unsigned char *)(*(void *)v734 + 288) & 1) != 0
                    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)&v715, (uint64_t *)v734))
                  {
                    (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)v3 + 8))(&v726, v3, *(void *)v734);
                    uint64_t v136 = (_BYTE)v726 ? *((void *)&v726 + 1) : 0;
                    if (v136 == v129)
                    {
                      uint64_t v137 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)v734 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                      if (!v137 || *(_DWORD *)(v137 + 80) != 3) {
                        re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)out, v734);
                      }
                    }
                  }
                  ++v134;
                  v135 -= 8;
                }
                while (v135);
                uint64_t v130 = *(void *)&out[8];
              }
            }
            if (*(void *)out && (v730[0] & 1) == 0) {
              (*(void (**)(void))(**(void **)out + 40))();
            }
          }
          uint64_t v123 = a1;
          if (*(_DWORD *)(a1 + 376) <= (v125 + 1)) {
            int v138 = v125 + 1;
          }
          else {
            int v138 = *(_DWORD *)(a1 + 376);
          }
          while (1)
          {
            uint64_t v128 = (v125 + 1);
            if (v138 - 1 == v125) {
              break;
            }
            LODWORD(v125) = v125 + 1;
            int v139 = v128;
            if ((*(_DWORD *)(*(void *)(a1 + 360) + 24 * v128 + 8) & 0x80000000) != 0) {
              goto LABEL_244;
            }
          }
          int v139 = v138;
LABEL_244:
          LODWORD(v125) = v139;
        }
        while (v124 != v139);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v699);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v715);
      uint64_t v98 = a1;
    }
    uint64_t v140 = *(unsigned int *)(v98 + 88);
    if (v140)
    {
      uint64_t v141 = 0;
      id v142 = (int *)(*(void *)(v98 + 72) + 8);
      while (1)
      {
        int v143 = *v142;
        v142 += 46;
        if (v143 < 0) {
          break;
        }
        if (v140 == ++v141)
        {
          LODWORD(v141) = *(_DWORD *)(v98 + 88);
          break;
        }
      }
    }
    else
    {
      LODWORD(v141) = 0;
    }
    if (v140 == v141)
    {
LABEL_253:
      if (*(void *)(v98 + 504))
      {
        uint64_t v144 = *(void *)(*(void *)(v98 + 512) + 104);
        uint64_t v145 = v663;
        if (v144)
        {
          unint64_t v146 = *(void *)(v144 + 304);
          if (v146)
          {
            uint64_t v147 = (uint64_t)&unk_26879F000;
            if (re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken != -1) {
              goto LABEL_961;
            }
            while (re::gEnableDrawLayerSortingGroups)
            {
              uint64_t v148 = *(void *)(a1 + 536);
              if (!v148) {
                goto LABEL_797;
              }
              unsigned int v149 = atomic_load((unsigned int *)(v148 + 704));
              if (v149 != 2)
              {
                if (!*(void *)(a1 + 536))
                {
LABEL_797:
                  (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(a1 + 504) + 8))(out);
                  long long v462 = *(_OWORD *)(a1 + 528);
                  *(_OWORD *)(a1 + 528) = *(_OWORD *)out;
                  *(_OWORD *)uuid_t out = v462;
                  uint64_t v463 = *(void *)(a1 + 544);
                  *(void *)(a1 + 544) = *(void *)&v730[0];
                  *(void *)&v730[0] = v463;
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)out);
                }
                re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 528));
                goto LABEL_803;
              }
              re::makeFontID((re *)(a1 + 528), (re::StringID *)&v722);
              if (*(void *)(v147 + 1824) != -1) {
                dispatch_once(&re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken, &__block_literal_global_12);
              }
              uint64_t v150 = a1;
              if (!re::gEnableDrawLayerSortingGroups) {
                goto LABEL_802;
              }
              uint64_t v151 = *(unsigned int *)(a1 + 88);
              if (v151)
              {
                uint64_t v152 = 0;
                unint64_t v153 = (int *)(*(void *)(a1 + 72) + 8);
                while (1)
                {
                  int v154 = *v153;
                  v153 += 46;
                  if (v154 < 0) {
                    break;
                  }
                  if (v151 == ++v152)
                  {
                    LODWORD(v152) = *(_DWORD *)(a1 + 88);
                    break;
                  }
                }
              }
              else
              {
LABEL_800:
                LODWORD(v152) = 0;
              }
              if (v151 == v152)
              {
LABEL_802:
                re::StringID::destroyString((re::StringID *)&v722);
                uint64_t v145 = v663;
                goto LABEL_803;
              }
              uint64_t v464 = v152;
              long long v465 = xmmword_23435FD50;
              long long v466 = xmmword_23435FD80;
              uint64_t v147 = 24;
              *((void *)&v467 + 1) = 0x3F80000000000000;
              *(void *)&long long v467 = COERCE_UNSIGNED_INT(1.0);
              long long v658 = v467;
              LODWORD(v467) = 0;
              DWORD1(v467) = 1.0;
              long long v657 = v467;
              v672 = (os_unfair_lock_s *)v146;
              int v655 = v151;
              while (1)
              {
                uint64_t v468 = *(void *)(v150 + 72) + 184 * v464;
                uint64_t v469 = v468 + 24;
                uint64_t v695 = *(unsigned int *)(v468 + 56);
                uint64_t v470 = 0;
                if (v695)
                {
                  v471 = (int *)(*(void *)(v468 + 40) + 8);
                  while (1)
                  {
                    int v472 = *v471;
                    v471 += 6;
                    if (v472 < 0) {
                      break;
                    }
                    if (v695 == ++v470)
                    {
                      LODWORD(v470) = v695;
                      break;
                    }
                  }
                }
                int v656 = v152;
                unsigned int v473 = v695;
                uint64_t v662 = v469;
                if (v695 != v470)
                {
                  uint64_t v474 = v470;
                  do
                  {
                    uint64_t v475 = *(void *)(v469 + 16) + 24 * v474;
                    v477 = *(float **)(v475 + 16);
                    v476 = (float32x4_t **)(v475 + 16);
                    float v478 = (float)((float)((float)((float)(v477[32] + v477[33]) + v477[34]) + v477[28]) + v477[29])
                         + v477[30];
                    *(float *)&long long v481 = fmodf(fminf(v478 - floorf(v478), 1.0), 1.0) / 0.16667;
                    int v479 = (int)*(float *)&v481;
                    *(float *)&long long v480 = *(float *)&v481 - (float)(int)*(float *)&v481;
                    *(float *)&long long v481 = 1.0 - *(float *)&v480;
                    *(float *)&long long v482 = 1.0 - (float)(1.0 - *(float *)&v480);
                    switch(v479)
                    {
                      case 0:
                        *(void *)&long long v480 = __PAIR64__(v482, 1.0);
                        DWORD2(v480) = 0;
                        long long v715 = v480;
                        float v483 = (float)(*(float *)&v481 * -0.5) + 1.0;
                        LODWORD(v481) = 0.5;
                        float v484 = v483 * 0.5;
                        goto LABEL_817;
                      case 1:
                        DWORD1(v481) = 1.0;
                        DWORD2(v481) = 0;
                        long long v715 = v481;
                        float v484 = 0.5;
                        *(float *)&long long v481 = (float)((float)(*(float *)&v480 * -0.5) + 1.0) * 0.5;
LABEL_817:
                        float v486 = 0.25;
                        goto LABEL_823;
                      case 2:
                        long long v487 = v657;
                        DWORD2(v487) = v482;
                        long long v715 = v487;
                        float v484 = 0.5;
                        float v486 = (float)((float)(*(float *)&v481 * -0.5) + 1.0) * 0.5;
                        goto LABEL_820;
                      case 3:
                        LODWORD(v482) = 0;
                        *((float *)&v482 + 1) = 1.0 - *(float *)&v480;
                        DWORD2(v482) = 1.0;
                        long long v715 = v482;
                        float v488 = (float)(*(float *)&v480 * -0.5) + 1.0;
                        float v486 = 0.5;
                        float v484 = v488 * 0.5;
LABEL_820:
                        LODWORD(v481) = 0.25;
                        goto LABEL_823;
                      case 4:
                        DWORD1(v482) = 0;
                        DWORD2(v482) = 1.0;
                        long long v715 = v482;
                        float v486 = 0.5;
                        *(float *)&long long v481 = (float)((float)(*(float *)&v481 * -0.5) + 1.0) * 0.5;
                        goto LABEL_822;
                      default:
                        long long v485 = v658;
                        *((float *)&v485 + 2) = 1.0 - *(float *)&v480;
                        long long v715 = v485;
                        LODWORD(v481) = 0.5;
                        float v486 = (float)((float)(*(float *)&v480 * -0.5) + 1.0) * 0.5;
LABEL_822:
                        float v484 = 0.25;
LABEL_823:
                        *((float *)&v481 + 1) = v484;
                        *((float *)&v481 + 2) = v486;
                        long long v726 = v481;
                        v700 = v476;
                        v489 = *v476;
                        uint64_t v490 = (*v476)[3].u32[2];
                        if (v490)
                        {
                          uint64_t v491 = 0;
                          v492 = (int *)(v489[2].i64[1] + 8);
                          do
                          {
                            int v493 = *v492;
                            v492 += 6;
                            if (v493 < 0) {
                              goto LABEL_829;
                            }
                            ++v491;
                          }
                          while (v490 != v491);
                          LODWORD(v491) = v490;
                        }
                        else
                        {
                          LODWORD(v491) = 0;
                        }
LABEL_829:
                        if (v490 == v491)
                        {
                          v494 = v700;
                          goto LABEL_847;
                        }
                        uint64_t v495 = v491;
                        break;
                    }
                    do
                    {
                      v496 = *(re::ecs2::TransformComponent ***)(v489[2].i64[1] + 24 * v495 + 16);
                      uint64_t v497 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v496 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                      if (v497)
                      {
                        uint64_t v498 = v497;
                        re::ecs2::TransformComponent::worldMatrix4x4F(v496, (const re::ecs2::Entity *)1, out);
                        *(_OWORD *)uuid_t out = v731;
                        re::DebugRenderer::drawLine(v672, (long long *)out, (long long *)(v498 + 304), &v726, 1);
                        uint64_t v499 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v496 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                        if (v499)
                        {
                          uint32x4_t v500 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v499 + 48), *(float32x4_t *)(v499 + 64));
                          v500.i32[3] = v500.i32[2];
                          if ((vmaxvq_u32(v500) & 0x80000000) != 0)
                          {
                            float32x4_t v502 = *(float32x4_t *)(v499 + 32);
                            v503.i64[0] = 0xBF000000BF000000;
                            v503.i64[1] = 0xBF000000BF000000;
                            v504.i64[0] = 0x3F0000003F000000;
                            v504.i64[1] = 0x3F0000003F000000;
                            v730[0] = vmulq_f32(v502, v503);
                            v730[1] = vmulq_f32(v502, v504);
                          }
                          else
                          {
                            long long v501 = *(_OWORD *)(v499 + 64);
                            v730[0] = *(_OWORD *)(v499 + 48);
                            v730[1] = v501;
                          }
                          out[0] = 1;
                          v505 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(v666, (const re::ecs2::Entity *)v496);
                          re::DebugRenderer::drawBox(v672, v505, (float *)v730, &v726, 1);
                        }
                      }
                      if (v489[3].i32[2] <= (v491 + 1)) {
                        __int32 v506 = v491 + 1;
                      }
                      else {
                        __int32 v506 = v489[3].i32[2];
                      }
                      while (1)
                      {
                        uint64_t v495 = (v491 + 1);
                        if (v506 - 1 == v491) {
                          break;
                        }
                        LODWORD(v491) = v491 + 1;
                        __int32 v507 = v495;
                        if ((*(_DWORD *)(v489[2].i64[1] + 24 * v495 + 8) & 0x80000000) != 0) {
                          goto LABEL_845;
                        }
                      }
                      __int32 v507 = v506;
LABEL_845:
                      LODWORD(v491) = v507;
                    }
                    while (v490 != v507);
                    v494 = v700;
                    v489 = *v700;
LABEL_847:
                    float32x4_t v508 = v489[8];
                    float32x4_t v509 = vsubq_f32(v508, v489[7]);
                    int32x4_t v510 = (int32x4_t)vmulq_f32(v509, v509);
                    v510.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v510, 2), vadd_f32(*(float32x2_t *)v510.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v510.i8, 1))).u32[0];
                    float32x2_t v511 = vrsqrte_f32((float32x2_t)v510.u32[0]);
                    float32x2_t v512 = vmul_f32(v511, vrsqrts_f32((float32x2_t)v510.u32[0], vmul_f32(v511, v511)));
                    float32x4_t v513 = vmulq_n_f32(v509, vmul_f32(v512, vrsqrts_f32((float32x2_t)v510.u32[0], vmul_f32(v512, v512))).f32[0]);
                    float32x4_t v514 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v513, (int32x4_t)v513), (int8x16_t)v513, 0xCuLL);
                    float32x4_t v515 = vmlaq_f32(vmulq_f32(v514, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD80, v513);
                    float32x4_t v516 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v515, (int32x4_t)v515), (int8x16_t)v515, 0xCuLL);
                    int32x4_t v517 = (int32x4_t)vmulq_f32(v515, v515);
                    v517.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v517.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v517, 2), *(float32x2_t *)v517.i8)).u32[0];
                    float32x2_t v518 = vrsqrte_f32((float32x2_t)v517.u32[0]);
                    float32x2_t v519 = vmul_f32(v518, vrsqrts_f32((float32x2_t)v517.u32[0], vmul_f32(v518, v518)));
                    float32x4_t v520 = vmulq_n_f32(v516, vmul_f32(v519, vrsqrts_f32((float32x2_t)v517.u32[0], vmul_f32(v519, v519))).f32[0]);
                    float v521 = v520.f32[1];
                    float32x4_t v522 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v520, (int32x4_t)v520), (int8x16_t)v520, 0xCuLL), vnegq_f32(v513)), v520, v514);
                    float v523 = v513.f32[2] + vaddq_f32(v520, v522).f32[0];
                    if (v523 >= 0.0)
                    {
                      float v524 = 1.0;
                      v522.f32[0] = sqrtf(v523 + 1.0);
                      v520.f32[0] = v522.f32[0] + v522.f32[0];
                      float32x2_t v528 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v522.f32[0] + v522.f32[0]));
                      float32x2_t v529 = vmul_f32(v528, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v522.f32[0] + v522.f32[0]), v528));
                      float v530 = vmul_f32(v529, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v522.f32[0] + v522.f32[0]), v529)).f32[0];
                      v522.f32[0] = (float)(v522.f32[1] - v513.f32[1]) * v530;
                      float v525 = (float)(v513.f32[0] - v520.f32[2]) * v530;
                      float v526 = (float)(v520.f32[1] - v522.f32[2]) * v530;
                      float v527 = v520.f32[0] * 0.25;
                      uint64_t v469 = v662;
                    }
                    else
                    {
                      uint64_t v469 = v662;
                      if (v520.f32[0] < v513.f32[2]
                        || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v520, v522))).u8[0] & 1) != 0)
                      {
                        float v524 = 1.0;
                        v520.f32[0] = 1.0 - v520.f32[0];
                        BOOL v531 = v522.f32[0] < v513.f32[2];
                        BOOL v532 = v522.f32[0] < v513.f32[2];
                        float v533 = sqrtf(v513.f32[2] + (float)(v520.f32[0] - v522.f32[0]));
                        *(float *)&unsigned int v534 = v533 + v533;
                        float32x2_t v535 = vrecpe_f32((float32x2_t)v534);
                        float32x2_t v536 = vmul_f32(v535, vrecps_f32((float32x2_t)v534, v535));
                        float v537 = vmul_f32(v536, vrecps_f32((float32x2_t)v534, v536)).f32[0];
                        float v538 = (float)(v513.f32[0] + v520.f32[2]) * v537;
                        float v539 = (float)(v513.f32[1] + v522.f32[1]) * v537;
                        float v540 = *(float *)&v534 * 0.25;
                        float v541 = (float)(v520.f32[1] - v522.f32[2]) * v537;
                        v522.f32[0] = sqrtf((float)(v520.f32[0] - v513.f32[2]) + v522.f32[0]);
                        v522.f32[0] = v522.f32[0] + v522.f32[0];
                        *(float32x2_t *)v520.f32 = vrecpe_f32((float32x2_t)v522.u32[0]);
                        *(float32x2_t *)v520.f32 = vmul_f32(*(float32x2_t *)v520.f32, vrecps_f32((float32x2_t)v522.u32[0], *(float32x2_t *)v520.f32));
                        float v542 = vmul_f32(*(float32x2_t *)v520.f32, vrecps_f32((float32x2_t)v522.u32[0], *(float32x2_t *)v520.f32)).f32[0];
                        float v543 = (float)(v521 + v522.f32[2]) * v542;
                        float v544 = v522.f32[0] * 0.25;
                        float v545 = (float)(v513.f32[1] + v522.f32[1]) * v542;
                        float v527 = (float)(v513.f32[0] - v520.f32[2]) * v542;
                        if (v531) {
                          v522.f32[0] = v538;
                        }
                        else {
                          v522.f32[0] = v543;
                        }
                        if (v532) {
                          float v525 = v539;
                        }
                        else {
                          float v525 = v544;
                        }
                        if (v532) {
                          float v526 = v540;
                        }
                        else {
                          float v526 = v545;
                        }
                        if (v532) {
                          float v527 = v541;
                        }
                      }
                      else
                      {
                        float v524 = 1.0;
                        v522.f32[0] = sqrtf(v520.f32[0] + (float)((float)(1.0 - v522.f32[0]) - v513.f32[2]));
                        v522.f32[0] = v522.f32[0] + v522.f32[0];
                        *(float32x2_t *)v520.f32 = vrecpe_f32((float32x2_t)v522.u32[0]);
                        *(float32x2_t *)v520.f32 = vmul_f32(*(float32x2_t *)v520.f32, vrecps_f32((float32x2_t)v522.u32[0], *(float32x2_t *)v520.f32));
                        v520.f32[0] = vmul_f32(*(float32x2_t *)v520.f32, vrecps_f32((float32x2_t)v522.u32[0], *(float32x2_t *)v520.f32)).f32[0];
                        v522.f32[0] = v522.f32[0] * 0.25;
                        float v525 = (float)(v521 + v522.f32[2]) * v520.f32[0];
                        float v526 = (float)(v513.f32[0] + v520.f32[2]) * v520.f32[0];
                        float v527 = (float)(v522.f32[1] - v513.f32[1]) * v520.f32[0];
                      }
                    }
                    float v546 = v522.f32[0] + v522.f32[0];
                    float v547 = v525 + v525;
                    float v548 = v526 + v526;
                    float v549 = v522.f32[0] * (float)(v522.f32[0] + v522.f32[0]);
                    float v550 = v525 * (float)(v525 + v525);
                    float v551 = v526 * (float)(v526 + v526);
                    float v552 = v546 * v525;
                    float v553 = v546 * v526;
                    float v554 = v547 * v526;
                    float v555 = v547 * v527;
                    float v556 = v548 * v527;
                    HIDWORD(v557) = 0;
                    *(float *)&long long v557 = v524 - (float)(v550 + v551);
                    *((float *)&v557 + 1) = v552 + v556;
                    *((float *)&v557 + 2) = v553 - v555;
                    float v558 = v546 * v527;
                    HIDWORD(v559) = 0;
                    *(void *)&long long v559 = __PAIR64__(v524 - (float)(v549 + v551), v552 - v556);
                    *((float *)&v559 + 2) = v554 + v558;
                    HIDWORD(v560) = 0;
                    *(float *)&long long v560 = v553 + v555;
                    *((float *)&v560 + 1) = v554 - v558;
                    *((float *)&v560 + 2) = v524 - (float)(v549 + v550);
                    *(_OWORD *)uuid_t out = v557;
                    v730[0] = v559;
                    v508.f32[3] = v524;
                    v730[1] = v560;
                    long long v731 = (__int128)v508;
                    re::DebugRenderer::drawSphere(v672, (uint64_t)out, 32, &v715, 1, 0.03);
                    v561 = *v494 + 8;
                    *(float32x4_t *)uuid_t out = vaddq_f32(*v561, vmulq_f32((*v494)[7], (float32x4_t)vdupq_n_s32(0x3E4CCCCDu)));
                    re::DebugRenderer::drawArrow(v672, v561, (float32x4_t *)out, &v715, 1, 0.015);
                    unsigned int v473 = *(_DWORD *)(v469 + 32);
                    if (v473 <= (int)v470 + 1) {
                      int v562 = v470 + 1;
                    }
                    else {
                      int v562 = *(_DWORD *)(v469 + 32);
                    }
                    uint64_t v150 = a1;
                    long long v466 = xmmword_23435FD80;
                    long long v465 = xmmword_23435FD50;
                    while (1)
                    {
                      uint64_t v474 = (v470 + 1);
                      if (v562 - 1 == v470) {
                        break;
                      }
                      LODWORD(v470) = v470 + 1;
                      int v563 = v474;
                      if ((*(_DWORD *)(*(void *)(v469 + 16) + 24 * v474 + 8) & 0x80000000) != 0) {
                        goto LABEL_871;
                      }
                    }
                    int v563 = v562;
LABEL_871:
                    LODWORD(v470) = v563;
                  }
                  while (v695 != v563);
                }
                uint64_t v564 = 0;
                if (v473)
                {
                  v565 = (int *)(*(void *)(v469 + 16) + 8);
                  while (1)
                  {
                    int v566 = *v565;
                    v565 += 6;
                    if (v566 < 0) {
                      break;
                    }
                    if (v473 == ++v564)
                    {
                      LODWORD(v564) = v473;
                      break;
                    }
                  }
                }
                if (v473 != v564) {
                  break;
                }
LABEL_878:
                int v567 = v656;
                if (*(_DWORD *)(v150 + 88) <= (v656 + 1)) {
                  int v568 = v656 + 1;
                }
                else {
                  int v568 = *(_DWORD *)(v150 + 88);
                }
                while (1)
                {
                  uint64_t v464 = (v567 + 1);
                  if (v568 - 1 == v567) {
                    break;
                  }
                  ++v567;
                  int v569 = v464;
                  if ((*(_DWORD *)(*(void *)(v150 + 72) + 184 * v464 + 8) & 0x80000000) != 0) {
                    goto LABEL_958;
                  }
                }
                int v569 = v568;
LABEL_958:
                LODWORD(v152) = v569;
                if (v655 == v569) {
                  goto LABEL_802;
                }
              }
              uint64_t v570 = v564;
              unsigned int v571 = v473;
              unint64_t v572 = 1;
              unsigned int v659 = v473;
              while (1)
              {
                int v660 = v564;
                uint64_t v145 = *(void *)(*(void *)(v469 + 16) + 24 * v570 + 16);
                uint64_t v664 = *(unsigned int *)(v145 + 232);
                uint64_t v573 = 0;
                if (v664)
                {
                  v574 = (int *)(*(void *)(v145 + 216) + 8);
                  while (1)
                  {
                    int v575 = *v574;
                    v574 += 6;
                    if (v575 < 0) {
                      break;
                    }
                    if (v664 == ++v573)
                    {
                      LODWORD(v573) = *(_DWORD *)(v145 + 232);
                      break;
                    }
                  }
                }
                if (v664 != v573) {
                  break;
                }
LABEL_948:
                int v652 = v660;
                if (v571 <= v660 + 1) {
                  unsigned int v653 = v660 + 1;
                }
                else {
                  unsigned int v653 = v571;
                }
                while (1)
                {
                  uint64_t v570 = (v652 + 1);
                  if (v653 - 1 == v652) {
                    break;
                  }
                  ++v652;
                  unsigned int v654 = v570;
                  if ((*(_DWORD *)(*(void *)(v469 + 16) + 24 * v570 + 8) & 0x80000000) != 0) {
                    goto LABEL_955;
                  }
                }
                unsigned int v654 = v653;
LABEL_955:
                LODWORD(v564) = v654;
                if (v659 == v654) {
                  goto LABEL_878;
                }
              }
              uint64_t v576 = v573;
              while (1)
              {
                uint64_t v577 = *(void *)(v145 + 216) + 24 * v576;
                float64x2_t v578 = vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v572), (int8x16_t)xmmword_234361D30));
                *(float32x2_t *)&v578.f64[0] = vcvt_f32_f64(v578);
                unint64_t v665 = v572;
                *(float *)&v578.f64[1] = (float)(v572 & 4);
                float64x2_t v703 = v578;
                unint64_t v580 = *(void *)(v577 + 16);
                v579 = (unint64_t *)(v577 + 16);
                unint64_t v146 = v580;
                uint64_t v581 = *(unsigned int *)(v580 + 304);
                if (v581)
                {
                  uint64_t v582 = 0;
                  v583 = (int *)(*(void *)(v146 + 288) + 8);
                  while (1)
                  {
                    int v584 = *v583;
                    v583 += 6;
                    if (v584 < 0) {
                      break;
                    }
                    if (v581 == ++v582)
                    {
                      LODWORD(v582) = v581;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v582) = 0;
                }
                if (v581 != v582) {
                  break;
                }
LABEL_935:
                uint64_t v643 = *(void *)(v146 + 56);
                long long v644 = xmmword_23435FD60;
                float v645 = 1.0;
                if (v643)
                {
                  v646 = *(long long **)(v146 + 64);
                  uint64_t v647 = 16 * v643;
                  do
                  {
                    long long v648 = *v646++;
                    long long v649 = v648;
                    *(_OWORD *)uuid_t out = v465;
                    v730[0] = v644;
                    *((float *)&v649 + 3) = v645;
                    v730[1] = v466;
                    long long v731 = v649;
                    re::DebugRenderer::drawSphere(v672, (uint64_t)out, 4, (long long *)&v703, 1, 0.01);
                    float v645 = 1.0;
                    long long v644 = xmmword_23435FD60;
                    long long v466 = xmmword_23435FD80;
                    long long v465 = xmmword_23435FD50;
                    v647 -= 16;
                  }
                  while (v647);
                }
                unint64_t v572 = v665 + 1;
                if (*(_DWORD *)(v145 + 232) <= (v573 + 1)) {
                  int v650 = v573 + 1;
                }
                else {
                  int v650 = *(_DWORD *)(v145 + 232);
                }
                uint64_t v150 = a1;
                uint64_t v469 = v662;
                while (1)
                {
                  uint64_t v576 = (v573 + 1);
                  if (v650 - 1 == v573) {
                    break;
                  }
                  LODWORD(v573) = v573 + 1;
                  int v651 = v576;
                  if ((*(_DWORD *)(*(void *)(v145 + 216) + 24 * v576 + 8) & 0x80000000) != 0) {
                    goto LABEL_946;
                  }
                }
                int v651 = v650;
LABEL_946:
                LODWORD(v573) = v651;
                if (v664 == v651)
                {
                  unsigned int v571 = *(_DWORD *)(v662 + 32);
                  goto LABEL_948;
                }
              }
              v661 = v579;
              uint64_t v585 = v582;
              while (1)
              {
                v586 = *(re::ecs2::TransformComponent ***)(*(void *)(v146 + 288) + 24 * v585 + 16);
                uint64_t v587 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v586 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (!v587) {
                  break;
                }
                int v589 = *(_DWORD *)(v587 + 160);
                re::DynamicString::format((re::DynamicString *)"%d\n", (re::DynamicString *)&v726, v589);
                re::ecs2::TransformComponent::worldMatrix4x4F(v586, (const re::ecs2::Entity *)1, out);
                long long v701 = v731;
                re::ecs2::TransformComponent::worldOrientation(v586, (const re::ecs2::Entity *)1);
                v591.i64[0] = v590;
                v591.i64[1] = v592;
                float32x4_t v696 = v591;
                re::ecs2::TransformComponent::worldScale(v586, (const re::ecs2::Entity *)1);
                float v594 = v593;
                float32x4_t v595 = vmulq_f32(v696, v696);
                LODWORD(v596) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v595, 2), vaddq_f32(v595, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v595.f32, 1))).u32[0];
                float32x4_t v597 = 0uLL;
                if (fabsf(v596) >= 1.0e-10)
                {
                  float v598 = v596;
                  float32x2_t v599 = vrsqrte_f32((float32x2_t)LODWORD(v596));
                  float32x2_t v600 = vmul_f32(v599, vrsqrts_f32((float32x2_t)LODWORD(v598), vmul_f32(v599, v599)));
                  float32x4_t v597 = vmulq_n_f32(v696, vmul_f32(v600, vrsqrts_f32((float32x2_t)LODWORD(v598), vmul_f32(v600, v600))).f32[0]);
                }
                float v601 = v696.f32[3];
                float v602 = fabsf(v696.f32[3]);
                float v603 = 1.0;
                if (v602 <= 1.0
                  || (float v603 = 1.0, fabsf(v602 + -1.0) < (float)((float)((float)(v602 + 1.0) + 1.0) * 0.00001)))
                {
                  if (v696.f32[3] > v603) {
                    float v601 = v603;
                  }
                  if (v601 < -1.0) {
                    float v601 = -1.0;
                  }
                  float32x4_t v697 = v597;
                  float v605 = acosf(v601);
                  float32x4_t v597 = v697;
                  float v604 = v605 + v605;
                }
                else
                {
                  float v604 = NAN;
                }
                float32x4_t v606 = (float32x4_t)v701;
                float32x4_t v607 = vmulq_f32(v597, v597);
                LODWORD(v608) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v607, 2), vaddq_f32(v607, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v607.f32, 1))).u32[0];
                if (fabsf(v608) >= 1.0e-10)
                {
                  float v609 = v608;
                  float32x2_t v610 = vrsqrte_f32((float32x2_t)LODWORD(v608));
                  float32x2_t v611 = vmul_f32(v610, vrsqrts_f32((float32x2_t)LODWORD(v609), vmul_f32(v610, v610)));
                  float32x4_t v597 = vmulq_n_f32(v597, vmul_f32(v611, vrsqrts_f32((float32x2_t)LODWORD(v609), vmul_f32(v611, v611))).f32[0]);
                }
                float v678 = v594 * 0.025;
                *(void *)&long long v612 = 0;
                *((void *)&v612 + 1) = __PAIR64__(1.0, COERCE_UNSIGNED_INT(fminf((float)((float)v589 * 0.005) + 0.005, 0.05)));
                long long v676 = v612;
                v606.i32[3] = 1.0;
                float32x4_t v698 = v597;
                float32x4_t v702 = v606;
                float v674 = vmulq_f32(v597, v597).f32[0];
                float v613 = vmuls_lane_f32(v597.f32[1], *(float32x2_t *)v597.f32, 1);
                float v614 = vmuls_lane_f32(v597.f32[2], v597, 2);
                float v615 = vmuls_lane_f32(v597.f32[0], *(float32x2_t *)v597.f32, 1);
                float v616 = vmuls_lane_f32(v597.f32[0], v597, 2);
                float v617 = vmuls_lane_f32(v597.f32[1], v597, 2);
                __float2 v618 = __sincosf_stret(v604);
                uint64_t v619 = 0;
                float v620 = vmuls_lane_f32(v618.__sinval, *(float32x2_t *)v698.f32, 1);
                float v621 = vmuls_lane_f32(v618.__sinval, v698, 2);
                HIDWORD(v622) = 0;
                *(float *)&long long v622 = v674 + (float)(v618.__cosval * (float)(1.0 - v674));
                *((float *)&v622 + 1) = v621 + (float)(v615 * (float)(1.0 - v618.__cosval));
                *((float *)&v622 + 2) = -(float)(v620 - (float)(v616 * (float)(1.0 - v618.__cosval)));
                HIDWORD(v623) = 0;
                *(float *)&long long v623 = -(float)(v621 - (float)(v615 * (float)(1.0 - v618.__cosval)));
                *((float *)&v623 + 1) = v613 + (float)(v618.__cosval * (float)(1.0 - v613));
                *((float *)&v623 + 2) = (float)(v618.__sinval * v698.f32[0])
                                      + (float)(v617 * (float)(1.0 - v618.__cosval));
                *(float *)&long long v624 = v620 + (float)(v616 * (float)(1.0 - v618.__cosval));
                *((float *)&v624 + 1) = -(float)((float)(v618.__sinval * v698.f32[0])
                                               - (float)(v617 * (float)(1.0 - v618.__cosval)));
                *((void *)&v624 + 1) = COERCE_UNSIGNED_INT(v614 + (float)(v618.__cosval * (float)(1.0 - v614)));
                long long v715 = v622;
                long long v716 = v623;
                long long v717 = v624;
                long long v718 = xmmword_23435FBB0;
                do
                {
                  *(float32x4_t *)&out[v619] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(long long *)((char *)&v715 + v619))), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)((char *)&v715 + v619), 1), (float32x4_t)xmmword_23435FD80, *(float32x4_t *)((char *)&v715 + v619), 2), v702, *(float32x4_t *)((char *)&v715 + v619), 3);
                  v619 += 16;
                }
                while (v619 != 64);
                uint64_t v625 = 0;
                float32x4_t v626 = *(float32x4_t *)out;
                float32x4_t v627 = (float32x4_t)v730[0];
                float32x4_t v628 = (float32x4_t)v730[1];
                float32x4_t v629 = (float32x4_t)v731;
                long long v715 = xmmword_23435FD50;
                long long v716 = xmmword_23435FD60;
                long long v717 = xmmword_23435FD80;
                long long v718 = v676;
                do
                {
                  *(float32x4_t *)&out[v625] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v626, COERCE_FLOAT(*(long long *)((char *)&v715 + v625))), v627, *(float32x2_t *)((char *)&v715 + v625), 1), v628, *(float32x4_t *)((char *)&v715 + v625), 2), v629, *(float32x4_t *)((char *)&v715 + v625), 3);
                  v625 += 16;
                }
                while (v625 != 64);
                uint64_t v630 = 0;
                float32x4_t v631 = *(float32x4_t *)out;
                float32x4_t v632 = (float32x4_t)v730[0];
                float32x4_t v633 = (float32x4_t)v730[1];
                float32x4_t v634 = (float32x4_t)v731;
                LODWORD(v635) = 0;
                *((float *)&v635 + 1) = v594 * 0.025;
                *(void *)&long long v636 = 0;
                *((void *)&v636 + 1) = LODWORD(v678);
                long long v715 = LODWORD(v678);
                long long v716 = v635;
                long long v717 = v636;
                long long v718 = xmmword_23435FBB0;
                do
                {
                  *(float32x4_t *)&out[v630] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v631, COERCE_FLOAT(*(long long *)((char *)&v715 + v630))), v632, *(float32x2_t *)((char *)&v715 + v630), 1), v633, *(float32x4_t *)((char *)&v715 + v630), 2), v634, *(float32x4_t *)((char *)&v715 + v630), 3);
                  v630 += 16;
                }
                while (v630 != 64);
                __int8 v637 = BYTE8(v726);
                uint64_t v638 = v727;
                if (BYTE8(v726)) {
                  v639 = (char *)v727;
                }
                else {
                  v639 = (char *)&v726 + 9;
                }
                *(float64_t *)&long long v640 = v703.f64[0];
                *((void *)&v640 + 1) = __PAIR64__(1.0, LODWORD(v703.f64[1]));
                long long v715 = v640;
                re::DebugRenderer::drawText((uint64_t)v672, (long long *)out, v639, (const StringID *)&v722, &v715);
                if ((v637 & 1) != 0 && (void)v726) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v726 + 40))(v726, v638);
                }
                if (*(_DWORD *)(v146 + 304) <= (v582 + 1)) {
                  int v641 = v582 + 1;
                }
                else {
                  int v641 = *(_DWORD *)(v146 + 304);
                }
                long long v466 = xmmword_23435FD80;
                long long v465 = xmmword_23435FD50;
                while (1)
                {
                  uint64_t v585 = (v582 + 1);
                  if (v641 - 1 == v582) {
                    break;
                  }
                  LODWORD(v582) = v582 + 1;
                  int v642 = v585;
                  if ((*(_DWORD *)(*(void *)(v146 + 288) + 24 * v585 + 8) & 0x80000000) != 0) {
                    goto LABEL_933;
                  }
                }
                int v642 = v641;
LABEL_933:
                LODWORD(v582) = v642;
                if (v581 == v642)
                {
                  unint64_t v146 = *v661;
                  goto LABEL_935;
                }
              }
              re::internal::assertLog((re::internal *)4, v588, "assertion failure: '%s' (%s:line %i) MeshSortingComponent must exist for entities in sort groups", "meshSortingComponent", "drawDebug", 1652);
              _os_crash();
              __break(1u);
LABEL_961:
              dispatch_once(&re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken, &__block_literal_global_12);
            }
          }
        }
        goto LABEL_803;
      }
LABEL_793:
      uint64_t v145 = v663;
      if ((atomic_exchange(_MergedGlobals_136, 1u) & 1) == 0)
      {
        v461 = *re::sortingLogObjects(v97);
        if (os_log_type_enabled(v461, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uuid_t out = 0;
          _os_log_impl(&dword_233120000, v461, OS_LOG_TYPE_DEFAULT, "No AssetService found, CARE sorting debug drawing will not be performed.", out, 2u);
        }
      }
LABEL_803:
      re::ecs2::CARESortingDebugging::m_entitiesActivated = 0;
      re::ecs2::CARESortingDebugging::m_entitiesDeactivated = 0;
      re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated = 0;
      re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated = 0;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v145);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 200);
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v710);
      return;
    }
    uint64_t v155 = v141;
    int v667 = *(_DWORD *)(v98 + 88);
LABEL_269:
    uint64_t v671 = *(void *)(v98 + 72);
    uint64_t v156 = v671 + 184 * v155;
    int v668 = v141;
    if (!(void)v710) {
      goto LABEL_280;
    }
    unint64_t v157 = *(void *)(v156 + 16);
    unint64_t v158 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v157 ^ (v157 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v157 ^ (v157 >> 30))) >> 27));
    uint64_t v159 = *(unsigned int *)(*((void *)&v710 + 1) + 4 * ((v158 ^ (v158 >> 31)) % DWORD2(v711)));
    if (v159 == 0x7FFFFFFF) {
      goto LABEL_280;
    }
    while (*(void *)(v711 + 72 * v159 + 16) != v157)
    {
      LODWORD(v159) = *(_DWORD *)(v711 + 72 * v159 + 8) & 0x7FFFFFFF;
      if (v159 == 0x7FFFFFFF) {
        goto LABEL_280;
      }
    }
    uint64_t v160 = v711 + 72 * v159;
    unint64_t v161 = *(unsigned int *)(v160 + 52);
    if (v161)
    {
      uint64_t v162 = v160 + 24;
      uint64_t v704 = 0;
      int v705 = 0;
      v706 = 0;
      float64x2_t v703 = (float64x2_t)(unint64_t)v710;
      re::DynamicArray<float *>::setCapacity(&v703, v161);
      ++v705;
      uint64_t v163 = *(unsigned int *)(v162 + 32);
      if (v163)
      {
        uint64_t v164 = 0;
        int v165 = (int *)(*(void *)(v162 + 16) + 8);
        while (1)
        {
          int v166 = *v165;
          v165 += 6;
          if (v166 < 0) {
            break;
          }
          if (v163 == ++v164)
          {
            LODWORD(v164) = *(_DWORD *)(v162 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v164) = 0;
      }
      if (v163 != v164)
      {
        uint64_t v458 = v164;
        do
        {
          *(void *)uuid_t out = 0;
          *(void *)uuid_t out = *(void *)(*(void *)(v162 + 16) + 24 * v458 + 16);
          re::DynamicArray<re::TransitionCondition *>::add(&v703, out);
          if (*(_DWORD *)(v162 + 32) <= (v164 + 1)) {
            int v459 = v164 + 1;
          }
          else {
            int v459 = *(_DWORD *)(v162 + 32);
          }
          int v460 = v164;
          while (1)
          {
            uint64_t v458 = (v460 + 1);
            if (v459 - 1 == v460) {
              break;
            }
            ++v460;
            LODWORD(v164) = v458;
            if ((*(_DWORD *)(*(void *)(v162 + 16) + 24 * v458 + 8) & 0x80000000) != 0) {
              goto LABEL_790;
            }
          }
          LODWORD(v164) = v459;
LABEL_790:
          ;
        }
        while (v163 != v164);
      }
    }
    else
    {
LABEL_280:
      v706 = 0;
      uint64_t v704 = 0;
      float64x2_t v703 = 0uLL;
      int v705 = 0;
    }
    uint64_t v673 = v155;
    long long v167 = v706;
    uint64_t v168 = v704;
    unint64_t v169 = &v706[v704];
    if (v704)
    {
      uint64_t v170 = v706;
      do
      {
        unint64_t v171 = *v170;
        uint64_t v172 = (re::ecs2::EntityComponentCollection *)(*v170 + 32);
        uint64_t v173 = re::ecs2::EntityComponentCollection::get(v172, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v173)
        {
          uint64_t v174 = v173;
          uint64_t v175 = re::ecs2::EntityComponentCollection::get(v172, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (!v175 || *(_DWORD *)(v175 + 80) != 3)
          {
            uint64_t v176 = *(void *)(v171 + 24);
            if (v176)
            {
              while ((*(unsigned char *)(v176 + 288) & 0x80) == 0)
              {
                uint64_t v177 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v176 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v177 && *(_DWORD *)(v177 + 80) == 3)
                {
                  re::ecs2::UISortingComponent::setCaSortOrder(v174, *(_DWORD *)(v177 + 88));
                  break;
                }
                uint64_t v176 = *(void *)(v176 + 24);
                if (!v176) {
                  break;
                }
              }
            }
          }
        }
        ++v170;
      }
      while (v170 != v169);
    }
    uint64_t v178 = v156 + 24;
    unsigned int v179 = *(_DWORD *)(v178 + 28);
    if (v168 <= 1) {
      signed int v180 = 1;
    }
    else {
      signed int v180 = v168;
    }
    LODWORD(v717) = 0;
    if (v179 <= 1) {
      signed int v181 = 1;
    }
    else {
      signed int v181 = v179;
    }
    long long v715 = 0u;
    long long v716 = 0u;
    *(void *)((char *)&v717 + 4) = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v715, v675, v180);
    LODWORD(v728) = 0;
    long long v726 = 0u;
    long long v727 = 0u;
    *(void *)((char *)&v728 + 4) = 0x7FFFFFFFLL;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v726, v675, v181);
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v726);
    uint64_t v182 = *(unsigned int *)(v178 + 32);
    if (v182)
    {
      uint64_t v183 = 0;
      unint64_t v184 = (int *)(*(void *)(v178 + 16) + 8);
      while (1)
      {
        int v185 = *v184;
        v184 += 6;
        if (v185 < 0) {
          break;
        }
        if (v182 == ++v183)
        {
          LODWORD(v183) = *(_DWORD *)(v178 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v183) = 0;
    }
    if (v182 == v183)
    {
LABEL_307:
      unsigned int v186 = v728;
      uint64_t v683 = v178;
      uint64_t v187 = 0;
      if (v728)
      {
        uint64_t v188 = (int *)(v727 + 8);
        while (1)
        {
          int v189 = *v188;
          v188 += 6;
          if (v189 < 0) {
            break;
          }
          if (v728 == ++v187)
          {
            LODWORD(v187) = v728;
            break;
          }
        }
      }
      uint64_t v682 = v671 + 184 * v673 + 72;
      if (v728 != v187)
      {
        uint64_t v190 = v187;
        uint64_t v191 = v727;
        do
        {
          unint64_t v192 = *(void *)(v191 + 24 * v190 + 16);
          if (v192)
          {
            id v193 = (id)(v192 + 8);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v178, v192);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v682, v192);
          }
          else
          {
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v178, 0);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v682, 0);
          }
          if (v186 <= (int)v187 + 1) {
            unsigned int v194 = v187 + 1;
          }
          else {
            unsigned int v194 = v186;
          }
          while (1)
          {
            uint64_t v190 = (v187 + 1);
            if (v194 - 1 == v187) {
              break;
            }
            LODWORD(v187) = v187 + 1;
            unsigned int v195 = v190;
            if ((*(_DWORD *)(v191 + 24 * v190 + 8) & 0x80000000) != 0) {
              goto LABEL_324;
            }
          }
          unsigned int v195 = v194;
LABEL_324:
          LODWORD(v187) = v195;
        }
        while (v186 != v195);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v726);
      re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v178, v196);
      if (v168)
      {
        uint64_t v197 = (const re::ecs2::Entity **)v167;
        do
        {
          v198 = *v197;
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, *v197, *(re::ecs2::SortingTransformCache **)(v671 + 184 * v673 + 176));
          unsigned long long v722 = v730[0];
          long long v723 = v730[1];
          unint64_t v199 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * ((unint64_t)v198 ^ ((unint64_t)v198 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v198 ^ ((unint64_t)v198 >> 30))) >> 27));
          unint64_t v200 = v199 ^ (v199 >> 31);
          unint64_t v201 = v715;
          if (!(void)v715
            || (unint64_t v201 = v200 % DWORD2(v716),
                uint64_t v202 = *((void *)&v715 + 1),
                uint64_t v203 = *(unsigned int *)(*((void *)&v715 + 1) + 4 * v201),
                v203 == 0x7FFFFFFF))
          {
LABEL_332:
            uint64_t v205 = DWORD1(v717);
            if (DWORD1(v717) == 0x7FFFFFFF)
            {
              uint64_t v205 = v717;
              int v206 = v717;
              if (v717 == DWORD2(v716))
              {
                re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)&v715, 2 * HIDWORD(v716));
                int v206 = v717;
                unint64_t v201 = v200 % DWORD2(v716);
              }
              LODWORD(v717) = v206 + 1;
              uint64_t v204 = v716;
              int v207 = *(_DWORD *)(v716 + (v205 << 6) + 8);
            }
            else
            {
              uint64_t v204 = v716;
              int v207 = *(_DWORD *)(v716 + ((unint64_t)DWORD1(v717) << 6) + 8);
              DWORD1(v717) = v207 & 0x7FFFFFFF;
            }
            uint64_t v208 = v204 + (v205 << 6);
            *(_DWORD *)(v208 + 8) = v207 | 0x80000000;
            uint64_t v202 = *((void *)&v715 + 1);
            *(_DWORD *)(v208 + 8) = *(_DWORD *)(*((void *)&v715 + 1) + 4 * v201) | 0x80000000;
            *(void *)uint64_t v208 = v200;
            *(void *)(v208 + 16) = v198;
            *(_OWORD *)(v208 + 32) = v722;
            *(_OWORD *)(v208 + 48) = v723;
            *(_DWORD *)(v202 + 4 * v201) = v205;
            ++HIDWORD(v716);
            ++DWORD2(v717);
          }
          else
          {
            uint64_t v204 = v716;
            while (*(const re::ecs2::Entity **)(v716 + (v203 << 6) + 16) != v198)
            {
              uint64_t v203 = *(_DWORD *)(v716 + (v203 << 6) + 8) & 0x7FFFFFFF;
              if (v203 == 0x7FFFFFFF) {
                goto LABEL_332;
              }
            }
          }
          ++v197;
        }
        while (v197 != (const re::ecs2::Entity **)v169);
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v726);
        uint64_t v209 = v671 + 184 * v673 + 120;
        uint64_t v210 = v715;
        unint64_t v211 = DWORD2(v716);
        unint64_t v689 = DWORD2(v716);
        do
        {
          unint64_t v212 = *v167;
          long long v213 = (float32x4_t **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v209, *v167);
          if (v213)
          {
            int v214 = *v213;
            *(void *)&unsigned long long v722 = v214;
            if (v214) {
              uint64_t v215 = &v214->u32[2];
            }
            if (v210)
            {
              unint64_t v216 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) >> 27));
              for (uint64_t i = *(unsigned int *)(v202 + 4 * ((v216 ^ (v216 >> 31)) % v211));
                    i != 0x7FFFFFFF;
                    uint64_t i = *(_DWORD *)(v204 + (i << 6) + 8) & 0x7FFFFFFF)
              {
                if (*(void *)(v204 + (i << 6) + 16) == v212)
                {
                  uint64_t v218 = v169;
                  uint64_t v219 = v210;
                  unint64_t v220 = (float32x4_t *)(v204 + (i << 6));
                  re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v682, (uint64_t *)&v722);
                  v214[9].i8[0] = 1;
                  float32x4_t v221 = v220[2];
                  uint64_t v210 = v219;
                  unint64_t v169 = v218;
                  unint64_t v211 = v689;
                  float32x4_t v222 = vmulq_f32(v214[7], v221);
                  if ((float)(1.0
                             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1))).f32[0]) > *(float *)&dword_26AF7FBEC)goto LABEL_349;
                  *(void *)uuid_t out = v212;
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v214[21].i64[1], (uint64_t *)out);
                  goto LABEL_350;
                }
              }
            }
            re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v682, (uint64_t *)&v722);
            v214[9].i8[0] = 1;
LABEL_349:
            re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v209, v212);
            re::ecs2::CAMeshCodirectionalGroup::remove((re::ecs2::CAMeshCodirectionalGroup *)v214, (re::ecs2::Entity *)v212);
            re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)&v726, (uint64_t *)&v722);
LABEL_350:
          }
          ++v167;
        }
        while (v167 != v169);
      }
      else
      {
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v726);
      }
      if (v728)
      {
        uint64_t v228 = 0;
        char v229 = (int *)(v727 + 8);
        while (1)
        {
          int v230 = *v229;
          v229 += 6;
          if (v230 < 0) {
            break;
          }
          if (v728 == ++v228)
          {
            LODWORD(v228) = v728;
            break;
          }
        }
      }
      else
      {
        LODWORD(v228) = 0;
      }
      uint64_t v231 = v683;
      if (v728 != v228)
      {
        uint64_t v232 = v228;
        uint64_t v233 = v671 + 184 * v673;
        v685 = (re::ecs2::SortingTransformCache **)(v233 + 176);
        uint64_t v690 = v233 + 120;
        uint64_t v234 = v727;
        unsigned int v679 = v728;
        while (1)
        {
          unint64_t v235 = *(void *)(v234 + 24 * v232 + 16);
          if (v235) {
            id v236 = (id)(v235 + 8);
          }
          uint64_t v237 = *(unsigned int *)(v235 + 56);
          if (v237)
          {
            uint64_t v238 = 0;
            uint64_t v239 = (int *)(*(void *)(v235 + 40) + 8);
            while (1)
            {
              int v240 = *v239;
              v239 += 6;
              if (v240 < 0) {
                break;
              }
              if (v237 == ++v238)
              {
                LODWORD(v238) = *(_DWORD *)(v235 + 56);
                break;
              }
            }
          }
          else
          {
            LODWORD(v238) = 0;
          }
          if (v237 != v238) {
            break;
          }
LABEL_413:
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v235 + 24);
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v235 + 344);
          *(unsigned char *)(v235 + 144) = 1;
          id v258 = (id)(v235 + 8);
          uint64_t v231 = v683;
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v683, v235);
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v682, v235);

          if (v679 <= (int)v228 + 1) {
            unsigned int v259 = v228 + 1;
          }
          else {
            unsigned int v259 = v679;
          }
          while (1)
          {
            uint64_t v232 = (v228 + 1);
            if (v259 - 1 == v228) {
              break;
            }
            LODWORD(v228) = v228 + 1;
            unsigned int v260 = v232;
            if ((*(_DWORD *)(v234 + 24 * v232 + 8) & 0x80000000) != 0) {
              goto LABEL_420;
            }
          }
          unsigned int v260 = v259;
LABEL_420:
          LODWORD(v228) = v260;
          if (v679 == v260) {
            goto LABEL_421;
          }
        }
        uint64_t v241 = v238;
        while (2)
        {
          unint64_t v242 = *(void *)(*(void *)(v235 + 40) + 24 * v241 + 16);
          unint64_t v243 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v242 ^ (v242 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v242 ^ (v242 >> 30))) >> 27));
          unint64_t v244 = v243 ^ (v243 >> 31);
          if ((void)v715)
          {
            unint64_t v245 = v244 % DWORD2(v716);
            uint64_t v246 = *((void *)&v715 + 1);
            uint64_t v247 = *(unsigned int *)(*((void *)&v715 + 1) + 4 * v245);
            if (v247 != 0x7FFFFFFF)
            {
              while (*(void *)(v716 + (v247 << 6) + 16) != v242)
              {
                uint64_t v247 = *(_DWORD *)(v716 + (v247 << 6) + 8) & 0x7FFFFFFF;
                if (v247 == 0x7FFFFFFF) {
                  goto LABEL_394;
                }
              }
LABEL_405:
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v690, v242);
              if (*(_DWORD *)(v235 + 56) <= (v238 + 1)) {
                int v256 = v238 + 1;
              }
              else {
                int v256 = *(_DWORD *)(v235 + 56);
              }
              while (1)
              {
                uint64_t v241 = (v238 + 1);
                if (v256 - 1 == v238) {
                  break;
                }
                LODWORD(v238) = v238 + 1;
                int v257 = v241;
                if ((*(_DWORD *)(*(void *)(v235 + 40) + 24 * v241 + 8) & 0x80000000) != 0) {
                  goto LABEL_412;
                }
              }
              int v257 = v256;
LABEL_412:
              LODWORD(v238) = v257;
              if (v237 == v257) {
                goto LABEL_413;
              }
              continue;
            }
LABEL_394:
            re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v242, *v685);
            unsigned long long v722 = v730[0];
            long long v723 = v730[1];
            unint64_t v248 = v245;
            uint64_t v249 = *(unsigned int *)(v246 + 4 * v245);
            if (v249 != 0x7FFFFFFF)
            {
              while (*(void *)(v716 + (v249 << 6) + 16) != v242)
              {
                uint64_t v249 = *(_DWORD *)(v716 + (v249 << 6) + 8) & 0x7FFFFFFF;
                if (v249 == 0x7FFFFFFF) {
                  goto LABEL_399;
                }
              }
              goto LABEL_405;
            }
          }
          else
          {
            re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v242, *v685);
            unint64_t v248 = 0;
            unsigned long long v722 = v730[0];
            long long v723 = v730[1];
          }
          break;
        }
LABEL_399:
        uint64_t v250 = DWORD1(v717);
        if (DWORD1(v717) == 0x7FFFFFFF)
        {
          uint64_t v250 = v717;
          int v251 = v717;
          if (v717 == DWORD2(v716))
          {
            re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)&v715, 2 * HIDWORD(v716));
            int v251 = v717;
            unint64_t v248 = v244 % DWORD2(v716);
          }
          LODWORD(v717) = v251 + 1;
          uint64_t v252 = v716;
          int v253 = *(_DWORD *)(v716 + (v250 << 6) + 8);
        }
        else
        {
          uint64_t v252 = v716;
          int v253 = *(_DWORD *)(v716 + ((unint64_t)DWORD1(v717) << 6) + 8);
          DWORD1(v717) = v253 & 0x7FFFFFFF;
        }
        uint64_t v254 = v252 + (v250 << 6);
        *(_DWORD *)(v254 + 8) = v253 | 0x80000000;
        uint64_t v255 = *((void *)&v715 + 1);
        *(_DWORD *)(v254 + 8) = *(_DWORD *)(*((void *)&v715 + 1) + 4 * v248) | 0x80000000;
        *(void *)uint64_t v254 = v244;
        *(void *)(v254 + 16) = v242;
        *(_OWORD *)(v254 + 32) = v722;
        *(_OWORD *)(v254 + 48) = v723;
        *(_DWORD *)(v255 + 4 * v248) = v250;
        ++HIDWORD(v716);
        ++DWORD2(v717);
        goto LABEL_405;
      }
LABEL_421:
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v726);
      if (!HIDWORD(v716)) {
        goto LABEL_556;
      }
      unsigned int v263 = v717;
      uint64_t v264 = 0;
      if (v717)
      {
        long long v265 = (int *)(v716 + 8);
        while (1)
        {
          int v266 = *v265;
          v265 += 16;
          if (v266 < 0) {
            break;
          }
          if (v717 == ++v264)
          {
            LODWORD(v264) = v717;
            break;
          }
        }
      }
      if (v717 != v264)
      {
        uint64_t v267 = v264;
        uint64_t v268 = v671 + 184 * v673;
        v269 = (void *)(v268 + 120);
        uint64_t v270 = v716;
        v691 = (unsigned int *)(v268 + 144);
        v686 = (void *)(v268 + 128);
        v669 = (uint64_t *)(v268 + 136);
        v680 = (void *)(v268 + 168);
        do
        {
          long long v271 = (float32x4_t *)(v270 + (v267 << 6));
          int v272 = (re::ecs2::Entity *)v271[1].i64[0];
          *(void *)&unsigned long long v722 = v272;
          if (!*v269
            || (unint64_t v273 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v272 ^ ((unint64_t)v272 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v272 ^ ((unint64_t)v272 >> 30))) >> 27)),
                uint64_t v274 = *(unsigned int *)(*v686 + 4 * ((v273 ^ (v273 >> 31)) % *v691)),
                v274 == 0x7FFFFFFF))
          {
LABEL_434:
            uint64_t v276 = *(unsigned int *)(v683 + 32);
            if (v276)
            {
              uint64_t v277 = 0;
              __int16 v278 = (int *)(*(void *)(v683 + 16) + 8);
              while (1)
              {
                int v279 = *v278;
                v278 += 6;
                if (v279 < 0) {
                  break;
                }
                if (v276 == ++v277)
                {
                  LODWORD(v277) = *(_DWORD *)(v683 + 32);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v277) = 0;
            }
            if (v276 == v277)
            {
LABEL_451:
              unint64_t v290 = re::globalAllocators(v261);
              uint64_t v291 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v290[2] + 32))(v290[2], 448, 16);
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)v291, 0);
              *unint64_t v292 = &unk_26E6E1348;
              uuid_generate_random(out);
              *(void *)(v291 + 16) = (*(void *)&out[8]
                                      + (*(void *)out << 6)
                                      + (*(void *)out >> 2)
                                      - 0x61C8864680B583E9) ^ *(void *)out;
              *(_OWORD *)(v291 + 24) = 0u;
              *(_OWORD *)(v291 + 40) = 0u;
              *(_DWORD *)(v291 + 56) = 0;
              *(void *)(v291 + 60) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 168) = 0u;
              *(_DWORD *)(v291 + 184) = 0;
              *(_OWORD *)(v291 + 152) = 0u;
              *(_OWORD *)(v291 + 80) = 0u;
              *(_OWORD *)(v291 + 96) = 0u;
              *(_OWORD *)(v291 + 112) = 0u;
              *(_OWORD *)(v291 + 128) = 0u;
              *(_WORD *)(v291 + 144) = 0;
              *(void *)(v291 + 188) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 200) = 0u;
              *(_OWORD *)(v291 + 216) = 0u;
              *(_DWORD *)(v291 + 232) = 0;
              *(void *)(v291 + 236) = 0x7FFFFFFFLL;
              *(_DWORD *)(v291 + 280) = 0;
              *(_OWORD *)(v291 + 248) = 0u;
              *(_OWORD *)(v291 + 264) = 0u;
              *(void *)(v291 + 284) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 296) = 0u;
              *(_OWORD *)(v291 + 312) = 0u;
              *(_DWORD *)(v291 + 328) = 0;
              *(void *)(v291 + 332) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 344) = 0u;
              *(_OWORD *)(v291 + 360) = 0u;
              *(_DWORD *)(v291 + 376) = 0;
              *(void *)(v291 + 380) = 0x7FFFFFFFLL;
              *(void *)(v291 + 424) = 0;
              *(void *)(v291 + 400) = 0;
              *(void *)(v291 + 408) = 0;
              *(_DWORD *)(v291 + 416) = 0;
              *(void *)(v291 + 392) = 0;
              *(void *)(v291 + 432) = *v680 + 440;
              *(void *)uuid_t out = v291;
              re::ecs2::CAMeshCodirectionalGroup::add((re::ecs2::CAMeshCodirectionalGroup *)v291, v272);
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>((uint64_t)v269, (uint64_t *)&v722, (uint64_t *)out);
              re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v683, (uint64_t *)out);
              re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v682, (uint64_t *)out);
            }
            else
            {
              long long v280 = v271 + 2;
              uint64_t v281 = v277;
              uint64_t v282 = *(void *)(v683 + 16);
              float32x4_t v283 = *v280;
              while (1)
              {
                uint64_t v284 = v282 + 24 * v281;
                unint64_t v286 = *(float32x4_t **)(v284 + 16);
                unint64_t v285 = (uint64_t *)(v284 + 16);
                uint64_t v261 = (re *)v286;
                float32x4_t v287 = vmulq_f32(v283, v286[7]);
                if ((float)(1.0
                           - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v287, 2), vaddq_f32(v287, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v287.f32, 1))).f32[0]) <= *(float *)&dword_26AF7FBEC)break;
                if (v276 <= (int)v277 + 1) {
                  int v288 = v277 + 1;
                }
                else {
                  int v288 = *(_DWORD *)(v683 + 32);
                }
                while (1)
                {
                  uint64_t v281 = (v277 + 1);
                  if (v288 - 1 == v277) {
                    break;
                  }
                  LODWORD(v277) = v277 + 1;
                  int v289 = v281;
                  if ((*(_DWORD *)(v282 + 24 * v281 + 8) & 0x80000000) != 0) {
                    goto LABEL_450;
                  }
                }
                int v289 = v288;
LABEL_450:
                LODWORD(v277) = v289;
                if (v276 == v289) {
                  goto LABEL_451;
                }
              }
              re::ecs2::CAMeshCodirectionalGroup::add(v261, v272);
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>((uint64_t)v269, (uint64_t *)&v722, v285);
              uint64_t v261 = (re *)re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v682, v285);
            }
          }
          else
          {
            uint64_t v275 = *v669;
            while (*(re::ecs2::Entity **)(v275 + 32 * v274 + 16) != v272)
            {
              uint64_t v274 = *(_DWORD *)(v275 + 32 * v274 + 8) & 0x7FFFFFFF;
              if (v274 == 0x7FFFFFFF) {
                goto LABEL_434;
              }
            }
          }
          if (v263 <= (int)v264 + 1) {
            unsigned int v295 = v264 + 1;
          }
          else {
            unsigned int v295 = v263;
          }
          while (1)
          {
            uint64_t v267 = (v264 + 1);
            if (v295 - 1 == v264) {
              break;
            }
            LODWORD(v264) = v264 + 1;
            unsigned int v296 = v267;
            if ((*(_DWORD *)(v270 + (v267 << 6) + 8) & 0x80000000) != 0) {
              goto LABEL_460;
            }
          }
          unsigned int v296 = v295;
LABEL_460:
          LODWORD(v264) = v296;
        }
        while (v263 != v296);
      }
      uint64_t v231 = v683;
      re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v683, v262);
      unint64_t v297 = *(unsigned int *)(v683 + 28);
      if (v297 <= 1) {
        goto LABEL_556;
      }
      *(void *)&long long v723 = 0;
      DWORD2(v723) = 0;
      uint64_t v724 = 0;
      unsigned long long v722 = (unint64_t)v675;
      BOOL v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v722, v297);
      int v299 = ++DWORD2(v723);
      uint64_t v300 = *(unsigned int *)(v683 + 32);
      if (v300)
      {
        uint64_t v301 = 0;
        char v302 = (int *)(*(void *)(v683 + 16) + 8);
        while (1)
        {
          int v303 = *v302;
          v302 += 6;
          if (v303 < 0) {
            break;
          }
          if (v300 == ++v301)
          {
            LODWORD(v301) = *(_DWORD *)(v683 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v301) = 0;
      }
      if (v300 == v301)
      {
        unint64_t v146 = v723;
        uint64_t v681 = v724;
      }
      else
      {
        uint64_t v304 = v301;
        unint64_t v146 = v723;
        do
        {
          uint64_t v305 = *(void *)(v231 + 16);
          if (v146 >= *((void *)&v722 + 1))
          {
            if (*((void *)&v722 + 1) < v146 + 1)
            {
              if ((void)v722)
              {
                unint64_t v306 = 8;
                if (*((void *)&v722 + 1)) {
                  unint64_t v306 = 2 * *((void *)&v722 + 1);
                }
                if (v306 <= v146 + 1) {
                  unint64_t v307 = v146 + 1;
                }
                else {
                  unint64_t v307 = v306;
                }
                BOOL v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v722, v307);
              }
              else
              {
                BOOL v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v722, v146 + 1);
                ++DWORD2(v723);
              }
            }
            unint64_t v146 = v723;
          }
          uint64_t v308 = *(void *)(v305 + 24 * v304 + 16);
          uint64_t v681 = v724;
          *(void *)(v724 + 8 * v146) = v308;
          if (v308) {
            BOOL v298 = (_anonymous_namespace_ *)(id)(v308 + 8);
          }
          *(void *)&long long v723 = ++v146;
          int v299 = ++DWORD2(v723);
          uint64_t v231 = v683;
          unsigned int v309 = *(_DWORD *)(v683 + 32);
          if (v309 <= (int)v301 + 1) {
            unsigned int v309 = v301 + 1;
          }
          while (1)
          {
            uint64_t v304 = (v301 + 1);
            if (v309 - 1 == v301) {
              break;
            }
            LODWORD(v301) = v301 + 1;
            unsigned int v310 = v304;
            if ((*(_DWORD *)(*(void *)(v683 + 16) + 24 * v304 + 8) & 0x80000000) != 0) {
              goto LABEL_490;
            }
          }
          unsigned int v310 = v309;
LABEL_490:
          LODWORD(v301) = v310;
        }
        while (v300 != v310);
      }
      if (v146 < 2) {
        goto LABEL_546;
      }
      int v692 = v299;
      unint64_t v311 = 0;
      uint64_t v312 = v681;
      uint64_t v687 = v681 - 8;
      unint64_t v313 = 1;
      while (1)
      {
        if (v146 <= v311)
        {
          uint64_t v725 = 0;
          long long v731 = 0u;
          long long v732 = 0u;
          memset(v730, 0, sizeof(v730));
          *(_OWORD *)uuid_t out = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v734 = 136315906;
          *(void *)&v734[4] = "operator[]";
          __int16 v735 = 1024;
          int v736 = 789;
          __int16 v737 = 2048;
          unint64_t v738 = v311;
          __int16 v739 = 2048;
          unint64_t v740 = v146;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_800;
        }
        unint64_t v670 = v311;
        uint64_t v314 = *(float32x4_t **)(v312 + 8 * v311);
        v721 = v314;
        if (v314) {
          uint64_t v315 = &v314->u32[2];
        }
        unint64_t v316 = v146;
        do
        {
          if (v146 <= --v316)
          {
            uint64_t v725 = 0;
            long long v731 = 0u;
            long long v732 = 0u;
            memset(v730, 0, sizeof(v730));
            *(_OWORD *)uuid_t out = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v734 = 136315906;
            *(void *)&v734[4] = "operator[]";
            __int16 v735 = 1024;
            int v736 = 789;
            __int16 v737 = 2048;
            unint64_t v738 = v316;
            __int16 v739 = 2048;
            unint64_t v740 = v146;
            _os_log_send_and_compose_impl();
            uint64_t v97 = (re *)_os_crash_msg();
            __break(1u);
            goto LABEL_793;
          }
          v317 = *(float32x4_t **)(v312 + 8 * v316);
          if (v317) {
            id v318 = &v317->u32[2];
          }
          float32x4_t v319 = vmulq_f32(v314[7], v317[7]);
          if ((float)(1.0
                     - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v319, 2), vaddq_f32(v319, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v319.f32, 1))).f32[0]) <= *(float *)&dword_26AF7FBEC)
          {
            uint64_t v320 = v317[3].u32[2];
            if (v320)
            {
              uint64_t v321 = 0;
              v322 = (int *)(v317[2].i64[1] + 8);
              while (1)
              {
                int v323 = *v322;
                v322 += 6;
                if (v323 < 0) {
                  break;
                }
                if (v320 == ++v321)
                {
                  LODWORD(v321) = v317[3].i32[2];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v321) = 0;
            }
            unsigned int v324 = v317[3].u32[2];
            if (v320 != v321)
            {
              uint64_t v325 = v321;
              do
              {
                *(void *)uuid_t out = *(void *)(v317[2].i64[1] + 24 * v325 + 16);
                re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>(v671 + 184 * v673 + 120, (uint64_t *)out, (uint64_t *)&v721);
                unsigned int v324 = v317[3].u32[2];
                if (v324 <= (int)v321 + 1) {
                  __int32 v326 = v321 + 1;
                }
                else {
                  __int32 v326 = v317[3].i32[2];
                }
                int v327 = v321;
                while (1)
                {
                  uint64_t v325 = (v327 + 1);
                  if (v326 - 1 == v327) {
                    break;
                  }
                  ++v327;
                  LODWORD(v321) = v325;
                  if ((*(_DWORD *)(v317[2].i64[1] + 24 * v325 + 8) & 0x80000000) != 0) {
                    goto LABEL_517;
                  }
                }
                LODWORD(v321) = v326;
LABEL_517:
                ;
              }
              while (v320 != v321);
            }
            uint64_t v328 = 0;
            if (v324)
            {
              v329 = (int *)(v317[2].i64[1] + 8);
              uint64_t v231 = v683;
              while (1)
              {
                int v330 = *v329;
                v329 += 6;
                if (v330 < 0) {
                  break;
                }
                if (v324 == ++v328)
                {
                  LODWORD(v328) = v324;
                  break;
                }
              }
            }
            else
            {
              uint64_t v231 = v683;
            }
            if (v324 != v328)
            {
              uint64_t v331 = v328;
              uint64_t v332 = v317[2].i64[1];
              do
              {
                re::ecs2::CAMeshCodirectionalGroup::add((re::ecs2::CAMeshCodirectionalGroup *)v314, *(re::ecs2::Entity **)(v332 + 24 * v331 + 16));
                uint64_t v332 = v317[2].i64[1];
                if (v317[3].i32[2] <= (v328 + 1)) {
                  __int32 v333 = v328 + 1;
                }
                else {
                  __int32 v333 = v317[3].i32[2];
                }
                int v334 = v328;
                while (1)
                {
                  uint64_t v331 = (v334 + 1);
                  if (v333 - 1 == v334) {
                    break;
                  }
                  ++v334;
                  LODWORD(v328) = v331;
                  if ((*(_DWORD *)(v332 + 24 * v331 + 8) & 0x80000000) != 0) {
                    goto LABEL_534;
                  }
                }
                LODWORD(v328) = v333;
LABEL_534:
                ;
              }
              while (v324 != v328);
            }
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)&v317[1].i64[1]);
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)&v317[21].i64[1]);
            v317[9].i8[0] = 1;
            if (v146 - 1 <= v316)
            {
              uint64_t v335 = *(void *)(v687 + 8 * v146);
              if (v335) {
                goto LABEL_539;
              }
            }
            else
            {
              uint64_t v335 = *(void *)(v681 + 8 * v316);
              *(void *)(v681 + 8 * v316) = *(void *)(v687 + 8 * v146);
              *(void *)(v687 + 8 * v146) = v335;
              if (!v335) {
                goto LABEL_540;
              }
LABEL_539:

              *(void *)(v687 + 8 * v146) = 0;
            }
LABEL_540:
            ++v692;
            uint64_t v336 = &v317->u32[2];
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v231, (unint64_t)v317);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v682, (unint64_t)v317);

            re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v682, (uint64_t *)&v721);
            --v146;
            uint64_t v312 = v681;
          }
        }
        while (v313 < v316);
        if (v314[9].i8[0])
        {
          re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)v314, v337);
          unint64_t v313 = v670;
        }
        unint64_t v311 = v313;

        if (++v313 >= v146)
        {
          uint64_t v681 = v724;
          int v299 = v692;
LABEL_546:
          *(void *)&long long v723 = 0;
          if (v146)
          {
            uint64_t v338 = 8 * v146;
            uint64_t v339 = v681;
            do
            {
              if (*(void *)v339)
              {

                *(void *)uint64_t v339 = 0;
              }
              v339 += 8;
              v338 -= 8;
            }
            while (v338);
          }
          DWORD2(v723) = v299 + 1;
          if ((void)v722) {
            BOOL v340 = v681 == 0;
          }
          else {
            BOOL v340 = 1;
          }
          if (!v340) {
            (*(void (**)(void))(*(void *)v722 + 40))();
          }
LABEL_556:
          re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v231, v262);
          uint64_t v341 = v671 + 184 * v673;
          unsigned int v344 = *(_DWORD *)(v341 + 104);
          uint64_t v343 = (unsigned int *)(v341 + 104);
          uint64_t v342 = v344;
          if (v344)
          {
            uint64_t v345 = 0;
            v346 = (int *)(*(void *)(v671 + 184 * v673 + 88) + 8);
            while (1)
            {
              int v347 = *v346;
              v346 += 6;
              if (v347 < 0) {
                break;
              }
              if (v342 == ++v345)
              {
                LODWORD(v345) = v342;
                break;
              }
            }
          }
          else
          {
            LODWORD(v345) = 0;
          }
          if (v342 != v345)
          {
            uint64_t v348 = v345;
            v349 = (void *)(v671 + 184 * v673 + 88);
            do
            {
              uint64_t v350 = *(void *)(*v349 + 24 * v348 + 16);
              if (v350)
              {
                id v351 = (id)(v350 + 8);
                re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder((re::ecs2::CAMeshCodirectionalGroup *)v350);
              }
              else
              {
                re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(0);
              }
              if (*v343 <= (int)v345 + 1) {
                int v352 = v345 + 1;
              }
              else {
                int v352 = *v343;
              }
              while (1)
              {
                uint64_t v348 = (v345 + 1);
                if (v352 - 1 == v345) {
                  break;
                }
                LODWORD(v345) = v345 + 1;
                int v353 = v348;
                if ((*(_DWORD *)(*v349 + 24 * v348 + 8) & 0x80000000) != 0) {
                  goto LABEL_574;
                }
              }
              int v353 = v352;
LABEL_574:
              LODWORD(v345) = v353;
            }
            while (v342 != v353);
          }
          re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v726);
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v715);
          v688 = v343;
          if (*(_DWORD *)(v671 + 184 * v673 + 100))
          {
            unint64_t v356 = (8 * *(_DWORD *)(v231 + 28)) | 1u;
            *(void *)&out[8] = 0;
            *(void *)&v730[0] = 0;
            DWORD2(v730[0]) = 0;
            *(void *)&v730[1] = 0;
            *(void *)uuid_t out = v675;
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(out, v356);
            ++DWORD2(v730[0]);
            *(void *)&long long v727 = 0;
            DWORD2(v727) = 0;
            *(void *)&long long v728 = 0;
            long long v726 = (unint64_t)v675;
            re::DynamicArray<float *>::setCapacity(&v726, 0x40uLL);
            ++DWORD2(v727);
            uint64_t v357 = *v343;
            if (v357)
            {
              uint64_t v358 = 0;
              char v359 = (int *)(*(void *)(v671 + 184 * v673 + 88) + 8);
              while (1)
              {
                int v360 = *v359;
                v359 += 6;
                if (v360 < 0) {
                  break;
                }
                if (v357 == ++v358)
                {
                  LODWORD(v358) = *v343;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v358) = 0;
            }
            if (v357 != v358)
            {
              uint64_t v362 = v358;
              long long v363 = (void *)(v671 + 184 * v673 + 88);
              do
              {
                uint64_t v364 = *(void *)(*v363 + 24 * v362 + 16);
                if (v364)
                {
                  id v365 = (id)(v364 + 8);
                  re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(v364, v675, (uint64_t)out, (uint64_t)&v726);
                }
                else
                {
                  re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(0, v675, (uint64_t)out, (uint64_t)&v726);
                }
                if (*v343 <= (int)v358 + 1) {
                  int v366 = v358 + 1;
                }
                else {
                  int v366 = *v343;
                }
                while (1)
                {
                  uint64_t v362 = (v358 + 1);
                  if (v366 - 1 == v358) {
                    break;
                  }
                  LODWORD(v358) = v358 + 1;
                  int v367 = v362;
                  if ((*(_DWORD *)(*v363 + 24 * v362 + 8) & 0x80000000) != 0) {
                    goto LABEL_595;
                  }
                }
                int v367 = v366;
LABEL_595:
                LODWORD(v358) = v367;
              }
              while (v357 != v367);
            }
            *(void *)&long long v717 = 0;
            *(void *)&long long v716 = 0;
            long long v715 = 0uLL;
            DWORD2(v716) = 0;
            if (*(void *)out)
            {
              unint64_t v368 = *(void *)&v730[0];
              *(void *)&long long v715 = *(void *)out;
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v715, *(unint64_t *)&v730[0]);
              ++DWORD2(v716);
              uint64_t v369 = v716;
              if (v368 >= (unint64_t)v716)
              {
                re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v715, v368);
                uint64_t v373 = v716;
                uint64_t v374 = v717;
                uint64_t v375 = (uint64_t *)(*(void *)&v730[1] + 8 * v716);
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)&v730[1], v375, (uint64_t *)v717);
                if (v373 != v368)
                {
                  v376 = (uint64_t *)(v374 + 8 * v373);
                  uint64_t v377 = 8 * v368 - 8 * v373;
                  do
                  {
                    uint64_t v378 = *v375;
                    uint64_t *v376 = *v375;
                    if (v378) {
                      id v379 = (id)(v378 + 8);
                    }
                    ++v375;
                    ++v376;
                    v377 -= 8;
                  }
                  while (v377);
                }
              }
              else
              {
                uint64_t v370 = v717;
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)&v730[1], (uint64_t *)(*(void *)&v730[1] + 8 * v368), (uint64_t *)v717);
                uint64_t v371 = v370 + 8 * v368;
                uint64_t v372 = 8 * v369 - 8 * v368;
                do
                {
                  if (*(void *)v371)
                  {

                    *(void *)uint64_t v371 = 0;
                  }
                  v371 += 8;
                  v372 -= 8;
                }
                while (v372);
              }
              *(void *)&long long v716 = v368;
            }
            re::DynamicArray<char const*>::DynamicArray((uint64_t)&v717 + 8, (uint64_t *)&v726);
            if ((void)v726 && (void)v728) {
              (*(void (**)(void))(*(void *)v726 + 40))();
            }
            re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)out);
            if (*((void *)&v718 + 1))
            {
              long long v380 = v720;
              uint64_t v381 = 8 * *((void *)&v718 + 1);
              while (1)
              {
                uint64_t v382 = *v380;
                unsigned int v383 = (const re::ecs2::Entity *)((char *)*v380 + 32);
                uint64_t v384 = re::ecs2::EntityComponentCollection::get(v383, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v384) {
                  break;
                }
LABEL_645:
                ++v380;
                v381 -= 8;
                if (!v381) {
                  goto LABEL_649;
                }
              }
              uint64_t v385 = v384;
              uint64_t v386 = (void *)(v384 + 176);
              uint64_t v387 = *(void *)(v384 + 176);
              int v693 = *(_DWORD *)(v384 + 160);
              LOBYTE(v726) = *(unsigned char *)(v384 + 416);
              int v388 = v726;
              if ((_BYTE)v726)
              {
                long long v389 = *(_OWORD *)(v384 + 448);
                long long v727 = *(_OWORD *)(v384 + 432);
                long long v728 = v389;
              }
              LOBYTE(v730[0]) = 0;
              LOBYTE(v731) = 0;
              char v733 = 0;
              *(void *)uuid_t out = 0;
              *(_WORD *)&out[8] = 0;
              re::ecs2::MeshSortGroupToken::operator=(v384 + 176, (uint64_t)out);
              *(_DWORD *)(v385 + 160) = 0;
              v390 = *(re::ecs2::SortingTransformCache **)(v671 + 184 * v673 + 176);
              uint64_t v391 = re::ecs2::EntityComponentCollection::get(v383, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v391 && *(unsigned char *)(v391 + 96))
              {
                re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, v382, v390);
                BOOL v392 = out[0] == 0;
              }
              else
              {
                BOOL v392 = 1;
              }
              int v393 = *(unsigned __int8 *)(v385 + 416);
              if (*(unsigned char *)(v385 + 416) || !v392)
              {
                if (*(unsigned char *)(v385 + 416)) {
                  BOOL v394 = v392;
                }
                else {
                  BOOL v394 = 0;
                }
                if (v394)
                {
                  int v393 = 0;
                  *(unsigned char *)(v385 + 416) = 0;
                }
                else
                {
                  if (*(unsigned char *)(v385 + 416)) {
                    char v395 = 1;
                  }
                  else {
                    char v395 = v392;
                  }
                  if ((v395 & 1) == 0)
                  {
                    int v393 = 1;
                    *(unsigned char *)(v385 + 416) = 1;
                  }
                  float32x4_t v361 = (float32x4_t)v730[0];
                  long long v396 = v730[1];
                  *(_OWORD *)(v385 + 432) = v730[0];
                  *(_OWORD *)(v385 + 448) = v396;
                }
              }
              else
              {
                int v393 = 0;
              }
              if (v387 != *v386 || v693 != *(_DWORD *)(v385 + 160)) {
                goto LABEL_643;
              }
              if (v388) {
                BOOL v397 = v393 == 0;
              }
              else {
                BOOL v397 = 1;
              }
              if (v397)
              {
                if (v393 | v388) {
                  goto LABEL_643;
                }
              }
              else
              {
                if (re::SortingPlane::operator==((float *)&v727, (float *)(v385 + 432))) {
                  goto LABEL_644;
                }
LABEL_643:
                re::ecs2::Component::markDirty((void *)v385);
              }
LABEL_644:
              uint64_t v343 = v688;
              goto LABEL_645;
            }
          }
          else
          {
            long long v715 = 0uLL;
            DWORD2(v716) = 0;
            *(void *)&long long v716 = 0;
            v720 = 0;
            float32x4_t v361 = 0uLL;
            long long v717 = 0u;
            long long v718 = 0u;
            int v719 = 0;
          }
LABEL_649:
          if ((void)v716)
          {
            v399 = (__n128 **)v717;
            uint64_t v400 = 8 * v716;
            do
            {
              v401 = *v399;
              if (*v399)
              {
                v402 = &v401->n128_i8[8];
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(v401, v403, v404);
              }
              else
              {
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(0, v354, v355);
              }
              ++v399;
              v400 -= 8;
            }
            while (v400);
          }
          uint64_t v405 = *v343;
          if (v405)
          {
            uint64_t v406 = 0;
            uint64_t v408 = v671;
            uint64_t v407 = v673;
            v409 = (int *)(*(void *)(v671 + 184 * v673 + 88) + 8);
            while (1)
            {
              int v410 = *v409;
              v409 += 6;
              if (v410 < 0) {
                break;
              }
              if (v405 == ++v406)
              {
                LODWORD(v406) = *v343;
                break;
              }
            }
          }
          else
          {
            LODWORD(v406) = 0;
            uint64_t v408 = v671;
            uint64_t v407 = v673;
          }
          if (v405 == v406)
          {
LABEL_662:
            re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(v682);
            if (*((void *)&v717 + 1))
            {
              if (v720) {
                (*(void (**)(void))(**((void **)&v717 + 1) + 40))();
              }
              v720 = 0;
              long long v718 = 0uLL;
              *((void *)&v717 + 1) = 0;
              ++v719;
            }
            re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v715);
            uint64_t v97 = *(re **)&v703.f64[0];
            if (*(void *)&v703.f64[0] && v706) {
              uint64_t v97 = (re *)(*(uint64_t (**)(void))(**(void **)&v703.f64[0] + 40))();
            }
            uint64_t v98 = a1;
            unsigned int v411 = *(_DWORD *)(a1 + 88);
            int v412 = v668;
            if (v411 <= v668 + 1) {
              unsigned int v411 = v668 + 1;
            }
            while (1)
            {
              uint64_t v155 = (v412 + 1);
              if (v411 - 1 == v412) {
                break;
              }
              ++v412;
              unsigned int v413 = v155;
              if ((*(_DWORD *)(*(void *)(a1 + 72) + 184 * v155 + 8) & 0x80000000) != 0) {
                goto LABEL_675;
              }
            }
            unsigned int v413 = v411;
LABEL_675:
            LODWORD(v141) = v413;
            if (v667 == v413) {
              goto LABEL_253;
            }
            goto LABEL_269;
          }
          uint64_t v414 = v406;
          v415 = (void *)(v408 + 184 * v407 + 88);
          unsigned int v684 = *v343;
          while (2)
          {
            uint64_t v416 = *(void *)(*v415 + 24 * v414 + 16);
            if (v416) {
              id v417 = (id)(v416 + 8);
            }
            if (*(unsigned char *)(v416 + 144)) {
              float32x4_t v361 = re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)v416, v361);
            }
            if (*(unsigned char *)(v416 + 145))
            {
              uint64_t v418 = *(unsigned int *)(v416 + 232);
              if (v418)
              {
                uint64_t v419 = 0;
                v420 = (int *)(*(void *)(v416 + 216) + 8);
                while (1)
                {
                  int v421 = *v420;
                  v420 += 6;
                  if (v421 < 0) {
                    break;
                  }
                  if (v418 == ++v419)
                  {
                    LODWORD(v419) = *(_DWORD *)(v416 + 232);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v419) = 0;
              }
              if (v418 != v419)
              {
                uint64_t v422 = v419;
                do
                {
                  re::ecs2::CAMeshSortGroup::updateGroupToken(*(float32x4_t **)(*(void *)(v416 + 216) + 24 * v422 + 16));
                  if (*(_DWORD *)(v416 + 232) <= (v419 + 1)) {
                    int v423 = v419 + 1;
                  }
                  else {
                    int v423 = *(_DWORD *)(v416 + 232);
                  }
                  int v424 = v419;
                  while (1)
                  {
                    uint64_t v422 = (v424 + 1);
                    if (v423 - 1 == v424) {
                      break;
                    }
                    ++v424;
                    LODWORD(v419) = v422;
                    if ((*(_DWORD *)(*(void *)(v416 + 216) + 24 * v422 + 8) & 0x80000000) != 0) {
                      goto LABEL_699;
                    }
                  }
                  LODWORD(v419) = v423;
LABEL_699:
                  ;
                }
                while (v418 != v419);
              }
              uint64_t v425 = *(unsigned int *)(v416 + 56);
              if (v425)
              {
                uint64_t v426 = 0;
                v427 = (int *)(*(void *)(v416 + 40) + 8);
                while (1)
                {
                  int v428 = *v427;
                  v427 += 6;
                  if (v428 < 0) {
                    break;
                  }
                  if (v425 == ++v426)
                  {
                    LODWORD(v426) = *(_DWORD *)(v416 + 56);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v426) = 0;
              }
              if (v425 == v426)
              {
LABEL_707:
                *(unsigned char *)(v416 + 145) = 0;
                uint64_t v343 = v688;
                LODWORD(v405) = v684;
                goto LABEL_708;
              }
              uint64_t v438 = v426;
              while (2)
              {
                uint64_t v439 = *(void *)(*(void *)(v416 + 40) + 24 * v438 + 16);
                LOBYTE(v722) = 0;
                float32x4_t v694 = *((float32x4_t *)v440 + 19);
                re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v439, *(re::ecs2::SortingTransformCache **)(v416 + 432));
                float32x4_t v441 = (float32x4_t)v730[1];
                if (*(_DWORD *)(v416 + 52) != 1)
                {
                  float32x4_t v443 = *(float32x4_t *)(v416 + 112);
                  float32x4_t v442 = *(float32x4_t *)(v416 + 128);
                  float32x4_t v444 = vmulq_f32(v443, vsubq_f32((float32x4_t)v730[1], v442));
                  float32x4_t v441 = vaddq_f32(v442, vmulq_n_f32(v443, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v444, 2), vaddq_f32(v444, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v444.f32, 1))).f32[0]));
                }
                *((float32x4_t *)v440 + 19) = v441;
                ++re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides;
                out[0] = *((unsigned char *)v440 + 416);
                int v445 = out[0];
                if (out[0])
                {
                  long long v446 = *((_OWORD *)v440 + 28);
                  v730[0] = *((_OWORD *)v440 + 27);
                  v730[1] = v446;
                }
                v447 = *(re::ecs2::SortingTransformCache **)(v416 + 432);
                uint64_t v448 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v439 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v448 && *(unsigned char *)(v448 + 96))
                {
                  re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)&v726, (const re::ecs2::Entity *)v439, v447);
                  int v449 = v726;
                }
                else
                {
                  int v449 = 0;
                }
                int v450 = *((unsigned __int8 *)v440 + 416);
                if (v450 | v449)
                {
                  if (*((unsigned char *)v440 + 416)) {
                    BOOL v451 = v449 == 0;
                  }
                  else {
                    BOOL v451 = 0;
                  }
                  if (v451)
                  {
                    int v450 = 0;
                    *((unsigned char *)v440 + 416) = 0;
                  }
                  else
                  {
                    if (*((unsigned char *)v440 + 416)) {
                      BOOL v452 = 1;
                    }
                    else {
                      BOOL v452 = v449 == 0;
                    }
                    if (!v452)
                    {
                      int v450 = 1;
                      *((unsigned char *)v440 + 416) = 1;
                    }
                    long long v453 = v728;
                    *((_OWORD *)v440 + 27) = v727;
                    *((_OWORD *)v440 + 28) = v453;
                  }
                }
                else
                {
                  int v450 = 0;
                }
                float32x4_t v361 = (float32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v694, *((float32x4_t *)v440 + 19)));
                v361.i32[3] = v361.i32[2];
                v361.i32[0] = vmaxvq_u32((uint32x4_t)v361);
                if (v361.i32[0] < 0 || (_BYTE)v722) {
                  goto LABEL_767;
                }
                if (v445) {
                  BOOL v454 = v450 == 0;
                }
                else {
                  BOOL v454 = 1;
                }
                if (v454)
                {
                  if (v450 | v445) {
                    goto LABEL_767;
                  }
                }
                else
                {
                  if (re::SortingPlane::operator==((float *)v730, (float *)v440 + 108)) {
                    goto LABEL_768;
                  }
LABEL_767:
                  re::ecs2::Component::markDirty(v440);
                  ++re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied;
                }
LABEL_768:
                if (*(_DWORD *)(v416 + 56) <= (v426 + 1)) {
                  int v455 = v426 + 1;
                }
                else {
                  int v455 = *(_DWORD *)(v416 + 56);
                }
                while (1)
                {
                  uint64_t v438 = (v426 + 1);
                  if (v455 - 1 == v426) {
                    break;
                  }
                  LODWORD(v426) = v426 + 1;
                  int v456 = v438;
                  if ((*(_DWORD *)(*(void *)(v416 + 40) + 24 * v438 + 8) & 0x80000000) != 0) {
                    goto LABEL_775;
                  }
                }
                int v456 = v455;
LABEL_775:
                LODWORD(v426) = v456;
                if (v425 == v456) {
                  goto LABEL_707;
                }
                continue;
              }
            }
LABEL_708:
            uint64_t v429 = *(unsigned int *)(v416 + 232);
            if (v429)
            {
              uint64_t v430 = 0;
              v431 = (int *)(*(void *)(v416 + 216) + 8);
              while (1)
              {
                int v432 = *v431;
                v431 += 6;
                if (v432 < 0) {
                  break;
                }
                if (v429 == ++v430)
                {
                  LODWORD(v430) = *(_DWORD *)(v416 + 232);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v430) = 0;
            }
            if (v429 == v430)
            {
              if (!v416)
              {
LABEL_728:
                if (*v343 <= (int)v406 + 1) {
                  int v436 = v406 + 1;
                }
                else {
                  int v436 = *v343;
                }
                while (1)
                {
                  uint64_t v414 = (v406 + 1);
                  if (v436 - 1 == v406) {
                    break;
                  }
                  LODWORD(v406) = v406 + 1;
                  int v437 = v414;
                  if ((*(_DWORD *)(*v415 + 24 * v414 + 8) & 0x80000000) != 0) {
                    goto LABEL_735;
                  }
                }
                int v437 = v436;
LABEL_735:
                LODWORD(v406) = v437;
                if (v405 == v437) {
                  goto LABEL_662;
                }
                continue;
              }
            }
            else
            {
              uint64_t v433 = v430;
              do
              {
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(*(__n128 **)(*(void *)(v416 + 216) + 24 * v433 + 16), v354, v355);
                if (*(_DWORD *)(v416 + 232) <= (v430 + 1)) {
                  int v434 = v430 + 1;
                }
                else {
                  int v434 = *(_DWORD *)(v416 + 232);
                }
                int v435 = v430;
                while (1)
                {
                  uint64_t v433 = (v435 + 1);
                  if (v434 - 1 == v435) {
                    break;
                  }
                  ++v435;
                  LODWORD(v430) = v433;
                  if ((*(_DWORD *)(*(void *)(v416 + 216) + 24 * v433 + 8) & 0x80000000) != 0) {
                    goto LABEL_726;
                  }
                }
                LODWORD(v430) = v434;
LABEL_726:
                ;
              }
              while (v429 != v430);
            }
            break;
          }

          goto LABEL_728;
        }
      }
    }
    uint64_t v223 = v183;
    while (1)
    {
      uint64_t v224 = *(void *)(*(void *)(v178 + 16) + 24 * v223 + 16);
      *(void *)uuid_t out = v224;
      if (v224)
      {
        id v225 = (id)(v224 + 8);
        if (!*(_DWORD *)(v224 + 52)) {
          re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)&v726, (uint64_t *)out);
        }
      }
      else if (!MEMORY[0x34])
      {
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)&v726, (uint64_t *)out);
        goto LABEL_361;
      }

LABEL_361:
      if (*(_DWORD *)(v178 + 32) <= (v183 + 1)) {
        int v226 = v183 + 1;
      }
      else {
        int v226 = *(_DWORD *)(v178 + 32);
      }
      while (1)
      {
        uint64_t v223 = (v183 + 1);
        if (v226 - 1 == v183) {
          break;
        }
        LODWORD(v183) = v183 + 1;
        int v227 = v223;
        if ((*(_DWORD *)(*(void *)(v178 + 16) + 24 * v223 + 8) & 0x80000000) != 0) {
          goto LABEL_368;
        }
      }
      int v227 = v226;
LABEL_368:
      LODWORD(v183) = v227;
      if (v182 == v227) {
        goto LABEL_307;
      }
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 184 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 184 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 184 * v3 + 16) == a2) {
        return v5 + 184 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 184 * v3 + 24;
}

void re::ecs2::WorldSortingState::removeEntityFromTracking(re::ecs2::WorldSortingState *this, re::ecs2::Entity *a2)
{
  uint64_t v4 = (char *)this + 96;
  uint64_t v5 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 96, (unint64_t)a2);
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v10 = v6;
    if (v6)
    {
      id v7 = (id)(v6 + 8);
      re::ecs2::CAMeshCodirectionalGroup::remove((re::ecs2::CAMeshCodirectionalGroup *)v6, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v4, (unint64_t)a2);
      re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)this + 48, &v10);
    }
    else
    {
      re::ecs2::CAMeshCodirectionalGroup::remove(0, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v4, (unint64_t)a2);
      re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)this + 48, &v10);
    }
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
}

void anonymous namespace'::cleanSortingComponentIfCAREManaged(_anonymous_namespace_ *this, re::ecs2::MeshSortingComponent *a2)
{
  if (this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      if (*((unsigned char *)this + 25) == 5) {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
    }
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 32 * v3 + 16) != a2)
  {
    while (1)
    {
      uint64_t v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 32 * v3 + 16) == a2) {
        return v5 + 32 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 32 * v3 + 24;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = v7 + 32 * v6;
      if (*(void *)(v8 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v12 = *(void *)(a1 + 16) + 32 * v6;
        int v13 = *(_DWORD *)(v12 + 8);
        if (v13 < 0)
        {
          *(_DWORD *)(v12 + 8) = v13 & 0x7FFFFFFF;
          uint64_t v16 = *(void *)(v12 + 24);
          uint64_t v15 = (void *)(v12 + 24);
          uint64_t v14 = v16;
          if (v16)
          {

            void *v15 = 0;
          }
        }
        int v17 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v6 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v17 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v6;
          int v10 = *(_DWORD *)(v7 + 32 * v6 + 8);
          uint64_t v6 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          uint64_t v11 = v7 + 32 * v6;
          if (*(void *)(v11 + 16) == a2)
          {
            *(_DWORD *)(v7 + 32 * v9 + 8) = *(_DWORD *)(v7 + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::CAMeshCodirectionalGroup::remove(re::ecs2::CAMeshCodirectionalGroup *this, re::ecs2::Entity *a2)
{
  unsigned int v9 = a2;
  int v3 = *((_DWORD *)this + 16);
  uint64_t result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 24, (uint64_t *)&v9);
  if (*((_DWORD *)this + 16) != v3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 344, (uint64_t *)&v9);
    *((unsigned char *)this + 144) = 1;
    uint64_t v5 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 152, (unint64_t)v9);
    if (v5)
    {
      uint64_t v6 = *v5;
      uint64_t v8 = v6;
      if (v6)
      {
        id v7 = (id)(v6 + 8);
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)this + 296, &v8);
        re::ecs2::CAMeshSortGroup::remove((re::ecs2::CAMeshSortGroup *)v6, v9);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)this + 152, (unint64_t)v9);
      }
      else
      {
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)this + 296, &v8);
        re::ecs2::CAMeshSortGroup::remove(0, v9);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)this + 152, (unint64_t)v9);
      }
    }
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 248, (uint64_t *)&v9);
  }
  return result;
}

uint64_t re::ecs2::CAMeshCodirectionalGroup::add(re::ecs2::CAMeshCodirectionalGroup *this, re::ecs2::Entity *a2)
{
  id v7 = a2;
  int v3 = *((_DWORD *)this + 16);
  uint64_t result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 24, (uint64_t *)&v7);
  if (*((_DWORD *)this + 16) != v3)
  {
    v8.i64[0] = (uint64_t)v7;
    uint64_t result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 344, (uint64_t *)&v8);
    if (*((_DWORD *)this + 13) == 1)
    {
      uint64_t result = (uint64_t)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v8, v7, *((re::ecs2::SortingTransformCache **)this + 54));
      long long v6 = v9;
      long long v5 = v10;
      *((_OWORD *)this + 5) = v9;
      *((_OWORD *)this + 6) = v5;
      *((_OWORD *)this + 7) = v6;
      *((_OWORD *)this + 8) = v5;
      *((unsigned char *)this + 145) = 1;
    }
    else
    {
      *((unsigned char *)this + 144) = 1;
    }
  }
  return result;
}

void re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(re::ecs2::CAMeshCodirectionalGroup *this)
{
  unint64_t v2 = *((unsigned int *)this + 13);
  int v3 = (void *)((char *)this + 392);
  int v4 = *((_DWORD *)this + 104);
  *((void *)this + 51) = 0;
  if (!v2) {
    ++v4;
  }
  *((_DWORD *)this + 104) = v4 + 1;
  if (*((void *)this + 50) < v2) {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 49, v2);
  }
  uint64_t v5 = *((unsigned int *)this + 14);
  if (v5)
  {
    uint64_t v6 = 0;
    id v7 = (int *)(*((void *)this + 5) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 6;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 14);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6)
  {
    unint64_t v9 = *((void *)this + 51);
  }
  else
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = *(const re::ecs2::Entity **)(*((void *)this + 5) + 24 * v10 + 16);
      uint64_t v12 = (_anonymous_namespace_ *)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v31, v11, *((re::ecs2::SortingTransformCache **)this + 54));
      float32x4_t v13 = v32;
      float32x4_t v15 = *((float32x4_t *)this + 7);
      float32x4_t v14 = *((float32x4_t *)this + 8);
      unint64_t v17 = *((void *)this + 50);
      unint64_t v16 = *((void *)this + 51);
      if (v16 >= v17)
      {
        unint64_t v18 = v16 + 1;
        if (v17 < v16 + 1)
        {
          float32x4_t v28 = *((float32x4_t *)this + 7);
          float32x4_t v29 = *((float32x4_t *)this + 8);
          float32x4_t v30 = v32;
          if (*v3)
          {
            unint64_t v19 = 2 * v17;
            if (!v17) {
              unint64_t v19 = 8;
            }
            if (v19 <= v18) {
              unint64_t v20 = v18;
            }
            else {
              unint64_t v20 = v19;
            }
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3, v20);
          }
          else
          {
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3, v18);
            ++*((_DWORD *)this + 104);
          }
          float32x4_t v14 = v29;
          float32x4_t v13 = v30;
          float32x4_t v15 = v28;
        }
        unint64_t v16 = *((void *)this + 51);
      }
      float32x4_t v21 = vmulq_f32(vsubq_f32(v13, v14), v15);
      uint64_t v22 = *((void *)this + 53) + 16 * v16;
      *(void *)uint64_t v22 = v11;
      *(_DWORD *)(v22 + 8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
      unint64_t v9 = v16 + 1;
      *((void *)this + 51) = v9;
      ++*((_DWORD *)this + 104);
      if (*((_DWORD *)this + 14) <= (v6 + 1)) {
        int v23 = v6 + 1;
      }
      else {
        int v23 = *((_DWORD *)this + 14);
      }
      while (1)
      {
        uint64_t v10 = (v6 + 1);
        if (v23 - 1 == v6) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        int v24 = v10;
        if ((*(_DWORD *)(*((void *)this + 5) + 24 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_33;
        }
      }
      int v24 = v23;
LABEL_33:
      LODWORD(v6) = v24;
    }
    while (v5 != v24);
  }
  unint64_t v25 = *((void *)this + 53);
  unint64_t v26 = 126 - 2 * __clz(v9);
  if (v9) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(v25, (float *)(v25 + 16 * v9), v27, 1);
}

void re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 372))
  {
    ++re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities;
  }
  else if (!*(_DWORD *)(a1 + 324))
  {
    return;
  }
  *(void *)&long long v197 = a3;
  if (*(_DWORD *)(a1 + 228) <= 1u) {
    signed int v8 = 1;
  }
  else {
    signed int v8 = *(_DWORD *)(a1 + 228);
  }
  long long v221 = 0u;
  long long v222 = 0u;
  unsigned int v223 = 0;
  uint64_t v224 = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v221, a2, v8);
  unsigned int v9 = *(_DWORD *)(a1 + 372);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v220 = 0;
  v217[1] = 0;
  unint64_t v218 = 0;
  int v219 = 0;
  v217[0] = a2;
  re::DynamicArray<float *>::setCapacity(v217, v10);
  ++v219;
  uint64_t v11 = *(unsigned int *)(a1 + 376);
  *(void *)&long long v195 = a4;
  uint64_t v12 = 0;
  if (v11)
  {
    float32x4_t v13 = (int *)(*(void *)(a1 + 360) + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 6;
      if (v14 < 0) {
        break;
      }
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 376);
        break;
      }
    }
  }
  if (v11 != v12)
  {
    uint64_t v15 = v12;
    do
    {
      v241.i64[0] = 0;
      v241.i64[0] = *(void *)(*(void *)(a1 + 360) + 24 * v15 + 16);
      re::DynamicArray<re::TransitionCondition *>::add(v217, &v241);
      if (*(_DWORD *)(a1 + 376) <= (v12 + 1)) {
        int v16 = v12 + 1;
      }
      else {
        int v16 = *(_DWORD *)(a1 + 376);
      }
      int v17 = v12;
      while (1)
      {
        uint64_t v15 = (v17 + 1);
        if (v16 - 1 == v17) {
          break;
        }
        ++v17;
        LODWORD(v12) = v15;
        if ((*(_DWORD *)(*(void *)(a1 + 360) + 24 * v15 + 8) & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }
      LODWORD(v12) = v16;
LABEL_25:
      ;
    }
    while (v11 != v12);
  }
  unint64_t v216 = 0;
  v213[1] = 0;
  uint64_t v214 = 0;
  int v215 = 0;
  uint64_t v209 = (re::Allocator *)a2;
  v213[0] = a2;
  re::DynamicArray<float *>::setCapacity(v213, v218);
  ++v215;
  uint64_t v18 = *(unsigned int *)(a1 + 376);
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = (int *)(*(void *)(a1 + 360) + 8);
    while (1)
    {
      int v21 = *v20;
      v20 += 6;
      if (v21 < 0) {
        break;
      }
      if (v18 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 376);
        break;
      }
    }
  }
  else
  {
    LODWORD(v19) = 0;
  }
  uint64_t v202 = a1 + 200;
  if (v18 != v19)
  {
    uint64_t v22 = v19;
    unint64_t v4 = a1 + 296;
    do
    {
      v241.i64[0] = 0;
      v241.i64[0] = *(void *)(*(void *)(a1 + 360) + 24 * v22 + 16);
      int v23 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 152, v241.u64[0]);
      if (v23)
      {
        uint64_t v24 = *v23;
        *(void *)&v225[0] = v24;
        if (v24)
        {
          id v25 = (id)(v24 + 8);
          re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(a1 + 296, (uint64_t *)v225);
          re::ecs2::CAMeshSortGroup::remove((re::ecs2::CAMeshSortGroup *)v24, (re::ecs2::Entity *)v241.i64[0]);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 152, v241.u64[0]);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;
        }
        else
        {
          re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(a1 + 296, (uint64_t *)v225);
          re::ecs2::CAMeshSortGroup::remove(0, (re::ecs2::Entity *)v241.i64[0]);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 152, v241.u64[0]);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 248, (uint64_t *)&v241);
      if (*(_DWORD *)(a1 + 376) <= (v19 + 1)) {
        int v26 = v19 + 1;
      }
      else {
        int v26 = *(_DWORD *)(a1 + 376);
      }
      while (1)
      {
        uint64_t v22 = (v19 + 1);
        if (v26 - 1 == v19) {
          break;
        }
        LODWORD(v19) = v19 + 1;
        int v27 = v22;
        if ((*(_DWORD *)(*(void *)(a1 + 360) + 24 * v22 + 8) & 0x80000000) != 0) {
          goto LABEL_45;
        }
      }
      int v27 = v26;
LABEL_45:
      LODWORD(v19) = v27;
    }
    while (v18 != v27);
  }
  uint64_t v203 = a1 + 248;
  unsigned int v28 = *(_DWORD *)(a1 + 276);
  *(void *)&v233[2] = 0;
  if (v28 <= 8) {
    unint64_t v29 = 8;
  }
  else {
    unint64_t v29 = v28;
  }
  memset(&v231[8], 0, 20);
  float32x4_t v30 = (re::Allocator *)a2;
  *(void *)uint64_t v231 = a2;
  re::DynamicArray<float *>::setCapacity(v231, v29);
  ++*(_DWORD *)&v231[24];
  memset(v211, 0, sizeof(v211));
  *(_DWORD *)unint64_t v212 = 0;
  *(void *)&v212[4] = 0x7FFFFFFFLL;
  uint64_t v31 = *(void *)(a1 + 200);
  unint64_t v32 = (unint64_t)&v221;
  if (v31)
  {
    signed int v33 = *(_DWORD *)(a1 + 228) <= 3u ? 3 : *(_DWORD *)(a1 + 228);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v211, v31, v33);
    re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy((uint64_t)v211, v202);
    signed int v34 = HIDWORD(v211[1]);
    if (HIDWORD(v211[1]))
    {
      unint64_t v35 = (unint64_t)&unk_26879F000;
      while (1)
      {
        if (!v218) {
          goto LABEL_95;
        }
        v226[0] = 0;
        memset(v225, 0, sizeof(v225));
        *(void *)&v226[1] = 0x7FFFFFFFLL;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v225, (uint64_t)v209, v34);
        if (v218) {
          break;
        }
LABEL_62:
        unsigned int v39 = HIDWORD(v225[1]);
        if (HIDWORD(v225[1]))
        {
          uint64_t v40 = *(unsigned int *)(a1 + 280);
          if (v40)
          {
            uint64_t v41 = 0;
            float32x4_t v42 = (int *)(*(void *)(a1 + 264) + 8);
            while (1)
            {
              int v43 = *v42;
              v42 += 6;
              if (v43 < 0) {
                break;
              }
              if (v40 == ++v41)
              {
                LODWORD(v41) = *(_DWORD *)(a1 + 280);
                break;
              }
            }
          }
          else
          {
            LODWORD(v41) = 0;
          }
          if (v40 != v41)
          {
            uint64_t v44 = v41;
            do
            {
              v241.i64[0] = 0;
              v241.i64[0] = *(void *)(*(void *)(a1 + 264) + 24 * v44 + 16);
              re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups((re::ecs2::CAMeshSortGroup **)v228, a1, (re::ecs2::Entity *)v241.i64[0], (uint64_t)v225, (uint64_t)&v221, v209);
              if (*(void *)v228)
              {

                re::DynamicArray<re::TransitionCondition *>::add(v231, &v241);
                ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
              }
              if (*(_DWORD *)(a1 + 280) <= (v41 + 1)) {
                int v45 = v41 + 1;
              }
              else {
                int v45 = *(_DWORD *)(a1 + 280);
              }
              while (1)
              {
                uint64_t v44 = (v41 + 1);
                if (v45 - 1 == v41) {
                  break;
                }
                LODWORD(v41) = v41 + 1;
                int v46 = v44;
                if ((*(_DWORD *)(*(void *)(a1 + 264) + 24 * v44 + 8) & 0x80000000) != 0) {
                  goto LABEL_80;
                }
              }
              int v46 = v45;
LABEL_80:
              LODWORD(v41) = v46;
            }
            while (v40 != v46);
          }
          if (*(void *)&v231[16])
          {
            unsigned int v47 = *(uint64_t **)&v233[2];
            unint64_t v4 = 8 * *(void *)&v231[16];
            do
            {
              v241.i64[0] = 0;
              uint64_t v48 = *v47++;
              v241.i64[0] = v48;
              re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v203, (uint64_t *)&v241);
              v4 -= 8;
            }
            while (v4);
          }
          *(void *)&v231[16] = 0;
          ++*(_DWORD *)&v231[24];
        }
        uint64_t v49 = *(void *)&v225[0];
        if (*(void *)&v211[0]) {
          BOOL v50 = *(void *)&v211[0] == *(void *)&v225[0];
        }
        else {
          BOOL v50 = 1;
        }
        if (v50)
        {
          *(void *)&v225[0] = *(void *)&v211[0];
          long long v51 = *(_OWORD *)((char *)v211 + 8);
          *(void *)&v211[0] = v49;
          *((void *)&v211[0] + 1) = *((void *)&v225[0] + 1);
          *(void *)&v211[1] = *(void *)&v225[1];
          *(_OWORD *)((char *)v225 + 8) = v51;
          unsigned int v52 = DWORD2(v211[1]);
          *((void *)&v211[1] + 1) = __PAIR64__(v39, DWORD2(v225[1]));
          *((void *)&v225[1] + 1) = __PAIR64__(v34, v52);
          uint64_t v53 = *(void *)v212;
          *(void *)unint64_t v212 = *(void *)v226;
          *(void *)int v226 = v53;
        }
        else if (*(void *)&v225[0])
        {
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy((uint64_t)v211, (uint64_t)v225);
          ++*(_DWORD *)&v212[8];
        }
        else
        {
          re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)v211);
        }
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v225);
        signed int v34 = HIDWORD(v211[1]);
        if (!HIDWORD(v211[1])) {
          goto LABEL_95;
        }
      }
      unint64_t v36 = v218 - 1;
      while (1)
      {
        unint64_t v37 = v218;
        if (v218 <= v36) {
          break;
        }
        re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups((re::ecs2::CAMeshSortGroup **)&v241, a1, *(re::ecs2::Entity **)(v220 + 8 * v36), (uint64_t)v211, (uint64_t)&v221, v209);
        uint64_t v38 = v241.i64[0];
        if (v241.i64[0])
        {
          re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)v225, (uint64_t *)&v241);
          ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
          re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)v217, v36);
        }
        if (--v36 == -1) {
          goto LABEL_62;
        }
      }
      *(void *)uint64_t v234 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v228 = 136315906;
      *(void *)&v228[4] = "operator[]";
      *(_WORD *)&v228[12] = 1024;
      *(_DWORD *)&v228[14] = 789;
      *(_WORD *)&v228[18] = 2048;
      *(void *)&v228[20] = v36;
      __int16 v229 = 2048;
      *(void *)int v230 = v37;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_337;
    }
  }
LABEL_95:
  if (*(void *)v231 && *(void *)&v233[2]) {
    (*(void (**)(void))(**(void **)v231 + 40))();
  }
  unsigned int v54 = *(_DWORD *)(a1 + 276);
  if (v54 <= 8) {
    unint64_t v55 = 8;
  }
  else {
    unint64_t v55 = v54;
  }
  v243.i64[0] = 0;
  v242.i64[0] = 0;
  v242.i32[2] = 0;
  float32x4_t v241 = (float32x4_t)(unint64_t)v209;
  re::DynamicArray<float *>::setCapacity(&v241, v55);
  ++v242.i32[2];
  unint64_t v56 = v218;
  if (v218)
  {
    unint64_t v57 = 0;
    do
    {
      *(void *)&v225[0] = 0;
      *(void *)&v225[0] = *(void *)(v220 + 8 * v57++);
      unint64_t v58 = v57;
      if (v57 < v56)
      {
        do
          re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(a1, *(re::ecs2::Entity **)&v225[0], *(re::ecs2::Entity **)(v220 + 8 * v58++), &v241, (uint64_t)&v221, (uint64_t)v30);
        while (v58 < v218);
      }
      uint64_t v59 = *(unsigned int *)(a1 + 280);
      if (v59)
      {
        uint64_t v60 = 0;
        uint64_t v61 = (int *)(*(void *)(a1 + 264) + 8);
        while (1)
        {
          int v62 = *v61;
          v61 += 6;
          if (v62 < 0) {
            break;
          }
          if (v59 == ++v60)
          {
            LODWORD(v60) = *(_DWORD *)(a1 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v60) = 0;
      }
      if (v59 != v60)
      {
        uint64_t v63 = v60;
        do
        {
          re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(a1, *(re::ecs2::Entity **)&v225[0], *(re::ecs2::Entity **)(*(void *)(a1 + 264) + 24 * v63 + 16), &v241, (uint64_t)&v221, (uint64_t)v209);
          if (*(_DWORD *)(a1 + 280) <= (v60 + 1)) {
            int v64 = v60 + 1;
          }
          else {
            int v64 = *(_DWORD *)(a1 + 280);
          }
          int v65 = v60;
          while (1)
          {
            uint64_t v63 = (v65 + 1);
            if (v64 - 1 == v65) {
              break;
            }
            ++v65;
            LODWORD(v60) = v63;
            if ((*(_DWORD *)(*(void *)(a1 + 264) + 24 * v63 + 8) & 0x80000000) != 0) {
              goto LABEL_121;
            }
          }
          LODWORD(v60) = v64;
LABEL_121:
          ;
        }
        while (v59 != v60);
      }
      float32x4_t v30 = v209;
      if (!*(void *)(a1 + 152)
        || (unint64_t v66 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (*(void *)&v225[0] ^ (*(void *)&v225[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                  * (*(void *)&v225[0] ^ (*(void *)&v225[0] >> 30))) >> 27)),
            uint64_t v67 = *(unsigned int *)(*(void *)(a1 + 160) + 4 * ((v66 ^ (v66 >> 31)) % *(unsigned int *)(a1 + 176))),
            v67 == 0x7FFFFFFF))
      {
LABEL_127:
        re::DynamicArray<re::TransitionCondition *>::add(v213, v225);
      }
      else
      {
        uint64_t v68 = *(void *)(a1 + 168);
        while (*(void *)(v68 + 32 * v67 + 16) != *(void *)&v225[0])
        {
          uint64_t v67 = *(_DWORD *)(v68 + 32 * v67 + 8) & 0x7FFFFFFF;
          if (v67 == 0x7FFFFFFF) {
            goto LABEL_127;
          }
        }
      }
      unint64_t v56 = v218;
    }
    while (v57 < v218);
  }
  if (v242.i64[0])
  {
    uint64_t v69 = (uint64_t *)v243.i64[0];
    uint64_t v70 = 8 * v242.i64[0];
    do
    {
      uint64_t v71 = *v69++;
      *(void *)&v225[0] = v71;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v203, (uint64_t *)v225);
      v70 -= 8;
    }
    while (v70);
  }
  if (v241.i64[0] && v243.i64[0]) {
    (*(void (**)(void))(*(void *)v241.i64[0] + 40))();
  }
  unint64_t v4 = *(unsigned int *)(a1 + 328);
  if (v4)
  {
    uint64_t v72 = 0;
    int v73 = (int *)(*(void *)(a1 + 312) + 8);
    while (1)
    {
      int v74 = *v73;
      v73 += 6;
      if (v74 < 0) {
        break;
      }
      if (v4 == ++v72)
      {
        uint64_t v72 = *(unsigned int *)(a1 + 328);
        break;
      }
    }
  }
  else
  {
    uint64_t v72 = 0;
  }
  if (v4 == v72)
  {
LABEL_142:
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1 + 296);
    unsigned int v75 = v223;
    if (!v223) {
      goto LABEL_280;
    }
    uint64_t v76 = 0;
    int v77 = (int *)(v222 + 8);
    while (1)
    {
      int v78 = *v77;
      v77 += 6;
      if (v78 < 0) {
        goto LABEL_281;
      }
      if (v223 == ++v76)
      {
        LODWORD(v76) = v223;
        goto LABEL_281;
      }
    }
  }
  uint64_t v79 = v72;
  *(void *)&long long v196 = &v228[8];
  *((void *)&v196 + 1) = &v231[8];
  *((void *)&v195 + 1) = *(unsigned int *)(a1 + 328);
  while (1)
  {
    uint64_t v80 = *(void *)(a1 + 312) + 24 * v79;
    uint64_t v83 = *(void *)(v80 + 16);
    uint64_t v81 = (uint64_t *)(v80 + 16);
    uint64_t v82 = v83;
    if (*(_DWORD *)(v83 + 300) <= 1u) {
      goto LABEL_264;
    }
    if (*(unsigned char *)(v82 + 208)) {
      re::ecs2::CAMeshSortGroup::recomputeTransform((re::ecs2::CAMeshSortGroup *)v82, v30);
    }
    re::ecs2::CAMeshSortGroup::updateGroupToken((float32x4_t *)v82);
    unsigned int v84 = *(_DWORD *)(v82 + 300);
    if (!v84)
    {
      *(void *)(v82 + 240) = 0;
      ++*(_DWORD *)(v82 + 248);
      ++re::ecs2::CARESortingDebugging::m_sortGroupsResorted;
LABEL_264:
      re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add((uint64_t)&v221, v81);
      goto LABEL_265;
    }
    *((void *)&v198 + 1) = v81;
    *((void *)&v197 + 1) = v72;
    unint64_t v36 = v82 + 272;
    v226[0] = 0;
    memset(v225, 0, sizeof(v225));
    *(void *)&v226[1] = 0x7FFFFFFFLL;
    uint64_t v85 = *(void *)(v82 + 272);
    if (v85)
    {
      if (v84 <= 3) {
        signed int v86 = 3;
      }
      else {
        signed int v86 = v84;
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v225, v85, v86);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)v225);
      unsigned int v87 = *(_DWORD *)(v82 + 300);
      if (DWORD2(v225[1]) < v87) {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)v225, v87);
      }
      unint64_t v88 = *(unsigned int *)(v82 + 304);
      if (v88)
      {
        uint64_t v89 = 0;
        for (unint64_t i = 0; i < v88; ++i)
        {
          uint64_t v91 = *(void *)(v82 + 288) + v89;
          if ((*(_DWORD *)(v91 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addAsCopy((uint64_t)v225, *(void *)v91 % (unint64_t)DWORD2(v225[1]), *(void *)v91, v91 + 16, (void *)(v91 + 16));
            unint64_t v88 = *(unsigned int *)(v82 + 304);
          }
          v89 += 24;
        }
      }
    }
    uint64_t v92 = *(void *)(v82 + 240);
    if (v92)
    {
      unint64_t v35 = v92 - 1;
      uint64_t v93 = 16 * v92 - 16;
      while (1)
      {
        unint64_t v37 = *(void *)(v82 + 240);
        if (v37 <= v35) {
          break;
        }
        BOOL v94 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v82 + 272, (uint64_t *)(*(void *)(v82 + 256) + v93));
        unint64_t v37 = *(void *)(v82 + 240);
        if (v94)
        {
          if (v37 <= v35) {
            goto LABEL_342;
          }
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)v225, (uint64_t *)(*(void *)(v82 + 256) + v93));
        }
        else
        {
          if (v37 <= v35) {
            goto LABEL_343;
          }
          uint64_t v95 = v37 - 1;
          if (v37 - 1 > v35)
          {
            *(_OWORD *)(*(void *)(v82 + 256) + v93) = *(_OWORD *)(*(void *)(v82 + 256) + 16 * v37 - 16);
            uint64_t v95 = *(void *)(v82 + 240) - 1;
          }
          *(void *)(v82 + 240) = v95;
          ++*(_DWORD *)(v82 + 248);
        }
        --v35;
        v93 -= 16;
        if (v35 == -1) {
          goto LABEL_174;
        }
      }
LABEL_337:
      *(void *)uint64_t v228 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v231 = 136315906;
      *(void *)&v231[4] = "operator[]";
      *(_WORD *)&v231[12] = 1024;
      *(_DWORD *)&v231[14] = 789;
      *(_WORD *)&v231[18] = 2048;
      *(void *)&v231[20] = v35;
      __int16 v232 = 2048;
      *(void *)uint64_t v233 = v37;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_338:
      *(void *)uint64_t v234 = 0;
      float32x4_t v244 = v123;
      float32x4_t v245 = v123;
      float32x4_t v242 = v123;
      float32x4_t v243 = v123;
      float32x4_t v241 = v123;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v228 = 136315906;
      *(void *)&v228[4] = "operator[]";
      *(_WORD *)&v228[12] = 1024;
      *(_DWORD *)&v228[14] = 789;
      *(_WORD *)&v228[18] = 2048;
      *(void *)&v228[20] = v37;
      __int16 v229 = 2048;
      *(void *)int v230 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_339;
    }
LABEL_174:
    unsigned int v96 = v226[0];
    if (v226[0])
    {
      uint64_t v97 = 0;
      uint64_t v98 = (int *)(*(void *)&v225[1] + 8);
      while (1)
      {
        int v99 = *v98;
        v98 += 6;
        if (v99 < 0) {
          break;
        }
        if (v226[0] == ++v97)
        {
          LODWORD(v97) = v226[0];
          break;
        }
      }
    }
    else
    {
      LODWORD(v97) = 0;
    }
    unint64_t v4 = v82 + 224;
    unint64_t v100 = *(void *)(v82 + 240);
    if (v226[0] != v97)
    {
      uint64_t v101 = v97;
      uint64_t v102 = *(void *)&v225[1];
      do
      {
        uint64_t v103 = *(void *)(v102 + 24 * v101 + 16);
        if (v100 >= *(void *)(v82 + 232))
        {
          re::DynamicArray<re::RigNodeConstraint>::growCapacity((void *)(v82 + 224), v100 + 1);
          unint64_t v100 = *(void *)(v82 + 240);
        }
        uint64_t v104 = *(void *)(v82 + 256) + 16 * v100;
        *(void *)uint64_t v104 = v103;
        *(_DWORD *)(v104 + 8) = 0;
        *(void *)(v82 + 240) = ++v100;
        ++*(_DWORD *)(v82 + 248);
        uint64_t v102 = *(void *)&v225[1];
        if (v226[0] <= (int)v97 + 1) {
          unsigned int v105 = v97 + 1;
        }
        else {
          unsigned int v105 = v226[0];
        }
        while (1)
        {
          uint64_t v101 = (v97 + 1);
          if (v105 - 1 == v97) {
            break;
          }
          LODWORD(v97) = v97 + 1;
          unsigned int v106 = v101;
          if ((*(_DWORD *)(*(void *)&v225[1] + 24 * v101 + 8) & 0x80000000) != 0) {
            goto LABEL_192;
          }
        }
        unsigned int v106 = v105;
LABEL_192:
        LODWORD(v97) = v106;
      }
      while (v96 != v106);
    }
    unint64_t v107 = *(void *)(v82 + 256);
    v241.i64[0] = v82;
    unint64_t v108 = 126 - 2 * __clz(v100);
    if (v100) {
      unint64_t v109 = (re::ecs2::CAMeshCodirectionalGroup *)v108;
    }
    else {
      unint64_t v109 = 0;
    }
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(v107, (const re::ecs2::Entity **)(v107 + 16 * v100), (re::ecs2::CAMeshCodirectionalGroup *)&v241, v109, 1);
    unint64_t v110 = *(void *)(v82 + 240);
    **((_OWORD **)&v196 + 1) = 0uLL;
    *(_DWORD *)(*((void *)&v196 + 1) + 16) = 0;
    *(void *)&v233[2] = 0;
    *(void *)uint64_t v231 = v30;
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v231, v110);
    unint64_t v32 = ++*(_DWORD *)&v231[24];
    unint64_t v35 = *(void *)(v82 + 240);
    if (v35)
    {
      uint64_t v116 = 0;
      unint64_t v37 = 0;
      uint64_t v117 = 0;
      do
      {
        if (v37)
        {
          unint64_t v36 = (v37 - 1);
          if (v35 <= v36) {
            goto LABEL_340;
          }
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v241, *(const re::ecs2::Entity **)(*(void *)(v82 + 256) + 16 * v36), *(re::ecs2::SortingTransformCache **)(*(void *)(v82 + 264) + 432));
          unint64_t v35 = *(void *)(v82 + 240);
          if (v35 <= v37) {
            goto LABEL_341;
          }
          float32x4_t v204 = v243;
          float32x4_t v205 = v242;
          appended = (_anonymous_namespace_ *)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v241, *(const re::ecs2::Entity **)(*(void *)(v82 + 256) + v116), *(re::ecs2::SortingTransformCache **)(*(void *)(v82 + 264) + 432));
          float32x4_t v118 = vmulq_f32(v205, vsubq_f32(v243, v204));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), vaddq_f32(v118, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1))).f32[0] <= *(float *)&dword_26AF7FBF4)uint64_t v117 = v117; {
          else
          }
            uint64_t v117 = (v117 + 1);
        }
        uint64_t v119 = *(void *)&v231[16];
        if (*(void *)&v231[16] >= *(void *)&v231[8])
        {
          unint64_t v120 = *(void *)&v231[16] + 1;
          if (*(void *)&v231[8] < (unint64_t)(*(void *)&v231[16] + 1))
          {
            if (*(void *)v231)
            {
              unint64_t v121 = 2 * *(void *)&v231[8];
              if (!*(void *)&v231[8]) {
                unint64_t v121 = 8;
              }
              if (v121 <= v120) {
                unint64_t v122 = *(void *)&v231[16] + 1;
              }
              else {
                unint64_t v122 = v121;
              }
              re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v231, v122);
              LODWORD(v32) = *(_DWORD *)&v231[24];
            }
            else
            {
              re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v231, v120);
              LODWORD(v32) = *(_DWORD *)&v231[24] + 1;
            }
          }
          uint64_t v119 = *(void *)&v231[16];
        }
        unint64_t v206 = *(void *)&v233[2];
        unint64_t v35 = *(void *)&v233[2] + (v119 << 6);
        float32x4_t v123 = 0uLL;
        *(_OWORD *)unint64_t v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_DWORD *)(v35 + 32) = 0;
        unint64_t v36 = v119 + 1;
        *(void *)&v231[16] = v119 + 1;
        unint64_t v32 = (v32 + 1);
        *(_DWORD *)&v231[24] = v32;
        unint64_t v4 = *(void *)(v82 + 240);
        if (v4 <= v37) {
          goto LABEL_338;
        }
        uint64_t v124 = (_DWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(*(void *)(v82 + 256) + v116) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v241.i8[0] = 0;
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v35, v117, &v241);
        int v125 = v124[20];
        if (v125 == 3) {
          uint64_t v126 = 3;
        }
        else {
          uint64_t v126 = (v125 + 3);
        }
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v35, v126, &v241);
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v35, v124[22], &v241);
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(v35, v124[20] != 3, &v241);
        appended = (_anonymous_namespace_ *)re::DrawCallSortKey<4ul,unsigned long long>::appendInt32(v35, v124[21], &v241);
        *(_DWORD *)(v35 + 32) = v37++;
        unint64_t v35 = *(void *)(v82 + 240);
        v116 += 16;
      }
      while (v35 > v37);
      unint64_t v32 = v206;
    }
    else
    {
      unint64_t v32 = *(void *)&v233[2];
      unint64_t v36 = *(void *)&v231[16];
    }
    unint64_t v127 = 126 - 2 * __clz(v36);
    if (v36) {
      unint64_t v128 = v127;
    }
    else {
      unint64_t v128 = 0;
    }
    *(void *)&long long v198 = v82 + 224;
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(v32, v32 + (v36 << 6), v128, 1uLL, v112, v113, v114, v115, v191, v192, v193, v194, v195, v196, v197, v198, v202, v203, v204.i64[0],
      v204.i64[1]);
    uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 24))(v82);
    unint64_t v130 = *(void *)(v82 + 240);
    *(void *)long long v196 = 0;
    *(void *)(v196 + 8) = 0;
    *(_DWORD *)(v196 + 16) = 0;
    *(void *)&v230[2] = 0;
    *(void *)uint64_t v228 = v129;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(v228, v130);
    int v132 = ++*(_DWORD *)&v228[24];
    unint64_t v4 = (unint64_t)&v221;
    if (v36)
    {
      uint64_t v133 = (unsigned int *)(v32 + 32);
      while (1)
      {
        unsigned int v134 = *v133;
        v133 += 16;
        unint64_t v35 = v134;
        unint64_t v37 = *(void *)(v82 + 240);
        if (v37 <= v134) {
          break;
        }
        uint64_t v135 = *(void *)(v82 + 256);
        uint64_t v136 = *(void *)&v228[16];
        if (*(void *)&v228[16] >= *(void *)&v228[8])
        {
          re::DynamicArray<re::RigNodeConstraint>::growCapacity(v228, *(void *)&v228[16] + 1);
          uint64_t v136 = *(void *)&v228[16];
          int v132 = *(_DWORD *)&v228[24];
        }
        *(_OWORD *)(*(void *)&v230[2] + 16 * v136) = *(_OWORD *)(v135 + 16 * v35);
        *(void *)&v228[16] = v136 + 1;
        *(_DWORD *)&v228[24] = ++v132;
        if (!--v36) {
          goto LABEL_231;
        }
      }
LABEL_339:
      uint64_t v227 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v234 = 136315906;
      *(void *)(v4 + 212) = "operator[]";
      __int16 v235 = 1024;
      *(_DWORD *)(v4 + 222) = 789;
      __int16 v237 = 2048;
      *(void *)(v4 + 228) = v35;
      __int16 v239 = 2048;
      *(void *)(v4 + 238) = v37;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_340:
      *(void *)uint64_t v234 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v228 = 136315906;
      *(void *)&v228[4] = "operator[]";
      *(_WORD *)&v228[12] = 1024;
      *(_DWORD *)&v228[14] = 789;
      *(_WORD *)&v228[18] = 2048;
      *(void *)&v228[20] = v36;
      __int16 v229 = 2048;
      *(void *)int v230 = v35;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_341:
      *(void *)uint64_t v234 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v228 = 136315906;
      *(void *)&v228[4] = "operator[]";
      *(_WORD *)&v228[12] = 1024;
      *(_DWORD *)&v228[14] = 789;
      *(_WORD *)&v228[18] = 2048;
      *(void *)&v228[20] = v37;
      __int16 v229 = 2048;
      *(void *)int v230 = v35;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_342:
      *(void *)uint64_t v228 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v231 = 136315906;
      *(void *)(v32 + 164) = "operator[]";
      *(_WORD *)&v231[12] = 1024;
      *(_DWORD *)(v32 + 174) = 789;
      *(_WORD *)&v231[18] = 2048;
      *(void *)(v32 + 180) = v35;
      __int16 v232 = 2048;
      *(void *)(v32 + 190) = v37;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_343:
      *(void *)uint64_t v228 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v231 = 136315906;
      *(void *)(v32 + 164) = "removeAt";
      *(_WORD *)&v231[12] = 1024;
      *(_DWORD *)(v32 + 174) = 931;
      *(_WORD *)&v231[18] = 2048;
      *(void *)(v32 + 180) = v35;
      __int16 v232 = 2048;
      *(void *)(v32 + 190) = v37;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_344:
      uint64_t v227 = 0;
      float32x4_t v244 = 0u;
      float32x4_t v245 = 0u;
      float32x4_t v242 = 0u;
      float32x4_t v243 = 0u;
      float32x4_t v241 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v234 = 136315906;
      *(void *)(v4 + 212) = "operator[]";
      __int16 v235 = 1024;
      *(_DWORD *)(v4 + 222) = 789;
      __int16 v237 = 2048;
      *(void *)(v4 + 228) = 0;
      __int16 v239 = 2048;
      *(void *)(v4 + 238) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_345:
      re::internal::assertLog((re::internal *)4, v131, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
    }
LABEL_231:
    uint64_t v137 = *v199;
    if (*v199 && *(void *)v228 && v137 != *(void *)v228) {
      goto LABEL_345;
    }
    uint64_t v139 = *(void *)&v228[8];
    uint64_t v138 = *(void *)&v228[16];
    *(void *)(v82 + 224) = *(void *)v228;
    *(void *)(v82 + 232) = v139;
    *(void *)(v82 + 240) = v138;
    uint64_t v140 = *(void *)(v82 + 256);
    uint64_t v141 = *(void *)&v230[2];
    *(void *)(v82 + 256) = *(void *)&v230[2];
    ++*(_DWORD *)(v82 + 248);
    if (!v138) {
      goto LABEL_344;
    }
    uint64_t v200 = v140;
    v204.i64[0] = v137;
    unint64_t v207 = v32;
    char v142 = 0;
    *(_DWORD *)(v141 + 8) = 0;
    if (v138 != 1) {
      break;
    }
LABEL_248:
    if (v204.i64[0] && v200) {
      (*(void (**)(void))(*(void *)v204.i64[0] + 40))();
    }
    float32x4_t v30 = v209;
    unint64_t v4 = *((void *)&v195 + 1);
    LODWORD(v72) = DWORD2(v197);
    uint64_t v81 = v201;
    if (v207 && *(void *)v231) {
      (*(void (**)(void))(**(void **)v231 + 40))(*(void *)v231);
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v225);
    ++re::ecs2::CARESortingDebugging::m_sortGroupsResorted;
    unint64_t v32 = (unint64_t)&v221;
    if ((v142 & 1) == 0) {
      goto LABEL_264;
    }
    uint64_t v154 = v197;
    unint64_t v156 = *(void *)(v197 + 8);
    unint64_t v155 = *(void *)(v197 + 16);
    if (v155 >= v156)
    {
      unint64_t v157 = v155 + 1;
      if (v156 < v155 + 1)
      {
        if (*(void *)v197)
        {
          unint64_t v158 = 2 * v156;
          if (!v156) {
            unint64_t v158 = 8;
          }
          if (v158 <= v157) {
            unint64_t v159 = v157;
          }
          else {
            unint64_t v159 = v158;
          }
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v197, v159);
          uint64_t v154 = v197;
        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v197, v157);
          uint64_t v154 = v197;
          ++*(_DWORD *)(v197 + 24);
        }
      }
      unint64_t v155 = *(void *)(v154 + 16);
      uint64_t v81 = v201;
    }
    uint64_t v163 = *v81;
    *(void *)(*(void *)(v154 + 32) + 8 * v155) = *v81;
    if (v163)
    {
      id v164 = (id)(v163 + 8);
      uint64_t v154 = v197;
      unint64_t v155 = *(void *)(v197 + 16);
    }
    *(void *)(v154 + 16) = v155 + 1;
    ++*(_DWORD *)(v154 + 24);
LABEL_265:
    unsigned int v160 = *(_DWORD *)(a1 + 328);
    if (v160 <= (int)v72 + 1) {
      uint64_t v161 = (v72 + 1);
    }
    else {
      uint64_t v161 = v160;
    }
    while (1)
    {
      uint64_t v79 = (v72 + 1);
      if (v161 - 1 == v72) {
        break;
      }
      LODWORD(v72) = v72 + 1;
      uint64_t v162 = v79;
      if ((*(_DWORD *)(*(void *)(a1 + 312) + 24 * v79 + 8) & 0x80000000) != 0) {
        goto LABEL_272;
      }
    }
    uint64_t v162 = v161;
LABEL_272:
    uint64_t v72 = v162;
    if (v4 == v162) {
      goto LABEL_142;
    }
  }
  uint64_t v143 = 0;
  char v142 = 0;
  unint64_t v144 = 1;
LABEL_237:
  uint64_t v145 = *(void *)(v82 + 256) + 16 * v144;
  uint64_t v146 = *(void *)v145;
  *(_DWORD *)(v145 + 8) = 0;
  uint64_t v147 = (unsigned int *)(v145 + 8);
  uint64_t v148 = v143;
  while (1)
  {
    unint64_t v149 = *(void *)(v82 + 240);
    if (v149 <= v148) {
      break;
    }
    uint64_t v150 = *(void *)(v82 + 256);
    {
      int v151 = *(_DWORD *)(v150 + 16 * v148 + 8);
      if (*v147 <= v151 + 1) {
        unsigned int v152 = v151 + 1;
      }
      else {
        unsigned int v152 = *v147;
      }
      unsigned int *v147 = v152;
      if (re::ecs2::CARESortingDebugging::m_highestPriorityInGroup < v152)
      {
        re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = v152;
        re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = *(void *)(v82 + 80);
      }
      char v142 = 1;
    }
    uint64_t v153 = v148-- + 1;
    if (v153 <= 1)
    {
      ++v144;
      ++v143;
      if (*(void *)(v82 + 240) <= v144) {
        goto LABEL_248;
      }
      goto LABEL_237;
    }
  }
  uint64_t v227 = 0;
  float32x4_t v244 = 0u;
  float32x4_t v245 = 0u;
  float32x4_t v242 = 0u;
  float32x4_t v243 = 0u;
  float32x4_t v241 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  *(_DWORD *)uint64_t v234 = 136315906;
  *(void *)&v234[4] = "operator[]";
  __int16 v235 = 1024;
  int v236 = 789;
  __int16 v237 = 2048;
  uint64_t v238 = v148;
  __int16 v239 = 2048;
  unint64_t v240 = v149;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_280:
  LODWORD(v76) = 0;
LABEL_281:
  uint64_t v208 = a1 + 344;
  if (v75 != v76)
  {
    uint64_t v165 = v76;
    uint64_t v166 = v222;
    uint64_t v167 = a1 + 152;
    unsigned int v210 = v75;
    do
    {
      unint64_t v168 = *(void *)(v166 + 24 * v165 + 16);
      id v169 = (id)(v168 + 8);
      uint64_t v170 = *(unsigned int *)(v168 + 304);
      unsigned int v171 = *(_DWORD *)(v168 + 304);
      if (*(_DWORD *)(v168 + 300))
      {
        uint64_t v172 = 0;
        if (v171)
        {
          uint64_t v173 = (int *)(*(void *)(v168 + 288) + 8);
          while (1)
          {
            int v174 = *v173;
            v173 += 6;
            if (v174 < 0) {
              break;
            }
            if (v170 == ++v172)
            {
              LODWORD(v172) = *(_DWORD *)(v168 + 304);
              break;
            }
          }
        }
        if (v170 != v172)
        {
          uint64_t v175 = v172;
          do
          {
            v241.i64[0] = 0;
            v241.i64[0] = *(void *)(*(void *)(v168 + 288) + 24 * v175 + 16);
            re::DynamicArray<re::TransitionCondition *>::add(v213, &v241);
            unsigned int v171 = *(_DWORD *)(v168 + 304);
            if (v171 <= (int)v172 + 1) {
              int v176 = v172 + 1;
            }
            else {
              int v176 = *(_DWORD *)(v168 + 304);
            }
            int v177 = v172;
            while (1)
            {
              uint64_t v175 = (v177 + 1);
              if (v176 - 1 == v177) {
                break;
              }
              ++v177;
              LODWORD(v172) = v175;
              if ((*(_DWORD *)(*(void *)(v168 + 288) + 24 * v175 + 8) & 0x80000000) != 0) {
                goto LABEL_299;
              }
            }
            LODWORD(v172) = v176;
LABEL_299:
            ;
          }
          while (v170 != v172);
        }
      }
      uint64_t v178 = 0;
      if (v171)
      {
        unsigned int v179 = (int *)(*(void *)(v168 + 288) + 8);
        uint64_t v180 = v203;
        while (1)
        {
          int v181 = *v179;
          v179 += 6;
          if (v181 < 0) {
            break;
          }
          if (v171 == ++v178)
          {
            LODWORD(v178) = v171;
            break;
          }
        }
      }
      else
      {
        uint64_t v180 = v203;
      }
      if (v171 != v178)
      {
        uint64_t v182 = v178;
        do
        {
          v241.i64[0] = 0;
          v241.i64[0] = *(void *)(*(void *)(v168 + 288) + 24 * v182 + 16);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v167, v241.u64[0]);
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v180, (uint64_t *)&v241);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;
          if (*(_DWORD *)(v168 + 304) <= (v178 + 1)) {
            int v183 = v178 + 1;
          }
          else {
            int v183 = *(_DWORD *)(v168 + 304);
          }
          int v184 = v178;
          while (1)
          {
            uint64_t v182 = (v184 + 1);
            if (v183 - 1 == v184) {
              break;
            }
            ++v184;
            LODWORD(v178) = v182;
            if ((*(_DWORD *)(*(void *)(v168 + 288) + 24 * v182 + 8) & 0x80000000) != 0) {
              goto LABEL_316;
            }
          }
          LODWORD(v178) = v183;
LABEL_316:
          ;
        }
        while (v171 != v178);
      }
      *(unsigned char *)(v168 + 208) = *(_DWORD *)(v168 + 300) != 0;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v168 + 272);
      *(void *)(v168 + 336) = 0;
      ++*(_DWORD *)(v168 + 344);
      *(unsigned char *)(v168 + 209) = 1;
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v202, v168);

      if (v210 <= (int)v76 + 1) {
        unsigned int v185 = v76 + 1;
      }
      else {
        unsigned int v185 = v210;
      }
      while (1)
      {
        uint64_t v165 = (v76 + 1);
        if (v185 - 1 == v76) {
          break;
        }
        LODWORD(v76) = v76 + 1;
        unsigned int v186 = v165;
        if ((*(_DWORD *)(v166 + 24 * v165 + 8) & 0x80000000) != 0) {
          goto LABEL_324;
        }
      }
      unsigned int v186 = v185;
LABEL_324:
      LODWORD(v76) = v186;
    }
    while (v210 != v186);
  }
  if (v214)
  {
    uint64_t v187 = v216;
    uint64_t v188 = 8 * v214;
    do
    {
      uint64_t v189 = *v187++;
      v241.i64[0] = v189;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v203, (uint64_t *)&v241);
      re::DynamicArray<re::TransitionCondition *>::add((void *)v195, &v241);
      v188 -= 8;
    }
    while (v188);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v208);
  v190.n128_f64[0] = re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v211);
  if (v213[0] && v216) {
    (*(void (**)(double))(*(void *)v213[0] + 40))(v190.n128_f64[0]);
  }
  if (v217[0])
  {
    if (v220) {
      (*(void (**)(__n128))(*(void *)v217[0] + 40))(v190);
    }
  }
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v221);
}

BOOL re::ecs2::CAMeshSortGroup::remove(re::ecs2::CAMeshSortGroup *this, re::ecs2::Entity *a2)
{
  unint64_t v4 = a2;
  if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 272, (uint64_t *)&v4))*((unsigned char *)this + 208) = 1; {
  return re::DynamicArray<unsigned long long>::remove((uint64_t)this + 320, &v4);
  }
}

void re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups(re::ecs2::CAMeshSortGroup **a1, uint64_t a2, re::ecs2::Entity *a3, uint64_t a4, uint64_t a5, re::Allocator *a6)
{
  unint64_t v37 = a3;
  *a1 = 0;
  uint64_t v8 = *(unsigned int *)(a4 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = (int *)(*(void *)(a4 + 16) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 6;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v8 != v9)
  {
    uint64_t v12 = v9;
    uint64_t v31 = a2 + 296;
    uint64_t v32 = a2 + 152;
    uint64_t v13 = *(void *)(a4 + 16);
    do
    {
      uint64_t v14 = v13 + 24 * v12;
      int v17 = *(float32x4_t **)(v14 + 16);
      uint64_t v15 = (uint64_t *)(v14 + 16);
      int v16 = v17;
      if (!v17[13].i8[1])
      {
        if (v16[13].i8[0]) {
          re::ecs2::CAMeshSortGroup::recomputeTransform((re::ecs2::CAMeshSortGroup *)v16, a6);
        }
        float v19 = v16[13].f32[1];
        float v18 = v16[13].f32[2];
        uint64_t v20 = v16[19].u32[0];
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = (int *)(v16[18].i64[0] + 8);
          while (1)
          {
            int v23 = *v22;
            v22 += 6;
            if (v23 < 0) {
              break;
            }
            if (v20 == ++v21)
            {
              LODWORD(v21) = v16[19].i32[0];
              break;
            }
          }
        }
        else
        {
          LODWORD(v21) = 0;
        }
        if (v20 == v21)
        {
LABEL_30:
          int v28 = 0;
        }
        else
        {
          uint64_t v24 = v21;
          while (1)
          {
            uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v16[18].i64[0] + 24 * v24 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v25)
            {
              if (*(unsigned char *)(v25 + 94)) {
                break;
              }
            }
            if (v16[19].i32[0] <= (v21 + 1)) {
              __int32 v26 = v21 + 1;
            }
            else {
              __int32 v26 = v16[19].i32[0];
            }
            while (1)
            {
              uint64_t v24 = (v21 + 1);
              if (v26 - 1 == v21) {
                break;
              }
              LODWORD(v21) = v21 + 1;
              __int32 v27 = v24;
              if ((*(_DWORD *)(v16[18].i64[0] + 24 * v24 + 8) & 0x80000000) != 0) {
                goto LABEL_29;
              }
            }
            __int32 v27 = v26;
LABEL_29:
            LODWORD(v21) = v27;
            if (v20 == v27) {
              goto LABEL_30;
            }
          }
          int v28 = 1;
        }
        {
          if (*a1)
          {
            re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(a2, a1, v15, a5);
          }
          else
          {
            re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)*v15, a3);
            re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v32, (uint64_t *)&v37, v15);
            re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v31, v15);
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a1, *v15);
          }
        }
      }
      uint64_t v13 = *(void *)(a4 + 16);
      if (*(_DWORD *)(a4 + 32) <= (v9 + 1)) {
        int v29 = v9 + 1;
      }
      else {
        int v29 = *(_DWORD *)(a4 + 32);
      }
      while (1)
      {
        uint64_t v12 = (v9 + 1);
        if (v29 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v30 = v12;
        if ((*(_DWORD *)(v13 + 24 * v12 + 8) & 0x80000000) != 0) {
          goto LABEL_43;
        }
      }
      int v30 = v29;
LABEL_43:
      LODWORD(v9) = v30;
    }
    while (v8 != v30);
  }
}

void re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(uint64_t a1, re::ecs2::Entity *a2, re::ecs2::Entity *a3, void *a4, uint64_t a5, uint64_t a6)
{
  __int32 v27 = a3;
  int v28 = a2;
  uint64_t v12 = a1 + 152;
  uint64_t v13 = (re::ecs2::CAMeshSortGroup **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 152, (unint64_t)a2);
  uint64_t v14 = (re::ecs2::CAMeshSortGroup **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)a3);
  uint64_t v15 = (uint64_t)v14;
  if (v13 && v14)
  {
    int v16 = *v13;
    if (*v13 == *v14) {
      return;
    }
LABEL_7:
    __int32 v26 = v16;
    if (v16) {
      int v17 = (char *)v16 + 8;
    }
    if (v15) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v25 = 0;
    goto LABEL_14;
  }
  if (v13)
  {
    int v16 = *v13;
    goto LABEL_7;
  }
  int v16 = 0;
  __int32 v26 = 0;
  if (!v14) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v15 = *(void *)v15;
  uint64_t v25 = v15;
  if (v15) {
    id v18 = (id)(v15 + 8);
  }
LABEL_14:
  if (v19)
  {
    if (v16)
    {
      if (!v15)
      {
        re::ecs2::CAMeshSortGroup::add(v16, a3);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v27, (uint64_t *)&v26);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v27);
        ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
        goto LABEL_26;
      }
      re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(a1, v13, &v25, a5);
    }
    else
    {
      if (!v15)
      {
        uint64_t v21 = re::globalAllocators((re *)v19);
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[2] + 32))(v21[2], 368, 16);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)v22, 0);
        *(void *)uint64_t v23 = &unk_26E6E17C0;
        *(_DWORD *)(v23 + 212) = 0;
        *(_DWORD *)(v23 + 216) = 0;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(void *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 80) = 0u;
        *(_OWORD *)(v23 + 96) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 128) = 0u;
        *(_OWORD *)(v23 + 144) = 0u;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 176) = 0u;
        *(_OWORD *)(v23 + 192) = 0u;
        *(_WORD *)(v23 + 208) = 0;
        *(void *)(v22 + 256) = 0;
        *(void *)(v22 + 232) = 0;
        *(void *)(v22 + 240) = 0;
        *(_DWORD *)(v22 + 248) = 0;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)(v22 + 224), 0x10uLL);
        ++*(_DWORD *)(v22 + 248);
        *(void *)(v22 + 264) = a1;
        *(_OWORD *)(v22 + 272) = 0u;
        *(_OWORD *)(v22 + 288) = 0u;
        *(_DWORD *)(v22 + 304) = 0;
        *(void *)(v22 + 308) = 0x7FFFFFFFLL;
        *(void *)(v22 + 352) = 0;
        *(void *)(v22 + 328) = 0;
        *(void *)(v22 + 336) = 0;
        *(void *)(v22 + 320) = 0;
        *(_DWORD *)(v22 + 344) = 0;
        uint64_t v24 = v22;
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(a1 + 200, &v24);
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(a1 + 296, &v24);
        re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v22, v28);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v28, &v24);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v28);
        re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v22, v27);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v27, &v24);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v27);
        re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups += 2;
        uint64_t v20 = (void *)(v22 + 8);
        goto LABEL_27;
      }
      re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v15, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v28, &v25);
      re::DynamicArray<re::TransitionCondition *>::add(a4, &v28);
      ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
    }
  }
  else if (!v15)
  {
    if (!v16) {
      return;
    }
    goto LABEL_26;
  }

  int v16 = v26;
  if (v26)
  {
LABEL_26:
    uint64_t v20 = (char *)v16 + 8;
LABEL_27:
  }
}

__n128 *re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(__n128 *this, uint64_t a2, BOOL *a3)
{
  unint64_t v3 = this[15].n128_u64[0];
  if (v3)
  {
    unint64_t v4 = (float32x4_t *)this;
    uint64_t v5 = this + 5;
    uint64_t v6 = 16 * v3;
    for (unint64_t i = (_anonymous_namespace_ **)(this[16].n128_u64[0] + 8); ; i += 2)
    {
      char v11 = 0;
      this = (__n128 *)&v8[11];
      if (v11 || *(_DWORD *)i != v8[10].i32[0] || v4[5].u8[8] != v8[11].u8[8] || v4[5].u8[9] != v8[11].u8[9]) {
        break;
      }
      if (v4[6].i8[0] && v8[12].i8[0])
      {
        uint32x4_t v9 = (uint32x4_t)vceqq_f32(v4[7], v8[13]);
        v9.i32[3] = v9.i32[2];
        if ((vminvq_u32(v9) & 0x80000000) == 0) {
          break;
        }
      }
      else if (v8[12].u8[0] | v4[6].u8[0])
      {
        break;
      }
      if (v4[8].i8[0] && v8[14].i8[0])
      {
        uint32x4_t v10 = (uint32x4_t)vceqq_f32(v4[9], v8[15]);
        v10.i32[3] = v10.i32[2];
        if ((vminvq_u32(v10) & 0x80000000) == 0) {
          break;
        }
      }
      else if (v8[14].u8[0] | v4[8].u8[0])
      {
        break;
      }
      if (v5->n128_u64[0] != this->n128_u64[0]) {
        break;
      }
LABEL_19:
      v6 -= 16;
      if (!v6) {
        return this;
      }
    }
    re::ecs2::MeshSortGroupToken::operator=(this, v5);
    v8[10].i32[0] = *(_DWORD *)i;
    this = (__n128 *)re::ecs2::Component::markDirty(v8);
    goto LABEL_19;
  }
  return this;
}

int *re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add(int *result, void *a2)
{
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    uint64_t result = (int *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(v3, v10);
    int v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = result[4];
  if (v5)
  {
    if (v4 - 128 >= 0xFFFFFFFFFFFFFF7FLL) {
      goto LABEL_15;
    }
    unint64_t v7 = v4 + 1;
    unint64_t v9 = 256;
    goto LABEL_11;
  }
  unint64_t v6 = *((void *)result + 3);
  BOOL v8 = v4 >= v6;
  unint64_t v7 = v4 + 1;
  BOOL v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    unint64_t v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t result = (int *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(result, v11);
    int v5 = v3[4];
  }
LABEL_15:
  if (v5) {
    uint64_t v12 = v3 + 6;
  }
  else {
    uint64_t v12 = (void *)*((void *)v3 + 4);
  }
  uint64_t v13 = *((void *)v3 + 1);
  v12[v13] = *a2;
  *((void *)v3 + 1) = v13 + 1;
  v3[4] += 2;
  return result;
}

float32x4_t *re::ecs2::CAMeshSortGroup::updateGroupToken(float32x4_t *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = this[16].i64[1];
  float32x4_t v3 = *(float32x4_t *)(v2 + 112);
  float32x4_t v4 = *(float32x4_t *)(v2 + 128);
  float32x4_t v5 = vmulq_f32(v3, vsubq_f32(this[2], v4));
  float32x4_t v6 = vmulq_n_f32(v3, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  if (this[21].i64[0])
  {
    float32x4_t v14 = v6;
    float32x4_t v15 = *(float32x4_t *)(v2 + 128);
    uint64_t v7 = *(void *)this[22].i64[0];
    BOOL v8 = *(re::ecs2::SortingTransformCache **)(v2 + 432);
    this = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (this)
    {
      int v9 = this[6].u8[0];
      if (this[6].i8[0])
      {
        this = re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v24, (const re::ecs2::Entity *)v7, v8);
        int v9 = v24[0].u8[0];
        if (v24[0].i8[0])
        {
          float32x4_t v25 = v24[1];
          float32x4_t v26 = v24[2];
          int v9 = 1;
        }
      }
    }
    else
    {
      int v9 = 0;
    }
    float32x4_t v6 = v14;
    float32x4_t v4 = v15;
  }
  else
  {
    int v9 = 0;
  }
  float32x4_t v10 = vaddq_f32(v4, v6);
  if (*(void *)(v1 + 80))
  {
    if (!*(unsigned char *)(v1 + 96)) {
      *(unsigned char *)(v1 + 96) = 1;
    }
    *(float32x4_t *)(v1 + 112) = v10;
    uint64_t v12 = *(void *)(v1 + 16);
    uint64_t v11 = *(void *)(v1 + 24);
    if (!*(unsigned char *)(v1 + 128)) {
      *(unsigned char *)(v1 + 128) = 1;
    }
    *(void *)(v1 + 144) = v12;
    *(void *)(v1 + 152) = v11;
    if (v9)
    {
      if (!*(unsigned char *)(v1 + 160)) {
        *(unsigned char *)(v1 + 160) = 1;
      }
      float32x4_t v13 = v26;
      *(float32x4_t *)(v1 + 176) = v25;
      *(float32x4_t *)(v1 + 192) = v13;
    }
    else if (*(unsigned char *)(v1 + 160))
    {
      *(unsigned char *)(v1 + 160) = 0;
    }
  }
  else
  {
    v16[0] = 261;
    char v17 = 1;
    float32x4_t v18 = v10;
    char v19 = 1;
    long long v20 = *(_OWORD *)(v1 + 16);
    char v21 = v9;
    if (v9)
    {
      float32x4_t v22 = v25;
      float32x4_t v23 = v26;
    }
    re::ecs2::MeshSortGroupToken::createNewToken((uint64_t)v16, (uint64_t)v24);
    return (float32x4_t *)re::ecs2::MeshSortGroupToken::operator=(v1 + 80, (uint64_t)v24);
  }
  return this;
}

re::ecs2::Component *anonymous namespace'::getOrAddMeshSortingComponent(_anonymous_namespace_ *this, re::ecs2::Entity *a2, BOOL *a3)
{
  float32x4_t v5 = (char *)this + 32;
  uint64_t v6 = re::ecs2::EntityComponentCollection::get((_anonymous_namespace_ *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v6)
  {
    uint64_t v7 = (re::ecs2::Component *)v6;
    id v8 = (id)(v6 + 8);
    if (*((unsigned char *)v7 + 25) != 5)
    {
      *((unsigned char *)v7 + 25) = 5;
      *(unsigned char *)a2 = 1;
    }
  }
  else
  {
    int v9 = (ArcSharedObject *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                  + 7)
                                                                               + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 464, 0);
    re::make::shared::inplace<re::ecs2::MeshSortingComponent>(v9, &v14);
    uint64_t v7 = v14;
    *((unsigned char *)v14 + 25) = 5;
    float32x4_t v10 = (_anonymous_namespace_ **)*((void *)this + 25);
    if (v10) {
      re::ecs2::NetworkComponent::disableSyncForComponent(v10, v7);
    }
    float32x4_t v13 = v7;
    uint64_t v11 = (char *)v7 + 8;
    re::ecs2::EntityComponentCollection::add((uint64_t)v5, (uint64_t *)&v13, 1);
    if (v13)
    {

      float32x4_t v13 = 0;
    }
  }

  return v7;
}

void *re::ecs2::CAMeshSortGroup::add(re::ecs2::CAMeshSortGroup *this, re::ecs2::Entity *a2)
{
  float32x4_t v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 272, (uint64_t *)&v4);
  *((unsigned char *)this + 208) = 1;
  uint64_t result = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    if (*((unsigned char *)result + 96)) {
      return re::DynamicArray<re::TransitionCondition *>::add((void *)this + 40, &v4);
    }
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      if (*(void *)(v18 + 32 * v10 + 16) == v6) {
        return;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v18 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v18 + 32 * v10 + 16) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  uint64_t v15 = v9;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
  uint64_t v16 = *a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
  if (v16) {
    id v17 = (id)(v16 + 8);
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v15) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(uint64_t a1, re::ecs2::CAMeshSortGroup **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  float32x4_t v5 = a3;
  uint64_t v8 = *a3;
  uint64_t v9 = *(unsigned int *)(*a3 + 304);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (int *)(*(void *)(v8 + 288) + 8);
    while (1)
    {
      int v12 = *v11;
      v11 += 6;
      if (v12 < 0) {
        break;
      }
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(*a3 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 != v10)
  {
    uint64_t v13 = v10;
    int v29 = *(_DWORD *)(*a3 + 304);
    int v30 = (void *)(a1 + 152);
    while (1)
    {
      int v14 = *(re::ecs2::Entity **)(*(void *)(v8 + 288) + 24 * v13 + 16);
      re::ecs2::CAMeshSortGroup::add(*a2, v14);
      unint64_t v15 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v14 ^ ((unint64_t)v14 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)v14 ^ ((unint64_t)v14 >> 30))) >> 27));
      unint64_t v16 = v15 ^ (v15 >> 31);
      if (*v30)
      {
        unint64_t v17 = v16 % *(unsigned int *)(a1 + 176);
        uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 160) + 4 * v17);
        if (v18 != 0x7FFFFFFF)
        {
          uint64_t v19 = *(void *)(a1 + 168);
          while (*(re::ecs2::Entity **)(v19 + 32 * v18 + 16) != v14)
          {
            uint64_t v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
            if (v18 == 0x7FFFFFFF) {
              goto LABEL_16;
            }
          }
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v19 + 32 * v18 + 24), (uint64_t)*a2);
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v17 = 0;
      }
LABEL_16:
      uint64_t v9 = *(unsigned int *)(a1 + 188);
      if (v9 == 0x7FFFFFFF)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 184);
        int v20 = v9;
        if (v9 == *(_DWORD *)(a1 + 176))
        {
          re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity((uint64_t)v30, 2 * *(_DWORD *)(a1 + 180));
          unint64_t v17 = v16 % *(unsigned int *)(a1 + 176);
          int v20 = *(_DWORD *)(a1 + 184);
        }
        *(_DWORD *)(a1 + 184) = v20 + 1;
        uint64_t v21 = *(void *)(a1 + 168);
        int v22 = *(_DWORD *)(v21 + 32 * v9 + 8);
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 168);
        int v22 = *(_DWORD *)(v21 + 32 * v9 + 8);
        *(_DWORD *)(a1 + 188) = v22 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v21 + 32 * v9 + 8) = v22 | 0x80000000;
      *(_DWORD *)(*(void *)(a1 + 168) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 168) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 160) + 4 * v17);
      *(void *)(*(void *)(a1 + 168) + 32 * v9) = v16;
      *(void *)(*(void *)(a1 + 168) + 32 * v9 + 16) = v14;
      float32x4_t v23 = *a2;
      *(void *)(*(void *)(a1 + 168) + 32 * v9 + 24) = *a2;
      if (v23) {
        uint64_t v24 = (char *)v23 + 8;
      }
      *(_DWORD *)(*(void *)(a1 + 160) + 4 * v17) = v9;
      ++*(_DWORD *)(a1 + 180);
      LODWORD(v9) = v29;
LABEL_25:
      ++*(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(v8 + 304) <= (v10 + 1)) {
        int v25 = v10 + 1;
      }
      else {
        int v25 = *(_DWORD *)(v8 + 304);
      }
      while (1)
      {
        uint64_t v13 = (v10 + 1);
        if (v25 - 1 == v10) {
          break;
        }
        LODWORD(v10) = v10 + 1;
        int v26 = v13;
        if ((*(_DWORD *)(*(void *)(v8 + 288) + 24 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_32;
        }
      }
      int v26 = v25;
LABEL_32:
      LODWORD(v10) = v26;
      if (v9 == v26)
      {
        uint64_t v4 = a4;
        float32x4_t v5 = a3;
        uint64_t v8 = *a3;
        break;
      }
    }
  }
  *(unsigned char *)(v8 + 208) = *(_DWORD *)(v8 + 300) != 0;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v8 + 272);
  *(void *)(v8 + 336) = 0;
  ++*(_DWORD *)(v8 + 344);
  re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::add(v4, v5);
  re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(a1 + 296, *v5);
  *(unsigned char *)(*v5 + 209) = 1;
}

BOOL anonymous namespace'::doEntitiesOverlap(uint64_t a1, re::ecs2::Entity *a2, re::ecs2::SortingTransformCache *a3, uint64_t a4, int a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  re::FixedArray<re::Vector3<float>>::init<>(&v35, a4, 4uLL);
  uint64_t v10 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a3, (const re::ecs2::Entity *)a1);
  float32x4_t v29 = *v10;
  float32x4_t v30 = v10[1];
  float32x4_t v31 = v10[3];
  float32x4_t v32 = v10[2];
  uint64_t v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11) {
    goto LABEL_10;
  }
  uint32x4_t v12 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v11 + 48), *(float32x4_t *)(v11 + 64));
  v12.i32[3] = v12.i32[2];
  if ((vmaxvq_u32(v12) & 0x80000000) != 0)
  {
    float32x4_t v13 = *(float32x4_t *)(v11 + 32);
    v14.i64[0] = 0xBF000000BF000000;
    v14.i64[1] = 0xBF000000BF000000;
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    float32x4_t v33 = vmulq_f32(v13, v14);
    float32x4_t v34 = vmulq_f32(v13, v15);
  }
  else
  {
    float32x4_t v33 = *(float32x4_t *)(v11 + 48);
    float32x4_t v34 = *(float32x4_t *)(v11 + 64);
  }
  if (!v36)
  {
    uint64_t v38 = 0;
    float32x4_t v43 = 0u;
    float32x4_t v44 = 0u;
    float32x4_t v41 = 0u;
    float32x4_t v42 = 0u;
    float32x4_t v40 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v39 = 136315906;
    *(void *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(void *)&v39[20] = 0;
    *(_WORD *)&v39[28] = 2048;
    *(void *)&v39[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  float32x4_t v16 = vmulq_n_f32(v29, v33.f32[0]);
  float32x4_t v17 = 0uLL;
  float32x4_t v18 = vaddq_f32(v31, vmlaq_f32(vmlaq_n_f32(v16, v30, v33.f32[1]), (float32x4_t)0, v32));
  *unint64_t v37 = vdivq_f32(v18, (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3));
  unint64_t v5 = v36;
  if (v36 <= 1)
  {
LABEL_18:
    uint64_t v38 = 0;
    float32x4_t v43 = v17;
    float32x4_t v44 = v17;
    float32x4_t v41 = v17;
    float32x4_t v42 = v17;
    float32x4_t v40 = v17;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v39 = 136315906;
    *(void *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(void *)&v39[20] = 1;
    *(_WORD *)&v39[28] = 2048;
    *(void *)&v39[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  float32x4_t v19 = vaddq_f32(v31, vmlaq_f32(vmlaq_n_f32(v16, v30, v34.f32[1]), (float32x4_t)0, v32));
  v37[1] = vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
  if (v5 == 2)
  {
LABEL_19:
    uint64_t v38 = 0;
    float32x4_t v43 = 0u;
    float32x4_t v44 = 0u;
    float32x4_t v41 = 0u;
    float32x4_t v42 = 0u;
    float32x4_t v40 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v39 = 136315906;
    *(void *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(void *)&v39[20] = 2;
    *(_WORD *)&v39[28] = 2048;
    *(void *)&v39[30] = 2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    uint64_t v38 = 0;
    float32x4_t v43 = v21;
    float32x4_t v44 = v21;
    float32x4_t v41 = v21;
    float32x4_t v42 = v21;
    float32x4_t v40 = v21;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v39 = 136315906;
    *(void *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(void *)&v39[20] = 3;
    *(_WORD *)&v39[28] = 2048;
    *(void *)&v39[30] = 3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x4_t v20 = vmulq_n_f32(v29, v34.f32[0]);
  float32x4_t v21 = 0uLL;
  float32x4_t v22 = vaddq_f32(v31, vmlaq_f32(vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33.i32[1], 0), v30), (float32x4_t)0, v32));
  float32x4_t v23 = v37;
  v37[2] = vdivq_f32(v22, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3));
  if (v5 <= 3) {
    goto LABEL_20;
  }
  float32x4_t v24 = vaddq_f32(v31, vmlaq_f32(vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34.i32[1], 0), v30), (float32x4_t)0, v32));
  v23[3] = vdivq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3));
LABEL_10:
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v40, (const re::ecs2::Entity *)a1, a3);
  *(float32x4_t *)unsigned int v39 = v41;
  *(float32x4_t *)&v39[16] = v42;
  uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v25) {
    BOOL v26 = *(unsigned char *)(v25 + 94) != 0;
  }
  else {
    BOOL v26 = 0;
  }
  if (v35 && v36) {
    (*(void (**)(void))(*(void *)v35 + 40))();
  }
  return doesEntityOverlapBox;
}

void re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v5 = (v4 ^ (v4 >> 31)) % v2;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (*(void *)(v8 + 24 * v7 + 16) == a2)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 24 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = v11 + 24 * v7;
        int v15 = *(_DWORD *)(v12 + 8);
        float32x4_t v13 = (int *)(v12 + 8);
        int v14 = v15;
        if (v15 < 0)
        {
          *float32x4_t v13 = v14 & 0x7FFFFFFF;
          uint64_t v16 = v11 + 24 * v7;
          uint64_t v19 = *(void *)(v16 + 16);
          float32x4_t v18 = (void *)(v16 + 16);
          uint64_t v17 = v19;
          if (v19)
          {

            void *v18 = 0;
          }
        }
        uint64_t v20 = *(void *)(a1 + 16) + 24 * v7;
        int v21 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v21 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 24 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v8 + 24 * v7 + 16) == a2)
          {
            *(_DWORD *)(v8 + 24 * v9 + 8) = *(_DWORD *)(v8 + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 24 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void re::ecs2::CAMeshSortGroup::recomputeTransform(re::ecs2::CAMeshSortGroup *this, re::Allocator *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v4 = (uint64_t *)((char *)this + 48);
  unint64_t v5 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6);
  unint64_t v6 = (4 * *((_DWORD *)this + 75));
  uint64_t v8 = *((unsigned int *)this + 75);
  uint64_t v9 = 32 * v8;
  uint64_t v54 = v8;
  if (v8)
  {
    int v10 = (_OWORD *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v9, 16);
    if (!v10) {
      goto LABEL_52;
    }
    uint64_t v12 = v10;
    float32x4_t v13 = v10;
    if (v54 != 1)
    {
      bzero(v10, v9 - 32);
      float32x4_t v13 = &v12[(unint64_t)v9 / 0x10 - 2];
    }
    v7.i32[1] = 0;
    *float32x4_t v13 = 0u;
    v13[1] = 0u;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *((unsigned int *)this + 76);
  uint64_t v15 = 0;
  if (v14)
  {
    uint64_t v16 = (int *)(*((void *)this + 36) + 8);
    while (1)
    {
      int v17 = *v16;
      v16 += 6;
      if (v17 < 0) {
        break;
      }
      if (v14 == ++v15)
      {
        LODWORD(v15) = *((_DWORD *)this + 76);
        break;
      }
    }
  }
  if (v14 != v15)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = v15;
    while (1)
    {
      uint64_t v21 = *(void *)(*((void *)this + 36) + 24 * v20 + 16);
      re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v62, (const re::ecs2::Entity *)v21, *(re::ecs2::SortingTransformCache **)(*((void *)this + 33) + 432));
      float32x4_t v60 = v64;
      if (v18 == v54) {
        break;
      }
      float32x4_t v22 = (float32x4_t *)&v12[2 * v18];
      *float32x4_t v22 = v63;
      v22[1] = v60;
      float32x4_t v23 = *((float32x4_t *)this + 2);
      *((float32x4_t *)this + 1) = vaddq_f32(*((float32x4_t *)this + 1), *v22);
      *((float32x4_t *)this + 2) = vaddq_f32(v23, v22[1]);
      float32x4_t v24 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(*(re::ecs2::SortingTransformCache **)(*((void *)this + 33) + 432), (const re::ecs2::Entity *)v21);
      float32x4_t v55 = *v24;
      float32x4_t v56 = v24[1];
      float32x4_t v57 = v24[3];
      float32x4_t v58 = v24[2];
      uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v25)
      {
        uint32x4_t v26 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v25 + 48), *(float32x4_t *)(v25 + 64));
        v26.i32[3] = v26.i32[2];
        if ((vmaxvq_u32(v26) & 0x80000000) != 0)
        {
          float32x4_t v27 = *(float32x4_t *)(v25 + 32);
          v28.i64[0] = 0xBF000000BF000000;
          v28.i64[1] = 0xBF000000BF000000;
          v29.i64[0] = 0x3F0000003F000000;
          v29.i64[1] = 0x3F0000003F000000;
          float32x4_t v59 = vmulq_f32(v27, v28);
          float32x4_t v61 = vmulq_f32(v27, v29);
        }
        else
        {
          float32x4_t v59 = *(float32x4_t *)(v25 + 48);
          float32x4_t v61 = *(float32x4_t *)(v25 + 64);
        }
        if (*((void *)this + 7) <= v19) {
          goto LABEL_48;
        }
        float32x4_t v30 = vmulq_n_f32(v55, v59.f32[0]);
        float32x4_t v31 = vaddq_f32(v57, vmlaq_f32(vmlaq_n_f32(v30, v56, v59.f32[1]), (float32x4_t)0, v58));
        *(float32x4_t *)(*((void *)this + 8) + 16 * v19) = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
        if (*((void *)this + 7) <= v19 + 1) {
          goto LABEL_49;
        }
        float32x4_t v32 = vaddq_f32(v57, vmlaq_f32(vmlaq_n_f32(v30, v56, v61.f32[1]), (float32x4_t)0, v58));
        *(float32x4_t *)(*((void *)this + 8) + 16 * (v19 + 1)) = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
        if (*((void *)this + 7) <= v19 + 2) {
          goto LABEL_50;
        }
        unint64_t v33 = v19 + 3;
        float32x4_t v34 = vmulq_n_f32(v55, v61.f32[0]);
        float32x4_t v35 = vaddq_f32(v57, vmlaq_f32(vmlaq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v59.i32[1], 0), v56), (float32x4_t)0, v58));
        *(float32x4_t *)(*((void *)this + 8) + 16 * (v19 + 2)) = vdivq_f32(v35, (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3));
        if (*((void *)this + 7) <= v19 + 3) {
          goto LABEL_51;
        }
        v19 += 4;
        float32x4_t v36 = vaddq_f32(v57, vmlaq_f32(vmlaq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v61.i32[1], 0), v56), (float32x4_t)0, v58));
        float32x4_t v7 = vdivq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3));
        *(float32x4_t *)(*((void *)this + 8) + 16 * v33) = v7;
      }
      ++v18;
      if (*((_DWORD *)this + 76) <= (v15 + 1)) {
        int v37 = v15 + 1;
      }
      else {
        int v37 = *((_DWORD *)this + 76);
      }
      while (1)
      {
        uint64_t v20 = (v15 + 1);
        if (v37 - 1 == v15) {
          break;
        }
        LODWORD(v15) = v15 + 1;
        int v38 = v20;
        if ((*(_DWORD *)(*((void *)this + 36) + 24 * v20 + 8) & 0x80000000) != 0) {
          goto LABEL_31;
        }
      }
      int v38 = v37;
LABEL_31:
      LODWORD(v15) = v38;
      if (v14 == v38) {
        goto LABEL_32;
      }
    }
    long long v65 = 0u;
    long long v66 = 0u;
    float32x4_t v63 = 0u;
    float32x4_t v64 = 0u;
    float32x4_t v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_48:
    long long v65 = 0u;
    long long v66 = 0u;
    float32x4_t v63 = 0u;
    float32x4_t v64 = 0u;
    float32x4_t v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_49:
    long long v65 = 0u;
    long long v66 = 0u;
    float32x4_t v63 = 0u;
    float32x4_t v64 = 0u;
    float32x4_t v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    long long v65 = 0u;
    long long v66 = 0u;
    float32x4_t v63 = 0u;
    float32x4_t v64 = 0u;
    float32x4_t v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    long long v65 = 0u;
    long long v66 = 0u;
    float32x4_t v63 = 0u;
    float32x4_t v64 = 0u;
    float32x4_t v62 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_32:
  v7.f32[0] = (float)*((unsigned int *)this + 75);
  float32x4_t v39 = *((float32x4_t *)this + 1);
  float32x4_t v40 = vdivq_f32(*((float32x4_t *)this + 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0));
  int32x4_t v41 = (int32x4_t)vmulq_f32(v39, v39);
  v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
  float32x2_t v42 = vrsqrte_f32((float32x2_t)v41.u32[0]);
  float32x2_t v43 = vmul_f32(v42, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v42, v42)));
  float32x4_t v44 = vmulq_n_f32(v39, vmul_f32(v43, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v43, v43))).f32[0]);
  *((float32x4_t *)this + 1) = v44;
  *((float32x4_t *)this + 2) = v40;
  *((_DWORD *)this + 53) = 0;
  *((_DWORD *)this + 54) = 0;
  if (v54)
  {
    unint64_t v45 = 0;
    float v46 = 0.0;
    float v47 = 0.0;
    do
    {
      float32x4_t v48 = (float32x4_t)v12[v45 / 0x10 + 1];
      float32x4_t v49 = vmulq_f32(v44, vsubq_f32(v48, v40));
      float32x4_t v50 = vmulq_f32((float32x4_t)v12[v45 / 0x10], vsubq_f32(v40, v48));
      float v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0];
      float v52 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v47 < v51) {
        float v47 = v51;
      }
      if (v47 < v52) {
        float v47 = v52;
      }
      if (v51 < v46) {
        float v46 = v51;
      }
      if (v46 > v52) {
        float v46 = v52;
      }
      *((float *)this + 53) = v46;
      *((float *)this + 54) = v47;
      v45 += 32;
    }
    while (v9 != v45);
    *((float *)this + 53) = fabsf(v46);
    *((unsigned char *)this + 208) = 0;
    uint64_t v53 = *(void (**)(void))(*(void *)a2 + 40);
    v53();
  }
  else
  {
    *((unsigned char *)this + 208) = 0;
  }
}

BOOL anonymous namespace'::doesEntityOverlapBox(float32x4_t *a1, uint64_t a2, int a3, re::ecs2::Entity *a4, re::ecs2::SortingTransformCache *a5, int a6, float a7, float a8)
{
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v90, a4, a5);
  float32x4_t v16 = vmulq_f32(v91, *a1);
  if ((float)(1.0
             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) > *(float *)&dword_26AF7FBEC)return 0;
  if (!a6)
  {
    float32x4_t v18 = a1[1];
    float32x4_t v19 = vmulq_f32(*a1, vsubq_f32(v92, v18));
    LODWORD(v20) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).u32[0];
    float32x4_t v21 = vmulq_f32(v91, vsubq_f32(v18, v92));
    float v22 = fabsf(v20);
    float v23 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
    if (v23 >= v22) {
      float v23 = v22;
    }
    float v24 = v20 <= 0.0 ? a8 : a7;
    if ((float)(v23 - v24) > *(float *)&dword_26AF7FBF0) {
      return 0;
    }
  }
  uint64_t v25 = (re::ecs2::Entity *)((char *)a4 + 32);
  uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (a3 && v26 && *(unsigned char *)(v26 + 94)) {
    return 1;
  }
  uint64_t v27 = re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a5, a4);
  float32x4_t v28 = (double *)MEMORY[0x263F001A0];
  float64x2_t v29 = *(float64x2_t *)MEMORY[0x263F001A0];
  double v30 = *(double *)(MEMORY[0x263F001A0] + 16);
  double v31 = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v32 = *(void *)(a2 + 8);
  if (v32)
  {
    unint64_t v33 = (float32x4_t *)v27;
    float32x4_t v34 = *(float32x2_t **)(a2 + 16);
    uint64_t v35 = 16 * v32;
    float32x4_t v36 = (float64x2_t *)MEMORY[0x263F001B0];
    v37.f64[0] = *(float64_t *)(MEMORY[0x263F001A0] + 16);
    double v38 = *(double *)(MEMORY[0x263F001A0] + 24);
    do
    {
      double v82 = v37.f64[0];
      float64x2_t rect = v29;
      float32x4_t v39 = vaddq_f32(v33[7], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33[4], COERCE_FLOAT(*(_OWORD *)v34->f32)), v33[5], *v34, 1), v33[6], *(float32x4_t *)v34->f32, 2));
      float32x2_t rect_16 = (float32x2_t)vdivq_f32(v39, (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 3)).u64[0];
      double v40 = v29.f64[1];
      float64x2_t v41 = v29;
      double v42 = v38;
      if (CGRectIsNull(*(CGRect *)(&v37 - 1)))
      {
        float64x2_t v37 = *v36;
        float32x2_t v43 = rect_16;
      }
      else
      {
        v44.f32[0] = rect.f64[0] + v82;
        float32_t v45 = v40 + v38;
        v44.f32[1] = v45;
        float32x2_t v46 = vminnm_f32(rect_16, vcvt_f32_f64(rect));
        float64x2_t v37 = vcvtq_f64_f32(vsub_f32(vmaxnm_f32(rect_16, v44), v46));
        float32x2_t v43 = v46;
      }
      float64x2_t v29 = vcvtq_f64_f32(v43);
      v34 += 2;
      double v38 = v37.f64[1];
      v35 -= 16;
    }
    while (v35);
    CGFloat v47 = v29.f64[1];
    CGFloat v48 = v29.f64[0];
    double v49 = v28[1];
    double v30 = v28[2];
    double v31 = v28[3];
    CGFloat v83 = v37.f64[0];
    double recta = *v28;
  }
  else
  {
    double v49 = *(double *)(MEMORY[0x263F001A0] + 8);
    double v38 = *(double *)(MEMORY[0x263F001A0] + 24);
    CGFloat v83 = *(double *)(MEMORY[0x263F001A0] + 16);
    CGFloat v47 = v49;
    double recta = *MEMORY[0x263F001A0];
    CGFloat v48 = *MEMORY[0x263F001A0];
  }
  float32x4_t v50 = (float32x4_t *)re::ecs2::EntityComponentCollection::get(v25, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v50)
  {
    float32x4_t v52 = v50[3];
    float32x4_t v51 = v50[4];
    uint32x4_t v53 = (uint32x4_t)vcgtq_f32(v52, v51);
    v53.i32[3] = v53.i32[2];
    if ((vmaxvq_u32(v53) & 0x80000000) != 0)
    {
      float32x4_t v54 = v50[2];
      v55.i64[0] = 0xBF000000BF000000;
      v55.i64[1] = 0xBF000000BF000000;
      v52.i64[0] = vmulq_f32(v54, v55).u64[0];
      v55.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v51.i64[0] = vmulq_f32(v54, v51).u64[0];
    }
    float32x2_t rect_16a = *(float32x2_t *)v52.f32;
    float32x2_t v81 = *(float32x2_t *)v51.f32;
    v94.origin.CGFloat x = recta;
    v94.origin.CGFloat y = v49;
    v94.size.CGFloat width = v30;
    v94.size.CGFloat height = v31;
    if (CGRectIsNull(v94))
    {
      float64x2_t v56 = *(float64x2_t *)MEMORY[0x263F001B0];
      float32x2_t v57 = rect_16a;
    }
    else
    {
      v58.f32[0] = recta;
      float32_t v59 = v49;
      v58.f32[1] = v59;
      v60.f32[0] = v30 + recta;
      float32_t v61 = v31 + v49;
      v60.f32[1] = v61;
      float32x2_t v57 = vminnm_f32(rect_16a, v58);
      float64x2_t v56 = vcvtq_f64_f32(vsub_f32(vmaxnm_f32(rect_16a, v60), v57));
    }
    float64x2_t rectb = v56;
    float32x2_t rect_16b = v57;
    float64x2_t v62 = vcvtq_f64_f32(v57);
    float64_t v63 = v62.f64[1];
    float64_t v64 = v56.f64[1];
    float64x2_t v80 = v62;
    if (CGRectIsNull(*(CGRect *)(&v56 - 1)))
    {
      double v49 = v81.f32[1];
      double recta = v81.f32[0];
      double v30 = *MEMORY[0x263F001B0];
      double v31 = *(double *)(MEMORY[0x263F001B0] + 8);
    }
    else
    {
      float32x2_t v65 = vminnm_f32(v81, rect_16b);
      float32x2_t v66 = vmaxnm_f32(v81, vcvt_f32_f64(vaddq_f64(rectb, v80)));
      double recta = v65.f32[0];
      double v49 = v65.f32[1];
      float32x2_t v67 = vsub_f32(v66, v65);
      double v30 = v67.f32[0];
      double v31 = v67.f32[1];
    }
  }
  v95.size.CGFloat width = v83;
  v95.origin.CGFloat x = v48;
  v95.origin.CGFloat y = v47;
  v95.size.CGFloat height = v38;
  CGRect v96 = CGRectInset(v95, 0.00000011920929, 0.00000011920929);
  CGFloat x = v96.origin.x;
  CGFloat y = v96.origin.y;
  CGFloat width = v96.size.width;
  CGFloat height = v96.size.height;
  v96.origin.CGFloat x = recta;
  v96.origin.CGFloat y = v49;
  v96.size.CGFloat width = v30;
  v96.size.CGFloat height = v31;
  CGRect v97 = CGRectInset(v96, 0.00000011920929, 0.00000011920929);
  CGFloat v72 = v97.origin.x;
  CGFloat v73 = v97.origin.y;
  CGFloat v74 = v97.size.width;
  CGFloat v75 = v97.size.height;
  CGFloat v76 = x;
  CGFloat v77 = y;
  CGFloat v78 = width;
  CGFloat v79 = height;
  return CGRectIntersectsRect(*(CGRect *)&v76, *(CGRect *)&v72);
}

uint64_t re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(re::ecs2::CAMeshSortGroup *this, const re::ecs2::Entity *a2, const re::ecs2::Entity *a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  unint64_t v6 = (re::ecs2::SortingTransformCache *)*((void *)a3 + 54);
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v13, this, v6);
  float32x4_t v12 = v14;
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v13, a2, v6);
  float32x4_t v8 = *((float32x4_t *)a3 + 7);
  float32x4_t v7 = *((float32x4_t *)a3 + 8);
  float32x4_t v9 = vmulq_f32(vsubq_f32(v12, v7), v8);
  float32x4_t v10 = vmulq_f32(vsubq_f32(v14, v7), v8);
  return *(void *)&vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))))) & 1;
}

__n128 re::ecs2::MeshSortGroupToken::operator=(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[0];
  a1->n128_u16[4] = a2->n128_u16[4];
  a1->n128_u64[0] = v2;
  int v3 = a2[1].n128_u8[0];
  if (a1[1].n128_u8[0]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (a1[1].n128_u8[0]) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      a1[1].n128_u8[0] = 0;
    }
    else
    {
      if (a1[1].n128_u8[0]) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (!v6) {
        a1[1].n128_u8[0] = 1;
      }
      __n128 result = a2[2];
      a1[2] = result;
    }
  }
  int v8 = a2[3].n128_u8[0];
  if (a1[3].n128_u8[0]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9)
  {
    if (a1[3].n128_u8[0]) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      a1[3].n128_u8[0] = 0;
    }
    else
    {
      if (!a1[3].n128_u8[0] && a2[3].n128_u8[0]) {
        a1[3].n128_u8[0] = 1;
      }
      __n128 result = a2[4];
      a1[4] = result;
    }
  }
  if (a1[5].n128_u8[0] || a2[5].n128_u8[0])
  {
    if (!a1[5].n128_u8[0] || a2[5].n128_u8[0])
    {
      if (!a1[5].n128_u8[0])
      {
        if (a2[5].n128_u8[0]) {
          a1[5].n128_u8[0] = 1;
        }
      }
      __n128 result = a2[6];
      __n128 v11 = a2[7];
      a1[6] = result;
      a1[7] = v11;
    }
    else
    {
      a1[5].n128_u8[0] = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::registerScene(re::ecs2::CARESortingManager *this, re::EventBus **a2)
{
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v141 = (re::ecs2::Scene *)a2;
  unint64_t v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track mesh sorting changes.", "eventBus", "registerScene", 2144);
    _os_crash();
    __break(1u);
  }
  v135[0] = 0;
  v135[1] = 0;
  int v136 = 1;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v137 = 0;
  int v140 = 0;
  uint64_t v5 = 0;
  v199[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v199[1] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v199[2] = re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  do
  {
    uint64_t v6 = v199[v5];
    uint64_t v197 = re::globalAllocators((re *)v4)[2];
    long long v198 = 0;
    float32x4_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v197 + 32))(v197, 32, 0);
    void *v7 = &unk_26E6E13B8;
    v7[1] = this;
    v7[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidChangeEvent>;
    v7[3] = 0;
    long long v198 = v7;
    uint64_t v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v196, v6, 0);
    uint64_t v10 = v9;
    __n128 v11 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
    void *v11 = v8;
    v11[1] = v10;
    float32x4_t v12 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v196);
    uint64_t v194 = re::globalAllocators(v12)[2];
    long long v195 = 0;
    float32x4_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v194 + 32))(v194, 32, 0);
    *float32x4_t v13 = &unk_26E6E1410;
    v13[1] = this;
    float32x4_t v13[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidAddEvent>;
    v13[3] = 0;
    long long v195 = v13;
    uint64_t v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v193, v6, 0);
    uint64_t v16 = v15;
    int v17 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
    *int v17 = v14;
    v17[1] = v16;
    float32x4_t v18 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v193);
    uint64_t v191 = re::globalAllocators(v18)[2];
    uint64_t v192 = 0;
    float32x4_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v191 + 32))(v191, 32, 0);
    *float32x4_t v19 = &unk_26E6E1468;
    v19[1] = this;
    v19[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>;
    v19[3] = 0;
    uint64_t v192 = v19;
    uint64_t v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v190, v6, 0);
    uint64_t v22 = v21;
    float v23 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
    *float v23 = v20;
    v23[1] = v22;
    BOOL v4 = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v190);
    ++v5;
  }
  while (v5 != 3);
  float v24 = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v188 = re::globalAllocators((re *)v4)[2];
  uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v188 + 32))(v188, 32, 0);
  void *v25 = &unk_26E6E13B8;
  v25[1] = this;
  void v25[2] = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidChangeEvent>;
  v25[3] = 0;
  uint64_t v189 = v25;
  uint64_t v26 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v187, (uint64_t)v24, 0);
  uint64_t v28 = v27;
  float64x2_t v29 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *float64x2_t v29 = v26;
  v29[1] = v28;
  double v30 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v187);
  uint64_t v185 = re::globalAllocators(v30)[2];
  double v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v185 + 32))(v185, 32, 0);
  *double v31 = &unk_26E6E1410;
  v31[1] = this;
  float32x4_t v31[2] = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidAddEvent>;
  v31[3] = 0;
  unsigned int v186 = v31;
  uint64_t v32 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v184, (uint64_t)v24, 0);
  uint64_t v34 = v33;
  uint64_t v35 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  void *v35 = v32;
  v35[1] = v34;
  float32x4_t v36 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v184);
  uint64_t v182 = re::globalAllocators(v36)[2];
  float64x2_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v182 + 32))(v182, 32, 0);
  *float64x2_t v37 = &unk_26E6E1468;
  v37[1] = this;
  v37[2] = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentWillRemoveEvent>;
  v37[3] = 0;
  int v183 = v37;
  uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v181, (uint64_t)v24, 0);
  uint64_t v40 = v39;
  float64x2_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *float64x2_t v41 = v38;
  v41[1] = v40;
  double v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v181);
  uint64_t v179 = re::globalAllocators(v42)[2];
  float32x2_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v179 + 32))(v179, 32, 0);
  *float32x2_t v43 = &unk_26E6E14C0;
  v43[1] = this;
  v43[2] = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REBillboardTransformChangedEvent>;
  v43[3] = 0;
  uint64_t v180 = v43;
  uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v2, (uint64_t)v178, 0, 0);
  uint64_t v46 = v45;
  CGFloat v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *CGFloat v47 = v44;
  v47[1] = v46;
  CGFloat v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)v178);
  double v49 = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  uint64_t v176 = re::globalAllocators(v48)[2];
  float32x4_t v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v176 + 32))(v176, 32, 0);
  *float32x4_t v50 = &unk_26E6E13B8;
  v50[1] = this;
  v50[2] = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidChangeEvent>;
  v50[3] = 0;
  int v177 = v50;
  uint64_t v51 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v175, (uint64_t)v49, 0);
  uint64_t v53 = v52;
  float32x4_t v54 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *float32x4_t v54 = v51;
  v54[1] = v53;
  float32x4_t v55 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v175);
  uint64_t v173 = re::globalAllocators(v55)[2];
  float64x2_t v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v173 + 32))(v173, 32, 0);
  void *v56 = &unk_26E6E1410;
  v56[1] = this;
  v56[2] = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidAddEvent>;
  v56[3] = 0;
  int v174 = v56;
  uint64_t v57 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v172, (uint64_t)v49, 0);
  uint64_t v59 = v58;
  float32x2_t v60 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  void *v60 = v57;
  v60[1] = v59;
  float32_t v61 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v172);
  uint64_t v170 = re::globalAllocators(v61)[2];
  float64x2_t v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v170 + 32))(v170, 32, 0);
  *float64x2_t v62 = &unk_26E6E1468;
  v62[1] = this;
  v62[2] = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentWillRemoveEvent>;
  v62[3] = 0;
  unsigned int v171 = v62;
  uint64_t v63 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v169, (uint64_t)v49, 0);
  uint64_t v65 = v64;
  float32x2_t v66 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *float32x2_t v66 = v63;
  v66[1] = v65;
  float32x2_t v67 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v169);
  uint64_t v68 = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v167 = re::globalAllocators(v67)[2];
  uint64_t v69 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v167 + 32))(v167, 32, 0);
  void *v69 = &unk_26E6E1410;
  v69[1] = this;
  v69[2] = re::ecs2::CARESortingManager::meshSortingComponentAddedEventHandler;
  v69[3] = 0;
  unint64_t v168 = v69;
  uint64_t v70 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v166, (uint64_t)v68, 0);
  uint64_t v72 = v71;
  CGFloat v73 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  void *v73 = v70;
  v73[1] = v72;
  CGFloat v74 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v166);
  uint64_t v164 = re::globalAllocators(v74)[2];
  CGFloat v75 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v164 + 32))(v164, 32, 0);
  *CGFloat v75 = &unk_26E6E1468;
  v75[1] = this;
  v75[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>;
  v75[3] = 0;
  uint64_t v165 = v75;
  uint64_t v76 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v163, (uint64_t)v68, 0);
  uint64_t v78 = v77;
  CGFloat v79 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  void *v79 = v76;
  v79[1] = v78;
  float64x2_t v80 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v163);
  uint64_t v81 = re::globalAllocators(v80)[2];
  uint64_t v161 = v81;
  double v82 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v81 + 32))(v81, 32, 0);
  *double v82 = &unk_26E6E1528;
  v82[1] = this;
  v82[2] = re::ecs2::CARESortingManager::didChangeUISortingCASortOrderEventHandler;
  v82[3] = 0;
  uint64_t v162 = v82;
  uint64_t v201 = v81;
  uint64_t v202 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>((uint64_t)v200, (uint64_t)v160);
  CGFloat v83 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(v2, (uint64_t)v83);
  uint64_t v210 = v201;
  uint64_t v211 = 0;
  uint64_t v85 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>((uint64_t)v209, (uint64_t)v200);
  uint64_t v207 = re::globalAllocators(v85)[2];
  uint64_t v208 = 0;
  uint64_t v203 = &unk_26E6E18B8;
  uint64_t v205 = v210;
  uint64_t v206 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>((uint64_t)v204, (uint64_t)v209);
  uint64_t v208 = &v203;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable((uint64_t)v209);
  uint64_t v86 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v203, 0, 0);
  uint64_t v88 = v87;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v203);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable((uint64_t)v200);
  uint64_t v89 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *uint64_t v89 = v86;
  v89[1] = v88;
  float32x4_t v90 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable((uint64_t)v160);
  uint64_t v91 = re::globalAllocators(v90)[2];
  uint64_t v158 = v91;
  float32x4_t v92 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v91 + 32))(v91, 32, 0);
  void *v92 = &unk_26E6E1590;
  v92[1] = this;
  v92[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>;
  v92[3] = 0;
  unint64_t v159 = v92;
  uint64_t v201 = v91;
  uint64_t v202 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>((uint64_t)v200, (uint64_t)v157);
  uint64_t v93 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>();
  unint64_t v94 = re::EventBus::addOrGetEventInfo(v2, (uint64_t)v93);
  uint64_t v210 = v201;
  uint64_t v211 = 0;
  CGRect v95 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>((uint64_t)v209, (uint64_t)v200);
  uint64_t v207 = re::globalAllocators(v95)[2];
  uint64_t v208 = 0;
  uint64_t v203 = &unk_26E6E1910;
  uint64_t v205 = v210;
  uint64_t v206 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>((uint64_t)v204, (uint64_t)v209);
  uint64_t v208 = &v203;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable((uint64_t)v209);
  uint64_t v96 = re::EventBus::EventInfo::addSubscription(v94, (uint64_t)&v203, 0, 0);
  uint64_t v98 = v97;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v203);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable((uint64_t)v200);
  int v99 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *int v99 = v96;
  v99[1] = v98;
  unint64_t v100 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable((uint64_t)v157);
  uint64_t v101 = re::globalAllocators(v100)[2];
  uint64_t v155 = v101;
  uint64_t v102 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v101 + 32))(v101, 32, 0);
  void *v102 = &unk_26E6E15F8;
  v102[1] = this;
  v102[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>;
  v102[3] = 0;
  unint64_t v156 = v102;
  uint64_t v201 = v101;
  uint64_t v202 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>((uint64_t)v200, (uint64_t)v154);
  uint64_t v103 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>();
  unint64_t v104 = re::EventBus::addOrGetEventInfo(v2, (uint64_t)v103);
  uint64_t v210 = v201;
  uint64_t v211 = 0;
  unsigned int v105 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>((uint64_t)v209, (uint64_t)v200);
  uint64_t v207 = re::globalAllocators(v105)[2];
  uint64_t v208 = 0;
  uint64_t v203 = &unk_26E6E1968;
  uint64_t v205 = v210;
  uint64_t v206 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>((uint64_t)v204, (uint64_t)v209);
  uint64_t v208 = &v203;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable((uint64_t)v209);
  uint64_t v106 = re::EventBus::EventInfo::addSubscription(v104, (uint64_t)&v203, 0, 0);
  uint64_t v108 = v107;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)&v203);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable((uint64_t)v200);
  unint64_t v109 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  void *v109 = v106;
  v109[1] = v108;
  unint64_t v110 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable((uint64_t)v154);
  uint64_t v152 = re::globalAllocators(v110)[2];
  uint64_t v111 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v152 + 32))(v152, 32, 0);
  void *v111 = &unk_26E6E1660;
  v111[1] = this;
  v111[2] = re::ecs2::CARESortingManager::invalidateEntityEventHandler<RESceneEntityDidReparentEvent>;
  v111[3] = 0;
  uint64_t v153 = v111;
  uint64_t v112 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v151, 0, 0);
  uint64_t v114 = v113;
  uint64_t v115 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *uint64_t v115 = v112;
  v115[1] = v114;
  uint64_t v116 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v151);
  uint64_t v149 = re::globalAllocators(v116)[2];
  uint64_t v117 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v149 + 32))(v149, 32, 0);
  void *v117 = &unk_26E6E16B8;
  v117[1] = this;
  v117[2] = re::ecs2::CARESortingManager::activateEntityEventHandler;
  v117[3] = 0;
  uint64_t v150 = v117;
  uint64_t v118 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v148, 0, 0);
  uint64_t v120 = v119;
  unint64_t v121 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *unint64_t v121 = v118;
  v121[1] = v120;
  unint64_t v122 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v148);
  uint64_t v146 = re::globalAllocators(v122)[2];
  float32x4_t v123 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v146 + 32))(v146, 32, 0);
  void *v123 = &unk_26E6E1710;
  v123[1] = this;
  v123[2] = re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillDeactivateEvent>;
  v123[3] = 0;
  uint64_t v147 = v123;
  uint64_t v124 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v145, 0, 0);
  uint64_t v126 = v125;
  unint64_t v127 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *unint64_t v127 = v124;
  v127[1] = v126;
  unint64_t v128 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v145);
  uint64_t v143 = re::globalAllocators(v128)[2];
  uint64_t v129 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v143 + 32))(v143, 32, 0);
  *uint64_t v129 = &unk_26E6E1768;
  v129[1] = this;
  v129[2] = re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillRemoveEvent>;
  v129[3] = 0;
  unint64_t v144 = v129;
  uint64_t v130 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v2, (uint64_t)v142, 0, 0);
  uint64_t v132 = v131;
  uint64_t v133 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v135);
  *uint64_t v133 = v130;
  v133[1] = v132;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v142);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 8, (uint64_t *)&v141, (uint64_t)v135);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v135);
  uint64_t result = v135[0];
  if (v135[0])
  {
    if ((v136 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v135[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  v9[3] = *(void *)(a2 + 24);
  v9[4] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  uint64_t v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(a1, 0, (uint64_t)v9, a3, a4);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v9);
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  v9[3] = *(void *)(a2 + 24);
  v9[4] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  uint64_t v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(a1, 0, (uint64_t)v9, a3, a4);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v9);
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  v9[3] = *(void *)(a2 + 24);
  v9[4] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  uint64_t v7 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(a1, 0, (uint64_t)v9, a3, a4);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)v9);
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REBillboardTransformChangedEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::meshSortingComponentAddedEventHandler(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4 && *(unsigned char *)(v4 + 25) != 5 && !*(unsigned char *)(v4 + 168)) {
    re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::didChangeUISortingCASortOrderEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 344;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 344, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (*(unsigned char *)(a2 + 288))
  {
    uint64_t v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::activateEntityEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  ++re::ecs2::CARESortingDebugging::m_entitiesActivated;
  uint64_t v3 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    uint64_t v4 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    uint64_t v5 = *(int16x8_t **)(a2 + 88);
    int16x8_t v6 = vld1q_dup_s16(v4);
    int v7 = 1;
    while (1)
    {
      uint16x8_t v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_23436BBD0);
      v8.i16[0] = vmaxvq_u16(v8);
      if (v8.i32[0]) {
        break;
      }
      v7 -= 8;
      ++v5;
      if (!--v3) {
        goto LABEL_8;
      }
    }
    if (v8.u16[0] - v7 < *(unsigned __int16 *)(a2 + 80)) {
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated;
    }
  }
LABEL_8:
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 152, &v10);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 248, &v10);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 200, &v10);
  return 0;
}

uint64_t re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillDeactivateEvent>(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  ++re::ecs2::CARESortingDebugging::m_entitiesDeactivated;
  uint64_t v2 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    uint64_t v3 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    uint64_t v4 = *(int16x8_t **)(a2 + 88);
    int16x8_t v5 = vld1q_dup_s16(v3);
    int v6 = 1;
    while (1)
    {
      uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0]) {
        break;
      }
      v6 -= 8;
      ++v4;
      if (!--v2) {
        goto LABEL_8;
      }
    }
    if (v7.u16[0] - v6 < *(unsigned __int16 *)(a2 + 80)) {
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated;
    }
  }
LABEL_8:
  re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  v9[3] = *(void *)(a2 + 24);
  v9[4] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  uint64_t v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(a1, 0, (uint64_t)v9, a3, a4);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v9);
  return v7;
}

uint64_t re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillRemoveEvent>(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  ++re::ecs2::CARESortingDebugging::m_entitiesDeactivated;
  uint64_t v2 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    uint64_t v3 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    uint64_t v4 = *(int16x8_t **)(a2 + 88);
    int16x8_t v5 = vld1q_dup_s16(v3);
    int v6 = 1;
    while (1)
    {
      uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0]) {
        break;
      }
      v6 -= 8;
      ++v4;
      if (!--v2) {
        goto LABEL_8;
      }
    }
    if (v7.u16[0] - v6 < *(unsigned __int16 *)(a2 + 80)) {
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated;
    }
  }
LABEL_8:
  re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::ecs2::CARESortingManager::unregisterScene(re::ecs2::CARESortingManager *this, re::ecs2::Entity ***a2)
{
  uint64_t v14 = (re::ecs2::Scene *)a2;
  uint64_t v3 = a2[16];
  if (v3)
  {
    uint64_t v4 = a2[18];
    uint64_t v5 = 8 * (void)v3;
    do
    {
      int v6 = *v4++;
      re::ecs2::CARESortingManager::removeEntityFromTracking(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  uint16x8_t v7 = (char *)this + 8;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    uint64_t v9 = *((void *)v14 + 36);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::removeEntityFromTracking(re::ecs2::CARESortingManager *this, re::ecs2::Entity *a2)
{
  float32x4_t v18 = a2;
  uint64_t v3 = (char *)this + 104;
  uint64_t v4 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v18);
  if (v4)
  {
    uint64_t v5 = (re::ecs2::WorldSortingState *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 56, *v4);
    if (v5) {
      re::ecs2::WorldSortingState::removeEntityFromTracking(v5, v18);
    }
    re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v3, (uint64_t *)&v18);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 152, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 200, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 248, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 296, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 344, (uint64_t *)&v18);
  if (*((void *)this + 56))
  {
    unint64_t v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)v18 ^ ((unint64_t)v18 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)v18 ^ ((unint64_t)v18 >> 30))) >> 27));
    unint64_t v7 = (v6 ^ (v6 >> 31)) % *((unsigned int *)this + 118);
    uint64_t v8 = *((void *)this + 57);
    uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v10 = *((void *)this + 58);
      if (*(re::ecs2::Entity **)(v10 + 160 * v9 + 16) == v18)
      {
        *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
LABEL_12:
        uint64_t v12 = *((void *)this + 58);
        uint64_t v13 = v12 + 160 * v9;
        int v16 = *(_DWORD *)(v13 + 8);
        uint64_t v15 = (int *)(v13 + 8);
        int v14 = v16;
        if (v16 < 0)
        {
          int *v15 = v14 & 0x7FFFFFFF;
          uint64_t v12 = *((void *)this + 58);
          int v14 = *(_DWORD *)(v12 + 160 * v9 + 8);
        }
        *(_DWORD *)(v12 + 160 * v9 + 8) = *((_DWORD *)this + 121) | v14 & 0x80000000;
        *((_DWORD *)this + 121) = v9;
        --*((_DWORD *)this + 119);
        ++*((_DWORD *)this + 122);
      }
      else
      {
        while (1)
        {
          unsigned int v11 = v9;
          LODWORD(v9) = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::ecs2::Entity **)(v10 + 160 * v9 + 16) == v18)
          {
            *(_DWORD *)(v10 + 160 * v11 + 8) = *(_DWORD *)(v10 + 160 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
            goto LABEL_12;
          }
        }
      }
    }
  }
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 392, (uint64_t *)&v18);
}

void re::ecs2::CARESortingManager::debugDumpSorting(re::ecs2::CARESortingManager *this, __CFString *a2)
{
  re::ecs2::CARESortingDebugging::dumpSorting((re::ecs2::CARESortingDebugging *)&v2, a2, this);
}

uint64_t *re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity@<X0>(re::ecs2::CARESortingManager *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = a2;
  uint64_t result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v6);
  if (result)
  {
    uint64_t result = (uint64_t *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 56, result);
    if (result) {
      return re::ecs2::WorldSortingState::tryGetCodirectionalGroupForEntity((uint64_t)result, (uint64_t)v6, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 184 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 184 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 184 * v4 + 16) == v2) {
        return v6 + 184 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 184 * v4 + 24;
}

uint64_t *re::ecs2::WorldSortingState::tryGetCodirectionalGroupForEntity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a2;
  uint64_t result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 96, &v6);
  if (result)
  {
    uint64_t v5 = *result;
    *a3 = *result;
    if (v5) {
      return (uint64_t *)(id)(v5 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void re::ecs2::CARESortingManager::~CARESortingManager(re::ecs2::CARESortingManager *this)
{
  re::ecs2::CARESortingManager::~CARESortingManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::CARESortingManager *)((char *)this + 528));
  re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 56);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 49);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 1);
}

void re::ecs2::CAMeshCodirectionalGroup::~CAMeshCodirectionalGroup(re::ecs2::CAMeshCodirectionalGroup *this)
{
  *(void *)this = &unk_26E6E1348;
  uint64_t v2 = (uint64_t *)((char *)this + 24);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6E1348;
  uint64_t v2 = (uint64_t *)((char *)this + 24);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::ecs2::CAMeshCodirectionalGroup::allocator(re::ecs2::CAMeshCodirectionalGroup *this)
{
}

void re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (uint64_t *)(v8 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

double re::make::shared::inplace<re::ecs2::MeshSortingComponent>@<D0>(ArcSharedObject *a1@<X0>, void *a2@<X8>)
{
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  unint64_t v3 = (_OWORD *)((char *)a1 + 304);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6E1C00;
  *(void *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 0;
  *(unsigned char *)(v4 + 80) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  *(void *)(v4 + 160) = 0x7FFFFFFF00000000;
  *(unsigned char *)(v4 + 168) = 0;
  *(void *)(v4 + 176) = 0;
  *(_WORD *)(v4 + 184) = 0;
  *(unsigned char *)(v4 + 192) = 0;
  *(unsigned char *)(v4 + 224) = 0;
  *(unsigned char *)(v4 + 256) = 0;
  *(void *)(v4 + 392) = 0;
  *(unsigned char *)(v4 + 400) = 0;
  *(unsigned char *)(v4 + 416) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v3 + 28) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_DWORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *a2 = v4;
  return result;
}

void re::ecs2::MeshSortingComponent::~MeshSortingComponent(re::ecs2::MeshSortingComponent *this)
{
  *(void *)this = &unk_26E6E1C00;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6E1C00;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E13B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E13B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1410;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1410;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1468;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1468;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E14C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E14C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1528;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1528;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1590;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1590;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E15F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E15F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1660;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1660;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E16B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E16B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1710;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1710;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E1768;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E1768;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 184;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    uint64_t v3 = (uint64_t *)(a1 + 24);
    re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a1 + 120));
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)(a1 + 72));
    return re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit(v3);
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v29, 0, 36);
      *(void *)&v29[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v29, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v29;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v29[8];
      *(_OWORD *)float64x2_t v29 = v5;
      *(void *)&v29[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v29[24];
      *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v29[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 160 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 160 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 160 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 160 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 160 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 160 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 160 * v17 + 16) = *(void *)v13;
            uint64_t v21 = (_OWORD *)(*(void *)(a1 + 16) + 160 * v17);
            long long v22 = *(_OWORD *)(v13 + 16);
            long long v23 = *(_OWORD *)(v13 + 32);
            long long v24 = *(_OWORD *)(v13 + 64);
            v21[4] = *(_OWORD *)(v13 + 48);
            v21[5] = v24;
            v21[2] = v22;
            void v21[3] = v23;
            long long v25 = *(_OWORD *)(v13 + 80);
            long long v26 = *(_OWORD *)(v13 + 96);
            long long v27 = *(_OWORD *)(v13 + 128);
            v21[8] = *(_OWORD *)(v13 + 112);
            v21[9] = v27;
            v21[6] = v25;
            v21[7] = v26;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 160;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
    }
  }
  else
  {
    if (a2) {
      signed int v28 = a2;
    }
    else {
      signed int v28 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(_anonymous_namespace_ *a1, unsigned int a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *((_DWORD *)a1 + 6) != a2 && *((_DWORD *)a1 + 7) <= a2)
    {
      memset(v78, 0, 36);
      *(void *)&v78[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v78, v4, a2);
      long long v5 = *(_OWORD *)v3;
      *(void *)uint64_t v3 = *(void *)v78;
      uint64_t v6 = *(void *)(v3 + 16);
      long long v7 = *(_OWORD *)&v78[8];
      *(_OWORD *)uint64_t v78 = v5;
      *(void *)&v78[16] = v6;
      *(_OWORD *)(v3 + 8) = v7;
      long long v9 = *(_OWORD *)&v78[24];
      *(_OWORD *)&v78[24] = *(_OWORD *)(v3 + 24);
      unsigned int v8 = *(_DWORD *)&v78[32];
      *(_OWORD *)(v3 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v66 = v8;
        uint64_t v67 = v3;
        uint64_t v69 = v6;
        do
        {
          if ((*(_DWORD *)(v6 + 184 * v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v14 = (unint64_t *)(v6 + 184 * v11);
            unint64_t v17 = *v14;
            uint64_t v16 = (uint64_t)(v14 + 3);
            unint64_t v15 = v17;
            unint64_t v18 = *(unsigned int *)(v3 + 24);
            unint64_t v19 = v17 % v18;
            unsigned int v20 = *(_DWORD *)(v3 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              unsigned int v20 = *(_DWORD *)(v3 + 32);
              unsigned int v21 = v20;
              if (v20 == v18)
              {
                re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v3, (2 * v12));
                unint64_t v19 = v15 % *(unsigned int *)(v3 + 24);
                unsigned int v21 = *(_DWORD *)(v3 + 32);
                uint64_t v13 = *(void *)(v3 + 8);
              }
              *(_DWORD *)(v3 + 32) = v21 + 1;
              uint64_t v22 = *(void *)(v3 + 16);
              int v23 = *(_DWORD *)(v22 + 184 * v20 + 8);
            }
            else
            {
              uint64_t v22 = *(void *)(v3 + 16);
              int v23 = *(_DWORD *)(v22 + 184 * v20 + 8);
              *(_DWORD *)(v3 + 36) = v23 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v22 + 184 * v20 + 8) = v23 | 0x80000000;
            unint64_t v68 = v19;
            uint64_t v24 = *(void *)(v3 + 16) + 184 * v20;
            *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v19);
            *(void *)(*(void *)(v3 + 16) + 184 * v20) = v15;
            *(void *)(*(void *)(v3 + 16) + 184 * v20 + 16) = *(void *)(v6 + 184 * v11 + 16);
            uint64_t v71 = *(void *)(v3 + 16);
            unsigned int v72 = v20;
            uint64_t v25 = v71 + 184 * v20;
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(v25 + 24, v16);
            uint64_t v26 = v6 + 184 * v11;
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(v25 + 72, v26 + 72);
            *(_OWORD *)(v25 + 120) = 0u;
            uint64_t v27 = v25 + 120;
            *(void *)(v27 + 36) = 0x7FFFFFFFLL;
            *(_DWORD *)(v27 + 32) = 0;
            uint64_t v70 = v27;
            *(_OWORD *)(v27 + 16) = 0u;
            uint64_t v28 = *(void *)(v26 + 120);
            if (v28)
            {
              uint64_t v29 = v69 + 184 * v11;
              unsigned int v32 = *(_DWORD *)(v29 + 148);
              double v31 = (unsigned int *)(v29 + 148);
              unsigned int v30 = v32;
              if (v32 <= 3) {
                signed int v33 = 3;
              }
              else {
                signed int v33 = v30;
              }
              uint64_t v77 = (int *)(v27 + 36);
              re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v27, v28, v33);
              uint64_t v34 = (int *)(v27 + 36);
              uint64_t v36 = v71;
              unsigned int v35 = v20;
              uint64_t v76 = (void *)(v71 + 184 * v20 + 148);
              if (*(_DWORD *)v76)
              {
                uint64_t v37 = *(unsigned int *)(v71 + 184 * v20 + 144);
                if (v37)
                {
                  memset_pattern16(*(void **)(v71 + 184 * v20 + 128), &unk_2343655D0, 4 * v37);
                  uint64_t v34 = (int *)(v27 + 36);
                }
                uint64_t v38 = v71 + 184 * v20;
                unsigned int v41 = *(_DWORD *)(v38 + 152);
                uint64_t v40 = (unsigned int *)(v38 + 152);
                unint64_t v39 = v41;
                if (v41)
                {
                  uint64_t v42 = 0;
                  unint64_t v43 = 0;
                  do
                  {
                    uint64_t v44 = *(void *)(v71 + 184 * v20 + 136) + v42;
                    int v45 = *(_DWORD *)(v44 + 8);
                    if (v45 < 0)
                    {
                      *(_DWORD *)(v44 + 8) = v45 & 0x7FFFFFFF;
                      uint64_t v46 = *(void *)(v44 + 24);
                      if (v46)
                      {

                        uint64_t v34 = v77;
                        *(void *)(v44 + 24) = 0;
                        unint64_t v39 = *v40;
                      }
                    }
                    ++v43;
                    v42 += 32;
                  }
                  while (v43 < v39);
                }
                uint64_t v36 = v71;
                int *v34 = 0x7FFFFFFF;
                void *v76 = 0;
                ++*(_DWORD *)(v70 + 40);
                unsigned int v35 = v20;
              }
              CGFloat v75 = (unsigned int *)(v36 + 184 * v35 + 144);
              if (*v75 < *v31)
              {
                re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(v70, *v31);
                uint64_t v34 = v77;
              }
              uint64_t v47 = v69 + 184 * v11;
              unint64_t v48 = *(unsigned int *)(v47 + 152);
              CGFloat v74 = (unsigned int *)(v47 + 152);
              if (*(_DWORD *)(v47 + 152))
              {
                uint64_t v49 = 0;
                unint64_t v50 = 0;
                uint64_t v51 = v71 + 184 * v72;
                uint64_t v52 = (uint64_t *)(v51 + 136);
                uint64_t v53 = (_DWORD *)(v51 + 152);
                float32x4_t v54 = (void *)(v51 + 128);
                CGFloat v73 = (_DWORD *)(v51 + 152);
                do
                {
                  float32x4_t v55 = (unint64_t *)(*(void *)(v69 + 184 * v11 + 136) + v49);
                  if ((v55[1] & 0x80000000) != 0)
                  {
                    unint64_t v56 = *v55;
                    unint64_t v57 = *v75;
                    unint64_t v58 = *v55 % v57;
                    uint64_t v59 = *v34;
                    if (v59 == 0x7FFFFFFF)
                    {
                      uint64_t v59 = *v53;
                      int v60 = v59;
                      if (v59 == v57)
                      {
                        re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(v70, 2 * *(_DWORD *)v76);
                        uint64_t v53 = v73;
                        uint64_t v34 = v77;
                        unint64_t v58 = v56 % *v75;
                        int v60 = *v73;
                      }
                      *uint64_t v53 = v60 + 1;
                      uint64_t v61 = *v52;
                      int v62 = *(_DWORD *)(*v52 + 32 * v59 + 8);
                    }
                    else
                    {
                      uint64_t v61 = *v52;
                      int v62 = *(_DWORD *)(*v52 + 32 * v59 + 8);
                      int *v34 = v62 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v61 + 32 * v59 + 8) = v62 | 0x80000000;
                    *(_DWORD *)(*v52 + 32 * v59 + 8) = *(_DWORD *)(*v52 + 32 * v59 + 8) & 0x80000000 | *(_DWORD *)(*v54 + 4 * v58);
                    *(void *)(*v52 + 32 * v59) = v56;
                    *(void *)(*v52 + 32 * v59 + 16) = v55[2];
                    unint64_t v63 = v55[3];
                    *(void *)(*v52 + 32 * v59 + 24) = v63;
                    if (v63)
                    {
                      id v64 = (id)(v63 + 8);
                      uint64_t v53 = v73;
                      uint64_t v34 = v77;
                    }
                    *(_DWORD *)(*v54 + 4 * v58) = v59;
                    ++*(_DWORD *)v76;
                    unint64_t v48 = *v74;
                  }
                  ++v50;
                  v49 += 32;
                }
                while (v50 < v48);
              }
            }
            uint64_t v6 = v69;
            *(_OWORD *)(v71 + 184 * v72 + 168) = *(_OWORD *)(v69 + 184 * v11 + 168);
            uint64_t v3 = v67;
            uint64_t v13 = *(void *)(v67 + 8);
            *(_DWORD *)(v13 + 4 * v68) = v72;
            int v12 = *(_DWORD *)(v67 + 28) + 1;
            *(_DWORD *)(v67 + 28) = v12;
            uint64_t v10 = v66;
          }
          ++v11;
        }
        while (v11 != v10);
      }
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v78);
    }
  }
  else
  {
    if (a2) {
      signed int v65 = a2;
    }
    else {
      signed int v65 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(a1, v4, v5);
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1);
    unsigned int v6 = *(_DWORD *)(a2 + 28);
    if (*(_DWORD *)(a1 + 24) < v6) {
      re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::setCapacity(a1, v6);
    }
    unint64_t v7 = *(unsigned int *)(a2 + 32);
    if (v7)
    {
      uint64_t v8 = 0;
      for (unint64_t i = 0; i < v7; ++i)
      {
        uint64_t v10 = *(void *)(a2 + 16) + v8;
        if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
        {
          re::HashSetBase<re::SharedPtr<re::ResourceSharingManager::Subscription>,re::SharedPtr<re::ResourceSharingManager::Subscription>,re::internal::ValueAsKey<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::Hash<re::SharedPtr<re::ResourceSharingManager::Subscription>>,re::EqualTo<re::SharedPtr<re::ResourceSharingManager::Subscription>>,true,false>::addAsCopy(a1, *(void *)v10 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v10, (uint64_t *)(v10 + 16));
          unint64_t v7 = *(unsigned int *)(a2 + 32);
        }
        v8 += 24;
      }
    }
  }
  return a1;
}

BOOL re::SortingPlane::operator==(float *a1, float *a2)
{
  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v2 = a1[1];
  float v3 = a2[1];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v4 = a1[2];
  float v5 = a2[2];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v6 = a1[4];
  float v7 = a2[4];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v8 = a1[5];
  float v9 = a2[5];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001)) {
    return 0;
  }
  float v10 = a1[6];
  float v11 = a2[6];
  return v10 == v11 || vabds_f32(v10, v11) < (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001);
}

double re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)int v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (uint64_t *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 3);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 72 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 72 * v17 + 16) = *(v13 - 1);
            uint64_t v21 = *(void *)(a1 + 16) + 72 * v17;
            *(_OWORD *)(v21 + 24) = 0u;
            v21 += 24;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(void *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 9;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 6) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + (v17 << 6)) = v14;
            *(void *)(*(void *)(a1 + 16) + (v17 << 6) + 16) = *(void *)v13;
            uint64_t v21 = *(void *)(a1 + 16) + (v17 << 6);
            long long v22 = *(_OWORD *)(v13 + 32);
            *(_OWORD *)(v21 + 32) = *(_OWORD *)(v13 + 16);
            *(_OWORD *)(v21 + 48) = v22;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

double re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v3 << 6;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 64;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (!*(void *)a1
    || (unint64_t v9 = v8 % *(unsigned int *)(a1 + 24),
        uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9),
        v10 == 0x7FFFFFFF))
  {
LABEL_3:
    uint64_t v11 = *(unsigned int *)(a1 + 36);
    if (v11 == 0x7FFFFFFF)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 32);
      int v12 = v11;
      if (v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        int v12 = *(_DWORD *)(a1 + 32);
        uint64_t v6 = *a2;
      }
      *(_DWORD *)(a1 + 32) = v12 + 1;
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
      *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
    uint64_t v15 = v9;
    *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
    *(void *)(*(void *)(a1 + 16) + 32 * v11) = v8;
    *(void *)(*(void *)(a1 + 16) + 32 * v11 + 16) = v6;
    uint64_t v16 = *a3;
    *(void *)(*(void *)(a1 + 16) + 32 * v11 + 24) = *a3;
    if (v16) {
      id v17 = (id)(v16 + 8);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v15) = v11;
    ++*(_DWORD *)(a1 + 28);
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  while (*(void *)(v18 + 32 * v10 + 16) != v6)
  {
    int v19 = *(_DWORD *)(v18 + 32 * v10 + 8);
    uint64_t v10 = v19 & 0x7FFFFFFF;
    if ((v19 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  uint64_t v20 = v18 + 32 * v10;
  uint64_t v23 = *(void *)(v20 + 24);
  long long v22 = (void *)(v20 + 24);
  uint64_t v21 = v23;
  if (v23)
  {

    *long long v22 = 0;
    uint64_t v18 = *(void *)(a1 + 16);
  }
  uint64_t v24 = *a3;
  *(void *)(v18 + 32 * v10 + 24) = *a3;
  if (v24) {
    id v25 = (id)(v24 + 8);
  }
LABEL_11:
  ++*(_DWORD *)(a1 + 40);
}

void *re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    double result = (void *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 128;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 0x80 || (v7 & 1) == 0))
    {
      if (a2 < 0x81)
      {
        int v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          double result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          unint64_t v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      double result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (float *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(a2 - 2) < v10[2])
                {
                  long long v93 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *((_OWORD *)a2 - 1);
                  *((_OWORD *)a2 - 1) = v93;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v10, v10 + 4, a2 - 4);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (uint64_t)(a2 - 4));
                break;
              case 5uLL:
                unsigned int v41 = (long long *)(v10 + 4);
                uint64_t v42 = (long long *)(v10 + 8);
                unint64_t v43 = (long long *)(v10 + 12);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v10, (uint64_t)(v10 + 4), (uint64_t)(v10 + 8), (uint64_t)(v10 + 12));
                if (*(a2 - 2) < v10[14])
                {
                  long long v44 = *v43;
                  *unint64_t v43 = *((_OWORD *)a2 - 1);
                  *((_OWORD *)a2 - 1) = v44;
                  if (v10[14] < v10[10])
                  {
                    long long v45 = *v42;
                    long long *v42 = *v43;
                    *unint64_t v43 = v45;
                    if (v10[10] < v10[6])
                    {
                      long long v46 = *v41;
                      *unsigned int v41 = *v42;
                      long long *v42 = v46;
                      if (v10[6] < v10[2])
                      {
                        long long v94 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *v41;
                        *unsigned int v41 = v94;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v47 = v10 + 4;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = v10;
                do
                {
                  uint64_t v52 = v47;
                  float v53 = v51[6];
                  if (v53 < v51[2])
                  {
                    uint64_t v54 = *(void *)v47;
                    int v55 = *((_DWORD *)v51 + 7);
                    uint64_t v56 = v50;
                    while (1)
                    {
                      *(_OWORD *)((char *)v10 + v56 + 16) = *(_OWORD *)((char *)v10 + v56);
                      if (!v56) {
                        break;
                      }
                      float v57 = *(float *)((char *)v10 + v56 - 8);
                      v56 -= 16;
                      if (v53 >= v57)
                      {
                        uint64_t v58 = (uint64_t)v10 + v56 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v58 = (uint64_t)v10;
LABEL_84:
                    *(void *)uint64_t v58 = v54;
                    *(float *)(v58 + 8) = v53;
                    *(_DWORD *)(v58 + 12) = v55;
                  }
                  uint64_t v47 = v52 + 4;
                  v50 += 16;
                  uint64_t v51 = v52;
                }
                while (v52 + 4 != a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unsigned int v84 = v47;
                float v85 = *(float *)(a1 + 24);
                if (v85 < *(float *)(a1 + 8))
                {
                  uint64_t v86 = *(void *)v47;
                  int v87 = *(_DWORD *)(a1 + 28);
                  uint64_t v88 = v84;
                  do
                  {
                    *(_OWORD *)uint64_t v88 = *((_OWORD *)v88 - 1);
                    float v89 = *(v88 - 6);
                    v88 -= 4;
                  }
                  while (v85 < v89);
                  *(void *)uint64_t v88 = v86;
                  v88[2] = v85;
                  *((_DWORD *)v88 + 3) = v87;
                }
                uint64_t v47 = v84 + 4;
                a1 = (unint64_t)v84;
              }
              while (v84 + 4 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v59 = (v12 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  unint64_t v63 = &v10[4 * v62];
                  if (2 * v61 + 2 < (uint64_t)v12 && v63[2] < v63[6])
                  {
                    v63 += 4;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  float v64 = v10[4 * v61 + 2];
                  if (v63[2] >= v64)
                  {
                    signed int v65 = &v10[4 * v61];
                    uint64_t v66 = *(void *)v65;
                    int v67 = *((_DWORD *)v65 + 3);
                    do
                    {
                      unint64_t v68 = v65;
                      signed int v65 = v63;
                      *(_OWORD *)unint64_t v68 = *(_OWORD *)v63;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v69 = 2 * v62;
                      uint64_t v62 = (2 * v62) | 1;
                      unint64_t v63 = &v10[4 * v62];
                      uint64_t v70 = v69 + 2;
                      if (v70 < (uint64_t)v12 && v63[2] < v63[6])
                      {
                        v63 += 4;
                        uint64_t v62 = v70;
                      }
                    }
                    while (v63[2] >= v64);
                    *(void *)signed int v65 = v66;
                    v65[2] = v64;
                    *((_DWORD *)v65 + 3) = v67;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v71 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v72 = 0;
                long long v95 = *(_OWORD *)v10;
                CGFloat v73 = v10;
                do
                {
                  CGFloat v74 = v73;
                  v73 += 4 * v72 + 4;
                  uint64_t v75 = 2 * v72;
                  uint64_t v72 = (2 * v72) | 1;
                  uint64_t v76 = v75 + 2;
                  if (v76 < v71 && v73[2] < v73[6])
                  {
                    v73 += 4;
                    uint64_t v72 = v76;
                  }
                  *(_OWORD *)CGFloat v74 = *(_OWORD *)v73;
                }
                while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
                a2 -= 4;
                if (v73 == a2)
                {
                  *(_OWORD *)CGFloat v73 = v95;
                }
                else
                {
                  *(_OWORD *)CGFloat v73 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v95;
                  uint64_t v77 = (char *)v73 - (char *)v10 + 16;
                  if (v77 >= 17)
                  {
                    unint64_t v78 = (((unint64_t)v77 >> 4) - 2) >> 1;
                    float v79 = v73[2];
                    if (v10[4 * v78 + 2] < v79)
                    {
                      uint64_t v80 = *(void *)v73;
                      int v81 = *((_DWORD *)v73 + 3);
                      do
                      {
                        double v82 = v73;
                        CGFloat v73 = &v10[4 * v78];
                        *(_OWORD *)double v82 = *(_OWORD *)v73;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                      }
                      while (v10[4 * v78 + 2] < v79);
                      *(void *)CGFloat v73 = v80;
                      v73[2] = v79;
                      *((_DWORD *)v73 + 3) = v81;
                    }
                  }
                }
              }
              while (v71-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          int v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>((float *)a1, (float *)(a1 + 16 * (v12 >> 1)), a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>((float *)(a1 + 16), v14 - 4, a2 - 8);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>((float *)(a1 + 32), (float *)(a1 + 16 + 16 * v13), a2 - 12);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v14 - 4, v14, (float *)(a1 + 16 + 16 * v13));
            long long v90 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)int v14 = v90;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>((float *)(a1 + 16 * (v12 >> 1)), (float *)a1, a2 - 4);
          }
          --a3;
          if (a4) {
            break;
          }
          float v15 = *(float *)(a1 + 8);
          if (*(float *)(a1 - 8) < v15) {
            goto LABEL_12;
          }
          if (v15 >= *(a2 - 2))
          {
            unsigned int v32 = (float *)(a1 + 16);
            do
            {
              uint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              float v33 = v32[2];
              v32 += 4;
            }
            while (v15 >= v33);
          }
          else
          {
            unint64_t v30 = a1;
            do
            {
              uint64_t v10 = (float *)(v30 + 16);
              float v31 = *(float *)(v30 + 24);
              v30 += 16;
            }
            while (v15 >= v31);
          }
          uint64_t v34 = a2;
          if (v10 < a2)
          {
            unsigned int v35 = a2;
            do
            {
              uint64_t v34 = v35 - 4;
              float v36 = *(v35 - 2);
              v35 -= 4;
            }
            while (v15 < v36);
          }
          uint64_t v37 = *(void *)a1;
          int v38 = *(_DWORD *)(a1 + 12);
          while (v10 < v34)
          {
            long long v92 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v34;
            *(_OWORD *)uint64_t v34 = v92;
            do
            {
              float v39 = v10[6];
              v10 += 4;
            }
            while (v15 >= v39);
            do
            {
              float v40 = *(v34 - 2);
              v34 -= 4;
            }
            while (v15 < v40);
          }
          BOOL v4 = (unint64_t)(v10 - 4) >= a1;
          BOOL v5 = v10 - 4 == (float *)a1;
          if (v10 - 4 != (float *)a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *((void *)v10 - 2) = v37;
          *(v10 - 2) = v15;
          *((_DWORD *)v10 - 1) = v38;
        }
        float v15 = *(float *)(a1 + 8);
LABEL_12:
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)a1;
        int v18 = *(_DWORD *)(a1 + 12);
        do
        {
          float v19 = *(float *)(a1 + v16 + 24);
          v16 += 16;
        }
        while (v19 < v15);
        uint64_t v20 = (float *)(a1 + v16);
        uint64_t v21 = a2;
        if (v16 == 16)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            long long v22 = v24 - 4;
            float v25 = *(v24 - 2);
            v24 -= 4;
            if (v25 < v15) {
              goto LABEL_22;
            }
          }
          long long v22 = v24;
        }
        else
        {
          do
          {
            long long v22 = v21 - 4;
            float v23 = *(v21 - 2);
            v21 -= 4;
          }
          while (v23 >= v15);
        }
LABEL_22:
        uint64_t v10 = v20;
        if (v20 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            long long v91 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v26;
            *(_OWORD *)uint64_t v26 = v91;
            do
            {
              float v27 = v10[6];
              v10 += 4;
            }
            while (v27 < v15);
            do
            {
              float v28 = *(v26 - 2);
              v26 -= 4;
            }
            while (v28 >= v15);
          }
          while (v10 < v26);
        }
        if (v10 - 4 != (float *)a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *((void *)v10 - 2) = v17;
        *(v10 - 2) = v15;
        *((_DWORD *)v10 - 1) = v18;
        if (v20 >= v22) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(a1, v10 - 4, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>((float *)a1, v10 - 4);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v10, a2))
      {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 4;
    if (!v29) {
      continue;
    }
    break;
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *result, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = a3[2];
  if (v3 >= result[2])
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (a2[2] < result[2])
      {
        long long v7 = *(_OWORD *)result;
        *(_OWORD *)double result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)double result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (a3[2] >= a2[2]) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      *(_OWORD *)double result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 2) < a1[2])
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a2 - 4));
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 4);
      int v18 = (long long *)(a1 + 8);
      float v19 = (long long *)(a1 + 12);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
      if (*(a2 - 2) < a1[14])
      {
        long long v20 = *v19;
        *float v19 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v20;
        if (a1[14] < a1[10])
        {
          long long v21 = *v18;
          long long *v18 = *v19;
          *float v19 = v21;
          if (a1[10] < a1[6])
          {
            long long v22 = *v17;
            *uint64_t v17 = *v18;
            long long *v18 = v22;
            if (a1[6] < a1[2])
            {
              long long v23 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v23;
            }
          }
        }
      }
      return 1;
    default:
      long long v7 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, a1 + 4, a1 + 8);
      long long v8 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = v8[2];
    if (v11 < v7[2])
    {
      uint64_t v12 = *(void *)v8;
      int v13 = *((_DWORD *)v8 + 3);
      uint64_t v14 = v9;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        float v15 = *(float *)((char *)a1 + v14 + 24);
        v14 -= 16;
        if (v11 >= v15)
        {
          uint64_t v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_13:
      *(void *)uint64_t v16 = v12;
      *(float *)(v16 + 8) = v11;
      *(_DWORD *)(v16 + 12) = v13;
      if (++v10 == 8) {
        return v8 + 4 == a2;
      }
    }
    long long v7 = v8;
    v9 += 16;
    v8 += 4;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  if (result.n128_f32[0] < *(float *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (result.n128_f32[0] < *(float *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 8);
      if (result.n128_f32[0] < a1[2])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void re::ecs2::CAMeshSortGroup::~CAMeshSortGroup(re::ecs2::CAMeshSortGroup *this)
{
  *(void *)this = &unk_26E6E17C0;
  uint64_t v2 = (uint64_t *)((char *)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 34);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 224);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6E17C0;
  uint64_t v2 = (uint64_t *)((char *)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 320);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 34);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 224);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::ecs2::CAMeshSortGroup::allocator(re::ecs2::CAMeshSortGroup *this)
{
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(unint64_t a1, const re::ecs2::Entity **a2, re::ecs2::CAMeshCodirectionalGroup *a3, re::ecs2::CAMeshCodirectionalGroup *a4, char a5)
{
  long long v7 = a4;
  while (2)
  {
    uint64_t v86 = a2 - 2;
    float v11 = (const re::ecs2::Entity **)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                float v39 = *(a2 - 2);
                int v38 = a2 - 2;
                if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v39, *(const re::ecs2::Entity **)a1, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                {
                  long long v93 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v38;
                  *(_OWORD *)int v38 = v93;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)a1, (re::ecs2::CAMeshSortGroup **)(a1 + 16), v86, a3);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)a1, (re::ecs2::CAMeshSortGroup **)(a1 + 16), (re::ecs2::CAMeshSortGroup **)(a1 + 32), v86, a3);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>((const re::ecs2::Entity **)a1, (re::ecs2::CAMeshSortGroup **)(a1 + 16), (re::ecs2::CAMeshSortGroup **)(a1 + 32), (re::ecs2::CAMeshSortGroup **)(a1 + 48), v86, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 383)
          {
            float v40 = (re::ecs2::CAMeshSortGroup **)(a1 + 16);
            BOOL v42 = (const re::ecs2::Entity **)a1 == a2 || v40 == a2;
            if (a5)
            {
              if (!v42)
              {
                uint64_t v43 = 0;
                unint64_t v44 = a1;
                do
                {
                  long long v45 = v40;
                  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)(v44 + 16), *(const re::ecs2::Entity **)v44, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                  {
                    long long v46 = *v45;
                    uint64_t v47 = *(void *)(v44 + 24);
                    uint64_t v48 = v43;
                    while (1)
                    {
                      uint64_t v49 = a1 + v48;
                      *(_OWORD *)(a1 + v48 + 16) = *(_OWORD *)(a1 + v48);
                      if (!v48) {
                        break;
                      }
                      v48 -= 16;
                      if ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v46, *(const re::ecs2::Entity **)(v49 - 16), *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4) & 1) == 0)
                      {
                        uint64_t v50 = (void *)(a1 + v48 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v50 = (void *)a1;
LABEL_79:
                    *uint64_t v50 = v46;
                    v50[1] = v47;
                  }
                  float v40 = v45 + 2;
                  v43 += 16;
                  unint64_t v44 = (unint64_t)v45;
                }
                while (v45 + 2 != a2);
              }
            }
            else if (!v42)
            {
              do
              {
                unint64_t v78 = v40;
                if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)(a1 + 16), *(const re::ecs2::Entity **)a1, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                {
                  float v79 = *v78;
                  uint64_t v80 = *(re::ecs2::CAMeshSortGroup **)(a1 + 24);
                  int v81 = v78;
                  do
                  {
                    double v82 = v81 - 2;
                    *(_OWORD *)int v81 = *((_OWORD *)v81 - 1);
                    char v83 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v79, *(v81 - 4), *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4);
                    int v81 = v82;
                  }
                  while ((v83 & 1) != 0);
                  *double v82 = v79;
                  v82[1] = v80;
                }
                float v40 = v78 + 2;
                a1 = (unint64_t)v78;
              }
              while (v78 + 2 != a2);
            }
            return;
          }
          if (!v7)
          {
            if ((const re::ecs2::Entity **)a1 != a2)
            {
              unint64_t v84 = v12;
              int64_t v51 = (unint64_t)(v13 - 2) >> 1;
              int64_t v52 = v51;
              int v87 = a2;
              do
              {
                int64_t v53 = v52;
                if (v51 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  int v55 = (re::ecs2::CAMeshSortGroup **)(a1 + 16 * v54);
                  uint64_t v56 = 2 * v52 + 2;
                  int64_t v89 = v52;
                  if (v56 < v13)
                  {
                    int v57 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v55, v55[2], *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4);
                    if (v57) {
                      v55 += 2;
                    }
                    a2 = v87;
                    int64_t v53 = v89;
                    if (v57) {
                      uint64_t v54 = v56;
                    }
                  }
                  uint64_t v58 = (re::ecs2::CAMeshSortGroup **)(a1 + 16 * v53);
                  char v59 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v55, *v58, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4);
                  int64_t v53 = v89;
                  if ((v59 & 1) == 0)
                  {
                    int64_t v60 = *v58;
                    float v85 = v58[1];
                    do
                    {
                      int64_t v61 = v58;
                      uint64_t v58 = v55;
                      *(_OWORD *)int64_t v61 = *(_OWORD *)v55;
                      if (v51 < v54) {
                        break;
                      }
                      uint64_t v62 = (2 * v54) | 1;
                      int v55 = (re::ecs2::CAMeshSortGroup **)(a1 + 16 * v62);
                      uint64_t v63 = 2 * v54 + 2;
                      if (v63 < v13
                        && re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v55, v55[2], *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                      {
                        v55 += 2;
                        uint64_t v62 = v63;
                      }
                      uint64_t v54 = v62;
                    }
                    while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v55, v60, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4));
                    a2 = v87;
                    re::StringID *v58 = v60;
                    v58[1] = v85;
                    int64_t v53 = v89;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              uint64_t v64 = v84 >> 4;
              do
              {
                signed int v65 = a2;
                uint64_t v66 = 0;
                long long v94 = *(_OWORD *)a1;
                int v67 = (_OWORD *)a1;
                do
                {
                  uint64_t v68 = (uint64_t)&v67[v66 + 1];
                  uint64_t v69 = (2 * v66) | 1;
                  uint64_t v70 = 2 * v66 + 2;
                  if (v70 < v64
                    && re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)&v67[v66 + 1], *(const re::ecs2::Entity **)&v67[v66 + 2], *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                  {
                    v68 += 16;
                    uint64_t v69 = v70;
                  }
                  _OWORD *v67 = *(_OWORD *)v68;
                  int v67 = (_OWORD *)v68;
                  uint64_t v66 = v69;
                }
                while (v69 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                a2 = v65 - 2;
                if ((const re::ecs2::Entity **)v68 == v65 - 2)
                {
                  *(_OWORD *)uint64_t v68 = v94;
                }
                else
                {
                  *(_OWORD *)uint64_t v68 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v94;
                  uint64_t v71 = v68 - a1 + 16;
                  if (v71 >= 17)
                  {
                    unint64_t v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                    CGFloat v73 = (re::ecs2::CAMeshSortGroup **)(a1 + 16 * v72);
                    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v73, *(const re::ecs2::Entity **)v68, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
                    {
                      CGFloat v74 = *(const re::ecs2::Entity **)v68;
                      uint64_t v75 = *(void *)(v68 + 8);
                      do
                      {
                        uint64_t v76 = (_OWORD *)v68;
                        uint64_t v68 = (uint64_t)v73;
                        _OWORD *v76 = *(_OWORD *)v73;
                        if (!v72) {
                          break;
                        }
                        unint64_t v72 = (v72 - 1) >> 1;
                        CGFloat v73 = (re::ecs2::CAMeshSortGroup **)(a1 + 16 * v72);
                      }
                      while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v73, v74, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4) & 1) != 0);
                      *(void *)uint64_t v68 = v74;
                      *(void *)(v68 + 8) = v75;
                      a2 = v65 - 2;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          float v15 = (const re::ecs2::Entity **)(a1 + 16 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v15, (re::ecs2::CAMeshSortGroup **)a1, v86, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)a1, v15, v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)(a1 + 16), v15 - 2, a2 - 4, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)(a1 + 32), (re::ecs2::CAMeshSortGroup **)(a1 + 16 + 16 * v14), a2 - 6, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v15 - 2, v15, (re::ecs2::CAMeshSortGroup **)(a1 + 16 + 16 * v14), a3);
            long long v90 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)float v15 = v90;
          }
          long long v7 = (re::ecs2::CAMeshCodirectionalGroup *)((char *)v7 - 1);
          if ((a5 & 1) != 0
            || (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)(a1 - 16), *(const re::ecs2::Entity **)a1, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16) & 1) != 0)
          {
            break;
          }
          float v31 = *(re::ecs2::CAMeshSortGroup **)a1;
          unint64_t v30 = *(const re::ecs2::Entity **)(a1 + 8);
          if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)a1, *v86, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16))
          {
            float v11 = (const re::ecs2::Entity **)a1;
            do
            {
              unsigned int v32 = v11[2];
              v11 += 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v31, v32, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4) & 1) == 0);
          }
          else
          {
            unint64_t v33 = a1 + 16;
            do
            {
              float v11 = (const re::ecs2::Entity **)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v31, *v11, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4));
          }
          uint64_t v34 = a2;
          if (v11 < a2)
          {
            uint64_t v34 = a2;
            do
            {
              unsigned int v35 = *(v34 - 2);
              v34 -= 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v31, v35, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4) & 1) != 0);
          }
          while (v11 < v34)
          {
            long long v92 = *(_OWORD *)v11;
            *(_OWORD *)float v11 = *(_OWORD *)v34;
            *(_OWORD *)uint64_t v34 = v92;
            do
            {
              float v36 = v11[2];
              v11 += 2;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v31, v36, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4));
            do
            {
              uint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v31, v37, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4) & 1) != 0);
          }
          BOOL v5 = (unint64_t)(v11 - 2) >= a1;
          BOOL v6 = v11 - 2 == (const re::ecs2::Entity **)a1;
          if (v11 - 2 != (const re::ecs2::Entity **)a1) {
            *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
          }
          a5 = 0;
          *(v11 - 2) = v31;
          *(v11 - 1) = v30;
        }
        uint64_t v17 = 0;
        float v19 = *(const re::ecs2::Entity **)a1;
        int v18 = *(const re::ecs2::Entity **)(a1 + 8);
        do
        {
          char v20 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)(a1 + v17 + 16), v19, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16);
          v17 += 16;
        }
        while ((v20 & 1) != 0);
        unint64_t v21 = a1 + v17;
        long long v22 = a2;
        if (v17 == 16)
        {
          long long v22 = a2;
          do
          {
            if (v21 >= (unint64_t)v22) {
              break;
            }
            uint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v24, v19, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16) & 1) == 0);
        }
        else
        {
          do
          {
            long long v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v23, v19, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16));
        }
        float v11 = (const re::ecs2::Entity **)(a1 + v17);
        if (v21 < (unint64_t)v22)
        {
          float v25 = v22;
          do
          {
            long long v91 = *(_OWORD *)v11;
            *(_OWORD *)float v11 = *(_OWORD *)v25;
            *(_OWORD *)float v25 = v91;
            do
            {
              uint64_t v26 = v11[2];
              v11 += 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v26, v19, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16) & 1) != 0);
            do
            {
              float v27 = *(v25 - 2);
              v25 -= 2;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v27, v19, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v16));
          }
          while (v11 < v25);
        }
        if (v11 - 2 != (const re::ecs2::Entity **)a1) {
          *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
        }
        *(v11 - 2) = v19;
        *(v11 - 1) = v18;
        if (v21 >= (unint64_t)v22) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(a1, v11 - 2, a3, v7, a5 & 1);
        a5 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>((const re::ecs2::Entity **)a1, v11 - 2, a3, v16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v11, a2, a3, v29))
      {
        break;
      }
      if (!v28) {
        goto LABEL_31;
      }
    }
    a2 = v11 - 2;
    if (!v28) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshSortGroup **a4, re::ecs2::CAMeshSortGroup **a5, re::ecs2::CAMeshCodirectionalGroup *a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a2, a3, a4, a6);
  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a5, *a4, *(const re::ecs2::Entity **)(*(void *)a6 + 264), v12))
  {
    long long v15 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v15;
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a4, *a3, *(const re::ecs2::Entity **)(*(void *)a6 + 264), v13))
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v17;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(void *)a6 + 264), v16))
      {
        long long v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v19;
        if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(void *)a6 + 264), v18))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  char v8 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(void *)a4 + 264), a4);
  uint64_t result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(void *)a4 + 264), v9);
  if (v8)
  {
    if (result)
    {
      long long v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      long long v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v15;
      uint64_t result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(void *)a4 + 264), v11);
      if (!result) {
        return result;
      }
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v12;
  }
  else if (result)
  {
    long long v13 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v13;
    uint64_t result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(void *)a4 + 264), v11);
    if (result)
    {
      long long v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, const re::ecs2::Entity **a2, re::ecs2::CAMeshCodirectionalGroup *a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  uint64_t v7 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v9 = a2 - 2;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(a2 - 2), *a1, *(const re::ecs2::Entity **)(*(void *)a3 + 264), a4))
      {
        long long v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)uint64_t v9 = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      float v11 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a1 + 4, a3);
      long long v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v13, *v11, *(const re::ecs2::Entity **)(*(void *)a3 + 264), v12))
    {
      uint64_t v16 = *v13;
      long long v17 = v13[1];
      uint64_t v18 = v14;
      while (1)
      {
        long long v19 = (const re::ecs2::Entity **)((char *)a1 + v18);
        *(_OWORD *)((char *)a1 + v18 + 48) = *(_OWORD *)((char *)a1 + v18 + 32);
        if (v18 == -32) {
          break;
        }
        v18 -= 16;
        if ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v16, v19[2], *(const re::ecs2::Entity **)(*(void *)a3 + 264), v12) & 1) == 0)
        {
          char v20 = (const re::ecs2::Entity **)((char *)a1 + v18 + 48);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      *char v20 = v16;
      v20[1] = v17;
      if (++v15 == 8) {
        return v13 + 2 == a2;
      }
    }
    float v11 = v13;
    v14 += 16;
    v13 += 2;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshSortGroup **a4, re::ecs2::CAMeshCodirectionalGroup *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a2, a3, a5);
  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a4, *a3, *(const re::ecs2::Entity **)(*(void *)a5 + 264), v10))
  {
    long long v13 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v13;
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(void *)a5 + 264), v11))
    {
      long long v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(void *)a5 + 264), v14))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    BOOL v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 64);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        __n128 result = (void *)re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v22 = a4;
  unint64_t v23 = a3;
  float v25 = (long long *)result;
  a20 = *MEMORY[0x263EF8340];
  unint64_t v26 = (unint64_t)&v245 | 0x18;
  while (2)
  {
    float32x4_t v244 = (long long *)(a2 - 64);
    float v27 = v25;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v25 = v27;
          uint64_t v28 = a2 - (void)v27;
          unint64_t v29 = (uint64_t)(a2 - (void)v27) >> 6;
          if (v21 || !v20)
          {
            switch(v29)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v115 = 0;
                while (1)
                {
                  unint64_t v116 = *(void *)(a2 - 40 + v115);
                  unint64_t v117 = *(void *)((char *)v27 + v115 + 24);
                  if (v116 != v117) {
                    break;
                  }
                  v115 -= 8;
                  if (v115 == -32) {
                    return result;
                  }
                }
                if (v116 < v117)
                {
                  long long v199 = v27[1];
                  long long v200 = v27[3];
                  a15 = v27[2];
                  a16 = v200;
                  a14 = v199;
                  a13 = *v27;
                  int v201 = *(_DWORD *)(a2 - 32);
                  long long v202 = *(_OWORD *)(a2 - 48);
                  *float v27 = *v244;
                  v27[1] = v202;
                  *((_DWORD *)v27 + 8) = v201;
                  long long v204 = a13;
                  long long v203 = a14;
                  *(_DWORD *)(a2 - 32) = a15;
                  *float32x4_t v244 = v204;
                  *(_OWORD *)(a2 - 48) = v203;
                }
                return result;
              case 3uLL:
                return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v27, v27 + 4, v244);
              case 4uLL:
                return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v27, v27 + 4, v27 + 8, (uint64_t)v244);
              case 5uLL:
                uint64_t v118 = v27 + 4;
                uint64_t v119 = v27 + 8;
                uint64_t v120 = v27 + 12;
                __n128 result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v27, v27 + 4, v27 + 8, (uint64_t)(v27 + 12));
                uint64_t v121 = 0;
                break;
              default:
                JUMPOUT(0);
            }
            while (1)
            {
              unint64_t v122 = *(void *)(a2 - 40 + v121);
              unint64_t v123 = *(void *)((char *)v27 + v121 + 216);
              if (v122 != v123) {
                break;
              }
              v121 -= 8;
              if (v121 == -32) {
                return result;
              }
            }
            if (v122 < v123)
            {
              uint64_t v205 = 0;
              long long v206 = v27[15];
              a15 = v27[14];
              a16 = v206;
              long long v207 = v27[13];
              a13 = *v120;
              long long v208 = a13;
              a14 = v207;
              long long v210 = *v244;
              long long v209 = *(_OWORD *)(a2 - 48);
              *((_DWORD *)v27 + 56) = *(_DWORD *)(a2 - 32);
              *uint64_t v120 = v210;
              v27[13] = v209;
              *(_DWORD *)(a2 - 32) = a15;
              *float32x4_t v244 = v208;
              *(_OWORD *)(a2 - 48) = v207;
              while (1)
              {
                unint64_t v211 = *(void *)((char *)v27 + v205 + 216);
                unint64_t v212 = *(void *)((char *)v27 + v205 + 152);
                if (v211 != v212) {
                  break;
                }
                v205 -= 8;
                if (v205 == -32) {
                  return result;
                }
              }
              if (v211 < v212)
              {
                uint64_t v227 = 0;
                a15 = v27[10];
                *((_DWORD *)v27 + 40) = *((_DWORD *)v27 + 56);
                *((_DWORD *)v27 + 56) = a15;
                long long v229 = *v119;
                long long v228 = v27[9];
                long long v230 = v27[13];
                *uint64_t v119 = *v120;
                v27[9] = v230;
                *uint64_t v120 = v229;
                v27[13] = v228;
                while (1)
                {
                  unint64_t v231 = *(void *)((char *)v27 + v227 + 152);
                  unint64_t v232 = *(void *)((char *)v27 + v227 + 88);
                  if (v231 != v232) {
                    break;
                  }
                  v227 -= 8;
                  if (v227 == -32) {
                    return result;
                  }
                }
                if (v231 < v232)
                {
                  uint64_t v233 = 0;
                  a15 = v27[6];
                  *((_DWORD *)v27 + 24) = *((_DWORD *)v27 + 40);
                  *((_DWORD *)v27 + 40) = a15;
                  long long v235 = *v118;
                  long long v234 = v27[5];
                  long long v236 = v27[9];
                  *uint64_t v118 = *v119;
                  v27[5] = v236;
                  *uint64_t v119 = v235;
                  v27[9] = v234;
                  while (1)
                  {
                    unint64_t v237 = *(void *)((char *)v27 + v233 + 88);
                    unint64_t v238 = *(void *)((char *)v27 + v233 + 24);
                    if (v237 != v238) {
                      break;
                    }
                    v233 -= 8;
                    if (v233 == -32) {
                      return result;
                    }
                  }
                  if (v237 < v238)
                  {
                    long long v239 = v27[1];
                    long long v240 = v27[3];
                    a15 = v27[2];
                    a16 = v240;
                    a14 = v239;
                    a13 = *v27;
                    *((_DWORD *)v27 + 8) = *((_DWORD *)v27 + 24);
                    long long v241 = v27[5];
                    *float v27 = *v118;
                    v27[1] = v241;
                    long long v242 = a13;
                    long long v243 = a14;
                    *((_DWORD *)v27 + 24) = a15;
                    *uint64_t v118 = v242;
                    v27[5] = v243;
                  }
                }
              }
            }
            return result;
          }
          if (v28 <= 1535)
          {
            uint64_t v124 = v27 + 4;
            BOOL v126 = v27 == (long long *)a2 || v124 == (long long *)a2;
            if (v22)
            {
              if (!v126)
              {
                unint64_t v127 = v27;
                do
                {
                  uint64_t v128 = 0;
                  while (1)
                  {
                    unint64_t v129 = *(void *)((char *)v127 + v128 + 88);
                    unint64_t v130 = *(void *)((char *)v127 + v128 + 24);
                    if (v129 != v130) {
                      break;
                    }
                    v128 -= 8;
                    if (v128 == -32) {
                      goto LABEL_151;
                    }
                  }
                  if (v129 < v130)
                  {
                    long long v132 = v124[2];
                    long long v131 = v124[3];
                    a14 = v124[1];
                    a15 = v132;
                    a16 = v131;
                    a13 = *v124;
                    uint64_t v133 = v127;
                    unsigned int v134 = v124;
                    while (1)
                    {
                      uint64_t v135 = v134;
                      unsigned int v134 = v133;
                      long long v136 = v133[1];
                      *uint64_t v135 = *v133;
                      v135[1] = v136;
                      *((_DWORD *)v135 + 8) = *((_DWORD *)v133 + 8);
                      if (v133 == v27) {
                        break;
                      }
                      uint64_t v137 = 0;
                      v133 -= 4;
                      while (1)
                      {
                        unint64_t v138 = *(void *)(((unint64_t)&a13 | 0x18) + v137);
                        unint64_t v139 = *(void *)((char *)v134 + v137 - 40);
                        if (v138 != v139) {
                          break;
                        }
                        v137 -= 8;
                        if (v137 == -32) {
                          goto LABEL_150;
                        }
                      }
                      if (v138 >= v139) {
                        goto LABEL_150;
                      }
                    }
                    unsigned int v134 = v27;
LABEL_150:
                    int v140 = a15;
                    v134[1] = a14;
                    long long v141 = a13;
                    *((_DWORD *)v134 + 8) = v140;
                    long long *v134 = v141;
                  }
LABEL_151:
                  v124 += 4;
                  v127 += 4;
                }
                while (v124 != (long long *)a2);
              }
            }
            else if (!v126)
            {
              do
              {
                uint64_t v213 = 0;
                while (1)
                {
                  unint64_t v214 = *(void *)((char *)v25 + v213 + 88);
                  unint64_t v215 = *(void *)((char *)v25 + v213 + 24);
                  if (v214 != v215) {
                    break;
                  }
                  v213 -= 8;
                  if (v213 == -32) {
                    goto LABEL_242;
                  }
                }
                if (v214 < v215)
                {
                  long long v217 = v124[2];
                  long long v216 = v124[3];
                  a14 = v124[1];
                  a15 = v217;
                  a16 = v216;
                  a13 = *v124;
                  unint64_t v218 = v25;
                  int v219 = v124;
                  do
                  {
                    uint64_t v220 = 0;
                    long long v221 = v219;
                    int v219 = v218;
                    long long v222 = v218[1];
                    *long long v221 = *v218;
                    v221[1] = v222;
                    *((_DWORD *)v221 + 8) = *((_DWORD *)v218 + 8);
                    v218 -= 4;
                    while (1)
                    {
                      unint64_t v223 = *(void *)((char *)&a14 + v220 + 8);
                      unint64_t v224 = *(void *)((char *)v219 + v220 - 40);
                      if (v223 != v224) {
                        break;
                      }
                      v220 -= 8;
                      if (v220 == -32) {
                        goto LABEL_241;
                      }
                    }
                  }
                  while (v223 < v224);
LABEL_241:
                  int v225 = a15;
                  v219[1] = a14;
                  long long v226 = a13;
                  *((_DWORD *)v219 + 8) = v225;
                  *int v219 = v226;
                }
LABEL_242:
                v124 += 4;
                v25 += 4;
              }
              while (v124 != (long long *)a2);
            }
            return result;
          }
          if (!v23)
          {
            if (v27 != (long long *)a2)
            {
              int64_t v142 = (v29 - 2) >> 1;
              uint64_t v143 = &v27[8 * v142];
              unint64_t v144 = &v27[4 * v142];
              int64_t v145 = v142;
              do
              {
                int64_t v146 = v145;
                if (v142 >= v145)
                {
                  uint64_t v147 = (2 * v145) | 1;
                  uint64_t v148 = &v27[4 * v147];
                  if (2 * v146 + 2 < (uint64_t)v29)
                  {
                    uint64_t v149 = 0;
                    while (1)
                    {
                      unint64_t v150 = *(void *)((char *)v143 + v149 + 88);
                      a4 = *(void *)((char *)v143 + v149 + 152);
                      if (v150 != a4) {
                        break;
                      }
                      v149 -= 8;
                      if (v149 == -32) {
                        goto LABEL_162;
                      }
                    }
                    LOBYTE(a5) = v150 < a4;
LABEL_162:
                    if (((v150 != a4) & a5) != 0)
                    {
                      v148 += 4;
                      uint64_t v147 = 2 * v146 + 2;
                    }
                  }
                  __n128 result = (unint64_t)&v27[4 * v146];
                  uint64_t v151 = 24;
                  while (1)
                  {
                    unint64_t v152 = *(void *)((char *)v148 + v151);
                    a3 = *(void *)((char *)v144 + v151);
                    if (v152 != a3) {
                      break;
                    }
                    v151 -= 8;
                    if (v151 == -8) {
                      goto LABEL_169;
                    }
                  }
                  if (v152 < a3) {
                    goto LABEL_189;
                  }
LABEL_169:
                  long long v154 = *(_OWORD *)(result + 32);
                  long long v153 = *(_OWORD *)(result + 48);
                  a14 = *(_OWORD *)(result + 16);
                  a15 = v154;
                  a16 = v153;
                  a13 = *(_OWORD *)result;
                  while (1)
                  {
                    unint64_t v155 = (unint64_t)v148;
                    int v156 = *((_DWORD *)v148 + 8);
                    *(_OWORD *)(result + 16) = *(_OWORD *)(v155 + 16);
                    long long v157 = *(_OWORD *)v155;
                    *(_DWORD *)(result + 32) = v156;
                    *(_OWORD *)__n128 result = v157;
                    if (v142 < v147) {
                      break;
                    }
                    uint64_t v158 = (2 * v147) | 1;
                    uint64_t v148 = &v27[4 * v158];
                    uint64_t v159 = 2 * v147 + 2;
                    if (v159 < (uint64_t)v29)
                    {
                      a4 = 0;
                      unsigned int v160 = &v27[8 * v147];
                      while (1)
                      {
                        a5 = *(void *)((char *)v160 + a4 + 88);
                        unint64_t v161 = *(void *)((char *)v160 + a4 + 152);
                        if (a5 != v161) {
                          break;
                        }
                        a4 -= 8;
                        if (a4 == -32) {
                          goto LABEL_178;
                        }
                      }
                      a7 = a5 < v161;
LABEL_178:
                      if (a5 != v161 && a7)
                      {
                        v148 += 4;
                        uint64_t v147 = v159;
                      }
                      else
                      {
                        uint64_t v147 = v158;
                      }
                    }
                    else
                    {
                      uint64_t v147 = (2 * v147) | 1;
                    }
                    uint64_t v162 = 24;
                    while (1)
                    {
                      unint64_t v163 = *(void *)((char *)v148 + v162);
                      a3 = *(void *)((char *)&a13 + v162);
                      if (v163 != a3) {
                        break;
                      }
                      v162 -= 8;
                      if (v162 == -8) {
                        goto LABEL_186;
                      }
                    }
                    LOBYTE(a4) = v163 < a3;
LABEL_186:
                    __n128 result = v155;
                    if (v163 != a3)
                    {
                      __n128 result = v155;
                      if (a4) {
                        break;
                      }
                    }
                  }
                  int v164 = a15;
                  *(_OWORD *)(v155 + 16) = a14;
                  long long v165 = a13;
                  *(_DWORD *)(v155 + 32) = v164;
                  *(_OWORD *)unint64_t v155 = v165;
                }
LABEL_189:
                int64_t v145 = v146 - 1;
                v143 -= 8;
                v144 -= 4;
              }
              while (v146);
              uint64_t v166 = (unint64_t)v28 >> 6;
              do
              {
                uint64_t v167 = 0;
                long long v168 = v27[2];
                long long vars0 = v27[1];
                int v249 = v168;
                long long v245 = *v27;
                id v169 = v27;
                do
                {
                  uint64_t v170 = &v169[4 * v167];
                  unsigned int v171 = v170 + 4;
                  uint64_t v172 = (2 * v167) | 1;
                  uint64_t v167 = 2 * v167 + 2;
                  if (v167 >= v166)
                  {
                    uint64_t v167 = v172;
                  }
                  else
                  {
                    uint64_t v173 = 0;
                    while (1)
                    {
                      __n128 result = *(void *)((char *)v170 + v173 + 88);
                      unint64_t v174 = *(void *)((char *)v170 + v173 + 152);
                      if (result != v174) {
                        break;
                      }
                      v173 -= 8;
                      if (v173 == -32) {
                        goto LABEL_199;
                      }
                    }
                    LOBYTE(a3) = result < v174;
LABEL_199:
                    if (((result != v174) & a3) != 0) {
                      unsigned int v171 = v170 + 8;
                    }
                    else {
                      uint64_t v167 = v172;
                    }
                  }
                  int v175 = *((_DWORD *)v171 + 8);
                  v169[1] = v171[1];
                  long long v176 = *v171;
                  *((_DWORD *)v169 + 8) = v175;
                  *id v169 = v176;
                  id v169 = v171;
                }
                while (v167 <= (uint64_t)((unint64_t)(v166 - 2) >> 1));
                a2 -= 64;
                if (v171 == (long long *)a2)
                {
                  v171[1] = vars0;
                  long long v187 = v245;
                  *((_DWORD *)v171 + 8) = v168;
                  *unsigned int v171 = v187;
                }
                else
                {
                  int v177 = *(_DWORD *)(a2 + 32);
                  v171[1] = *(_OWORD *)(a2 + 16);
                  long long v178 = *(_OWORD *)a2;
                  *((_DWORD *)v171 + 8) = v177;
                  *unsigned int v171 = v178;
                  long long v180 = v245;
                  long long v179 = vars0;
                  *(_DWORD *)(a2 + 32) = v249;
                  *(_OWORD *)a2 = v180;
                  *(_OWORD *)(a2 + 16) = v179;
                  uint64_t v181 = (char *)v171 - (char *)v27 + 64;
                  if (v181 >= 65)
                  {
                    unint64_t v182 = (((unint64_t)v181 >> 6) - 2) >> 1;
                    int v183 = &v27[4 * v182];
                    uint64_t v184 = 24;
                    while (1)
                    {
                      unint64_t v185 = *(void *)((char *)v183 + v184);
                      unint64_t v186 = *(void *)((char *)v171 + v184);
                      if (v185 != v186) {
                        break;
                      }
                      v184 -= 8;
                      if (v184 == -8) {
                        goto LABEL_210;
                      }
                    }
                    if (v185 < v186)
                    {
                      long long v190 = v171[2];
                      long long v189 = v171[3];
                      a14 = v171[1];
                      a15 = v190;
                      a16 = v189;
                      a13 = *v171;
                      do
                      {
                        uint64_t v191 = v183;
                        int v192 = *((_DWORD *)v183 + 8);
                        v171[1] = v191[1];
                        long long v193 = *v191;
                        *((_DWORD *)v171 + 8) = v192;
                        *unsigned int v171 = v193;
                        if (!v182) {
                          break;
                        }
                        unint64_t v182 = (v182 - 1) >> 1;
                        int v183 = &v27[4 * v182];
                        uint64_t v194 = 24;
                        while (1)
                        {
                          unint64_t v195 = *(void *)((char *)v183 + v194);
                          unint64_t v196 = *(void *)((char *)&a13 + v194);
                          if (v195 != v196) {
                            break;
                          }
                          v194 -= 8;
                          if (v194 == -8) {
                            goto LABEL_221;
                          }
                        }
                        unsigned int v171 = v191;
                      }
                      while (v195 < v196);
LABEL_221:
                      int v197 = a15;
                      v191[1] = a14;
                      long long v198 = a13;
                      *((_DWORD *)v191 + 8) = v197;
                      *uint64_t v191 = v198;
                    }
                  }
                }
LABEL_210:
                ;
              }
              while (v166-- > 2);
            }
            return result;
          }
          unint64_t v30 = v29 >> 1;
          float v31 = &v27[4 * (v29 >> 1)];
          if ((unint64_t)v28 > 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25, &v25[4 * (v29 >> 1)], v244);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25 + 4, v31 - 4, (long long *)(a2 - 128));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25 + 8, &v25[4 * v30 + 4], (long long *)(a2 - 192));
            __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v31 - 4, v31, &v25[4 * v30 + 4]);
            long long v32 = v25[1];
            long long v33 = v25[3];
            a15 = v25[2];
            a16 = v33;
            a14 = v32;
            a13 = *v25;
            int v34 = *((_DWORD *)v31 + 8);
            long long v35 = v31[1];
            long long *v25 = *v31;
            v25[1] = v35;
            *((_DWORD *)v25 + 8) = v34;
            long long v37 = a13;
            long long v36 = a14;
            *((_DWORD *)v31 + 8) = a15;
            *float v31 = v37;
            v31[1] = v36;
          }
          else
          {
            __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(&v25[4 * (v29 >> 1)], v25, v244);
          }
          --v23;
          if (v22) {
            break;
          }
          uint64_t v42 = 0;
          while (1)
          {
            unint64_t v43 = *(void *)((char *)v25 + v42 - 40);
            unint64_t v44 = *(void *)((char *)v25 + v42 + 24);
            if (v43 != v44) {
              break;
            }
            v42 -= 8;
            if (v42 == -32) {
              goto LABEL_14;
            }
          }
          if (v43 < v44) {
            break;
          }
LABEL_14:
          uint64_t v45 = 0;
          long long v46 = v25[2];
          long long vars0 = v25[1];
          int v247 = v46;
          long long v245 = *v25;
          while (1)
          {
            unint64_t v47 = *(void *)((char *)&vars0 + v45 + 8);
            unint64_t v48 = *(void *)(a2 + v45 - 40);
            BOOL v49 = v47 >= v48;
            if (v47 != v48) {
              break;
            }
            v45 -= 8;
            if (v45 == -32)
            {
              uint64_t v50 = v25;
              while (1)
              {
LABEL_76:
                float v27 = v50 + 4;
                if ((unint64_t)(v50 + 4) >= a2) {
                  goto LABEL_84;
                }
                uint64_t v89 = 0;
                while (1)
                {
                  unint64_t v90 = *(void *)(v26 + v89);
                  unint64_t v91 = *(void *)((char *)v50 + v89 + 88);
                  if (v90 != v91) {
                    break;
                  }
                  v89 -= 8;
                  if (v89 == -32) {
                    goto LABEL_82;
                  }
                }
                BOOL v38 = v90 < v91;
LABEL_82:
                v50 += 4;
                if (v90 != v91)
                {
                  uint64_t v50 = v27;
                  if (v38) {
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          float v85 = v25;
          uint64_t v50 = v25;
          if (v49) {
            goto LABEL_76;
          }
          while (1)
          {
            uint64_t v86 = 0;
            float v27 = v85 + 4;
            while (1)
            {
              unint64_t v87 = *(void *)(v26 + v86);
              unint64_t v88 = *(void *)((char *)v85 + v86 + 88);
              if (v87 != v88) {
                break;
              }
              v86 -= 8;
              if (v86 == -32) {
                goto LABEL_73;
              }
            }
            BOOL v38 = v87 < v88;
LABEL_73:
            v85 += 4;
            if (v87 != v88)
            {
              float v85 = v27;
              if (v38) {
                break;
              }
            }
          }
LABEL_84:
          unint64_t v92 = a2;
          if ((unint64_t)v27 < a2)
          {
            unint64_t v93 = a2;
            do
            {
              uint64_t v94 = 0;
              unint64_t v92 = v93 - 64;
              while (1)
              {
                unint64_t v95 = *(void *)(v26 + v94);
                unint64_t v96 = *(void *)(v93 + v94 - 40);
                if (v95 != v96) {
                  break;
                }
                v94 -= 8;
                if (v94 == -32) {
                  goto LABEL_106;
                }
              }
              v93 -= 64;
            }
            while (v95 < v96);
          }
LABEL_106:
          while ((unint64_t)v27 < v92)
          {
            long long v97 = v27[1];
            long long v98 = v27[3];
            a15 = v27[2];
            a16 = v98;
            a14 = v97;
            a13 = *v27;
            int v99 = *(_DWORD *)(v92 + 32);
            long long v100 = *(_OWORD *)(v92 + 16);
            *float v27 = *(_OWORD *)v92;
            v27[1] = v100;
            *((_DWORD *)v27 + 8) = v99;
            long long v102 = a13;
            long long v101 = a14;
            *(_DWORD *)(v92 + 32) = a15;
            *(_OWORD *)unint64_t v92 = v102;
            *(_OWORD *)(v92 + 16) = v101;
            uint64_t v103 = v27;
            while (1)
            {
              uint64_t v104 = 0;
              float v27 = v103 + 4;
              while (1)
              {
                unint64_t v105 = *(void *)(v26 + v104);
                unint64_t v106 = *(void *)((char *)v103 + v104 + 88);
                if (v105 != v106) {
                  break;
                }
                v104 -= 8;
                if (v104 == -32) {
                  goto LABEL_98;
                }
              }
              BOOL v39 = v105 < v106;
LABEL_98:
              v103 += 4;
              if (v105 != v106)
              {
                uint64_t v103 = v27;
                if (v39) {
                  break;
                }
              }
            }
            unint64_t v107 = v92;
            do
            {
              uint64_t v108 = 0;
              unint64_t v92 = v107 - 64;
              while (1)
              {
                unint64_t v109 = *(void *)(v26 + v108);
                unint64_t v110 = *(void *)(v107 + v108 - 40);
                if (v109 != v110) {
                  break;
                }
                v108 -= 8;
                if (v108 == -32) {
                  goto LABEL_106;
                }
              }
              v107 -= 64;
            }
            while (v109 < v110);
          }
          uint64_t v111 = v27 - 4;
          BOOL v20 = v27 - 4 >= v25;
          BOOL v21 = v27 - 4 == v25;
          if (v27 - 4 != v25)
          {
            int v112 = *((_DWORD *)v27 - 8);
            v25[1] = *(v27 - 3);
            long long v113 = *v111;
            *((_DWORD *)v25 + 8) = v112;
            long long *v25 = v113;
          }
          char v22 = 0;
          *(v27 - 3) = vars0;
          long long v114 = v245;
          *((_DWORD *)v27 - 8) = v247;
          long long *v111 = v114;
        }
        long long v51 = v25[2];
        long long vars0 = v25[1];
        int v248 = v51;
        long long v245 = *v25;
        int64_t v52 = v25;
        do
        {
          uint64_t v53 = 0;
          uint64_t v54 = v52;
          v52 += 4;
          while (1)
          {
            unint64_t v55 = *(void *)((char *)v54 + v53 + 88);
            unint64_t v56 = *(void *)((char *)&vars0 + v53 + 8);
            if (v55 != v56) {
              break;
            }
            v53 -= 8;
            if (v53 == -32) {
              goto LABEL_25;
            }
          }
        }
        while (v55 < v56);
LABEL_25:
        unint64_t v57 = a2;
        if (v54 == v25)
        {
          unint64_t v62 = a2;
          while ((unint64_t)v52 < v62)
          {
            uint64_t v63 = 0;
            unint64_t v59 = v62 - 64;
            while (1)
            {
              unint64_t v64 = *(void *)(v62 + v63 - 40);
              unint64_t v65 = *(void *)(v26 + v63);
              if (v64 != v65) {
                break;
              }
              v63 -= 8;
              if (v63 == -32) {
                goto LABEL_41;
              }
            }
            BOOL v40 = v64 < v65;
LABEL_41:
            v62 -= 64;
            if (v64 != v65)
            {
              unint64_t v62 = v59;
              if (v40) {
                goto LABEL_45;
              }
            }
          }
          unint64_t v59 = v62;
        }
        else
        {
          while (1)
          {
            uint64_t v58 = 0;
            unint64_t v59 = v57 - 64;
            while (1)
            {
              unint64_t v60 = *(void *)(v57 + v58 - 40);
              unint64_t v61 = *(void *)(v26 + v58);
              if (v60 != v61) {
                break;
              }
              v58 -= 8;
              if (v58 == -32) {
                goto LABEL_31;
              }
            }
            BOOL v40 = v60 < v61;
LABEL_31:
            v57 -= 64;
            if (v60 != v61)
            {
              unint64_t v57 = v59;
              if (v40) {
                break;
              }
            }
          }
        }
LABEL_45:
        if ((unint64_t)v52 < v59)
        {
          uint64_t v66 = v52;
          unint64_t v67 = v59;
          do
          {
            long long v68 = v66[3];
            a15 = v66[2];
            a16 = v68;
            long long v69 = v66[1];
            a13 = *v66;
            long long v70 = a13;
            a14 = v69;
            long long v72 = *(_OWORD *)v67;
            long long v71 = *(_OWORD *)(v67 + 16);
            *((_DWORD *)v66 + 8) = *(_DWORD *)(v67 + 32);
            *uint64_t v66 = v72;
            v66[1] = v71;
            int v73 = a15;
            *(_OWORD *)unint64_t v67 = v70;
            *(_OWORD *)(v67 + 16) = v69;
            *(_DWORD *)(v67 + 32) = v73;
            do
            {
              uint64_t v74 = 0;
              uint64_t v54 = v66;
              v66 += 4;
              while (1)
              {
                unint64_t v75 = *(void *)((char *)v54 + v74 + 88);
                unint64_t v76 = *(void *)(v26 + v74);
                if (v75 != v76) {
                  break;
                }
                v74 -= 8;
                if (v74 == -32) {
                  goto LABEL_53;
                }
              }
            }
            while (v75 < v76);
            while (1)
            {
LABEL_53:
              uint64_t v77 = 0;
              unint64_t v78 = v67 - 64;
              while (1)
              {
                unint64_t v79 = *(void *)(v67 + v77 - 40);
                unint64_t v80 = *(void *)(v26 + v77);
                if (v79 != v80) {
                  break;
                }
                v77 -= 8;
                if (v77 == -32) {
                  goto LABEL_58;
                }
              }
              BOOL v41 = v79 < v80;
LABEL_58:
              v67 -= 64;
              if (v79 != v80)
              {
                unint64_t v67 = v78;
                if (v41) {
                  break;
                }
              }
            }
            unint64_t v67 = v78;
          }
          while ((unint64_t)v66 < v78);
        }
        if (v54 != v25)
        {
          int v81 = *((_DWORD *)v54 + 8);
          v25[1] = v54[1];
          long long v82 = *v54;
          *((_DWORD *)v25 + 8) = v81;
          long long *v25 = v82;
        }
        v54[1] = vars0;
        long long v83 = v245;
        *((_DWORD *)v54 + 8) = v248;
        *uint64_t v54 = v83;
        if ((unint64_t)v52 >= v59) {
          break;
        }
LABEL_66:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(v25, v54, v23, v22 & 1);
        char v22 = 0;
        float v27 = v54 + 4;
      }
      BOOL v84 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((char *)v25, (char *)v54);
      float v27 = v54 + 4;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((char *)v54 + 64, (char *)a2);
      if (result) {
        break;
      }
      if (!v84) {
        goto LABEL_66;
      }
    }
    a2 = (unint64_t)v54;
    if (!v84) {
      continue;
    }
    return result;
  }
}

_OWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(_OWORD *result, long long *a2, long long *a3)
{
  uint64_t v5 = 24;
  while (1)
  {
    unint64_t v6 = *(void *)((char *)a2 + v5);
    unint64_t v7 = *(void *)((char *)result + v5);
    if (v6 != v7) {
      break;
    }
    v5 -= 8;
    if (v5 == -8) {
      goto LABEL_6;
    }
  }
  BOOL v3 = v6 < v7;
LABEL_6:
  BOOL v8 = v6 != v7 && v3;
  uint64_t v9 = 24;
  while (1)
  {
    unint64_t v10 = *(void *)((char *)a3 + v9);
    unint64_t v11 = *(void *)((char *)a2 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      goto LABEL_11;
    }
  }
  BOOL v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      long long v36 = result[2];
      long long v13 = *result;
      long long v12 = result[1];
      long long v15 = *a3;
      long long v14 = a3[1];
      *((_DWORD *)result + 8) = *((_DWORD *)a3 + 8);
      *__n128 result = v15;
      result[1] = v14;
LABEL_27:
      *a3 = v13;
      a3[1] = v12;
      *((_DWORD *)a3 + 8) = v36;
      return result;
    }
    long long v38 = result[2];
    long long v24 = *result;
    long long v23 = result[1];
    long long v26 = *a2;
    long long v25 = a2[1];
    *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
    *__n128 result = v26;
    result[1] = v25;
    *a2 = v24;
    a2[1] = v23;
    *((_DWORD *)a2 + 8) = v38;
    uint64_t v27 = 24;
    while (1)
    {
      unint64_t v28 = *(void *)((char *)a3 + v27);
      unint64_t v29 = *(void *)((char *)a2 + v27);
      if (v28 != v29) {
        break;
      }
      v27 -= 8;
      if (v27 == -8) {
        return result;
      }
    }
    if (v28 < v29)
    {
      long long v36 = a2[2];
      long long v13 = *a2;
      long long v12 = a2[1];
      long long v35 = *a3;
      long long v34 = a3[1];
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *a2 = v35;
      a2[1] = v34;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    long long v37 = a2[2];
    long long v17 = *a2;
    long long v16 = a2[1];
    long long v19 = *a3;
    long long v18 = a3[1];
    *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
    *a2 = v19;
    a2[1] = v18;
    *a3 = v17;
    a3[1] = v16;
    *((_DWORD *)a3 + 8) = v37;
    uint64_t v20 = 24;
    while (1)
    {
      unint64_t v21 = *(void *)((char *)a2 + v20);
      unint64_t v22 = *(void *)((char *)result + v20);
      if (v21 != v22) {
        break;
      }
      v20 -= 8;
      if (v20 == -8) {
        return result;
      }
    }
    if (v21 < v22)
    {
      long long v39 = result[2];
      long long v31 = *result;
      long long v30 = result[1];
      long long v33 = *a2;
      long long v32 = a2[1];
      *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
      *__n128 result = v33;
      result[1] = v32;
      *a2 = v31;
      a2[1] = v30;
      *((_DWORD *)a2 + 8) = v39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = 0;
      unint64_t v7 = a2 - 64;
      while (1)
      {
        unint64_t v8 = *(void *)&a2[v6 - 40];
        unint64_t v9 = *(void *)&a1[v6 + 24];
        if (v8 != v9) {
          break;
        }
        v6 -= 8;
        if (v6 == -32) {
          return 1;
        }
      }
      if (v8 < v9)
      {
        long long v63 = *((_OWORD *)a1 + 2);
        long long v36 = *(_OWORD *)a1;
        long long v35 = *((_OWORD *)a1 + 1);
        long long v38 = *(_OWORD *)v7;
        long long v37 = *((_OWORD *)a2 - 3);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 - 8);
        *(_OWORD *)a1 = v38;
        *((_OWORD *)a1 + 1) = v37;
        *(_OWORD *)unint64_t v7 = v36;
        *((_OWORD *)a2 - 3) = v35;
        *((_DWORD *)a2 - 8) = v63;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, (long long *)a1 + 4, (long long *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((long long *)a1, (long long *)a1 + 4, (long long *)a1 + 8, (uint64_t)(a2 - 64));
      return 1;
    case 5:
      unint64_t v28 = (long long *)(a1 + 64);
      unint64_t v29 = (long long *)(a1 + 128);
      long long v30 = (long long *)(a1 + 192);
      long long v31 = a2 - 64;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((long long *)a1, (long long *)a1 + 4, (long long *)a1 + 8, (uint64_t)(a1 + 192));
      uint64_t v32 = 0;
      while (1)
      {
        unint64_t v33 = *(void *)&a2[v32 - 40];
        unint64_t v34 = *(void *)&a1[v32 + 216];
        if (v33 != v34) {
          break;
        }
        v32 -= 8;
        if (v32 == -32) {
          return 1;
        }
      }
      if (v33 < v34)
      {
        uint64_t v39 = 0;
        long long v63 = *((_OWORD *)a1 + 14);
        long long v41 = *v30;
        long long v40 = *((_OWORD *)a1 + 13);
        long long v43 = *(_OWORD *)v31;
        long long v42 = *((_OWORD *)a2 - 3);
        *((_DWORD *)a1 + 56) = *((_DWORD *)a2 - 8);
        *long long v30 = v43;
        *((_OWORD *)a1 + 13) = v42;
        *((_DWORD *)a2 - 8) = v63;
        *(_OWORD *)long long v31 = v41;
        *((_OWORD *)a2 - 3) = v40;
        BOOL result = 1;
        while (1)
        {
          unint64_t v44 = *(void *)&a1[v39 + 216];
          unint64_t v45 = *(void *)&a1[v39 + 152];
          if (v44 != v45) {
            break;
          }
          v39 -= 8;
          if (v39 == -32) {
            return result;
          }
        }
        if (v44 < v45)
        {
          uint64_t v46 = 0;
          long long v63 = *((_OWORD *)a1 + 10);
          *((_DWORD *)a1 + 40) = *((_DWORD *)a1 + 56);
          *((_DWORD *)a1 + 56) = v63;
          long long v48 = *v29;
          long long v47 = *((_OWORD *)a1 + 9);
          long long v49 = *((_OWORD *)a1 + 13);
          *unint64_t v29 = *v30;
          *((_OWORD *)a1 + 9) = v49;
          *long long v30 = v48;
          *((_OWORD *)a1 + 13) = v47;
          BOOL result = 1;
          while (1)
          {
            unint64_t v50 = *(void *)&a1[v46 + 152];
            unint64_t v51 = *(void *)&a1[v46 + 88];
            if (v50 != v51) {
              break;
            }
            v46 -= 8;
            if (v46 == -32) {
              return result;
            }
          }
          if (v50 < v51)
          {
            uint64_t v52 = 0;
            long long v63 = *((_OWORD *)a1 + 6);
            *((_DWORD *)a1 + 24) = *((_DWORD *)a1 + 40);
            *((_DWORD *)a1 + 40) = v63;
            long long v54 = *v28;
            long long v53 = *((_OWORD *)a1 + 5);
            long long v55 = *((_OWORD *)a1 + 9);
            *unint64_t v28 = *v29;
            *((_OWORD *)a1 + 5) = v55;
            *unint64_t v29 = v54;
            *((_OWORD *)a1 + 9) = v53;
            BOOL result = 1;
            while (1)
            {
              unint64_t v56 = *(void *)&a1[v52 + 88];
              unint64_t v57 = *(void *)&a1[v52 + 24];
              if (v56 != v57) {
                break;
              }
              v52 -= 8;
              if (v52 == -32) {
                return result;
              }
            }
            if (v56 < v57)
            {
              long long v63 = *((_OWORD *)a1 + 2);
              long long v59 = *(_OWORD *)a1;
              long long v58 = *((_OWORD *)a1 + 1);
              long long v60 = *((_OWORD *)a1 + 5);
              *(_OWORD *)a1 = *v28;
              *((_OWORD *)a1 + 1) = v60;
              *((_DWORD *)a1 + 8) = *((_DWORD *)a1 + 24);
              *unint64_t v28 = v59;
              *((_OWORD *)a1 + 5) = v58;
              *((_DWORD *)a1 + 24) = v63;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, (long long *)a1 + 4, (long long *)a1 + 8);
      unint64_t v11 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      int v12 = 0;
      long long v13 = a1 + 88;
      long long v14 = a1;
      break;
  }
  while (2)
  {
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)((char *)v14 + v15 + 216);
      unint64_t v17 = *(void *)((char *)v14 + v15 + 152);
      if (v16 != v17) {
        break;
      }
      v15 -= 8;
      if (v15 == -32) {
        goto LABEL_23;
      }
    }
    if (v16 < v17)
    {
      long long v18 = *((_OWORD *)v11 + 1);
      long long v61 = *(_OWORD *)v11;
      long long v62 = v18;
      long long v19 = *((_OWORD *)v11 + 3);
      long long v63 = *((_OWORD *)v11 + 2);
      long long vars0 = v19;
      uint64_t v20 = v13;
      unint64_t v21 = v11;
      while (1)
      {
        long long v22 = *((_OWORD *)v10 + 1);
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v10;
        *((_OWORD *)v21 + 1) = v22;
        *((_DWORD *)v21 + 8) = *((_DWORD *)v10 + 8);
        if (v10 == a1) {
          break;
        }
        unint64_t v21 = v10;
        uint64_t v23 = 0;
        v10 -= 64;
        while (1)
        {
          unint64_t v24 = *(void *)(((unint64_t)&v61 | 0x18) + v23);
          unint64_t v25 = *(void *)&v20[v23];
          if (v24 != v25) {
            break;
          }
          v23 -= 8;
          if (v23 == -32) {
            goto LABEL_22;
          }
        }
        v20 -= 64;
        if (v24 >= v25) {
          goto LABEL_22;
        }
      }
      unint64_t v21 = a1;
LABEL_22:
      int v26 = v63;
      *((_OWORD *)v21 + 1) = v62;
      long long v27 = v61;
      *((_DWORD *)v21 + 8) = v26;
      *(_OWORD *)unint64_t v21 = v27;
      if (++v12 == 8) {
        return v11 + 64 == a2;
      }
    }
LABEL_23:
    unint64_t v10 = v11;
    v14 += 4;
    v13 += 64;
    v11 += 64;
    if (v11 != a2) {
      continue;
    }
    return 1;
  }
}

_OWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, a2, a3);
  uint64_t v9 = 24;
  while (1)
  {
    unint64_t v10 = *(void *)(a4 + v9);
    unint64_t v11 = *(void *)((char *)a3 + v9);
    if (v10 != v11) {
      break;
    }
    v9 -= 8;
    if (v9 == -8) {
      return result;
    }
  }
  if (v10 < v11)
  {
    long long vars0 = a3[2];
    long long v13 = *a3;
    long long v12 = a3[1];
    long long v15 = *(_OWORD *)a4;
    long long v14 = *(_OWORD *)(a4 + 16);
    *((_DWORD *)a3 + 8) = *(_DWORD *)(a4 + 32);
    *a3 = v15;
    a3[1] = v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 32) = vars0;
    uint64_t v16 = 24;
    while (1)
    {
      unint64_t v17 = *(void *)((char *)a3 + v16);
      unint64_t v18 = *(void *)((char *)a2 + v16);
      if (v17 != v18) {
        break;
      }
      v16 -= 8;
      if (v16 == -8) {
        return result;
      }
    }
    if (v17 < v18)
    {
      long long vars0a = a2[2];
      long long v20 = *a2;
      long long v19 = a2[1];
      long long v22 = *a3;
      long long v21 = a3[1];
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *a2 = v22;
      a2[1] = v21;
      *a3 = v20;
      a3[1] = v19;
      *((_DWORD *)a3 + 8) = vars0a;
      uint64_t v23 = 24;
      while (1)
      {
        unint64_t v24 = *(void *)((char *)a2 + v23);
        unint64_t v25 = *(void *)((char *)a1 + v23);
        if (v24 != v25) {
          break;
        }
        v23 -= 8;
        if (v23 == -8) {
          return result;
        }
      }
      if (v24 < v25)
      {
        long long vars0b = a1[2];
        long long v27 = *a1;
        long long v26 = a1[1];
        long long v29 = *a2;
        long long v28 = a2[1];
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *a1 = v29;
        a1[1] = v28;
        *a2 = v27;
        a2[1] = v26;
        *((_DWORD *)a2 + 8) = vars0b;
      }
    }
  }
  return result;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

{
  char *Type;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  void v15[5];
  void v16[9];

  __int16 v16[8] = *MEMORY[0x263EF8340];
  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  unint64_t EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  uint64_t v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &unk_26E6F9FD0;
  v15[1] = a3;
  void v15[3] = v12;
  v15[4] = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>((uint64_t)v15, a5, v16);
  long long v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v16, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v16);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v15);
  return v13;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E6E1A80;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    uint64_t v5 = &unk_26E6E1AD8;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v8);
}

char *re::EventBus::getTypeId<REComponentDidAddEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REComponentDidAddEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22REComponentDidAddEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[95];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1A80;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1A80;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1A80;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1A80;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1AD8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1AD8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1AD8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1AD8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  uint64_t v10 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

{
  char *v10;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  void v15[5];
  void v16[9];

  __int16 v16[8] = *MEMORY[0x263EF8340];
  uint64_t v10 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  unint64_t EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  uint64_t v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &unk_26E6FA028;
  v15[1] = a3;
  void v15[3] = v12;
  v15[4] = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>((uint64_t)v15, a5, v16);
  long long v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v16, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v16);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v15);
  return v13;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E1B40;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E1B98;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)v8);
}

char *re::EventBus::getTypeId<REComponentWillRemoveEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REComponentWillRemoveEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REComponentWillRemoveEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[97];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1B40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1B40;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1B40;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1B40;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1B98;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1B98;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1B98;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1B98;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  Type = re::EventBus::getTypeId<REBillboardTransformChangedEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E1808;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E1860;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)v8);
}

char *re::EventBus::getTypeId<REBillboardTransformChangedEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<REBillboardTransformChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REBillboardTransformChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[86];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1808;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1808;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1808;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1808;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1860;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1860;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1860;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1860;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

char *re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs243UISortingComponentDidChangeCASortOrderEventE" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[89];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E18B8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E18B8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E18B8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E18B8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

char *re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs248UISortingComponentDidChangeCALayerNeedsMeshEventE" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[91];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1910;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1910;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1910;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1910;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

char *re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs241UISortingComponentDidChangeIsPlatterEventE" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[93];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1968;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1968;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1968;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1968;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  v14[8] = *MEMORY[0x263EF8340];
  uint64_t v10 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
  unint64_t EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(a3, a5, v14);
  uint64_t v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)v14);
  return v12;
}

uint64_t (***re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, void *a3@<X8>))(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = 0;
  if (a2)
  {
    uint64_t v6 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v6)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E19C0;
  }
  else
  {
    uint64_t v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)v8, a1);
    a3[6] = re::globalAllocators(v4)[2];
    a3[7] = 0;
    unint64_t v5 = &unk_26E6E1A18;
  }
  *a3 = v5;
  a3[4] = v9;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v8);
  a3[7] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)v8);
}

char *re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28RESceneEntityWillRemoveEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[99];
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E19C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E19C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
  return 1;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E19C0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E19C0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1A18;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(void *a1)
{
  *a1 = &unk_26E6E1A18;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = *a2;
  return (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v5, v3);
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1A18;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

void *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6E1A18;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::ecs2::LightComponentHelper::makeEntityWithDirectionalLight@<X0>(re::ecs2::EntityFactory *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, re::ecs2::Entity **a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  uint64_t v12 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v12, 4uLL, a4);
  long long v13 = (re::ecs2::Entity *)((char *)*a4 + 32);
  uint64_t v14 = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v18[0] = 0x3F8000003F800000;
  v18[1] = 1065353216;
  long long v15 = *(_OWORD *)a1;
  long long v19 = *((_OWORD *)a1 + 1);
  long long v20 = v15;
  re::ecs2::TransformComponent::setWorldSRT(v14, (uint64_t)v18, 0);
  uint64_t result = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v17 = *(void *)a2;
  DWORD2(v17) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(result + 336) = v17;
  *(unsigned char *)(result + 352) = 0;
  *(_DWORD *)(result + 28) = 1158028115;
  if (a3)
  {
    uint64_t result = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(float *)(result + 28) = a5;
    *(float *)(result + 32) = a6;
  }
  return result;
}

re::ecs2::CustomComponent *re::ecs2::CustomComponent::CustomComponent(re::ecs2::CustomComponent *this, const re::ecs2::CustomComponentType *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E6E1C88;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = a2;
  unint64_t v5 = (uint64_t (*)(const re::ecs2::CustomComponentType *))*((void *)a2 + 6);
  if (v5)
  {
    *((void *)this + 4) = v5(a2);
    return this;
  }
  long long v13 = *((_OWORD *)a2 + 10);
  if ((void)v13)
  {
    re::TypeRegistry::typeInfo((re *)v13, (re **)&v13, v11);
    if (!v11[0]) {
      goto LABEL_10;
    }
  }
  else
  {
    Instance = malloc_type_calloc(1uLL, *(int *)(*((void *)a2 + 16) + 20), 0xD2347398uLL);
  }
  *((void *)this + 4) = Instance;
  if (Instance) {
    return this;
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "object != nullptr", "CustomComponent", 46);
  _os_crash();
  __break(1u);
LABEL_10:
  re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "objectType", "CustomComponent", 37);
  uint64_t result = (re::ecs2::CustomComponent *)_os_crash();
  __break(1u);
  return result;
}

re::Allocator *re::ecs2::CustomComponent::initComponentType(re::ecs2::CustomComponent *this)
{
  int v1 = (re *)re::Allocator::useMallocAllocator(this);
  char v2 = (char)v1;
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(v1)[2] + 32);
  if (v2)
  {
    uint64_t v4 = (re::Allocator *)v3();
    uint64_t result = re::Allocator::Allocator(v4, "CustomComponent", 1);
    *(void *)uint64_t result = &unk_26E6DEC70;
  }
  else
  {
    uint64_t v4 = (re::Allocator *)v3();
  }
  re::ecs2::CustomComponent::s_allocator = (uint64_t)v4;
  return result;
}

re *re::internal::destroyPersistent<re::Allocator>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

re::ecs2::CustomComponent *re::ecs2::CustomComponentType::doMakeComponent@<X0>(re::ecs2::CustomComponentType *this@<X0>, re::ecs2::CustomComponent **a2@<X8>)
{
  uint64_t v4 = (re::ecs2::CustomComponent *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)re::ecs2::CustomComponent::s_allocator
                                                                                        + 32))(re::ecs2::CustomComponent::s_allocator, 48, 0);
  uint64_t result = re::ecs2::CustomComponent::CustomComponent(v4, this);
  *a2 = result;
  return result;
}

uint64_t re::ecs2::CustomComponentType::doGetComponentIntrospectionInfo(re::ecs2::CustomComponentType *this)
{
  return *((void *)this + 17);
}

__n128 re::ecs2::CustomComponentType::doGetComponentTypeID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[9];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::CustomComponentType::doGetNetworkSyncInfo(re::ecs2::CustomComponentType *this)
{
  return *((void *)this + 15);
}

uint64_t re::ecs2::CustomComponentCollection::setScene(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  return result;
}

void re::ecs2::CustomComponentCollection::didAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 64);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return;
    }
    for (unint64_t i = 0; i < v5; ++i)
    {
      v4(*(void *)(*(void *)(a2 + 32) + 8 * i));
      unint64_t v5 = *(void *)(a2 + 16);
    }
  }
  if (v5)
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
  }
}

void re::ecs2::CustomComponentCollection::doActivate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 72);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5) {
      return;
    }
    for (unint64_t i = 0; i < v5; ++i)
    {
      v4(*(void *)(*(void *)(a2 + 32) + 8 * i));
      unint64_t v5 = *(void *)(a2 + 16);
    }
  }
  if (v5)
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
  }
}

void re::ecs2::CustomComponentCollection::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 80);
    if (v4) {
      BOOL v5 = *(void *)(a2 + 16) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      unint64_t v6 = 0;
      do
        v4(*(void *)(*(void *)(a2 + 32) + 8 * v6++));
      while (v6 < *(void *)(a2 + 16));
    }
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
  }
}

void re::ecs2::CustomComponentCollection::willRemove(uint64_t a1, uint64_t a2)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::willRemove(a1, a2);
  uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 88);
  if (v4 && *(void *)(a2 + 16))
  {
    unint64_t v5 = 0;
    do
      v4(*(void *)(*(void *)(a2 + 32) + 8 * v5++));
    while (v5 < *(void *)(a2 + 16));
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      unint64_t v5 = *(re::ecs2::Component ***)(a2 + 32);
      unint64_t v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      uint64_t v7 = 8 * v4;
      do
      {
        uint64_t v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void re::ecs2::CustomComponent::~CustomComponent(re::ecs2::CustomComponent *this)
{
  *(void *)this = &unk_26E6E1C88;
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void (**)(void))(v2 + 56);
  if (v3)
  {
    v3();
LABEL_7:
    *((void *)this + 4) = 0;
    *(void *)this = &unk_26E6DECE0;
    objc_destructInstance((char *)this + 8);
    return;
  }
  long long v9 = *(_OWORD *)(v2 + 160);
  if (!(void)v9)
  {
    free(*((void **)this + 4));
    goto LABEL_7;
  }
  re::TypeRegistry::typeInfo((re *)v9, (re **)&v9, v7);
  if (v7[0])
  {
    unint64_t v6 = (void *)*((void *)this + 4);
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "objectType", "~CustomComponent", 183);
  _os_crash();
  __break(1u);
}

{
  uint64_t vars8;

  re::ecs2::CustomComponent::~CustomComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::CustomComponentType::createCustomComponentShimIntrospection(re::ecs2::CustomComponentType *this)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 16);
  re::DynamicString::format((re::DynamicString *)"CustomComponent%s", (re::DynamicString *)&v62, *(void *)(v2 + 48));
  if (v63) {
    uint64_t v4 = v66;
  }
  else {
    uint64_t v4 = (re::IntrospectionRegistry *)&v64;
  }
  uint64_t v5 = re::IntrospectionRegistry::lookupType(v4, v3);
  if (v5)
  {
    *((void *)this + 17) = v5;
    *((_OWORD *)this + 9) = *((_OWORD *)v5 + 2);
    goto LABEL_6;
  }
  uint64_t v7 = (re::Allocator *)re::introspectionAllocator(0);
  re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v59, *(void *)(v2 + 48));
  if (v60) {
    long long v9 = *(re::IntrospectionRegistry **)&v61[7];
  }
  else {
    long long v9 = (re::IntrospectionRegistry *)v61;
  }
  uint64_t v10 = re::IntrospectionRegistry::lookupType(v9, v8);
  if (!v10)
  {
    long long v22 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(v2 + 48);
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v23;
      _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Custom component failed to find introspection for pointer to struct '%s'", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_61;
  }
  uint64_t v11 = v10;
  if (v63) {
    uint64_t v12 = (const char *)v66;
  }
  else {
    uint64_t v12 = &v64;
  }
  uint64_t v13 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 32, 8);
  re::DynamicString::DynamicString((re::DynamicString *)v13, v12, v7);
  uint64_t v14 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)(v14 + 8) = "object";
  *(void *)(v14 + 16) = v11;
  unint64_t v50 = v11;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0x2000000001;
  *(_DWORD *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = 0;
  *(_DWORD *)(v14 + 64) = 0;
  long long v15 = (void *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 8, 4);
  void *v15 = 0x100000004;
  uint64_t v16 = (uint64_t *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 16, 8);
  *uint64_t v16 = v14;
  v16[1] = (uint64_t)v15;
  uint64_t v17 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 120, 8);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(void *)(v17 + 112) = 0;
  *(_OWORD *)(v17 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v17, 0);
  *(_WORD *)(v19 + 28) = 0;
  *(void *)(v17 + 32) = 0;
  uint64_t v20 = v13;
  *(void *)(v19 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v19 = &unk_26E715EC0;
  *(void *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 56) = 0;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(void *)(v19 + 112) = 0;
  *(void *)(v19 + 16) = 0x3000000008;
  *(_DWORD *)(v19 + 24) = 8;
  if (*(unsigned char *)(v13 + 8)) {
    uint64_t v21 = *(void *)(v13 + 16);
  }
  else {
    uint64_t v21 = v13 + 9;
  }
  *(void *)(v17 + 48) = v21;
  *(_DWORD *)(v17 + 56) = 2;
  *(void *)(v17 + 64) = v16;
  *(void *)(v17 + 80) = re::internal::defaultDestruct<re::ecs2::CustomComponent>;
  BOOL v24 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v17, v18);
  if (!v24)
  {
    unint64_t v34 = *re::ecsCoreLogObjects((re *)v24);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(v17 + 48);
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v35;
      _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "Custom component failed to register struct '%s'", (uint8_t *)buf, 0xCu);
    }
    (**(void (***)(uint64_t))v17)(v17);
    (*(void (**)(re::Allocator *, uint64_t))(*(void *)v7 + 40))(v7, v17);
    (*(void (**)(re::Allocator *, uint64_t *))(*(void *)v7 + 40))(v7, v16);
    re::SerializedReference<re::IntrospectionBase const*>::reset(v14 + 48);
    re::SerializedReference<re::IntrospectionBase const*>::reset(v14 + 16);
    (*(void (**)(re::Allocator *, uint64_t))(*(void *)v7 + 40))(v7, v14);
    (*(void (**)(re::Allocator *, void *))(*(void *)v7 + 40))(v7, v15);
    double v36 = re::DynamicString::deinit((re::DynamicString *)v13);
    (*(void (**)(re::Allocator *, uint64_t, double))(*(void *)v7 + 40))(v7, v13, v36);
    goto LABEL_61;
  }
  *((void *)this + 17) = v17;
  long long v26 = re::introspectionSharedMutex(v25);
  std::__shared_mutex_base::lock(v26);
  if (v63) {
    long long v27 = v66;
  }
  else {
    long long v27 = (re::IntrospectionRegistry *)&v64;
  }
  if (v27)
  {
    uint64_t v28 = *(char *)v27;
    long long v29 = v50;
    if (*(unsigned char *)v27)
    {
      long long v30 = (v63 & 1) != 0 ? (char *)v66 + 1 : v65;
      char v31 = *v30;
      if (*v30)
      {
        uint64_t v32 = (unsigned __int8 *)(v30 + 1);
        do
        {
          uint64_t v28 = 31 * v28 + v31;
          int v33 = *v32++;
          char v31 = v33;
        }
        while (v33);
      }
    }
  }
  else
  {
    uint64_t v28 = 0;
    long long v29 = v50;
  }
  *(void *)&buf[0] = 2 * v28;
  *((void *)&buf[0] + 1) = v27;
  long long v37 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, buf);
  if (v37)
  {
    uint64_t v38 = *v37;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v38 = 0xFFFFFFFFLL;
  }
  *((void *)this + 18) = v39;
  *((void *)this + 19) = v38;
  long long v40 = (_OWORD *)((char *)this + 144);
  re::StringID::destroyString((re::StringID *)buf);
  if (!*((void *)this + 18))
  {
    if (*(_DWORD *)(v58 + 64) > 0xFFFFFFFD) {
      int v41 = 1;
    }
    else {
      int v41 = *(_DWORD *)(v58 + 64);
    }
    long long v56 = *(_OWORD *)(*((void *)this + 16) + 32);
    unint64_t v42 = *(void *)(v20 + 8);
    if (v42)
    {
      unint64_t v44 = *(unsigned char **)(v20 + 16);
      if (!v44) {
        goto LABEL_55;
      }
      LOBYTE(v43) = *v44;
    }
    else
    {
      uint64_t v43 = v42 >> 8;
      unint64_t v44 = (unsigned char *)(v20 + 9);
    }
    if ((_BYTE)v43)
    {
      uint64_t v43 = (char)v43;
      LOBYTE(v45) = v44[1];
      if ((_BYTE)v45)
      {
        uint64_t v46 = 2;
        do
        {
          uint64_t v43 = 31 * v43 + (char)v45;
          int v45 = v44[v46++];
        }
        while (v45);
      }
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v43 = 0;
LABEL_56:
    *(void *)&long long v55 = 2 * v43;
    *((void *)&v55 + 1) = v44;
    v52[0] = 0x6DAE480279BALL;
    v52[1] = "Component";
    long long v47 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v52);
    if (v47)
    {
      uint64_t v54 = *v47;
    }
    else
    {
      long long v48 = 0;
      uint64_t v54 = 0xFFFFFFFFLL;
    }
    long long v53 = v48;
    re::TypeBuilder::beginObjectType((uint64_t)buf, (uint64_t *)&v55, 1, v41, 0x30uLL, 8uLL, (uint64_t)&v53);
    re::StringID::destroyString((re::StringID *)v52);
    re::StringID::destroyString((re::StringID *)&v55);
    re::TypeBuilder::setDestructor((uint64_t)buf, (uint64_t)re::internal::defaultDestructV2<re::ecs2::CustomComponent>);
    long long v51 = *((_OWORD *)v29 + 2);
    *(void *)&long long v55 = 0x18601467ELL;
    *((void *)&v55 + 1) = "object";
    re::TypeBuilder::addObjectMember((uint64_t)buf, 1, (uint64_t)&v51, (uint64_t *)&v55, 32);
    re::StringID::destroyString((re::StringID *)&v55);
    re::TypeBuilder::setHideObjectWithOneMember((uint64_t)buf, 1);
    *long long v40 = v55;
    *(_OWORD *)(v17 + 32) = *v40;
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)buf, v49);
  }
  std::__shared_mutex_base::unlock(v26);
LABEL_61:
  if (v59 && (v60 & 1) != 0) {
    (*(void (**)(void))(*(void *)v59 + 40))();
  }
LABEL_6:
  uint64_t result = v62;
  if (v62)
  {
    if (v63) {
      return (*(uint64_t (**)(void))(*(void *)v62 + 40))();
    }
  }
  return result;
}

re::ecs2::CustomComponent *anonymous namespace'::customComponentConstruct(re::ecs2::ComponentTypeRegistry *a1, uint64_t a2, re::ecs2::CustomComponent *a3)
{
  uint64_t v5 = re::ecs2::ComponentTypeRegistry::instance(a1);
  unint64_t v6 = (const re::ecs2::CustomComponentType *)re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v5, a1);
  return re::ecs2::CustomComponent::CustomComponent(a3, v6);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::ecs2::CustomComponent *anonymous namespace'::customComponentConstructV2(_anonymous_namespace_ *this, re::TypeInfo *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  unint64_t v6 = re::TypeInfo::name(a2);
  uint64_t v8 = (re::ecs2::ComponentTypeRegistry *)re::IntrospectionRegistry::lookupType((re::IntrospectionRegistry *)v6[1], v7);
  long long v9 = re::ecs2::ComponentTypeRegistry::instance(v8);
  uint64_t v10 = (const re::ecs2::CustomComponentType *)re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v9, v8);
  return re::ecs2::CustomComponent::CustomComponent(this, v10);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::CustomComponentType::CustomComponentType(uint64_t a1, const StringID *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26E6E1EB8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a5;
  *(void *)a1 = &unk_26E6E1CE0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 152) = 0xFFFFFFFFLL;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0xFFFFFFFFLL;
  re::ecs2::CustomComponentType::createCustomComponentShimIntrospection((re::ecs2::CustomComponentType *)a1);
  if (a4)
  {
    *(void *)(a1 + 120) = a4;
    RESyncRetain();
  }
  return a1;
}

{
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  const char *v12;
  uint64_t v13;
  re *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  const re::IntrospectionBase *v18;
  BOOL v19;
  uint64_t *v20;
  re::IntrospectionPointer *v21;
  re::IntrospectionPointer *v22;
  long long v23;
  const re::IntrospectionBase *v24;
  uint64_t v25;
  long long v27;
  long long v28;
  uint64_t v29;
  char v30;
  unsigned char v31[23];
  char v32[8];
  unint64_t v33;
  int v34;
  int v35;
  _OWORD v36[2];
  long long v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned char v44[40];

  *(void *)a1 = &unk_26E6E1EB8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a5;
  *(void *)a1 = &unk_26E6E1CE0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v29, a2->var1);
  if (v30) {
    uint64_t v12 = *(const char **)&v31[7];
  }
  else {
    uint64_t v12 = v31;
  }
  *(void *)&uint64_t v28 = 0;
  *((void *)&v28 + 1) = "";
  uint64_t v13 = *(void *)(a3 + 8);
  uint64_t v35 = -1;
  memset(v36, 0, sizeof(v36));
  long long v37 = 0u;
  uint64_t v38 = 0xFFFFFFFFLL;
  uint64_t v39 = 1;
  long long v40 = 0xFFFFFFFFLL;
  int v41 = 1;
  unint64_t v42 = 0xFFFFFFFFLL;
  uint64_t v43 = 0;
  v32[0] = 9;
  re::StringID::operator=(&v33, (uint64_t *)&v28);
  unint64_t v34 = 1;
  *(_OWORD *)((char *)v36 + 4) = 0x800000008uLL;
  *(void *)((char *)&v37 + 4) = 0;
  *(void *)((char *)&v36[1] + 4) = 0;
  uint64_t v39 = -1;
  long long v40 = v13;
  int v41 = 0;
  re::StringID::destroyString((re::StringID *)&v28);
  long long v15 = re::globalAllocators(v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 120, 8);
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(void *)(v16 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v16, 0);
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 22) = 0;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v17 = &unk_26E715EC0;
  *(void *)(v17 + 48) = 0;
  *(_DWORD *)(v17 + 56) = 0;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(void *)(v17 + 112) = 0;
  *(_DWORD *)(v17 + 16) = 8;
  *(_OWORD *)(v17 + 32) = *(_OWORD *)a3;
  *(void *)(v17 + 48) = a2->var1;
  *(void *)(a1 + 128) = v17;
  uint64_t v19 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v17, v18);
  uint64_t v20 = re::globalAllocators((re *)v19);
  uint64_t v21 = (re::IntrospectionPointer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 64, 8);
  *(_OWORD *)uint64_t v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  long long v22 = re::IntrospectionPointer::IntrospectionPointer(v21);
  *((_DWORD *)v22 + 4) = 1;
  *((_OWORD *)v22 + 2) = v28;
  uint64_t v23 = *((_OWORD *)v22 + 3);
  *((void *)v22 + 6) = *(void *)(a1 + 128);
  *((void *)v22 + 7) = 0;
  long long v27 = v23;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)&v27);
  re::IntrospectionRegistry::add(v21, v24);
  re::ecs2::CustomComponentType::createCustomComponentShimIntrospection((re::ecs2::CustomComponentType *)a1);
  if (a4)
  {
    *(void *)(a1 + 120) = a4;
    RESyncRetain();
  }
  if (v29 && (v30 & 1) != 0) {
    (*(void (**)(void))(*(void *)v29 + 40))();
  }
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v32, v25);
  return a1;
}

void re::ecs2::CustomComponentType::~CustomComponentType(re::IntrospectionRegistry **this)
{
  *this = (re::IntrospectionRegistry *)&unk_26E6E1CE0;
  uint64_t v2 = re::introspectionSharedMutex((re *)this);
  std::__shared_mutex_base::lock(v2);
  uint64_t v4 = this[17];
  if (v4)
  {
    uint64_t v5 = re::introspectionAllocator(v3);
    re::IntrospectionRegistry::remove(v4, v6);
    uint64_t v7 = (void *)*((void *)v4 + 8);
    if (*v7)
    {
      (*(void (**)(void *, void))(*(void *)v5 + 40))(v5, *v7);
      uint64_t v7 = (void *)*((void *)v4 + 8);
    }
    if (!v7[1] || ((*(void (**)(void *, void))(*(void *)v5 + 40))(v5, v7[1]), *((void *)v4 + 8))) {
      (*(void (**)(void *))(*(void *)v5 + 40))(v5);
    }
    (**(void (***)(re::IntrospectionRegistry *))v4)(v4);
    (*(void (**)(void *, re::IntrospectionRegistry *))(*(void *)v5 + 40))(v5, v4);
    this[17] = 0;
  }
  if (this[18])
  {
    long long v22 = *((_OWORD *)this + 9);
    this[18] = 0;
    this[19] = (re::IntrospectionRegistry *)0xFFFFFFFFLL;
  }
  if (this[20])
  {
    re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v19, *((void *)this[16] + 6));
    if (v20) {
      long long v9 = *(re::IntrospectionRegistry **)&v21[7];
    }
    else {
      long long v9 = (re::IntrospectionRegistry *)v21;
    }
    uint64_t v10 = (re::IntrospectionRegistry *)re::IntrospectionRegistry::lookupType(v9, v8);
    uint64_t v12 = re::IntrospectionRegistry::remove(v10, v11);
    uint64_t v13 = re::globalAllocators((re *)v12)[2];
    (**(void (***)(re::IntrospectionRegistry *))v10)(v10);
    (*(void (**)(uint64_t, re::IntrospectionRegistry *))(*(void *)v13 + 40))(v13, v10);
    long long v15 = re::IntrospectionRegistry::remove(this[16], v14);
    uint64_t v16 = this[16];
    if (v16)
    {
      uint64_t v17 = re::globalAllocators((re *)v15)[2];
      (**(void (***)(re::IntrospectionRegistry *))v16)(v16);
      (*(void (**)(uint64_t, re::IntrospectionRegistry *))(*(void *)v17 + 40))(v17, v16);
    }
    this[16] = 0;
    long long v18 = *((_OWORD *)this + 10);
    this[20] = 0;
    this[21] = (re::IntrospectionRegistry *)0xFFFFFFFFLL;
    if (v19 && (v20 & 1) != 0) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
  }
  if (this[15]) {
    RESyncRelease();
  }
  std::__shared_mutex_base::unlock(v2);
  *this = (re::IntrospectionRegistry *)&unk_26E6E1EB8;
  re::StringID::destroyString((re::StringID *)(this + 3));
}

{
  uint64_t vars8;

  re::ecs2::CustomComponentType::~CustomComponentType(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::CustomComponentCollection::~CustomComponentCollection(re::ecs2::CustomComponentCollection *this)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(this);
  JUMPOUT(0x237DBCBD0);
}

double re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::registerCallbacks(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    uint64_t v5 = a2;
    unint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    uint64_t v5 = a2;
    unint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    uint64_t v5 = a2;
    unint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    double result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    uint64_t v5 = a2;
    unint64_t v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>;
    uint64_t v7 = 0;
    uint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::unregisterCallbacks(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2[3])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>;
    uint64_t v5 = 0;
    unint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>;
    uint64_t v5 = 0;
    unint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>;
    uint64_t v5 = 0;
    unint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(void *)&long long v4 = a2;
    *((void *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>;
    uint64_t v5 = 0;
    unint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::CustomComponent::allocator(re::ecs2::CustomComponent *this)
{
  return re::ecs2::CustomComponent::s_allocator;
}

uint64_t re::ecs2::CustomComponent::commonComponentIndex(re::ecs2::CustomComponent *this)
{
  return -1;
}

uint64_t re::ecs2::CustomComponent::componentType(re::ecs2::CustomComponent *this)
{
  return *((void *)this + 5);
}

double re::ecs2::CustomComponentType::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return re::makeRelativeBindNode(*(_anonymous_namespace_ **)(a1 + 136), a2, a3);
}

uint64_t re::ecs2::CustomComponentType::isCustomComponent(re::ecs2::CustomComponentType *this)
{
  return 1;
}

uint64_t re::ecs2::CustomComponentType::doMakeSceneComponentCollection(re::ecs2::CustomComponentType *this)
{
  uint64_t v2 = re::globalAllocators(this);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 656, 8);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = this;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)uint64_t v3 = &unk_26E6E1E28;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(void *)(v3 + 304) = 0;
  *(void *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(void *)(v3 + 392) = 0;
  *(void *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(void *)(v3 + 408) = 0;
  *(void *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(void *)(v3 + 480) = 0;
  *(void *)(v3 + 488) = 0;
  *(void *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(void *)(v3 + 520) = 0;
  *(void *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(void *)(v3 + 528) = 0;
  *(void *)(v3 + 552) = 0;
  *(void *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(void *)(v3 + 576) = 0;
  *(void *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(void *)(v3 + 584) = 0;
  *(void *)(v3 + 608) = 0;
  *(void *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(void *)(v3 + 632) = 0;
  *(void *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(void *)(v3 + 640) = 0;
  long long v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  *(void *)uint64_t v3 = &unk_26E6E1D38;
  return v3;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(void *a1)
{
  *a1 = &unk_26E6E1E28;
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (a1[16]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 16));
  }
  if (a1[27]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 27));
  }
  if (a1[38]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 38));
  }
  if (a1[49]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 60));
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)(a1 + 75));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 75));
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)(a1 + 68));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 68));
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)(a1 + 61));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 61));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 49));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 38));
  re::Event<re::Engine>::~Event((uint64_t)(a1 + 27));
  re::Event<re::Engine>::~Event(v2);
  re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase((re::ecs2::SceneComponentCollectionBase *)a1);
}

{
  uint64_t vars8;

  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      long long v4 = (uint64_t *)re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](a1, i);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v4);
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 48 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 3) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 3)) + 48 * (a2 & 7);
}

uint64_t re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      unint64_t v4 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1, i);
      re::DataArray<re::ecs2::Component *>::deinit(v4);
      re::DynamicArray<unsigned long>::deinit(v4);
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DataArray<re::ecs2::Component *>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    int v1 = (void *)result;
    double v2 = re::DataArray<re::ecs2::Component *>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::ecs2::Component *>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::ecs2::Component *>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

_DWORD *re::DataArray<re::ecs2::Component *>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  double result = (_DWORD *)re::DataArray<re::ecs2::Component *>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *double result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::Component *>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 8 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *(void *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v22, 0, 80);
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v14 = 136315906;
          long long v15 = "operator[]";
          __int16 v16 = 1024;
          int v17 = 789;
          __int16 v18 = 2048;
          unint64_t v19 = i;
          __int16 v20 = 2048;
          unint64_t v21 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = *(void *)(a1 + 72) + v7;
        long long v11 = *(_OWORD *)(v10 + 16);
        v12[0] = *(_OWORD *)v10;
        v12[1] = v11;
        uint64_t v13 = *(void *)(v10 + 32);
        if (LOBYTE(v12[0]))
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v22, *(void *)(a1 + 16), *(char **)(a1 + 32), (void *)v12 + 1);
          if (!v22[0]) {
            re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(a1, (uint64_t)v12 + 8);
          }
        }
        else
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, (void *)v12 + 1);
        }
        v7 += 40;
      }
    }
  }
}

__n128 re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  long long v11 = (_OWORD *)(*(void *)(a1 + 32) + 32 * v5);
  __n128 result = *(__n128 *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  _OWORD *v11 = *(_OWORD *)a2;
  v11[1] = v13;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void *re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(uint64_t a1, void *a2)
{
  __n128 result = (void *)re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v5, *(void *)(a1 + 16), *(char **)(a1 + 32), a2);
  if (v5[0])
  {
    unint64_t v4 = v6;
    return re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v4);
  }
  return result;
}

uint64_t re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf(uint64_t result, uint64_t a2, char *a3, void *a4)
{
  unint64_t v4 = a3;
  if (a2)
  {
    uint64_t v5 = 32 * a2;
    unint64_t v4 = a3;
    while (*(void *)v4 != *a4 || *((void *)v4 + 1) != a4[1] || *((void *)v4 + 2) != a4[2])
    {
      v4 += 32;
      v5 -= 32;
      if (!v5)
      {
        unint64_t v4 = &a3[32 * a2];
        break;
      }
    }
  }
  uint64_t v7 = (v4 - a3) >> 5;
  if (v7 == a2)
  {
    char v8 = 0;
  }
  else
  {
    *(void *)(result + 8) = v7;
    char v8 = 1;
  }
  *(unsigned char *)__n128 result = v8;
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 32);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 40);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void))(a1 + 48);
  if (*(unsigned char *)(a1 + 16))
  {
    if (a4)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        ((void (*)(uint64_t, void))v5)(v8, *(void *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    uint64_t v9 = 8 * a4;
    do
    {
      uint64_t v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

double re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v6, *(void *)(a1 + 16), *(char **)(a1 + 32), (void *)a2);
  if (!v6[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v6[0] = 1;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v7 = *(_OWORD *)a2;
      long long v8 = v5;
      *(void *)&double result = re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 40, (uint64_t)v6).n128_u64[0];
    }
    else
    {
      *(void *)&double result = re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(a1, a2).n128_u64[0];
    }
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(uint64_t a1, long long *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v5, *(void *)(a1 + 16), *(char **)(a1 + 32), a2);
  if (v5[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v5[0] = 0;
      long long v4 = a2[1];
      long long v6 = *a2;
      long long v7 = v4;
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 40, (uint64_t)v5);
    }
    else
    {
      re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, a2);
    }
  }
}

id *re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v14[5] = *MEMORY[0x263EF8340];
  uint64_t v8 = (id *)(a1 + 32);
  if (a2) {
    uint64_t v9 = (void *)(a2 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, 24);
  v14[3] = re::globalAllocators(inited)[2];
  v14[4] = 0;
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v14);
  objc_destroyWeak(&location);
  if (a5)
  {
    uint64_t v11 = a4 + 168 * a5;
    do
    {
      ++*(unsigned char *)a4;
      *(void *)(a4 + 24) = 0;
      a4 += 168;
    }
    while (a4 != v11);
  }
  return v8;
}

uint64_t re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  v18[5] = *MEMORY[0x263EF8340];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      uint64_t v9 = WeakRetained;

      if (!location[6])
      {
        uint64_t v11 = re::globalAllocators(v10)[2];
        v18[0] = &unk_26E6E2018;
        v18[3] = v11;
        v18[4] = v18;
        re::FunctionBase<24ul,void ()(void *)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        uint64_t v10 = (re *)re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v18);
      }
      uint64_t v12 = re::globalAllocators(v10);
      unint64_t v13 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      id v14 = location[1];
      uint64_t v15 = re::PerFrameAllocatorManager::perFrameAllocator(v12[6], v13);
      (*(void (**)(uint64_t, id, id *))(*(void *)v15 + 16))(v15, v14, location + 2);
    }
    else
    {
      id v16 = location[6];
      if (v16)
      {
        v18[0] = location[1];
        (*(void (**)(id, void *))(*(void *)v16 + 16))(v16, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>((re *)"reset", 161, (uint64_t)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,void ()(void *)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

uint64_t (***re::ecs2::BlendShapeWeightsBufferComponent::rebuildWeights(uint64_t (***result)(void), uint64_t a2, re::BlendShapeWeightsMapping *a3, uint64_t a4, const re::MeshNameMap *a5, uint64_t a6))(void)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  result[14] = 0;
  ++*((_DWORD *)result + 30);
  result[19] = 0;
  long long v30 = result;
  ++*((_DWORD *)result + 40);
  unint64_t v6 = *(void *)(a2 + 56);
  if (v6)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = (_anonymous_namespace_ *)(result + 12);
    uint64_t v29 = (uint64_t)(result + 17);
    uint64_t v26 = a2;
    do
    {
      uint64_t v12 = *(void *)(a2 + 72);
      unint64_t v13 = *(unsigned int *)(v12 + 48 * v10 + 40);
      if (*(void *)(a6 + 16) > v13)
      {
        unint64_t v28 = v10;
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a5, (unsigned __int8 *)(v12 + 48 * v10), &v48);
        uint64_t v35 = a4;
        double v36 = a5;
        unint64_t v37 = v48.n128_u64[0];
        v38[3] = v50;
        uint64_t v39 = 0;
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::operator=<24ul>((uint64_t)v38, (uint64_t)&v48.n128_i64[1]);
        re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)&v48.n128_i64[1]);
        unint64_t v31 = v37;
        if (v37)
        {
          unint64_t v14 = 0;
          do
          {
            v48.n128_u64[0] = v14;
            unsigned int v15 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)v39 + 16))(v39, &v48);
            v48.n128_u64[0] = v14;
            int v16 = (unsigned __int16)((unint64_t)(*(uint64_t (**)(uint64_t, __n128 *))(*(void *)v39 + 16))(v39, &v48) >> 32);
            re::BlendShapeWeightsMapping::blendWeightValues(a3, a5, v15, v16);
            unsigned int v18 = v17;
            v48.n128_u64[0] = __PAIR64__(v9, v15);
            v48.n128_u64[1] = __PAIR64__(v16, v17);
            re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(v29, &v48);
            unint64_t v19 = *((void *)a3 + 6);
            if ((unint64_t)v30[13] < v19) {
              re::DynamicArray<int>::setCapacity(v11, v19);
            }
            unint64_t v20 = v9 + v18;
            if (v9 < v20)
            {
              unint64_t v9 = v9;
              uint64_t v21 = (8 * v9) | 4;
              do
              {
                if (*((void *)a3 + 3) <= v9
                  || (unint64_t v22 = *(unsigned int *)(*((void *)a3 + 4) + v21), v22 == -1))
                {
                  int v25 = 0;
                }
                else
                {
                  unint64_t v23 = *(void *)(a6 + 16);
                  if (v23 <= v13)
                  {
                    uint64_t v34 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v49 = 0u;
                    long long v50 = 0u;
                    __n128 v48 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v40 = 136315906;
                    int v41 = "operator[]";
                    __int16 v42 = 1024;
                    int v43 = 797;
                    __int16 v44 = 2048;
                    unint64_t v45 = v13;
                    __int16 v46 = 2048;
                    unint64_t v47 = v23;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_24:
                    uint64_t v34 = 0;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    long long v49 = 0u;
                    long long v50 = 0u;
                    __n128 v48 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v40 = 136315906;
                    int v41 = "operator[]";
                    __int16 v42 = 1024;
                    int v43 = 476;
                    __int16 v44 = 2048;
                    unint64_t v45 = v22;
                    __int16 v46 = 2048;
                    unint64_t v47 = v23;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  uint64_t v24 = *(void *)(a6 + 32) + 32 * v13;
                  unint64_t v23 = *(void *)(v24 + 8);
                  if (v23 <= v22) {
                    goto LABEL_24;
                  }
                  int v25 = *(_DWORD *)(*(void *)(v24 + 16) + 4 * v22);
                }
                int v33 = v25;
                re::DynamicArray<float>::add(v11, (float *)&v33);
                ++v9;
                v21 += 8;
              }
              while (v20 != v9);
            }
            ++v14;
            LODWORD(v9) = v20;
          }
          while (v14 != v31);
        }
        else
        {
          unint64_t v20 = v9;
        }
        double result = re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v38);
        a2 = v26;
        unint64_t v6 = *(void *)(v26 + 56);
        unint64_t v9 = v20;
        unint64_t v10 = v28;
      }
      ++v10;
    }
    while (v10 < v6);
  }
  return result;
}

__n128 re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(a1 + 32) + 16 * v5) = *a2;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::ecs2::BlendShapeWeightsBufferComponentStateImpl *re::ecs2::BlendShapeWeightsBufferComponentStateImpl::BlendShapeWeightsBufferComponentStateImpl(re::ecs2::BlendShapeWeightsBufferComponentStateImpl *this)
{
  v6[3] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6E1F20;
  unint64_t v2 = (uint64_t *)((char *)this + 32);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1]) {
    (*(void (**)(void))(*(void *)v4[0] + 40))();
  }
  return this;
}

uint64_t *re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = *a2;
    if (*result) {
      BOOL v4 = v2 == v3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      *__n128 result = v3;
      *a2 = v2;
      uint64_t v5 = result[1];
      uint64_t v6 = result[2];
      uint64_t v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      __n128 result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

BOOL re::ecs2::BlendShapeWeightsBufferComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9) {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 104))(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v32, a5, 0);
  unint64_t v11 = v32;
  unint64_t v12 = v33;
  unint64_t v32 = a4;
  unint64_t v33 = v11;
  unint64_t v34 = v12;
  uint64_t v13 = (unsigned __int16)v12;
  uint64_t v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      uint64_t v17 = *(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = *(void *)(v18 + 184);
      unint64_t v20 = (unint64_t *)(a3 + 32);
      if (v19)
      {
        uint64_t v21 = *(void **)(v17 + 40);
        if (v21)
        {
          BOOL v22 = *(void *)(v19 + 248) != *v21 || v10 == 0;
          if (!v22 && v21[1] == v10) {
            goto LABEL_27;
          }
          uint64_t v23 = *(void *)(v19 + 392);
          if (v23)
          {
            uint64_t v25 = *(void *)(v23 + 88);
            uint64_t v24 = *(void *)(v23 + 96);
          }
          else
          {
            uint64_t v25 = 0;
            uint64_t v24 = 0;
          }
          re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs(v17, *(void *)(*(void *)(a1 + 16) + 136), 0, v24, v25);
        }
        uint64_t v26 = *(void *)(v18 + 176);
        unint64_t v20 = (unint64_t *)(a3 + 32);
        if (v26)
        {
          if (*(void *)(v26 + 40)) {
            unint64_t v20 = (unint64_t *)(a3 + 40);
          }
          else {
            unint64_t v20 = (unint64_t *)(a3 + 32);
          }
        }
      }
      unint64_t v27 = v32;
      unint64_t v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v33);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v27, v28, *v20);
LABEL_27:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v33);
    }
    while (v33 != a5 || (unsigned __int16)v34 != 0xFFFF || WORD1(v34) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::BlendShapeWeightsBufferComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104))(v7);
  }
  else {
    uint64_t v60 = 0;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v81, a5, 0);
  unint64_t v70 = a4;
  long long v71 = v81;
  if ((void)v81 != a5 || WORD4(v81) != 0xFFFFLL || (DWORD2(v81) & 0xFFFF0000) != 4294901760)
  {
    uint64_t v10 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    uint64_t v62 = a5;
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v71);
      unint64_t v12 = *(void **)v11;
      uint64_t v13 = *(void **)(*(void *)v11 + 16);
      unint64_t v67 = (re::ecs2::MeshComponent *)v13[22];
      uint64_t v14 = (void *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)v67 + 32));
      unsigned int v15 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)v10[114]);
      if (v15) {
        int v16 = (re *)((char *)v15 + 216);
      }
      else {
        int v16 = (re::MeshNameMap *)(v14 + 56);
      }
      if (*(void *)(v13[23] + 240) && v12[16] && v12[14])
      {
        uint64_t v66 = (re::ecs2::MeshDeformationComponent *)v13[23];
        uint64_t v17 = (void *)v12[5];
        if (!v17 || *((void *)v66 + 31) != *v17)
        {
          uint64_t v68 = v16;
          uint64_t v18 = *((void *)v66 + 49);
          unint64_t v19 = *(void *)(v18 + 88);
          uint64_t v20 = *(void *)(v18 + 96);
          uint64_t v21 = *(void *)(a1 + 16);
          BOOL v22 = re::globalAllocators(v15);
          uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 48, 8);
          uint64_t v24 = *((void *)v66 + 31);
          id v25 = objc_msgSend(*(id *)(*(void *)(a1 + 16) + 184), sel_newBufferWithBytes_length_options_, v12[16], 4 * v12[14], 0);
          *uint64_t v23 = v24;
          v23[1] = v60;
          v23[2] = v25;
          v23[3] = 0;
          v23[4] = 0;
          v23[5] = 0;
          uint64_t v63 = v20;
          uint64_t v26 = re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs((uint64_t)v12, *(void *)(v21 + 136), v23, v20, v19);
          unint64_t v27 = v26;
          if (v25) {

          }
          unint64_t v28 = v27[1];
          v28[4] = v19;
          if (v19)
          {
            if (v19 >> 60) {
              goto LABEL_53;
            }
            v28[5] = v30;
            if (!v30)
            {
LABEL_54:
              re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
            }
            unint64_t v32 = v19 - 1;
            if (v19 != 1)
            {
              do
              {
                *long long v30 = 0;
                v30[1] = 0;
                v30 += 2;
                --v32;
              }
              while (v32);
            }
            *long long v30 = 0;
            v30[1] = 0;
          }
          unint64_t v64 = v19;
          unint64_t v65 = v27;
          uint64_t v33 = v12[19];
          unint64_t v34 = v68;
          if (v33)
          {
            uint64_t v35 = v12[21];
            uint64_t v36 = v35 + 16 * v33;
            do
            {
              unsigned int v37 = *(_DWORD *)v35;
              if (*(_DWORD *)v35 <= *((_DWORD *)v34 + 54))
              {
                uint64_t v38 = v12;
                unint64_t v39 = *(unsigned int *)(v35 + 4);
                uint64_t v69 = *(unsigned int *)(v35 + 8);
                int v40 = *(unsigned __int16 *)(v35 + 12);
                uint64_t v41 = v14[55];
                unint64_t v42 = re::MeshNameMap::modelIndex(v34, v37);
                unint64_t v19 = v14[52];
                if (v19 <= v42)
                {
                  uint64_t v72 = 0;
                  long long v84 = 0u;
                  long long v85 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  long long v81 = 0u;
                  unint64_t v48 = &_os_log_internal;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v73 = 136315906;
                  uint64_t v74 = "operator[]";
                  __int16 v75 = 1024;
                  int v76 = 797;
                  __int16 v77 = 2048;
                  unint64_t v78 = v42;
                  __int16 v79 = 2048;
                  unint64_t v80 = (void *)v19;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_48:
                  uint64_t v72 = 0;
                  long long v84 = 0u;
                  long long v85 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  long long v81 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v73 = 136315906;
                  uint64_t v74 = "slice";
                  __int16 v75 = 1024;
                  int v76 = 1119;
                  __int16 v77 = 2048;
                  unint64_t v78 = v39;
                  __int16 v79 = 2048;
                  unint64_t v80 = (void *)v48;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_49:
                  re::internal::assertLog((re::internal *)7, v46, "assertion failure: '%s' (%s:line %i) Invalid count. indeCGFloat x = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, v39, v49, v47);
                  _os_crash();
                  __break(1u);
LABEL_50:
                  uint64_t v72 = 0;
                  long long v84 = 0u;
                  long long v85 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  long long v81 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v73 = 136315906;
                  uint64_t v74 = "operator[]";
                  __int16 v75 = 1024;
                  int v76 = 468;
                  __int16 v77 = 2048;
                  unint64_t v78 = v48;
                  __int16 v79 = 2048;
                  unint64_t v80 = v14;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_51:
                  re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, v48, v53);
                  _os_crash();
                  __break(1u);
LABEL_52:
                  uint64_t v72 = 0;
                  long long v84 = 0u;
                  long long v85 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  long long v81 = 0u;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  int v73 = 136315906;
                  uint64_t v74 = "operator[]";
                  __int16 v75 = 1024;
                  int v76 = 468;
                  __int16 v77 = 2048;
                  unint64_t v78 = v48;
                  __int16 v79 = 2048;
                  unint64_t v80 = (void *)v39;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_53:
                  re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v19);
                  _os_crash();
                  __break(1u);
                  goto LABEL_54;
                }
                uint64_t v43 = re::DataArray<re::MeshModel>::tryGet(v41 + 8, *(void *)(v14[54] + 8 * v42));
                unint64_t v12 = v38;
                unint64_t v34 = v68;
                if (v43)
                {
                  int started = re::MeshNameMap::meshPartStartIndexForInstance(v68, v37);
                  unsigned int v45 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::ecs2::MeshDeformationComponent *)((char *)v66 + 232), started + v40);
                  if (v45 != -1)
                  {
                    unint64_t v47 = v38[14];
                    unint64_t v48 = v47 + 1;
                    if (v47 + 1 <= v39) {
                      goto LABEL_48;
                    }
                    uint64_t v49 = v69;
                    if (v69 + v39 > v47) {
                      goto LABEL_49;
                    }
                    long long v50 = v14;
                    long long v51 = v65[1];
                    unint64_t v48 = v45;
                    uint64_t v14 = (void *)v51[4];
                    if ((unint64_t)v14 <= v45) {
                      goto LABEL_50;
                    }
                    long long v52 = (void *)(v51[5] + 16 * v45);
                    *long long v52 = v38[16] + 4 * v39;
                    v52[1] = v69;
                    unint64_t v53 = v64;
                    if (v64 <= v45) {
                      goto LABEL_51;
                    }
                    uint64_t v54 = v65[1];
                    unint64_t v39 = v54[4];
                    if (v39 <= v45) {
                      goto LABEL_52;
                    }
                    uint64_t v14 = v50;
                    uint64_t v55 = v63 + 168 * v45;
                    uint64_t v56 = v54[5] + 16 * v45;
                    ++*(unsigned char *)v55;
                    *(void *)(v55 + 24) = v56;
                  }
                }
              }
              v35 += 16;
            }
            while (v35 != v36);
          }
        }
        a5 = v62;
        uint64_t v10 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v66, v67))
        {
          unint64_t v57 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v71);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v70, v57, *(void *)(a3 + 48));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v71);
    }
    while ((void)v71 != a5 || WORD4(v71) != 0xFFFF || WORD5(v71) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v32[0] = a3;
  v32[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v31);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 3150, a1);
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6)
  {
    if ((*(unsigned char *)(v6 + 424) & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      if (v7)
      {
        BOOL v8 = *(uint64_t **)a2;
        uint64_t v29 = *(void *)a2 + 8 * v7;
        while (1)
        {
          uint64_t v33 = *v8;
          unint64_t v9 = *(void *)(*(void *)(a1 + 280)
                         + 16
                         * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 272), &v33)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 384, v9);
          uint64_t v10 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, v9);
          uint64_t v11 = *(void *)(*v10 + 224);
          unint64_t v12 = v10[3];
          unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v12);
          if (*(_DWORD *)(v13 + 40)) {
            int v14 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 24))(v11, v32, v10, v12, v13, 0);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = v10[5];
          unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40)) {
            v14 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 32))(v11, v32, v10, v15, v16, 0);
          }
          unint64_t v17 = v10[6];
          unint64_t v18 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v17);
          if (*(_DWORD *)(v18 + 40)) {
            break;
          }
          if (v14) {
            goto LABEL_12;
          }
LABEL_13:
          if (*(unsigned char *)(a1 + 448))
          {
            unint64_t v19 = *(void *)(a1 + 392);
            int v20 = *(_DWORD *)(a1 + 400);
            if (v19 < 0xB)
            {
              uint64_t v23 = (uint64_t *)(a1 + 408);
              if ((v20 & 1) == 0) {
                uint64_t v23 = *(uint64_t **)(a1 + 416);
              }
              if (!v19) {
                goto LABEL_31;
              }
              uint64_t v24 = 0;
              uint64_t v25 = 8 * v19;
              do
              {
                uint64_t v26 = *v23++;
                v24 |= v26;
                v25 -= 8;
              }
              while (v25);
              if (!v24) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v21 = (void *)(a1 + 408);
              if ((v20 & 1) == 0) {
                uint64_t v21 = *(void **)(a1 + 416);
              }
              uint64_t v22 = 8 * v19;
              while (!*v21)
              {
                ++v21;
                v22 -= 8;
                if (!v22) {
                  goto LABEL_31;
                }
              }
            }
            unint64_t v27 = *(re::ecs2::System **)(a1 + 432);
            if (!*((unsigned char *)v27 + 86)) {
              re::ecs2::System::queueToRun(v27, 0.0);
            }
          }
LABEL_31:
          if (++v8 == (uint64_t *)v29) {
            goto LABEL_32;
          }
        }
        if (((v14 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v11 + 40))(v11, v32, v10, v17, v18, 0)) & 1) == 0)goto LABEL_13; {
LABEL_12:
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 384, v9);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v31);
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::willAddSystemToECSService(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v3);
  *((void *)this + 22) = v2;
  *((void *)this + 23) = result;
  return result;
}

double re::ecs2::BlendShapeWeightsBufferSystem::willRemoveSystemFromECSService(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  return result;
}

void re::ecs2::BlendShapeWeightsBufferSystem::willAddSceneToECSService(re::ecs2::BlendShapeWeightsBufferSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  BOOL v4 = (char *)this + 216;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 336);
  unint64_t v6 = *((void *)this + 43);
  int v7 = *((_DWORD *)this + 88);
  if (v6 >= 0xB)
  {
    if (v7) {
      BOOL v8 = (void *)((char *)this + 360);
    }
    else {
      BOOL v8 = (void *)*((void *)this + 46);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)this + 360);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)this + 46);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 336, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 272), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 384;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 32);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 28);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 27, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 28);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 232)) {
    unint64_t v19 = (char *)this + 240;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 31);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 32);
  ++*((_DWORD *)this + 66);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 32);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 32) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 272), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 32);
  unint64_t v29 = *((void *)this + 47);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 47) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 47) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 352)) {
      uint64_t v33 = (char *)this + 360;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 46);
    }
    *(void *)&v33[8 * *((void *)this + 43) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 32);
  unint64_t v35 = *((void *)this + 53);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 53) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 384), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 53) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 400)) {
      unint64_t v39 = (char *)this + 408;
    }
    else {
      unint64_t v39 = (char *)*((void *)this + 52);
    }
    *(void *)&v39[8 * *((void *)this + 49) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 384;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 448)) {
    return;
  }
  unint64_t v40 = *((void *)this + 49);
  int v41 = *((_DWORD *)this + 100);
  if (v40 >= 0xB)
  {
    if (v41) {
      unint64_t v42 = (void *)((char *)this + 408);
    }
    else {
      unint64_t v42 = (void *)*((void *)this + 52);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = (re::ecs2::System *)*((void *)this + 54);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 408);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 52);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::willRemoveSceneFromECSService(re::ecs2::BlendShapeWeightsBufferSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 272);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 34, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 35) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 336, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 384, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 216, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      BOOL v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *BOOL v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_BlendShapeMeshWeightRange(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FC00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7FCB8, "BlendShapeMeshWeightRange");
    __cxa_guard_release(&qword_26AF7FC00);
  }
  return &unk_26AF7FCB8;
}

void re::ecs2::initInfo_BlendShapeMeshWeightRange(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xB54CA9662B8EA2D0;
  v22[1] = "BlendShapeMeshWeightRange";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC08, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF7FC08);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "instanceIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF7FC38 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_uint32_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "weightRangeStartIndex";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF7FC40 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "weightRangeSize";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF7FC48 = v16;
      unint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_uint32_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "partIndex";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF7FC50 = v20;
      __cxa_guard_release(&qword_26AF7FC08);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7FC38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeMeshWeightRange>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeMeshWeightRange>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeMeshWeightRange>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeMeshWeightRange>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

double re::internal::defaultConstruct<re::ecs2::BlendShapeMeshWeightRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a3 = 0xFFFFFFFFLL;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::BlendShapeMeshWeightRange>(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

void *re::ecs2::allocInfo_BlendShapeWeightsBufferComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FC20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7FD30, "BlendShapeWeightsBufferComponent");
    __cxa_guard_release(&qword_26AF7FC20);
  }
  return &unk_26AF7FD30;
}

void re::ecs2::initInfo_BlendShapeWeightsBufferComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  unint64_t v34 = 0x83B2A9AC9A6DC864;
  v35[0] = "BlendShapeWeightsBufferComponent";
  re::StringID::destroyString((re::StringID *)&v34);
  *((_OWORD *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC18, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF7FC18);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF7FC58 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_totalBlendShapeWeights";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x6000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF7FC60 = v11;
      uint64_t v12 = (re::ecs2 *)re::introspectionAllocator((re *)v11);
      uint64_t v13 = v12;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC30, memory_order_acquire) & 1) == 0)
      {
        uint64_t v12 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF7FC30);
        if (v12)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7FC78);
          qword_26AF7FC78 = (uint64_t)&unk_26E6E21D0;
          __cxa_guard_release(&qword_26AF7FC30);
        }
      }
      if ((_MergedGlobals_137 & 1) == 0)
      {
        uint64_t v14 = (void *)qword_26AF7FC10;
        if (qword_26AF7FC10
          || (uint64_t v14 = re::ecs2::allocInfo_BlendShapeMeshWeightRange(v12),
              qword_26AF7FC10 = (uint64_t)v14,
              re::ecs2::initInfo_BlendShapeMeshWeightRange((re::ecs2 *)v14, v15),
              (_MergedGlobals_137 & 1) == 0))
        {
          _MergedGlobals_137 = 1;
          int v16 = *((_DWORD *)v14 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7FC78, 0);
          qword_26AF7FC88 = 0x2800000003;
          dword_26AF7FC90 = v16;
          word_26AF7FC94 = 0;
          *(void *)&xmmword_26AF7FC98 = 0;
          *((void *)&xmmword_26AF7FC98 + 1) = 0xFFFFFFFFLL;
          qword_26AF7FCA8 = (uint64_t)v14;
          unk_26AF7FCB0 = 0;
          qword_26AF7FC78 = (uint64_t)&unk_26E6E21D0;
          re::IntrospectionRegistry::add(v17, v18);
          re::getPrettyTypeName((re *)&qword_26AF7FC78, (const re::IntrospectionBase *)&v34);
          if (v35[0]) {
            unint64_t v19 = (const char *)v35[1];
          }
          else {
            unint64_t v19 = (char *)v35 + 1;
          }
          if (v34 && (v35[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v34 + 40))();
          }
          long long v31 = *((_OWORD *)v14 + 2);
          uint64_t v20 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v32);
          if (v20)
          {
            uint64_t v21 = *v20;
            *((void *)&v30 + 1) = v21;
          }
          else
          {
            long long v33 = v31;
            re::TypeBuilder::beginListType((uint64_t)&v34, v32, 1, 0x28uLL, 8uLL, &v33);
            re::TypeBuilder::setConstructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v34, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v34, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v34, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v34, v22);
          }
          xmmword_26AF7FC98 = v30;
          re::StringID::destroyString((re::StringID *)v32);
        }
      }
      uint64_t v23 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_blendShapeWeightsRanges";
      *(void *)(v23 + 16) = &qword_26AF7FC78;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x8800000002;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF7FC68 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_size_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "m_processedBlendShapeWeightsRangeHash";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x5800000003;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF7FC70 = v27;
      __cxa_guard_release(&qword_26AF7FC18);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF7FC58;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v29;
}

uint64_t re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsBufferComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 136);
  re::DynamicArray<unsigned long>::deinit(a3 + 96);
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)(a3 + 32));
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 136);
  re::DynamicArray<unsigned long>::deinit(a1 + 96);
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)(a1 + 32));
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_BlendShapeWeightsBufferComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferComponent>, this);
}

void *re::ecs2::allocInfo_BlendShapeWeightsBufferSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FC28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FC28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7FDA8, "BlendShapeWeightsBufferSystem");
    __cxa_guard_release(&qword_26AF7FC28);
  }
  return &unk_26AF7FDA8;
}

void re::ecs2::initInfo_BlendShapeWeightsBufferSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xC750A969B247FE34;
  v5[1] = "BlendShapeWeightsBufferSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_BlendShapeWeightsBufferSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::BlendShapeWeightsBufferSystem *re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferSystem>(uint64_t a1, uint64_t a2, re::ecs2::BlendShapeWeightsBufferSystem *a3)
{
  return re::ecs2::BlendShapeWeightsBufferSystem::BlendShapeWeightsBufferSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 27);
  a3[20] = &unk_26E6E1F20;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 24);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 27);
  a1[20] = &unk_26E6E1F20;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 24);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsBufferSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferSystem>, this);
}

uint64_t re::ecs2::BlendShapeWeightsBufferComponentStateImpl::dependsOnComponents(re::ecs2::BlendShapeWeightsBufferComponentStateImpl *this)
{
  return *((void *)this + 6);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsBufferComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsBufferComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::BlendShapeWeightsBufferSystem::~BlendShapeWeightsBufferSystem(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  *((void *)this + 20) = &unk_26E6E1F20;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27);
  *((void *)this + 20) = &unk_26E6E1F20;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 24);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::typeInfo(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferSystem>, 0);
}

void *re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(void *a1)
{
  a1[20] = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 21));
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 21));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 15));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 7));
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)a1);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)a1);
  return a1;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      long long v4 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, i);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(v4);
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 112 * (a2 & 3);
}

void *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(void *a1)
{
  if (*a1)
  {
    *a1 = 0;
    uint64_t v2 = *(void *)(a1[1] + 288);
    if (v2)
    {
      uint64_t v3 = a1[12];
      if (v3)
      {
        for (unint64_t i = 0; i != v3; ++i)
        {
          uint64_t v5 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(a1 + 7), i);
          re::EventBus::unsubscribe(v2, *(void *)v5, *(void *)(v5 + 8));
        }
      }
    }
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(a1 + 7));
    uint64_t v6 = 0;
    unint64_t v7 = a1 + 3;
    do
    {
      unint64_t v8 = (re::ecs2::ComponentBucketsBase *)a1[2];
      if (*(void *)v8) {
        re::ecs2::ComponentBucketsBase::removeBucket(v8, v7[v6]);
      }
      v7[v6++] = -1;
    }
    while (v6 != 4);
    a1[1] = 0;
    a1[2] = 0;
  }
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(a1 + 7));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 7));
  return a1;
}

re *re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(a3 + 24));
    uint64_t v5 = *(void **)(a3 + 16);
    if (v5)
    {

      *(void *)(a3 + 16) = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v6(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>((re *)"operator()", 149, *a2);
}

void *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6E2018;
  return result;
}

void *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E6E2018;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

uint64_t re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1 = a1[5];
  if (*(void *)(*(void *)a1 + 16) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(*(void *)a1 + 32) + 16 * v1) + 8 * a1[4];
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    unint64_t v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[492].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[492].i64[0] = v5;
      unint64_t v6 = v3[492].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[492].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[493] = vaddq_s64(v3[493], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::DynamicBitset<unsigned long long,64ul>::clearBit(uint64_t result, unint64_t a2)
{
  if (*(void *)(result + 8) <= a2 >> 6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(result + 16)) {
    uint64_t v2 = result + 24;
  }
  else {
    uint64_t v2 = *(void *)(result + 32);
  }
  *(void *)(v2 + 8 * (a2 >> 6)) &= ~(1 << a2);
  return result;
}

unint64_t re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v2 = a1 + 24;
  }
  else {
    uint64_t v2 = *(void *)(a1 + 32);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (a2 >= v3 << 6) {
    return -1;
  }
  unint64_t v4 = a2 >> 6;
  if ((a2 & 0x3F) != 0)
  {
    unint64_t v5 = *(void *)(v2 + 8 * v4) & (-1 << (a2 & 0x3F));
    if (v5) {
      return __clz(__rbit64(v5)) + (a2 & 0xFFFFFFFFFFFFFFC0);
    }
    ++v4;
  }
  BOOL v7 = v3 > v4;
  unint64_t v8 = v3 - v4;
  if (!v7) {
    return -1;
  }
  uint64_t v9 = -64 * v4;
  uint64_t v10 = (unint64_t *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v12 = *v10++;
    unint64_t v11 = v12;
    if (v12) {
      break;
    }
    v9 -= 64;
    if (!--v8) {
      return -1;
    }
  }
  return __clz(__rbit64(v11)) - v9;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    BOOL v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E2070;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    long long v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    int v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *int v16 = &unk_26E6E20C8;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    unint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E2120;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    __int16 v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6E2178;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        long long v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E2070;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        long long v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E20C8;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E2120;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E2178;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

void *re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return (void *)(*((void *)a1 + 1) + 16 * v6 + 8);
  }
  return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd(a1, a2, a3);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    int v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    int v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    int v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    int v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2070;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2070;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E20C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E20C8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2120;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2120;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2178;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2178;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9;
  unint64_t v9 = 0x94D049BB133111EBLL;
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  unint64_t v12 = v7 >> 4;
  uint64_t v13 = *(void *)a1;
  unint64_t v14 = v11 % v12;
  while (1)
  {
    unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40) {
      break;
    }
    if (v14 + 1 == v12) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v16 = v13 + 16 * v14;
  BOOL v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(unsigned char *)(v16 + v15) = v11 & 0x7F;
  unint64_t v18 = v15 + 16 * v14;
  uint64_t v19 = *a3;
  uint64_t v20 = (void *)(*((void *)a1 + 1) + 16 * v18);
  *uint64_t v20 = *a2;
  v20[1] = v19;
  uint64_t v21 = *((void *)a1 + 4) - v17;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v21;
  uint64_t v22 = (unint64_t *)(*((void *)a1 + 1) + 16 * v18);
  unint64_t v24 = *v22;
  uint64_t result = v22 + 1;
  unint64_t v25 = (((v24 ^ (v24 >> 30)) * v8) ^ (((v24 ^ (v24 >> 30)) * v8) >> 27)) * v9;
  *((void *)a1 + 5) ^= (v25 >> 31) ^ v25;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  void *result;
  unint64_t v22;
  unint64_t v23;

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  unint64_t v12 = *(void *)a1;
  uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  unint64_t v14 = v12 + 16 * v11;
  unint64_t v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  uint64_t v16 = v13 + 16 * v11;
  BOOL v17 = *a3;
  unint64_t v18 = (void *)(*((void *)a1 + 1) + 16 * v16);
  const re::IntrospectionBase *v18 = *a2;
  v18[1] = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  uint64_t v20 = (unint64_t *)(*((void *)a1 + 1) + 16 * v16);
  uint64_t v22 = *v20;
  uint64_t result = v20 + 1;
  uint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (void *)(*(void *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(void *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::BucketArray<RESubscriptionHandle,8ul>::init(a1, v4, *(void *)(a2 + 8));
    re::BucketArray<RESubscriptionHandle,8ul>::copy(a1, a2);
  }
  return a1;
}

void re::BucketArray<RESubscriptionHandle,8ul>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a2 + 40);
  if (v4 >= *(void *)(a1 + 40))
  {
    re::BucketArray<RESubscriptionHandle,8ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 7) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(a2, 0, a2, *(void *)(a1 + 40), a1, 0, (uint64_t *)v12);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = v4 - v6;
    if (v4 != v6)
    {
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = v8 + *(void *)(a1 + 40);
        if (*(void *)(a1 + 8) <= v9 >> 3)
        {
          memset(v12, 0, sizeof(v12));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = a1 + 24;
        if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
          uint64_t v10 = *(void *)(a1 + 32);
        }
        uint64_t v11 = *(void *)(v10 + 8 * (v9 >> 3));
        *(_OWORD *)(v11 + 16 * (v9 & 7)) = *(_OWORD *)re::BucketArray<re::StringID,8ul>::operator[](a2, v9);
        ++v8;
      }
      while (v7 != v8);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(a2, 0, a2, *(void *)(a2 + 40), a1, 0, (uint64_t *)v12);
    if (v4 != *(void *)(a1 + 40))
    {
      unint64_t v5 = v4;
      do
        re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, v5++);
      while (v5 != *(void *)(a1 + 40));
    }
  }
  *(void *)(a1 + 40) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  if (a1 != a3 || a2 != a4)
  {
    unint64_t v13 = a4 - 1;
    do
    {
      do
      {
        unint64_t v14 = a2;
        uint64_t v15 = (_OWORD *)re::BucketArray<re::StringID,8ul>::operator[](a1, a2);
        *(_OWORD *)re::BucketArray<RESubscriptionHandle,8ul>::operator[](a5, a6) = *v15;
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::resize(_anonymous_namespace_ *result, unint64_t a2, void *a3)
{
  unint64_t v4 = result;
  unint64_t v5 = *((void *)result + 1);
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = re::DynamicOverflowArray<unsigned long long,2ul>::reserve(result, a2);
    unint64_t v7 = *((void *)v4 + 1);
    if (v7 < a2)
    {
      do
      {
        uint64_t v8 = (char *)v4 + 24;
        if ((*((unsigned char *)v4 + 16) & 1) == 0) {
          uint64_t v8 = (char *)*((void *)v4 + 4);
        }
        *(void *)&v8[8 * v7++] = *a3;
      }
      while (a2 != v7);
    }
  }
  *((void *)v4 + 1) = a2;
  *((_DWORD *)v4 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*(void *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      unint64_t v4 = *((void *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    int v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }
  unint64_t v4 = 2;
LABEL_6:
  if (v4 < a2)
  {
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
  }
  return result;
}

BOOL re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    int v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    unint64_t v9 = a1[2];
    unint64_t v10 = *(void *)(a1[1] + 16 * v3);
    unint64_t v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    uint64_t v12 = a1[4];
    if (v7) {
      ++v12;
    }
    unint64_t v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2) {
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

void *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::BlendNode>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::BlendNode>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::BlendNode>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  long long v10 = xmmword_234381760;
  re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a4, (__n128 *)&v10);
  char v8 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 16 * *(void *)(a4 + 16) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 16 * a3;
}

void *re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::BlendNode>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      int8x16_t v6 = (_OWORD *)(v5 + 16 * v4);
      uint64_t v7 = v5 + 16 * a2 - (void)v6;
      if (v7 >= 1)
      {
        unint64_t v8 = ((unint64_t)v7 >> 4) + 1;
        do
        {
          *v6++ = xmmword_234381760;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      long long v10 = *(char **)(a1 + 32);
      uint64_t v11 = 16 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 16;
        v11 -= 16;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 16 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E2268;
  inited = (re *)objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return a1;
}

void re::ecs2::BlendShapeWeightsBufferComponent::~BlendShapeWeightsBufferComponent(id *this)
{
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 17));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 12));
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4);
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  v5[5] = *MEMORY[0x263EF8340];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, 24);
  v5[3] = re::globalAllocators(inited)[2];
  v5[4] = 0;
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v5);
  objc_destroyWeak(&location);
  id location = 0;
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

re::ecs2::BlendShapeWeightsBufferSystem *re::ecs2::BlendShapeWeightsBufferSystem::BlendShapeWeightsBufferSystem(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(void *)uint64_t v2 = &unk_26E6E1F88;
  uint64_t v3 = v2 + 160;
  unint64_t v4 = re::ecs2::BlendShapeWeightsBufferComponentStateImpl::BlendShapeWeightsBufferComponentStateImpl((re::ecs2::BlendShapeWeightsBufferComponentStateImpl *)(v2 + 160));
  *((void *)this + 28) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = 0;
  *((_DWORD *)this + 58) = 1;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1;
  *((void *)this + 49) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 100) = 1;
  *(_OWORD *)((char *)this + 433) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 42re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((void *)this + 47) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 48, 0);
  *((_DWORD *)this + 100) += 2;
  *((void *)this + 53) = 0;
  *((void *)this + 5re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = this;
  *((void *)this + 55) = v3;
  *((unsigned char *)this + 448) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  char v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

id re::internal::defaultRetain<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ImageBasedReflectionContentComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_138, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_138))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF7FE38, "ImageBasedReflectionContentComponent");
    __cxa_guard_release(&_MergedGlobals_138);
  }
  return &unk_26AF7FE38;
}

void re::ecs2::initInfo_ImageBasedReflectionContentComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xE5C615947B7704ELL;
  v9[1] = "ImageBasedReflectionContentComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FE30, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FE30);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FE28 = v7;
      __cxa_guard_release(&qword_26AF7FE30);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 1;
  *((void *)this + 8) = &qword_26AF7FE28;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionContentComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionContentComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionContentComponent>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionContentComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionContentComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E22F0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionContentComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E22F0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionContentComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionContentComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionContentComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionContentComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionContentComponent>, this);
}

void re::ecs2::ImageBasedReflectionContentComponent::~ImageBasedReflectionContentComponent(re::ecs2::ImageBasedReflectionContentComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(re::ecs2::PhysicsJointsPhysicsSubsystem *this)
{
  if (this)
  {
    uint64_t result = *((void *)this + 20);
    if (result) {
      return result;
    }
    uint64_t v2 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v5 = 0;
      uint64_t v3 = "PhysicsJointsPhysicsSubsystem::physicsSimulationService(): No PhysicsSimulationService";
      unint64_t v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
  else
  {
    uint64_t v2 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v3 = "PhysicsJointsPhysicsSubsystem::physicsSimulationService(): No parent PhysicsSystem";
      unint64_t v4 = buf;
      goto LABEL_7;
    }
  }
  return 0;
}

void *re::ecs2::PhysicsJointsPhysicsSubsystem::init(_anonymous_namespace_ *this, uint64_t a2)
{
  *((void *)this + 32) = a2;
  return re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::init(this, a2);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  return result;
}

void re::ecs2::PhysicsJointsPhysicsSubsystem::ecsToSim(re::ecs2::PhysicsJointsPhysicsSubsystem **this, const re::ecs2::Scene *a2, re::PhysicsSimulation *a3)
{
  uint64_t v6 = re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(this[32]);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(void *)v6 + 40))(v6, a2);
    if (v7)
    {
      uint64_t v8 = v7;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v29, v7, 0);
      long long v28 = v29;
      BOOL v9 = v8 == (void)v29 && WORD4(v29) == 0xFFFFLL;
      if (!v9 || (DWORD2(v29) & 0xFFFF0000) != 4294901760)
      {
        while (1)
        {
          uint64_t v11 = *(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v28)
                          + 8);
          if (v11)
          {
            if (*(unsigned char *)(v11 + 240)) {
              break;
            }
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
          if ((void)v28 == v8 && WORD4(v28) == 0xFFFF && WORD5(v28) == 0xFFFF) {
            goto LABEL_20;
          }
        }
        unint64_t v14 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (*((void *)a2 + 28) > v14)
        {
          uint64_t v15 = *(void *)(*((void *)a2 + 30) + 8 * v14);
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 24);
            if (v16)
            {
              long long v17 = *(void ***)(v15 + 40);
              uint64_t v18 = 8 * v16;
              do
              {
                long long v19 = *v17++;
                re::ecs2::Component::markDirty(v19);
                v18 -= 8;
              }
              while (v18);
            }
          }
        }
        uint64_t v20 = re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(this[32]);
        if (v20)
        {
          uint64_t v21 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(void *)v20 + 32))(v20, a2);
          if (v21)
          {
            uint64_t v22 = v21;
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v29, v21, 0);
            BOOL v23 = v22 == (void)v29 && WORD4(v29) == 0xFFFFLL;
            if (!v23 || (DWORD2(v29) & 0xFFFF0000) != 4294901760)
            {
              do
              {
                uint64_t v25 = *(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v29)
                                + 8);
                if (v25) {
                  *(unsigned char *)(v25 + 240) = 0;
                }
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
              }
              while ((void)v29 != v22 || WORD4(v29) != 0xFFFF || WORD5(v29) != 0xFFFF);
            }
          }
        }
      }
    }
  }
LABEL_20:
  long long v29 = xmmword_234361D20;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)&v29, (uint64_t)a3);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = xmmword_234361D20;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 8, a2, (uint64_t)&v3, a3);
}

void re::ecs2::PhysicsJointsPhysicsSubsystem::~PhysicsJointsPhysicsSubsystem(re::ecs2::PhysicsJointsPhysicsSubsystem *this)
{
  *(void *)this = &unk_26E6E2428;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6E2428;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  __int16 v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(a1 + 152);
    }
    else {
      uint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    BOOL v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      unint64_t v42 = (void *)(a1 + 200);
    }
    else {
      unint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  long long v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *uint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    uint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      uint64_t v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re::ecs2::PhysicsJointsComponent *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t result = (re::ecs2::PhysicsJointsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    return (re::ecs2::PhysicsJointsComponent *)re::ecs2::PhysicsJointsComponent::removeFromSimulation(result);
  }
  return result;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E2428;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E2428;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  long long v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  int v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  uint64_t v9 = *(void *)(*v8 + 224);
  unint64_t v10 = v8[3];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 24))(v9, a3, v8, v10, v11, a4);
  }
  else {
    int v12 = 0;
  }
  unint64_t v13 = v8[5];
  unint64_t v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v13);
  if (*(_DWORD *)(v14 + 40)) {
    v12 |= (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 32))(v9, a3, v8, v13, v14, a4);
  }
  unint64_t v15 = v8[6];
  unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v15);
  if (*(_DWORD *)(v16 + 40))
  {
    if (((v12 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 40))(v9, a3, v8, v15, v16, a4)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v12) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
LABEL_9:
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v17 = *(void *)(a1 + 176);
  int v18 = *(_DWORD *)(a1 + 184);
  if (v17 >= 0xB)
  {
    if (v18) {
      uint64_t v19 = (void *)(a1 + 192);
    }
    else {
      uint64_t v19 = *(void **)(a1 + 200);
    }
    uint64_t v21 = 8 * v17;
    while (!*v19)
    {
      ++v19;
      v21 -= 8;
      if (!v21) {
        return;
      }
    }
LABEL_27:
    uint64_t v25 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v25 + 86)) {
      re::ecs2::System::queueToRun(v25, 0.0);
    }
    return;
  }
  if (v18)
  {
    uint64_t v20 = (uint64_t *)(a1 + 192);
    if (!v17) {
      return;
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t **)(a1 + 200);
    if (!v17) {
      return;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = 8 * v17;
  do
  {
    uint64_t v24 = *v20++;
    v22 |= v24;
    v23 -= 8;
  }
  while (v23);
  if (v22) {
    goto LABEL_27;
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E2498;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    long long v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E24F0;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    unint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E2548;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    __int16 v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E25A0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        long long v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E2498;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        long long v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E24F0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E2548;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E25A0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2498;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2498;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E24F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E24F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2548;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2548;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E25A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E25A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::allocInfo_VFXREBindingDescriptor(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FEB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FEB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80120, "VFXREBindingDescriptor");
    __cxa_guard_release(&qword_26AF7FEB8);
  }
  return &unk_26AF80120;
}

void re::ecs2::initInfo_VFXREBindingDescriptor(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v38[0] = 0x5E7718CB343B8272;
  v38[1] = "VFXREBindingDescriptor";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FEC0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FEC0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "identifier";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFA0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "object";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFA8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "binding";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v16 + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFB0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "userManual";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v20 + 32) = 0x6000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFB8 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_int64_t((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "type";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v24 + 32) = 0x8000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFC0 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      int v27 = re::introspect_int64_t((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "semantic";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v28 + 32) = 0x8800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFC8 = v28;
      uint64_t v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_double((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "min";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v32 + 32) = 0x9000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFD0 = v32;
      uint64_t v33 = re::introspectionAllocator((re *)v32);
      uint64_t v35 = re::introspect_double((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "max";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v36 + 32) = 0x9800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FFD8 = v36;
      __cxa_guard_release(&qword_26AF7FEC0);
    }
  }
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 8;
  *((void *)this + 8) = &qword_26AF7FFA0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXREBindingDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXREBindingDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXREBindingDescriptor>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXREBindingDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v37 = v39;
}

void *re::internal::defaultConstruct<re::ecs2::VFXREBindingDescriptor>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a3 + 32), 0);
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a3 + 64), 0);
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  uint64_t v7 = (void *)(a3 + 96);
  return re::DynamicString::setCapacity(v7, 0);
}

double re::internal::defaultDestruct<re::ecs2::VFXREBindingDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 96));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 64));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::ecs2::VFXREBindingDescriptor>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a1, 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 32), 0);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 64), 0);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v5 = (void *)(a1 + 96);
  return re::DynamicString::setCapacity(v5, 0);
}

double re::internal::defaultDestructV2<re::ecs2::VFXREBindingDescriptor>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 96));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 64));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void *re::ecs2::allocInfo_VFXREBinding(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FED0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80198, "VFXREBinding");
    __cxa_guard_release(&qword_26AF7FED0);
  }
  return &unk_26AF80198;
}

void re::ecs2::initInfo_VFXREBinding(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x3E4EFC2E3FAE7C54;
  v18[1] = "VFXREBinding";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FED8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FED8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "valueStorage";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v8 + 32) = 0x800000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF58 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_uint32_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "version";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v12 + 32) = 0x3000000005;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF60 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_int((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "descriptorIndex";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v16 + 32) = 6;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF68 = v16;
      __cxa_guard_release(&qword_26AF7FED8);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 3;
  *((void *)this + 8) = &qword_26AF7FF58;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXREBinding>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXREBinding>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXREBinding>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXREBinding>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::VFXREBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXREBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<unsigned long>::deinit(a3 + 8);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::VFXREBinding>(uint64_t result)
{
  *(_DWORD *)uint64_t result = -1;
  *(void *)(result + 40) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXREBinding>(uint64_t a1)
{
  return re::DynamicArray<unsigned long>::deinit(a1 + 8);
}

void re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FF38))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF80068);
    qword_26AF80068 = (uint64_t)&unk_26E6E2740;
    __cxa_guard_release(&qword_26AF7FF38);
  }
  if ((byte_26AF7FEB2 & 1) == 0)
  {
    uint64_t v2 = (re::ecs2 *)re::introspect_size_t((re *)1, a2);
    uint64_t v3 = (uint64_t)v2;
    unint64_t v4 = (void *)qword_26AF7FEE0;
    if (!qword_26AF7FEE0)
    {
      unint64_t v4 = re::ecs2::allocInfo_VFXREBinding(v2);
      qword_26AF7FEE0 = (uint64_t)v4;
      re::ecs2::initInfo_VFXREBinding((re::ecs2 *)v4, v5);
    }
    if ((byte_26AF7FEB2 & 1) == 0)
    {
      byte_26AF7FEB2 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF80068, 0);
      qword_26AF80078 = 0x3000000007;
      dword_26AF80080 = v6;
      word_26AF80084 = 0;
      *(void *)&xmmword_26AF80088 = 0;
      *((void *)&xmmword_26AF80088 + 1) = 0xFFFFFFFFLL;
      qword_26AF80098 = v3;
      unk_26AF800A0 = 0;
      qword_26AF800A8 = (uint64_t)v4;
      unk_26AF800B0 = 0;
      qword_26AF80068 = (uint64_t)&unk_26E6E2740;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF80068, (const re::IntrospectionBase *)&v25);
      if (v26) {
        uint64_t v9 = v27;
      }
      else {
        uint64_t v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.char var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15 {
          || (uint64_t v16 = *v31,
        }
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = -1,
              (long long v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF80088 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

void *re::ecs2::allocInfo_VFXSceneComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FF00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80210, "VFXSceneComponent");
    __cxa_guard_release(&qword_26AF7FF00);
  }
  return &unk_26AF80210;
}

void re::ecs2::initInfo_VFXSceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v86 = 0x24F9B15154932732;
  unint64_t v87 = "VFXSceneComponent";
  re::StringID::destroyString((re::StringID *)&v86);
  *((_OWORD *)this + 2) = v82;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FEF8, memory_order_acquire)) {
    goto LABEL_2;
  }
  unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FEF8);
  if (!v4) {
    goto LABEL_2;
  }
  uint64_t v5 = re::introspectionAllocator(v4);
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = "Component";
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 3;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  qword_26AF800B8 = v7;
  uint64_t v8 = re::introspectionAllocator((re *)v7);
  re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get((uint64_t)v8, v9);
  uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
  *(_DWORD *)uint64_t v10 = 1;
  *(void *)(v10 + 8) = "m_bindingTable";
  *(void *)(v10 + 16) = &qword_26AF80068;
  *(void *)(v10 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(v10 + 32) = 0x7000000002;
  *(_DWORD *)(v10 + 40) = 0;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  qword_26AF800C0 = v10;
  uint64_t v11 = re::introspectionAllocator((re *)v10);
  uint64_t v13 = re::introspect_float((re *)1, v12);
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)(v14 + 8) = "simulationRate";
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(v14 + 32) = 0x16000000003;
  *(_DWORD *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = 0;
  *(_DWORD *)(v14 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  qword_26AF800C8 = v14;
  uint64_t v16 = re::introspectionAllocator((re *)v14);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FEE8, memory_order_acquire) & 1) == 0)
  {
    __int16 v75 = (re *)__cxa_guard_acquire(&qword_26AF7FEE8);
    if (v75)
    {
      uint64_t v76 = re::introspectionAllocator(v75);
      __int16 v77 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v76 + 32))(v76, 24, 8);
      *(_DWORD *)__int16 v77 = 1;
      *((void *)v77 + 1) = 0;
      *((void *)v77 + 2) = "Playing";
      qword_26AF7FF48 = (uint64_t)v77;
      unint64_t v78 = re::introspectionAllocator(v77);
      uint64_t v79 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v78 + 32))(v78, 24, 8);
      *(_DWORD *)uint64_t v79 = 1;
      *(void *)(v79 + 8) = 1;
      *(void *)(v79 + 16) = "Paused";
      qword_26AF7FF50 = v79;
      __cxa_guard_release(&qword_26AF7FEE8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FEF0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF80020, "VFXSimulationState", 1, 1, 1, 1);
    qword_26AF80020 = (uint64_t)&unk_26E715E00;
    qword_26AF80060 = (uint64_t)&re::ecs2::introspect_VFXSimulationState(BOOL)::enumTable;
    dword_26AF80030 = 9;
    __cxa_guard_release(&qword_26AF7FEF0);
  }
  if (_MergedGlobals_139)
  {
LABEL_33:
    uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
    *(_DWORD *)uint64_t v39 = 1;
    *(void *)(v39 + 8) = "simulationState";
    *(void *)(v39 + 16) = &qword_26AF80020;
    *(void *)(v39 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v39 + 32) = 0x16800000004;
    *(_DWORD *)(v39 + 40) = 0;
    *(void *)(v39 + 48) = 0;
    *(void *)(v39 + 56) = 0;
    *(_DWORD *)(v39 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800D0 = v39;
    uint64_t v40 = re::introspectionAllocator((re *)v39);
    unint64_t v42 = re::introspect_BOOL((re *)1, v41);
    uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
    *(_DWORD *)uint64_t v43 = 1;
    *(void *)(v43 + 8) = "explicitSimulationTime";
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v43 + 32) = 0xE000000006;
    *(_DWORD *)(v43 + 40) = 0;
    *(void *)(v43 + 48) = 0;
    *(void *)(v43 + 56) = 0;
    *(_DWORD *)(v43 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800D8 = v43;
    uint64_t v44 = re::introspectionAllocator((re *)v43);
    uint64_t v46 = re::introspect_float((re *)1, v45);
    uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
    *(_DWORD *)uint64_t v47 = 1;
    *(void *)(v47 + 8) = "totalSimulationTime";
    *(void *)(v47 + 16) = v46;
    *(void *)(v47 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v47 + 32) = 0xE400000007;
    *(_DWORD *)(v47 + 40) = 0;
    *(void *)(v47 + 48) = 0;
    *(void *)(v47 + 56) = 0;
    *(_DWORD *)(v47 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800E0 = v47;
    unint64_t v48 = re::introspectionAllocator((re *)v47);
    uint64_t v50 = re::introspect_float((re *)1, v49);
    uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
    *(_DWORD *)uint64_t v51 = 1;
    *(void *)(v51 + 8) = "lastTickTotalSimulationTime";
    *(void *)(v51 + 16) = v50;
    *(void *)(v51 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v51 + 32) = 0xE800000008;
    *(_DWORD *)(v51 + 40) = 0;
    *(void *)(v51 + 48) = 0;
    *(void *)(v51 + 56) = 0;
    *(_DWORD *)(v51 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800E8 = v51;
    uint64_t v52 = re::introspectionAllocator((re *)v51);
    uint64_t v54 = re::introspect_float((re *)1, v53);
    uint64_t v55 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
    *(_DWORD *)uint64_t v55 = 1;
    *(void *)(v55 + 8) = "sceneScale";
    *(void *)(v55 + 16) = v54;
    *(void *)(v55 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v55 + 32) = 0x16400000009;
    *(_DWORD *)(v55 + 40) = 0;
    *(void *)(v55 + 48) = 0;
    *(void *)(v55 + 56) = 0;
    *(_DWORD *)(v55 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800F0 = v55;
    uint64_t v56 = re::introspectionAllocator((re *)v55);
    uint64_t v58 = re::introspect_uint32_t((re *)1, v57);
    uint64_t v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v56 + 32))(v56, 72, 8);
    *(_DWORD *)uint64_t v59 = 1;
    *(void *)(v59 + 8) = "performResetVersion";
    *(void *)(v59 + 16) = v58;
    *(void *)(v59 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v59 + 32) = 0xEC0000000ALL;
    *(_DWORD *)(v59 + 40) = 0;
    *(void *)(v59 + 48) = 0;
    *(void *)(v59 + 56) = 0;
    *(_DWORD *)(v59 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF800F8 = v59;
    __int16 v60 = re::introspectionAllocator((re *)v59);
    __int16 v62 = re::introspect_BOOL((re *)1, v61);
    uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
    *(_DWORD *)uint64_t v63 = 1;
    *(void *)(v63 + 8) = "m_isInitialized";
    *(void *)(v63 + 16) = v62;
    *(void *)(v63 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v63 + 32) = 0xD50000000BLL;
    *(_DWORD *)(v63 + 40) = 0;
    *(void *)(v63 + 48) = 0;
    *(void *)(v63 + 56) = 0;
    *(_DWORD *)(v63 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF80100 = v63;
    uint64_t v64 = re::introspectionAllocator((re *)v63);
    uint64_t v66 = re::introspect_BOOL((re *)1, v65);
    uint64_t v67 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v64 + 32))(v64, 72, 8);
    *(_DWORD *)uint64_t v67 = 1;
    *(void *)(v67 + 8) = "m_hasBindingToFetch";
    *(void *)(v67 + 16) = v66;
    *(void *)(v67 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v67 + 32) = 0xD40000000DLL;
    *(_DWORD *)(v67 + 40) = 0;
    *(void *)(v67 + 48) = 0;
    *(void *)(v67 + 56) = 0;
    *(_DWORD *)(v67 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF80108 = v67;
    uint64_t v68 = re::introspectionAllocator((re *)v67);
    uint64_t v70 = re::introspect_uint64_t((re *)1, v69);
    uint64_t v71 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v68 + 32))(v68, 72, 8);
    *(_DWORD *)uint64_t v71 = 1;
    *(void *)(v71 + 8) = "m_collidingPortalEntityId";
    *(void *)(v71 + 16) = v70;
    *(void *)(v71 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v71 + 32) = 0xF00000000ELL;
    *(_DWORD *)(v71 + 40) = 0;
    *(void *)(v71 + 48) = 0;
    *(void *)(v71 + 56) = 0;
    *(_DWORD *)(v71 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF80110 = v71;
    uint64_t v72 = re::introspectionAllocator((re *)v71);
    uint64_t v73 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    uint64_t v74 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v72 + 32))(v72, 72, 8);
    *(_DWORD *)uint64_t v74 = 1;
    *(void *)(v74 + 8) = "m_collidingPortalPadding";
    *(void *)(v74 + 16) = v73;
    *(void *)(v74 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *(void *)(v74 + 32) = 0xF80000000FLL;
    *(_DWORD *)(v74 + 40) = 0;
    *(void *)(v74 + 48) = 0;
    *(void *)(v74 + 56) = 0;
    *(_DWORD *)(v74 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    qword_26AF80118 = v74;
    __cxa_guard_release(&qword_26AF7FEF8);
LABEL_2:
    *((void *)this + 2) = 0x17000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 13;
    *((void *)this + 8) = &qword_26AF800B8;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneComponent>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneComponent>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneComponent>;
    *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXSceneComponent>;
    re::IntrospectionRegistry::add(this, v3);
    long long v81 = v82;
    return;
  }
  _MergedGlobals_139 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF80020, v15);
  v83[0] = 0x1096B9A2A9580404;
  v83[1] = (uint64_t)"VFXSimulationState";
  uint64_t v86 = 6104748;
  unint64_t v87 = "char";
  long long v17 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v86);
  if (v17)
  {
    uint64_t v18 = *v17;
    re::StringID::destroyString((re::StringID *)&v86);
    long long v19 = (unsigned int *)qword_26AF80060;
    v85[1] = v18;
    re::TypeBuilder::beginEnumType((uint64_t)&v86, v83, 1, 1, (uint64_t)v85);
    unint64_t v21 = *v19;
    if (v21)
    {
      for (unint64_t i = 0; i < v21; ++i)
      {
        uint64_t v23 = *(void *)(*((void *)v19 + 1) + 8 * i);
        if (*(_DWORD *)v23 == 1)
        {
          long long v24 = *(char **)(v23 + 16);
          if (v24)
          {
            uint64_t v25 = *v24;
            if (*v24)
            {
              char v26 = v24[1];
              if (v26)
              {
                int v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  uint64_t v25 = 31 * v25 + v26;
                  int v28 = *v27++;
                  char v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v29 = *(void *)(v23 + 8);
          *(void *)&v84.char var0 = 2 * v25;
          v84.var1 = v24;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v86, v29, &v84);
          re::StringID::destroyString((re::StringID *)&v84);
          unint64_t v21 = *v19;
        }
      }
      if (v21)
      {
        for (unint64_t j = 0; j < v21; ++j)
        {
          uint64_t v31 = *(void *)(*((void *)v19 + 1) + 8 * j);
          if (*(_DWORD *)v31 == 2)
          {
            uint64_t v32 = *(char **)(v31 + 16);
            if (v32)
            {
              uint64_t v33 = *v32;
              if (*v32)
              {
                char v34 = v32[1];
                if (v34)
                {
                  uint64_t v35 = (unsigned __int8 *)(v32 + 2);
                  do
                  {
                    uint64_t v33 = 31 * v33 + v34;
                    int v36 = *v35++;
                    char v34 = v36;
                  }
                  while (v36);
                }
              }
            }
            else
            {
              uint64_t v33 = 0;
            }
            uint64_t v37 = *(void *)(v31 + 8);
            *(void *)&v84.char var0 = 2 * v33;
            v84.var1 = v32;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v86, v37, &v84);
            re::StringID::destroyString((re::StringID *)&v84);
            unint64_t v21 = *v19;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v86, v38);
    xmmword_26AF80040 = (__int128)v84;
    re::StringID::destroyString((re::StringID *)v83);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v86);
  re::internal::assertLog((re::internal *)5, v80, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VFXSimulationState");
  _os_crash();
  __break(1u);
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneComponent>(int a1, int a2, re::ecs2::VFXSceneComponent *this)
{
  return re::ecs2::VFXSceneComponent::VFXSceneComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneComponent>, this);
}

void *re::ecs2::allocInfo_VFXSceneReadbackComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FF10))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80288, "VFXSceneReadbackComponent");
    __cxa_guard_release(&qword_26AF7FF10);
  }
  return &unk_26AF80288;
}

void re::ecs2::initInfo_VFXSceneReadbackComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0xB776A00B8A58A138;
  v16[1] = "VFXSceneReadbackComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF08, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FF08);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF70 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get((uint64_t)v8, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "bindings";
      *(void *)(v10 + 16) = &qword_26AF80068;
      *(void *)(v10 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF78 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_BOOL((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "hasBeenSyncedBack";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v14 + 32) = 0x5000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF80 = v14;
      __cxa_guard_release(&qword_26AF7FF08);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 3;
  *((void *)this + 8) = &qword_26AF7FF70;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneReadbackComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneReadbackComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneReadbackComponent>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXSceneReadbackComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneReadbackComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E27E0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 68) = 0x7FFFFFFFLL;
  *(unsigned char *)(v3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneReadbackComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSceneReadbackComponent>(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E27E0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  *(unsigned char *)(v1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneReadbackComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneReadbackComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneReadbackComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneReadbackComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneReadbackComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneReadbackComponent>, this);
}

void *re::ecs2::allocInfo_VFXSceneMetadataComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FF20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80300, "VFXSceneMetadataComponent");
    __cxa_guard_release(&qword_26AF7FF20);
  }
  return &unk_26AF80300;
}

void re::ecs2::initInfo_VFXSceneMetadataComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v30 = 0x5FF980AED9C40254;
  v31[0] = "VFXSceneMetadataComponent";
  re::StringID::destroyString((re::StringID *)&v30);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF18, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF7FF18);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF88 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      uint64_t v9 = v8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF40, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF7FF40);
        if (v8)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF7FFE0);
          qword_26AF7FFE0 = (uint64_t)&unk_26E6E2868;
          __cxa_guard_release(&qword_26AF7FF40);
        }
      }
      if ((byte_26AF7FEB3 & 1) == 0)
      {
        uint64_t v10 = (void *)qword_26AF7FEC8;
        if (qword_26AF7FEC8
          || (uint64_t v10 = re::ecs2::allocInfo_VFXREBindingDescriptor(v8),
              qword_26AF7FEC8 = (uint64_t)v10,
              re::ecs2::initInfo_VFXREBindingDescriptor((re::ecs2 *)v10, v11),
              (byte_26AF7FEB3 & 1) == 0))
        {
          byte_26AF7FEB3 = 1;
          int v12 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF7FFE0, 0);
          qword_26AF7FFF0 = 0x2800000003;
          dword_26AF7FFF8 = v12;
          word_26AF7FFFC = 0;
          *(void *)&xmmword_26AF80000 = 0;
          *((void *)&xmmword_26AF80000 + 1) = 0xFFFFFFFFLL;
          qword_26AF80010 = (uint64_t)v10;
          unk_26AF80018 = 0;
          qword_26AF7FFE0 = (uint64_t)&unk_26E6E2868;
          re::IntrospectionRegistry::add(v13, v14);
          re::getPrettyTypeName((re *)&qword_26AF7FFE0, (const re::IntrospectionBase *)&v30);
          if (v31[0]) {
            long long v15 = (const char *)v31[1];
          }
          else {
            long long v15 = (char *)v31 + 1;
          }
          if (v30 && (v31[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
          long long v27 = *((_OWORD *)v10 + 2);
          uint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v28);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v26 + 1) = v17;
          }
          else
          {
            long long v29 = v27;
            re::TypeBuilder::beginListType((uint64_t)&v30, v28, 1, 0x28uLL, 8uLL, &v29);
            re::TypeBuilder::setConstructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v30, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v30, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v30, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v30, v18);
          }
          xmmword_26AF80000 = v26;
          re::StringID::destroyString((re::StringID *)v28);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_bindingDescriptors";
      *(void *)(v19 + 16) = &qword_26AF7FFE0;
      *(void *)(v19 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v19 + 32) = 0x2000000001;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF90 = v19;
      long long v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_AssetHandle((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_effect";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v23 + 32) = 0x4800000002;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF7FF98 = v23;
      __cxa_guard_release(&qword_26AF7FF18);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 3;
  *((void *)this + 8) = &qword_26AF7FF88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneMetadataComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneMetadataComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneMetadataComponent>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXSceneMetadataComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v25;
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneMetadataComponent>(int a1, int a2, ArcSharedObject *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E2900;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneMetadataComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSceneMetadataComponent>(ArcSharedObject *a1)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E2900;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneMetadataComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneMetadataComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneMetadataComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneMetadataComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneMetadataComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneMetadataComponent>, this);
}

void *re::ecs2::allocInfo_VFXSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF7FF28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80378, "VFXSystem");
    __cxa_guard_release(&qword_26AF7FF28);
  }
  return &unk_26AF80378;
}

void re::ecs2::initInfo_VFXSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x8911F46A97EELL;
  v5[1] = "VFXSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VFXSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSystem>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VFXSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 240) = 0;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 22re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(void *)uint64_t v3 = &unk_26E6E2680;
  *(_WORD *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 18re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VFXSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 28));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSystem>(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 22re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(void *)uint64_t v1 = &unk_26E6E2680;
  *(_WORD *)(v1 + 160) = 0;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 18re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VFXSystem>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 28));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VFXSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSystem>, this);
}

uint64_t re::ecs2::VFXSystem::onComponentUpdated(re::ecs2::VFXSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  uint64_t v4 = (*(uint64_t (**)(re::ecs2::Component *, re::NetworkSystem *))(*(void *)a3 + 40))(a3, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  long long v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  while (1)
  {
    {
      uint64_t v13 = v5;
      long long v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      int v11 = v10;
      uint64_t v5 = v13;
      if (v11)
      {
        re::introspect<re::ecs2::VFXSceneComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"VFXSceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneComponent>, 0);
        long long v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        uint64_t v5 = v13;
      }
    }
    if ((char *)v5 == v6[121]) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(v5 + 56);
    if (v7)
    {
      for (unint64_t i = *(void **)(v5 + 64); ; ++i)
      {
        uint64_t v9 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v9[10] == 3) {
          break;
        }
        if (!--v7) {
          return 0;
        }
      }
      uint64_t v5 = *((void *)v9 + 2);
      if (v5) {
        continue;
      }
    }
    return 0;
  }
  re::ecs2::VFXSceneComponent::invalidateIfNeeded(a3);
  return 0;
}

void re::ecs2::VFXSceneComponent::invalidateIfNeeded(re::ecs2::VFXSceneComponent *this)
{
  if (!*((unsigned char *)this + 40))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      uint64_t v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    }
    else {
      uint64_t v3 = *((void *)this + 27);
    }
    uint64_t v4 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v3 + 72));
    if (!v4)
    {
      *((unsigned char *)this + 40) = 1;
      return;
    }
    uint64_t v5 = *((void *)this + 7);
    if (v5 && (long long v6 = *(void **)(v4 + 64)) != 0)
    {
      uint64_t v7 = [v6 uuid];
      *((unsigned char *)this + 40) = v5 != v7;
      if (v5 == v7) {
        return;
      }
    }
    else
    {
      *((unsigned char *)this + 40) = 1;
    }
    uint64_t v8 = *((void *)this + 4);
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
      *(unsigned char *)(v8 + 8) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
      *((void *)this + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    }
  }
}

void re::ecs2::VFXSystem::willAddSystemToECSService(re::ecs2::VFXSystem *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 21) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 23) = re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v5);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 26) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v8);
  (*(void (**)(long long *__return_ptr))(**((void **)this + 15) + 8))(&v15);
  long long v9 = *((_OWORD *)this + 14);
  *((_OWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v15;
  long long v15 = v9;
  uint64_t v10 = *((void *)this + 30);
  *((void *)this + 30) = v16;
  uint64_t v16 = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  uint64_t v11 = *((void *)this + 29);
  if (!v11 || (unsigned int v12 = atomic_load((unsigned int *)(v11 + 704)), v12 != 2)) {
    re::AssetHandle::loadAsync((re::ecs2::VFXSystem *)((char *)this + 224));
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v14 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v13);
  if (v14)
  {
    if (!*((unsigned char *)this + 160))
    {
      *(void *)&long long v15 = this;
      *((void *)&v15 + 1) = re::ecs2::VFXSystem::onComponentUpdated;
      uint64_t v16 = 0;
      uint64_t v17 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VFXSystem>(re::ecs2::VFXSystem *,REEventHandlerResult (re::ecs2::VFXSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v14 + 352), (uint64_t)&v15);
      *((unsigned char *)this + 160) = 1;
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::ClippingService>(void)::info = re::ecs2::introspect_ClippingService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::ClippingService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::OpacityService>(void)::info = re::ecs2::introspect_OpacityService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::OpacityService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::ImageBasedLightService>(void)::info = re::ecs2::introspect_ImageBasedLightService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::ImageBasedLightService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::VisualProxyScopeService>(void)::info = re::ecs2::introspect_VisualProxyScopeService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::VisualProxyScopeService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::RenderPassGroupService>(void)::info = re::ecs2::introspect_RenderPassGroupService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::RenderPassGroupService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::LightService>(void)::info = re::ecs2::introspect_LightService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::LightService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::NetworkSystem>(uint64_t a1)
{
  {
    re::introspect<re::NetworkSystem>(void)::info = re::introspect_NetworkSystem(0);
  }
  uint64_t v2 = re::introspect<re::NetworkSystem>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

double re::ecs2::VFXSystem::willRemoveSystemFromECSService(re::ecs2::VFXSystem *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 18re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  long long v2 = *((_OWORD *)this + 14);
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(_OWORD *)uint64_t v11 = v2;
  *(void *)&v11[16] = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v4);
  if (v5)
  {
    if (*((unsigned char *)this + 160))
    {
      uint64_t v6 = v5;
      if (*(void *)(v5 + 368))
      {
        unint64_t v7 = 0;
        do
        {
          uint64_t v8 = (_OWORD *)(*(void *)(v6 + 384) + 32 * v7);
          if (*(re::ecs2::VFXSystem **)v8 == this)
          {
            if (!*(_DWORD *)(v6 + 432))
            {
              re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)(v6 + 352), v7);
              continue;
            }
            v11[0] = 0;
            long long v9 = v8[1];
            *(_OWORD *)&unsigned char v11[8] = *v8;
            long long v12 = v9;
            re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v6 + 392), (uint64_t)v11);
          }
          ++v7;
        }
        while (v7 < *(void *)(v6 + 368));
      }
    }
  }
  *((void *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  return result;
}

void re::ecs2::VFXSystem::updateScenes(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v519 = *MEMORY[0x263EF8340];
  if (*(void *)(v1 + 104))
  {
    float v4 = v3;
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    if (((*(uint64_t (**)(void))(**(void **)(v1 + 40) + 168))(*(void *)(v1 + 40)) & 1) == 0
      && (*(unsigned char *)(*(void *)(v6 + 104) + 424) & 0x10) != 0)
    {
      uint64_t v7 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v6 + 224));
      if (v7)
      {
        uint64_t v8 = v7;
        long long v9 = *(re::MaterialManager **)(*(void *)(v6 + 112) + 24);
        if (!re::MaterialManager::findTextureTableByName(v9, "VFXTextureTable"))
        {
          TextureTableForName = (void *)re::MaterialManager::createTextureTableForName(v9, "VFXTextureTable");
          v471.n128_u64[0] = 0xC10C601B47401E3;
          if (*(_DWORD *)(v8 + 240))
          {
            uint64_t v275 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:nn180100]();
            _Unwind_Resume(v275);
          }
          re::TextureTable::setTexture(TextureTableForName, (uint64_t *)&v471, (id *)(v8 + 160));
        }
        if (!*(void *)(v6 + 112)) {
          goto LABEL_386;
        }
        uint64_t v12 = *(void *)(v5 + 8);
        if (v12)
        {
          uint64_t v13 = *(re::ecs2::RenderingSubsystem ***)v5;
          uint64_t v294 = *(void *)v5 + 8 * v12;
          float v295 = v4;
          int64x2_t v285 = vdupq_n_s64(1uLL);
          int32x4_t v296 = vdupq_n_s32(0x7F800000u);
          uint64_t v14 = 0x10100010001;
          __asm { FMOV            V10.2S, #1.0 }
          float32x2_t v20 = vrsqrte_f32((float32x2_t)1065353216);
          float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v20, v20)));
          LODWORD(v279) = vmul_f32(v21, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v21, v21))).u32[0];
          float32x4_t v284 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v279);
          float v280 = vmuls_lane_f32(v284.f32[1], v284, 2);
          float v281 = vmuls_lane_f32(v284.f32[2], v284, 2);
          float v22 = 1.0;
          LODWORD(v283) = vmulq_f32(v284, v284).u32[0];
          float v282 = vmuls_lane_f32(v284.f32[1], *(float32x2_t *)v284.f32, 1);
          uint64_t v313 = v6;
          do
          {
            unsigned int v309 = *v13;
            if (*v13)
            {
              unint64_t v297 = v13;
              char v337 = 0;
              uint64_t v23 = *(void *)(v6 + 144);
              if (v23)
              {
                uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
                char v25 = 1;
                char v337 = 1;
                uint64_t v338 = v24;
                uint64_t v332 = v24;
              }
              else
              {
                char v25 = 0;
              }
              char v331 = v25;
              uint64_t v336 = 0;
              uint64_t v334 = 0;
              v333[0] = 0;
              v333[1] = 0;
              int v335 = 0;
              long long v26 = (re::ecs2::RenderingSubsystem *)((char *)v309 + 200);
              uint64_t v27 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v309 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v27)
              {
                int v28 = *(unint64_t **)(v27 + 40);
                uint64_t v29 = *(void *)(v27 + 24);
              }
              else
              {
                int v28 = 0;
                uint64_t v29 = 0;
              }
              uint64_t v30 = (re::ProfilerConfig *)re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v30)
              {
                uint64_t v31 = (unint64_t *)*((void *)v30 + 5);
                uint64_t v32 = *((void *)v30 + 3);
              }
              else
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
              }
              unint64_t v33 = v32 + v29;
              if (v32 + v29) {
                uint64_t v30 = (re::ProfilerConfig *)re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v333, v33);
              }
              if (v29)
              {
                uint64_t v34 = 8 * v29;
                do
                {
                  unint64_t v35 = *v28;
                  if (*v28)
                  {
                    if (!v331
                      || (uint64_t v30 = (re::ProfilerConfig *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v332, *(void *)(v35 + 16)), *(unsigned char *)v30))
                    {
                      v471.n128_u64[0] = v35;
                      v471.n128_u64[1] = v35;
                      re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add((uint64_t)v333, &v471);
                    }
                  }
                  ++v28;
                  v34 -= 8;
                }
                while (v34);
              }
              if (v32)
              {
                uint64_t v36 = 8 * v32;
                do
                {
                  unint64_t v37 = *v31;
                  if (*v31)
                  {
                    if (!v331
                      || (uint64_t v30 = (re::ProfilerConfig *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v332, *(void *)(v37 + 16)), *(unsigned char *)v30))
                    {
                      unint64_t v38 = *(void *)(v37 + 32);
                      v471.n128_u64[0] = v37;
                      v471.n128_u64[1] = v38;
                      re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add((uint64_t)v333, &v471);
                    }
                  }
                  ++v31;
                  v36 -= 8;
                }
                while (v36);
              }
              uint64_t v39 = v334;
              if (v334)
              {
                if (!*(void *)(v6 + 112)) {
                  goto LABEL_385;
                }
                isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v30);
                if (isStatisticCollectionEnabled)
                {
                  uint64_t v41 = re::profilerThreadContext(isStatisticCollectionEnabled);
                  if (*(void *)(v41 + 152)) {
                    uint64_t v286 = mach_absolute_time();
                  }
                }
                else
                {
                  uint64_t v41 = 0;
                }
                uint64_t v292 = v41;
                re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                unint64_t v42 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v330, 3103, v6);
                uint64_t v43 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v42);
                if (v43)
                {
                  uint64_t v44 = re::profilerThreadContext(v43);
                  uint64_t v45 = re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  unint64_t v46 = v45 ? *(void *)(v45 + 24) : 0;
                  uint64_t v47 = *(int64x2_t **)(v44 + 152);
                  if (v47)
                  {
                    unint64_t v48 = v47[600].u64[0];
                    if (v48 >= v46) {
                      unint64_t v48 = v46;
                    }
                    v47[600].i64[0] = v48;
                    unint64_t v49 = v47[600].u64[1];
                    if (v49 <= v46) {
                      unint64_t v49 = v46;
                    }
                    v47[600].i64[1] = v49;
                    v50.i64[1] = v285.i64[1];
                    v50.i64[0] = v46;
                    v47[601] = vaddq_s64(v47[601], v50);
                    *(unsigned char *)(v44 + 18re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
                  }
                }
                uint64_t v51 = *(re::RenderManager **)(v6 + 112);
                uint64_t v52 = *((void *)v51 + 13);
                if (v52)
                {
                  uint64_t v52 = re::RenderFrameBox::get(v52 + 344, 0xFFFFFFFFFFFFFFFuLL);
                  uint64_t v51 = *(re::RenderManager **)(v6 + 112);
                }
                unint64_t v307 = (re::RenderFrame *)v52;
                uint64_t v53 = *((void *)v51 + 10);
                if (*(unsigned char *)(v53 + 18))
                {
                  *(void *)(v53 + 96) = 0;
                  ++*(_DWORD *)(v53 + 104);
                }
                *(unsigned char *)(v53 + 18) = 0;
                uint64_t v54 = re::RenderManager::perFrameAllocator(v51);
                uint64_t v55 = (*(uint64_t (**)(void))(**(void **)(v6 + 136) + 24))(*(void *)(v6 + 136));
                uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 16))(v55);
                int v57 = *(_DWORD *)(v56 + 124);
                if (!v57) {
                  int v57 = *(_DWORD *)(v56 + 16);
                }
                signed int v58 = v57 + 1;
                unsigned int v328 = 0;
                long long v326 = 0u;
                long long v327 = 0u;
                uint64_t v329 = 0x7FFFFFFFLL;
                unint64_t v306 = (void *)v54;
                re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v326, v54, v57 + 1);
                unsigned int v324 = 0;
                long long v322 = 0u;
                long long v323 = 0u;
                uint64_t v325 = 0x7FFFFFFFLL;
                LODWORD(v473[0]) = 0;
                long long v472 = 0u;
                __n128 v471 = 0u;
                *(id *)((char *)v473 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = (id)0x7FFFFFFF;
                uint64_t v61 = 0;
                __int16 v62 = v336;
                do
                {
                  uint64_t v63 = v62[v61];
                  v404[0].i64[0] = 0;
                  (*(void (**)(id *__return_ptr, uint64_t, void))(*(void *)v55 + 8))(location, v55, *(void *)(v63 + 16));
                  if (LOBYTE(location[0])) {
                    id v64 = location[1];
                  }
                  else {
                    id v64 = 0;
                  }
                  v404[0].i64[0] = (uint64_t)v64;
                  LODWORD(location[0]) = 0;
                  unint64_t v65 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v471, v404[0].i64, (int *)location);
                  ++*(void *)v65;
                  v61 += 2;
                }
                while (2 * v39 != v61);
                int v66 = (int)v473[0];
                if (LODWORD(v473[0]))
                {
                  uint64_t v67 = 0;
                  uint64_t v68 = (int *)(v472 + 8);
                  while (1)
                  {
                    int v69 = *v68;
                    v68 += 8;
                    if (v69 < 0) {
                      break;
                    }
                    if (LODWORD(v473[0]) == ++v67)
                    {
                      LODWORD(v67) = v473[0];
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v67) = 0;
                }
                int v70 = (int)v473[0];
                if (LODWORD(v473[0]) != v67)
                {
                  uint64_t v71 = v67;
                  uint64_t v72 = v472;
                  do
                  {
                    uint64_t v73 = v72 + 32 * v71;
                    unint64_t v74 = *(void *)(v73 + 24);
                    __int16 v75 = (uint64_t *)(v73 + 16);
                    location[1] = 0;
                    v348.i64[0] = 0;
                    v348.i32[2] = 0;
                    v349.i64[0] = 0;
                    location[0] = v306;
                    re::DynamicArray<re::VFXScene>::setCapacity(location, v74);
                    ++v348.i32[2];
                    re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v326, v75, (uint64_t)location);
                    unint64_t v65 = (_anonymous_namespace_ *)re::DynamicArray<re::VFXScene>::deinit((uint64_t)location);
                    int v70 = (int)v473[0];
                    uint64_t v72 = v472;
                    if (LODWORD(v473[0]) <= (v67 + 1)) {
                      int v76 = v67 + 1;
                    }
                    else {
                      int v76 = (int)v473[0];
                    }
                    int v77 = v67;
                    while (1)
                    {
                      uint64_t v71 = (v77 + 1);
                      if (v76 - 1 == v77) {
                        break;
                      }
                      ++v77;
                      LODWORD(v67) = v71;
                      if ((*(_DWORD *)(v472 + 32 * v71 + 8) & 0x80000000) != 0) {
                        goto LABEL_80;
                      }
                    }
                    LODWORD(v67) = v76;
LABEL_80:
                    ;
                  }
                  while (v66 != v67);
                }
                uint64_t v78 = 0;
                if (v70)
                {
                  uint64_t v79 = (int *)(v472 + 8);
                  while (1)
                  {
                    int v80 = *v79;
                    v79 += 8;
                    if (v80 < 0) {
                      break;
                    }
                    if (v70 == ++v78)
                    {
                      LODWORD(v78) = v70;
                      break;
                    }
                  }
                }
                if (v70 != v78)
                {
                  uint64_t v81 = v78;
                  uint64_t v82 = v472;
                  do
                  {
                    long long v83 = (uint64_t *)(v82 + 32 * v81 + 16);
                    v349.i32[0] = 0;
                    float32x4_t v348 = 0u;
                    *(_OWORD *)id location = 0u;
                    *(uint64_t *)((char *)v349.i64 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0x7FFFFFFFLL;
                    re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v322, v83, (uint64_t *)location);
                    re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)location);
                    uint64_t v82 = v472;
                    if (LODWORD(v473[0]) <= (v78 + 1)) {
                      int v84 = v78 + 1;
                    }
                    else {
                      int v84 = (int)v473[0];
                    }
                    int v85 = v78;
                    while (1)
                    {
                      uint64_t v81 = (v85 + 1);
                      if (v84 - 1 == v85) {
                        break;
                      }
                      ++v85;
                      LODWORD(v78) = v81;
                      if ((*(_DWORD *)(v472 + 32 * v81 + 8) & 0x80000000) != 0) {
                        goto LABEL_96;
                      }
                    }
                    LODWORD(v78) = v84;
LABEL_96:
                    ;
                  }
                  while (v70 != v78);
                  __int16 v62 = v336;
                  uint64_t v39 = v334;
                }
                re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v471);
                if (v39)
                {
                  uint64_t v305 = &v62[2 * v39];
                  uint64_t v293 = (_anonymous_namespace_ *)(v53 + 80);
                  while (2)
                  {
                    uint64_t v86 = v62[1];
                    if (!*(unsigned char *)(v86 + 213)) {
                      goto LABEL_245;
                    }
                    uint64_t v310 = *v62;
                    uint64_t v87 = *(void *)(v313 + 112);
                    re::ecs2::VFXSceneComponent::invalidateIfNeeded((re::ecs2::VFXSceneComponent *)v86);
                    uint64_t v89 = *(void *)(v86 + 16);
                    if (v89)
                    {
                      unint64_t v88 = (re *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v89 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                      unint64_t v90 = v88;
                    }
                    else
                    {
                      unint64_t v90 = *(re **)(v86 + 216);
                    }
                    if (!*((void *)v90 + 10) && *(unsigned char *)(v86 + 40)) {
                      goto LABEL_123;
                    }
                    VFXRESceneClass = re::getVFXRESceneClass(v88);
                    if (VFXRESceneClass)
                    {
                      unint64_t v92 = VFXRESceneClass;
                      Class VFXSceneLoadOptionsClass = re::getVFXSceneLoadOptionsClass(VFXRESceneClass);
                      if (VFXSceneLoadOptionsClass)
                      {
                        uint64_t v94 = VFXSceneLoadOptionsClass;
                        unint64_t v95 = (re *)((char *)v90 + 72);
                        uint64_t v96 = re::AssetHandle::loadedAsset<re::VFXAsset>(v95);
                        if (v96)
                        {
                          if (*(unsigned char *)(v86 + 40))
                          {
                            uint64_t v97 = v96;
                            id v98 = *(id *)(v96 + 64);
                            if (v98)
                            {
                              if (*(void *)(v86 + 48))
                              {
                                re::ObjCObject::operator=((void **)(v86 + 48), 0);
                                *(_DWORD *)(v86 + 236) = 0;
                              }
                              uint64_t v99 = *(void *)(v87 + 80);
                              long long v100 = *(void **)(v97 + 64);
                              if (v100) {
                                long long v100 = (void *)[v100 uuid];
                              }
                              *(void *)(v86 + 56) = v100;
                              if (*(unsigned char *)(v99 + 17))
                              {
                                objc_initWeak(location, (id)(v86 + 8));
                                v404[0].i64[0] = (uint64_t)v98;
                                v471.n128_u64[0] = MEMORY[0x263EF8330];
                                v471.n128_u64[1] = 3321888768;
                                *(void *)&long long v472 = ___ZN2re4ecs217VFXSceneComponent12loadIfNeededERNS_13RenderManagerERNS_12AssetServiceE_block_invoke;
                                *((void *)&v472 + 1) = &__block_descriptor_40_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE_e62_v16__0__VFXLoadTask____B___UnfairLock__os_unfair_lock_s_I__B_8l;
                                v473[0] = 0;
                                objc_copyWeak(v473, location);
                                re::VFXManager::makeScheduledLoadRuntimeTask(v99, (uint64_t)v404, &v471);
                              }
                              id v103 = objc_alloc_init(v94);
                              [v103 setEnableRuntimeScriptCompilation:*(unsigned __int8 *)(v99 + 16)];
                              uint64_t v104 = (void *)[[v92 alloc] initWithCommandQueue:*(void *)v99 model:v98 options:v103];
                              if (v104)
                              {
                                id v105 = v104;
                                location[0] = v105;
                                re::ecs2::VFXSceneComponent::setRuntimeScene(v86, location);

                                *(unsigned char *)(v86 + 40) = 0;
                              }
                              else
                              {
                                unint64_t v163 = *re::ecsComponentsLogObjects(0);
                                if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(location[0]) = 0;
                                  _os_log_error_impl(&dword_233120000, v163, OS_LOG_TYPE_ERROR, "Unable to instanciate VFX runtime", (uint8_t *)location, 2u);
                                }
                              }
                            }
                            else
                            {
                              long long v102 = *re::ecsComponentsLogObjects(0);
                              if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(location[0]) = 0;
                                _os_log_error_impl(&dword_233120000, v102, OS_LOG_TYPE_ERROR, "VFX effect model scene is not loaded", (uint8_t *)location, 2u);
                              }
                            }
                          }
                          goto LABEL_129;
                        }
                        re::AssetHandle::loadAsync(v95);
LABEL_123:
                        re::ObjCObject::operator=((void **)(v86 + 48), 0);
                        *(_DWORD *)(v86 + 236) = 0;
LABEL_129:
                        if (!*(void *)(v86 + 32))
                        {
                          uint64_t v321 = *(re::ecs2::Entity **)(v310 + 16);
                          id v308 = *(id *)(v86 + 48);
                          if (v308)
                          {
                            char v491 = 0;
                            char v492 = 0;
                            long long v493 = 0u;
                            __n128 v471 = 0u;
                            long long v472 = 0u;
                            v473[0] = 0;
                            long long v474 = 0u;
                            long long v475 = 0u;
                            long long v476 = 0u;
                            long long v477 = 0u;
                            long long v478 = 0u;
                            long long v479 = 0u;
                            long long v480 = 0u;
                            long long v481 = 0u;
                            char v482 = 0;
                            long long v483 = 0u;
                            long long v484 = 0u;
                            long long v485 = 0u;
                            long long v486 = 0u;
                            long long v487 = 0u;
                            long long v488 = 0u;
                            long long v489 = 0u;
                            memset(v490, 0, 28);
                            if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
                              dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                            }
                            uint64_t v494 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                            uint64_t v495 = _D10;
                            int v496 = 1065353216;
                            long long v497 = 0u;
                            memset(v498, 0, sizeof(v498));
                            unint64_t v499 = 0xFFFFFFFF00000001;
                            int32x4_t v500 = v296;
                            *(void *)&long long v106 = 0x7F0000007FLL;
                            *((void *)&v106 + 1) = 0x7F0000007FLL;
                            long long v501 = v106;
                            uint64_t v502 = 0;
                            char v503 = 0;
                            uint64_t v504 = 0;
                            char v505 = 0;
                            uint64_t v506 = v14;
                            uint64_t v507 = 0;
                            float32x4_t v508 = 0;
                            v509.i64[0] = 0x3F8000003F800000;
                            v509.i64[1] = 1065353216;
                            *((void *)&v510 + 1) = 0x3F80000000000000;
                            *(void *)&long long v510 = 0;
                            long long v511 = 0u;
                            *(void *)&long long v512 = 0x3F8000003F800000;
                            *((void *)&v512 + 1) = 1065353216;
                            v513.i64[1] = 0x3F80000000000000;
                            v513.i64[0] = 0;
                            long long v514 = 0u;
                            unint64_t v515 = 0xBF8000003F800000;
                            int v516 = 1065353216;
                            uint64_t v517 = 0;
                            int v518 = 1;
                            *(void *)&v498[8] = *((void *)v321 + 37);
                            id v107 = (id)(v310 + 8);
                            uint64_t v108 = v507;
                            uint64_t v507 = v310;
                            if (v108) {

                            }
                            re::ObjCObject::operator=(&v508, v308);
                            unint64_t v109 = v321;
                            unint64_t v110 = *(re::RenderManager ****)(v313 + 112);
                            location[0] = 0;
                            LODWORD(location[1]) = 0;
                            uint64_t v111 = v110[3];
                            v404[0].i64[0] = *((void *)v321 + 37);
                            if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v111 + 129), v404[0].i64))
                            {
                              uint64_t v112 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(v110[3], *((void *)v109 + 37));
                              if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(location, v113))
                              {
                                long long v114 = (char *)location[0];
                                v348.i64[(uint64_t)location[0]] = v112;
                                location[0] = v114 + 1;
                                ++LODWORD(location[1]);
                              }
                            }
                            uint64_t v115 = *(void *)(v313 + 184);
                            if (v115)
                            {
                              unint64_t v116 = (_OWORD *)(*(uint64_t (**)(void, re::ecs2::RenderingSubsystem *))(*(void *)v115 + 24))(*(void *)(v313 + 184), v309);
                            }
                            else
                            {
                              long long v340 = 0u;
                              memset(v339, 0, sizeof(v339));
                              unint64_t v116 = v339;
                              DWORD1(v340) = 0x7FFFFFFF;
                            }
                            v404[0].i64[0] = (uint64_t)v109;
                            uint64_t v117 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v116, v404[0].i64);
                            if (v117)
                            {
                              uint64_t v118 = re::ecs2::EntityHandle::resolve((id *)(*(void *)v117 + 32), (uint64_t)v309);
                              if (v118)
                              {
                                uint64_t v119 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v118 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                                if (v119)
                                {
                                  uint64_t v121 = v119;
                                  if (*(unsigned char *)(v119 + 152))
                                  {
                                    if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(location, v120))
                                    {
                                      unint64_t v122 = (char *)location[0];
                                      v348.i64[(uint64_t)location[0]] = v121 + 160;
                                      location[0] = v122 + 1;
                                      ++LODWORD(location[1]);
                                    }
                                  }
                                }
                              }
                            }
                            unint64_t v123 = (re::Allocator *)re::RenderManager::perFrameAllocator((re::RenderManager *)v110);
                            if (location[0])
                            {
                              if (location[0] == (id)1) {
                                uint64_t v125 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable((re::MaterialParameterBlock *)v348.i64[0], v123);
                              }
                              else {
                                uint64_t v125 = (uint64_t)re::MaterialParameterBlock::copyParametersFromArray(v123, &v348, (uint64_t)location[0]);
                              }
                              uint64_t v126 = v125;
                              if (!v115) {
LABEL_154:
                              }
                                v124.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v339);
                            }
                            else
                            {
                              uint64_t v126 = 0;
                              if (!v115) {
                                goto LABEL_154;
                              }
                            }
                            *(void *)&long long v487 = v126;
                            uint64_t v127 = *(void *)(v313 + 192);
                            location[0] = v321;
                            if (v127
                              && (v128 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v127 + 16))(v127, v124), (unint64_t v129 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v128, (uint64_t *)location)) != 0))
                            {
                              int v130 = *v129;
                            }
                            else
                            {
                              int v130 = 1;
                            }
                            LODWORD(v499) = v130;
                            [v308 worldBoundingBox];
                            int32x4_t v500 = v131;
                            long long v501 = v132;
                            *(_OWORD *)id location = xmmword_23435FD50;
                            float32x4_t v348 = (float32x4_t)xmmword_23435FD60;
                            float32x4_t v349 = (float32x4_t)xmmword_23435FD80;
                            float32x4_t v350 = (float32x4_t)xmmword_23435FBB0;
                            unint64_t v133 = re::ecs2::MeshComponentHelper::clippingDataForMeshScene((uint64_t)v321, (const re::ecs2::MeshComponent *)&v500, (float32x4_t *)location, *(void *)(v313 + 168));
                            HIBYTE(v518) = BYTE5(v133) & 1;
                            LODWORD(v490[3]) = v133;
                            uint64_t v134 = *(void *)(v313 + 176);
                            if (v134)
                            {
                              uint64_t v135 = (*(uint64_t (**)(uint64_t, re::ecs2::Entity *))(*(void *)v134 + 24))(v134, v321);
                              uint64_t v137 = v136;
                            }
                            else
                            {
                              uint64_t v137 = 0;
                              uint64_t v135 = 1065353216;
                            }
                            LODWORD(v495) = v135;
                            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF7FF30, memory_order_acquire) & 1) == 0)
                            {
                              uint64_t v135 = __cxa_guard_acquire(&qword_26AF7FF30);
                              if (v135)
                              {
                                re::Defaults::BOOLValue((re::Defaults *)"disableFadeTechniqueMappingOverride", v246, (char *)location);
                                if (LOBYTE(location[0])) {
                                  char v247 = BYTE1(location[0]) ^ 1;
                                }
                                else {
                                  char v247 = 1;
                                }
                                byte_26AF7FEB1 = v247;
                                __cxa_guard_release(&qword_26AF7FF30);
                              }
                            }
                            if (byte_26AF7FEB1 && (re::useDitherFade((re *)v135) & 1) == 0 && *(float *)&v495 < v22)
                            {
                              if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1) {
                                dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
                              }
                              uint64_t v494 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
                            }
                            long long v474 = xmmword_23435FD50;
                            long long v475 = xmmword_23435FD60;
                            long long v476 = xmmword_23435FD80;
                            long long v477 = xmmword_23435FBB0;
                            re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(v313 + 216), (re::ecs2::TransformComponent **)v321, location);
                            v404[0] = 0u;
                            v431[0] = xmmword_23435FBB0;
                            v346[0] = 0u;
                            re::decomposeScaleRotationTranslation<float>((uint64_t)location, v404, v431, v346);
                            int32x4_t v509 = v404[0];
                            long long v510 = v431[0];
                            long long v511 = v346[0];
                            unint64_t v138 = v321;
                            uint64_t v139 = *((void *)v321 + 30);
                            if (v139)
                            {
                              uint64_t v140 = *(void *)(v139 + 136);
                              if (v140)
                              {
                                *(_OWORD *)id location = 0u;
                                v404[0] = (int32x4_t)xmmword_23435FBB0;
                                v431[0] = 0u;
                                re::decomposeScaleRotationTranslation<float>(v140 + 48, (int32x4_t *)location, v404, v431);
                                long long v512 = *(_OWORD *)location;
                                int32x4_t v513 = v404[0];
                                long long v514 = v431[0];
                                unint64_t v138 = v321;
                              }
                            }
                            int v516 = *(_DWORD *)(v86 + 356);
                            uint64_t v141 = *(void *)(v313 + 208);
                            if (v141)
                            {
                              LOWORD(v141) = (*(uint64_t (**)(uint64_t))(*(void *)v141 + 24))(v141);
                              unint64_t v138 = v321;
                            }
                            *(_WORD *)&v498[16] = v141;
                            uint64_t v142 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v138 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                            if (v142)
                            {
                              char v492 = *(unsigned char *)(v142 + 25);
                              long long v493 = *(_OWORD *)(v142 + 304);
                            }
                            if (v337)
                            {
                              uint64_t v143 = (char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v338, (unint64_t)v321);
                              LOBYTE(location[0]) = *v143;
                              BYTE2(location[0]) = v143[2];
                              if (BYTE2(location[0])) {
                                BYTE3(location[0]) = v143[3];
                              }
                              BYTE4(location[0]) = v143[4];
                              if (BYTE4(location[0])) {
                                BYTE5(location[0]) = v143[5];
                              }
                              BYTE6(location[0]) = v143[6];
                              if (BYTE6(location[0])) {
                                HIBYTE(location[0]) = v143[7];
                              }
                              LOBYTE(location[1]) = v143[8];
                              __int16 v144 = *(_WORD *)(v143 + 9);
                              BYTE3(location[1]) = v143[11];
                              *(_WORD *)((char *)&location[1] + 1) = v144;
                              BYTE4(location[1]) = v143[12];
                              if (BYTE4(location[1])) {
                                BYTE5(location[1]) = v143[13];
                              }
                              BYTE6(location[1]) = v143[14];
                              if (BYTE6(location[1])) {
                                HIBYTE(location[1]) = v143[15];
                              }
                              v348.i8[0] = v143[16];
                              if (v348.i8[0]) {
                                v348.i8[1] = v143[17];
                              }
                              v348.i8[2] = v143[18];
                              if (v348.i8[2]) {
                                v348.i8[3] = v143[19];
                              }
                              v348.i8[4] = v143[20];
                              if (v348.i8[4]) {
                                v348.i16[3] = *((_WORD *)v143 + 11);
                              }
                              __int32 v145 = *((_DWORD *)v143 + 6);
                              v348.i8[12] = v143[28];
                              v348.i32[2] = v145;
                              *(void *)uint64_t v498 = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)((char *)location + 2));
                            }
                            (*(void (**)(id *__return_ptr, uint64_t, re::ecs2::Entity *))(*(void *)v55 + 8))(location, v55, v321);
                            if (LOBYTE(location[0])) {
                              id v146 = location[1];
                            }
                            else {
                              id v146 = 0;
                            }
                            uint64_t v147 = (*(uint64_t (**)(void))(**(void **)(v313 + 200) + 16))(*(void *)(v313 + 200));
                            uint64_t v148 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v147, (uint64_t *)&v321);
                            if (v148)
                            {
                              uint64_t v149 = *(void *)v148;
                              BOOL v150 = *(unsigned char *)(v148 + 8) != 0;
                            }
                            else
                            {
                              uint64_t v149 = 0;
                              BOOL v150 = 0;
                            }
                            v318[0] = &v322;
                            unint64_t v304 = (unint64_t)v146;
                            v318[1] = v146;
                            v318[2] = &v500;
                            v318[3] = &v474;
                            v318[4] = v137;
                            uint64_t v300 = v149;
                            v318[5] = v149;
                            BOOL v319 = v150;
                            char v320 = 0;
                            re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v318);
                            int v311 = *(_DWORD *)&v498[4];
                            int v302 = *(_DWORD *)v498;
                            id v151 = *(id *)(v86 + 48);
                            unint64_t v152 = [v151 effect];
                            if (v152)
                            {
                              BOOL v298 = v150;
                              uint64_t v153 = *(void *)(v86 + 16);
                              uint64_t v154 = v137;
                              if (v153) {
                                uint64_t v155 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v153 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                              }
                              else {
                                uint64_t v155 = *(void *)(v86 + 216);
                              }
                              int v156 = [v151 scene];
                              location[0] = (id)MEMORY[0x263EF8330];
                              location[1] = (id)3221225472;
                              v348.i64[0] = (uint64_t)___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke;
                              v348.i64[1] = (uint64_t)&unk_264BE3508;
                              v349.i64[1] = v86;
                              v350.i64[0] = v155;
                              v349.i64[0] = (uint64_t)v152;
                              [v156 performTransaction:location];

                              uint64_t v137 = v154;
                              BOOL v150 = v298;
                            }
                            if (*(void *)(v86 + 16) && *(unsigned char *)(v86 + 212))
                            {
                              id v157 = *(id *)(v86 + 48);
                              uint64_t v158 = [v157 effect];
                              if (v158)
                              {
                                uint64_t v159 = *(void *)(v86 + 16);
                                if (v159)
                                {
                                  uint64_t v160 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v159 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                                  if (v160)
                                  {
                                    unint64_t v161 = (const re::ecs2::Component *)v160;
                                    uint64_t v162 = *(void *)(v86 + 16);
                                    uint64_t v287 = v137;
                                    if (v162) {
                                      uint64_t v299 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v162 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                                    }
                                    else {
                                      uint64_t v299 = *(void *)(v86 + 216);
                                    }
                                    int v164 = [v157 scene];
                                    location[0] = (id)MEMORY[0x263EF8330];
                                    location[1] = (id)3221225472;
                                    v348.i64[0] = (uint64_t)___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke;
                                    v348.i64[1] = (uint64_t)&unk_264BE34B8;
                                    v349.i64[1] = v86;
                                    v350.i64[0] = (uint64_t)v161;
                                    v350.i64[1] = v299;
                                    v349.i64[0] = (uint64_t)v158;
                                    [v164 performTransaction:location];

                                    uint64_t v137 = v287;
                                    *((unsigned char *)v161 + 80) = 0;
                                    long long v165 = *(re::ecs2::NetworkComponent **)(*(void *)(v86 + 16) + 200);
                                    if (v165) {
                                      re::ecs2::NetworkComponent::markDirty(v165, v161);
                                    }
                                  }
                                }
                              }
                            }
                            float v166 = *(float *)(v86 + 352);
                            *(float *)&unint64_t v515 = v166;
                            int v167 = *(unsigned __int8 *)(v86 + 360);
                            LOBYTE(v518) = *(unsigned char *)(v86 + 360) == 0;
                            float v168 = v295;
                            if (*(unsigned char *)(v86 + 224)) {
                              float v168 = v166 * (float)(*(float *)(v86 + 228) - *(float *)(v86 + 232));
                            }
                            if (v167)
                            {
                              float v169 = *(float *)(v86 + 232);
                            }
                            else
                            {
                              float v169 = *(float *)(v86 + 228);
                              *(float *)(v86 + 232) = v169;
                            }
                            *(float *)(v86 + 228) = v168 + v169;
                            *((float *)&v515 + 1) = v168;
                            if (*(_DWORD *)(v86 + 236) != *(_DWORD *)(v86 + 208))
                            {
                              location[0] = (id)[v308 uuid];
                              re::DynamicArray<unsigned long>::add(v293, location);
                              *(_DWORD *)(v86 + 208) = *(_DWORD *)(v86 + 236);
                            }
                            *(unsigned char *)(v86 + 22re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
                            char v317 = 0;
                            if (*(void *)(v313 + 136)
                              && !*((void *)v321 + 26)
                              && (((v302 ^ 0x180197E) & ~v311 | v302 & v311) & 0x80) != 0)
                            {
                              uint64_t v170 = *(void *)(v313 + 200);
                              *(void *)&v431[0] = 0;
                              *((void *)&v431[0] + 1) = v170;
                              v431[1] = *(_OWORD *)(v313 + 168);
                              int v432 = v306;
                              uint64_t v433 = v321;
                              long long v434 = 0u;
                              long long v435 = 0u;
                              char v436 = 0;
                              long long v437 = 0u;
                              long long v438 = 0u;
                              long long v439 = 0u;
                              long long v440 = 0u;
                              long long v441 = 0u;
                              long long v442 = 0u;
                              long long v443 = 0u;
                              uint64_t v444 = 0;
                              uint64_t v446 = 0;
                              uint64_t v447 = 0;
                              uint64_t v445 = v487;
                              uint64_t v448 = &v500;
                              uint64_t v449 = 0;
                              int v450 = &v474;
                              int v451 = v495;
                              uint64_t v452 = v137;
                              uint64_t v453 = 1065353216;
                              int v454 = v499;
                              __int16 v455 = *(_WORD *)&v498[16];
                              v316[0] = 0;
                              v316[1] = "";
                              uint64_t v456 = v300;
                              v457 = v316;
                              uint64_t v458 = *((void *)v307 + 46);
                              int v459 = (v302 ^ 0x180197E) & ~v311 | v302 & v311;
                              uint64_t v460 = *(void *)v498;
                              char v461 = 0;
                              char v462 = v492;
                              uint64_t v463 = &v493;
                              int v464 = 0;
                              char v465 = 0;
                              char v466 = 0;
                              BOOL v467 = v150;
                              memset(v468, 0, sizeof(v468));
                              __int16 v469 = 1;
                              uint64_t v470 = &v322;
                              uint64_t v171 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v55 + 32))(v55, v304);
                              uint64_t v173 = v171;
                              uint64_t v312 = *(unsigned int *)(v171 + 32);
                              uint64_t v174 = 0;
                              if (v312)
                              {
                                int v175 = (int *)(*(void *)(v171 + 16) + 8);
                                while (1)
                                {
                                  int v176 = *v175;
                                  v175 += 6;
                                  if (v176 < 0) {
                                    break;
                                  }
                                  if (v312 == ++v174)
                                  {
                                    LODWORD(v17re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)(v171 + 32);
                                    break;
                                  }
                                }
                              }
                              if (v312 == v174)
                              {
LABEL_236:
                                re::StringID::destroyString((re::StringID *)v316);
                                goto LABEL_237;
                              }
                              uint64_t v178 = v174;
                              uint64_t v179 = *(void *)(v171 + 16);
                              uint64_t v301 = (void *)(v86 + 256);
                              while (2)
                              {
                                uint64_t v180 = *(void *)(v179 + 24 * v178 + 16);
                                if (!v180)
                                {
                                  re::internal::assertLog((re::internal *)4, v172, "assertion failure: '%s' (%s:line %i) ", "referencingPortalComponent != nullptr", "updateSceneForRenderInternal", 626);
                                  _os_crash();
                                  __break(1u);
LABEL_385:
                                  re::internal::assertLog((re::internal *)4, v33, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneForRenderInternal", 330);
                                  _os_crash();
                                  __break(1u);
LABEL_386:
                                  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 255);
                                  _os_crash();
                                  __break(1u);
                                }
                                (*(void (**)(id *__return_ptr, uint64_t, void))(*(void *)v55 + 8))(location, v55, *(void *)(v180 + 16));
                                if (LOBYTE(location[0])) {
                                  uint64_t v181 = (float32x4_t *)location[1];
                                }
                                else {
                                  uint64_t v181 = 0;
                                }
                                uint64_t v315 = v181;
                                uint64_t v182 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v326, (unint64_t)v181);
                                if (!v182)
                                {
                                  location[1] = 0;
                                  v348.i64[0] = 0;
                                  v348.i32[2] = 0;
                                  v349.i64[0] = 0;
                                  location[0] = v306;
                                  re::DynamicArray<re::VFXScene>::setCapacity(location, 1uLL);
                                  ++v348.i32[2];
                                  uint64_t v182 = re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v326, (uint64_t *)&v315, (uint64_t)location);
                                  re::DynamicArray<re::VFXScene>::deinit((uint64_t)location);
                                }
                                v314[0] = (float32x4_t *)v180;
                                v314[1] = v181;
                                v314[2] = (float32x4_t *)&v317;
                                re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing((unint64_t)v431, v314, (uint64_t)v404);
                                if (v404[0].i8[0])
                                {
                                  int32x4_t v359 = v404[13];
                                  int32x4_t v360 = v404[14];
                                  int32x4_t v361 = v404[15];
                                  int32x4_t v362 = v404[16];
                                  int32x4_t v355 = v404[9];
                                  int32x4_t v356 = v404[10];
                                  int32x4_t v357 = v404[11];
                                  int32x4_t v358 = v404[12];
                                  int32x4_t v351 = v404[5];
                                  int32x4_t v352 = v404[6];
                                  int32x4_t v353 = v404[7];
                                  int32x4_t v354 = v404[8];
                                  *(int32x4_t *)id location = v404[1];
                                  float32x4_t v348 = (float32x4_t)v404[2];
                                  float32x4_t v349 = (float32x4_t)v404[3];
                                  float32x4_t v350 = (float32x4_t)v404[4];
                                  long long v366 = v408;
                                  long long v363 = v405;
                                  long long v364 = v406;
                                  long long v405 = 0u;
                                  long long v406 = 0u;
                                  long long v365 = v407;
                                  long long v408 = 0u;
                                  long long v407 = 0u;
                                  int v367 = v409;
                                  char v368 = v410;
                                  if (v410) {
                                    uint64_t v369 = v411;
                                  }
                                  long long v376 = v418;
                                  long long v377 = v419;
                                  long long v378 = v420;
                                  long long v372 = v414;
                                  long long v373 = v415;
                                  long long v374 = v416;
                                  long long v375 = v417;
                                  long long v370 = v412;
                                  long long v371 = v413;
                                  char v379 = v421;
                                  if (v421)
                                  {
                                    long long v380 = v422;
                                    long long v381 = v423;
                                  }
                                  uint64_t v382 = v424;
                                  char v383 = v425;
                                  if (v425)
                                  {
                                    long long v384 = v426;
                                    long long v385 = v427;
                                    long long v386 = v428;
                                    long long v387 = v429;
                                  }
                                  uint64_t v388 = v430;
                                  uint64_t v389 = v310;
                                  id v183 = (id)(v310 + 8);
                                  id v390 = v308;
                                  int32x4_t v391 = v509;
                                  long long v392 = v510;
                                  long long v393 = v511;
                                  long long v394 = v512;
                                  int32x4_t v395 = v513;
                                  long long v396 = v514;
                                  int v397 = v515;
                                  int v398 = -1082130432;
                                  int v399 = v516;
                                  uint64_t v400 = 0;
                                  char v401 = v518;
                                  __int16 v402 = 0;
                                  char v403 = 0;
                                  re::DynamicArray<re::VFXScene>::add(v182, (long long *)location);

                                  if (v389)
                                  {

                                    uint64_t v389 = 0;
                                  }
                                  if (*((void *)&v366 + 1))
                                  {
                                    if (*((void *)&v363 + 1)) {
                                      *((void *)&v363 + 1) = 0;
                                    }
                                    uint64_t v172 = v363;
                                    if ((void)v363) {
                                      (*(void (**)(void))(**((void **)&v366 + 1) + 40))();
                                    }
                                  }
                                  uint64_t v184 = *(void *)(v180 + 16);
                                  if (v184)
                                  {
                                    uint64_t v185 = *(void *)(v86 + 240);
                                    if (v185 == *(void *)(v184 + 296))
                                    {
                                      uint64_t v186 = *(void *)(v184 + 176);
                                      if (v186)
                                      {
                                        int v303 = *(re::ecs2::TransformHelper **)(v313 + 216);
                                        re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v186, *(const re::ecs2::Entity **)(v186 + 16), 0);
                                        uint64_t v187 = *(void *)(v186 + 288);
                                        if (v187)
                                        {
                                          if (*(void *)(v187 + 104) <= 1uLL)
                                          {
                                            uint64_t v188 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)(v187 + 80), 0);
                                            float32x4_t v189 = vsubq_f32(v188[1], *v188);
                                            v189.i32[3] = 0;
                                            int8x16_t v190 = (int8x16_t)vmaxnmq_f32(v189, (float32x4_t)0);
                                            float v191 = *(float *)&v190.i32[2];
                                            if (*(float *)v190.i32 == 0.0
                                              || *(float *)&v190.i32[1] == 0.0
                                              || *(float *)&v190.i32[2] == 0.0)
                                            {
                                              if (*(float *)&v190.i32[1] != 0.0)
                                              {
                                                if (*(float *)&v190.i32[2] == 0.0) {
                                                  float v191 = *(float *)v190.i32;
                                                }
                                                v192.i64[0] = LODWORD(v191);
                                                v192.i64[1] = __PAIR64__(v190.u32[3], v190.u32[1]);
                                                int8x16_t v190 = v192;
                                              }
                                              float32x2_t v193 = *(float32x2_t *)(v86 + 248);
                                              float32x4_t v194 = *(float32x4_t *)(v180 + 112);
                                              float32x4_t v195 = vmulq_f32(v194, (float32x4_t)xmmword_23435FD50);
                                              float v196 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 2), vaddq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1))).f32[0];
                                              float32x4_t v197 = vmulq_f32(v194, (float32x4_t)xmmword_23435FD60);
                                              BOOL v198 = v196 == 0.0;
                                              float v199 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v197, 2), vaddq_f32(v197, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v197.f32, 1))).f32[0];
                                              float32x4_t v200 = vmulq_f32(v194, (float32x4_t)xmmword_23435FD80);
                                              BOOL v201 = v199 == 0.0;
                                              LODWORD(v202) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v200, 2), vaddq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v200.f32, 1))).u32[0];
                                              BOOL v203 = v199 == 0.0 && v196 == 0.0;
                                              if (v202 != 0.0)
                                              {
                                                BOOL v201 = 0;
                                                BOOL v198 = 0;
                                              }
                                              if (v201 || v198 || v203)
                                              {
                                                long long v342 = xmmword_23435FD50;
                                                long long v343 = xmmword_23435FD60;
                                                long long v344 = xmmword_23435FD80;
                                                long long v345 = xmmword_23435FBB0;
                                                if (v203)
                                                {
                                                  uint64_t v204 = _D10;
                                                  float32x4_t v205 = v284;
                                                  float v206 = vmuls_lane_f32(v205.f32[0], *(float32x2_t *)v205.f32, 1);
                                                  float v207 = vmuls_lane_f32(v205.f32[0], v205, 2);
                                                  int8x16_t v288 = v190;
                                                  __float2 v208 = __sincosf_stret((float)(int)((__PAIR64__(v202 > 0.0, LODWORD(v202))- COERCE_UNSIGNED_INT(0.0)) >> 32)* -1.5708);
                                                  *(float *)&long long v214 = vmuls_lane_f32(v208.__sinval, *(float32x2_t *)v284.f32, 1);
                                                  float v209 = vmuls_lane_f32(v208.__sinval, v284, 2);
                                                  float v210 = -(float)(v209 - (float)(v206 * (float)(1.0 - v208.__cosval)));
                                                  float v211 = v209 + (float)(v206 * (float)(1.0 - v208.__cosval));
                                                  _D10 = v204;
                                                  float v22 = 1.0;
                                                  HIDWORD(v212) = 0;
                                                  *(float *)&long long v212 = v283 + (float)(v208.__cosval * (float)(1.0 - v283));
                                                  *((float *)&v212 + 1) = v211;
                                                  *((float *)&v212 + 2) = -(float)(*(float *)&v214
                                                                                 - (float)(v207
                                                                                         * (float)(1.0 - v208.__cosval)));
                                                  HIDWORD(v213) = 0;
                                                  *(float *)&long long v213 = v210;
                                                  *((float *)&v213 + 1) = v282
                                                                        + (float)(v208.__cosval * (float)(1.0 - v282));
                                                  *((float *)&v213 + 2) = (float)(v208.__sinval * v284.f32[0])
                                                                        + (float)(v280 * (float)(1.0 - v208.__cosval));
                                                  HIDWORD(v21re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
                                                  *(float *)&long long v214 = *(float *)&v214
                                                                  + (float)(v207 * (float)(1.0 - v208.__cosval));
                                                  *((float *)&v214 + 1) = -(float)((float)(v208.__sinval * v284.f32[0])
                                                                                 - (float)(v280
                                                                                         * (float)(1.0 - v208.__cosval)));
                                                  float v215 = v281 + (float)(v208.__cosval * (float)(1.0 - v281));
                                                  int8x16_t v190 = v288;
                                                  goto LABEL_310;
                                                }
                                                if (v198)
                                                {
                                                  float32x4_t v276 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v279);
                                                  uint64_t v277 = _D10;
                                                  uint64_t v278 = v14;
                                                  float v218 = vmuls_lane_f32(v276.f32[1], *(float32x2_t *)v276.f32, 1);
                                                  float v219 = vmuls_lane_f32(v276.f32[2], v276, 2);
                                                  float v220 = vmuls_lane_f32(v276.f32[0], *(float32x2_t *)v276.f32, 1);
                                                  float v221 = vmuls_lane_f32(v276.f32[0], v276, 2);
                                                  float v222 = vmuls_lane_f32(v276.f32[1], v276, 2);
                                                  int8x16_t v289 = v190;
                                                  __float2 v223 = __sincosf_stret((float)(int)((__PAIR64__(v199 > 0.0, LODWORD(v199))- COERCE_UNSIGNED_INT(0.0)) >> 32)* -3.1416);
                                                  float v224 = vmulq_f32(v276, v276).f32[0];
                                                  *(float *)&long long v214 = vmuls_lane_f32(v223.__sinval, *(float32x2_t *)v276.f32, 1);
                                                  float v225 = vmuls_lane_f32(v223.__sinval, v276, 2);
                                                  *(float *)&unsigned int v226 = *(float *)&v214
                                                                  + (float)(v221 * (float)(1.0 - v223.__cosval));
                                                  float v227 = v218 + (float)(v223.__cosval * (float)(1.0 - v218));
                                                  *(float *)&unsigned int v228 = -(float)((float)(v223.__sinval * v276.f32[0])
                                                                           - (float)(v222 * (float)(1.0 - v223.__cosval)));
                                                  *(float *)&long long v214 = -(float)(*(float *)&v214
                                                                           - (float)(v221 * (float)(1.0 - v223.__cosval)));
                                                  float v22 = 1.0;
                                                  *(float *)&long long v212 = v224 + (float)(v223.__cosval * (float)(1.0 - v224));
                                                  *(float *)&unsigned int v229 = (float)(v223.__sinval * v276.f32[0])
                                                                  + (float)(v222 * (float)(1.0 - v223.__cosval));
                                                  int8x16_t v190 = v289;
                                                  _D10 = v277;
                                                  uint64_t v14 = v278;
                                                  *((float *)&v212 + 1) = v225
                                                                        + (float)(v220 * (float)(1.0 - v223.__cosval));
                                                  *((void *)&v212 + 1) = v214;
                                                  *(float *)&long long v213 = -(float)(v225
                                                                           - (float)(v220 * (float)(1.0 - v223.__cosval)));
                                                  *((float *)&v213 + 1) = v227;
                                                  *((void *)&v213 + 1) = v229;
                                                  HIDWORD(v21re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
                                                  *(void *)&long long v214 = __PAIR64__(v228, v226);
                                                  float v215 = v219 + (float)(v223.__cosval * (float)(1.0 - v219));
LABEL_310:
                                                  *((float *)&v214 + 2) = v215;
                                                  long long v342 = v212;
                                                  long long v343 = v213;
                                                  long long v344 = v214;
                                                }
                                                else if (v201)
                                                {
                                                  location[0] = 0;
                                                  location[1] = (id)1065353216;
                                                  int8x16_t v291 = v190;
                                                  re::Matrix4x4<float>::makeRotation((float32x4_t *)location, &v342, (float)(int)((__PAIR64__(v196 > 0.0, LODWORD(v196))- COERCE_UNSIGNED_INT(0.0)) >> 32)* 1.5708);
                                                  int8x16_t v190 = v291;
                                                }
                                                int32x4_t v230 = (int32x4_t)vextq_s8(v190, v190, 8uLL);
                                                *(float32x2_t *)v230.i8 = vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v190.i8, *(int32x2_t *)v230.i8), v193);
                                                float32x4_t v290 = (float32x4_t)vtrn2q_s32(vrev64q_s32(vzip1q_s32(v230, v230)), (int32x4_t)v190);
                                                re::ecs2::TransformHelper::computeWorldMatrixForRendering(v303, *(re::ecs2::TransformComponent ***)(v180 + 16), v341);
                                                unint64_t v231 = 0;
                                                float32x4_t v232 = (float32x4_t)v341[0];
                                                float32x4_t v233 = (float32x4_t)v341[1];
                                                float32x4_t v234 = (float32x4_t)v341[2];
                                                float32x4_t v235 = (float32x4_t)v341[3];
                                                v346[0] = v342;
                                                v346[1] = v343;
                                                v346[2] = v344;
                                                v346[3] = v345;
                                                do
                                                {
                                                  *(float32x4_t *)&location[v231 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v232, COERCE_FLOAT(v346[v231 / 0x10])), v233, *(float32x2_t *)&v346[v231 / 0x10], 1), v234, (float32x4_t)v346[v231 / 0x10], 2), v235, (float32x4_t)v346[v231 / 0x10], 3);
                                                  v231 += 16;
                                                }
                                                while (v231 != 64);
                                                id v236 = location[0];
                                                double v237 = *(double *)v348.i64;
                                                double v238 = *(double *)v349.i64;
                                                double v239 = *(double *)v350.i64;
                                                long long v342 = *(_OWORD *)location;
                                                long long v343 = (__int128)v348;
                                                long long v344 = (__int128)v349;
                                                long long v345 = (__int128)v350;
                                                if (*v301 == *(void *)(v184 + 296))
                                                {
                                                  uint32x4_t v240 = (uint32x4_t)vceqq_f32(*(float32x4_t *)(v86 + 272), v290);
                                                  v240.i32[3] = v240.i32[2];
                                                  if ((vminvq_u32(v240) & 0x80000000) == 0
                                                    || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 304), v348), (int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 288), *(float32x4_t *)location)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 320), v349), (int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 336), v350)))) & 0x80000000) == 0)
                                                  {
                                                    re::ecs2::VFXSceneComponent::updateCollisionPlane(v86, *(void *)(v86 + 264), *(double *)v290.i64, *(double *)location, *(double *)v348.i64, *(double *)v349.i64, *(double *)v350.i64);
                                                    goto LABEL_322;
                                                  }
                                                }
                                                else
                                                {
                                                  uint64_t v241 = *(void *)(v86 + 264);
                                                  if (v241)
                                                  {
                                                    re::ecs2::VFXSceneComponent::removeCollisionPlane((id *)v86, v241);
                                                    id v236 = (id)v342;
                                                    double v237 = *(double *)&v343;
                                                    double v238 = *(double *)&v344;
                                                    double v239 = *(double *)&v345;
                                                  }
                                                  id v242 = re::ecs2::VFXSceneComponent::addCollisionPlane(v86, *(double *)v290.i64, *(double *)&v236, v237, v238, v239);
                                                  *(void *)(v86 + 26re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v242;
                                                  id v243 = *(id *)(v86 + 48);
                                                  if (v243) {
                                                    [v243 collideOutsidePlaneWithId:v242];
                                                  }
                                                  *uint64_t v301 = *(void *)(v184 + 296);
LABEL_322:
                                                  *(float32x4_t *)(v86 + 272) = v290;
                                                  long long v244 = v343;
                                                  *(_OWORD *)(v86 + 288) = v342;
                                                  *(_OWORD *)(v86 + 30re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v244;
                                                  long long v245 = v345;
                                                  *(_OWORD *)(v86 + 320) = v344;
                                                  *(_OWORD *)(v86 + 336) = v245;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else if (!v185)
                                    {
                                      uint64_t v172 = *(void *)(v86 + 264);
                                      if (v172)
                                      {
                                        re::ecs2::VFXSceneComponent::removeCollisionPlane((id *)v86, v172);
                                        *(_OWORD *)uint64_t v301 = 0u;
                                        *(_OWORD *)(v86 + 272) = 0u;
                                        *(_OWORD *)(v86 + 288) = xmmword_23435FD50;
                                        *(_OWORD *)(v86 + 30re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = xmmword_23435FD60;
                                        *(_OWORD *)(v86 + 320) = xmmword_23435FD80;
                                        *(_OWORD *)(v86 + 336) = xmmword_23435FBB0;
                                      }
                                    }
                                  }
                                  if (v404[0].i8[0] && *((void *)&v408 + 1))
                                  {
                                    if (*((void *)&v405 + 1)) {
                                      *((void *)&v405 + 1) = 0;
                                    }
                                    uint64_t v172 = v405;
                                    if ((void)v405) {
                                      (*(void (**)(void))(**((void **)&v408 + 1) + 40))();
                                    }
                                  }
                                }
                                uint64_t v179 = *(void *)(v173 + 16);
                                if (*(_DWORD *)(v173 + 32) <= (v174 + 1)) {
                                  int v216 = v174 + 1;
                                }
                                else {
                                  int v216 = *(_DWORD *)(v173 + 32);
                                }
                                while (1)
                                {
                                  uint64_t v178 = (v174 + 1);
                                  if (v216 - 1 == v174) {
                                    break;
                                  }
                                  LODWORD(v17re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v174 + 1;
                                  int v217 = v178;
                                  if ((*(_DWORD *)(v179 + 24 * v178 + 8) & 0x80000000) != 0) {
                                    goto LABEL_306;
                                  }
                                }
                                int v217 = v216;
LABEL_306:
                                LODWORD(v17re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v217;
                                if (v312 == v217) {
                                  goto LABEL_236;
                                }
                                continue;
                              }
                            }
LABEL_237:
                            uint64_t v177 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v326, v304);
                            re::DynamicArray<re::VFXScene>::add(v177, (long long *)&v471);

                            if (v507)
                            {

                              uint64_t v507 = 0;
                            }
                            if (v490[2])
                            {
                              if ((void)v488) {
                                *(void *)&long long v488 = 0;
                              }
                              if (*((void *)&v487 + 1)) {
                                (*(void (**)(void))(*(void *)v490[2] + 40))();
                              }
                            }
                          }
                        }
LABEL_245:
                        v62 += 2;
                        if (v62 == v305) {
                          goto LABEL_330;
                        }
                        continue;
                      }
                      long long v101 = *re::ecsComponentsLogObjects(0);
                      if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_129;
                      }
                    }
                    else
                    {
                      long long v101 = *re::ecsComponentsLogObjects(0);
                      if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_129;
                      }
                    }
                    break;
                  }
                  LOWORD(location[0]) = 0;
                  _os_log_error_impl(&dword_233120000, v101, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", (uint8_t *)location, 2u);
                  goto LABEL_129;
                }
LABEL_330:
                unsigned int v248 = v328;
                if (v328)
                {
                  uint64_t v249 = 0;
                  uint64_t v250 = (int *)(v327 + 8);
                  uint64_t v6 = v313;
                  while (1)
                  {
                    int v251 = *v250;
                    v250 += 16;
                    if (v251 < 0) {
                      break;
                    }
                    if (v328 == ++v249)
                    {
                      LODWORD(v249) = v328;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v249) = 0;
                  uint64_t v6 = v313;
                }
                if (v328 != v249)
                {
                  uint64_t v252 = v249;
                  uint64_t v253 = v327;
                  unsigned int v254 = v328;
                  do
                  {
                    uint64_t v255 = v253 + (v252 << 6);
                    re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v309, *(const re::ecs2::Scene **)(v255 + 16), (re::DynamicString **)v307, &v471);
                    if (*(void *)(v255 + 40))
                    {
                      location[0] = (id)(v471.n128_u64[0] >> 1);
                      uint64_t v256 = **(void **)(re::RenderFrameData::stream((re::RenderFrame *)((char *)v307 + 264), (const re::WeakStringID *)location)+ 48);
                      (*(void (**)(void))(v256 + 744))();
                      unsigned int v254 = v328;
                      uint64_t v253 = v327;
                    }
                    re::StringID::destroyString((re::StringID *)&v471);
                    if (v254 <= (int)v249 + 1) {
                      unsigned int v257 = v249 + 1;
                    }
                    else {
                      unsigned int v257 = v254;
                    }
                    while (1)
                    {
                      uint64_t v252 = (v249 + 1);
                      if (v257 - 1 == v249) {
                        break;
                      }
                      LODWORD(v249) = v249 + 1;
                      unsigned int v258 = v252;
                      if ((*(_DWORD *)(v253 + (v252 << 6) + 8) & 0x80000000) != 0) {
                        goto LABEL_347;
                      }
                    }
                    unsigned int v258 = v257;
LABEL_347:
                    LODWORD(v249) = v258;
                  }
                  while (v248 != v258);
                }
                unsigned int v259 = v324;
                if (v324)
                {
                  uint64_t v260 = 0;
                  uint64_t v261 = (int *)(v323 + 8);
                  while (1)
                  {
                    int v262 = *v261;
                    v261 += 18;
                    if (v262 < 0) {
                      break;
                    }
                    if (v324 == ++v260)
                    {
                      LODWORD(v260) = v324;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v260) = 0;
                }
                if (v324 != v260)
                {
                  uint64_t v263 = v260;
                  uint64_t v264 = v323;
                  unsigned int v265 = v324;
                  do
                  {
                    uint64_t v266 = v264 + 72 * v263;
                    if (*(_DWORD *)(v266 + 52))
                    {
                      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v309, *(const re::ecs2::Scene **)(v264 + 72 * v263 + 16), (re::DynamicString **)v307, &v471);
                      uint64_t v267 = *(void *)(v6 + 200);
                      if (v267) {
                        (*(void (**)(uint64_t, __n128 *, void, uint64_t))(*(void *)v267 + 32))(v267, &v471, *((void *)v307 + 46), v266 + 24);
                      }
                      re::StringID::destroyString((re::StringID *)&v471);
                      unsigned int v265 = v324;
                      uint64_t v264 = v323;
                    }
                    if (v265 <= (int)v260 + 1) {
                      unsigned int v268 = v260 + 1;
                    }
                    else {
                      unsigned int v268 = v265;
                    }
                    while (1)
                    {
                      uint64_t v263 = (v260 + 1);
                      if (v268 - 1 == v260) {
                        break;
                      }
                      LODWORD(v260) = v260 + 1;
                      unsigned int v269 = v263;
                      if ((*(_DWORD *)(v264 + 72 * v263 + 8) & 0x80000000) != 0) {
                        goto LABEL_367;
                      }
                    }
                    unsigned int v269 = v268;
LABEL_367:
                    LODWORD(v260) = v269;
                  }
                  while (v259 != v269);
                }
                re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v322);
                re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v326);
                re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v330);
                if (v292)
                {
                  if (*(void *)(v292 + 152))
                  {
                    uint64_t v270 = mach_absolute_time();
                    long long v271 = *(int64x2_t **)(v292 + 152);
                    if (v271)
                    {
                      uint64_t v272 = v271[524].u64[0];
                      if (v272 >= v270 - v286) {
                        uint64_t v272 = v270 - v286;
                      }
                      v271[524].i64[0] = v272;
                      uint64_t v273 = v271[524].u64[1];
                      if (v273 <= v270 - v286) {
                        uint64_t v273 = v270 - v286;
                      }
                      v271[524].i64[1] = v273;
                      int64x2_t v274 = vdupq_n_s64(1uLL);
                      v274.i64[0] = v270 - v286;
                      v271[525] = vaddq_s64(v271[525], v274);
                      *(unsigned char *)(v292 + 18re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
                    }
                  }
                }
              }
              if (v333[0])
              {
                if (v336) {
                  (*(void (**)(void))(*(void *)v333[0] + 40))();
                }
              }
              uint64_t v13 = v297;
            }
            ++v13;
          }
          while (v13 != (re::ecs2::RenderingSubsystem **)v294);
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v6 + 224));
      }
    }
  }
}

__n128 re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(a1 + 32) + 16 * v5) = *a2;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<int>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

unint64_t re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 6) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 72 * v10;
  return v12 + 24;
}

unint64_t re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags(re::HierarchicalMeshOverrideFlags *this)
{
  uint64_t v1 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    unsigned int v2 = *((unsigned __int8 *)this + 1);
    uint64_t v1 = 1;
  }
  else
  {
    unsigned int v2 = 0;
  }
  if (*((unsigned char *)this + 6))
  {
    v2 |= 2u;
  }
  else if (*((unsigned char *)this + 2))
  {
    v2 |= 2 * (*((unsigned char *)this + 3) == 1);
    uint64_t v1 = v1 | 2;
  }
  if (*((unsigned char *)this + 10))
  {
    unsigned int v2 = v2 & 0xFFFFFFFB | (4 * *((unsigned __int8 *)this + 11));
    uint64_t v1 = v1 | 4;
  }
  if (*((unsigned char *)this + 12))
  {
    unsigned int v2 = v2 & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)this + 13));
    uint64_t v1 = v1 | 8;
  }
  if (*((unsigned char *)this + 14))
  {
    unsigned int v2 = v2 & 0xFFFFFFEF | (16 * *((unsigned __int8 *)this + 15));
    uint64_t v1 = v1 | 0x10;
  }
  if (*((unsigned char *)this + 16))
  {
    unsigned int v2 = v2 & 0xFFFFFF7F | (*((unsigned __int8 *)this + 17) << 7);
    uint64_t v1 = v1 | 0x80;
  }
  if (*((unsigned char *)this + 18))
  {
    int v3 = *((__int16 *)this + 10);
    if (v3 >= 3) {
      int v3 = 3;
    }
    if (v3 <= -3) {
      int v3 = -3;
    }
    int v4 = v3 ^ (v3 >> 15);
    unsigned int v5 = v4 & 0x80000001;
    BOOL v6 = (v4 & 0x80000001) == 1;
    BOOL v7 = (v4 & 0xFFFFFFFE) == 2;
    int v8 = v7;
    int v9 = !v7;
    BOOL v10 = v5 != 1;
    if (v3 < 0) {
      int v8 = v9;
    }
    else {
      BOOL v10 = v6;
    }
    unsigned int v11 = v2 & 0xFFFFF8FF | v3 & 0x100;
    if (v10) {
      int v12 = 512;
    }
    else {
      int v12 = 0;
    }
    int v13 = v11 | v12;
    if (v8) {
      int v14 = 1024;
    }
    else {
      int v14 = 0;
    }
    unsigned int v2 = v13 | v14;
    uint64_t v1 = v1 | 0x700;
  }
  if (*((unsigned char *)this + 4))
  {
    unsigned int v2 = v2 & 0xFFF9FFFF | ((*((unsigned char *)this + 5) & 3) << 17);
    uint64_t v1 = v1 | 0x60000;
  }
  return v2 | (unint64_t)(v1 << 32);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 40 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 40 * v4 + 16) == v2) {
        return v6 + 40 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 40 * v4 + 24;
}

__n128 re::DynamicArray<re::VFXScene>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::VFXScene>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::VFXScene>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = v11 + 800 * v5;
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[3];
  *(_OWORD *)(v12 + 32) = a2[2];
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  long long v16 = a2[4];
  long long v17 = a2[5];
  long long v18 = a2[7];
  *(_OWORD *)(v12 + 96) = a2[6];
  *(_OWORD *)(v12 + 112) = v18;
  *(_OWORD *)(v12 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v16;
  *(_OWORD *)(v12 + 80) = v17;
  long long v19 = a2[8];
  long long v20 = a2[9];
  long long v21 = a2[11];
  *(_OWORD *)(v12 + 160) = a2[10];
  *(_OWORD *)(v12 + 176) = v21;
  *(_OWORD *)(v12 + 128) = v19;
  *(_OWORD *)(v12 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v20;
  long long v22 = a2[12];
  long long v23 = a2[13];
  long long v24 = a2[15];
  *(_OWORD *)(v12 + 22re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = a2[14];
  *(_OWORD *)(v12 + 240) = v24;
  *(_OWORD *)(v12 + 192) = v22;
  *(_OWORD *)(v12 + 208) = v23;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 30re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v12 + 256), (uint64_t *)a2 + 32);
  *(_DWORD *)(v12 + 320) = *((_DWORD *)a2 + 80);
  int v25 = *((unsigned __int8 *)a2 + 328);
  *(unsigned char *)(v12 + 328) = v25;
  if (v25) {
    *(void *)(v12 + 336) = *((void *)a2 + 42);
  }
  *(_OWORD *)(v12 + 34re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(long long *)((char *)a2 + 344);
  long long v26 = *(long long *)((char *)a2 + 360);
  long long v27 = *(long long *)((char *)a2 + 376);
  long long v28 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(v12 + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(v12 + 408) = v28;
  *(_OWORD *)(v12 + 360) = v26;
  *(_OWORD *)(v12 + 376) = v27;
  long long v29 = *(long long *)((char *)a2 + 424);
  long long v30 = *(long long *)((char *)a2 + 440);
  long long v31 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(v12 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(v12 + 472) = v31;
  *(_OWORD *)(v12 + 42re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v29;
  *(_OWORD *)(v12 + 440) = v30;
  int v32 = *((unsigned __int8 *)a2 + 496);
  *(unsigned char *)(v12 + 496) = v32;
  if (v32)
  {
    long long v33 = a2[33];
    *(_OWORD *)(v12 + 512) = a2[32];
    *(_OWORD *)(v12 + 528) = v33;
  }
  *(void *)(v12 + 54re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *((void *)a2 + 68);
  int v34 = *((unsigned __int8 *)a2 + 560);
  *(unsigned char *)(v12 + 560) = v34;
  if (v34)
  {
    long long v35 = a2[36];
    long long v36 = a2[37];
    long long v37 = a2[39];
    *(_OWORD *)(v12 + 608) = a2[38];
    *(_OWORD *)(v12 + 62re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v37;
    *(_OWORD *)(v12 + 576) = v35;
    *(_OWORD *)(v12 + 592) = v36;
  }
  *(void *)(v12 + 640) = *((void *)a2 + 80);
  uint64_t v38 = v11 + 800 * v5;
  *(void *)(v38 + 656) = *((void *)a2 + 82);
  uint64_t v39 = *((void *)a2 + 83);
  a2[41] = 0u;
  *(void *)(v38 + 66re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v39;
  long long v40 = a2[42];
  long long v41 = a2[43];
  long long v42 = a2[45];
  *(_OWORD *)(v38 + 70re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = a2[44];
  *(_OWORD *)(v38 + 720) = v42;
  *(_OWORD *)(v38 + 672) = v40;
  *(_OWORD *)(v38 + 688) = v41;
  __n128 result = (__n128)a2[46];
  long long v44 = a2[47];
  long long v45 = a2[48];
  *(_OWORD *)(v38 + 780) = *(long long *)((char *)a2 + 780);
  *(_OWORD *)(v38 + 752) = v44;
  *(_OWORD *)(v38 + 768) = v45;
  *(__n128 *)(v38 + 736) = result;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::VFXScene>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::TextureTable::setTexture(void *a1, uint64_t *a2, id *a3)
{
  if (*a3) {
    id v6 = objc_msgSend(*a3, sel_protectionOptions);
  }
  else {
    id v6 = 0;
  }
  uint64_t v7 = *a2;
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::setTexture(a1, &v7, a3, (uint64_t)v6);
}

double re::ecs2::VFXSceneComponent::VFXSceneComponent(re::ecs2::VFXSceneComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E25F8;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(void *)(v1 + 100) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(v1 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 208) = 0;
  *(_WORD *)(v1 + 212) = 0;
  *(void *)(v1 + 216) = 0;
  *(unsigned char *)(v1 + 22re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(_OWORD *)(v1 + 24re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v1 + 228) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 260) = 0u;
  *(_OWORD *)(v1 + 30re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 320) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 336) = xmmword_23435FBB0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 352) = result;
  *(unsigned char *)(v1 + 360) = 0;
  return result;
}

void re::ecs2::VFXSceneComponent::~VFXSceneComponent(re::ecs2::VFXSceneComponent *this)
{
  *(void *)this = &unk_26E6E25F8;
  re::ecs2::VFXSceneComponent::clearBindings(this);
  uint64_t v2 = *((void *)this + 27);
  if (v2)
  {

    *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = 0;
  }
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 20);
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 8);

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VFXSceneComponent::~VFXSceneComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::VFXSceneComponent::clearBindings(re::ecs2::VFXSceneComponent *this)
{
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear((uint64_t)this + 64);
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 112);
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v3 = *((void *)this + 27);
  if (v3) {
LABEL_3:
  }
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear(v3 + 32);
LABEL_4:
  uint64_t v4 = *((unsigned int *)this + 48);
  if (v4)
  {
    uint64_t v5 = 0;
    id v6 = (int *)(*((void *)this + 22) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 12;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  unsigned int v8 = *((_DWORD *)this + 48);
  if (v4 != v5)
  {
    uint64_t v9 = v5;
    do
    {
      CFRelease(*(CFTypeRef *)(*((void *)this + 22) + 48 * v9 + 40));
      unsigned int v8 = *((_DWORD *)this + 48);
      if (v8 <= (int)v5 + 1) {
        int v10 = v5 + 1;
      }
      else {
        int v10 = *((_DWORD *)this + 48);
      }
      int v11 = v5;
      while (1)
      {
        uint64_t v9 = (v11 + 1);
        if (v10 - 1 == v11) {
          break;
        }
        ++v11;
        LODWORD(v5) = v9;
        if ((*(_DWORD *)(*((void *)this + 22) + 48 * v9 + 8) & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      LODWORD(v5) = v10;
LABEL_22:
      ;
    }
    while (v4 != v5);
  }
  if (*((_DWORD *)this + 47))
  {
    uint64_t v12 = *((unsigned int *)this + 46);
    if (v12)
    {
      memset_pattern16(*((void **)this + 21), &unk_2343655D0, 4 * v12);
      unsigned int v8 = *((_DWORD *)this + 48);
    }
    if (v8)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 48 * v8;
      do
      {
        uint64_t v15 = *((void *)this + 22) + v13;
        int v16 = *(_DWORD *)(v15 + 8);
        if (v16 < 0) {
          *(_DWORD *)(v15 + 8) = v16 & 0x7FFFFFFF;
        }
        v13 += 48;
      }
      while (v14 != v13);
    }
    *((_DWORD *)this + 47) = 0;
    *((_DWORD *)this + 48) = 0;
    int v17 = *((_DWORD *)this + 50) + 1;
    *((_DWORD *)this + 49) = 0x7FFFFFFF;
    *((_DWORD *)this + 50) = v17;
  }
}

void re::ecs2::VFXSceneComponent::createDetachedSceneComponent(void *a1@<X8>)
{
  uint64_t v3 = (re::ecs2::VFXSceneComponent *)(*(uint64_t (**)(void, uint64_t, void))(**((void **)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                            + 7)
                                                                                         + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 368, 0);
  double v4 = re::ecs2::VFXSceneComponent::VFXSceneComponent(v3);
  *a1 = v5;
  id v6 = (ArcSharedObject *)(*(uint64_t (**)(void, uint64_t, void, double))(**((void **)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                        + 7)
                                                                                     + 32))(*((void *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 96, 0, v4);
  ArcSharedObject::ArcSharedObject(v6, 0);
  *(void *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v7 = &unk_26E6E2900;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  uint64_t v8 = *((void *)v3 + 27);
  *((void *)v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = v7;
  if (v8)
  {
  }
}

void re::ecs2::VFXSceneComponent::setVFX(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 216);
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v8, a2);
  long long v6 = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(v5 + 72) = v8;
  long long v8 = v6;
  uint64_t v7 = *(void *)(v5 + 88);
  *(void *)(v5 + 88) = v9;
  uint64_t v9 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v5);
  *(unsigned char *)(a1 + 213) = 0;
  re::ecs2::VFXSceneComponent::loadModelBindingStates((_anonymous_namespace_ **)a1);
  *(unsigned char *)(a1 + 213) = 1;
}

void re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork(re::ecs2::VFXSceneMetadataComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(v1 + 200);
    if (v3)
    {
      re::ecs2::NetworkComponent::markDirty(v3, this);
    }
  }
}

void re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 216);
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v8, a2);
  long long v6 = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(v5 + 72) = v8;
  long long v8 = v6;
  uint64_t v7 = *(void *)(v5 + 88);
  *(void *)(v5 + 88) = v9;
  uint64_t v9 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v5);
  *(unsigned char *)(a1 + 213) = 0;
}

void re::ecs2::VFXSceneComponent::loadModelBindingStates(_anonymous_namespace_ **this)
{
  re::ecs2::VFXSceneComponent::modelScene((re::ecs2::VFXSceneComponent *)this, &v59);
  uint64_t v2 = [v59 scene];

  if (!v2) {
    goto LABEL_54;
  }
  uint64_t v4 = this[2];
  if (v4)
  {
    uint64_t v3 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((_anonymous_namespace_ *)((char *)v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v5 = v3;
    if (!v3) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v5 = this[27];
    if (!v5)
    {
LABEL_54:

      return;
    }
  }
  unint64_t v6 = *((unsigned int *)this + 35);
  uint64_t v74 = 0;
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  int v73 = 0;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v70, v6);
  int v8 = ++v73;
  signed int v9 = *((_DWORD *)this + 35);
  int v10 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  unint64_t v11 = 245;
  do
  {
    unint64_t v12 = v11 >> 1;
    uint64_t v13 = &v10[v11 >> 1];
    signed int v15 = *v13;
    uint64_t v14 = v13 + 1;
    v11 += ~(v11 >> 1);
    if (v15 < v9) {
      int v10 = v14;
    }
    else {
      unint64_t v11 = v12;
    }
  }
  while (v11);
  unint64_t v16 = *v10;
  uint64_t v17 = (4 * v16 + 15) & 0x7FFFFFFF0;
  if (__b)
  {
    if (v16) {
      memset_pattern16(__b, &unk_2343655D0, 4 * v16);
    }
    unint64_t v55 = v16;
    uint64_t v58 = *((unsigned int *)this + 36);
    uint64_t v54 = v2;
    uint64_t v19 = 0;
    if (v58)
    {
      long long v20 = (int *)((char *)this[16] + 8);
      while (1)
      {
        int v21 = *v20;
        v20 += 22;
        if (v21 < 0) {
          break;
        }
        if (v58 == ++v19)
        {
          LODWORD(v19) = *((_DWORD *)this + 36);
          break;
        }
      }
    }
    uint64_t v56 = v5;
    long long v22 = &__b[v17];
    if (v58 == v19)
    {
      uint64_t v23 = v74;
      unint64_t v24 = v72;
    }
    else
    {
      uint64_t v35 = v19;
      unint64_t v24 = v72;
      do
      {
        uint64_t v36 = (uint64_t)this[16] + 88 * v35;
        uint64_t v38 = *(void **)(v36 + 16);
        uint64_t v37 = v36 + 16;
        int v39 = *(_DWORD *)(v37 + 8);
        id v59 = v38;
        int v60 = v39;
        long long v40 = (_anonymous_namespace_ *)re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v61, (uint64_t *)(v37 + 16));
        *(_OWORD *)&v64[8] = *(_OWORD *)(v37 + 56);
        if (v24 >= v71)
        {
          if (v71 < v24 + 1)
          {
            if (v70)
            {
              unint64_t v41 = 8;
              if (v71) {
                unint64_t v41 = 2 * v71;
              }
              if (v41 <= v24 + 1) {
                unint64_t v42 = v24 + 1;
              }
              else {
                unint64_t v42 = v41;
              }
              re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v70, v42);
              int v8 = v73;
            }
            else
            {
              re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v70, v24 + 1);
              int v8 = v73 + 1;
            }
          }
          unint64_t v24 = v72;
        }
        uint64_t v23 = v74;
        uint64_t v43 = v74 + 72 * v24;
        *(void *)uint64_t v43 = v59;
        *(_DWORD *)(v43 + 8) = v60;
        *(void *)(v43 + 48) = 0;
        *(void *)(v43 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
        *(void *)(v43 + 32) = 0;
        *(void *)(v43 + 16) = 0;
        *(_DWORD *)(v43 + 40) = 0;
        *(void *)(v43 + 16) = v61;
        uint64_t v61 = 0;
        *(void *)(v43 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v62;
        uint64_t v62 = 0;
        uint64_t v44 = *(void *)(v43 + 32);
        *(void *)(v43 + 32) = v63;
        *(void *)&long long v63 = v44;
        uint64_t v45 = *(void *)(v43 + 48);
        *(void *)(v43 + 48) = *(void *)v64;
        *(void *)id v64 = v45;
        ++DWORD2(v63);
        ++*(_DWORD *)(v43 + 40);
        *(_OWORD *)(v43 + 56) = *(_OWORD *)&v64[8];
        unint64_t v72 = ++v24;
        int v73 = ++v8;
        if (v61 && *(void *)v64) {
          (*(void (**)(void))(*(void *)v61 + 40))();
        }
        Descriptor = (_OWORD *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(v56, *(_DWORD *)(v37 + 8));
        re::DynamicString::DynamicString((re::DynamicString *)&v59, (const re::DynamicString *)Descriptor);
        re::DynamicString::DynamicString((re::DynamicString *)&v63, (const re::DynamicString *)(Descriptor + 2));
        re::DynamicString::DynamicString((re::DynamicString *)&v64[16], (const re::DynamicString *)(Descriptor + 4));
        re::DynamicString::DynamicString((re::DynamicString *)&v66, (const re::DynamicString *)(Descriptor + 6));
        long long v47 = Descriptor[9];
        long long v68 = Descriptor[8];
        long long v69 = v47;
        unint64_t v48 = 0xBF58476D1CE4E5B9 * (*(void *)v37 ^ (*(void *)v37 >> 30));
        uint64_t v49 = *(unsigned int *)&__b[4
                                  * (((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v48 ^ (v48 >> 27))) >> 31))
                                   % v55)];
        if (v49 == 0x7FFFFFFF)
        {
          uint64_t v49 = 0x7FFFFFFFLL;
        }
        else
        {
          uint64_t v52 = *(void *)&v22[32 * v49 + 16];
          for (uint64_t i = v49; v52 != *(void *)v37; v49 = i)
          {
            uint64_t i = *(_DWORD *)&v22[32 * i + 8] & 0x7FFFFFFF;
            uint64_t v49 = 0x7FFFFFFFLL;
            if (i == 0x7FFFFFFF) {
              break;
            }
            uint64_t v52 = *(void *)&v22[32 * i + 16];
          }
        }
        *(void *)&v22[32 * v49 + 24] = v68;
        if ((void)v66)
        {
          if (BYTE8(v66)) {
            (*(void (**)(void))(*(void *)v66 + 40))();
          }
          long long v66 = 0u;
          long long v67 = 0u;
        }
        if (*(void *)&v64[16])
        {
          if (v64[24]) {
            (*(void (**)(void))(**(void **)&v64[16] + 40))();
          }
          *(_OWORD *)&v64[16] = 0u;
          long long v65 = 0u;
        }
        if ((void)v63)
        {
          if (BYTE8(v63)) {
            (*(void (**)(void))(*(void *)v63 + 40))();
          }
          long long v63 = 0u;
          *(_OWORD *)id v64 = 0u;
        }
        if (v59 && (v60 & 1) != 0) {
          (*(void (**)(void))(*(void *)v59 + 40))();
        }
        if (*((_DWORD *)this + 36) <= (v19 + 1)) {
          int v50 = v19 + 1;
        }
        else {
          int v50 = *((_DWORD *)this + 36);
        }
        while (1)
        {
          uint64_t v35 = (v19 + 1);
          if (v50 - 1 == v19) {
            break;
          }
          LODWORD(v19) = v19 + 1;
          int v51 = v35;
          if ((*((_DWORD *)this[16] + 22 * v35 + 2) & 0x80000000) != 0) {
            goto LABEL_94;
          }
        }
        int v51 = v50;
LABEL_94:
        LODWORD(v19) = v51;
      }
      while (v58 != v51);
    }
    re::ecs2::VFXSceneComponent::clearBindings((re::ecs2::VFXSceneComponent *)this);
    re::ecs2::VFXSceneComponent::initializeBindings((re::ecs2::VFXSceneComponent *)this);
    if (v24)
    {
      uint64_t v25 = v23 + 72 * v24;
      do
      {
        if (*(_DWORD *)(v23 + 56))
        {
          long long v26 = (int *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)(this + 14), (uint64_t *)v23);
          if (v26)
          {
            long long v27 = v26;
            long long v28 = (_OWORD *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(v56, *v26);
            re::DynamicString::DynamicString((re::DynamicString *)&v59, (const re::DynamicString *)v28);
            re::DynamicString::DynamicString((re::DynamicString *)&v63, (const re::DynamicString *)(v28 + 2));
            re::DynamicString::DynamicString((re::DynamicString *)&v64[16], (const re::DynamicString *)(v28 + 4));
            re::DynamicString::DynamicString((re::DynamicString *)&v66, (const re::DynamicString *)(v28 + 6));
            long long v29 = v28[9];
            long long v68 = v28[8];
            long long v69 = v29;
            unint64_t v30 = 0xBF58476D1CE4E5B9 * (*(void *)v23 ^ (*(void *)v23 >> 30));
            for (uint64_t j = *(unsigned int *)&__b[4
                                          * (((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                             * (v30 ^ (v30 >> 27))) >> 31))
                                           % v55)]; j != 0x7FFFFFFF; uint64_t j = *(_DWORD *)&v22[32 * j + 8] & 0x7FFFFFFF)
            {
              if (*(void *)&v22[32 * j + 16] == *(void *)v23)
              {
                if ((void)v68 == *(void *)&v22[32 * j + 24])
                {
                  re::DynamicArray<BOOL>::operator=((uint64_t)(v27 + 2), (uint64_t *)(v23 + 16));
                  v27[12] = 1;
                }
                break;
              }
            }
            if ((void)v66)
            {
              if (BYTE8(v66)) {
                (*(void (**)(void))(*(void *)v66 + 40))();
              }
              long long v66 = 0u;
              long long v67 = 0u;
            }
            if (*(void *)&v64[16])
            {
              if (v64[24]) {
                (*(void (**)(void))(**(void **)&v64[16] + 40))();
              }
              *(_OWORD *)&v64[16] = 0u;
              long long v65 = 0u;
            }
            if ((void)v63)
            {
              if (BYTE8(v63)) {
                (*(void (**)(void))(*(void *)v63 + 40))();
              }
              long long v63 = 0u;
              *(_OWORD *)id v64 = 0u;
            }
            if (v59 && (v60 & 1) != 0) {
              (*(void (**)(void))(*(void *)v59 + 40))();
            }
          }
        }
        v23 += 72;
      }
      while (v23 != v25);
    }
    re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues((re::ecs2::VFXSceneComponent *)this);
    int v32 = v70;
    uint64_t v2 = v54;
    if (v70 && v74)
    {
      if (v72)
      {
        uint64_t v33 = 72 * v72;
        uint64_t v34 = v74 + 16;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v34);
          v34 += 72;
          v33 -= 72;
        }
        while (v33);
        int v32 = v70;
      }
      (*(void (**)(uint64_t *))(*v32 + 40))(v32);
    }
    goto LABEL_54;
  }
  re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
  _os_crash();
  __break(1u);
}

id *re::ecs2::VFXSceneComponent::modelScene@<X0>(re::ecs2::VFXSceneComponent *this@<X0>, id *a2@<X8>)
{
  *a2 = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    uint64_t v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v4 = *((void *)this + 27);
  }
  double result = (id *)re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v4 + 72));
  if (result)
  {
    return re::ObjCObject::operator=(a2, result + 8);
  }
  return result;
}

uint64_t re::AssetHandle::loadedAsset<re::VFXAsset>(re::VFXAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::VFXAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::ecs2::VFXSceneComponent::getParameterValueCopy(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void v18[2] = *MEMORY[0x263EF8340];
  id v7 = a2;
  re::ecs2::VFXSceneComponent::applyReadbackUpdates(a1);
  id v8 = v7;
  signed int v9 = (const char *)[v8 UTF8String];
  size_t v10 = strlen(v9);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)v9, v10, 0, (unint64_t *)v18);
    unint64_t v11 = (v18[1] + (v18[0] << 6) + ((unint64_t)v18[0] >> 2) - 0x61C8864680B583E9) ^ v18[0];
  }
  else
  {
    unint64_t v11 = 0;
  }
  v18[0] = v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = (re::ecs2::VFXSceneMetadataComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = *(re::ecs2::VFXSceneMetadataComponent **)(a1 + 216);
    if (!v13) {
      goto LABEL_11;
    }
  }
  uint64_t v14 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, v18);
  if (v14)
  {
    signed int v15 = (int *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 112, v14);
    if (v15)
    {
      unint64_t v16 = (uint64_t *)(v15 + 2);
      uint64_t Descriptor = re::ecs2::VFXSceneMetadataComponent::getDescriptor(v13, *v15);
      re::DynamicArray<BOOL>::operator=(a3, v16);
      *a4 = *(void *)(Descriptor + 128);
    }
  }
LABEL_11:
}

uint64_t re::ecs2::VFXSceneComponent::applyReadbackUpdates(uint64_t this)
{
  if (*(unsigned char *)(this + 212))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 16);
    if (v2)
    {
      this = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (this)
      {
        uint64_t v3 = this;
        if (!*(unsigned char *)(this + 80))
        {
          uint64_t v4 = *(unsigned int *)(this + 64);
          if (v4)
          {
            uint64_t v5 = 0;
            unint64_t v6 = (int *)(*(void *)(this + 48) + 8);
            while (1)
            {
              int v7 = *v6;
              v6 += 22;
              if (v7 < 0) {
                break;
              }
              if (v4 == ++v5)
              {
                LODWORD(v5) = *(_DWORD *)(this + 64);
                break;
              }
            }
          }
          else
          {
            LODWORD(v5) = 0;
          }
          if (v4 != v5)
          {
            uint64_t v8 = v5;
            uint64_t v9 = v1 + 112;
            do
            {
              uint64_t v10 = *(void *)(v3 + 48);
              this = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v9, (uint64_t *)(v10 + 88 * v8 + 16));
              if (this) {
                this = re::DynamicArray<BOOL>::operator=(this + 8, (uint64_t *)(v10 + 88 * v8 + 32));
              }
              unsigned int v11 = *(_DWORD *)(v3 + 64);
              if (v11 <= (int)v5 + 1) {
                unsigned int v11 = v5 + 1;
              }
              while (1)
              {
                uint64_t v8 = (v5 + 1);
                if (v11 - 1 == v5) {
                  break;
                }
                LODWORD(v5) = v5 + 1;
                unsigned int v12 = v8;
                if ((*(_DWORD *)(*(void *)(v3 + 48) + 88 * v8 + 8) & 0x80000000) != 0) {
                  goto LABEL_21;
                }
              }
              unsigned int v12 = v11;
LABEL_21:
              LODWORD(v5) = v12;
            }
            while (v4 != v12);
          }
          *(unsigned char *)(v3 + 80) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::VFXSceneMetadataComponent::getDescriptor(re::ecs2::VFXSceneMetadataComponent *this, int a2)
{
  if (*((void *)this + 6) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 8) + 160 * a2;
}

uint64_t *re::ecs2::VFXSceneComponent::bindingStorageWithIdentifier@<X0>(re::ecs2::VFXSceneComponent *this@<X0>, id a2@<X1>, uint64_t a3@<X8>)
{
  void v9[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (const char *)[a2 UTF8String];
  size_t v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, (unint64_t *)v9);
    unint64_t v7 = (v9[1] + (v9[0] << 6) + ((unint64_t)v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  v9[0] = v7;
  double result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, v9);
  if (result)
  {
    double result = (uint64_t *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 112, result);
    if (result) {
      return (uint64_t *)re::DynamicArray<BOOL>::DynamicArray(a3, result + 1);
    }
  }
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  return result;
}

void re::ecs2::VFXSceneComponent::setParameterValueCopy(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  __s1[8] = *MEMORY[0x263EF8340];
  id v8 = a2;
  uint64_t v9 = a5;
  id v10 = v8;
  unsigned int v11 = (const char *)[v10 UTF8String];
  size_t v12 = strlen(v11);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v11, v12, 0, __s1);
    unint64_t v13 = (__s1[1] + (__s1[0] << 6) + (__s1[0] >> 2) - 0x61C8864680B583E9) ^ __s1[0];
  }
  else
  {
    unint64_t v13 = 0;
  }
  unint64_t v19 = v13;
  uint64_t v14 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 64, (uint64_t *)&v19);
  if (v14)
  {
    uint64_t v15 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)a1 + 112, v14);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *((void *)a1 + 2);
      if (v17)
      {
        uint64_t v18 = (re::ecs2::VFXSceneMetadataComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v18) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v18 = (re::ecs2::VFXSceneMetadataComponent *)*((void *)a1 + 27);
        if (!v18) {
          goto LABEL_16;
        }
      }
      re::ecs2::VFXSceneMetadataComponent::getDescriptor(v18, *(_DWORD *)v16);
      if (a4 > 0x40)
      {
        re::DynamicArray<BOOL>::resize(v16 + 8, a4);
        v9[2](v9, *(void *)(v16 + 40));
        goto LABEL_15;
      }
      ((void (**)(id, unint64_t *))v9)[2](v9, __s1);
      if (*(void *)(v16 + 24) != a4 || memcmp(__s1, *(const void **)(v16 + 40), a4))
      {
        re::DynamicArray<BOOL>::resize(v16 + 8, a4);
        memcpy(*(void **)(v16 + 40), __s1, a4);
LABEL_15:
        ++*(_DWORD *)(v16 + 48);
        re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork(a1);
      }
    }
  }
LABEL_16:
}

void ___ZN2re4ecs217VFXSceneComponent12loadIfNeededERNS_13RenderManagerERNS_12AssetServiceE_block_invoke(uint64_t a1, uint64_t a2)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  uint64_t v5 = *(void **)(a2 + 40);
  if (v5)
  {
    if (!WeakRetained) {
      return;
    }
    if (WeakRetained[3] == a2)
    {
      id v7 = v5;
      re::ecs2::VFXSceneComponent::setRuntimeScene((uint64_t)(v4 - 1), &v7);

      unint64_t v4[3] = 0;
    }
    goto LABEL_8;
  }
  size_t v6 = *re::ecsComponentsLogObjects((re *)WeakRetained);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "VFXLoadRuntimeTask has invalid runtime", buf, 2u);
  }
  if (v4) {
LABEL_8:
  }
}

void re::ecs2::VFXSceneComponent::setRuntimeScene(uint64_t a1, id *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  re::ObjCObject::operator=((id *)(a1 + 48), a2);
  uint64_t v3 = [*(id *)(a1 + 48) effect];
  uint64_t v4 = v3;
  if (v3)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v23 = v3;
    obuint64_t j = [v3 bindings];
    uint64_t v5 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (!v5) {
      goto LABEL_29;
    }
    uint64_t v6 = v5;
    uint64_t v25 = *(void *)v35;
    while (1)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v35 != v25) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v9 = [v8 objectName];
        id v10 = (_anonymous_namespace_ *)[v9 UTF8String];

        id v11 = [v8 bindingName];
        size_t v12 = (_anonymous_namespace_ *)[v11 UTF8String];

        unint64_t v13 = [v8 type];
        unint64_t v28 = 0;
        if (re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 112, (uint64_t *)&v28))
        {
          if (v30) {
            uint64_t v14 = *(unsigned char **)&v31[7];
          }
          else {
            uint64_t v14 = v31;
          }
          uint64_t v15 = (const void *)[NSString stringWithUTF8String:v14];
          CFRetain(v15);
          __n128 buf = (__n128)(unint64_t)[v8 objectID];
          long long v27 = v15;
          unint64_t v16 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
          unint64_t v17 = v16 ^ (v16 >> 31);
          if (!*(void *)(a1 + 160))
          {
            LODWORD(v18) = 0;
LABEL_20:
            re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1 + 160, v18, v17, &v28, &buf);
            ++*(_DWORD *)(a1 + 200);
            goto LABEL_21;
          }
          unint64_t v18 = v17 % *(unsigned int *)(a1 + 184);
          uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 168) + 4 * v18);
          if (v19 == 0x7FFFFFFF) {
            goto LABEL_20;
          }
          uint64_t v20 = *(void *)(a1 + 176);
          while (*(void *)(v20 + 48 * v19 + 16) != v28)
          {
            LODWORD(v19) = *(_DWORD *)(v20 + 48 * v19 + 8) & 0x7FFFFFFF;
            if (v19 == 0x7FFFFFFF) {
              goto LABEL_20;
            }
          }
        }
        else
        {
          int v21 = *re::ecsComponentsLogObjects(0);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            buf.n128_u16[0] = 0;
            _os_log_debug_impl(&dword_233120000, v21, OS_LOG_TYPE_DEBUG, "Missing VFX binding", (uint8_t *)&buf, 2u);
          }
        }
LABEL_21:
        if (v29 && (v30 & 1) != 0) {
          (*(void (**)(void))(*(void *)v29 + 40))();
        }
        if (*(void *)v32 && (v33 & 1) != 0) {
          (*(void (**)(void))(**(void **)v32 + 40))();
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (!v6)
      {
LABEL_29:

        uint64_t v4 = v23;
        goto LABEL_32;
      }
    }
  }
  long long v22 = *re::ecsComponentsLogObjects(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v32 = 0;
    _os_log_debug_impl(&dword_233120000, v22, OS_LOG_TYPE_DEBUG, "Unable to get VFX effect from runtime scene", v32, 2u);
  }
LABEL_32:
}

void __copy_helper_block_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

unint64_t re::ecs2::anonymous namespace'::bindingUniqueIdentifier(re::ecs2::_anonymous_namespace_ *this, const re::DynamicString *a2, unint64_t a3)
{
  unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, (uint64_t)this);
  unint64_t v6 = ((v5 << 6)
      + (v5 >> 2)
      + re::Hash<re::DynamicString>::operator()((uint64_t)&v10, (uint64_t)a2)
      - 0x61C8864680B583E9) ^ v5;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  return ((v7 ^ (v7 >> 31)) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 32);
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 88;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::ecs2::VFXSceneComponent::startFetchingParameter(re::ecs2::VFXSceneComponent *this, NSString *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  uint64_t v4 = [(NSString *)v3 UTF8String];
  size_t v5 = strlen(v4);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)v4, v5, 0, (unint64_t *)&buf);
    unint64_t v6 = (*((void *)&buf + 1) + ((void)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    unint64_t v6 = 0;
  }
  unint64_t v18 = v6;
  int v7 = (re *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v18);
  if (!v7)
  {
    unint64_t v16 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v3;
    unint64_t v13 = "Unable to fetch parameter named %@";
    goto LABEL_16;
  }
  uint64_t v8 = *((void *)this + 2);
  if (!v8
    || (char v9 = (uint64_t *)v7,
        (int v7 = (re *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) == 0))
  {
    size_t v12 = *re::ecsComponentsLogObjects(v7);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    LOWORD(buf) = 0;
    unint64_t v13 = "Unable to get VFXSceneReadbackComponent";
    uint64_t v14 = v12;
    uint32_t v15 = 2;
LABEL_17:
    _os_log_debug_impl(&dword_233120000, v14, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&buf, v15);
    goto LABEL_12;
  }
  char v10 = v7;
  id v11 = (__n128 *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 112, v9);
  if (!v11)
  {
    unint64_t v16 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_12;
    }
    uint64_t v17 = *v9;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v17;
    unint64_t v13 = "Missing VFX binding %zu";
LABEL_16:
    uint64_t v14 = v16;
    uint32_t v15 = 12;
    goto LABEL_17;
  }
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>((uint64_t)v10 + 32, v9, v11);
  *((unsigned char *)this + 212) = 1;
LABEL_12:
}

__n128 re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(void *)(v11 + 88 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 88 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 36);
  if (v12 == 0x7FFFFFFF)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 32);
    unsigned int v13 = v12;
    if (v12 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      unsigned int v13 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v13 + 1;
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
  }
  uint64_t v16 = 88 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + v16) = v8;
  *(void *)(*(void *)(a1 + 16) + v16 + 16) = *a2;
  uint64_t v17 = *(void *)(a1 + 16) + v16;
  *(_DWORD *)(v17 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = a3->n128_u32[0];
  re::DynamicArray<BOOL>::DynamicArray(v17 + 32, &a3->n128_i64[1]);
  __n128 result = a3[3];
  *(__n128 *)(v17 + 72) = result;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v12;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void re::ecs2::VFXSceneComponent::stopFetchingParameter(re::ecs2::VFXSceneComponent *this, NSString *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v3 = a2;
  uint64_t v4 = [(NSString *)v3 UTF8String];
  size_t v5 = strlen(v4);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)v4, v5, 0, (unint64_t *)&buf);
    unint64_t v6 = (*((void *)&buf + 1) + ((void)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    unint64_t v6 = 0;
  }
  unint64_t v30 = v6;
  uint64_t v7 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v30);
  if (!v7)
  {
    int v21 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v3;
    unint64_t v18 = "Unable to stop fetching parameter named %@";
    uint64_t v19 = v21;
    uint32_t v20 = 12;
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)this + 2);
  if (!v8
    || (unint64_t v9 = (uint64_t *)v7,
        (uint64_t v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) == 0))
  {
    uint64_t v17 = *re::ecsComponentsLogObjects((re *)v7);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
    LOWORD(buf) = 0;
    unint64_t v18 = "Unable to get VFXSceneReadbackComponent";
    uint64_t v19 = v17;
    uint32_t v20 = 2;
LABEL_15:
    _os_log_debug_impl(&dword_233120000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&buf, v20);
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  if (*(void *)(v7 + 32))
  {
    uint64_t v11 = *v9;
    unint64_t v12 = 0xBF58476D1CE4E5B9 * (*v9 ^ ((unint64_t)*v9 >> 30));
    unint64_t v13 = ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31))
        % *(unsigned int *)(v7 + 56);
    uint64_t v14 = *(void *)(v7 + 40);
    uint64_t v15 = *(unsigned int *)(v14 + 4 * v13);
    if (v15 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(v7 + 48);
      if (*(void *)(v16 + 88 * v15 + 16) == v11)
      {
        *(_DWORD *)(v14 + 4 * v13) = *(_DWORD *)(v16 + 88 * v15 + 8) & 0x7FFFFFFF;
LABEL_19:
        uint64_t v24 = *(void *)(v7 + 48);
        uint64_t v25 = v24 + 88 * v15;
        int v28 = *(_DWORD *)(v25 + 8);
        long long v27 = (int *)(v25 + 8);
        int v26 = v28;
        if (v28 < 0)
        {
          *long long v27 = v26 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v24 + 88 * v15 + 32);
          uint64_t v24 = *(void *)(v10 + 48);
          int v26 = *(_DWORD *)(v24 + 88 * v15 + 8);
        }
        *(_DWORD *)(v24 + 88 * v15 + 8) = *(_DWORD *)(v10 + 68) | v26 & 0x80000000;
        --*(_DWORD *)(v10 + 60);
        int v29 = *(_DWORD *)(v10 + 72) + 1;
        *(_DWORD *)(v10 + 68) = v15;
        *(_DWORD *)(v10 + 72) = v29;
      }
      else
      {
        while (1)
        {
          unsigned int v22 = v15;
          int v23 = *(_DWORD *)(v16 + 88 * v15 + 8);
          uint64_t v15 = v23 & 0x7FFFFFFF;
          if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v16 + 88 * v15 + 16) == v11)
          {
            *(_DWORD *)(v16 + 88 * v22 + 8) = *(_DWORD *)(v16 + 88 * v22 + 8) & 0x80000000 | *(_DWORD *)(v16 + 88 * v15 + 8) & 0x7FFFFFFF;
            goto LABEL_19;
          }
        }
      }
    }
  }
  *((unsigned char *)this + 212) = *(_DWORD *)(v10 + 60) != 0;
LABEL_23:
}

void re::ecs2::VFXSceneComponent::initializeBindings(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  re::ecs2::VFXSceneComponent::modelScene(this, v59);
  uint64_t v2 = [v59[0] scene];

  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      uint64_t v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    }
    else {
      uint64_t v4 = *((void *)this + 27);
    }
    size_t v5 = [v2 bindings];
    unint64_t v6 = [v5 count];
    if (*(void *)(v4 + 40) < v6) {
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)(v4 + 32), v6);
    }

    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    uint64_t v45 = v2;
    obuint64_t j = [v2 bindings];
    uint64_t v7 = (_anonymous_namespace_ *)[obj countByEnumeratingWithState:&v75 objects:v79 count:16];
    unint64_t v48 = v7;
    if (v7)
    {
      uint64_t v47 = *(void *)v76;
      uint64_t v49 = (unint64_t *)((char *)this + 64);
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v76 != v47) {
            objc_enumerationMutation(obj);
          }
          unint64_t v9 = *(void **)(*((void *)&v75 + 1) + 8 * (void)v8);
          v68.n128_u32[0] = -1;
          uint64_t v72 = 0;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          v68.n128_u64[1] = 0;
          int v71 = 0;
          int v73 = 0;
          memset(v59, 0, sizeof(v59));
          uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v59, 0);
          long long v60 = 0u;
          long long v61 = 0u;
          uint64_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v60, 0);
          long long v62 = 0u;
          long long v63 = 0u;
          unint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v62, 0);
          long long v64 = 0u;
          long long v65 = 0u;
          re::DynamicString::setCapacity(&v64, 0);
          id v13 = [v9 identifier];
          uint64_t v14 = (_anonymous_namespace_ *)[v13 UTF8String];

          id v15 = [v9 objectName];
          uint64_t v16 = (_anonymous_namespace_ *)[v15 UTF8String];

          id v17 = [v9 bindingName];
          unint64_t v18 = (_anonymous_namespace_ *)[v17 UTF8String];

          re::DynamicString::operator=((re::DynamicString *)v59, (re::DynamicString *)&v57);
          re::DynamicString::operator=((re::DynamicString *)&v60, (re::DynamicString *)&v55);
          re::DynamicString::operator=((re::DynamicString *)&v62, (re::DynamicString *)&v53);
          *(void *)&long long v66 = [v9 type];
          [v9 min];
          *(void *)&long long v67 = v19;
          uint32_t v20 = (_anonymous_namespace_ *)[v9 max];
          *((void *)&v67 + 1) = v21;
          id v22 = [v9 userManual];
          int v23 = (const char *)[v22 UTF8String];
          size_t v24 = strlen(v23);
          int v80 = v23;
          size_t v81 = v24;
          re::DynamicString::operator=((re::DynamicString *)&v51, (uint64_t)&v80);

          re::DynamicString::operator=((re::DynamicString *)&v64, (re::DynamicString *)&v51);
          unint64_t v25 = *(void *)(v4 + 48);
          unint64_t v26 = v25;
          if (v25 >= *(void *)(v4 + 40))
          {
            re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity((void *)(v4 + 32), v25 + 1);
            unint64_t v26 = *(void *)(v4 + 48);
          }
          long long v27 = (_OWORD *)(*(void *)(v4 + 64) + 160 * v26);
          re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)v59);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 2), (const re::DynamicString *)&v60);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 4), (const re::DynamicString *)&v62);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 6), (const re::DynamicString *)&v64);
          long long v28 = v67;
          v27[8] = v66;
          v27[9] = v28;
          ++*(void *)(v4 + 48);
          ++*(_DWORD *)(v4 + 56);
          v68.n128_u32[0] = v25;
          unint64_t v50 = v29;
          uint64_t v74 = [v9 objectID];
          id v30 = [v9 identifier];
          long long v31 = (const char *)[v30 UTF8String];
          size_t v32 = strlen(v31);
          if (v32)
          {
            MurmurHash3_x64_128((uint64_t)v31, v32, 0, (unint64_t *)&v80);
            unint64_t v33 = (v81 + ((void)v80 << 6) + ((unint64_t)v80 >> 2) - 0x61C8864680B583E9) ^ (unint64_t)v80;
          }
          else
          {
            unint64_t v33 = 0;
          }

          unint64_t v34 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
          unint64_t v35 = v34 ^ (v34 >> 31);
          unint64_t v36 = *v49;
          if (!*v49
            || (unint64_t v36 = v35 % *((unsigned int *)this + 22),
                uint64_t v37 = *(unsigned int *)(*((void *)this + 9) + 4 * v36),
                v37 == 0x7FFFFFFF))
          {
LABEL_22:
            uint64_t v39 = *((unsigned int *)this + 25);
            if (v39 == 0x7FFFFFFF)
            {
              uint64_t v39 = *((unsigned int *)this + 24);
              int v40 = v39;
              if (v39 == *((_DWORD *)this + 22))
              {
                re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)v49, 2 * *((_DWORD *)this + 23));
                unint64_t v36 = v35 % *((unsigned int *)this + 22);
                int v40 = *((_DWORD *)this + 24);
              }
              *((_DWORD *)this + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v40 + 1;
              uint64_t v41 = *((void *)this + 10);
              int v42 = *(_DWORD *)(v41 + 32 * v39 + 8);
            }
            else
            {
              uint64_t v41 = *((void *)this + 10);
              int v42 = *(_DWORD *)(v41 + 32 * v39 + 8);
              *((_DWORD *)this + 25) = v42 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v41 + 32 * v39 + 8) = v42 | 0x80000000;
            uint64_t v43 = *((void *)this + 9);
            *(_DWORD *)(*((void *)this + 10) + 32 * v39 + 8) = *(_DWORD *)(*((void *)this + 10) + 32 * v39 + 8) & 0x80000000 | *(_DWORD *)(v43 + 4 * v36);
            *(void *)(*((void *)this + 10) + 32 * v39) = v35;
            *(void *)(*((void *)this + 10) + 32 * v39 + 16) = v33;
            *(void *)(*((void *)this + 10) + 32 * v39 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v29;
            *(_DWORD *)(v43 + 4 * v36) = v39;
            ++*((_DWORD *)this + 23);
            ++*((_DWORD *)this + 26);
          }
          else
          {
            uint64_t v38 = *((void *)this + 10);
            while (*(void *)(v38 + 32 * v37 + 16) != v33)
            {
              uint64_t v37 = *(_DWORD *)(v38 + 32 * v37 + 8) & 0x7FFFFFFF;
              if (v37 == 0x7FFFFFFF) {
                goto LABEL_22;
              }
            }
          }
          __n128 v44 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>((uint64_t)this + 112, (uint64_t *)&v50, &v68);
          if (v51 && (v52 & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v51 + 40))(v44);
          }
          if (v53 && (v54 & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v53 + 40))(v44);
          }
          if (v55 && (v56 & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v55 + 40))(v44);
          }
          if (v57 && (v58 & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v57 + 40))(v44);
          }
          if ((void)v64)
          {
            if (BYTE8(v64)) {
              (*(void (**)(__n128))(*(void *)v64 + 40))(v44);
            }
            __n128 v44 = 0uLL;
            long long v64 = 0u;
            long long v65 = 0u;
          }
          if ((void)v62)
          {
            if (BYTE8(v62)) {
              (*(void (**)(__n128))(*(void *)v62 + 40))(v44);
            }
            __n128 v44 = 0uLL;
            long long v62 = 0u;
            long long v63 = 0u;
          }
          if ((void)v60)
          {
            if (BYTE8(v60)) {
              (*(void (**)(__n128))(*(void *)v60 + 40))(v44);
            }
            __n128 v44 = 0uLL;
            long long v60 = 0u;
            long long v61 = 0u;
          }
          if (v59[0] && ((uint64_t)v59[1] & 1) != 0) {
            (*(void (**)(__n128))(*(void *)v59[0] + 40))(v44);
          }
          uint64_t v7 = (_anonymous_namespace_ *)v68.n128_u64[1];
          if (v68.n128_u64[1] && v72) {
            uint64_t v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(void *)v68.n128_u64[1] + 40))(v44);
          }
          uint64_t v8 = (_anonymous_namespace_ *)((char *)v8 + 1);
        }
        while (v8 != v48);
        uint64_t v7 = (_anonymous_namespace_ *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v79, 16, v44.n128_f64[0]);
        unint64_t v48 = v7;
      }
      while (v7);
    }

    re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v4);
    uint64_t v2 = v45;
  }
}

void re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues(re::ecs2::VFXSceneComponent *this)
{
  if (!*((void *)this + 4))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v3) {
        return;
      }
    }
    else
    {
      uint64_t v3 = *((void *)this + 27);
      if (!v3) {
        return;
      }
    }
    re::ecs2::VFXSceneComponent::modelScene(this, &v6);
    uint64_t v4 = [v6 scene];

    if (v4)
    {
      v5[0] = MEMORY[0x263EF8330];
      v5[1] = 3221225472;
      void v5[2] = ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke;
      v5[3] = &__block_descriptor_48_e5_v8__0l;
      v5[4] = this;
      v5[5] = v3;
      [v4 performTransaction:v5];
    }
  }
}

void ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  re::ecs2::VFXSceneComponent::modelScene((re::ecs2::VFXSceneComponent *)v1, &v24);
  uint64_t v2 = [v24 effect];

  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v1 + 144);
    if (v3)
    {
      uint64_t v4 = 0;
      size_t v5 = (int *)(*(void *)(v1 + 128) + 8);
      while (1)
      {
        int v6 = *v5;
        v5 += 22;
        if (v6 < 0) {
          break;
        }
        if (v3 == ++v4)
        {
          LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)(v1 + 144);
          break;
        }
      }
    }
    else
    {
      LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
    }
    if (v3 != v4)
    {
      uint64_t v7 = v4;
      uint32_t v20 = v23;
      unsigned int v8 = *(_DWORD *)(v1 + 144);
      do
      {
        uint64_t v9 = *(void *)(v1 + 128);
        uint64_t v10 = v9 + 88 * v7;
        int v12 = *(_DWORD *)(v10 + 72);
        uint64_t v11 = (_DWORD *)(v10 + 72);
        if (!v12)
        {
          uint64_t v13 = v9 + 88 * v7;
          uint64_t Descriptor = (void *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 40), *(_DWORD *)(v13 + 24));
          if (Descriptor[9]) {
            id v15 = (char *)Descriptor[10];
          }
          else {
            id v15 = (char *)Descriptor + 73;
          }
          uint64_t v16 = objc_msgSend(NSString, "stringWithUTF8String:", v15, v20);
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 3221225472;
          v23[0] = ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke_2;
          v23[1] = &__block_descriptor_40_e13_v24__0r_v8Q16l;
          v23[2] = v13 + 32;
          id v17 = _Block_copy(aBlock);
          [v2 parameterOf:*(void *)(v13 + 80) named:v16 type:Descriptor[16] with:v17];
          _DWORD *v11 = 1;

          unsigned int v8 = *(_DWORD *)(v1 + 144);
        }
        if (v8 <= (int)v4 + 1) {
          unsigned int v18 = v4 + 1;
        }
        else {
          unsigned int v18 = v8;
        }
        while (1)
        {
          uint64_t v7 = (v4 + 1);
          if (v18 - 1 == v4) {
            break;
          }
          LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v4 + 1;
          unsigned int v19 = v7;
          if ((*(_DWORD *)(*(void *)(v1 + 128) + 88 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_22;
          }
        }
        unsigned int v19 = v18;
LABEL_22:
        LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v19;
      }
      while (v3 != v19);
    }
  }
}

void *___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke_2(uint64_t a1, const void *a2, unint64_t a3)
{
  re::DynamicArray<BOOL>::resize(*(void *)(a1 + 32), a3);
  int v6 = *(void **)(*(void *)(a1 + 32) + 32);
  return memcpy(v6, a2, a3);
}

void ___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned int *)(v2 + 144);
  if (v3)
  {
    uint64_t v4 = 0;
    size_t v5 = (int *)(*(void *)(v2 + 128) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 22;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)(v2 + 144);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v2 + 160;
    int v22 = *(_DWORD *)(v2 + 144);
    do
    {
      uint64_t v9 = *(void *)(v2 + 128);
      uint64_t v10 = v9 + 88 * v7;
      uint64_t Descriptor = re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 48), *(_DWORD *)(v10 + 24));
      uint64_t v12 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8, *(void *)(v10 + 16));
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        uint64_t v14 = *(unsigned int *)(v9 + 88 * v7 + 72);
        if (*(void *)(v12 + 8) != v14)
        {
          *(void *)(v12 + 8) = v14;
          id v15 = *(void **)(v12 + 16);
          uint64_t v3 = v8;
          uint64_t v16 = v9 + 88 * v7;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 3221225472;
          void aBlock[2] = ___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke_2;
          aBlock[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
          aBlock[4] = v16 + 32;
          id v17 = v15;
          unsigned int v18 = _Block_copy(aBlock);
          uint64_t v19 = *(void *)(v16 + 48);
          uint64_t v8 = v3;
          LODWORD(v3) = v22;
          [*(id *)(a1 + 32) setParameterOf:*v13 named:v17 type:*(void *)(Descriptor + 128) size:v19 with:v18];
        }
      }
      unsigned int v20 = *(_DWORD *)(v2 + 144);
      if (v20 <= (int)v4 + 1) {
        unsigned int v20 = v4 + 1;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v20 - 1 == v4) {
          break;
        }
        LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v4 + 1;
        unsigned int v21 = v7;
        if ((*(_DWORD *)(*(void *)(v2 + 128) + 88 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_18;
        }
      }
      unsigned int v21 = v20;
LABEL_18:
      LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v21;
    }
    while (v3 != v21);
  }
}

void *___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke_2(void *result, void *__dst, size_t a3)
{
  uint64_t v3 = result[4];
  if (*(void *)(v3 + 16) == a3) {
    return memcpy(__dst, *(const void **)(v3 + 32), a3);
  }
  return result;
}

void ___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(v2 + 64);
  if (v3)
  {
    uint64_t v4 = 0;
    size_t v5 = (int *)(*(void *)(v2 + 48) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 22;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)(v2 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  }
  if (v3 != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = *(void *)(a1 + 40) + 160;
    uint64_t v19 = v21;
    do
    {
      uint64_t v9 = *(void *)(v2 + 48);
      uint64_t Descriptor = (unint64_t *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 56), *(_DWORD *)(v9 + 88 * v7 + 24));
      uint64_t v12 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8, v11);
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        uint64_t v14 = *(void **)(v12 + 16);
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 3221225472;
        v21[0] = ___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke_2;
        v21[1] = &__block_descriptor_40_e13_v24__0r_v8Q16l;
        v21[2] = v9 + 88 * v7 + 32;
        id v15 = v14;
        uint64_t v16 = _Block_copy(aBlock);
        objc_msgSend(*(id *)(a1 + 32), "parameterOf:named:type:with:", *v13, v15, Descriptor[16], v16, v19);
      }
      unsigned int v17 = *(_DWORD *)(v2 + 64);
      if (v17 <= (int)v4 + 1) {
        unsigned int v17 = v4 + 1;
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v17 - 1 == v4) {
          break;
        }
        LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v4 + 1;
        unsigned int v18 = v7;
        if ((*(_DWORD *)(*(void *)(v2 + 48) + 88 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      unsigned int v18 = v17;
LABEL_17:
      LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v18;
    }
    while (v3 != v18);
  }
}

void *___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke_2(uint64_t a1, const void *a2, unint64_t a3)
{
  re::DynamicArray<BOOL>::resize(*(void *)(a1 + 32), a3);
  int v6 = *(void **)(*(void *)(a1 + 32) + 32);
  return memcpy(v6, a2, a3);
}

id re::ecs2::VFXSceneComponent::addCollisionPlane(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  id result = *(id *)(a1 + 48);
  if (result)
  {
    return (id)objc_msgSend(result, "addCollisionPlaneWithExtents:transform:", a2, a3, a4, a5, a6);
  }
  return result;
}

id re::ecs2::VFXSceneComponent::updateCollisionPlane(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  id result = *(id *)(a1 + 48);
  if (result)
  {
    return (id)objc_msgSend(result, "updateCollisionPlaneWithId:extents:transform:", a2, a3, a4, a5, a6, a7);
  }
  return result;
}

id re::ecs2::VFXSceneComponent::removeCollisionPlane(id *this, uint64_t a2)
{
  id result = this[6];
  if (result)
  {
    return (id)[result removeCollisionPlaneWithId:a2];
  }
  return result;
}

id re::ecs2::VFXSceneComponent::needsCollisionPlanes(id *this)
{
  id result = this[6];
  if (result)
  {
    return (id)[result needsCollisionPlanes];
  }
  return result;
}

void re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(re::ecs2::VFXSceneComponent *this, NSString *a2, uint64_t a3, NSValue *a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = a4;
  Class VFXMemorySerializationClass = re::getVFXMemorySerializationClass((re *)v8);
  if (VFXMemorySerializationClass)
  {
    Class v10 = VFXMemorySerializationClass;
    unint64_t v11 = 0;
    switch(a3)
    {
      case 0:
        uint64_t v12 = v19;
        v19[0] = MEMORY[0x263EF8330];
        v19[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_17;
        goto LABEL_24;
      case 1:
        uint64_t v12 = v35;
        v35[0] = MEMORY[0x263EF8330];
        v35[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke;
        goto LABEL_24;
      case 2:
        uint64_t v12 = v34;
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_2;
        goto LABEL_24;
      case 3:
        uint64_t v12 = v33;
        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_3;
        goto LABEL_24;
      case 4:
        uint64_t v12 = v32;
        v32[0] = MEMORY[0x263EF8330];
        v32[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_4;
        goto LABEL_24;
      case 5:
        uint64_t v12 = v31;
        v31[0] = MEMORY[0x263EF8330];
        v31[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_5;
        goto LABEL_24;
      case 6:
        uint64_t v12 = v30;
        v30[0] = MEMORY[0x263EF8330];
        v30[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_6;
        goto LABEL_24;
      case 7:
        uint64_t v12 = v29;
        v29[0] = MEMORY[0x263EF8330];
        v29[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_7;
        goto LABEL_24;
      case 8:
        uint64_t v12 = v28;
        v28[0] = MEMORY[0x263EF8330];
        v28[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_8;
        goto LABEL_24;
      case 9:
        uint64_t v12 = v27;
        v27[0] = MEMORY[0x263EF8330];
        v27[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_9;
        goto LABEL_24;
      case 10:
        uint64_t v12 = v26;
        v26[0] = MEMORY[0x263EF8330];
        v26[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_10;
        goto LABEL_24;
      case 11:
      case 12:
        uint64_t v12 = v25;
        v25[0] = MEMORY[0x263EF8330];
        v25[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_11;
        goto LABEL_24;
      case 13:
      case 18:
        uint64_t v12 = v24;
        v24[0] = MEMORY[0x263EF8330];
        v24[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_12;
        goto LABEL_24;
      case 14:
      case 19:
        uint64_t v12 = v23;
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_13;
        goto LABEL_24;
      case 15:
      case 20:
        uint64_t v12 = v22;
        v22[0] = MEMORY[0x263EF8330];
        v22[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_14;
        goto LABEL_24;
      case 16:
      case 21:
        uint64_t v12 = v21;
        v21[0] = MEMORY[0x263EF8330];
        v21[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_15;
        goto LABEL_24;
      case 17:
      case 22:
        uint64_t v12 = v20;
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_16;
        goto LABEL_24;
      case 24:
      case 25:
        uint64_t v12 = &v17;
        uint64_t v17 = MEMORY[0x263EF8330];
        uint64_t v18 = 3221225472;
        uint64_t v13 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_18;
LABEL_24:
        _OWORD v12[2] = (uint64_t)v13;
        v12[3] = (uint64_t)&unk_264BE34E0;
        _OWORD v12[5] = (uint64_t)VFXMemorySerializationClass;
        v12[4] = (uint64_t)v8;
        unint64_t v11 = _Block_copy(v12);

        break;
      default:
        break;
    }
    int v15 = [(objc_class *)v10 VFXSerializedBufferSize:[(NSValue *)v8 pointerValue] type:a3];
    re::ecs2::VFXSceneComponent::setParameterValueCopy(this, v7, v16, v15, v11);
  }
  else if ((atomic_exchange(re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(NSString *,long,NSValue *)::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v14 = *re::ecsComponentsLogObjects(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "VFX framework is not loaded", buf, 2u);
    }
  }
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeBool:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeUInt8:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned __int16 *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeUInt16:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned int *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeUInt32:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeUInt64:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(int *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeInt:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(char *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeInt8:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(__int16 *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeInt16:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_9(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned int *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeInt32:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeInt64:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_11(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  LODWORD(vre::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeFloat:a2 to:v4];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_12(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  double v4 = *(double *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeSIMD2F:a2 to:v4];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_13(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  long long v4 = *(_OWORD *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeSIMD3F:a2 to:*(double *)&v4];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  long long v4 = *(_OWORD *)[*(id *)(a1 + 32) pointerValue];
  return [v3 writeSIMD4F:a2 to:*(double *)&v4];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_15(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  long long v4 = (long long *)[*(id *)(a1 + 32) pointerValue];
  long long v5 = *v4;
  long long v6 = v4[1];
  long long v7 = v4[2];
  return objc_msgSend(v3, "writeSIMD3x3F:to:", a2, *(double *)&v5, *(double *)&v6, *(double *)&v7);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_16(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  long long v4 = (long long *)[*(id *)(a1 + 32) pointerValue];
  long long v5 = *v4;
  long long v6 = v4[1];
  long long v7 = v4[2];
  long long v8 = v4[3];
  return objc_msgSend(v3, "writeSIMD4x4F:to:", a2, *(double *)&v5, *(double *)&v6, *(double *)&v7, *(double *)&v8);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_17(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 32) pointerValue];
  return [v3 writeString:v4 to:a2];
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 32) pointerValue];
  return [v3 writeKeyframeAnimation:v4 to:a2];
}

uint64_t re::MeshBoundingBoxes::boundingBox(re::MeshBoundingBoxes *this, unint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)this;
  unint64_t v3 = *((void *)this + 3);
  if (v3 <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v7 = 136315906;
    long long v8 = "operator[]";
    __int16 v9 = 1024;
    int v10 = 866;
    __int16 v11 = 2048;
    unint64_t v12 = a2;
    __int16 v13 = 2048;
    unint64_t v14 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*((unsigned char *)this + 32)) {
    uint64_t v4 = (char *)this + 40;
  }
  else {
    uint64_t v4 = (char *)*((void *)this + 6);
  }
  return *(void *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF7 | (8 * (*(_DWORD *)&v4[4 * a2] & 1)))
       + ((16 * *(unsigned int *)&v4[4 * a2]) & 0xFFFFFFFE0);
}

double re::operator*<float>@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = 0;
  float32x4_t v4 = *a1;
  float32x4_t v5 = a1[1];
  float32x4_t v6 = a1[2];
  float32x4_t v7 = a1[3];
  long long v8 = *(_OWORD *)(a2 + 48);
  float32x4_t v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v8;
  do
  {
    v14[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v13[v3])), v5, *(float32x2_t *)&v13[v3], 1), v6, (float32x4_t)v13[v3], 2), v7, (float32x4_t)v13[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  double result = *(double *)v14;
  long long v10 = v14[1];
  long long v11 = v14[2];
  long long v12 = v14[3];
  *a3 = v14[0];
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  return result;
}

uint64_t re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = 160 * v2;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(v3 + 96));
      re::DynamicString::deinit((re::DynamicString *)(v3 + 64));
      re::DynamicString::deinit((re::DynamicString *)(v3 + 32));
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 160;
      v4 -= 160;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::ecs2::VFXSystem::~VFXSystem(re::ecs2::VFXSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::VFXSystem *)((char *)this + 224));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VFXSystem::typeInfo(re::ecs2::VFXSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::DynamicArray<re::VFXScene>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::VFXScene>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x320uLL))
        {
          uint64_t v2 = 800 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 800 * a2, 16);
          if (result)
          {
            float32x4_t v7 = result;
            if (!v5[1]) {
              goto LABEL_24;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 800, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      float32x4_t v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 800 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          __int16 v13 = &v7[v10 / 8];
          long long v14 = *(_OWORD *)(v8 + v10);
          long long v15 = *(_OWORD *)(v8 + v10 + 16);
          long long v16 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v16;
          *(_OWORD *)__int16 v13 = v14;
          *((_OWORD *)v13 + 1) = v15;
          long long v17 = *(_OWORD *)(v8 + v10 + 64);
          long long v18 = *(_OWORD *)(v8 + v10 + 80);
          long long v19 = *(_OWORD *)(v8 + v10 + 112);
          *((_OWORD *)v13 + 6) = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v13 + 7) = v19;
          *((_OWORD *)v13 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v17;
          *((_OWORD *)v13 + 5) = v18;
          long long v20 = *(_OWORD *)(v8 + v10 + 128);
          long long v21 = *(_OWORD *)(v8 + v10 + 144);
          long long v22 = *(_OWORD *)(v8 + v10 + 176);
          *((_OWORD *)v13 + 10) = *(_OWORD *)(v8 + v10 + 160);
          *((_OWORD *)v13 + 11) = v22;
          *((_OWORD *)v13 + 8) = v20;
          *((_OWORD *)v13 + 9) = v21;
          long long v23 = *(_OWORD *)(v8 + v10 + 192);
          long long v24 = *(_OWORD *)(v8 + v10 + 208);
          long long v25 = *(_OWORD *)(v8 + v10 + 240);
          *((_OWORD *)v13 + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_OWORD *)(v8 + v10 + 224);
          *((_OWORD *)v13 + 15) = v25;
          *((_OWORD *)v13 + 12) = v23;
          *((_OWORD *)v13 + 13) = v24;
          *((_OWORD *)v13 + 18) = 0u;
          *((_OWORD *)v13 + 19) = 0u;
          *((_OWORD *)v13 + 16) = 0u;
          *((_OWORD *)v13 + 17) = 0u;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(&v7[v10 / 8 + 32], (uint64_t *)(v8 + v10 + 256));
          *((_DWORD *)v13 + 80) = *(_DWORD *)(v8 + v10 + 320);
          int v26 = *(unsigned __int8 *)(v8 + v10 + 328);
          *((unsigned char *)v13 + 328) = v26;
          if (v26) {
            v13[42] = *(void *)(v12 + 336);
          }
          *(_OWORD *)&v7[v10 / 8 + 43] = *(_OWORD *)(v12 + 344);
          long long v27 = *(_OWORD *)(v12 + 360);
          long long v28 = *(_OWORD *)(v12 + 376);
          long long v29 = *(_OWORD *)(v12 + 392);
          *(_OWORD *)&v7[v10 / 8 + 51] = *(_OWORD *)(v12 + 408);
          *(_OWORD *)&v7[v10 / 8 + 49] = v29;
          *(_OWORD *)&v7[v10 / 8 + 47] = v28;
          *(_OWORD *)&v7[v10 / 8 + 45] = v27;
          long long v30 = *(_OWORD *)(v12 + 424);
          long long v31 = *(_OWORD *)(v12 + 440);
          long long v32 = *(_OWORD *)(v12 + 456);
          *(_OWORD *)&v7[v10 / 8 + 59] = *(_OWORD *)(v12 + 472);
          *(_OWORD *)&v7[v10 / 8 + 57] = v32;
          *(_OWORD *)&v7[v10 / 8 + 55] = v31;
          *(_OWORD *)&v7[v10 / 8 + 53] = v30;
          int v33 = *(unsigned __int8 *)(v12 + 496);
          LOBYTE(v7[v10 / 8 + 62]) = v33;
          if (v33)
          {
            unint64_t v34 = &v7[v10 / 8];
            long long v35 = *(_OWORD *)(v8 + v10 + 528);
            *((_OWORD *)v34 + 32) = *(_OWORD *)(v8 + v10 + 512);
            *((_OWORD *)v34 + 33) = v35;
          }
          uint64_t v36 = v8 + v10;
          v7[v10 / 8 + 68] = *(void *)(v8 + v10 + 544);
          int v37 = *(unsigned __int8 *)(v8 + v10 + 560);
          LOBYTE(v7[v10 / 8 + 70]) = v37;
          if (v37)
          {
            uint64_t v38 = &v7[v10 / 8];
            long long v39 = *(_OWORD *)(v36 + 576);
            long long v40 = *(_OWORD *)(v36 + 592);
            long long v41 = *(_OWORD *)(v36 + 624);
            v38[38] = *(_OWORD *)(v36 + 608);
            v38[39] = v41;
            v38[36] = v39;
            v38[37] = v40;
          }
          v7[v10 / 8 + 80] = *(void *)(v36 + 640);
          v7[v10 / 8 + 82] = *(void *)(v36 + 656);
          uint64_t v42 = *(void *)(v36 + 664);
          *(_OWORD *)(v36 + 656) = 0u;
          v7[v10 / 8 + 83] = v42;
          long long v43 = *(_OWORD *)(v36 + 672);
          long long v44 = *(_OWORD *)(v36 + 688);
          long long v45 = *(_OWORD *)(v36 + 720);
          *(_OWORD *)&v7[v10 / 8 + 88] = *(_OWORD *)(v36 + 704);
          *(_OWORD *)&v7[v10 / 8 + 90] = v45;
          *(_OWORD *)&v7[v10 / 8 + 84] = v43;
          *(_OWORD *)&v7[v10 / 8 + 86] = v44;
          long long v46 = *(_OWORD *)(v36 + 736);
          long long v47 = *(_OWORD *)(v36 + 752);
          long long v48 = *(_OWORD *)(v36 + 768);
          *(_OWORD *)((char *)&v7[v10 / 8 + 97] + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_OWORD *)(v36 + 780);
          *(_OWORD *)&v7[v10 / 8 + 94] = v47;
          *(_OWORD *)&v7[v10 / 8 + 96] = v48;
          *(_OWORD *)&v7[v10 / 8 + 92] = v46;

          uint64_t v49 = *(void *)(v36 + 656);
          if (v49)
          {

            *(void *)(v36 + 656) = 0;
          }
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v8 + v10 + 256);
          v10 += 800;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::VFXScene>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 800 * v4;
        uint64_t v6 = (id *)(v3 + 656);
        do
        {

          if (*v6)
          {

            id *v6 = 0;
          }
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v6 - 50));
          v6 += 100;
          v5 -= 800;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::setTexture(void *a1, void *a2, id *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = (_anonymous_namespace_ *)(a1 + 1);
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 1, a2);
  if (v9 == -1)
  {
    long long v16 = a1 + 9;
    uint64_t v17 = a1[11];
    v18[0] = *a3;
    LOBYTE(v18[1]) = 0;
    LOBYTE(v19[1]) = 0;
    re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::add(v16, (uint64_t)v18);
    if (LOBYTE(v18[1]) && v19[0])
    {

      v19[0] = 0;
    }
    if (v18[0]) {

    }
    LOBYTE(v18[0]) = a4;
    BYTE1(v18[0]) = v17;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(v8, a2, (__int16 *)v18);
  }
  else
  {
    uint64_t v10 = a1[2] + 16 * v9;
    unint64_t v11 = *(unsigned __int8 *)(v10 + 9);
    if (a1[11] <= v11)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)long long v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)long long v18 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(unsigned __int8 *)(v10 + 8);
    __int16 v13 = (void **)(a1[13] + 32 * v11);
    LOBYTE(v18[0]) = 0;
    re::Optional<NS::SharedPtr<MTL::Texture>>::operator=((uint64_t)(v13 + 1), v18);
    if (LOBYTE(v18[0]) && v18[1]) {

    }
    if (*a3 != *v13)
    {
      if (*a3) {
        BOOL v14 = *v13 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = v14;
      NS::SharedPtr<MTL::Texture>::operator=(v13, a3);
      if (v12 != a4)
      {
        LOBYTE(v18[0]) = a4;
        BYTE1(v18[0]) = v11;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(v8, a2, v18);
      }
      if (v15)
      {
        v18[0] = a1;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(v8, (uint64_t)v18);
      }
    }
  }
}

BOOL re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(void *a1, void *a2, _WORD *a3)
{
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v6 = v5;
  if (v5 != -1)
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, a1[1] + 16 * v5);
    *(_WORD *)(a1[1] + 16 * v6 + 8) = *a3;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, a1[1] + 16 * v6);
  }
  return v6 != -1;
}

void *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 32 * v4;
  *(void *)uint64_t v6 = *(void *)a2;
  *(void *)a2 = 0;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v6 + 8) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
  }
  int v8 = *(unsigned __int8 *)(a2 + 24);
  *(unsigned char *)(v6 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
  if (v8)
  {
    *(_DWORD *)(v5 + 32 * v4 + 25) = *(_DWORD *)(a2 + 25);
    unint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(_anonymous_namespace_ *a1, void *a2, __int16 *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = v6;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v6);
    *(_WORD *)(*((void *)a1 + 1) + 16 * v7 + 8) = *a3;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v7);
    return *((void *)a1 + 1) + 16 * v7 + 8;
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  uint64_t v4 = __rev16(*(unsigned __int16 *)(a2 + 8));
  unint64_t v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  *(void *)(result + 48) ^= v3 ^ ((v3 << 6) + (v3 >> 2) + (v5 ^ (v5 >> 31)) - 0x61C8864680B583E9);
  return result;
}

void *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(void *result, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  result[5] = 0;
  v14[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v14[0] + 8) + 16 * v9;
      unint64_t v11 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 8;
      unint64_t v12 = *(void *)(*(void *)a2 + 88);
      if (v12 <= v11)
      {
        uint64_t v16 = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        long long v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 789;
        __int16 v21 = 2048;
        unint64_t v22 = v11;
        __int16 v23 = 2048;
        unint64_t v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(*(void *)(*(void *)a2 + 104) + 32 * v11))
      {
        unint64_t v13 = 0xBF58476D1CE4E5B9 * (*(void *)v10 ^ (*(void *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

void *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_25;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_25:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 32 * v9;
        do
        {
          unint64_t v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          void *v12 = *(void *)(v8 + v10);
          *(void *)(v8 + v10) = 0;
          int v14 = *(unsigned __int8 *)(v8 + v10 + 8);
          *((unsigned char *)v12 + 8) = v14;
          if (v14)
          {
            _OWORD v12[2] = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = 0;
          }
          int v15 = *(unsigned __int8 *)(v13 + 24);
          *((unsigned char *)v12 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v15;
          if (v15) {
            *(_DWORD *)((char *)&v7[v10 / 8 + 3] + 1) = *(_DWORD *)(v8 + v10 + 25);
          }
          if (*(unsigned char *)(v13 + 8))
          {
            uint64_t v16 = *(void **)(v8 + v10 + 16);
            if (v16)
            {

              *(void *)(v8 + v10 + 16) = 0;
            }
          }
          int v17 = *(void **)(v8 + v10);
          if (v17)
          {

            *(void *)(v8 + v10) = 0;
          }
          v10 += 32;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, __int16 *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  __int16 v17 = *a3;
  uint64_t v18 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v18 = *a2;
  *(_WORD *)(v18 + 8) = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v19;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes((uint64_t)a1, *((void *)a1 + 1) + 16 * v16);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  uint64_t v4 = *(void *)(result + 48);
  *(void *)(result + 40) ^= v3;
  uint64_t v5 = __rev16(*(unsigned __int16 *)(a2 + 8));
  unint64_t v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
  *(void *)(result + 48) = v4 ^ v3 ^ ((v3 << 6) + (v3 >> 2) + (v6 ^ (v6 >> 31)) - 0x61C8864680B583E9);
  return result;
}

void *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(void *)uint64_t v12 = 0;
        *(_WORD *)(v12 + 8) = 0;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

double re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(v20, v4, a2);
  v18[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd((_anonymous_namespace_ *)v20, (void *)(*(void *)(v18[0] + 8) + 16 * v10), (_WORD *)(*(void *)(v18[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        uint64_t v10 = v19;
      }
      while (v19 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v11 = *((void *)&v20[3] + 1);
  *((void *)&v20[3] + 1) = a1[7];
  long long v12 = v20[0];
  long long v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(void *)&v20[1] = v5;
  long long v14 = v20[2];
  long long v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  long long v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v20);
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _WORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LOWORD(v1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(_WORD *)(v17 + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v18;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes((uint64_t)a1, *((void *)a1 + 1) + 16 * v16);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

void *re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  long long v11 = 0u;
  long long v12 = 0u;
  v10[0] = 0xFFFFFFFFuLL;
  v10[1] = 0uLL;
  LODWORD(v11) = 0;
  unint64_t v8 = (re::IntrospectionBase *)re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (*((void *)&v10[0] + 1) && *((void *)&v11 + 1)) {
    (*(void (**)(void))(**((void **)&v10[0] + 1) + 40))();
  }
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 22;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 88 * v10 + 16, *(void *)(a2 + 16) + 88 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 88 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 32);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 88;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 88 * v9;
  *(_DWORD *)(v11 + v13 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v13) = a3;
  *(void *)(*(void *)(a1 + 16) + v13 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + v13;
  *(_DWORD *)(v14 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)a5;
  *(void *)(v14 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(void *)(v14 + 40) = 0;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 32) = 0;
  uint64_t v15 = *(void *)(a5 + 16);
  *(void *)(v14 + 32) = *(void *)(a5 + 8);
  *(void *)(v14 + 40) = v15;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v16 = *(void *)(v14 + 48);
  *(void *)(v14 + 48) = *(void *)(a5 + 24);
  *(void *)(a5 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v16;
  uint64_t v17 = *(void *)(v14 + 64);
  *(void *)(v14 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = v17;
  ++*(_DWORD *)(a5 + 32);
  ++*(_DWORD *)(v14 + 56);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a5 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v15 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 88 * v15;
    return v14 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 88 * v10 + 16) != v6)
  {
    int v12 = *(_DWORD *)(v11 + 88 * v10 + 8);
    uint64_t v10 = v12 & 0x7FFFFFFF;
    if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = v11 + 88 * v10;
  *(_DWORD *)(v13 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(_DWORD *)a3;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v13 + 32, a3 + 8);
  *(_OWORD *)(v13 + 72) = *(_OWORD *)(a3 + 48);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 16) + 88 * v10;
  return v14 + 24;
}

BOOL re::internal::less<unsigned long>(void *a1, void *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, uint64_t *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 88 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 22;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::ecs2::VFXSceneReadbackComponent::~VFXSceneReadbackComponent(re::ecs2::VFXSceneReadbackComponent *this)
{
  *(void *)this = &unk_26E6E27E0;
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 4);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6E27E0;
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 4);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  memset(v29, 0, sizeof(v29));
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v21, 0);
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  unsigned int v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v23 + 1, 0);
  long long v26 = 0uLL;
  *(void *)&long long v27 = 0;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v25 + 1, 0);
  long long v28 = 0uLL;
  *(void *)long long v29 = 0;
  re::DynamicString::setCapacity((void *)&v27 + 1, 0);
  unint64_t v11 = *(void *)(a4 + 16);
  if (v11 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity((void *)a4, v11 + 1);
    unint64_t v11 = *(void *)(a4 + 16);
  }
  uint64_t v12 = *(void *)(a4 + 32) + 160 * v11;
  *(void *)uint64_t v12 = v21;
  *(_OWORD *)(v12 + 8) = v22;
  uint64_t v13 = *((void *)&v23 + 1);
  *(void *)(v12 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v23;
  *(void *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 40) = v24;
  uint64_t v14 = *((void *)&v25 + 1);
  *(void *)(v12 + 56) = v25;
  *(void *)(v12 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v14;
  uint64_t v15 = *((void *)&v26 + 1);
  *(void *)(v12 + 72) = v26;
  *(void *)(v12 + 80) = v15;
  uint64_t v16 = *((void *)&v27 + 1);
  *(void *)(v12 + 88) = v27;
  *(void *)(v12 + 96) = v16;
  *(void *)(v12 + 120) = *(void *)v29;
  *(_OWORD *)(v12 + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v28;
  long long v17 = *(_OWORD *)&v29[24];
  *(_OWORD *)(v12 + 128) = *(_OWORD *)&v29[8];
  *(_OWORD *)(v12 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v17;
  uint64_t v18 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = v18 + 1;
  ++*(_DWORD *)(a4 + 24);
  uint64_t v19 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 160 * v18);
  re::introspectionInitElement(a2, a3, a1[6], v19);
  return v19;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 160 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 160 * a3;
}

uint64_t re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 160 * v4;
        do
        {
          re::DynamicString::deinit((re::DynamicString *)(v3 + 96));
          re::DynamicString::deinit((re::DynamicString *)(v3 + 64));
          re::DynamicString::deinit((re::DynamicString *)(v3 + 32));
          re::DynamicString::deinit((re::DynamicString *)v3);
          v3 += 160;
          v5 -= 160;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          uint64_t v2 = 160 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 160 * v9;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          void *v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_OWORD *)v11 + 2) = 0u;
          *((_OWORD *)v11 + 3) = 0u;
          v11[4] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = 0;
          v11[7] = *(void *)(v8 + 56);
          *(void *)(v8 + 56) = 0;
          uint64_t v17 = v11[5];
          uint64_t v16 = v11[6];
          uint64_t v18 = *(void *)(v8 + 48);
          v11[5] = *(void *)(v8 + 40);
          v11[6] = v18;
          *(void *)(v8 + 40) = v17;
          *(void *)(v8 + 48) = v16;
          *((_OWORD *)v11 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
          *((_OWORD *)v11 + 5) = 0u;
          unsigned char v11[8] = *(void *)(v8 + 64);
          *(void *)(v8 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
          v11[11] = *(void *)(v8 + 88);
          *(void *)(v8 + 88) = 0;
          uint64_t v20 = v11[9];
          uint64_t v19 = v11[10];
          uint64_t v21 = *(void *)(v8 + 80);
          v11[9] = *(void *)(v8 + 72);
          v11[10] = v21;
          *(void *)(v8 + 72) = v20;
          *(void *)(v8 + 80) = v19;
          *((_OWORD *)v11 + 6) = 0u;
          *((_OWORD *)v11 + 7) = 0u;
          v11[12] = *(void *)(v8 + 96);
          *(void *)(v8 + 96) = 0;
          v11[15] = *(void *)(v8 + 120);
          *(void *)(v8 + 120) = 0;
          uint64_t v23 = v11[13];
          uint64_t v22 = v11[14];
          uint64_t v24 = *(void *)(v8 + 112);
          v11[13] = *(void *)(v8 + 104);
          v11[14] = v24;
          *(void *)(v8 + 10re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v23;
          *(void *)(v8 + 112) = v22;
          long long v25 = *(_OWORD *)(v8 + 144);
          *((_OWORD *)v11 + 8) = *(_OWORD *)(v8 + 128);
          *((_OWORD *)v11 + 9) = v25;
          re::DynamicString::deinit((re::DynamicString *)(v8 + 96));
          re::DynamicString::deinit((re::DynamicString *)(v8 + 64));
          re::DynamicString::deinit((re::DynamicString *)(v8 + 32));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 160;
          v11 += 20;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v11 = 160 * a2;
    unint64_t v12 = a2;
    do
    {
      uint64_t v13 = *((void *)v3 + 4) + v11;
      re::DynamicString::deinit((re::DynamicString *)(v13 + 96));
      re::DynamicString::deinit((re::DynamicString *)(v13 + 64));
      re::DynamicString::deinit((re::DynamicString *)(v13 + 32));
      re::DynamicString::deinit((re::DynamicString *)v13);
      ++v12;
      v11 += 160;
    }
    while (v12 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 160 * v4 + 128;
      do
      {
        int v7 = (_OWORD *)(*((void *)v3 + 4) + v6);
        *(v7 - 7) = 0u;
        *(v7 - 8) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7 - 16, 0);
        *(v7 - 5) = 0u;
        *(v7 - 6) = 0u;
        uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7 - 12, 0);
        *(v7 - 3) = 0u;
        *(v7 - re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
        uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7 - 8, 0);
        *(v7 - 1) = 0u;
        *(v7 - 2) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7 - 4, 0);
        _OWORD *v7 = 0u;
        v7[1] = 0u;
        v6 += 160;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 160 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 160;
        v11 -= 160;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 160 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 160 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::ecs2::VFXSceneMetadataComponent::~VFXSceneMetadataComponent(re::ecs2::VFXSceneMetadataComponent *this)
{
  *(void *)this = &unk_26E6E2900;
  uint64_t v2 = (char *)this + 32;
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSceneMetadataComponent *)((char *)this + 72));
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6E2900;
  uint64_t v2 = (char *)this + 32;
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSceneMetadataComponent *)((char *)this + 72));
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VFXSystem>(re::ecs2::VFXSystem *,REEventHandlerResult (re::ecs2::VFXSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  BOOL v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

void *re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 16 * v9;
        uint64_t v11 = v7;
        do
        {
          long long v12 = *v8++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
        uint64_t v8 = (long long *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, int *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)long long v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  *(void *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(v25 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v26;
  uint64_t v27 = *(void *)(v25 + 56);
  *(void *)(v25 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 80 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  v14 += 24;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

__n128 re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, __n128 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v27[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 48 * v9;
  __n128 result = *a5;
  *(void *)(v25 + 40) = a5[1].n128_u64[0];
  *(__n128 *)(v25 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = result;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 72 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          std::pair<unsigned long,re::ecs2::VFXREBinding>::pair[abi:nn180100](v11, v8);
          re::DynamicArray<unsigned long>::deinit(v8 + 16);
          v8 += 72;
          v11 += 72;
          v10 -= 72;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

__n128 std::pair<unsigned long,re::ecs2::VFXREBinding>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v4;
  ++*(_DWORD *)(a2 + 40);
  ++*(_DWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 24));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * a1[2], a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = a1[4];
      uint64_t v11 = 160 * v8;
      uint64_t v12 = 160 * v4;
      do
      {
        uint64_t v13 = v10 + v11;
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11 + 32), (const re::DynamicString *)(v9 + v11 + 32));
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11 + 64), (const re::DynamicString *)(v9 + v11 + 64));
        re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11 + 96), (const re::DynamicString *)(v9 + v11 + 96));
        long long v14 = *(_OWORD *)(v9 + v11 + 144);
        *(_OWORD *)(v13 + 128) = *(_OWORD *)(v9 + v11 + 128);
        *(_OWORD *)(v13 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v14;
        v9 += 160;
        v12 -= 160;
        v10 += 160;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 160 * v4, a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = a1[4] + 160 * v4;
      uint64_t v7 = 160 * v5 - 160 * v4;
      do
      {
        re::DynamicString::deinit((re::DynamicString *)(v6 + 96));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 64));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 32));
        re::DynamicString::deinit((re::DynamicString *)v6);
        v6 += 160;
        v7 -= 160;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6), (re::DynamicString *)(a1 + v6));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 32), (re::DynamicString *)(a1 + v6 + 32));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 64), (re::DynamicString *)(a1 + v6 + 64));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 96), (re::DynamicString *)(a1 + v6 + 96));
      __n128 result = *(__n128 *)(a1 + v6 + 128);
      long long v9 = *(_OWORD *)(a1 + v6 + 144);
      *(__n128 *)(v7 + 128) = result;
      *(_OWORD *)(v7 + 14re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v9;
      v6 += 160;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

void *re::ecs2::allocInfo_EntityFunctionConstantComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF803F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF803F8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80470, "EntityFunctionConstantComponent");
    __cxa_guard_release(&qword_26AF803F8);
  }
  return &unk_26AF80470;
}

void re::ecs2::initInfo_EntityFunctionConstantComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xE1861B4742BD63FCLL;
  v12[1] = "EntityFunctionConstantComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80400, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80400);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF80410 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v8, v9);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "functionConstants";
      *(void *)(v10 + 16) = &qword_26AF80420;
      *(void *)(v10 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
      qword_26AF80418 = v10;
      __cxa_guard_release(&qword_26AF80400);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *((_DWORD *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 2;
  *((void *)this + 8) = &qword_26AF80410;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::EntityFunctionConstantComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::EntityFunctionConstantComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EntityFunctionConstantComponent>;
  *((void *)this + 1re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = re::internal::defaultDestructV2<re::ecs2::EntityFunctionConstantComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80408, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80408))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF80420);
    qword_26AF80420 = (uint64_t)&unk_26E6E2988;
    __cxa_guard_release(&qword_26AF80408);
  }
  if ((_MergedGlobals_140 & 1) == 0)
  {
    uint64_t v2 = re::introspect_uint64_t((re *)1, a2);
    unint64_t v4 = re::introspect_int((re *)1, v3);
    if ((_MergedGlobals_140 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v4;
      _MergedGlobals_140 = 1;
      int v6 = v4[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF80420, 0);
      qword_26AF80430 = 0x3000000007;
      dword_26AF80438 = v6;
      word_26AF8043C = 0;
      *(void *)&xmmword_26AF80440 = 0;
      *((void *)&xmmword_26AF80440 + 1) = 0xFFFFFFFFLL;
      qword_26AF80450 = (uint64_t)v2;
      unk_26AF80458 = 0;
      qword_26AF80460 = v5;
      unk_26AF80468 = 0;
      qword_26AF80420 = (uint64_t)&unk_26E6E2988;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF80420, (const re::IntrospectionBase *)&v25);
      if (v26) {
        long long v9 = v27;
      }
      else {
        long long v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = v2[2];
      long long v20 = *(_OWORD *)(v5 + 32);
      long long v21 = v10;
      long long v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        uint64_t v26 = "_CompareFunc";
        long long v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.char var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          long long v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15 {
          || (uint64_t v16 = *v31,
        }
              uint64_t v25 = v14,
              uint64_t v26 = v16,
              LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = -1,
              (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF80440 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::EntityFunctionConstantComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E2A28;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 68) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::EntityFunctionConstantComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a3 + 4);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::EntityFunctionConstantComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E2A28;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 6re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::EntityFunctionConstantComponent>(void *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_EntityFunctionConstantComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EntityFunctionConstantComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EntityFunctionConstantComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EntityFunctionConstantComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EntityFunctionConstantComponent>, this);
}

void *re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  int v10 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 8;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 32 * v10 + 16, *(void *)(a2 + 16) + 32 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 32 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v10 = v13;
    return v12 + 32 * v10 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  *(_DWORD *)(v11 + 32 * v10 + 2re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(this + 4) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16);
  return v12 + 32 * v10 + 24;
}

BOOL re::internal::less<unsigned long long>(void *a1, void *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, uint64_t *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 32 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 8;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::ecs2::EntityFunctionConstantComponent::~EntityFunctionConstantComponent(re::ecs2::EntityFunctionConstantComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::BallSocketJointComponent::addToSimulation(re::ecs2::BallSocketJointComponent *this, re::PhysicsSimulation *a2, const re::ecs2::Entity *a3)
{
  if (RigidBody) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unsigned int v9 = v7;
    *((void *)this + 19) = v10;
    re::PhysicsJointCollection::add((re::PhysicsSimulation *)((char *)a2 + 136), v10);
    objc_storeWeak((id *)this + 20, (char *)a2 + 8);
    re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)this);
  }
}

char *anonymous namespace'::getRigidBody(id *this, re::ecs2::EntityHandle *a2, const re::ecs2::Entity *a3)
{
  uint64_t result = re::ecs2::EntityHandle::resolve(this, (uint64_t)a2);
  if (result)
  {
    uint64_t result = (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result) {
      return (char *)*((void *)result + 42);
    }
  }
  return result;
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint(uint64_t a1)
{
  uint64_t v2 = re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
  re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)v2, *(void *)(a1 + 16));
  uint64_t v3 = re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 16);
  re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)v3, v4);
}

void re::ecs2::BallSocketJointComponent::removeFromSimulation(id *this)
{
  if (this[19])
  {
    uint64_t v2 = this + 20;
    WeakRetained = objc_loadWeakRetained(this + 20);
    if (WeakRetained)
    {
      uint64_t v4 = WeakRetained;
      id v8 = this[19];
      re::DynamicArray<re::Allocator const*>::removeStable(WeakRetained + 18, &v8);
      objc_destroyWeak(v2);
      this[20] = 0;
    }
    uint64_t v5 = (void (***)(id))this[19];
    if (v5)
    {
      (**v5)(this[19]);
    }
    this[19] = 0;
    uint64_t v6 = (char *)this[2];
    if (v6)
    {
      int v7 = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v7)
      {
        re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::removeConstraintsFromSimulation(v7);
      }
    }
  }
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::removeConstraintsFromSimulation(void *a1)
{
  if ((int)a1[6] >= 1)
  {
    uint64_t v2 = (char *)a1[2];
    uint64_t v3 = (uint64_t)(a1 + 4);
    unint64_t v4 = a1[6] + 1;
    do
    {
      unint64_t v5 = (v4 - 2);
      if (a1[6] <= v5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      WeakRetained = (char *)objc_loadWeakRetained((id *)(a1[8] + 8 * v5));
      if (WeakRetained)
      {
        int v7 = WeakRetained;
        uint64_t v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v8
          || (uint64_t v9 = v8, re::ecs2::EntityHandle::resolve((id *)(v8 + 32), (uint64_t)v7 - 8) != v2)
          && re::ecs2::EntityHandle::resolve((id *)(v9 + 56), (uint64_t)v7 - 8) != v2)
        {
          re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
        }
      }
      else
      {
        re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
      }
      --v4;
    }
    while (v4 > 1);
  }
}

BOOL re::ecs2::BallSocketJointComponent::needsUpdate(re::ecs2::BallSocketJointComponent *this)
{
  uint64_t v1 = *((void *)this + 19);
  if (!v1) {
    return 1;
  }
  uint64_t v3 = (char *)(*(uint64_t (**)(void))(**(void **)(v1 + 40) + 16))(*(void *)(v1 + 40));
    return 1;
  (*(void (**)(float32x4_t *__return_ptr))(**((void **)this + 19) + 40))(v11);
  uint32x4_t v6 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v11[0], *((float32x4_t *)this + 5)));
  v6.i32[3] = v6.i32[2];
  if ((vmaxvq_u32(v6) & 0x80000000) != 0) {
    return 1;
  }
  if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v11[1], *((float32x4_t *)this + 6)))) & 0x80000000) != 0) {
    return 1;
  }
  int v7 = (char *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 19) + 40) + 24))(*(void *)(*((void *)this + 19) + 40));
    return 1;
  (*(void (**)(float32x4_t *__return_ptr))(**((void **)this + 19) + 48))(v10);
  uint32x4_t v9 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v10[0], *((float32x4_t *)this + 7)));
  v9.i32[3] = v9.i32[2];
  return (vmaxvq_u32(v9) & 0x80000000) != 0
      || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v10[1], *((float32x4_t *)this + 8)))) & 0x80000000) != 0
      || *((unsigned __int8 *)this + 144) != (*(unsigned int (**)(void))(**(void **)(*((void *)this + 19)
                                                                                                  + 40)
                                                                                    + 48))(*(void *)(*((void *)this + 19) + 40));
}

void *re::ecs2::allocInfo_BallSocketJointComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_141, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_141))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80528, "BallSocketJointComponent");
    __cxa_guard_release(&_MergedGlobals_141);
  }
  return &unk_26AF80528;
}

void re::ecs2::initInfo_BallSocketJointComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x8BC71053146C7D4ALL;
  v27[1] = "BallSocketJointComponent";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF804F0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF804F0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF804F8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bodyA";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80500 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "bodyB";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80508 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v17 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "localAnchorPoseA";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v18 + 32) = 0x5000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80510 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      uint64_t v20 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + 8) = "localAnchorPoseB";
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v21 + 32) = 0x7000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(void *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80518 = v21;
      uint64_t v22 = re::introspectionAllocator((re *)v21);
      long long v24 = re::introspect_BOOL((re *)1, v23);
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 32))(v22, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "collisionsEnabled";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v25 + 32) = 0x9000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80520 = v25;
      __cxa_guard_release(&qword_26AF804F0);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 6;
  *((void *)this + 8) = &qword_26AF804F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BallSocketJointComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BallSocketJointComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BallSocketJointComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::BallSocketJointComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

uint64_t re::internal::defaultConstruct<re::ecs2::BallSocketJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BallSocketJointComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BallSocketJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_destroyWeak((id *)(a3 + 160));
  *(void *)(a3 + 160) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 56));
  objc_destroyWeak((id *)(a3 + 56));
  *(void *)(a3 + 56) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 32));
  objc_destroyWeak((id *)(a3 + 32));
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::BallSocketJointComponent>(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 160));
  *(void *)(a1 + 160) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 56));
  objc_destroyWeak((id *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 32));
  objc_destroyWeak((id *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_BallSocketJointComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BallSocketJointComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BallSocketJointComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BallSocketJointComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BallSocketJointComponent>, this);
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = (void *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (a2) {
      unint64_t v4 = (void *)(a2 + 8);
    }
    else {
      unint64_t v4 = 0;
    }
    objc_initWeak(&location, v4);
    uint64_t v5 = v3[8];
    uint64_t v6 = v3[6];
    if (v6)
    {
      uint64_t v7 = 8 * v6;
      uint64_t v8 = (id *)v3[8];
      while (*v8 != location)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          uint64_t v8 = (id *)(v5 + 8 * v6);
          break;
        }
      }
    }
    else
    {
      uint64_t v8 = (id *)v3[8];
    }
    if (v6 == ((uint64_t)v8 - v5) >> 3) {
      re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::add((_anonymous_namespace_ *)(v3 + 4), &location);
    }
    objc_destroyWeak(&location);
  }
}

void re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::add(_anonymous_namespace_ *this, id *from)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (id *)(*((void *)this + 4) + 8 * v4);
  *uint64_t v5 = 0;
  objc_copyWeak(v5, from);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
}

void re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)(*(void *)(a1 + 32) + 8 * a2), (id *)(*(void *)(a1 + 32) + 8 * v2 - 8));
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(void *)(a1 + 32) + 8 * v2;
  objc_destroyWeak((id *)(v4 - 8));
  *(void *)(v4 - 8) = 0;
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::BallSocketJointComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  unint64_t v2 = (id *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v3 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v4 = &unk_26E6E2AB0;
  objc_initWeak(v3, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v3);
  objc_initWeak((id *)(a1 + 56), 0);
  *(void *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 72) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 56));
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(a1 + 152) = 0;
  objc_initWeak(v2, 0);
  return a1;
}

void re::ecs2::BallSocketJointComponent::~BallSocketJointComponent(id *this)
{
  this[20] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(this + 7));
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(this + 4));
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  objc_destroyWeak(this + 20);
  this[20] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(this + 7));
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(this + 4));
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::ecs2::allocInfo_PortalService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_142, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_142))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF805A8, "PortalService");
    __cxa_guard_release(&_MergedGlobals_142);
  }
  return &unk_26AF805A8;
}

void re::ecs2::initInfo_PortalService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x25EC7FC57101E912;
  v5[1] = "PortalService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PortalService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_PortalService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalService>, this);
}

void *re::allocInfo_PbrMaterialConstants(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_143, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_143))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF806E8, "PbrMaterialConstants");
    __cxa_guard_release(&_MergedGlobals_143);
  }
  return &unk_26AF806E8;
}

void re::initInfo_PbrMaterialConstants(re *this, re::IntrospectionBase *a2)
{
  v59[0] = 0x465F2192D8590650;
  v59[1] = "PbrMaterialConstants";
  re::StringID::destroyString((re::StringID *)v59);
  *((_OWORD *)this + 2) = v60;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80628, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF80628);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_ColorGamut4F((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "baseColorTint";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80760 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      unsigned int v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "metallicScale";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x1400000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80768 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "specularScale";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v15 + 32) = 0x1800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80770 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_float((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "roughnessScale";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v19 + 32) = 0x1C00000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80778 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::introspect_ColorGamut3F((re::IntrospectionBase **)1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "emissiveColor";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v22 + 32) = 0x2000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80780 = v22;
      long long v23 = re::introspectionAllocator((re *)v22);
      uint64_t v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "emissiveScale";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v26 + 32) = 0x3000000006;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80788 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      long long v29 = re::introspect_float((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "opacityThreshold";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v30 + 32) = 0x3400000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80790 = v30;
      long long v31 = re::introspectionAllocator((re *)v30);
      int v33 = re::introspect_float((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "clearcoatScale";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v34 + 32) = 0x3800000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80798 = v34;
      long long v35 = re::introspectionAllocator((re *)v34);
      int v37 = re::introspect_float((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "clearcoatRoughnessScale";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v38 + 32) = 0x3C00000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807A0 = v38;
      long long v39 = re::introspectionAllocator((re *)v38);
      long long v41 = re::introspect_float((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "anisotropyLevelScale";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v42 + 32) = 0x400000000ALL;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807A8 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      uint64_t v44 = re::introspect_ColorGamut3F((re::IntrospectionBase **)1);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *(void *)(v45 + 8) = "sheenColorTint";
      *(void *)(v45 + 16) = v44;
      *(void *)(v45 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v45 + 32) = 0x480000000BLL;
      *(_DWORD *)(v45 + 40) = 0;
      *(void *)(v45 + 48) = 0;
      *(void *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807B0 = v45;
      long long v46 = re::introspectionAllocator((re *)v45);
      uint64_t v47 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "uvTransform0";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v48 + 32) = 0x600000000CLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807B8 = v48;
      uint64_t v49 = re::introspectionAllocator((re *)v48);
      uint64_t v50 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "uvTransform1";
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v51 + 32) = 0x700000000DLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807C0 = v51;
      char v52 = re::introspectionAllocator((re *)v51);
      uint64_t v53 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "uvOffset0";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v54 + 32) = 0x800000000ELL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807C8 = v54;
      uint64_t v55 = re::introspectionAllocator((re *)v54);
      uint64_t v56 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v57 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v57 = 1;
      *(void *)(v57 + 8) = "uvOffset1";
      *(void *)(v57 + 16) = v56;
      *(void *)(v57 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v57 + 32) = 0x880000000FLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(void *)(v57 + 48) = 0;
      *(void *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF807D0 = v57;
      __cxa_guard_release(&qword_26AF80628);
    }
  }
  *((void *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 15;
  *((void *)this + 8) = &qword_26AF80760;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialConstants>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialConstants>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialConstants>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::PbrMaterialConstants>;
  re::IntrospectionRegistry::add(this, v3);
  long long v58 = v60;
}

double re::internal::defaultConstruct<re::PbrMaterialConstants>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a3 = _Q0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + objc_destroyWeak(this + 20) = 0x3F00000000000000;
  *(_DWORD *)(a3 + 28) = 1065353216;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 37) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_2343825B0;
  *(_OWORD *)(a3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_2343825C0;
  *(_DWORD *)(a3 + 80) = 1025758986;
  *(unsigned char *)(a3 + 8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a3 + 96) = xmmword_234376D50;
  *(_OWORD *)(a3 + 112) = xmmword_234376D50;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::PbrMaterialConstants>(uint64_t a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a1 = _Q0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + objc_destroyWeak(this + 20) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 37) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2343825B0;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_2343825C0;
  *(_DWORD *)(a1 + 80) = 1025758986;
  *(unsigned char *)(a1 + 8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a1 + 96) = xmmword_234376D50;
  *(_OWORD *)(a1 + 112) = xmmword_234376D50;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  return result;
}

void *re::allocInfo_PbrMaterialTextures(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80638, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80638))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF807D8, "PbrMaterialTextures");
    __cxa_guard_release(&qword_26AF80638);
  }
  return &unk_26AF807D8;
}

void re::initInfo_PbrMaterialTextures(re *this, re::IntrospectionBase *a2)
{
  v62[0] = 0x4455A71457457B7ELL;
  v62[1] = "PbrMaterialTextures";
  re::StringID::destroyString((re::StringID *)v62);
  *((_OWORD *)this + 2) = v63;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80640, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF80640);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "baseColorTexture";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80678 = v8;
      uint32x4_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_AssetHandle((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "metallicTexture";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v12 + 32) = 0x4800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80680 = v12;
      unsigned int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "roughnessTexture";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v16 + 32) = 0x6000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80688 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_AssetHandle((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "emissiveTexture";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v20 + 32) = 0x3000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80690 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::introspect_AssetHandle((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "specularTexture";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v24 + 32) = 0x7800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80698 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::introspect_AssetHandle((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "opacityTexture";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v28 + 32) = 0xA800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806A0 = v28;
      long long v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::introspect_AssetHandle((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "normalTexture";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v32 + 32) = 0x9000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806A8 = v32;
      int v33 = re::introspectionAllocator((re *)v32);
      long long v35 = re::introspect_AssetHandle((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "clearcoatTexture";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v36 + 32) = 0x10800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806B0 = v36;
      int v37 = re::introspectionAllocator((re *)v36);
      long long v39 = re::introspect_AssetHandle((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "clearcoatRoughnessTexture";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v40 + 32) = 0xF000000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806B8 = v40;
      long long v41 = re::introspectionAllocator((re *)v40);
      long long v43 = re::introspect_AssetHandle((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = "anisotropyAngleTexture";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v44 + 32) = 0xD80000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806C0 = v44;
      uint64_t v45 = re::introspectionAllocator((re *)v44);
      uint64_t v47 = re::introspect_AssetHandle((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + 8) = "anisotropyLevelTexture";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v48 + 32) = 0xC00000000BLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806C8 = v48;
      uint64_t v49 = re::introspectionAllocator((re *)v48);
      uint64_t v51 = re::introspect_AssetHandle((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + 8) = "sheenColorTexture";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v52 + 32) = 0x1200000000CLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806D0 = v52;
      uint64_t v53 = re::introspectionAllocator((re *)v52);
      uint64_t v55 = re::introspect_AssetHandle((re *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + 8) = "ambientOcclusionTexture";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v56 + 32) = 0x180000000DLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806D8 = v56;
      uint64_t v57 = re::introspectionAllocator((re *)v56);
      id v59 = re::introspect_AssetHandle((re *)1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + 8) = "clearcoatNormalTexture";
      *(void *)(v60 + 16) = v59;
      *(void *)(v60 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v60 + 32) = 0x1380000000ELL;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + 48) = 0;
      *(void *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF806E0 = v60;
      __cxa_guard_release(&qword_26AF80640);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 14;
  *((void *)this + 8) = &qword_26AF80678;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialTextures>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialTextures>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialTextures>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::PbrMaterialTextures>;
  re::IntrospectionRegistry::add(this, v3);
  long long v61 = v63;
}

double re::internal::defaultConstruct<re::PbrMaterialTextures>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result = 0.0;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

void re::internal::defaultDestruct<re::PbrMaterialTextures>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

double re::internal::defaultConstructV2<re::PbrMaterialTextures>(_OWORD *a1)
{
  double result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::PbrMaterialTextures>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

void *re::allocInfo_PbrMaterialParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80650))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80850, "PbrMaterialParameters");
    __cxa_guard_release(&qword_26AF80650);
  }
  return &unk_26AF80850;
}

void re::initInfo_PbrMaterialParameters(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0x85876C7281FC1662;
  v20[1] = "PbrMaterialParameters";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80658, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF80658);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF80630;
      if (!qword_26AF80630)
      {
        uint64_t v7 = (re *)re::allocInfo_PbrMaterialConstants(v5);
        qword_26AF80630 = (uint64_t)v7;
        re::initInfo_PbrMaterialConstants(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "Constants";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v9 + 32) = 0x15000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80660 = v9;
      unsigned int v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_uint32_t((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "ConstantValid";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v13 + 32) = 0x1E400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80668 = v13;
      uint64_t v14 = (re *)re::introspectionAllocator((re *)v13);
      uint64_t v15 = v14;
      uint64_t v16 = (re *)qword_26AF80648;
      if (!qword_26AF80648)
      {
        uint64_t v16 = (re *)re::allocInfo_PbrMaterialTextures(v14);
        qword_26AF80648 = (uint64_t)v16;
        re::initInfo_PbrMaterialTextures(v16, v17);
      }
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + 8) = "Textures";
      *(void *)(v18 + 16) = v16;
      *(void *)(v18 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v18 + 32) = 3;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80670 = v18;
      __cxa_guard_release(&qword_26AF80658);
    }
  }
  *((void *)this + 2) = 0x1F000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 3;
  *((void *)this + 8) = &qword_26AF80660;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialParameters>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::PbrMaterialParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

double re::internal::defaultConstruct<re::PbrMaterialParameters>(int a1, int a2, re::PbrMaterialParameters *this)
{
  return re::PbrMaterialParameters::PbrMaterialParameters(this);
}

void re::internal::defaultDestruct<re::PbrMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

void re::internal::defaultDestructV2<re::PbrMaterialParameters>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_PbrMaterialParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PbrMaterialParameters", (uint64_t (*)(re::internal *))re::allocInfo_PbrMaterialParameters, (re::IntrospectionBase *(*)(void))re::initInfo_PbrMaterialParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PbrMaterialParameters>, this);
}

__n128 re::PbrMaterialConstants::asPbrConstants@<Q0>(re::PbrMaterialConstants *this@<X0>, const re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 && (uint64_t v5 = (unsigned __int8 *)*((void *)a2 + 19)) != 0) {
    unsigned int v6 = *v5;
  }
  else {
    unsigned int v6 = 0;
  }
  re::ColorGamut4F::as((uint64_t)this, v6, 1, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = *(void *)((char *)this + 20);
  *(_DWORD *)(a3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((_DWORD *)this + 7);
  *(void *)&long long v7 = re::ColorGamut3F::as((uint64_t *)this + 4, v6, 1);
  DWORD2(v7) = v8;
  long long v9 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v9;
  *(void *)(a3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&long long v10 = re::ColorGamut3F::as((uint64_t *)this + 9, v6, 1);
  DWORD2(v10) = v11;
  long long v12 = *((_OWORD *)this + 6);
  long long v13 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 80) = v10;
  *(_OWORD *)(a3 + 96) = v12;
  __n128 result = *((__n128 *)this + 8);
  *(_OWORD *)(a3 + 112) = v13;
  *(__n128 *)(a3 + 128) = result;
  return result;
}

re::TextureHandle *re::PbrMaterial::makeTextureHandle@<X0>(re::PbrMaterial *this@<X0>, re::TextureHandle *a2@<X8>)
{
  __n128 result = (re::TextureHandle *)re::AssetHandle::loadedAsset<re::TextureAsset>(this);
  if (result)
  {
    return re::TextureHandle::TextureHandle(a2, (re::TextureHandle *)((char *)result + 48));
  }
  else
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
  }
  return result;
}

void re::PbrMaterial::parameterTable(re::PbrMaterial *this@<X0>, const re::RenderManager *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 69);
  if (v4)
  {
    *a3 = v4;
LABEL_8:
    id v17 = (id)(v4 + 8);
    return;
  }
  re::make::shared::object<re::PbrParameterTable>(this, (uint64_t *)v18);
  uint64_t v7 = *((void *)this + 69);
  *((void *)this + 69) = *(void *)&v18[0];
  *(void *)&v18[0] = v7;
  if (v7) {

  }
  int v8 = (re::PbrMaterial *)((char *)this + 32);
  re::PbrMaterialConstants::asPbrConstants((re::PbrMaterial *)((char *)this + 368), a2, (uint64_t)v18);
  long long v9 = (_OWORD *)*((void *)this + 69);
  long long v10 = v18[6];
  v9[8] = v18[5];
  v9[9] = v10;
  long long v11 = v18[8];
  v9[10] = v18[7];
  v9[11] = v11;
  long long v12 = v18[2];
  long long v13 = v18[3];
  long long v14 = v18[0];
  v9[4] = v18[1];
  v9[5] = v12;
  long long v15 = v18[4];
  void v9[6] = v13;
  v9[7] = v15;
  uint64_t v9[3] = v14;
  *(_DWORD *)(*((void *)this + 69) + 192) = *((_DWORD *)this + 129);
  for (uint64_t i = 216; i != 440; i += 16)
  {
    re::PbrMaterial::makeTextureHandle(v8, (re::TextureHandle *)v18);
    re::TextureHandle::operator=((re::TextureHandle *)(*((void *)this + 69) + i), (re::TextureHandle *)v18);
    re::TextureHandle::invalidate((re::TextureHandle *)v18);
    int v8 = (re::PbrMaterial *)((char *)v8 + 24);
  }
  *((void *)this + 70) = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v4 = *((void *)this + 69);
  *a3 = v4;
  if (v4) {
    goto LABEL_8;
  }
}

uint64_t re::PbrMaterial::addRenderFrameParameterDelta(re::PbrMaterial *this, re::RenderManager *a2)
{
  uint64_t v3 = (re::DrawingManager *)*((void *)a2 + 13);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(v3, *((void *)this + 72)) & 1) != 0)
  {
    uint64_t v5 = *((void *)a2 + 17);
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v9 = *((void *)this + 71) & 0xFFFFFFFFFFFFFFFLL;
    if (v9 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v8 == 0xFFFFFFFFFFFFFFFLL) {
        return *((void *)this + 72);
      }
    }
    else if (v8 != 0xFFFFFFFFFFFFFFFLL && v9 == v8)
    {
      return *((void *)this + 72);
    }
    *((void *)this + 71) = v7 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v6 << 60);
    re::PbrMaterial::parameterTable(this, a2, &v13);
    *((void *)this + 72) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::PbrParameterDelta,re::PbrParameterTable>((uint64_t)v3, &v13);
    if (v13) {

    }
    return *((void *)this + 72);
  }
  *((void *)this + 72) = 0;
  uint64_t v10 = *((void *)this + 69);
  if (!v10) {
    return 0;
  }

  uint64_t result = 0;
  *((void *)this + 69) = 0;
  return result;
}

uint64_t re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(re::DrawingManager *a1, uint64_t a2)
{
  BOOL v4 = re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(a1);
  BOOL CanBeEnqueued = re::DrawingManager::renderFrameDeltasCanBeEnqueued(a1);
  int v6 = !CanBeEnqueued || v4;
  if (v6 == 1)
  {
    if (a2) {
      BOOL v7 = v4;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7 && CanBeEnqueued)
    {
      uint64_t v11 = a2;
      uint64_t v8 = (uint64_t)a1 + 624;
      re::DynamicOverflowArray<unsigned long long,1ul>::indexOf(v8, &v11, (uint64_t)v12);
      if (v12[0])
      {
        uint64_t v9 = v11;
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        objc_destroyWeak((id *)(v9 + 8));
        *(void *)(v9 + 8) = 0;
        re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::remove(v8, &v11);
      }
    }
  }
  return v6 ^ 1u;
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::PbrParameterDelta,re::PbrParameterTable>(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 40) << 60));
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 400, 16);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 3objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v6 = &unk_26E6E2CE0;
  objc_initWeak((id *)(v6 + 8), 0);
  *(void *)uint64_t v6 = &unk_26E6E2B38;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 32) = _Q0;
  *(void *)(v6 + 48) = 0x3F00000000000000;
  *(_DWORD *)(v6 + 56) = 1065353216;
  *(_OWORD *)(v6 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 80) = xmmword_2343825B0;
  *(void *)(v6 + 96) = 0;
  *(int32x4_t *)(v6 + 112) = vdupq_n_s32(0x3D23D70Au);
  *(_OWORD *)(v6 + 128) = xmmword_234376D50;
  *(_OWORD *)(v6 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_234376D50;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 3objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  uint64_t v12 = *a2;
  *(_WORD *)(v6 + 16) = 0;
  if (v12) {
    uint64_t v13 = (void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  *(_DWORD *)(v6 + objc_destroyWeak(this + 20) = 0;
  objc_storeWeak((id *)(v6 + 8), v13);
  if (!*(void *)(a1 + 624))
  {
    *(void *)(a1 + 62re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((void *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  uint64_t v15 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v15);
  return v6;
}

uint64_t re::PbrMaterialTextures::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = re::AssetHandle::operator=(a1, a2);
  re::AssetHandle::operator=(v4 + 24, a2 + 3);
  re::AssetHandle::operator=(a1 + 48, a2 + 6);
  re::AssetHandle::operator=(a1 + 72, a2 + 9);
  re::AssetHandle::operator=(a1 + 96, a2 + 12);
  re::AssetHandle::operator=(a1 + 120, a2 + 15);
  re::AssetHandle::operator=(a1 + 144, a2 + 18);
  re::AssetHandle::operator=(a1 + 168, a2 + 21);
  re::AssetHandle::operator=(a1 + 192, a2 + 24);
  re::AssetHandle::operator=(a1 + 216, a2 + 27);
  re::AssetHandle::operator=(a1 + 240, a2 + 30);
  re::AssetHandle::operator=(a1 + 264, a2 + 33);
  re::AssetHandle::operator=(a1 + 288, a2 + 36);
  re::AssetHandle::operator=(a1 + 312, a2 + 39);
  return a1;
}

uint64_t re::PbrParameterDelta::init(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  *(_DWORD *)(result + objc_destroyWeak(this + 20) = 0;
  return result;
}

void re::PbrParameterDelta::applyDeltaChange(id *this)
{
  WeakRetained = (char *)objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    if (*((unsigned char *)this + 16))
    {
      *((_DWORD *)WeakRetained + 46) = *((_DWORD *)this + 5);
      long long v4 = *((_OWORD *)this + 5);
      long long v5 = *((_OWORD *)this + 6);
      long long v6 = *((_OWORD *)this + 4);
      *(_OWORD *)(WeakRetained + 56) = *((_OWORD *)this + 3);
      *(_OWORD *)(WeakRetained + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
      *(_OWORD *)(WeakRetained + 88) = v4;
      *(_OWORD *)(WeakRetained + 72) = v6;
      long long v7 = *((_OWORD *)this + 9);
      long long v8 = *((_OWORD *)this + 10);
      long long v9 = *((_OWORD *)this + 8);
      *(_OWORD *)(WeakRetained + 1objc_destroyWeak(this + 20) = *((_OWORD *)this + 7);
      *(_OWORD *)(WeakRetained + 168) = v8;
      *(_OWORD *)(WeakRetained + 152) = v7;
      *(_OWORD *)(WeakRetained + 136) = v9;
      *(_OWORD *)(WeakRetained + 40) = *((_OWORD *)this + 2);
    }
    if (*((unsigned char *)this + 17))
    {
      uint64_t v10 = (char *)(this + 22);
      if (WeakRetained + 208 != v10)
      {
        for (uint64_t i = 0; i != 224; i += 16)
          re::TextureHandle::operator=((re::TextureHandle *)&v3[i + 208], (re::TextureHandle *)&v10[i]);
      }
    }
  }
}

double re::PbrMaterialParameters::PbrMaterialParameters(re::PbrMaterialParameters *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + objc_destroyWeak(this + 20) = 0u;
  *((_OWORD *)this + 21) = _Q1;
  *((unsigned char *)this + 352) = 0;
  *((_DWORD *)this + 89) = 0;
  *((void *)this + 45) = 0x3F8000003F000000;
  *((void *)this + 46) = 0;
  *(void *)((char *)this + 373) = 0;
  *((_OWORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_2343825B0;
  *((_OWORD *)this + 25) = xmmword_2343825C0;
  *((_DWORD *)this + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1025758986;
  *((unsigned char *)this + 4objc_destroyWeak(this + 20) = 0;
  *(void *)&double result = 1065353216;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = xmmword_234376D50;
  *((_OWORD *)this + 28) = xmmword_234376D50;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 58) = 0;
  *((_DWORD *)this + 122) = 0;
  return result;
}

int64x2_t re::PbrMaterial::PbrMaterial(uint64_t a1, int a2)
{
  re::PbrMaterialParameters::PbrMaterialParameters(a1 + 32, a2);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6E2B88;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 54re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  int64x2_t result = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 560) = result;
  *(void *)(a1 + 576) = 0;
  return result;
}

double re::PbrMaterialParameters::PbrMaterialParameters(uint64_t a1, int a2)
{
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 3objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(unsigned char *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = 0x3F8000003F000000;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 373) = 0;
  *(_OWORD *)(a1 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_2343825B0;
  *(_OWORD *)(a1 + 400) = xmmword_2343825C0;
  *(_DWORD *)(a1 + 416) = 1025758986;
  *(unsigned char *)(a1 + 4objc_destroyWeak(this + 20) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a1 + 432) = xmmword_234376D50;
  *(_OWORD *)(a1 + 448) = xmmword_234376D50;
  *(void *)(a1 + 46re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = a2;
  *(void *)(a1 + 48re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

void re::PbrMaterial::~PbrMaterial(re::PbrMaterial *this)
{
  re::PbrMaterial::~PbrMaterial(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;

  *(void *)this = &unk_26E6E2B88;
  unint64_t v2 = *((void *)this + 69);
  if (v2)
  {

    *((void *)this + 69) = 0;
  }
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 528));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 344));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 320));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 296));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 272));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 248));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 176));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 152));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 128));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 104));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 56));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 32));
}

double re::make::shared::object<re::PbrParameterTable>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 448, 16);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 3objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E6E2C00;
  *(void *)(v4 + 32) = &unk_26E6E2C48;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v4 + 48) = _Q0;
  *(void *)(v4 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x3F00000000000000;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = xmmword_2343825B0;
  *(void *)(v4 + 112) = 0;
  *(int32x4_t *)(v4 + 128) = vdupq_n_s32(0x3D23D70Au);
  *(_OWORD *)(v4 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_234376D50;
  *(_OWORD *)(v4 + 160) = xmmword_234376D50;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(void *)(v4 + 208) = &unk_26E6E2C88;
  double result = 0.0;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 42re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *a2 = v4;
  return result;
}

void re::PbrParameterTable::~PbrParameterTable(re::PbrParameterTable *this)
{
  *(void *)this = &unk_26E6E2C00;
  *((void *)this + 26) = &unk_26E6E2C88;
  for (uint64_t i = 424; i != 200; i -= 16)
    re::TextureHandle::invalidate((re::PbrParameterTable *)((char *)this + i));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t i;
  uint64_t vars8;

  *(void *)this = &unk_26E6E2C00;
  *((void *)this + 26) = &unk_26E6E2C88;
  for (uint64_t i = 424; i != 200; i -= 16)
    re::TextureHandle::invalidate((re::PbrParameterTable *)((char *)this + i));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::PbrConstantSource::lookup(re::PbrConstantSource *this, const re::WeakStringID *a2)
{
  uint64_t v4 = re::PbrConstantSource::constantNameMap(this);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v4, a2);
  if (v5 == -1) {
    return 0;
  }
  uint64_t v6 = v4[1] + 16 * v5;
  if (((*((_DWORD *)this + 40) >> *(unsigned char *)(v6 + 12)) & 1) == 0) {
    return 0;
  }
  else {
    return v6 + 8;
  }
}

unint64_t re::PbrConstantSource::layoutHash(re::PbrConstantSource *this)
{
  unsigned int v1 = 73244475 * (*((_DWORD *)this + 40) ^ HIWORD(*((_DWORD *)this + 40)));
  unint64_t v2 = (73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16);
  return (re::PbrConstantSource::constantNameMap(this)[6] + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
}

uint64_t re::PbrConstantSource::data(re::PbrConstantSource *this)
{
  return (uint64_t)this + 16;
}

uint64_t re::PbrTextureSource::lookup@<X0>(re::PbrTextureSource *this@<X0>, const re::WeakStringID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = re::PbrTextureSource::textureNameMap(this);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v6, a2);
  if (result != -1
    && (v8 = v6[1] + 16 * result, unint64_t v9 = *(unsigned __int8 *)(v8 + 9), v9 <= 0xD)
    && (uint64_t v10 = (char *)this + 16 * v9, *((void *)v10 + 2))
    && *((void *)v10 + 1))
  {
    *(unsigned char *)a3 = 1;
    *(_WORD *)(a3 + 1) = *(_WORD *)(v8 + 8);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

unint64_t re::PbrTextureSource::layoutHash(re::PbrTextureSource *this)
{
  unint64_t v2 = re::PbrTextureSource::textureNameMap(this);
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    if (*(void *)((char *)this + v3 + 16)) {
      BOOL v5 = *(void *)((char *)this + v3 + 8) != 0;
    }
    else {
      BOOL v5 = 0;
    }
    unsigned int v4 = 2 * (v4 | v5);
    v3 += 16;
  }
  while (v3 != 224);
  unsigned int v6 = 73244475 * ((73244475 * (v4 ^ HIWORD(v4))) ^ ((73244475 * (v4 ^ HIWORD(v4))) >> 16));
  return (v2[6]
        + ((unint64_t)(v6 ^ HIWORD(v6)) << 6)
        + ((unint64_t)(v6 ^ HIWORD(v6)) >> 2)
        - 0x61C8864680B583E9) ^ v6 ^ HIWORD(v6);
}

uint64_t re::PbrTextureSource::size(re::PbrTextureSource *this)
{
  return 14;
}

void re::PbrTextureSource::textureAt(os_unfair_lock_s **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 > 0xD) {
    *a3 = 0;
  }
  else {
    re::TextureHandle::metalTexture(&this[2 * a2 + 1], a3);
  }
}

BOOL re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::remove(uint64_t a1, void *a2)
{
  re::DynamicOverflowArray<unsigned long long,1ul>::indexOf(a1, a2, (uint64_t)v5);
  int v3 = v5[0];
  if (v5[0]) {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::removeAt(a1, v6);
  }
  return v3 != 0;
}

uint64_t re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    if (*(unsigned char *)(result + 16)) {
      uint64_t v3 = result + 24;
    }
    else {
      uint64_t v3 = *(void *)(result + 32);
    }
    *(void *)(v3 + 8 * a2) = *(void *)(v3 + 8 * v2 - 8);
  }
  int v4 = *(_DWORD *)(result + 16);
  *(void *)(result + 8) = v2 - 1;
  *(_DWORD *)(result + 16) = v4 + 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(uint64_t a1, void *a2)
{
  uint64_t result = re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(v5 + 8 * v6) = *a2;
  *(void *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(void *result, unint64_t a2)
{
  int v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        long long v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17 & 0xFFFFFFFE;
          unint64_t v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  unsigned int v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *((void *)result + 1);
    if (*((unsigned char *)result + 16)) {
      unint64_t v3 = 8;
    }
    else {
      unint64_t v3 = *((void *)result + 3);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *((void *)v1 + 1) + 1;
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (a2 <= 8) {
      return result;
    }
    unint64_t v5 = 16;
  }
  else
  {
    unint64_t v4 = *((void *)result + 3);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, a2);
}

void re::ecs2::NetworkTransferReporterSystem::willAddSystemToECSService(re::ecs2::NetworkTransferReporterSystem *this)
{
  unint64_t v2 = re::globalAllocators(this);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)(v3 + 52) = 0x7FFFFFFFLL;
  *((void *)this + 13) = v3;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::ServiceLocator::serviceOrNull<re::TraceService>(v4);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  int v6 = (re *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v5);
  if (v6 && *((void *)v6 + 320))
  {
    *((void *)this + 16) = RESyncTransferReportObserverCreate();
    uint64_t v9 = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZN2re4ecs229NetworkTransferReporterSystem25willAddSystemToECSServiceEv_block_invoke;
    uint64_t v12 = &__block_descriptor_tmp_7;
    uint64_t v13 = this;
    RESyncTransferReportObserverOnTransferReportSend();
    RESyncServiceAddTransferReportObserver();
  }
  else
  {
    int v7 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_fault_impl(&dword_233120000, v7, OS_LOG_TYPE_FAULT, "[TransferReport] Failed to subscribe to transferReportSendEvent, NetworkSyncService not found.", v8, 2u);
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::TraceService>(uint64_t a1)
{
  {
    re::introspect<re::TraceService>(void)::info = re::introspect_TraceService(0);
  }
  uint64_t v2 = re::introspect<re::TraceService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

_DWORD *___ZN2re4ecs229NetworkTransferReporterSystem25willAddSystemToECSServiceEv_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  unint64_t v27 = v13 ^ (v13 >> 31);
  uint64_t v28 = a4;
  uint64_t v14 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(*(void *)(v12 + 104) + 16, (uint64_t *)&v27);
  if (!v14)
  {
    uint64_t v15 = *(void *)(v12 + 104) + 16;
    uint64_t v16 = v27;
    IsLocal = (_anonymous_namespace_ *)RESyncNetSessionGetIsLocal();
    uint64_t v21 = v16;
    v22[0] = (_BYTE)IsLocal;
    memset(&v22[8], 0, 36);
    *(void *)long long v23 = 0x7FFFFFFFLL;
    uint64_t v14 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addNew(v15, (uint64_t *)&v27, &v21);
    re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v22[8]);
  }
  uint64_t v18 = v14 + 16;
  long long v19 = (_DWORD *)re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v14 + 16, &v28);
  if (!v19)
  {
    uint64_t v21 = v28;
    memset(v22, 0, 36);
    *(void *)&v22[36] = 0x7FFFFFFFLL;
    *(_OWORD *)&v23[4] = 0u;
    long long v24 = 0u;
    int v25 = 0;
    uint64_t v26 = 0x7FFFFFFFLL;
    long long v19 = (_DWORD *)re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v18, &v28, &v21);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)&v23[4]);
    re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v22);
  }
  return re::PeerTransferReport::addEntry(v19, a5, a6, a7, a8 >> 3);
}

uint64_t re::ecs2::NetworkTransferReporterSystem::willRemoveSystemFromECSService(re::ecs2::NetworkTransferReporterSystem *this)
{
  re::internal::destroyPersistent<re::TransferReport>((re *)"willRemoveSystemFromECSService", 49, *((void *)this + 13));
  *((void *)this + 13) = 0;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3 && *(void *)(v3 + 2560)) {
    RESyncServiceRemoveTransferReportObserver();
  }
  return RESyncRelease();
}

re *re::internal::destroyPersistent<re::TransferReport>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    v5.n128_f64[0] = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)(a3 + 16));
    int v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 40);
    return (re *)v6(v4, a3, v5);
  }
  return result;
}

void re::ecs2::NetworkTransferReporterSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 3105, a1);
  if (a3 == 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v6 = *(double *)(a1 + 120);
    if (Current - v6 >= 1.0)
    {
      int v7 = *(double **)(a1 + 104);
      double *v7 = v6;
      v7[1] = Current;
      *(double *)(a1 + 1objc_destroyWeak(this + 20) = Current;
      uint64_t v8 = *(void *)(a1 + 112);
      if (v8)
      {
        uint64_t v16 = v7;
        uint64_t v9 = (re *)(*(uint64_t (**)(uint64_t, double **))(*(void *)v8 + 24))(v8, &v16);
        uint64_t v10 = v16;
        uint64_t v16 = 0;
        if (v10)
        {
          uint64_t v11 = re::globalAllocators(v9)[2];
          double v12 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v10 + 2);
          uint64_t v9 = (re *)(*(uint64_t (**)(uint64_t, double *, double))(*(void *)v11 + 40))(v11, v10, v12);
        }
        unint64_t v13 = re::globalAllocators(v9);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 64, 8);
        *(_OWORD *)uint64_t v14 = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_DWORD *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(void *)(v14 + 52) = 0x7FFFFFFFLL;
        *(void *)(a1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
      }
      else
      {
        double *v7 = 0.0;
        v7[1] = 0.0;
        re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)(v7 + 2));
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
}

uint64_t re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 88 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 88 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + (v4 << 7) + 16) != v2)
  {
    while (1)
    {
      uint64_t v4 = *(_DWORD *)(v6 + (v4 << 7) + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + (v4 << 7) + 16) == v2) {
        return v6 + (v4 << 7) + 24;
      }
    }
    return 0;
  }
  return v6 + (v4 << 7) + 24;
}

unint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 7);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 7) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 7) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 7);
  return v12 + 24;
}

void *re::ecs2::allocInfo_NetworkTransferReporterSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_144, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_144))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF808D0, "NetworkTransferReporterSystem");
    __cxa_guard_release(&_MergedGlobals_144);
  }
  return &unk_26AF808D0;
}

void re::ecs2::initInfo_NetworkTransferReporterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB7FCF8038E4345D2;
  v5[1] = "NetworkTransferReporterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_NetworkTransferReporterSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkTransferReporterSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkTransferReporterSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkTransferReporterSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::NetworkTransferReporterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 2);
  *unint64_t v3 = &unk_26E6E2D08;
  v3[15] = 0;
  v3[16] = 0;
  v3[14] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 2);
  void *v1 = &unk_26E6E2D08;
  v1[15] = 0;
  v1[16] = 0;
  v1[14] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::NetworkTransferReporterSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_NetworkTransferReporterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkTransferReporterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkTransferReporterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkTransferReporterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkTransferReporterSystem>, this);
}

void re::ecs2::NetworkTransferReporterSystem::~NetworkTransferReporterSystem(re::ecs2::NetworkTransferReporterSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::NetworkTransferReporterSystem::typeInfo(re::ecs2::NetworkTransferReporterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkTransferReporterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkTransferReporterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkTransferReporterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkTransferReporterSystem>, 0);
}

double re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 128;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)(a1 + 80));
    return re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

double re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 40));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 88;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a3;
  *(void *)(*(void *)(a1 + 16) + v14 + 16) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  uint64_t v16 = *a5;
  char v17 = *((unsigned char *)a5 + 8);
  *(_OWORD *)(v15 + 40) = 0u;
  v15 += 40;
  *(unsigned char *)(v15 - 8) = v17;
  *(void *)(v15 - 16) = v16;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_DWORD *)(v15 + 32) = 0;
  *(void *)(v15 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v15, a5 + 2);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 128;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 7) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 7) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 7) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 7)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 7) + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + (v10 << 7);
  *(void *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a5;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_DWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(void *)(v14 + 68) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v14 + 32), a5 + 1);
  *(_OWORD *)(v14 + 80) = 0u;
  v14 += 80;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5 + 7);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

id re::internal::defaultRetain<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ShadowProxyComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_145, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_145))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80960, "ShadowProxyComponent");
    __cxa_guard_release(&_MergedGlobals_145);
  }
  return &unk_26AF80960;
}

void re::ecs2::initInfo_ShadowProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x232AB817E529F1ELL;
  v9[1] = "ShadowProxyComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80958, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80958);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80950 = v7;
      __cxa_guard_release(&qword_26AF80958);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((void *)this + 8) = &qword_26AF80950;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowProxyComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowProxyComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowProxyComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::ShadowProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::ecs2::ShadowProxyComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E2D90;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 32) = result;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowProxyComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E2D90;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 32) = result;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ShadowProxyComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ShadowProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowProxyComponent>, this);
}

void re::ecs2::ShadowProxyComponent::~ShadowProxyComponent(re::ecs2::ShadowProxyComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::internal::buildCollisionShapeAssetData(re::internal *this, re::CollisionShape *a2)
{
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v11 = 0x7FFFFFFFLL;
  int v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v8 = 0x7FFFFFFFLL;
  uint64_t v3 = re::globalAllocators(this);
  uint64_t v4 = re::convertToSerializable(this, (uint64_t)v9, (uint64_t)v6, v3[2]);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v6);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v9);
  return v4;
}

re **re::internal::buildCollisionShape(uint64_t a1, __n128 a2)
{
  a2.n128_u64[0] = *(void *)(a1 + 12);
  a2.n128_u32[2] = *(_DWORD *)(a1 + 20);
  __n128 v9 = a2;
  uint64_t v3 = re::globalAllocators((re *)a1);
  uint64_t v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, __n128 *))(*(void *)v2 + 32))(v2, v3[2], &v9);
  uint64_t v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  int v7 = re::globalAllocators(v6);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 16, 8);
  *double result = v6;
  result[1] = v4;
  return result;
}

re **re::internal::buildCollisionShape(uint64_t a1)
{
  long long v8 = *(_OWORD *)(a1 + 20);
  uint64_t v2 = re::globalAllocators((re *)a1);
  uint64_t v3 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v1 + 32))(v1, v2[2], &v8);
  long long v5 = (re *)re::internal::buildCollisionShapeAssetData(v3, v4);
  uint64_t v6 = re::globalAllocators(v5);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 16, 8);
  *double result = v5;
  result[1] = v3;
  return result;
}

re **re::internal::buildCollisionShape(float *a1)
{
  float v1 = a1[1];
  float v2 = a1[2];
  uint64_t v4 = re::globalAllocators((re *)a1);
  long long v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v3 + 120))(v3, v4[2], v1, v2);
  int v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  long long v8 = re::globalAllocators(v7);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 16, 8);
  *double result = v7;
  result[1] = v5;
  return result;
}

{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t *v4;
  re::internal *v5;
  re::CollisionShape *v6;
  re *v7;
  uint64_t *v8;
  re **result;

  float v1 = a1[1];
  float v2 = a1[3];
  uint64_t v4 = re::globalAllocators((re *)a1);
  long long v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v3 + 128))(v3, v4[2], v1, v2);
  int v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  long long v8 = re::globalAllocators(v7);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 16, 8);
  *double result = v7;
  result[1] = v5;
  return result;
}

{
  float v1;
  uint64_t v2;
  uint64_t *v3;
  re::internal *v4;
  re::CollisionShape *v5;
  re *v6;
  uint64_t *v7;
  re **result;

  float v1 = a1[1];
  uint64_t v3 = re::globalAllocators((re *)a1);
  uint64_t v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v2 + 112))(v2, v3[2], v1);
  uint64_t v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  int v7 = re::globalAllocators(v6);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 16, 8);
  *double result = v6;
  result[1] = v4;
  return result;
}

{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t *v4;
  re::internal *v5;
  re::CollisionShape *v6;
  re *v7;
  uint64_t *v8;
  re **result;

  float v2 = a1[2];
  float v1 = a1[3];
  uint64_t v4 = re::globalAllocators((re *)a1);
  long long v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v3 + 40))(v3, v4[2], v1, v2);
  int v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  long long v8 = re::globalAllocators(v7);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 16, 8);
  *double result = v7;
  result[1] = v5;
  return result;
}

re **re::internal::buildCollisionShape(re *a1)
{
  long long v9 = xmmword_23435FD50;
  switch(*((_DWORD *)a1 + 6))
  {
    case 1:
      long long v1 = xmmword_23435FD70;
      goto LABEL_7;
    case 2:
      long long v1 = xmmword_23435FD60;
      goto LABEL_7;
    case 3:
      long long v1 = xmmword_23435FD90;
      goto LABEL_7;
    case 4:
      long long v1 = xmmword_23435FD80;
      goto LABEL_7;
    case 5:
      long long v1 = xmmword_234382760;
LABEL_7:
      long long v9 = v1;
      break;
    default:
      break;
  }
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, double))(*(void *)v2 + 104))(v2, v3[2], &v9, 0.0);
  uint64_t v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  int v7 = re::globalAllocators(v6);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 16, 8);
  *double result = v6;
  result[1] = v4;
  return result;
}

re **re::internal::buildCollisionShape(re *a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  a2.i32[0] = *((_DWORD *)a1 + 1);
  *(float *)a3.i32 = *(float *)a2.i32 * -0.5;
  double v3 = *(float *)a2.i32;
  *(float *)&__int32 v4 = *(float *)a2.i32 * 0.433013;
  *(float *)a2.i32 = *(float *)a2.i32 * 0.5;
  float64x2_t v5 = vmulq_n_f64((float64x2_t)xmmword_234382770, v3);
  *(float32x2_t *)&v5.f64[0] = vcvt_f32_f64(v5);
  int32x4_t v6 = vzip1q_s32(a3, (int32x4_t)v5);
  v6.i32[2] = v4;
  int32x4_t v7 = vzip1q_s32(a2, (int32x4_t)v5);
  v7.i32[2] = v4;
  LODWORD(v8) = 0;
  float v9 = v3 * 0.408248;
  *((float *)&v8 + 1) = v9;
  *(float *)&double v3 = v3 * 0.144338;
  *((void *)&v8 + 1) = LODWORD(v3);
  v17[0] = v6;
  v17[1] = v7;
  v17[2] = v8;
  v17[3] = v7;
  int8x16_t v18 = vextq_s8(vextq_s8((int8x16_t)0, (int8x16_t)0, 4uLL), (int8x16_t)v5, 0xCuLL);
  long long v19 = v8;
  int8x16_t v20 = v18;
  int32x4_t v21 = v6;
  long long v22 = v8;
  int32x4_t v23 = v7;
  int32x4_t v24 = v6;
  int8x16_t v25 = v18;
  uint64_t v11 = re::globalAllocators(a1);
  signed int v12 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)v10 + 56))(v10, v11[2], v17, 12);
  uint64_t v14 = (re *)re::internal::buildCollisionShapeAssetData(v12, v13);
  uint64_t v15 = re::globalAllocators(v14);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 16, 8);
  *double result = v14;
  result[1] = v12;
  return result;
}

re **re::internal::buildCollisionShape(uint64_t a1, double a2, double a3, double a4, double a5, __n128 a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  float32x2_t v6 = vmul_f32(*(float32x2_t *)(a1 + 4), (float32x2_t)0x3F0000003F000000);
  a6.n128_u64[0] = (unint64_t)vneg_f32(v6);
  __n128 v7 = a6;
  v7.n128_f32[2] = *(float *)(a1 + 12) * 0.5;
  __n128 v8 = a6;
  v8.n128_u32[0] = v6.i32[0];
  __n128 v9 = v8;
  v9.n128_f32[2] = v7.n128_f32[2];
  v8.n128_f32[2] = -v7.n128_f32[2];
  a6.n128_f32[2] = -v7.n128_f32[2];
  LODWORD(v10) = 0;
  HIDWORD(v10) = v6.i32[1];
  v18[0] = v7;
  v18[1] = v9;
  void v18[2] = v10;
  uint64_t v18[3] = v9;
  v18[4] = v8;
  v18[5] = v10;
  void v18[6] = v8;
  v18[7] = a6;
  v18[8] = v10;
  _OWORD v18[9] = a6;
  v18[10] = v8;
  v18[11] = v7;
  signed int v12 = re::globalAllocators((re *)a1);
  uint64_t v13 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)v11 + 56))(v11, v12[2], v18, 12);
  uint64_t v15 = (re *)re::internal::buildCollisionShapeAssetData(v13, v14);
  uint64_t v16 = re::globalAllocators(v15);
  double result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 16, 8);
  *double result = v15;
  result[1] = v13;
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 96 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 96 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 96 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add<int>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::internal::shadows::generateAABBsForCluster(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  uint64_t v170 = 0x7FFFFFFFLL;
  uint64_t v5 = *a1;
  v171.i64[0] = v5;
  if (v5)
  {
    *(_OWORD *)long long buf = xmmword_23435FD50;
    long long v178 = xmmword_23435FD60;
    long long v179 = xmmword_23435FD80;
    long long v180 = xmmword_23435FBB0;
    re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v171, (long long *)buf);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 && (*(unsigned char *)(v6 + 288) & 0x80) != 0) {
      uint64_t v6 = 0;
    }
    v173.i64[0] = v6;
    *(_OWORD *)long long buf = xmmword_23435FD50;
    long long v178 = xmmword_23435FD60;
    long long v179 = xmmword_23435FD80;
    long long v180 = xmmword_23435FBB0;
    re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v173, (long long *)buf);
    v165.i64[1] = 0;
    float32x4_t v163 = 0u;
    long long v164 = 0u;
    v165.i32[0] = 0;
    *(void *)long long buf = v5;
    re::Queue<re::internal::AssetLoadItem *>::enqueue(&v163, buf);
    if ((void)v164)
    {
      while (1)
      {
        unint64_t v8 = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)&v163, v7);
        unint64_t v9 = v8;
        uint64_t v10 = *(void *)(v8 + 24);
        if (v10)
        {
          if ((*(unsigned char *)(v10 + 288) & 0x80) != 0) {
            unint64_t v11 = 0;
          }
          else {
            unint64_t v11 = *(void *)(v8 + 24);
          }
        }
        else
        {
          unint64_t v11 = 0;
        }
        uint64_t v12 = *(void *)(v8 + 240);
        unint64_t v13 = v167;
        if ((void)v167)
        {
          unint64_t v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
          unint64_t v15 = (v14 ^ (v14 >> 31)) % DWORD2(v168);
          uint64_t v16 = v168;
          uint64_t v17 = *(unsigned int *)(*((void *)&v167 + 1) + 4 * v15);
          if (v17 != 0x7FFFFFFF)
          {
            while (*(void *)(v168 + 96 * v17 + 16) != v11)
            {
              uint64_t v17 = *(_DWORD *)(v168 + 96 * v17 + 8) & 0x7FFFFFFF;
              if (v17 == 0x7FFFFFFF) {
                goto LABEL_17;
              }
            }
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v16 = v168;
        }
LABEL_17:
        LODWORD(v17) = 0x7FFFFFFF;
LABEL_18:
        float32x4_t v19 = (float32x4_t)xmmword_23435FD60;
        float32x4_t v18 = (float32x4_t)xmmword_23435FD50;
        long long v21 = xmmword_23435FBB0;
        float32x4_t v20 = (float32x4_t)xmmword_23435FD80;
        if (v5 != v8)
        {
          float32x4_t v19 = (float32x4_t)xmmword_23435FD60;
          float32x4_t v18 = (float32x4_t)xmmword_23435FD50;
          long long v21 = xmmword_23435FBB0;
          float32x4_t v20 = (float32x4_t)xmmword_23435FD80;
          if (v12)
          {
            float v22 = *(float *)(v12 + 48);
            float v23 = *(float *)(v12 + 52);
            float v24 = v22 + v22;
            float v25 = v23 + v23;
            float v26 = *(float *)(v12 + 56);
            float v27 = *(float *)(v12 + 60);
            float v28 = v26 + v26;
            float v29 = v22 * (float)(v22 + v22);
            float v30 = v23 * (float)(v23 + v23);
            float v31 = v26 * (float)(v26 + v26);
            float v32 = v24 * v23;
            float v33 = v24 * v26;
            float v34 = v25 * v26;
            float v35 = v24 * v27;
            float v36 = v25 * v27;
            float v37 = v28 * v27;
            v38.i32[3] = 0;
            v38.f32[0] = 1.0 - (float)(v30 + v31);
            v38.f32[1] = v32 + v37;
            v38.f32[2] = v33 - v36;
            v39.i32[3] = 0;
            v39.f32[0] = v32 - v37;
            v39.f32[1] = 1.0 - (float)(v29 + v31);
            v39.f32[2] = v34 + v35;
            v40.i32[3] = 0;
            v40.f32[0] = v33 + v36;
            v40.f32[1] = v34 - v35;
            v40.f32[2] = 1.0 - (float)(v29 + v30);
            float32x4_t v41 = *(float32x4_t *)(v12 + 32);
            float32x4_t v18 = vmulq_n_f32(v38, v41.f32[0]);
            float32x4_t v19 = vmulq_n_f32(v39, *(float *)vshrq_n_u64((uint64x2_t)v41, 0x20uLL).i32);
            float32x4_t v20 = vmulq_laneq_f32(v40, v41, 2);
            long long v21 = *(_OWORD *)(v12 + 64);
            HIDWORD(v21) = 1.0;
          }
        }
        unint64_t v42 = 0;
        long long v43 = (float32x4_t *)(v16 + 96 * v17);
        float32x4_t v44 = v43[2];
        float32x4_t v45 = v43[3];
        v43 += 2;
        float32x4_t v46 = v43[2];
        float32x4_t v47 = v43[3];
        float32x4_t v173 = v18;
        float32x4_t v174 = v19;
        float32x4_t v175 = v20;
        long long v176 = v21;
        do
        {
          *(float32x4_t *)&buf[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v173 + v42))), v45, *(float32x2_t *)&v173.f32[v42 / 4], 1), v46, *(float32x4_t *)((char *)&v173 + v42), 2), v47, *(float32x4_t *)((char *)&v173 + v42), 3);
          v42 += 16;
        }
        while (v42 != 64);
        long long v48 = *(_OWORD *)buf;
        float32x4_t v49 = (float32x4_t)v178;
        long long v50 = v179;
        long long v51 = v180;
        unint64_t v52 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        unint64_t v53 = v52 ^ (v52 >> 31);
        if (v13)
        {
          unint64_t v13 = v53 % DWORD2(v168);
          for (uint64_t i = *(unsigned int *)(*((void *)&v167 + 1) + 4 * v13);
                i != 0x7FFFFFFF;
                LODWORD(i) = *(_DWORD *)(v16 + 96 * i + 8) & 0x7FFFFFFF)
          {
            if (*(void *)(v16 + 96 * i + 16) == v8) {
              goto LABEL_34;
            }
          }
        }
        unsigned int v55 = v170;
        if (v170 == 0x7FFFFFFF)
        {
          unsigned int v55 = v169;
          unsigned int v56 = v169;
          if (v169 == DWORD2(v168))
          {
            float32x4_t v157 = (float32x4_t)v178;
            long long v158 = *(_OWORD *)buf;
            long long v155 = v180;
            long long v156 = v179;
            re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v167, 2 * HIDWORD(v168));
            long long v51 = v155;
            long long v50 = v156;
            float32x4_t v49 = v157;
            long long v48 = v158;
            unsigned int v56 = v169;
            unint64_t v13 = v53 % DWORD2(v168);
            uint64_t v16 = v168;
          }
          unsigned int v169 = v56 + 1;
          int v57 = *(_DWORD *)(v16 + 96 * v55 + 8);
        }
        else
        {
          int v57 = *(_DWORD *)(v16 + 96 * v170 + 8);
          LODWORD(v170) = v57 & 0x7FFFFFFF;
        }
        uint64_t v58 = v16 + 96 * v55;
        *(_DWORD *)(v58 + 8) = v57 | 0x80000000;
        uint64_t v59 = *((void *)&v167 + 1);
        *(_DWORD *)(v58 + 8) = *(_DWORD *)(*((void *)&v167 + 1) + 4 * v13) | 0x80000000;
        *(void *)uint64_t v58 = v53;
        *(void *)(v58 + 16) = v9;
        *(_OWORD *)(v58 + 32) = v48;
        *(float32x4_t *)(v58 + 48) = v49;
        *(_OWORD *)(v58 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v50;
        *(_OWORD *)(v58 + 80) = v51;
        *(_DWORD *)(v59 + 4 * v13) = v55;
        ++HIDWORD(v168);
        ++HIDWORD(v170);
LABEL_34:
        uint64_t v60 = *(void *)(v9 + 328);
        unint64_t v61 = v164;
        if (v60)
        {
          long long v62 = *(uint64_t **)(v9 + 344);
          unint64_t v63 = v163.u64[1];
          uint64_t v64 = 8 * v60;
          do
          {
            uint64_t v65 = *v62;
            unint64_t v7 = v61 + 1;
            if (v61 + 1 >= v63)
            {
              re::Queue<re::internal::AssetLoadItem *>::growCapacity(&v163, v7);
              unint64_t v63 = v163.u64[1];
              unint64_t v61 = v164;
              unint64_t v7 = v164 + 1;
            }
            *(void *)(v165.i64[1] + 8 * ((*((void *)&v164 + 1) + v61) % v63)) = v65;
            *(void *)&long long v164 = v7;
            ++v165.i32[0];
            ++v62;
            unint64_t v61 = v7;
            v64 -= 8;
          }
          while (v64);
          if (!v7) {
            break;
          }
        }
        else
        {
          unint64_t v7 = v164;
          if (!(void)v164) {
            break;
          }
        }
      }
    }
    if (v163.i64[0] && v165.i64[1]) {
      (*(void (**)(void))(*(void *)v163.i64[0] + 40))();
    }
  }
  else
  {
    uint64_t v66 = a1[3];
    if (v66)
    {
      long long v67 = (uint64_t *)a1[5];
      uint64_t v68 = 8 * v66;
      do
      {
        v173.i64[0] = *v67;
        uint64_t v69 = *(void *)(v173.i64[0] + 240);
        float32x4_t v70 = (float32x4_t)xmmword_23435FD50;
        float32x4_t v71 = (float32x4_t)xmmword_23435FD60;
        float32x4_t v72 = (float32x4_t)xmmword_23435FD80;
        long long v73 = xmmword_23435FBB0;
        if (v69)
        {
          float v74 = *(float *)(v69 + 48);
          float v75 = *(float *)(v69 + 52);
          float v76 = v74 + v74;
          float v77 = v75 + v75;
          float v78 = *(float *)(v69 + 56);
          float v79 = *(float *)(v69 + 60);
          float v80 = v78 + v78;
          float v81 = v74 * (float)(v74 + v74);
          float v82 = v75 * (float)(v75 + v75);
          float v83 = v78 * (float)(v78 + v78);
          float v84 = v76 * v75;
          float v85 = v76 * v78;
          float v86 = v77 * v78;
          float v87 = v76 * v79;
          float v88 = v77 * v79;
          float v89 = v80 * v79;
          v90.i32[3] = 0;
          v90.f32[0] = 1.0 - (float)(v82 + v83);
          v90.f32[1] = v84 + v89;
          v90.f32[2] = v85 - v88;
          v91.i32[3] = 0;
          v91.f32[0] = v84 - v89;
          v91.f32[1] = 1.0 - (float)(v81 + v83);
          v91.f32[2] = v86 + v87;
          v92.i32[3] = 0;
          v92.f32[0] = v85 + v88;
          v92.f32[1] = v86 - v87;
          v92.f32[2] = 1.0 - (float)(v81 + v82);
          float32x4_t v93 = *(float32x4_t *)(v69 + 32);
          float32x4_t v70 = vmulq_n_f32(v90, v93.f32[0]);
          float32x4_t v71 = vmulq_n_f32(v91, *(float *)vshrq_n_u64((uint64x2_t)v93, 0x20uLL).i32);
          float32x4_t v72 = vmulq_laneq_f32(v92, v93, 2);
          long long v73 = *(_OWORD *)(v69 + 64);
          HIDWORD(v73) = 1.0;
        }
        *(float32x4_t *)long long buf = v70;
        long long v178 = (__int128)v71;
        long long v179 = (__int128)v72;
        long long v180 = v73;
        re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v173, (long long *)buf);
        ++v67;
        v68 -= 8;
      }
      while (v68);
    }
  }
  uint64_t v94 = a1[3];
  if (!v94) {
    goto LABEL_81;
  }
  unint64_t v95 = (void **)a1[5];
  uint64_t v96 = &v95[v94];
  v97.i64[0] = 0x7F0000007FLL;
  v97.i64[1] = 0x7F0000007FLL;
  float32x4_t v161 = v97;
  char v98 = 1;
  float32x4_t v159 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  float32x4_t v160 = v97;
  float32x4_t v162 = v159;
  do
  {
    if ((void)v167)
    {
      uint64_t v99 = *v95;
      unint64_t v100 = 0xBF58476D1CE4E5B9 * ((unint64_t)*v95 ^ ((unint64_t)*v95 >> 30));
      unint64_t v101 = (0x94D049BB133111EBLL * (v100 ^ (v100 >> 27))) ^ ((0x94D049BB133111EBLL * (v100 ^ (v100 >> 27))) >> 31);
      uint64_t v102 = *(unsigned int *)(*((void *)&v167 + 1) + 4 * (v101 % DWORD2(v168)));
      if (v102 != 0x7FFFFFFF)
      {
        while (*(void **)(v168 + 96 * v102 + 16) != v99)
        {
          LODWORD(v102) = *(_DWORD *)(v168 + 96 * v102 + 8) & 0x7FFFFFFF;
          if (v102 == 0x7FFFFFFF) {
            goto LABEL_79;
          }
        }
        uint64_t v103 = v99[22];
        if (v103)
        {
          uint64_t v104 = *(void *)(v103 + 40);
          if (v104 && (unsigned int v105 = atomic_load((unsigned int *)(v104 + 704)), v105 == 2))
          {
            uint64_t v106 = *(unsigned int *)(*((void *)&v167 + 1) + 4 * (v101 % DWORD2(v168)));
            if (v106 == 0x7FFFFFFF)
            {
LABEL_67:
              LODWORD(v106) = 0x7FFFFFFF;
            }
            else
            {
              while (*(void **)(v168 + 96 * v106 + 16) != v99)
              {
                uint64_t v106 = *(_DWORD *)(v168 + 96 * v106 + 8) & 0x7FFFFFFF;
                if (v106 == 0x7FFFFFFF) {
                  goto LABEL_67;
                }
              }
            }
            uint64_t v108 = (re::ecs2::EntityComponentCollection *)(v99 + 4);
            uint64_t v109 = v168 + 96 * v106;
            float32x4_t v163 = *(float32x4_t *)(v109 + 32);
            long long v164 = *(_OWORD *)(v109 + 48);
            float32x4_t v165 = *(float32x4_t *)(v109 + 64);
            long long v166 = *(_OWORD *)(v109 + 80);
            re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper((re::ecs2::DynamicBoundingBoxComponent *)v99, &v171);
            unint64_t v110 = (float32x2_t *)re::ecs2::EntityComponentCollection::get(v108, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v110)
            {
              uint64_t v111 = v110;
              unint64_t v112 = 0;
              float32x4_t v113 = *a3;
              float32x4_t v114 = a3[1];
              float32x4_t v115 = a3[2];
              float32x4_t v116 = a3[3];
              float32x4_t v173 = v163;
              float32x4_t v174 = (float32x4_t)v164;
              float32x4_t v175 = v165;
              long long v176 = v166;
              do
              {
                *(float32x4_t *)&buf[v112] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*(_OWORD *)((char *)&v173 + v112))), v114, *(float32x2_t *)&v173.f32[v112 / 4], 1), v115, *(float32x4_t *)((char *)&v173 + v112), 2), v116, *(float32x4_t *)((char *)&v173 + v112), 3);
                v112 += 16;
              }
              while (v112 != 64);
              float v117 = re::MeshShadowCasterParams::PlaneProxyParams::calcShadowProxyThicknessInLocalCoord(v110 + 4, (float32x4_t *)buf);
              uint32x4_t v119 = (uint32x4_t)vcgtq_f32(v171, v172);
              v119.i32[3] = v119.i32[2];
              if ((vmaxvq_u32(v119) & 0x80000000) != 0)
              {
                float32x4_t v121 = 0uLL;
                v120.i64[0] = 0x3F0000003F000000;
                v120.i64[1] = 0x3F0000003F000000;
              }
              else
              {
                v120.i64[0] = 0x3F0000003F000000;
                v120.i64[1] = 0x3F0000003F000000;
                float32x4_t v121 = vmulq_f32(vaddq_f32(v171, v172), v120);
              }
              v118.f32[2] = v117;
              *(float32x2_t *)v118.f32 = v111[4];
              float32x4_t v122 = vmulq_f32(v118, v120);
              float32x4_t v171 = vsubq_f32(v121, v122);
              float32x4_t v172 = vaddq_f32(v122, v121);
            }
            re::AABB::transform(&v171, &v163, (uint64_t)buf);
            float32x4_t v123 = (float32x4_t)v178;
            uint32x4_t v124 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)buf, (float32x4_t)v178);
            v124.i32[3] = v124.i32[2];
            if ((vmaxvq_u32(v124) & 0x80000000) != 0)
            {
              v126.i64[0] = 0;
              v126.i32[2] = 0;
            }
            else
            {
              v125.i64[0] = 0x3F0000003F000000;
              v125.i64[1] = 0x3F0000003F000000;
              float32x4_t v126 = vmulq_f32(vaddq_f32(*(float32x4_t *)buf, (float32x4_t)v178), v125);
            }
            float32x4_t v127 = v159;
            v127.i32[3] = 0;
            float32x4_t v128 = *(float32x4_t *)buf;
            v128.i32[3] = 0;
            float32x4_t v129 = vminnmq_f32(v127, v128);
            float32x4_t v130 = v160;
            v130.i32[3] = 0;
            float32x4_t v131 = vsubq_f32((float32x4_t)v178, *(float32x4_t *)buf);
            v123.i32[3] = 0;
            float32x4_t v159 = v129;
            float32x4_t v160 = vmaxnmq_f32(v130, v123);
            v131.i32[3] = 0;
            float32x4_t v132 = vmaxnmq_f32(v131, (float32x4_t)0);
            float32x4_t v133 = vmulq_f32(v132, v132);
            float32x4_t v134 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1);
            v133.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, v134)).u32[0];
            v134.f32[0] = sqrtf(v133.f32[0]) * 0.5;
            v126.i32[3] = v134.i32[0];
            float32x4_t v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 0);
            float32x4_t v136 = vsubq_f32(v126, v135);
            float32x4_t v137 = vaddq_f32(v126, v135);
            float32x4_t v139 = v161;
            float32x4_t v138 = v162;
            v138.i32[3] = 0;
            v136.i32[3] = 0;
            v139.i32[3] = 0;
            v137.i32[3] = 0;
            float32x4_t v161 = vmaxnmq_f32(v139, v137);
            float32x4_t v162 = vminnmq_f32(v138, v136);
            v98 &= fabsf(v133.f32[0]) < 1.0e-10;
          }
          else
          {
            id v107 = *re::ecsComponentsLogObjects((re *)v99);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl(&dword_233120000, v107, OS_LOG_TYPE_ERROR, "MeshShadowSystemHelpers.mm::generateAABBsForCluster(): encountered a null/unloaded mesh", buf, 2u);
            }
          }
        }
      }
    }
LABEL_79:
    ++v95;
  }
  while (v95 != v96);
  if ((v98 & 1) == 0)
  {
    float32x4_t v142 = vabsq_f32(*a2);
    float v143 = v142.f32[1];
    float v144 = fmaxf(fmaxf(v142.f32[0], v142.f32[2]), v142.f32[1]);
    float32x4_t v146 = v161;
    float32x4_t v145 = v162;
    float32x4_t v147 = vsubq_f32(v159, v162);
    float32x4_t v148 = vaddq_f32(v162, v147);
    float32x4_t v149 = vaddq_f32(v161, v147);
    float32x4_t v150 = vsubq_f32(v149, v160);
    if (v144 == v143)
    {
      v145.i32[1] = v148.i32[1];
      v146.i32[1] = v149.i32[1];
      LODWORD(v151) = 0;
      *((void *)&v151 + 1) = 0;
      DWORD1(v151) = v150.i32[1];
    }
    else
    {
      v145.i32[2] = v148.i32[2];
      v146.i32[2] = v149.i32[2];
      *(void *)&long long v151 = 0;
      *((void *)&v151 + 1) = v150.u32[2];
    }
    *(float32x4_t *)a4 = v159;
    *(float32x4_t *)(a4 + 16) = v160;
    *(float32x4_t *)(a4 + 32) = v145;
    *(float32x4_t *)(a4 + 48) = v146;
    *(_OWORD *)(a4 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v151;
  }
  else
  {
LABEL_81:
    int32x4_t v140 = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v141 = 0x7F0000007FLL;
    *((void *)&v141 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a4 = v140;
    *(_OWORD *)(a4 + 16) = v141;
    *(int32x4_t *)(a4 + 32) = v140;
    *(_OWORD *)(a4 + 48) = v141;
    *(void *)(a4 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(void *)(a4 + 72) = 0;
  }
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)&v167);
}

uint64_t re::internal::shadows::isEntityAMeshReceiver(re::internal::shadows *this, re::ecs2::Entity *a2, const re::AssetHandle *a3)
{
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::internal::shadows *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 41) == 1 && (*(unsigned char *)(v5 + 42) & 3) != 0) {
      return 1;
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 22);
    uint64_t v9 = *(void *)(v8 + 72);
    if (v9)
    {
      uint64_t v10 = (void *)(*(void *)(v8 + 88) + 8);
      uint64_t v11 = 24 * v9;
      while (*v10 != *((void *)a2 + 1))
      {
        v10 += 3;
        v11 -= 24;
        if (!v11) {
          return 0;
        }
      }
      return 1;
    }
  }
  return 0;
}

double re::internal::shadows::setParamsOnMaterialParameterBlock(uint64_t a1, uint64_t a2, re::RenderManager **this)
{
  __int32 v4 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(this, a1);
  uint64_t v5 = *(void *)(a2 + 88);
  v25[0] = *(void *)(a2 + 80);
  v25[1] = v5;
  uint64_t v24 = 0x1658E0C3A20A4B09;
  re::MaterialParameterBlock::setConstant(v4, &v24, 0x10uLL, v25, 33, (uint64_t)v23);
  v23[0] = 0;
  LODWORD(v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(a2 + 16);
  v25[0] = 0x2651C5BB725E4431;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v22);
  v22[0] = 0;
  LODWORD(v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(a2 + 12);
  v25[0] = 0x58F744A8543328D7;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v21);
  v21[0] = 0;
  float v6 = cos(*(float *)(a2 + 56) * 3.14159265 / 180.0);
  *(float *)&uint64_t v24 = v6;
  v25[0] = 0x7DDA5D55C0FC4FA9;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v20);
  v20[0] = 0;
  LODWORD(v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  v25[0] = 0x5FE82A114F627B09;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 7, (uint64_t)v19);
  v19[0] = 0;
  uint64_t v17 = 0x568E6F2D267C8FA7;
  re::MaterialParameterBlock::setBinding(v4, &v17, "rendergraph", (uint64_t)"ProjectiveMeshShadowMapTexture", 2, (uint64_t)v18);
  v18[0] = 0;
  uint64_t v15 = 0xAB2491DDDDEEE62;
  re::MaterialParameterBlock::setBinding(v4, &v15, "rendergraph", (uint64_t)"TiledShadowDepthPrepassDepthAsColorTexture", 2, (uint64_t)v16);
  v16[0] = 0;
  uint64_t v13 = 0x5FCB768A20041405;
  re::MaterialParameterBlock::setBinding(v4, &v13, "rendergraph", (uint64_t)"compositedSceneUnderstandingShadowsColor", 2, (uint64_t)v14);
  v14[0] = 0;
  uint64_t v11 = 0x5FCB768A200DAF65;
  re::MaterialParameterBlock::setBinding(v4, &v11, "rendergraph", (uint64_t)"compositedSceneUnderstandingShadowsDepth", 2, (uint64_t)v12);
  v12[0] = 0;
  uint64_t v9 = 0x49245BDA69D27475;
  re::MaterialParameterBlock::setBinding(v4, &v9, "rendergraph", (uint64_t)"MeshShadowMipDescriptionBuffer", 3, (uint64_t)v10);
  v10[0] = 0;
  LOBYTE(v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  v25[0] = 0x34C6B4FED1749A95;
  return re::MaterialParameterBlock::setConstant(v4, v25, 1uLL, &v24, 2, (uint64_t)&v8);
}

uint64_t re::internal::shadows::removeParamsFromMaterialParameterBlock(uint64_t this, re::MaterialManager *a2, re::MaterialManager *a3)
{
  if (!re::internal::shadows::g_enablePatchShadows)
  {
    int v3 = (int)a3;
    uint64_t v5 = this;
    this = (uint64_t)re::MaterialManager::getSystemMaterialParameterBlock(a2, this);
    if (this)
    {
      float v6 = (uint64_t *)this;
      uint64_t v12 = 0x1658E0C3A20A4B09;
      re::MaterialParameterBlock::removeConstant((uint64_t *)this, &v12, 16);
      uint64_t v12 = 0x2651C5BB725E4431;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      uint64_t v12 = 0x58F744A8543328D7;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      uint64_t v12 = 0x7DDA5D55C0FC4FA9;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      uint64_t v12 = 0x5FE82A114F627B09;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      uint64_t v11 = 0x568E6F2D267C8FA7;
      re::MaterialParameterBlock::removeBinding(v6, &v11);
      uint64_t v10 = 0xAB2491DDDDEEE62;
      uint64_t v11 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v10);
      uint64_t v9 = 0x5FCB768A20041405;
      uint64_t v10 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v9);
      uint64_t v8 = 0x5FCB768A200DAF65;
      uint64_t v9 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v8);
      uint64_t v8 = 0;
      uint64_t v12 = 0x34C6B4FED1749A95;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 1);
      uint64_t v7 = 0x49245BDA69D27475;
      this = (uint64_t)re::MaterialParameterBlock::removeBinding(v6, &v7);
      uint64_t v7 = 0;
      if (v3)
      {
        this = re::MaterialParameterBlock::isEmpty((re::MaterialParameterBlock *)v6);
        if (this) {
          return re::MaterialManager::removeSystemMaterialParameterBlock(a2, v5);
        }
      }
    }
  }
  return this;
}

uint64_t re::internal::shadows::buildCylindricalProxyMesh@<X0>(uint64_t a1@<X0>, re::GeomMesh *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 4);
  float v20 = *(float *)a1 * 0.5;
  char v26 = 1;
  int v25 = 16843009;
  v21[0] = *(_DWORD *)(a1 + 12);
  float v23 = v20;
  float v24 = v20;
  int v22 = v3;
  v21[1] = (int)*(float *)(a1 + 8);
  __int32 v4 = re::GeomMesh::GeomMesh(a2, 0);
  re::buildCylinder((uint64_t)v4, v21);
  uint64_t v5 = 0;
  v6.i32[0] = 0;
  v6.f32[1] = v20;
  v6.i32[2] = 0;
  v6.i32[3] = 1.0;
  float32x2_t v7 = vrsqrte_f32((float32x2_t)1065353216);
  *(float32x2_t *)&long long v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v7, v7)));
  float32x4_t v9 = vmulq_n_f32((float32x4_t)xmmword_23435FD80, vmul_f32(*(float32x2_t *)&v8, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8))).f32[0]);
  float v10 = vmulq_f32(v9, v9).f32[0];
  float v11 = vmuls_lane_f32(v9.f32[1], *(float32x2_t *)v9.f32, 1);
  float v12 = vmuls_lane_f32(v9.f32[2], v9, 2);
  float v13 = vmuls_lane_f32(v9.f32[0], *(float32x2_t *)v9.f32, 1);
  float v14 = vmuls_lane_f32(v9.f32[0], v9, 2);
  float v15 = vmuls_lane_f32(v9.f32[1], v9, 2);
  float v16 = v9.f32[1] + v14;
  *(float *)&long long v8 = v14 - v9.f32[1];
  *(float *)&long long v17 = v10 + (float)((float)(1.0 - v10) * -0.000000043711);
  *((float *)&v17 + 1) = v9.f32[2] + v13;
  HIDWORD(v18) = 0;
  *((void *)&v17 + 1) = v8;
  HIDWORD(v8) = 0;
  *(float *)&long long v8 = v13 - v9.f32[2];
  *((float *)&v8 + 1) = v11 + (float)((float)(1.0 - v11) * -0.000000043711);
  *((float *)&v8 + 2) = v9.f32[0] + v15;
  *(float *)&long long v18 = v16;
  *((float *)&v18 + 1) = v15 - v9.f32[0];
  *((float *)&v18 + 2) = v12 + (float)((float)(1.0 - v12) * -0.000000043711);
  v27[0] = v17;
  v27[1] = v8;
  void v27[2] = v18;
  v27[3] = xmmword_23435FBB0;
  do
  {
    *(float32x4_t *)((char *)&v28 + v5 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(v27[v5])), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)&v27[v5], 1), (float32x4_t)xmmword_23435FD80, (float32x4_t)v27[v5], 2), v6, (float32x4_t)v27[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  return re::transform(a2, &v28);
}

void re::internal::shadows::regenerateShadowProxy(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, double a5, __n128 a6)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 45))
  {
    re::internal::shadows::buildCylindricalProxyMesh(a1, (re::GeomMesh *)v66);
  }
  else
  {
    float v65 = *(float *)(a1 + 36) + -0.5;
    float v14 = *(float *)(a1 + 28);
    a6.n128_f32[0] = *(float *)(a1 + 24) * 0.5;
    a4.n128_f32[0] = v14 * 0.5;
    __n128 v64 = a4;
    float v15 = *(float *)(a1 + 16) * 0.5;
    *(float *)&unsigned __int32 v61 = *(float *)(a1 + 32) + -0.5;
    float v63 = *(float *)(a1 + 20) * 0.5;
    uint64_t v87 = 0;
    unint64_t v85 = 0;
    v84[0] = 0;
    v84[1] = 0;
    int v86 = 0;
    a3.n128_f32[0] = -a6.n128_f32[0];
    a3.n128_u32[1] = v61;
    __n128 v16 = a3;
    v16.n128_f32[2] = v15;
    float v58 = v15;
    float v60 = a6.n128_f32[0];
    a6.n128_u32[1] = v61;
    v66[0] = v16;
    __n128 v17 = a6;
    v17.n128_f32[2] = v15;
    *(__n128 *)long long v67 = v17;
    a6.n128_f32[2] = -v15;
    v93[0] = a6;
    a3.n128_f32[2] = -v15;
    *(__n128 *)float v88 = a3;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v66);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v67);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v93);
    __n128 v18 = re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v88);
    v18.n128_f32[0] = -(float)(v14 * 0.5);
    v18.n128_f32[1] = v65;
    __n128 v19 = v18;
    v19.n128_f32[2] = v63;
    v18.n128_f32[2] = -v63;
    v66[0] = v19;
    *(__n128 *)long long v67 = v18;
    __n128 v20 = v64;
    v20.n128_f32[1] = v65;
    __n128 v21 = v20;
    v21.n128_f32[2] = -v63;
    v93[0] = v21;
    v20.n128_f32[2] = v63;
    *(__n128 *)float v88 = v20;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v66);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v67);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v93);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v88);
    int v22 = *(_DWORD *)(a1 + 12);
    if (v22 >= 1)
    {
      int v23 = 0;
      float v24 = *(float *)&v61 - v65;
      float v25 = v60 - v64.n128_f32[0];
      float v26 = v58 - v63;
      do
      {
        float v27 = (float)v22;
        float v28 = (float)v23 / (float)v22;
        float v29 = *(float *)(a1 + 40);
        float v59 = v65 + (float)(powf(v28, v29) * v24);
        __n128 v30 = v64;
        v30.n128_f32[0] = v64.n128_f32[0] + (float)(v28 * v25);
        __n128 v62 = v30;
        float v31 = (float)++v23 / v27;
        float v32 = powf(v31, v29);
        __n128 v33 = v62;
        v34.n128_f32[0] = v64.n128_f32[0] + (float)(v31 * v25);
        v35.n128_f32[0] = -(float)(v64.n128_f32[0] + (float)(v28 * v25));
        v35.n128_f32[1] = v59;
        __n128 v36 = v35;
        v36.n128_f32[2] = v63 + (float)(v28 * v26);
        v66[0] = v36;
        v33.n128_f32[1] = v59;
        __n128 v37 = v33;
        v37.n128_f32[2] = v63 + (float)(v28 * v26);
        *(__n128 *)long long v67 = v37;
        v35.n128_f32[2] = -v37.n128_f32[2];
        v93[0] = v35;
        v33.n128_f32[2] = -v37.n128_f32[2];
        v35.n128_f32[0] = -v34.n128_f32[0];
        v35.n128_f32[1] = v65 + (float)(v32 * v24);
        *(__n128 *)float v88 = v33;
        __n128 v38 = v35;
        v38.n128_f32[2] = v63 + (float)(v31 * v26);
        v34.n128_f32[1] = v35.n128_f32[1];
        __n128 v83 = v38;
        __n128 v39 = v34;
        v39.n128_f32[2] = v38.n128_f32[2];
        __n128 v82 = v39;
        v35.n128_f32[2] = -v38.n128_f32[2];
        __n128 v81 = v35;
        v34.n128_f32[2] = -v38.n128_f32[2];
        __n128 v80 = v34;
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v66);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v67);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v82);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v83);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v67);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v88);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v80);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v82);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v66);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v83);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v81);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v93);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, (__n128 *)v88);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, v93);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v81);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v84, &v80);
        int v22 = *(_DWORD *)(a1 + 12);
      }
      while (v23 < v22);
    }
    bzero(v67, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v67[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v71, "vertexPosition", 1, 7);
    unint64_t v40 = v85;
    if (LODWORD(v67[1]) > v85 && v69 && (v69 - 1) > v69)
    {
      while (1)
        ;
    }
    LODWORD(v67[1]) = v85;
    unsigned int v72 = v85;
    if (v73)
    {
      unint64_t v42 = v74;
      uint64_t v43 = 8 * v73;
      do
      {
        uint64_t v44 = *v42++;
        (*(void (**)(uint64_t, void))(*(void *)v44 + 72))(v44, v72);
        v43 -= 8;
      }
      while (v43);
      unint64_t v40 = v85;
    }
    if (v69 > (v40 >> 2))
    {
      int v45 = v79;
      if (v79)
      {
        unsigned int v46 = 0;
        do
        {
          float32x4_t v47 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v78, v46);
          re::internal::accessFaceVaryingAttributeSubmesh(v47, v48);
          ++v46;
        }
        while (v45 != v46);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v68, (v40 >> 2));
    unsigned int v75 = v40 >> 2;
    if (v76)
    {
      float32x4_t v49 = v77;
      uint64_t v50 = 8 * v76;
      do
      {
        uint64_t v51 = *v49++;
        (*(void (**)(uint64_t, void))(*(void *)v51 + 72))(v51, v75);
        v50 -= 8;
      }
      while (v50);
    }
    if (v85)
    {
      unsigned int v52 = 4;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v67, (v52 - 4) >> 2, v52 - 4, v52 - 3, v52 - 2, v52 - 1);
        BOOL v53 = v85 > v52;
        v52 += 4;
      }
      while (v53);
    }
    re::GeomMesh::GeomMesh((re::GeomMesh *)v66, 0);
    re::GeomMesh::operator=((uint64_t)v66, &v67[1]);
    re::GeomMesh::setName((re *)v66, v67[0]);
    re::GeomMesh::freeName((re *)v67);
    uint64_t v54 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v66);
    if (v85)
    {
      unint64_t v56 = 0;
      uint64_t v57 = v55;
      do
      {
        if (v56 == v55)
        {
          v83.n128_u64[0] = 0;
          memset(v93, 0, sizeof(v93));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float v88 = 136315906;
          *(void *)&v88[4] = "operator[]";
          *(_WORD *)&v88[12] = 1024;
          *(_DWORD *)&v88[14] = 609;
          __int16 v89 = 2048;
          uint64_t v90 = v57;
          __int16 v91 = 2048;
          uint64_t v92 = v57;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_OWORD *)(v54 + 16 * v56) = *(_OWORD *)(v87 + 16 * v56);
        ++v56;
      }
      while (v85 > v56);
    }
    re::GeomMesh::freeName((re *)v67);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v71);
    if (v68 && v70) {
      (*(void (**)(void))(*(void *)v68 + 40))();
    }
    if (v84[0] && v87) {
      (*(void (**)(void))(*(void *)v84[0] + 40))();
    }
  }
  v93[0].n128_u8[4] = 1;
  *(unsigned __int32 *)((char *)&v93[0].n128_u32[1] + 1) = 0;
  *(unsigned __int16 *)((char *)&v93[0].n128_u16[4] + 1) = 0;
  v93[0].n128_u32[3] = 1036831949;
  v93[1].n128_u32[0] = 16843008;
  v93[1].n128_u8[4] = 0;
  memset(&v93[1].n128_i8[8], 0, 48);
  v93[3].n128_u32[3] = 0x7FFFFFFF;
  v93[0].n128_u32[0] = 16842752;
  MeshAssetDataWithGeomMeshArraCGFloat y = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v66, 1uLL, 0, 0, (uint64_t)v67);
  int v9 = LOBYTE(v67[0]);
  float v10 = re::globalAllocators(MeshAssetDataWithGeomMeshArray);
  float v11 = (re::MeshAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 960, 8);
  float v12 = v11;
  if (v9) {
    float v13 = (re::MeshAsset *)re::MeshAsset::MeshAsset((uint64_t)v11, (uint64_t)&v67[1]);
  }
  else {
    re::MeshAsset::MeshAsset(v11);
  }
  *((_DWORD *)v12 + 231) = 0;
  float32x4_t v41 = re::MeshAsset::assetType(v13);
  (*(void (**)(uint64_t, re::MeshAsset *, uint64_t *, void, uint64_t, void))(*(void *)a2 + 416))(a2, v12, v41, 0, 2, 0);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)v67);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v93[1].n128_i64[1]);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v66);
}

double re::internal::shadows::calcCylShadowProxyLocalTransform@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  float v5 = re::MeshShadowCasterParams::PlaneProxyParams::calcShadowProxyThicknessInLocalCoord(a1, a2);
  uint64_t v6 = 0;
  *(void *)&long long v7 = 0;
  v8.i32[0] = 0;
  v8.f32[1] = a1->f32[1] * -0.5;
  v8.i32[2] = 0;
  v8.i32[3] = 1.0;
  LODWORD(v9) = 0;
  *((float *)&v9 + 1) = v5;
  *((void *)&v7 + 1) = LODWORD(v5);
  v14[0] = a1->u32[0];
  v14[1] = v9;
  void v14[2] = v7;
  v14[3] = xmmword_23435FBB0;
  do
  {
    v15[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(v14[v6])), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)&v14[v6], 1), (float32x4_t)xmmword_23435FD80, (float32x4_t)v14[v6], 2), v8, (float32x4_t)v14[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  double result = *(double *)v15;
  long long v11 = v15[1];
  long long v12 = v15[2];
  long long v13 = v15[3];
  *a3 = v15[0];
  a3[1] = v11;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

float re::MeshShadowCasterParams::PlaneProxyParams::calcShadowProxyThicknessInLocalCoord(float32x2_t *a1, float32x4_t *a2)
{
  float32x4_t v2 = a2[1];
  float32x4_t v3 = a2[2];
  float32x4_t v4 = vmulq_f32(*a2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2, (int8x16_t)v2, 0xCuLL), (int8x16_t)v2, 8uLL)));
  BOOL v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] <= 0.0;
  float v6 = -1.0;
  if (!v5) {
    float v6 = 1.0;
  }
  float32x4_t v7 = vmulq_f32(*a2, *a2);
  float32x4_t v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  float32x4_t v9 = vmulq_f32(v2, v2);
  v8.f32[0] = sqrtf(v8.f32[0]);
  float32x4_t v10 = vmulq_f32(v3, v3);
  v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  float32x4_t v12 = vmulq_n_f32(v8, v6);
  float v11 = v12.f32[2];
  *(float32x2_t *)v12.f32 = vmul_f32(*a1, *(float32x2_t *)v12.f32);
  if (v12.f32[0] < v12.f32[1]) {
    v12.f32[0] = v12.f32[1];
  }
  v12.f32[0] = (float)(v12.f32[0] * 0.0039062) * 27.0;
  if (fabsf(v12.f32[2]) <= 0.00000011921) {
    float v11 = 1.0;
  }
  return v12.f32[0] / v11;
}

float32x4_t *re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper@<X0>(re::ecs2::DynamicBoundingBoxComponent *this@<X0>, float32x4_t *a2@<X8>)
{
  BOOL v5 = (re::ecs2::DynamicBoundingBoxComponent *)((char *)this + 32);
  double result = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::DynamicBoundingBoxComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!result
    || (float32x4_t v7 = result[22],
        *a2 = result[21],
        a2[1] = v7,
        uint32x4_t v8 = (uint32x4_t)vcgtq_f32(*a2, a2[1]),
        v8.i32[3] = v8.i32[2],
        (vmaxvq_u32(v8) & 0x80000000) != 0))
  {
    uint64_t v9 = *((void *)this + 22);
    if (v9
      && (double result = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v9 + 32))) != 0
      && (uint64_t v10 = (uint64_t)result, result[27].i64[1]))
    {
      uint64_t v11 = result[24].i64[1];
      uint64_t v12 = result[23].i64[1];
      uint64_t v13 = re::ecs2::EntityComponentCollection::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v13)
      {
        uint64_t v11 = *(void *)(v13 + 208);
        uint64_t v12 = *(void *)(v13 + 192);
      }
      double result = (float32x4_t *)re::ecs2::MeshComponent::updateStaticBoundingBoxData((void *)v9, *(const re::ecs2::Entity **)(v9 + 16), 0);
      uint64_t v15 = *(void *)(v9 + 288);
      if (v15) {
        __n128 v16 = (re::MeshBoundingBoxes *)(v15 + 80);
      }
      else {
        __n128 v16 = 0;
      }
      uint64_t v17 = *((void *)v16 + 3);
      float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v19.i64[0] = 0x7F0000007FLL;
      v19.i64[1] = 0x7F0000007FLL;
      *a2 = v18;
      a2[1] = v19;
      if (v17)
      {
        unint64_t v20 = 0;
        while (v12 != v20)
        {
          float32x4_t v28 = v19;
          float32x4_t v29 = v18;
          __n128 v21 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(*(void *)(v10 + 440) + 72, *(void *)(v11 + 8 * v20));
          int v22 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox(v16, v20);
          double result = re::AABB::transform(v22, v21 + 2, (uint64_t)v30);
          float32x4_t v24 = v28;
          float32x4_t v23 = v29;
          v23.i32[3] = 0;
          float32x4_t v25 = (float32x4_t)v30[0];
          float32x4_t v26 = (float32x4_t)v30[1];
          v25.i32[3] = 0;
          v24.i32[3] = 0;
          v26.i32[3] = 0;
          float32x4_t v18 = vminnmq_f32(v23, v25);
          float32x4_t v19 = vmaxnmq_f32(v24, v26);
          *a2 = v18;
          a2[1] = v19;
          if (v17 == ++v20) {
            return result;
          }
        }
        re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 251, v12, v12);
        double result = (float32x4_t *)_os_crash();
        __break(1u);
      }
    }
    else
    {
      v27.i64[0] = 0x7F0000007FLL;
      v27.i64[1] = 0x7F0000007FLL;
      *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
      a2[1] = v27;
    }
  }
  return result;
}

float32x4_t *re::BoundingSphere::BoundingSphere(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  float32x4_t v5 = *(float32x4_t *)(a2 + 16);
  uint32x4_t v6 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)a2, v5);
  v6.i32[3] = v6.i32[2];
  float32x4_t v7 = 0uLL;
  if ((vmaxvq_u32(v6) & 0x80000000) == 0)
  {
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    float32x4_t v7 = vmulq_f32(vaddq_f32(*(float32x4_t *)a2, v5), v8);
  }
  float32x4_t v9 = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v7.f32[0]), a3[1], *(float32x2_t *)v7.f32, 1), a3[2], v7, 2));
  *a1 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
  memset(v17, 0, sizeof(v17));
  re::AABB::extractCorners(a2, v17, 8uLL, (__n128)0);
  uint64_t v10 = 0;
  float v11 = 0.0;
  do
  {
    float32x4_t v12 = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)&v17[v10])), a3[1], (float32x2_t)v17[v10].n128_u64[0], 1), a3[2], (float32x4_t)v17[v10], 2));
    float32x4_t v13 = vsubq_f32(vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3)), *a1);
    float32x4_t v14 = vmulq_f32(v13, v13);
    float v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0];
    if (v15 >= v11) {
      float v11 = v15;
    }
    ++v10;
  }
  while (v10 != 8);
  a1->f32[3] = sqrtf(v11);
  return a1;
}

uint64_t re::AABB::extractCorners(uint64_t result, __n128 *a2, unint64_t a3, __n128 a4)
{
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  a4.n128_u64[0] = *(void *)result;
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  *a2 = a4;
  if (a3 == 1)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  a4.n128_u32[0] = *(_DWORD *)(result + 16);
  a4.n128_u32[1] = *(_DWORD *)(result + 4);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[1] = a4;
  if (a3 <= 2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  a4.n128_u64[0] = *(void *)(result + 16);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[2] = a4;
  if (a3 == 3)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  a4.n128_u32[0] = *(_DWORD *)result;
  a4.n128_u32[1] = *(_DWORD *)(result + 20);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[3] = a4;
  if (a3 <= 4)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 4, 4);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  a4.n128_u64[0] = *(void *)result;
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[4] = a4;
  if (a3 == 5)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 5, 5);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  a4.n128_u32[0] = *(_DWORD *)(result + 16);
  a4.n128_u32[1] = *(_DWORD *)(result + 4);
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[5] = a4;
  if (a3 <= 6)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 6, 6);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  a4.n128_u64[0] = *(void *)(result + 16);
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[6] = a4;
  if (a3 != 7)
  {
    a4.n128_u32[0] = *(_DWORD *)result;
    a4.n128_u32[1] = *(_DWORD *)(result + 20);
    a4.n128_u32[2] = *(_DWORD *)(result + 24);
    a2[7] = a4;
    return result;
  }
LABEL_17:
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < size()", "operator[]", 658, 7, 7);
  double result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 72 * v4 + 16) == v2) {
    return 1;
  }
  do
  {
    LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(v6 + 72 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 72 * v4 + 16) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  v14 += 24;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_50, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::GeomMeshBuilder::setFaceVertices(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(this + 32);
  if (v7 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  signed int v12 = (void *)this;
  uint64_t v13 = (int *)(*(void *)(this + 48) + 16 * a2);
  int v14 = *v13;
  int v15 = v13[3];
  if (v14 != -1 && v15 != -1)
  {
    int v17 = *(_DWORD *)(this + 416);
    if (v17)
    {
      for (unsigned int i = 0; i != v17; ++i)
      {
        float32x4_t v19 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(v12 + 49), i);
        this = re::internal::accessFaceVaryingAttributeSubmesh(v19, v20);
      }
      unint64_t v7 = v12[4];
    }
  }
  if (v7 <= v6)
  {
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  __n128 v21 = (_DWORD *)(v12[6] + 16 * v6);
  _DWORD *v21 = a3;
  v21[1] = a4;
  unsigned __int16 v21[2] = a5;
  void v21[3] = a6;
  return this;
}

re::internal::GeomBaseMesh *re::internal::GeomBaseMesh::GeomBaseMesh(re::internal::GeomBaseMesh *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  re::DynamicArray<re::BlendNode>::setCapacity(v2, 1uLL);
  ++*((_DWORD *)this + 8);
  re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomBaseMesh *)((char *)this + 48));
  return this;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 96 * v9 + 16) = *a4;
  uint64_t v13 = (_OWORD *)(*(void *)(a1 + 16) + 96 * v9);
  long long v14 = *a5;
  long long v15 = a5[1];
  long long v16 = a5[3];
  _OWORD v13[4] = a5[2];
  v13[5] = v16;
  float32x4_t v13[2] = v14;
  v13[3] = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0) {
            re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 16), v11, v11 + 16);
          }
          v11 += 96;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_50, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    long long v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_50, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicArray<re::MeshShadowCluster>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::MeshShadowCluster>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          uint64_t v2 = 224 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            unsigned int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unsigned int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 224 * v9;
        uint64_t v11 = v7 + 3;
        do
        {
          v11[1] = 0;
          *(v11 - 2) = 0;
          *(v11 - 1) = 0;
          *(v11 - 3) = 0;
          *(_DWORD *)uint64_t v11 = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 3) = *(void *)v8;
          *(v11 - 2) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          uint64_t v13 = *(v11 - 1);
          *(v11 - 1) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = v11[1];
          v11[1] = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*(_DWORD *)v11;
          long long v15 = *(_OWORD *)(v8 + 48);
          long long v16 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v11 + 7) = *(_OWORD *)(v8 + 80);
          *(_OWORD *)(v11 + 5) = v16;
          *(_OWORD *)(v11 + 3) = v15;
          long long v17 = *(_OWORD *)(v8 + 96);
          long long v18 = *(_OWORD *)(v8 + 112);
          long long v19 = *(_OWORD *)(v8 + 128);
          *(_OWORD *)(v11 + 15) = *(_OWORD *)(v8 + 144);
          *(_OWORD *)(v11 + 13) = v19;
          *(_OWORD *)(v11 + 11) = v18;
          *(_OWORD *)(v11 + 9) = v17;
          long long v20 = *(_OWORD *)(v8 + 160);
          long long v21 = *(_OWORD *)(v8 + 176);
          long long v22 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)(v11 + 23) = *(_OWORD *)(v8 + 208);
          *(_OWORD *)(v11 + 21) = v22;
          *(_OWORD *)(v11 + 19) = v21;
          *(_OWORD *)(v11 + 17) = v20;
          re::DynamicArray<unsigned long>::deinit(v8);
          v11 += 28;
          v8 += 224;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshShadowCluster>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 224 * v4;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v3);
          v3 += 224;
          v5 -= 224;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::MeshShadowCluster>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshShadowCluster>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshShadowCluster>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::ecs2::PhysicsSystem *re::ecs2::PhysicsSystem::PhysicsSystem(re::ecs2::PhysicsSystem *this)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E6E2E18;
  *(_OWORD *)(v2 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v2 + 1objc_destroyWeak(this + 20) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(void *)(v2 + 140) = 0x7FFFFFFFLL;
  *(unsigned char *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  __n128 v35 = (uint64_t *)(v2 + 192);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(void *)(v2 + 208) = 0;
  unint64_t v3 = re::globalAllocators((re *)v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 256, 8);
  *(_OWORD *)(v4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = &unk_26E6E2EA0;
  *(_DWORD *)(v4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(void *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v4 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(void *)(v4 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 225) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(void *)(v4 + 248) = &unk_26E703028;
  uint64_t v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 280, 8);
  *(_OWORD *)(v6 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_26E6E3088;
  *(_DWORD *)(v6 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v6 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(void *)(v6 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v6 + 192) = 1;
  *(_OWORD *)(v6 + 225) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(void *)(v6 + 248) = &unk_26E6FBC28;
  *(void *)(v6 + 256) = 0;
  *(void *)(v6 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v6 + 272) = 0;
  *(void *)&v41[0] = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((void *)&v41[0] + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(void *)__n128 v36 = v41;
  *(void *)&v36[8] = 2;
  unint64_t v7 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v6 + 256), (uint64_t)v36);
  uint64_t v8 = re::globalAllocators(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 304, 8);
  *(_OWORD *)(v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v9 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(void *)(v9 + 296) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_DWORD *)(v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_DWORD *)(v9 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(void *)(v9 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v9 + 192) = 1;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 225) = 0u;
  *(void *)(v9 + 248) = &unk_26E6E4010;
  *(void *)uint64_t v9 = &unk_26E6E4078;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(void *)(v9 + 288) = 0x7FFFFFFF00000000;
  uint64_t v10 = re::globalAllocators((re *)v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 280, 8);
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v11 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = &unk_26E6E3270;
  *(_DWORD *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 56) = 0;
  *(void *)(v11 + 48) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v11 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v11 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_DWORD *)(v11 + 192) = 1;
  *(_OWORD *)(v11 + 225) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  uint64_t v12 = re::ecs2::RigidBodyComponentStateImpl::RigidBodyComponentStateImpl((re::ecs2::RigidBodyComponentStateImpl *)(v11 + 248));
  uint64_t v13 = re::globalAllocators(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 256, 8);
  *(_OWORD *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v14 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)uint64_t v14 = &unk_26E6E3458;
  *(_DWORD *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(void *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v14 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(void *)(v14 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v14 + 192) = 1;
  *(_OWORD *)(v14 + 225) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(void *)(v14 + 248) = &unk_26E6E4CD8;
  long long v15 = re::globalAllocators((re *)v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 280, 8);
  *(_OWORD *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v16 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0;
  *(void *)uint64_t v16 = &unk_26E6E3640;
  *(_DWORD *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 56) = 0;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v16 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(void *)(v16 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v16 + 192) = 1;
  *(_OWORD *)(v16 + 225) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(void *)(v16 + 248) = &unk_26E6E3D00;
  *(void *)(v16 + 256) = 0;
  *(void *)(v16 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v16 + 272) = 0;
  *(void *)&v41[0] = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((void *)&v41[0] + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(void *)__n128 v36 = v41;
  *(void *)&v36[8] = 2;
  long long v17 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v16 + 256), (uint64_t)v36);
  long long v18 = re::globalAllocators(v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18[2] + 32))(v18[2], 280, 8);
  *(_OWORD *)(v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v19 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 232) = 0u;
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = 0;
  *(void *)uint64_t v19 = &unk_26E6E3828;
  *(_DWORD *)(v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v19 + 32) = 0;
  *(void *)(v19 + 40) = 0;
  *(_DWORD *)(v19 + 56) = 0;
  *(void *)(v19 + 48) = 0;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v19 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(void *)(v19 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v19 + 192) = 1;
  *(_OWORD *)(v19 + 225) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(void *)(v19 + 248) = &unk_26E6E3D40;
  *(void *)(v19 + 256) = 0;
  *(void *)(v19 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v19 + 272) = 0;
  *(void *)&v41[0] = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((void *)&v41[0] + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(void *)__n128 v36 = v41;
  *(void *)&v36[8] = 2;
  long long v20 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v19 + 256), (uint64_t)v36);
  long long v21 = re::globalAllocators(v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[2] + 32))(v21[2], 280, 8);
  *(_OWORD *)(v22 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v22 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 152) = 0u;
  *(_OWORD *)(v22 + 168) = 0u;
  *(_OWORD *)(v22 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v22 + 200) = 0u;
  *(_OWORD *)(v22 + 216) = 0u;
  *(_OWORD *)(v22 + 232) = 0u;
  *(void *)(v22 + 8) = 0;
  *(void *)(v22 + 16) = 0;
  *(void *)uint64_t v22 = &unk_26E6E3A10;
  *(_DWORD *)(v22 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  *(_DWORD *)(v22 + 56) = 0;
  *(void *)(v22 + 48) = 0;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v22 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v22 + 168) = 0u;
  *(_OWORD *)(v22 + 152) = 0u;
  *(void *)(v22 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v22 + 192) = 1;
  *(_OWORD *)(v22 + 225) = 0u;
  *(_OWORD *)(v22 + 216) = 0u;
  *(_OWORD *)(v22 + 200) = 0u;
  *(void *)(v22 + 248) = &unk_26E6E3D80;
  *(void *)(v22 + 256) = 0;
  *(void *)(v22 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v22 + 272) = 0;
  *(void *)&v41[0] = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((void *)&v41[0] + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(void *)__n128 v36 = v41;
  *(void *)&v36[8] = 2;
  float32x4_t v23 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v22 + 256), (uint64_t)v36);
  float32x4_t v24 = re::globalAllocators(v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 264, 8);
  uint64_t v27 = v25;
  *(_OWORD *)(v25 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *(_OWORD *)(v25 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v25 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_OWORD *)(v25 + 216) = 0u;
  *(_OWORD *)(v25 + 232) = 0u;
  *(_DWORD *)(v25 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0;
  *(void *)(v25 + 48) = 0;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 128) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_DWORD *)(v25 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(v25 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_DWORD *)(v25 + 192) = 1;
  *(_OWORD *)(v25 + 225) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_OWORD *)(v25 + 216) = 0u;
  *(void *)(v25 + 248) = &unk_26E70B0B8;
  *(void *)(v25 + 256) = 0;
  *(void *)uint64_t v25 = &unk_26E6E2378;
  if (!*((void *)this + 21))
  {
    *((void *)this + 22) = 9;
    *((void *)this + 23) = v25;
    if (!v25) {
      goto LABEL_12;
    }
    *(void *)(v25 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)uint64_t v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
  }
  if (*((void *)this + 22) != 9)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  float32x4_t v28 = (uint64_t *)*((void *)this + 23);
  *float32x4_t v28 = v4;
  v28[1] = v6;
  void v28[2] = v9;
  v28[3] = v11;
  v28[4] = v14;
  v28[5] = v16;
  void v28[6] = v19;
  v28[7] = v22;
  v28[8] = v27;
  unint64_t v29 = *((void *)this + 22);
  if (*((void *)this + 22))
  {
    unint64_t v30 = 0;
    while (1)
    {
      uint64_t v31 = *(void *)(*((void *)this + 23) + 8 * v30);
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
      unint64_t v33 = *((void *)this + 25);
      if (v33 <= v30) {
        break;
      }
      *(void *)(*((void *)this + 26) + 8 * v30++) = v32;
      if (v30 >= *((void *)this + 22)) {
        return this;
      }
    }
    memset(v41, 0, sizeof(v41));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__n128 v36 = 136315906;
    *(void *)&v36[4] = "operator[]";
    *(_WORD *)&v36[12] = 1024;
    *(_DWORD *)&v36[14] = 468;
    __int16 v37 = 2048;
    unint64_t v38 = v30;
    __int16 v39 = 2048;
    unint64_t v40 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  return this;
}

void re::ecs2::PhysicsSystem::~PhysicsSystem(re::ecs2::PhysicsSystem *this)
{
  long long v1 = this;
  unint64_t v3 = (void *)((char *)this + 176);
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    uint64_t v4 = (void (****)(void))*((void *)this + 23);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        uint64_t v7 = re::globalAllocators(this)[2];
        (**v6)(v6);
        this = (re::ecs2::PhysicsSystem *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v7 + 40))(v7, v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v1 + 24);
  uint64_t v8 = *((void *)v1 + 21);
  if (v8)
  {
    if (*v3)
    {
      (*(void (**)(uint64_t, void))(*(void *)v8 + 40))(v8, *((void *)v1 + 23));
      *unint64_t v3 = 0;
      v3[1] = 0;
    }
    *((void *)v1 + 21) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v1 + 13);
  *(void *)long long v1 = &unk_26E6DECE0;
  objc_destructInstance((char *)v1 + 8);
}

{
  uint64_t vars8;

  re::ecs2::PhysicsSystem::~PhysicsSystem(this);
  JUMPOUT(0x237DBCBD0);
}

const re::ecs2::Scene *re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(const re::ecs2::Scene *this, const re::ecs2::Scene *a2)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    unint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(void, const re::ecs2::Scene *))(*(void *)v2 + 32))(*((void *)this + 7), a2);
    this = (const re::ecs2::Scene *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v4);
    if (this)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 200))(v2);
      {
        re::introspect<re::ecs2::PhysicsSystem>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, 0);
      }
      long long v12 = *((_OWORD *)re::introspect<re::ecs2::PhysicsSystem>(void)::info + 2);
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      this = (const re::ecs2::Scene *)re::ecs2::SystemCollection::getSystemsForTypeID(v5, (uint64_t)&v12);
      if (v6)
      {
        uint64_t v7 = (re::ecs2::PhysicsSystem **)this;
        uint64_t v8 = 8 * v6;
        uint64_t v9 = 8 * v6;
        uint64_t v10 = (re::ecs2::PhysicsSystem **)this;
        while (1)
        {
          uint64_t v11 = *v10;
          this = (const re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(void *)v2 + 96))(v2, *v10);
          if (this == v3) {
            break;
          }
          ++v10;
          v9 -= 8;
          if (!v9)
          {
            while (1)
            {
              uint64_t v11 = *v7;
              this = (const re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(void *)v2 + 96))(v2, *v7);
              if (!this) {
                break;
              }
              ++v7;
              v8 -= 8;
              if (!v8) {
                return this;
              }
            }
            break;
          }
        }
        if (*((void *)v11 + 20)) {
          return (const re::ecs2::Scene *)re::ecs2::PhysicsSystem::ecsToSim(v11, v3, 0);
        }
      }
    }
  }
  return this;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::PhysicsSimulationService>(void)::info = re::ecs2::introspect_PhysicsSimulationService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::PhysicsSimulationService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ecs2::SystemCollection::getSystemsForTypeID(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::tryGet(a1 + 56, a2);
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      result += 24;
    }
    else {
      return *(void *)(result + 32);
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsSystem::ecsToSim(re::ecs2::PhysicsSystem *this, const re::ecs2::Scene *a2, re::PhysicsSimulation *a3)
{
  (*(void (**)(void, uint64_t))(**((void **)this + 20) + 56))(*((void *)this + 20), 1);
  uint64_t v6 = (*(uint64_t (**)(void, const re::ecs2::Scene *))(**((void **)this + 20) + 32))(*((void *)this + 20), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v18, v6, 0);
    BOOL v8 = v7 == v18 && (unsigned __int16)v19 == 0xFFFFLL;
    if (!v8 || (v19 & 0xFFFF0000) != 4294901760)
    {
      do
      {
        uint64_t v10 = *(re **)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v18)
                     + 8);
        if (v10) {
          re::PhysicsSimulation::deleteConstraintsMarkedForDeletion(v10);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v18);
      }
      while (v18 != v7 || (unsigned __int16)v19 != 0xFFFF || WORD1(v19) != 0xFFFF);
    }
  }
  uint64_t v13 = *((void *)this + 22);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)*((void *)this + 23);
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *v14++;
      (*(void (**)(uint64_t, const re::ecs2::Scene *, re::PhysicsSimulation *))(*(void *)v16 + 56))(v16, a2, a3);
      v15 -= 8;
    }
    while (v15);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 48))(*((void *)this + 20));
}

void re::ecs2::PhysicsSystem::willAddSystemToECSService(re::ecs2::PhysicsSystem *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  *((void *)this + objc_destroyWeak(this + 20) = v3;
  if (v3)
  {
    uint64_t v4 = *((void *)this + 22);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)*((void *)this + 23);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5++;
        (*(void (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(void *)v7 + 24))(v7, this);
        v6 -= 8;
      }
      while (v6);
    }
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
    uint64_t v9 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v8);
    if (v9)
    {
      *(void *)&long long buf = this;
      *((void *)&buf + 1) = re::ecs2::PhysicsSystem::onComponentUpdated;
      uint64_t v21 = 0;
      uint64_t v22 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::PhysicsSystem>(re::ecs2::PhysicsSystem *,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v9 + 352), (uint64_t)&buf);
    }
    re::Defaults::BOOLValue((re::Defaults *)"disableNonAuthoritativePhysics", v10, v19);
    if (v19[0])
    {
      re::ecs2::PhysicsSystem::s_disableNonAuthoritativePhysics = v19[1];
      uint64_t v13 = *re::physicsLogObjects(v11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        if (re::ecs2::PhysicsSystem::s_disableNonAuthoritativePhysics) {
          uint64_t v14 = "true";
        }
        else {
          uint64_t v14 = "false";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_INFO, "disableNonAuthoritativePhysics overriden via Defaults (%s)", (uint8_t *)&buf, 0xCu);
      }
    }
    re::Defaults::floatValue((re::Defaults *)"networkPhysicsInterpStep", v12, (uint64_t)v17);
    if (v17[0])
    {
      re::ecs2::PhysicsSystem::s_networkInterpStep = v18;
      uint64_t v16 = *re::physicsLogObjects(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 134217984;
        *(double *)((char *)&buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(float *)&re::ecs2::PhysicsSystem::s_networkInterpStep;
        _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_INFO, "networkPhysicsInterpStep overriden via Defaults (%f)", (uint8_t *)&buf, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::PhysicsSystem::onComponentUpdated(re::ecs2::PhysicsSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  if (!*((void *)a3 + 2)) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(re::ecs2::Component *, re::NetworkSystem *))(*(void *)a3 + 40))(a3, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  do
  {
    {
      uint64_t v25 = v5;
      uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      int v11 = v10;
      uint64_t v5 = v25;
      if (v11)
      {
        re::introspect<re::ecs2::TransformComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_TransformComponent(0);
        uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        uint64_t v5 = v25;
      }
    }
    if ((char *)v5 == v6[132])
    {
      uint64_t v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v20)
      {
        long long v21 = *((_OWORD *)a3 + 2);
        long long v22 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v20 + 48) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
        *(_OWORD *)(v20 + 32) = v21;
LABEL_37:
        re::ecs2::Component::markDirty((void *)v20);
        return 0;
      }
      uint64_t v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v20) {
        return 0;
      }
      int v23 = *(_DWORD *)(v20 + 124) + 1;
LABEL_36:
      *(_DWORD *)(v20 + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v23;
      goto LABEL_37;
    }
    uint64_t v7 = *(unsigned int *)(v5 + 56);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void **)(v5 + 64);
    while (1)
    {
      uint64_t v9 = (_DWORD *)*v8;
      if (*(_DWORD *)*v8 == 1 && v9[10] == 3) {
        break;
      }
      ++v8;
      if (!--v7) {
        goto LABEL_15;
      }
    }
    uint64_t v5 = *((void *)v9 + 2);
  }
  while (v5);
LABEL_15:
  if (*((void *)a3 + 2))
  {
    uint64_t v12 = (*(uint64_t (**)(re::ecs2::Component *))(*(void *)a3 + 40))(a3);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
    uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    while (1)
    {
      {
        uint64_t v26 = v13;
        uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        int v19 = v18;
        uint64_t v13 = v26;
        if (v19)
        {
          re::introspect<re::ecs2::MotionStateComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_MotionStateComponent(0);
          uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
          uint64_t v13 = v26;
        }
      }
      if ((char *)v13 == v14[134]) {
        break;
      }
      uint64_t v15 = *(unsigned int *)(v13 + 56);
      if (v15)
      {
        for (unsigned int i = *(void **)(v13 + 64); ; ++i)
        {
          long long v17 = (_DWORD *)*i;
          if (*(_DWORD *)*i == 1 && v17[10] == 3) {
            break;
          }
          if (!--v15) {
            return 0;
          }
        }
        uint64_t v13 = *((void *)v17 + 2);
        if (v13) {
          continue;
        }
      }
      return 0;
    }
    uint64_t v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((void *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v20)
    {
      int v23 = *((unsigned __int8 *)a3 + 80);
      if (*(_DWORD *)(v20 + 124) != v23) {
        goto LABEL_36;
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::willAddSceneToECSService(re::ecs2::PhysicsSystem *this, re::EventBus **a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t result = *((void *)this + 20);
  if (!result) {
    return result;
  }
  uint64_t v5 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result);
  uint64_t v6 = *((void *)this + 22);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 23);
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v5 = (re *)(*(uint64_t (**)(uint64_t, re::EventBus **))(*(void *)v9 + 40))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  unint64_t v59 = (unint64_t)a2;
  v53[0] = 0;
  v53[1] = 0;
  int v54 = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  int v58 = 0;
  int v10 = a2[36];
  if (v10)
  {
    uint64_t v77 = re::globalAllocators(v5)[2];
    int v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v77 + 32))(v77, 32, 0);
    void *v11 = &unk_26E6E3BF8;
    v11[1] = this;
    float32x4_t v11[2] = re::ecs2::PhysicsSystem::onPhysicsOriginActivated;
    v11[3] = 0;
    uint64_t v78 = v11;
    uint64_t v12 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v10, (uint64_t)v76, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v14 = v13;
    uint64_t v15 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
    void *v15 = v12;
    v15[1] = v14;
    uint64_t v16 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v76);
    uint64_t v74 = re::globalAllocators(v16)[2];
    long long v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v74 + 32))(v74, 32, 0);
    *long long v17 = &unk_26E6E3C50;
    v17[1] = this;
    v17[2] = re::ecs2::PhysicsSystem::onPhysicsOriginDeactivated;
    v17[3] = 0;
    unsigned int v75 = v17;
    uint64_t v18 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v73, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v20 = v19;
    long long v21 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
    void *v21 = v18;
    v21[1] = v20;
    long long v22 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v73);
    uint64_t v71 = re::globalAllocators(v22)[2];
    int v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v71 + 32))(v71, 32, 0);
    *int v23 = &unk_26E6E3C50;
    v23[1] = this;
    v23[2] = re::ecs2::PhysicsSystem::onDeactivatePhysicsSubsystemComponent;
    void v23[3] = 0;
    unsigned int v72 = v23;
    uint64_t v24 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v70, 0, 0);
    uint64_t v26 = v25;
    uint64_t v27 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
    *uint64_t v27 = v24;
    v27[1] = v26;
    float32x4_t v28 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v70);
    uint64_t v68 = re::globalAllocators(v28)[2];
    unint64_t v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v68 + 32))(v68, 32, 0);
    *unint64_t v29 = &unk_26E6E3CA8;
    v29[1] = this;
    v29[2] = re::ecs2::PhysicsSystem::onEntityReparented;
    void v29[3] = 0;
    unint64_t v69 = v29;
    uint64_t v30 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v10, 0, (uint64_t)v67, 0, 0);
    uint64_t v32 = v31;
    unint64_t v33 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
    *unint64_t v33 = v30;
    v33[1] = v32;
    __n128 v34 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v67);
    uint64_t v35 = 0;
    v66[0] = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    v66[1] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    do
    {
      uint64_t v36 = v66[v35];
      uint64_t v64 = re::globalAllocators(v34)[2];
      float v65 = 0;
      __int16 v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
      *__int16 v37 = &unk_26E6E3BF8;
      v37[1] = this;
      v37[2] = re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentDidActivateEvent>;
      v37[3] = 0;
      float v65 = v37;
      uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v10, (uint64_t)v63, v36, 0);
      uint64_t v40 = v39;
      float32x4_t v41 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
      *float32x4_t v41 = v38;
      v41[1] = v40;
      uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v63);
      uint64_t v61 = re::globalAllocators(v42)[2];
      __n128 v62 = 0;
      uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
      *uint64_t v43 = &unk_26E6E3C50;
      v43[1] = this;
      v43[2] = re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentWillDeactivateEvent>;
      v43[3] = 0;
      __n128 v62 = v43;
      uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v60, v36, 0);
      uint64_t v46 = v45;
      float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v53);
      *float32x4_t v47 = v44;
      v47[1] = v46;
      __n128 v34 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v60);
      ++v35;
    }
    while (v35 != 2);
    unint64_t v48 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v59 ^ (v59 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v59 ^ (v59 >> 30))) >> 27));
    unint64_t v49 = v48 ^ (v48 >> 31);
    if (*((void *)this + 13))
    {
      unint64_t v50 = v49 % *((unsigned int *)this + 32);
      uint64_t v51 = *(unsigned int *)(*((void *)this + 14) + 4 * v50);
      if (v51 != 0x7FFFFFFF)
      {
        uint64_t v52 = *((void *)this + 15);
        if (*(void *)(v52 + 80 * v51 + 16) == v59) {
          goto LABEL_16;
        }
        while (1)
        {
          LODWORD(v51) = *(_DWORD *)(v52 + 80 * v51 + 8) & 0x7FFFFFFF;
          if (v51 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v52 + 80 * v51 + 16) == v59) {
            goto LABEL_16;
          }
        }
      }
    }
    else
    {
      LODWORD(v50) = 0;
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove((uint64_t)this + 104, v50, v49, &v59, (uint64_t)v53);
    ++*((_DWORD *)this + 36);
  }
LABEL_16:
  re::BucketArray<RESubscriptionHandle,16ul>::deinit((uint64_t)v53);
  uint64_t result = v53[0];
  if (v53[0])
  {
    if ((v54 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v53[0] + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsOriginActivated(re::ecs2::PhysicsSystem *a1, uint64_t a2)
{
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  re::ecs2::PhysicsSystem::onPhysicsOriginChanged(a1, *(const re::ecs2::Scene **)(v2 + 16), 0);
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsOriginDeactivated(re::ecs2::PhysicsSystem *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  uint64_t v5 = *(const re::ecs2::Scene **)(v4 + 16);
  uint64_t v6 = (re::ecs2::PhysicsOriginComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::PhysicsSystem::onPhysicsOriginChanged(a1, v5, v6);
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onDeactivatePhysicsSubsystemComponent(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (a1[25] == v4)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(a3 + 8) == *(void *)(a1[26] + 8 * v4)) {
        break;
      }
      if (v3 == ++v4) {
        return 0;
      }
    }
    uint64_t v5 = *(void *)(a1[23] + 8 * v4);
    (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onEntityReparented(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (re::ecs2::RigidBodyComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3[1] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    uint64_t v6 = v5;
    re::ecs2::RigidBodyComponent::teleport(v5);
    re::ecs2::Component::markDirty(v6);
  }
  uint64_t v7 = a1[20];
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 56))(v7, 1);
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(a1[20], v8);
    if (v11 != re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(a1[20], v10))
    {
      uint64_t v12 = a1[22];
      if (v12)
      {
        uint64_t v13 = (uint64_t *)a1[23];
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = *v13++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 80))(v15, v9);
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v2 = *(void *)(a1 + 176);
    if (v2)
    {
      uint64_t v4 = *(uint64_t **)(a1 + 184);
      uint64_t v5 = 8 * v2;
      do
      {
        uint64_t v6 = *v4++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 80))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v2 = *(void *)(a1 + 176);
    if (v2)
    {
      uint64_t v4 = *(uint64_t **)(a1 + 184);
      uint64_t v5 = 8 * v2;
      do
      {
        uint64_t v6 = *v4++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 80))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

void re::ecs2::PhysicsSystem::willRemoveSystemFromECSService(re::ecs2::PhysicsSystem *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (*(void *)(v3 + 368))
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = (re::ecs2::PhysicsSystem **)(*(void *)(v4 + 384) + 32 * v5);
        if (*v6 == this)
        {
          if (!*(_DWORD *)(v4 + 432))
          {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)(v4 + 352), v5);
            continue;
          }
          v12[0] = 0;
          long long v7 = *((_OWORD *)v6 + 1);
          long long v13 = *(_OWORD *)v6;
          long long v14 = v7;
          re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v4 + 392), (uint64_t)v12);
        }
        ++v5;
      }
      while (v5 < *(void *)(v4 + 368));
    }
  }
  *((void *)this + objc_destroyWeak(this + 20) = 0;
  uint64_t v8 = *((void *)this + 22);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 23);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9++;
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
      v10 -= 8;
    }
    while (v10);
  }
}

uint64_t re::ecs2::PhysicsSystem::willRemoveSceneFromECSService(re::ecs2::PhysicsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4 = *((void *)this + 22);
  if (v4)
  {
    unint64_t v5 = (uint64_t *)*((void *)this + 23);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(void *)v7 + 48))(v7, a2);
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t result = *((void *)this + 20);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)result + 72))(result, a2);
  }
  if (*((void *)this + 13))
  {
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    unint64_t v10 = v9 ^ (v9 >> 31);
    unint64_t v11 = v10 % *((unsigned int *)this + 32);
    uint64_t v12 = *((void *)this + 14);
    uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *((void *)this + 15);
      if (*(re::ecs2::Scene **)(v14 + 80 * v13 + 16) == a2)
      {
LABEL_11:
        uint64_t v15 = *((void *)a2 + 36);
        if (v15)
        {
          uint64_t v16 = *(void *)(v14 + 80 * v13 + 64);
          if (v16)
          {
            unint64_t v17 = 0;
            uint64_t v18 = v14 + 80 * v13 + 24;
            do
            {
              uint64_t v19 = re::BucketArray<RESubscriptionHandle,16ul>::operator[](v18, v17);
              uint64_t result = re::EventBus::unsubscribe(v15, *(void *)v19, *(void *)(v19 + 8));
              ++v17;
            }
            while (v16 != v17);
            if (!*((void *)this + 13)) {
              return result;
            }
            uint64_t v12 = *((void *)this + 14);
            unint64_t v11 = v10 % *((unsigned int *)this + 32);
          }
        }
        uint64_t v20 = *(unsigned int *)(v12 + 4 * v11);
        if (v20 != 0x7FFFFFFF)
        {
          uint64_t v21 = *((void *)this + 15);
          if (*(re::ecs2::Scene **)(v21 + 80 * v20 + 16) == a2)
          {
            *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v21 + 80 * v20 + 8) & 0x7FFFFFFF;
LABEL_23:
            uint64_t result = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*((void *)this + 15) + 80 * v20);
            int v24 = *((_DWORD *)this + 36);
            *(_DWORD *)(*((void *)this + 15) + 80 * v20 + 8) = *(_DWORD *)(*((void *)this + 15) + 80 * v20 + 8) & 0x80000000 | *((_DWORD *)this + 35);
            --*((_DWORD *)this + 33);
            *((_DWORD *)this + 35) = v20;
            *((_DWORD *)this + 36) = v24 + 1;
          }
          else
          {
            while (1)
            {
              unsigned int v22 = v20;
              int v23 = *(_DWORD *)(v21 + 80 * v20 + 8);
              uint64_t v20 = v23 & 0x7FFFFFFF;
              if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                break;
              }
              if (*(re::ecs2::Scene **)(v21 + 80 * v20 + 16) == a2)
              {
                *(_DWORD *)(v21 + 80 * v22 + 8) = *(_DWORD *)(v21 + 80 * v22 + 8) & 0x80000000 | *(_DWORD *)(v21 + 80 * v20 + 8) & 0x7FFFFFFF;
                goto LABEL_23;
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          LODWORD(v13) = *(_DWORD *)(v14 + 80 * v13 + 8) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            break;
          }
          if (*(re::ecs2::Scene **)(v14 + 80 * v13 + 16) == a2) {
            goto LABEL_11;
          }
        }
      }
    }
  }
  return result;
}

void re::ecs2::PhysicsSystem::onPhysicsOriginChanged(re::ecs2::PhysicsSystem *this, const re::ecs2::Scene *a2, re::ecs2::PhysicsOriginComponent *a3)
{
  float32x4_t v120 = a3;
  (*(void (**)(void, uint64_t))(**((void **)this + 20) + 56))(*((void *)this + 20), 1);
  uint64_t v5 = (*(uint64_t (**)(void, const re::ecs2::Scene *))(**((void **)this + 20) + 32))(*((void *)this + 20), a2);
  if (v5)
  {
    uint64_t v6 = v5;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v119);
    int v117 = 0;
    long long v115 = 0u;
    long long v116 = 0u;
    uint64_t v118 = 0x7FFFFFFFLL;
    if (v120) {
      uint64_t v7 = &v120;
    }
    else {
      uint64_t v7 = 0;
    }
    re::internal::findPhysicsOrigin((uint64_t)a2, v7, v120 != 0, &v125);
    simd_float4x4 v114 = v125;
    simd_float4x4 v126 = __invert_f4(v125);
    float32x4_t v109 = (float32x4_t)v126.columns[1];
    float32x4_t v110 = (float32x4_t)v126.columns[0];
    v113[0] = (float32x4_t)v126.columns[0];
    v113[1] = (float32x4_t)v126.columns[1];
    float32x4_t v107 = (float32x4_t)v126.columns[3];
    float32x4_t v108 = (float32x4_t)v126.columns[2];
    v113[2] = (float32x4_t)v126.columns[2];
    v113[3] = (float32x4_t)v126.columns[3];
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v125, v6, 0);
    simd_float4 v112 = v125.columns[0];
    if (v6 != v125.columns[0].i64[0]
      || v125.columns[0].u16[4] != 0xFFFFLL
      || (v125.columns[0].i32[2] & 0xFFFF0000) != 0xFFFF0000)
    {
      unint64_t v100 = this;
      unint64_t v101 = a2;
      uint64_t v106 = 0;
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unsigned int v111 = 0;
      do
      {
        unint64_t v12 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v112);
        if (!re::areAlmostEqual<float>((float *)(v12 + 112), (float *)&v114))
        {
          uint64_t v13 = v6;
          unint64_t v14 = 0;
          simd_float4 v15 = *(simd_float4 *)(v12 + 128);
          long long v16 = *(_OWORD *)(v12 + 144);
          long long v17 = *(_OWORD *)(v12 + 160);
          float32x4_t v121 = *(float32x4_t *)(v12 + 112);
          simd_float4 v122 = v15;
          long long v123 = v16;
          long long v124 = v17;
          do
          {
            v125.columns[v14 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v110, COERCE_FLOAT(*(_OWORD *)((char *)&v121 + v14 * 4))), v109, *(float32x2_t *)&v121.f32[v14], 1), v108, *(float32x4_t *)((char *)&v121 + v14 * 4), 2), v107, *(float32x4_t *)((char *)&v121 + v14 * 4), 3);
            v14 += 4;
          }
          while (v14 != 16);
          simd_float4 v18 = v125.columns[0];
          simd_float4 v19 = v125.columns[1];
          simd_float4 v20 = v125.columns[2];
          simd_float4 v21 = v125.columns[3];
          unint64_t v22 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
          unint64_t v23 = v22 ^ (v22 >> 31);
          unint64_t v24 = v115;
          if ((void)v115)
          {
            unint64_t v24 = v23 % v111;
            for (uint64_t i = *(unsigned int *)(v8 + 4 * v24);
                  i != 0x7FFFFFFF;
                  LODWORD(i) = *(_DWORD *)(v11 + 96 * i + 8) & 0x7FFFFFFF)
            {
              if (*(void *)(v11 + 96 * i + 16) == v12) {
                goto LABEL_23;
              }
            }
          }
          uint64_t v26 = v118;
          if (v118 == 0x7FFFFFFF)
          {
            int v27 = v10;
            unsigned int v111 = DWORD2(v116);
            if (v10 == DWORD2(v116))
            {
              simd_float4 v104 = v125.columns[1];
              simd_float4 v105 = v125.columns[0];
              simd_float4 v102 = v125.columns[3];
              simd_float4 v103 = v125.columns[2];
              re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity((uint64_t)&v115, 2 * v9);
              simd_float4 v21 = v102;
              simd_float4 v20 = v103;
              simd_float4 v19 = v104;
              simd_float4 v18 = v105;
              int v27 = v117;
              unsigned int v111 = DWORD2(v116);
              unint64_t v24 = v23 % DWORD2(v116);
              uint64_t v11 = v116;
              uint64_t v106 = *((void *)&v115 + 1);
            }
            uint64_t v28 = (v27 + 1);
            int v117 = v28;
            uint64_t v26 = v10;
            int v29 = *(_DWORD *)(v11 + 96 * v10 + 8);
            uint64_t v8 = v106;
          }
          else
          {
            int v29 = *(_DWORD *)(v11 + 96 * v118 + 8);
            LODWORD(v118) = v29 & 0x7FFFFFFF;
            uint64_t v28 = v10;
            LODWORD(v10) = v26;
          }
          uint64_t v30 = 3 * v26;
          *(_DWORD *)(v11 + 32 * v30 + 8) = v29 | 0x80000000;
          uint64_t v11 = v116;
          uint64_t v31 = (simd_float4 *)(v116 + 32 * v30);
          v31->i32[2] = v31->i32[2] & 0x80000000 | *(_DWORD *)(v8 + 4 * v24);
          v31->i64[0] = v23;
          v31[1].i64[0] = v12;
          uint64_t v31[2] = v18;
          v31[3] = v19;
          v31[4] = v20;
          v31[5] = v21;
          *(_DWORD *)(v8 + 4 * v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
          int v9 = ++HIDWORD(v116);
          ++HIDWORD(v118);
          uint64_t v10 = v28;
LABEL_23:
          uint64_t v6 = v13;
          re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v12, (long long *)&v114);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v112);
      }
      while (v112.i64[0] != v6 || v112.u16[4] != 0xFFFF || v112.u16[5] != 0xFFFF);
      if (v9)
      {
        uint64_t v34 = *((void *)v100 + 20);
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34);
        uint64_t v36 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(void *)v34 + 40))(v34, v101);
        v112.i64[0] = v35;
        v112.i64[1] = v36;
        unint64_t v37 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        unint64_t v38 = *((void *)v101 + 28);
        if (v38 > v37)
        {
          uint64_t v39 = *(void *)(*((void *)v101 + 30) + 8 * v37);
          if (v39)
          {
            uint64_t v40 = *(void *)(v39 + 24);
            if (v40)
            {
              float32x4_t v41 = *(uint64_t **)(v39 + 40);
              uint64_t v42 = 8 * v40;
              do
              {
                uint64_t v43 = *v41;
                unint64_t v44 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(void *)(*v41 + 16));
                if (re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey((uint64_t)&v115, v44))
                {
                  uint64_t v45 = *(void *)(v43 + 96);
                  if (v45)
                  {
                    uint64_t v46 = *(void *)(v43 + 16);
                    float32x4_t v47 = *(re::ecs2::TransformComponent **)(v46 + 240);
                    if (!v47) {
                      float32x4_t v47 = (re::ecs2::TransformComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    }
                    re::internal::getPhysicsOriginFromTransformComponent(v47, v113, (uint64_t)&v125);
                    unint64_t v48 = *(simd_float4 **)(v45 + 16);
                    float32x4_t v121 = (float32x4_t)v125.columns[2];
                    simd_float4 v122 = v125.columns[1];
                    simd_float4 v49 = v125.columns[1];
                    v48[1] = v125.columns[2];
                    v48[2] = v49;
                    (*(void (**)(simd_float4 *, float32x4_t *))(v48->i64[0] + 64))(v48, &v121);
                    float32x4_t v121 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.columns[0].f32, 0);
                    re::CollisionObject::setScale(v45, &v121);
                  }
                }
                ++v41;
                v42 -= 8;
              }
              while (v42);
              unint64_t v38 = *((void *)v101 + 28);
            }
          }
        }
        unint64_t v50 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v50)
        {
          uint64_t v51 = *(void *)(*((void *)v101 + 30) + 8 * v50);
          if (v51)
          {
            uint64_t v52 = *(void *)(v51 + 24);
            if (v52)
            {
              BOOL v53 = *(uint64_t **)(v51 + 40);
              uint64_t v54 = 8 * v52;
              do
              {
                uint64_t v55 = *v53;
                unint64_t v56 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(void *)(*v53 + 16));
                uint64_t v57 = re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet((uint64_t)&v115, v56);
                if (v57)
                {
                  uint64_t v58 = *(void *)(v55 + 336);
                  if (v58)
                  {
                    uint64_t v59 = v57;
                    v60.i64[0] = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 216))(v58);
                    v60.i64[1] = v61;
                    v62.i64[0] = *(void *)v59;
                    v63.i64[0] = *(void *)(v59 + 16);
                    v64.i64[0] = *(void *)(v59 + 32);
                    v62.i32[2] = *(_DWORD *)(v59 + 8);
                    v63.i32[2] = *(_DWORD *)(v59 + 24);
                    v64.i32[2] = *(_DWORD *)(v59 + 40);
                    v125.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v60.f32[0]), v63, *(float32x2_t *)v60.f32, 1), v64, v60, 2);
                    (*(void (**)(uint64_t, simd_float4x4 *))(*(void *)v58 + 224))(v58, &v125);
                    v65.i64[0] = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 232))(v58);
                    v65.i64[1] = v66;
                    v67.i64[0] = *(void *)v59;
                    v68.i64[0] = *(void *)(v59 + 16);
                    v69.i64[0] = *(void *)(v59 + 32);
                    v67.i32[2] = *(_DWORD *)(v59 + 8);
                    v68.i32[2] = *(_DWORD *)(v59 + 24);
                    v69.i32[2] = *(_DWORD *)(v59 + 40);
                    v125.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v65.f32[0]), v68, *(float32x2_t *)v65.f32, 1), v69, v65, 2);
                    (*(void (**)(uint64_t, simd_float4x4 *))(*(void *)v58 + 240))(v58, &v125);
                    (*(void (**)(uint64_t))(*(void *)v58 + 312))(v58);
                  }
                }
                ++v53;
                v54 -= 8;
              }
              while (v54);
              unint64_t v38 = *((void *)v101 + 28);
            }
          }
        }
        unint64_t v70 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v70)
        {
          uint64_t v71 = *(void *)(*((void *)v101 + 30) + 8 * v70);
          if (v71)
          {
            uint64_t v72 = *(void *)(v71 + 24);
            if (v72)
            {
              uint64_t v73 = *(uint64_t **)(v71 + 40);
              uint64_t v74 = 8 * v72;
              do
              {
                uint64_t v75 = *v73;
                unint64_t v76 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(void *)(*v73 + 16));
                if (re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey((uint64_t)&v115, v76))
                {
                  uint64_t v77 = *(void *)(v75 + 80);
                  if (v77)
                  {
                    uint64_t v78 = *(void *)(v75 + 16);
                    uint64_t v79 = *(void *)(v77 + 136);
                    __n128 v80 = *(re::ecs2::TransformComponent **)(v78 + 240);
                    if (!v80) {
                      __n128 v80 = (re::ecs2::TransformComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v78 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    }
                    re::internal::getPhysicsOriginFromTransformComponent(v80, v113, (uint64_t)&v125);
                    __n128 v81 = *(simd_float4 **)(v79 + 16);
                    float32x4_t v121 = (float32x4_t)v125.columns[2];
                    simd_float4 v122 = v125.columns[1];
                    simd_float4 v82 = v125.columns[1];
                    v81[1] = v125.columns[2];
                    v81[2] = v82;
                    (*(void (**)(simd_float4 *, float32x4_t *))(v81->i64[0] + 64))(v81, &v121);
                    float32x4_t v121 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.columns[0].f32, 0);
                    re::CollisionObject::setScale(v79, &v121);
                  }
                }
                ++v73;
                v74 -= 8;
              }
              while (v74);
              unint64_t v38 = *((void *)v101 + 28);
            }
          }
        }
        unint64_t v83 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v83)
        {
          uint64_t v84 = *(void *)(*((void *)v101 + 30) + 8 * v83);
          if (v84)
          {
            uint64_t v85 = *(void *)(v84 + 24);
            if (v85)
            {
              int v86 = *(float32x2_t ***)(v84 + 40);
              uint64_t v87 = 8 * v85;
              do
              {
                float v88 = *v86;
                unint64_t v89 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(void *)&(*v86)[2]);
                uint64_t v90 = re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet((uint64_t)&v115, v89);
                if (v90)
                {
                  v91.i64[0] = *(void *)v90;
                  v92.i64[0] = *(void *)(v90 + 16);
                  v93.i64[0] = *(void *)(v90 + 32);
                  v91.i32[2] = *(_DWORD *)(v90 + 8);
                  v92.i32[2] = *(_DWORD *)(v90 + 24);
                  v93.i32[2] = *(_DWORD *)(v90 + 40);
                  float32x4_t v94 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)v88[16].f32)), v92, v88[16], 1), v93, *(float32x4_t *)v88[16].f32, 2);
                  *(float32x4_t *)v88[16].f32 = v94;
                  v94.i64[0] = *(void *)v90;
                  v92.i64[0] = *(void *)(v90 + 16);
                  v93.i64[0] = *(void *)(v90 + 32);
                  v94.i32[2] = *(_DWORD *)(v90 + 8);
                  v92.i32[2] = *(_DWORD *)(v90 + 24);
                  v93.i32[2] = *(_DWORD *)(v90 + 40);
                  *(float32x4_t *)v88[20].f32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, COERCE_FLOAT(*(_OWORD *)v88[20].f32)), v92, v88[20], 1), v93, *(float32x4_t *)v88[20].f32, 2);
                }
                ++v86;
                v87 -= 8;
              }
              while (v87);
            }
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v125, v6, 0);
        if (v6 != v125.columns[0].i64[0]
          || v125.columns[0].u16[4] != 0xFFFFLL
          || (v125.columns[0].i32[2] & 0xFFFF0000) != 4294901760)
        {
          do
          {
            uint64_t v97 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v125);
            re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v97, (long long *)&v114);
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v125);
          }
          while (v125.columns[0].i64[0] != v6 || v125.columns[0].u16[4] != 0xFFFF || v125.columns[0].u16[5] != 0xFFFF);
        }
      }
    }
    re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)&v115);
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v119);
  }
}

uint64_t re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = *a1;
  if (result)
  {
    if (a1[1])
    {
      uint64_t result = re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(result, &v4);
      if (result) {
        return re::DataArray<re::ecs2::PhysicsSimulationData>::tryGet(a1[1], *(void *)(result + 24));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 96 * v3 + 16) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 96 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 96 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 96 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 96 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 96 * v3 + 16) == a2) {
        return v5 + 96 * v3 + 32;
      }
    }
    return 0;
  }
  return v5 + 96 * v3 + 32;
}

uint64_t re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v6);
  v10[0] = v7;
  v10[1] = v8;
  return re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v10, a2);
}

void *re::ecs2::PhysicsSystem::update(void *result, BOOL *a2, uint64_t a3)
{
  if (a2)
  {
    float v3 = *(float *)&a3;
    if ((a3 & 0x100000000) == 0)
    {
      uint64_t v4 = (uint64_t)result;
      BOOL result = (void *)result[20];
      if (result)
      {
        int v6 = (*(uint64_t (**)(void *))(*result + 16))(result);
        re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v55);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54, 3043, v4);
        uint64_t v7 = *(void *)(v4 + 176);
        if (!v7)
        {
LABEL_8:
          (*(void (**)(void, void))(**(void **)(v4 + 160) + 56))(*(void *)(v4 + 160), 0);
LABEL_9:
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54);
          return (void *)re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end((uint64_t)v55);
        }
        float v8 = v3;
        uint64_t v9 = *(void *)(v4 + 184);
        uint64_t v10 = 8 * v7;
        while (1)
        {
          uint64_t v11 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(void))(**(void **)v9 + 16))();
          if (*(void *)(re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 25), v11) + 24)) {
            break;
          }
          v9 += 8;
          v10 -= 8;
          if (!v10) {
            goto LABEL_8;
          }
        }
        unint64_t v12 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        if (physx::shdfnd::g_isLockingEnabled) {
          int v13 = 1;
        }
        else {
          int v13 = physx::shdfnd::g_alwaysUseLocking;
        }
        if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && physx::shdfnd::g_isLockingEnabled) {
          physx::shdfnd::g_isLockingEnabled = 0;
        }
        re::ecs2::PhysicsSystem::ecsToSim((re::ecs2::PhysicsSystem *)v4, (const re::ecs2::Scene *)a2, 0);
        uint64_t v14 = (*(uint64_t (**)(void, BOOL *))(**(void **)(v4 + 160) + 32))(*(void *)(v4 + 160), a2);
        uint64_t v15 = v14;
        if (v6)
        {
          if (v14)
          {
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v14, 0);
            long long v60 = v56;
            if (v15 != (void)v56 || WORD4(v56) != 0xFFFFLL || (DWORD2(v56) & 0xFFFF0000) != 4294901760)
            {
              do
              {
                uint64_t v18 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v60);
                simd_float4 v19 = *(re::PhysicsSimulation **)(v18 + 8);
                if (v19)
                {
                  uint64_t v20 = v18;
                  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59, 7000, v4);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v58);
                  uint64_t v22 = *(void *)(v20 + 32);
                  if (v22)
                  {
                    *(void *)&long long v56 = v4;
                    *((void *)&v56 + 1) = a2;
                    v57[0] = 0;
                    objc_copyWeak(v57, (id *)(v20 + 48));
                    *(_OWORD *)(v22 + 8) = v56;
                    re::ArcWeakPtr<re::ecs2::Entity>::operator=((id *)(v22 + 24), v57);
                    objc_destroyWeak(v57);
                  }
                  BOOL hasCollisionEventSubscriptions = re::CollisionEventDelegate::hasCollisionEventSubscriptions(a2[36], v21);
                  uint64_t v24 = *((void *)v19 + 7);
                  LOBYTE(v56) = hasCollisionEventSubscriptions;
                  (*(void (**)(uint64_t, long long *))(*(void *)v24 + 216))(v24, &v56);
                  re::PhysicsSimulation::update(v19, v8);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)19>::end((uint64_t)v58);
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59);
                }
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v60);
              }
              while ((void)v60 != v15 || WORD4(v60) != 0xFFFF || WORD5(v60) != 0xFFFF);
            }
            unint64_t v12 = (unsigned char *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
          }
        }
        else if (v14)
        {
          if (*(_DWORD *)(v14 + 40))
          {
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v14, 0);
            long long v60 = v56;
            int v27 = (re::ecs2::PhysicsSimulationData *)re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v60);
            uint64_t v28 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v27);
            if (v28)
            {
              uint64_t v29 = *(void *)(v4 + 176);
              if (!v29)
              {
LABEL_77:
                if (v12[1464] != v13) {
                  v12[1464] = v13;
                }
                goto LABEL_9;
              }
              uint64_t v30 = v28;
              uint64_t v31 = *(uint64_t **)(v4 + 184);
              uint64_t v32 = 8 * v29;
              do
              {
                uint64_t v33 = *v31++;
                (*(void (**)(uint64_t, uint64_t, BOOL *))(*(void *)v33 + 64))(v33, v30, a2);
                v32 -= 8;
              }
              while (v32);
            }
          }
        }
        uint64_t v34 = *(void *)(v4 + 176);
        if (v34)
        {
          uint64_t v35 = *(uint64_t **)(v4 + 184);
          uint64_t v36 = 8 * v34;
          do
          {
            uint64_t v37 = *v35++;
            (*(void (**)(uint64_t, BOOL *))(*(void *)v37 + 72))(v37, a2);
            v36 -= 8;
          }
          while (v36);
        }
        if (v6)
        {
          uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(v4 + 40) + 80))(*(void *)(v4 + 40));
          if (v38)
          {
            unint64_t v39 = *(void *)(v4 + 96);
            if (v39 != -1) {
              re::DynamicBitset<unsigned long long,256ul>::setBit(v38 + 344, v39);
            }
          }
          uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(v4 + 40) + 104))(*(void *)(v4 + 40));
          uint64_t v41 = *(void *)(v40 + 24);
          if (v41)
          {
            uint64_t v42 = *(void **)(v40 + 40);
            uint64_t v43 = &v42[v41];
            float v44 = 3.4028e38;
            do
            {
              uint64_t v45 = (*(uint64_t (**)(void, void))(**(void **)(v4 + 160) + 32))(*(void *)(v4 + 160), *v42);
              if (v45)
              {
                uint64_t v46 = v45;
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v45, 0);
                BOOL v47 = v46 == (void)v56 && WORD4(v56) == 0xFFFFLL;
                if (!v47 || (DWORD2(v56) & 0xFFFF0000) != 4294901760)
                {
                  do
                  {
                    uint64_t v49 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v56);
                    uint64_t v50 = *(void *)(v49 + 8);
                    if (v50)
                    {
                      if ((*(unsigned int (**)(void))(*(void *)v50 + 104))(*(void *)(v49 + 8)))
                      {
                        float v51 = *(double *)(v50 + 888);
                        if (v44 > (float)(*(float *)(v50 + 68) - v51)) {
                          float v44 = *(float *)(v50 + 68) - v51;
                        }
                      }
                    }
                    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v56);
                  }
                  while ((void)v56 != v46 || WORD4(v56) != 0xFFFF || WORD5(v56) != 0xFFFF);
                }
              }
              ++v42;
            }
            while (v42 != v43);
            if (v44 != 3.4028e38) {
              re::ecs2::System::queueToRun((re::ecs2::System *)v4, v44);
            }
          }
        }
        goto LABEL_77;
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_PhysicsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_146, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_146))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF809E0, "PhysicsSystem");
    __cxa_guard_release(&_MergedGlobals_146);
  }
  return &unk_26AF809E0;
}

void re::ecs2::initInfo_PhysicsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x21255BB4348EC66CLL;
  v5[1] = "PhysicsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PhysicsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::PhysicsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::PhysicsSystem *re::internal::defaultConstruct<re::ecs2::PhysicsSystem>(int a1, int a2, re::ecs2::PhysicsSystem *this)
{
  return re::ecs2::PhysicsSystem::PhysicsSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsSystem>(int a1, int a2, re::ecs2::PhysicsSystem *this)
{
}

uint64_t re::ecs2::introspect_PhysicsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, this);
}

uint64_t re::ecs2::PhysicsSystem::typeInfo(re::ecs2::PhysicsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, 0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E2EA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E2EA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  float v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  float v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  BOOL result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      float v8 = (void *)(a1 + 152);
    }
    else {
      float v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  float v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      float v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *float v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (re::ecs2::PhysicsSimulationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
  {
    re::ecs2::PhysicsSimulationComponent::removeFromSimulation(v2);
  }
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  float v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        unint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          unint64_t v16 = v4 + 3;
        }
        else {
          unint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        unint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          unint64_t v12 = v10;
          if (v4[2]) {
            unint64_t v13 = v4 + 3;
          }
          else {
            unint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17 & 0xFFFFFFFE;
          unint64_t v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    int v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E2F28;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E2F80;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E2FD8;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E3030;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E2F28;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E2F80;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E2FD8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E3030;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2F28;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2F28;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2F80;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2F80;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E2FD8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E2FD8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3030;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3030;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3088;
  a1[31] = &unk_26E6FBC28;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3088;
  a1[31] = &unk_26E6FBC28;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (re::ecs2::ColliderComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
  {
    re::ecs2::ColliderComponent::removeFromSimulation(v2);
  }
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E3110;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3168;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E31C0;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E3218;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E3110;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3168;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E31C0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E3218;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3110;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3110;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3168;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3168;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E31C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E31C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3218;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3218;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3270;
  a1[31] = &unk_26E7057B0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3270;
  a1[31] = &unk_26E7057B0;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  *(void *)&long long v10 = a3;
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v10);
  uint64_t v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  unint64_t v8 = *(void *)(v7 + 48);
  unint64_t v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v7 + 16) + 8, v8);
  if (*(_DWORD *)(v9 + 40))
  {
    long long v10 = xmmword_234361D20;
    re::ecs2::RigidBodyComponentStateImpl::simToECS(a1 + 248, a2, (uint64_t)&v10, v7, v8, v9);
  }
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (re::ecs2::RigidBodyComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
  {
    re::ecs2::RigidBodyComponent::removeFromSimulation(v2);
  }
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E32F8;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3350;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E33A8;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E3400;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E32F8;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3350;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E33A8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E3400;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E32F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E32F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3350;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3350;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E33A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E33A8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3400;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3400;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3458;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3458;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t result = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    for (uint64_t i = *((void *)result + 18); i; --i)
      uint64_t result = re::ecs2::ForceEffectComponent::removeDefinitionLast(v3, *(void *)(v3 + 80));
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E34E0;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3538;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E3590;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E35E8;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E34E0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3538;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E3590;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E35E8;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E34E0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E34E0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3538;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3538;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3590;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3590;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E35E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E35E8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3640;
  a1[31] = &unk_26E6E3D00;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3640;
  a1[31] = &unk_26E6E3D00;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2)
  {
    re::ecs2::BallSocketJointComponent::removeFromSimulation(v2);
  }
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E36C8;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3720;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E3778;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E37D0;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E36C8;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3720;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E3778;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E37D0;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E36C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E36C8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3720;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3720;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3778;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3778;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E37D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E37D0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3828;
  a1[31] = &unk_26E6E3D40;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3828;
  a1[31] = &unk_26E6E3D40;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  unint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2)
  {
    re::ecs2::HingeJointComponent::removeFromSimulation(v2);
  }
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E38B0;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3908;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E3960;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E39B8;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E38B0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3908;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E3960;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E39B8;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E38B0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E38B0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3908;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3908;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3960;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3960;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E39B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E39B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3A10;
  a1[31] = &unk_26E6E3D80;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E3A10;
  a1[31] = &unk_26E6E3D80;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 32);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  uint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  unint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  v57[0] = a2;
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 128);
  unint64_t v6 = *(void *)(a1 + 136);
  int v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(a1 + 152);
    }
    else {
      unint64_t v8 = *(void **)(a1 + 160);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    int v9 = (uint64_t *)(a1 + 152);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int v9 = *(uint64_t **)(a1 + 160);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = a1 + 176;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *(void *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity((void *)(a1 + 8), (v17 + 4) >> 2);
    unint64_t v18 = *(void *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v19 = a1 + 32;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 40);
  }
  uint64_t v20 = *(void *)(v19 + 8 * (v17 >> 2));
  ++*(void *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *(void *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(v27, v4, v57[0]);
  *(void *)&v66[0] = *(void *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  unint64_t v28 = *(void *)(a1 + 48);
  unint64_t v29 = *(void *)(a1 + 168);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *(void *)(a1 + 168) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *(void *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v33 = a1 + 152;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 160);
    }
    *(void *)(v33 + 8 * *(void *)(a1 + 136) - 8) &= v31;
  }
  unint64_t v34 = *(void *)(a1 + 48);
  unint64_t v35 = *(void *)(a1 + 216);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *(void *)(a1 + 216) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *(void *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*(unsigned char *)(a1 + 192)) {
      uint64_t v39 = a1 + 200;
    }
    else {
      uint64_t v39 = *(void *)(a1 + 208);
    }
    *(void *)(v39 + 8 * *(void *)(a1 + 184) - 8) &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v40 = *(void *)(a1 + 184);
  int v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)(a1 + 200);
    }
    else {
      uint64_t v42 = *(void **)(a1 + 208);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)(a1 + 200);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = *(uint64_t **)(a1 + 208);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 8;
  long long v25 = xmmword_234361D20;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, long long *, void *, unint64_t, unint64_t, uint64_t))(*(void *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v11) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(unsigned char *)(a1 + 240)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 184);
  int v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 200);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 208);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_27:
    long long v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 200);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 208);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_27;
  }
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    int v7 = 0;
  }
  else {
    int v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      int v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 3; j != 7; ++j)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState(v7, v16, v17, 0);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      uint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re::ecs2::PhysicsConstraintsComponent *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t result = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    return (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(result, 1);
  }
  return result;
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            unint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E3A98;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    unint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E3AF0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    __n128 v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E3B48;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E3BA0;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E3A98;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float32x4_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E3AF0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float32x4_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E3B48;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E3BA0;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      int v8 = (void *)((char *)v4 + 192);
    }
    else {
      int v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3A98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3A98;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3AF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3AF0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3B48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3B48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3BA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3BA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v8, (void *)a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (*(void *)(v6 + 72 * v5 + 16) != *(void *)a2
       || *(unsigned __int16 *)(v6 + 72 * v5 + 24) != (unsigned __int16)*(_DWORD *)(a2 + 8)
       || *(unsigned __int16 *)(v6 + 72 * v5 + 26) != HIWORD(*(_DWORD *)(a2 + 8))
       || ((*(_DWORD *)(v6 + 72 * v5 + 28) ^ *(_DWORD *)(a2 + 12)) & 0xFFFFFF) != 0)
  {
    uint64_t v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 72 * v5 + 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3BF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3BF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3C50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3C50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E3CA8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E3CA8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

id *re::ArcWeakPtr<re::ecs2::Entity>::operator=(id *location, id *a2)
{
  if (a2 != location)
  {
    objc_destroyWeak(location);
    *id location = 0;
    objc_copyWeak(location, a2);
  }
  return location;
}

double re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    uint64_t v2 = result + 24;
    re::BucketArray<RESubscriptionHandle,16ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

void re::FixedArray<re::ecs2::ComponentTypeBase const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  char v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    char v8 = (void *)((char *)v8 + v5 - 8);
  }
  *char v8 = 0;
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::PhysicsSystem>(re::ecs2::PhysicsSystem *,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3);
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<RESubscriptionHandle,16ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 16 * v3)
  {
    re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 16) >> 4);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 4));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 0xF);
}

uint64_t *re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 16 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    uint64_t result = (uint64_t *)re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v13, v12);
          long long v15 = *(_OWORD *)v31;
          *(_OWORD *)uint64_t v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v31[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 80 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = v25 + 80 * v9;
  *(void *)(v26 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v26 + 32) = 0;
  v26 += 24;
  *(_DWORD *)(v26 + 16) = 1;
  uint64_t v27 = a2;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 40) = 0;
  *(void *)(v26 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v31, v26);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v26, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v31);
  uint64_t result = *(void *)v31;
  if (*(void *)v31 && (v31[16] & 1) == 0) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v31 + 40))();
  }
  uint64_t v29 = v25 + 80 * v9;
  uint64_t v30 = *(void *)(v29 + 64);
  *(void *)(v29 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = v30;
  ++*(_DWORD *)(v29 + 72);
  ++*(_DWORD *)(a5 + 48);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    char v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. indeCGFloat x = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 4) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 4)) + 16 * (a2 & 0xF);
}

void re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)uint64_t v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 96 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 96 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 96 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 96 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 96 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 96 * v17 + 16) = *(void *)v13;
            uint64_t v21 = (_OWORD *)(*(void *)(a1 + 16) + 96 * v17);
            long long v22 = *(_OWORD *)(v13 + 16);
            long long v23 = *(_OWORD *)(v13 + 32);
            long long v24 = *(_OWORD *)(v13 + 64);
            void v21[4] = *(_OWORD *)(v13 + 48);
            v21[5] = v24;
            unsigned __int16 v21[2] = v22;
            void v21[3] = v23;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 96;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

void re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    int v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[488].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[488].i64[0] = v5;
      unint64_t v6 = v3[488].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[488].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[489] = vaddq_s64(v3[489], v7);
      *(unsigned char *)(v2 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)19>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    int v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[80].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[80].i64[0] = v5;
      unint64_t v6 = v3[80].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[80].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[81] = vaddq_s64(v3[81], v7);
      *(unsigned char *)(v2 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_AnchoringResourceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_147, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_147))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80A98, "AnchoringResourceComponent");
    __cxa_guard_release(&_MergedGlobals_147);
  }
  return &unk_26AF80A98;
}

void re::ecs2::initInfo_AnchoringResourceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v29[0] = 0x9BAD4079DE588644;
  v29[1] = "AnchoringResourceComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80A60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80A60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A68 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "imageAsset";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A70 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_float((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "imageWidth";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A78 = v15;
      unint64_t v16 = re::introspectionAllocator((re *)v15);
      int v18 = re::introspect_AssetHandle((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "arReferenceObjectAsset";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v19 + 32) = 0x4000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A80 = v19;
      int v20 = re::introspectionAllocator((re *)v19);
      long long v22 = re::IntrospectionInfo<unsigned char [16]>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "arReferenceObjectIdentifier";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v23 + 32) = 0x5800000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A88 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_float((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "imageHeight";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v27 + 32) = 0x3C00000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80A90 = v27;
      __cxa_guard_release(&qword_26AF80A60);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 6;
  *((void *)this + 8) = &qword_26AF80A68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchoringResourceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchoringResourceComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchoringResourceComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::AnchoringResourceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

double re::internal::defaultConstruct<re::ecs2::AnchoringResourceComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 12) = 0;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E3E38;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AnchoringResourceComponent>(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E3E38;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(void *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AnchoringResourceComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchoringResourceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchoringResourceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchoringResourceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchoringResourceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchoringResourceComponent>, this);
}

void re::ecs2::AnchoringResourceComponent::~AnchoringResourceComponent(re::ecs2::AnchoringResourceComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 64));
  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::introspect_BlendingType(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "BlendingOpaque";
      re::introspect_BlendingType(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "BlendingTranslucent";
      qword_26879F530 = (uint64_t)v13;
      unint64_t v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = 2;
      *(void *)(v15 + 16) = "BlendingCutout";
      qword_26879F538 = v15;
    }
  }
  {
    unint64_t v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_BlendingType(BOOL)::info, "BlendingType", 1, 1, 1, 1);
    *(void *)unint64_t v16 = &unk_26E715E00;
    *((void *)v16 + 8) = &re::introspect_BlendingType(BOOL)::enumTable;
    *((_DWORD *)v16 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_BlendingType(BOOL)::isInitialized) {
      return &re::introspect_BlendingType(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = re::introspect_BlendingType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::introspect_BlendingType(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_BlendingType(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_BlendingType(BOOL)::info;
    }
  }
  re::introspect_BlendingType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_BlendingType(BOOL)::info, a2);
  v17[0] = 0x31142575D52B81D6;
  v17[1] = (uint64_t)"BlendingType";
  xmmword_26879F568 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_BlendingType(BOOL)::info;
}

void loadMatDefAsset(re::AssetHandle *this, const char *a2, AssetService *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    goto LABEL_3;
  }
  (*((void (**)(long long *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v8, a3, a2);
  long long v5 = *(_OWORD *)this;
  *(_OWORD *)this = v8;
  long long v8 = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = v9;
  uint64_t v9 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
LABEL_3:
    if (!atomic_load((unsigned int *)(v4 + 704))) {
      re::AssetHandle::loadAsync(this);
    }
  }
}

void re::ecs2::PrimitiveRenderingSystem::willAddSystemToECSService(re::ecs2::PrimitiveRenderingSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  char v3 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v2);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 352), "engine:primitivePoint.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 376), "engine:primitiveLine.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 400), "engine:primitiveShapeWireframe.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 424), "engine:primitiveMeshWireframe.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 448), "engine:primitivePointNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 472), "engine:primitiveLineNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 496), "engine:primitiveShapeWireframeNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 520), "engine:primitiveMeshWireframeNoZ.rematerialdefinition", v3);
}

void tryMakeMaterialAsset(re::AssetHandle *a1, re::AssetHandle *a2, re::RenderManager *a3, AssetService *a4)
{
  uint64_t v7 = *((void *)a1 + 1);
  if (!v7 || (unsigned int v8 = atomic_load((unsigned int *)(v7 + 704)), v8 != 2))
  {
    uint64_t v9 = *((void *)a2 + 1);
    if (v9)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
      if (v10 == 2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)v13, a2);
        re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a4, (uint64_t)a3, (re::AssetHandle *)v13, 0, 0);
        long long v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v14;
        long long v14 = v11;
        uint64_t v12 = *((void *)a1 + 2);
        *((void *)a1 + 2) = v15;
        uint64_t v15 = v12;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
      }
    }
  }
}

uint64_t re::ecs2::PrimitiveRenderingSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::RenderManager>(v4);
  if (result)
  {
    uint64_t v6 = (re::RenderManager *)result;
    uint64_t v7 = *(void *)(result + 104);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 312);
      if (v8)
      {
        if (*(unsigned char *)v8 && *(void *)(v8 + 272))
        {
          uint64_t v9 = re::RenderFrameBox::get(v7 + 344, 0xFFFFFFFFFFFFFFFuLL);
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
          long long v11 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v10);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 160), (re::AssetHandle *)(a1 + 352), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 184), (re::AssetHandle *)(a1 + 376), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 208), (re::AssetHandle *)(a1 + 400), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 232), (re::AssetHandle *)(a1 + 424), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 256), (re::AssetHandle *)(a1 + 448), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 280), (re::AssetHandle *)(a1 + 472), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 304), (re::AssetHandle *)(a1 + 496), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 328), (re::AssetHandle *)(a1 + 520), v6, v11);
          uint64_t v12 = *(re::MaterialParameterTableBuilder **)(v9 + 376);
          uint64_t v63 = 0;
          v60[1] = 0;
          uint64_t v61 = 0;
          int v62 = 0;
          v60[0] = v12;
          re::DynamicArray<re::MeshScene>::setCapacity(v60, 0);
          ++v62;
          uint64_t v13 = *(void *)(v8 + 272);
          if (v13)
          {
            uint64_t v14 = *(void *)(v8 + 288);
            uint64_t v15 = v14 + 1200 * v13;
            do
            {
              uint64_t v16 = *(void *)(v14 + 16);
              if (v16 && (v16 << 7) - 128 + *(void *)(v14 + 520))
              {
                uint64_t v17 = *(void *)(v14 + 1096);
                if (v17
                  || (uint64_t v18 = *(void *)(a1 + 168)) != 0
                  && (unsigned int v19 = atomic_load((unsigned int *)(v18 + 704)), v19 == 2)
                  && (uint64_t v20 = *(void *)(a1 + 264)) != 0
                  && (unsigned int v21 = atomic_load((unsigned int *)(v20 + 704)), v21 == 2)
                  && (*(unsigned char *)(v14 + 1128)
                    ? (long long v22 = (re::MaterialAsset *)(a1 + 160))
                    : (long long v22 = (re::MaterialAsset *)(a1 + 256)),
                      (uint64_t v17 = *(void *)(re::AssetHandle::asset<re::MaterialAsset>(v22) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfPoints((uint64_t *)v14, v12, v17, (uint64_t)&v64);
                  if (v60[0]) {
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v60, &v64);
                  }
                  if (v69)
                  {
                    if (v68) {
                      uint64_t v68 = 0;
                    }
                    if (v67) {
                      (*(void (**)(void))(*(void *)v69 + 40))();
                    }
                  }
                }
              }
              uint64_t v23 = *(void *)(v14 + 136);
              if (v23 && (v23 << 7) - 128 + *(void *)(v14 + 528))
              {
                uint64_t v24 = *(void *)(v14 + 1104);
                if (v24
                  || (uint64_t v25 = *(void *)(a1 + 192)) != 0
                  && (unsigned int v26 = atomic_load((unsigned int *)(v25 + 704)), v26 == 2)
                  && (uint64_t v27 = *(void *)(a1 + 288)) != 0
                  && (unsigned int v28 = atomic_load((unsigned int *)(v27 + 704)), v28 == 2)
                  && (*(unsigned char *)(v14 + 1129)
                    ? (uint64_t v29 = (re::MaterialAsset *)(a1 + 184))
                    : (uint64_t v29 = (re::MaterialAsset *)(a1 + 280)),
                      (uint64_t v24 = *(void *)(re::AssetHandle::asset<re::MaterialAsset>(v29) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfLines((void *)v14, v12, v24, (uint64_t)&v64);
                  if (v60[0]) {
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v60, &v64);
                  }
                  if (v69)
                  {
                    if (v68) {
                      uint64_t v68 = 0;
                    }
                    if (v67) {
                      (*(void (**)(void))(*(void *)v69 + 40))();
                    }
                  }
                }
              }
              if (*(void *)(v14 + 1176))
              {
                unint64_t v30 = 1;
                do
                  uint64_t v31 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(v14, v30 - 1);
                while (v30++ < *(void *)(v14 + 1176) && v31 == 0);
                if (v31)
                {
                  uint64_t v34 = *(void *)(v14 + 1112);
                  if (v34
                    || (uint64_t v44 = *(void *)(a1 + 216)) != 0
                    && (unsigned int v45 = atomic_load((unsigned int *)(v44 + 704)), v45 == 2)
                    && (uint64_t v46 = *(void *)(a1 + 312)) != 0
                    && (unsigned int v47 = atomic_load((unsigned int *)(v46 + 704)), v47 == 2)
                    && (*(unsigned char *)(v14 + 1130)
                      ? (unint64_t v48 = (re::MaterialAsset *)(a1 + 208))
                      : (unint64_t v48 = (re::MaterialAsset *)(a1 + 304)),
                        (uint64_t v34 = *(void *)(re::AssetHandle::asset<re::MaterialAsset>(v48) + 1664)) != 0))
                  {
                    re::PrimitiveRenderingContext::buildMeshSceneOfShapes((void *)v14, v12, v34, (re::MaterialParameterBlock *)&v64);
                    unint64_t v35 = v65;
                    if (v65)
                    {
                      uint64_t v36 = 0;
                      unint64_t v37 = 0;
                      do
                      {
                        if (v60[0])
                        {
                          re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v60, (long long *)(v66 + v36));
                          unint64_t v35 = v65;
                        }
                        ++v37;
                        v36 += 656;
                      }
                      while (v35 > v37);
                    }
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v64);
                  }
                }
              }
              if (*(void *)(v14 + 1072))
              {
                uint64_t v38 = *(void *)(v14 + 1120);
                if (v38
                  || (uint64_t v39 = *(void *)(a1 + 240)) != 0
                  && (unsigned int v40 = atomic_load((unsigned int *)(v39 + 704)), v40 == 2)
                  && (uint64_t v41 = *(void *)(a1 + 336)) != 0
                  && (unsigned int v42 = atomic_load((unsigned int *)(v41 + 704)), v42 == 2)
                  && (*(unsigned char *)(v14 + 1131)
                    ? (uint64_t v43 = (re::MaterialAsset *)(a1 + 232))
                    : (uint64_t v43 = (re::MaterialAsset *)(a1 + 328)),
                      (uint64_t v38 = *(void *)(re::AssetHandle::asset<re::MaterialAsset>(v43) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfMeshes(v14, v12, v38, (uint64_t)&v64);
                  if (v60[0]) {
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v60, &v64);
                  }
                  if (v69)
                  {
                    if (v68) {
                      uint64_t v68 = 0;
                    }
                    if (v67) {
                      (*(void (**)(void))(*(void *)v69 + 40))();
                    }
                  }
                }
              }
              v14 += 1200;
            }
            while (v14 != v15);
          }
          if (v61)
          {
            uint64_t v49 = *(void *)(a2 + 8);
            if (v49)
            {
              uint64_t v50 = *(re::ecs2::RenderingSubsystem ***)a2;
              uint64_t v51 = 8 * v49;
              do
              {
                uint64_t v52 = *v50++;
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v52, 0, (re::DynamicString **)v9, &v64);
                unint64_t v59 = (unint64_t)v64 >> 1;
                uint64_t v53 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v9 + 264), (const re::WeakStringID *)&v59)+ 48);
                (*(void (**)(void))(v53 + 568))();
                re::StringID::destroyString((re::StringID *)&v64);
                v51 -= 8;
              }
              while (v51);
            }
          }
          uint64_t v54 = *(void *)(v8 + 272);
          *(void *)(v8 + 272) = 0;
          if (v54)
          {
            uint64_t v55 = *(void *)(v8 + 288);
            uint64_t v56 = v55 + 1200 * v54;
            do
            {
              re::DynamicArray<unsigned long>::deinit(v55 + 1136);
              re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(v55 + 1056);
              re::DynamicArray<unsigned long>::deinit(v55 + 1016);
              for (uint64_t i = 976; i != 816; i -= 40)
                re::DynamicArray<unsigned long>::deinit(v55 + i);
              do
              {
                re::DynamicArray<unsigned long>::deinit(v55 + i);
                i -= 40;
              }
              while (i != 656);
              do
              {
                re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v55 + i);
                i -= 40;
              }
              while (i != 496);
              for (uint64_t j = 240; j != -40; j -= 40)
                re::DynamicArray<unsigned long>::deinit(v55 + j);
              v55 += 1200;
            }
            while (v55 != v56);
          }
          ++*(_DWORD *)(v8 + 280);
          return re::DynamicArray<re::MeshScene>::deinit((uint64_t)v60);
        }
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_PrimitiveRenderingSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_148))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80B18, "PrimitiveRenderingSystem");
    __cxa_guard_release(&_MergedGlobals_148);
  }
  return &unk_26AF80B18;
}

void re::ecs2::initInfo_PrimitiveRenderingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCCA9A79D1A5F6028;
  v5[1] = "PrimitiveRenderingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x22000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_PrimitiveRenderingSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveRenderingSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveRenderingSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveRenderingSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::PrimitiveRenderingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveRenderingSystem>(int a1, int a2, char *a3)
{
  bzero(a3, 0x220uLL);
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *((void *)a3 + 19) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(a3 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)a3 = &unk_26E6E3EC0;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  *((_OWORD *)a3 + 12) = 0u;
  *((_OWORD *)a3 + 13) = 0u;
  *((_OWORD *)a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a3 + 15) = 0u;
  *((_OWORD *)a3 + 16) = 0u;
  *((_OWORD *)a3 + 17) = 0u;
  *((_OWORD *)a3 + 18) = 0u;
  *((_OWORD *)a3 + 19) = 0u;
  *((_OWORD *)a3 + objc_destroyWeak(this + 20) = 0u;
  *((_OWORD *)a3 + 21) = 0u;
  *((_OWORD *)a3 + 22) = 0u;
  *((_OWORD *)a3 + 23) = 0u;
  *((_OWORD *)a3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a3 + 25) = 0u;
  *((_OWORD *)a3 + 26) = 0u;
  *((_OWORD *)a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = 0u;
  *((_OWORD *)a3 + 28) = 0u;
  *((_OWORD *)a3 + 29) = 0u;
  *((_OWORD *)a3 + 30) = 0u;
  *((_OWORD *)a3 + 31) = 0u;
  *((_OWORD *)a3 + 32) = 0u;
  *((_OWORD *)a3 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PrimitiveRenderingSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PrimitiveRenderingSystem>(void *a1)
{
  bzero(a1, 0x220uLL);
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  a1[19] = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *a1 = &unk_26E6E3EC0;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + objc_destroyWeak(this + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PrimitiveRenderingSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PrimitiveRenderingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveRenderingSystem>, this);
}

void re::ecs2::PrimitiveRenderingSystem::~PrimitiveRenderingSystem(re::ecs2::PrimitiveRenderingSystem *this)
{
  re::ecs2::PrimitiveRenderingSystem::~PrimitiveRenderingSystem(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::AssetHandle *v2;

  *(void *)this = &unk_26E6E3EC0;
  uint64_t v2 = (re::ecs2::PrimitiveRenderingSystem *)((char *)this + 160);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 520));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 496));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 472));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 448));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 424));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 400));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 376));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 352));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 328));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 304));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 280));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 256));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 232));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 208));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::PrimitiveRenderingSystem::typeInfo(re::ecs2::PrimitiveRenderingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveRenderingSystem>, 0);
}

uint64_t *re::DynamicArray<re::MeshScene>::add(_anonymous_namespace_ *this, long long *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MeshScene>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = v5 + 656 * v4;
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[3];
  *(_OWORD *)(v6 + 32) = a2[2];
  *(_OWORD *)(v6 + 48) = v9;
  *(_OWORD *)uint64_t v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  long long v10 = a2[4];
  long long v11 = a2[5];
  long long v12 = a2[7];
  *(_OWORD *)(v6 + 96) = a2[6];
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  long long v13 = a2[8];
  long long v14 = a2[9];
  long long v15 = a2[11];
  *(_OWORD *)(v6 + 160) = a2[10];
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 128) = v13;
  *(_OWORD *)(v6 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
  long long v16 = a2[12];
  long long v17 = a2[13];
  long long v18 = a2[15];
  *(_OWORD *)(v6 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a2[14];
  *(_OWORD *)(v6 + 240) = v18;
  *(_OWORD *)(v6 + 192) = v16;
  *(_OWORD *)(v6 + 208) = v17;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  double result = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v6 + 256), (uint64_t *)a2 + 32);
  *(_DWORD *)(v6 + 3objc_destroyWeak(this + 20) = *((_DWORD *)a2 + 80);
  int v20 = *((unsigned __int8 *)a2 + 328);
  *(unsigned char *)(v6 + 328) = v20;
  if (v20) {
    *(void *)(v5 + 656 * v4 + 336) = *((void *)a2 + 42);
  }
  uint64_t v21 = v5 + 656 * v4;
  *(_OWORD *)(v21 + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(long long *)((char *)a2 + 344);
  long long v22 = *(long long *)((char *)a2 + 360);
  long long v23 = *(long long *)((char *)a2 + 376);
  long long v24 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(v21 + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(v21 + 408) = v24;
  *(_OWORD *)(v21 + 360) = v22;
  *(_OWORD *)(v21 + 376) = v23;
  long long v25 = *(long long *)((char *)a2 + 424);
  long long v26 = *(long long *)((char *)a2 + 440);
  long long v27 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(v21 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(v21 + 472) = v27;
  *(_OWORD *)(v21 + 42re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v25;
  *(_OWORD *)(v21 + 440) = v26;
  int v28 = *((unsigned __int8 *)a2 + 496);
  *(unsigned char *)(v21 + 496) = v28;
  if (v28)
  {
    long long v29 = a2[33];
    uint64_t v30 = v5 + 656 * v4;
    *(_OWORD *)(v30 + 512) = a2[32];
    *(_OWORD *)(v30 + 528) = v29;
  }
  uint64_t v31 = v5 + 656 * v4;
  *(void *)(v31 + 54re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((void *)a2 + 68);
  int v32 = *((unsigned __int8 *)a2 + 560);
  *(unsigned char *)(v31 + 560) = v32;
  if (v32)
  {
    uint64_t v33 = (_OWORD *)(v5 + 656 * v4);
    long long v34 = a2[36];
    long long v35 = a2[37];
    long long v36 = a2[39];
    v33[38] = a2[38];
    v33[39] = v36;
    v33[36] = v34;
    v33[37] = v35;
  }
  *(void *)(v5 + 656 * v4 + 640) = *((void *)a2 + 80);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::MeshScene>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshScene>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshScene>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::MeshScene>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MeshScene>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x290uLL))
        {
          uint64_t v2 = 656 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 656 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_22;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 656, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        long long v10 = &v8[41 * v9];
        long long v11 = v7;
        do
        {
          long long v12 = *v8;
          long long v13 = v8[1];
          long long v14 = v8[3];
          *((_OWORD *)v11 + 2) = v8[2];
          *((_OWORD *)v11 + 3) = v14;
          *(_OWORD *)long long v11 = v12;
          *((_OWORD *)v11 + 1) = v13;
          long long v15 = v8[4];
          long long v16 = v8[5];
          long long v17 = v8[7];
          *((_OWORD *)v11 + 6) = v8[6];
          *((_OWORD *)v11 + 7) = v17;
          *((_OWORD *)v11 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v15;
          *((_OWORD *)v11 + 5) = v16;
          long long v18 = v8[8];
          long long v19 = v8[9];
          long long v20 = v8[11];
          *((_OWORD *)v11 + 10) = v8[10];
          *((_OWORD *)v11 + 11) = v20;
          *((_OWORD *)v11 + 8) = v18;
          *((_OWORD *)v11 + 9) = v19;
          long long v21 = v8[12];
          long long v22 = v8[13];
          long long v23 = v8[15];
          *((_OWORD *)v11 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8[14];
          *((_OWORD *)v11 + 15) = v23;
          *((_OWORD *)v11 + 12) = v21;
          *((_OWORD *)v11 + 13) = v22;
          *((_OWORD *)v11 + 18) = 0u;
          *((_OWORD *)v11 + 19) = 0u;
          *((_OWORD *)v11 + 16) = 0u;
          *((_OWORD *)v11 + 17) = 0u;
          long long v24 = v8 + 16;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(v11 + 32, (uint64_t *)v8 + 32);
          *((_DWORD *)v11 + 80) = *((_DWORD *)v8 + 80);
          int v25 = *((unsigned __int8 *)v8 + 328);
          *((unsigned char *)v11 + 328) = v25;
          if (v25) {
            v11[42] = *((void *)v8 + 42);
          }
          *(_OWORD *)(v11 + 43) = *(long long *)((char *)v8 + 344);
          long long v26 = *(long long *)((char *)v8 + 360);
          long long v27 = *(long long *)((char *)v8 + 376);
          long long v28 = *(long long *)((char *)v8 + 392);
          *(_OWORD *)(v11 + 51) = *(long long *)((char *)v8 + 408);
          *(_OWORD *)(v11 + 49) = v28;
          *(_OWORD *)(v11 + 47) = v27;
          *(_OWORD *)(v11 + 45) = v26;
          long long v29 = *(long long *)((char *)v8 + 424);
          long long v30 = *(long long *)((char *)v8 + 440);
          long long v31 = *(long long *)((char *)v8 + 456);
          *(_OWORD *)(v11 + 59) = *(long long *)((char *)v8 + 472);
          *(_OWORD *)(v11 + 57) = v31;
          *(_OWORD *)(v11 + 55) = v30;
          *(_OWORD *)(v11 + 53) = v29;
          int v32 = *((unsigned __int8 *)v8 + 496);
          *((unsigned char *)v11 + 496) = v32;
          if (v32)
          {
            long long v33 = v8[33];
            *((_OWORD *)v11 + 32) = v8[32];
            *((_OWORD *)v11 + 33) = v33;
          }
          v11[68] = *((void *)v8 + 68);
          int v34 = *((unsigned __int8 *)v8 + 560);
          *((unsigned char *)v11 + 560) = v34;
          if (v34)
          {
            long long v35 = v8[36];
            long long v36 = v8[37];
            long long v37 = v8[39];
            *((_OWORD *)v11 + 38) = v8[38];
            *((_OWORD *)v11 + 39) = v37;
            *((_OWORD *)v11 + 36) = v35;
            *((_OWORD *)v11 + 37) = v36;
          }
          v11[80] = *((void *)v8 + 80);
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v8 + 16));
          v8 += 41;
          v11 += 82;
        }
        while (v24 + 25 != v10);
        long long v8 = (long long *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshScene>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 656 * v4;
        uint64_t v6 = v3 + 256;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v6);
          v6 += 656;
          v5 -= 656;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 96 * v4;
        do
        {
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v3);
          v3 += 96;
          v5 -= 96;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 6;
        do
        {
          uint64_t v6 = (void *)*((void *)v3 + 3);
          if (v6)
          {

            *((void *)v3 + 3) = 0;
          }
          re::StringID::destroyString(v3);
          uint64_t v3 = (re::StringID *)((char *)v3 + 64);
          v5 -= 64;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::StringID **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_NetworkEntityState(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_149, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_149))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80BE0, "NetworkEntityState");
    __cxa_guard_release(&_MergedGlobals_149);
  }
  return &unk_26AF80BE0;
}

void re::ecs2::initInfo_NetworkEntityState(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v26[0] = 0xEC448F177CEECF00;
  v26[1] = "NetworkEntityState";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80B98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80B98);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80BB8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::introspect_uint64_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "entityId";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80BC0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_uint64_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "parentGuid";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80BC8 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "active";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80BD0 = v20;
      long long v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::ecs2::introspect_NetworkShareMode((re::ecs2 *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "shareMode";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v24 + 32) = 0x2100000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80BD8 = v24;
      __cxa_guard_release(&qword_26AF80B98);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 5;
  *((void *)this + 8) = &qword_26AF80BB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkEntityState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkEntityState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkEntityState>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::NetworkEntityState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

void re::internal::defaultConstruct<re::ecs2::NetworkEntityState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = "";
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_WORD *)(a3 + 32) = 512;
}

void re::internal::defaultDestruct<re::ecs2::NetworkEntityState>(int a1, int a2, re::StringID *this)
{
}

uint64_t re::internal::defaultConstructV2<re::ecs2::NetworkEntityState>(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = "";
  *(void *)(result + 16) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_WORD *)(result + 32) = 512;
  return result;
}

uint64_t re::ecs2::NetworkEntityState::makeSyncInfo(re::ecs2::NetworkEntityState *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80BB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80BB0))
  {
    qword_26AF80BA8 = re::internal::getOrCreateInfo((re::internal *)"NetworkEntityState", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkEntityState, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkEntityState, (void (*)(re::IntrospectionBase *))&unk_26AF80BA0, 0);
    __cxa_guard_release(&qword_26AF80BB0);
  }
  re::getPrettyTypeName((re *)qword_26AF80BA8, (const re::IntrospectionBase *)&v3);
  RESyncSyncableTypeInfoSetDebugName();
  if (v3 && (v4 & 1) != 0) {
    (*(void (**)(void))(*(void *)v3 + 40))();
  }
  RESyncSyncableTypeInfoSetSupportsOwnershipTransfer();
  RESyncSyncableTypeInfoSetSupportsViews();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = a2;
  uint64_t v12 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb_EN3__08__invokeEPvPhm;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  re::DynamicString::setCapacity(&v13, 0);
  int v17 = 6;
  uint64_t v18 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v8);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>((re::snapshot::EncoderOPACK *)&v8, (uint64_t *)(a3 + 16));
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v8, (uint64_t *)(a3 + 24));
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v8, (unsigned __int8 *)(a3 + 32));
  size_t v5 = strlen(*(const char **)(a3 + 8));
  if (v5)
  {
    v7[0] = *(void *)(a3 + 8);
    v7[1] = v5;
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v8, (uint64_t)v7);
  }
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v8, (unsigned __int8 *)(a3 + 33));
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v8);
  RESyncBitWriterCloseBuffer();
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*v13 + 40))();
  }
  return 1;
}

unsigned int *re::snapshot::EncoderOPACK::beginObject(unsigned int *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2 < this[3]) {
    goto LABEL_2;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 1);
  if (this)
  {
    LODWORD(v2) = v1[2];
LABEL_2:
    uint64_t v3 = *(void *)v1;
    v1[2] = v2 + 1;
    *(unsigned char *)(v3 + v2) = -17;
  }
  return this;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>(re::snapshot::EncoderOPACK *this, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 9;
  }
  uint64_t v6 = *a2;
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>(re::snapshot::EncoderOPACK *this, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 10;
  }
  uint64_t v6 = *a2;
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 3);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 11;
  }
  int v6 = *a2;
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 5);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 13;
  }
  re::snapshot::EncoderOPACK::beginData((unsigned int *)this, *(void *)(a2 + 8), *(void *)(a2 + 8));
  int v6 = *(void **)a2;
  size_t v7 = *(void *)(a2 + 8);
  return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, v6, v7);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 6);
  }
  else
  {
    uint64_t v5 = *(void *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(unsigned char *)(v5 + vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 14;
  }
  int v6 = *a2;
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, v6);
}

unsigned int *re::snapshot::EncoderOPACK::endObject(unsigned int *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2 < this[3]) {
    goto LABEL_2;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 1);
  if (this)
  {
    LODWORD(v2) = v1[2];
LABEL_2:
    uint64_t v3 = *(void *)v1;
    v1[2] = v2 + 1;
    *(unsigned char *)(v3 + v2) = 3;
  }
  return this;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = RESyncBitReaderDataPtr();
  uint64_t v5 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  unsigned int v6 = v5;
  uint64_t v7 = v5;
  v20[0] = v4;
  v20[1] = v7;
  int v21 = -1;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v25 = 0;
  void v20[2] = v4;
  v20[3] = v4 + v6;
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v20, 0);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>((uint64_t)v20, a3 + 2);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v20, a3 + 3);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v20, (unsigned char *)a3 + 32);
  uint64_t v18 = 0;
  size_t v19 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v20, (uint64_t *)&v18);
  int v9 = v18;
  size_t v10 = v19;
  uint64_t v16 = 0;
  int v17 = "";
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  int v17 = "";
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  *a3 = v11;
  a3[1] = (uint64_t)v12;
  v26[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v26[1] = v14;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v16);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v20, (unsigned char *)a3 + 33);
  re::snapshot::DecoderOPACK::endObject(v20, 0);
  RESyncBitReaderSkipData();
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>(uint64_t a1, void *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if (result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>(uint64_t a1, void *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<2>(a1);
  if (result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>(uint64_t a1, unsigned char *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<3>(a1);
  if (result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<5>(a1);
  if (result)
  {
    unint64_t v10 = 0;
    if (re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)a1, &v10, 0))
    {
      long long v9 = *(_OWORD *)a1;
      unint64_t v5 = v10;
      *a2 = re::Slice<unsigned char>::range(&v9, *(void *)(a1 + 16) - v9, *(void *)(a1 + 16) - v9 + v10);
      a2[1] = v6;
      uint64_t v7 = (unsigned __int8 *)(*(void *)(a1 + 16) + v5);
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 **)(a1 + 16);
    }
    if ((unint64_t)v7 >= *(void *)(a1 + 24) || (int v8 = *v7, v8 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v8 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v7 + 1;
      uint64_t result = (v8 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>(uint64_t a1, unsigned char *a2)
{
  uint64_t result = re::snapshot::DecoderOPACK::advanceTo<6>(a1);
  if (result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    unint64_t v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(void *)(a1 + 24) || (int v6 = *v5, v6 == 3))
    {
      uint64_t result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v5 + 1;
      uint64_t result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

void ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = RESyncBitReaderBytesLeft();
  uint64_t v5 = RESyncBitReaderDataPtr();
  int v6 = (re *)MEMORY[0x237DBB060](a3, v5, v4);
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "WritePayloadCb: Error copying snapshot to packet", v8, 2u);
    }
  }
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = RESyncBitReaderBytesLeft();
  uint64_t v5 = RESyncBitReaderDataPtr();
  int v6 = (re *)MEMORY[0x237DBB060](a3, v5, v4);
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v9 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "ReadPayloadCb: Error copying payload to snapshot", v9, 2u);
    }
  }
  RESyncBitReaderSkipData();
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = RESyncBitReaderDataPtr();
  int v6 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  unsigned int v7 = v6;
  uint64_t v8 = v6;
  v42[0] = v5;
  v42[1] = v8;
  int v43 = -1;
  char v44 = 0;
  uint64_t v45 = 0;
  uint64_t v47 = 0;
  v42[2] = v5;
  float32x4_t v42[3] = v5 + v7;
  uint64_t v9 = RESyncBitReaderDataPtr();
  unint64_t v10 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  unsigned int v11 = v10;
  uint64_t v12 = v10;
  int v37 = -1;
  char v38 = 0;
  uint64_t v39 = 0;
  uint64_t v41 = 0;
  v36[1] = v12;
  v36[2] = v9;
  v36[3] = v9 + v11;
  uint64_t v35 = 0;
  v36[0] = v9;
  uint64_t v24 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v25 = 0;
  int v26 = 0;
  uint64_t v27 = a4;
  long long v28 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb0_EN3__18__invokeEPvPhm;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  re::DynamicString::setCapacity(&v29, 0);
  int v33 = 6;
  uint64_t v34 = 0;
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v42, 0);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v36, 0);
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v24);
  uint64_t v23 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v36, &v23);
  uint64_t v22 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v42, &v22);
  if (v22 != v23) {
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v24, &v22);
  }
  unsigned __int8 v21 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v36, &v21);
  unsigned __int8 v20 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v42, &v20);
  if (v21 != v20) {
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v24, &v20);
  }
  __s2 = 0;
  uint64_t v19 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v36, (uint64_t *)&__s2);
  __s1 = 0;
  size_t __n = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v42, (uint64_t *)&__s1);
  if (__n != v19 || __n && strncmp(__s1, __s2, __n)) {
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v24, (uint64_t)&__s1);
  }
  unsigned __int8 v15 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v36, &v15);
  unsigned __int8 v14 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v42, &v14);
  if (v15 != v14) {
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v24, &v14);
  }
  re::snapshot::DecoderOPACK::endObject(v42, 0);
  re::snapshot::DecoderOPACK::endObject(v36, 0);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v24);
  RESyncBitWriterCloseBuffer();
  uint64_t result = (uint64_t)v29;
  if (v29)
  {
    if (v30) {
      return (*(uint64_t (**)(void))(*v29 + 40))();
    }
  }
  return result;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_2_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = RESyncBitReaderDataPtr();
  int v6 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  unsigned int v7 = v6;
  uint64_t v8 = v6;
  v38[0] = v5;
  v38[1] = v8;
  int v39 = -1;
  char v40 = 0;
  uint64_t v41 = 0;
  uint64_t v43 = 0;
  void v38[2] = v5;
  v38[3] = v5 + v7;
  uint64_t v9 = RESyncBitReaderDataPtr();
  unint64_t v10 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  LODWORD(v5) = v10;
  uint64_t v11 = v10;
  v32[0] = v9;
  v32[1] = v11;
  int v33 = -1;
  char v34 = 0;
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v32[2] = v9;
  v32[3] = v9 + v5;
  uint64_t v31 = 0;
  unsigned __int8 v20 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  int v21 = 0;
  int v22 = 0;
  uint64_t v23 = a4;
  uint64_t v24 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb1_EN3__28__invokeEPvPhm;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  re::DynamicString::setCapacity(&v25, 0);
  int v29 = 6;
  uint64_t v30 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v20);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v38, 0);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v32, 0);
  uint64_t v19 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>((uint64_t)v38, &v19);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>((re::snapshot::EncoderOPACK *)&v20, &v19);
  uint64_t v18 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v38, &v18);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v32, &v18);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v20, &v18);
  unsigned __int8 v17 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v38, &v17);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v32, &v17);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v20, &v17);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v38, &v15);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v32, &v15);
  if (v16) {
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v20, (uint64_t)&v15);
  }
  unsigned __int8 v14 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v38, &v14);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v32, &v14);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v20, &v14);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v20);
  re::snapshot::DecoderOPACK::endObject(v38, 0);
  re::snapshot::DecoderOPACK::endObject(v32, 0);
  RESyncBitWriterCloseBuffer();
  RESyncBitReaderSkipData();
  int IsOverflow = RESyncBitReaderIsOverflow();
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*v25 + 40))();
  }
  return IsOverflow ^ 1u;
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb_EN3__08__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

uint64_t re::snapshot::Encoder::grow(re::snapshot::Encoder *this, unint64_t a2)
{
  uint64_t v4 = (const void *)(*((uint64_t (**)(void, void, unint64_t))this + 3))(*((void *)this + 2), *(void *)this, a2);
  *(void *)this = v4;
  *((_DWORD *)this + 3) = v5;
  if (v4) {
    BOOL v6 = a2 > v5;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = !v6;
  if (v6) {
    re::snapshot::Encoder::error(this, "couldn't grow buffer to %zu bytes (buffer = %p, capacitCGFloat y = %d)", a2, v4, v5);
  }
  return v7;
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb0_EN3__18__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb1_EN3__28__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

unsigned int *re::snapshot::Encoder::writeRaw<true>(unsigned int *this, void *__src, size_t __len)
{
  unsigned int v5 = this;
  uint64_t v6 = this[2];
  if (v6 + __len <= this[3])
  {
    if (!__len)
    {
LABEL_4:
      void v5[2] = v6 + __len;
      return this;
    }
LABEL_3:
    this = (unsigned int *)memmove((void *)(*(void *)v5 + v6), __src, __len);
    LODWORD(v6) = v5[2];
    goto LABEL_4;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + __len);
  if (this)
  {
    LODWORD(v6) = v5[2];
    if (!__len) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  return this;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<1>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 0)
  {
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int v4 = *v5;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v6 >= *(void *)(a1 + 24)) {
        break;
      }
      int v3 = *v6;
      if (v3 == 3) {
        break;
      }
      if ((v3 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v6 + 1;
        int Integer = v3 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 1) {
        return Integer == 1;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 1;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<2>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 1)
  {
    while (1)
    {
      int v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v3 + 1;
        int v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      unsigned int v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24)) {
        break;
      }
      int v6 = *v5;
      if (v6 == 3) {
        break;
      }
      if ((v6 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 2) {
        return Integer == 2;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 2;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<3>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 2)
  {
    while (1)
    {
      int v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v3 + 1;
        int v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      unsigned int v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24)) {
        break;
      }
      int v6 = *v5;
      if (v6 == 3) {
        break;
      }
      if ((v6 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 3) {
        return Integer == 3;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 3;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<5>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 4)
  {
    while (1)
    {
      int v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v3 + 1;
        int v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      unsigned int v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24)) {
        break;
      }
      int v6 = *v5;
      if (v6 == 3) {
        break;
      }
      if ((v6 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 5) {
        return Integer == 5;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 5;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<6>(uint64_t a1)
{
  int Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 5)
  {
    while (1)
    {
      int v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(void *)(a1 + 24))
      {
        int v4 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v3 + 1;
        int v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      unsigned int v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(void *)(a1 + 24)) {
        break;
      }
      int v6 = *v5;
      if (v6 == 3) {
        break;
      }
      if ((v6 - 7) > 0x28)
      {
        int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v5 + 1;
        int Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 6) {
        return Integer == 6;
      }
    }
    int Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 6;
}

uint64_t re::internal::CharacterControllerHitCallback::controllerHit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    goto LABEL_8;
  }
  id v5 = (id)(v4 + 8);
  uint64_t v6 = v4;
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = *(void *)(v6 + 24);
  }
  while (v6);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 24);
    }
    while (v8);
    unint64_t v10 = *(re::EventBus **)(*(void *)(v9 + 16) + 288);
  }
  else
  {
LABEL_8:
    unint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  v15[0] = *(void *)a1;
  v15[1] = v11;
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v17 = v12;
  long long v18 = *(_OWORD *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 64);
  Type = re::EventBus::getTypeId<RECharacterControllerDidHitEvent>();
  re::EventBus::publish(v10, v4, (uint64_t)Type, (uint64_t)v15, 0x50uLL, 0);
  if (v4) {

  }
  return 0;
}

void *re::ecs2::allocInfo_CharacterControllerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80C60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80C60))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80C90, "CharacterControllerComponent");
    __cxa_guard_release(&qword_26AF80C60);
  }
  return &unk_26AF80C90;
}

void re::ecs2::initInfo_CharacterControllerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0xD5FAC35167B7DF0;
  v12[1] = "CharacterControllerComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_150, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_150);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80C80 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_CharacterControllerDescription((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "m_controllerDesc";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x2800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80C88 = v10;
      __cxa_guard_release(&_MergedGlobals_150);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 2;
  *((void *)this + 8) = &qword_26AF80C80;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CharacterControllerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CharacterControllerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CharacterControllerComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::CharacterControllerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CharacterControllerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CharacterControllerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CharacterControllerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CharacterControllerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CharacterControllerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CharacterControllerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CharacterControllerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CharacterControllerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CharacterControllerComponent>, this);
}

void *re::ecs2::allocInfo_CharacterControllerStateComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80C78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80C78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80D08, "CharacterControllerStateComponent");
    __cxa_guard_release(&qword_26AF80C78);
  }
  return &unk_26AF80D08;
}

void re::ecs2::initInfo_CharacterControllerStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x12A2C497EF14DCA2;
  v9[1] = "CharacterControllerStateComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80C70, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80C70);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80C68 = v7;
      __cxa_guard_release(&qword_26AF80C70);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((void *)this + 8) = &qword_26AF80C68;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CharacterControllerStateComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CharacterControllerStateComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CharacterControllerStateComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::CharacterControllerStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::CharacterControllerStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E4268;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CharacterControllerStateComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::CharacterControllerStateComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E4268;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CharacterControllerStateComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CharacterControllerStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CharacterControllerStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CharacterControllerStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CharacterControllerStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CharacterControllerStateComponent>, this);
}

uint64_t *re::ecs2::CharacterControllerComponent::removeFromSimulation(uint64_t *this)
{
  if (this[10])
  {
    uint64_t v1 = this;
    uint64_t v2 = (id *)(this + 4);
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    if (WeakRetained)
    {
      uint64_t v4 = WeakRetained;
      uint64_t v5 = WeakRetained[6];
      uint64_t v6 = *(re::CollisionObject **)(v1[10] + 136);
      re::ContactSetCollection::remove((re::ContactSetCollection *)(*(void *)(v5 + 128) + 72), v6);
      (*(void (**)(void, re::CollisionObject *))(**(void **)(v5 + 128) + 200))(*(void *)(v5 + 128), v6);
      *((void *)v6 + 7) = 0;
      objc_destroyWeak(v2);
      v1[4] = 0;
    }
    this = re::globalAllocators((re *)WeakRetained);
    uint64_t v7 = (void (***)(uint64_t))v1[10];
    if (v7)
    {
      uint64_t v8 = this[2];
      (**v7)(v1[10]);
      this = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(uint64_t)))(*(void *)v8 + 40))(v8, v7);
    }
    v1[10] = 0;
  }
  return this;
}

double re::ecs2::CharacterControllerComponent::updateController(re::ecs2::CharacterControllerComponent *this, re::ecs2::PhysicsSimulationData *a2)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(a2);
  re::ecs2::TransformComponent::parentWorldMatrix4x4F(*((re::ecs2::TransformComponent **)this + 2), (const re::ecs2::Entity *)1, v148);
  re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v148, &v140);
  uint64_t v4 = *((void *)this + 10);
  if (v4)
  {
    simd_float4x4 v153 = __invert_f4(*(simd_float4x4 *)(v4 + 272));
    float32x4_t v123 = (float32x4_t)v153.columns[0];
    float32x4_t v124 = (float32x4_t)v153.columns[1];
    float32x4_t v125 = (float32x4_t)v153.columns[2];
    float32x4_t v131 = (float32x4_t)v153.columns[3];
    (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 10) + 40))(v148);
    float32x4_t v132 = vaddq_f32(v131, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v123, *(float *)v148), v124, *(float32x2_t *)v148, 1), v125, *(float32x4_t *)v148, 2));
    float32x4_t v126 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 3);
    int32x4_t v5 = (int32x4_t)vmulq_f32(v123, v123);
    v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
    float32x2_t v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
    float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
    v150.columns[0] = (simd_float3)vmulq_n_f32(v123, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
    float32x4_t v8 = vmulq_f32(v124, (float32x4_t)v150.columns[0]);
    float32x4_t v9 = vmulq_f32((float32x4_t)v150.columns[0], (float32x4_t)v150.columns[0]);
    v9.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0];
    float32x4_t v10 = vsubq_f32(v124, vmulq_n_f32((float32x4_t)v150.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]/ v9.f32[0]));
    int32x4_t v11 = (int32x4_t)vmulq_f32(v10, v10);
    v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
    v11.i32[0] = vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).u32[0];
    float32x4_t v14 = vmulq_f32(v125, (float32x4_t)v150.columns[0]);
    v150.columns[1] = (simd_float3)vmulq_n_f32(v10, *(float *)v11.i32);
    float32x4_t v15 = vsubq_f32(v125, vmulq_n_f32((float32x4_t)v150.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]/ v9.f32[0]));
    float32x4_t v16 = vmulq_f32(v125, (float32x4_t)v150.columns[1]);
    float32x4_t v17 = vmulq_f32((float32x4_t)v150.columns[1], (float32x4_t)v150.columns[1]);
    float32x4_t v18 = vsubq_f32(v15, vmulq_n_f32((float32x4_t)v150.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
    int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
    v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
    *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
    v150.columns[2] = (simd_float3)vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(v150);
    float32x4_t v73 = vdivq_f32(v132, v126);
    int8x16_t v74 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v148[16], *(int32x4_t *)&v148[16]), *(int8x16_t *)&v148[16], 0xCuLL), vnegq_f32(_Q0)), *(float32x4_t *)&v148[16], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    _S2 = *(_DWORD *)&v148[28];
    float32x4_t v80 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL), *(float32x4_t *)&v148[16], _Q0, 3), _Q0, *(float32x4_t *)&v148[16], 3);
    __asm { FMLA            S1, S2, V0.S[3] }
    v80.i32[3] = _S1;
    uint64_t v81 = *((void *)this + 2);
    uint64_t v82 = *(float32x4_t **)(v81 + 240);
    if (!v82)
    {
      float32x4_t v129 = v80;
      float32x4_t v135 = v73;
      uint64_t v83 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v81 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      float32x4_t v80 = v129;
      float32x4_t v73 = v135;
      uint64_t v82 = (float32x4_t *)v83;
    }
    v82[3] = v80;
    v82[4] = v73;
    re::ecs2::Component::markDirty(v82);
    uint64_t v84 = *(re::ecs2::NetworkComponent **)(*((void *)this + 2) + 200);
    if (v84) {
      re::ecs2::NetworkComponent::markDirty(v84, (const re::ecs2::Component *)v82);
    }
LABEL_25:
    uint64_t v85 = *((void *)this + 10);
    float32x4_t v86 = *(float32x4_t *)(v85 + 288);
    float32x4_t v144 = *(float32x4_t *)(v85 + 272);
    float32x4_t v145 = v86;
    float32x4_t v87 = *(float32x4_t *)(v85 + 320);
    int8x16_t v146 = *(int8x16_t *)(v85 + 304);
    float32x4_t v147 = v87;
    if (!re::areAlmostEqual<float>(v144.f32, (float *)&v140))
    {
      re::ecs2::TransformComponent::worldMatrix4x4F(*((re::ecs2::TransformComponent ***)this + 2), (const re::ecs2::Entity *)1, v148);
      re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v148, &v137);
      float32x4_t v136 = v139[1];
      float32x4_t v88 = vmulq_f32(v137, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v139[0], (int8x16_t)v139[0], 0xCuLL), (int8x16_t)v139[0], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v138, v138), (int8x16_t)v138, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139[0], (int32x4_t)v139[0]), (int8x16_t)v139[0], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v138, (int8x16_t)v138, 0xCuLL), (int8x16_t)v138, 8uLL)));
      BOOL v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0] <= 0.0;
      float v89 = -1.0;
      if (!v23) {
        float v89 = 1.0;
      }
      float32x4_t v90 = vmulq_f32(v137, v137);
      float32x4_t v91 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1)));
      v91.f32[0] = sqrtf(v91.f32[0]);
      float32x4_t v92 = vmulq_f32((float32x4_t)v138, (float32x4_t)v138);
      float32x4_t v93 = vmulq_f32(v139[0], v139[0]);
      v91.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]);
      v91.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).f32[0]);
      long long v94 = (__int128)vmulq_n_f32(v91, v89);
      float32x4_t v130 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v94, 0);
      float32x4_t v95 = vdivq_f32(v137, v130);
      float32x4_t v96 = vdivq_f32((float32x4_t)v138, (float32x4_t)vdupq_lane_s32((int32x2_t)(v94 >> 32), 0));
      float32x4_t v97 = vdivq_f32(v139[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2));
      int32x4_t v98 = (int32x4_t)vmulq_f32(v95, v95);
      v98.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v98, 2), vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1))).u32[0];
      *(float32x2_t *)v91.f32 = vrsqrte_f32((float32x2_t)v98.u32[0]);
      *(float32x2_t *)v91.f32 = vmul_f32(*(float32x2_t *)v91.f32, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32)));
      v152.columns[0] = (simd_float3)vmulq_n_f32(v95, vmul_f32(*(float32x2_t *)v91.f32, vrsqrts_f32((float32x2_t)v98.u32[0], vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32))).f32[0]);
      float32x4_t v99 = vmulq_f32((float32x4_t)v152.columns[0], v96);
      float32x4_t v100 = vmulq_f32((float32x4_t)v152.columns[0], (float32x4_t)v152.columns[0]);
      float32x4_t v101 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1)));
      float32x4_t v102 = vsubq_f32(v96, vmulq_n_f32((float32x4_t)v152.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))), v101).f32[0]));
      int32x4_t v103 = (int32x4_t)vmulq_f32(v102, v102);
      v103.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))).u32[0];
      *(float32x2_t *)v92.f32 = vrsqrte_f32((float32x2_t)v103.u32[0]);
      *(float32x2_t *)v92.f32 = vmul_f32(*(float32x2_t *)v92.f32, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32)));
      v103.i32[0] = vmul_f32(*(float32x2_t *)v92.f32, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32))).u32[0];
      float32x4_t v104 = vmulq_f32((float32x4_t)v152.columns[0], v97);
      v152.columns[1] = (simd_float3)vmulq_n_f32(v102, *(float *)v103.i32);
      float32x4_t v105 = vsubq_f32(v97, vmulq_n_f32((float32x4_t)v152.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]/ v101.f32[0]));
      float32x4_t v106 = vmulq_f32(v97, (float32x4_t)v152.columns[1]);
      float32x4_t v107 = vmulq_f32((float32x4_t)v152.columns[1], (float32x4_t)v152.columns[1]);
      float32x4_t v108 = vsubq_f32(v105, vmulq_n_f32((float32x4_t)v152.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1))).f32[0]));
      int32x4_t v109 = (int32x4_t)vmulq_f32(v108, v108);
      v109.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v109, 2), vadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1))).u32[0];
      *(float32x2_t *)v107.f32 = vrsqrte_f32((float32x2_t)v109.u32[0]);
      *(float32x2_t *)v107.f32 = vmul_f32(*(float32x2_t *)v107.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32)));
      v152.columns[2] = (simd_float3)vmulq_n_f32(v108, vmul_f32(*(float32x2_t *)v107.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32))).f32[0]);
      *(double *)v110.i64 = simd_quaternion(v152);
      uint64_t v111 = v110.i64[1];
      float32x4_t v112 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1);
      uint64_t v113 = v110.i64[0];
      unsigned __int8 v114 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v110, v112), (int8x16_t)vcgeq_f32(v112, v110)))).u8[0];
      *(int32x2_t *)v110.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL));
      *(int8x8_t *)v110.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v110.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v110.f32)));
      if ((v114 | (v110.i8[4] | v110.i8[0])))
      {
        uint64_t v113 = 0;
        uint64_t v111 = 0x3F80000000000000;
      }
      *(float32x4_t *)float32x4_t v148 = v136;
      *(void *)&v148[16] = v113;
      *(void *)&unsigned char v148[24] = v111;
      long long v115 = (_OWORD *)*((void *)this + 10);
      long long v116 = *(_OWORD *)&v148[16];
      v115[1] = v136;
      v115[2] = v116;
      (*(void (**)(_OWORD *, unsigned char *))(*(void *)v115 + 64))(v115, v148);
      uint64_t v117 = *(void *)(*((void *)this + 10) + 136);
      float32x4_t v137 = v130;
      re::CollisionObject::setScale(v117, &v137);
      uint64_t v118 = (_OWORD *)*((void *)this + 10);
      long long v119 = v141;
      v118[17] = v140;
      v118[18] = v119;
      double result = *(double *)&v142;
      long long v120 = v143;
      v118[19] = v142;
      v118[20] = v120;
    }
    return result;
  }
  uint64_t v21 = *((void *)a2 + 1);
  re::ecs2::TransformComponent::worldMatrix4x4F(*((re::ecs2::TransformComponent ***)this + 2), (const re::ecs2::Entity *)1, v148);
  re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v148, &v144);
  float32x4_t v133 = v147;
  float32x4_t v22 = vmulq_f32(v144, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v146, v146, 0xCuLL), v146, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v146, (int32x4_t)v146), v146, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v145, (int8x16_t)v145, 0xCuLL), (int8x16_t)v145, 8uLL)));
  BOOL v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] <= 0.0;
  float v24 = -1.0;
  if (!v23) {
    float v24 = 1.0;
  }
  float32x4_t v25 = vmulq_f32(v144, v144);
  float32x4_t v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
  v26.f32[0] = sqrtf(v26.f32[0]);
  float32x4_t v27 = vmulq_f32(v145, v145);
  float32x4_t v28 = vmulq_f32((float32x4_t)v146, (float32x4_t)v146);
  v26.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
  v26.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
  long long v127 = (__int128)vmulq_n_f32(v26, v24);
  float32x4_t v29 = vdivq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v127, 0));
  float32x4_t v30 = vdivq_f32(v145, (float32x4_t)vdupq_lane_s32((int32x2_t)(v127 >> 32), 0));
  float32x4_t v31 = vdivq_f32((float32x4_t)v146, (float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2));
  int32x4_t v32 = (int32x4_t)vmulq_f32(v29, v29);
  v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
  *(float32x2_t *)v26.f32 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)));
  v151.columns[0] = (simd_float3)vmulq_n_f32(v29, vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32))).f32[0]);
  float32x4_t v33 = vmulq_f32((float32x4_t)v151.columns[0], v30);
  float32x4_t v34 = vmulq_f32((float32x4_t)v151.columns[0], (float32x4_t)v151.columns[0]);
  float32x4_t v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)));
  float32x4_t v36 = vsubq_f32(v30, vmulq_n_f32((float32x4_t)v151.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))), v35).f32[0]));
  int32x4_t v37 = (int32x4_t)vmulq_f32(v36, v36);
  v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
  *(float32x2_t *)v27.f32 = vrsqrte_f32((float32x2_t)v37.u32[0]);
  *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32)));
  v37.i32[0] = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32))).u32[0];
  float32x4_t v38 = vmulq_f32((float32x4_t)v151.columns[0], v31);
  v151.columns[1] = (simd_float3)vmulq_n_f32(v36, *(float *)v37.i32);
  float32x4_t v39 = vsubq_f32(v31, vmulq_n_f32((float32x4_t)v151.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]/ v35.f32[0]));
  float32x4_t v40 = vmulq_f32(v31, (float32x4_t)v151.columns[1]);
  float32x4_t v41 = vmulq_f32((float32x4_t)v151.columns[1], (float32x4_t)v151.columns[1]);
  float32x4_t v42 = vsubq_f32(v39, vmulq_n_f32((float32x4_t)v151.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]));
  int32x4_t v43 = (int32x4_t)vmulq_f32(v42, v42);
  v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
  *(float32x2_t *)v41.f32 = vrsqrte_f32((float32x2_t)v43.u32[0]);
  *(float32x2_t *)v41.f32 = vmul_f32(*(float32x2_t *)v41.f32, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32)));
  v151.columns[2] = (simd_float3)vmulq_n_f32(v42, vmul_f32(*(float32x2_t *)v41.f32, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32))).f32[0]);
  *(double *)v45.i64 = simd_quaternion(v151);
  uint64_t v46 = v45.i64[1];
  float32x4_t v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1);
  int8x16_t v48 = (int8x16_t)vcgeq_f32(v47, v45);
  uint64_t v49 = v45.i64[0];
  unsigned __int8 v50 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v45, v47), v48))).u8[0];
  *(int32x2_t *)v45.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL));
  *(int8x8_t *)v45.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v45.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v45.f32)));
  if ((v50 | (v45.i8[4] | v45.i8[0])))
  {
    uint64_t v49 = 0;
    uint64_t v46 = 0x3F80000000000000;
  }
  float32x4_t v137 = (float32x4_t)v127;
  v138.i64[0] = v49;
  v138.i64[1] = v46;
  double result = *(double *)v133.i64;
  v139[0] = v133;
  if ((v127 & 0x7FFFFFFF) <= 0x7F7FFFFF)
  {
    v48.i32[0] = v127;
    LODWORD(result) = 925353388;
    if (fabsf(*((float *)this + 16) * *(float *)&v127) >= 0.00001
      && fabsf(*((float *)this + 15) * *(float *)&v127) >= 0.00001)
    {
      v52.i64[0] = v49;
      v52.i64[1] = v46;
      float32x4_t v128 = v52;
      __n128 v134 = (__n128)v48;
      uint64_t v54 = re::globalAllocators(v44)[2];
      float32x4_t v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), (int8x16_t)v128, 0xCuLL);
      float32x4_t v56 = vmlaq_f32(vmulq_f32(v128, (float32x4_t)xmmword_23437C090), (float32x4_t)xmmword_23435FD60, v55);
      int8x16_t v57 = (int8x16_t)vaddq_f32(v56, v56);
      float32x4_t v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), v57, 0xCuLL);
      int8x16_t v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL), vnegq_f32(v128)), v58, v55);
      *(float32x4_t *)float32x4_t v148 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v58, v128, 3), (float32x4_t)xmmword_23435FD60), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL));
      uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, char *, float32x4_t *, unsigned char *, void, __n128))(*(void *)v53 + 176))(v53, v54, (char *)this + 40, v139, v148, *(void *)(v21 + 56), v134);
      uint64_t v61 = *(void *)(v60 + 136);
      *(void *)(v61 + 40) = *((void *)this + 2);
      *(int32x4_t *)float32x4_t v148 = vdupq_lane_s32((int32x2_t)v134.n128_u64[0], 0);
      re::CollisionObject::setScale(v61, (float32x4_t *)v148);
      long long v62 = v141;
      *(_OWORD *)(v60 + 272) = v140;
      *(_OWORD *)(v60 + 288) = v62;
      long long v63 = v143;
      *(_OWORD *)(v60 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v142;
      *(_OWORD *)(v60 + 3objc_destroyWeak(this + 20) = v63;
      *((void *)this + 10) = v60;
      *((float *)this + 16) = (*(float (**)(uint64_t))(*(void *)v60 + 176))(v60);
      *((float *)this + 15) = (*(float (**)(void))(**((void **)this + 10) + 192))(*((void *)this + 10));
      *((float *)this + 10) = (*(float (**)(void))(**((void **)this + 10) + 112))(*((void *)this + 10));
      *((float *)this + 12) = (*(float (**)(void))(**((void **)this + 10) + 144))(*((void *)this + 10));
      *((float *)this + 11) = (*(float (**)(void))(**((void **)this + 10) + 128))(*((void *)this + 10));
      uint64_t v64 = *((void *)this + 10);
      *(void *)((char *)this + 52) = *(void *)(*(void *)(v64 + 136) + 32);
      v144.i64[0] = (uint64_t)this + 88;
      v144.i64[1] = (uint64_t)re::internal::CharacterControllerHitCallback::controllerHit;
      v145.i64[0] = 0;
      v145.i64[1] = (uint64_t)re::Event<re::CharacterControllerHitInfo>::createSubscription<re::internal::CharacterControllerHitCallback>(re::internal::CharacterControllerHitCallback *,REEventHandlerResult (re::internal::CharacterControllerHitCallback::*)(re::CharacterControllerHitInfo*))::{lambda(re::CharacterControllerHitInfo*,re::Event<re::CharacterControllerHitInfo>::Subscription const&)#1}::__invoke;
      unint64_t v65 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(v64 + 168, &v144, (uint64_t)v148);
      if (!v148[0])
      {
        if (*(_DWORD *)(v64 + 248))
        {
          *(float32x4_t *)&v148[7] = v144;
          *(float32x4_t *)&v148[23] = v145;
          unint64_t v66 = *(void *)(v64 + 216);
          unint64_t v67 = *(void *)(v64 + 224);
          if (v67 >= v66)
          {
            unint64_t v68 = v67 + 1;
            if (v66 < v67 + 1)
            {
              if (*(void *)(v64 + 208))
              {
                uint64_t v69 = 2 * v66;
                _ZF = v66 == 0;
                unint64_t v71 = 8;
                if (!_ZF) {
                  unint64_t v71 = v69;
                }
                if (v71 <= v68) {
                  unint64_t v72 = v68;
                }
                else {
                  unint64_t v72 = v71;
                }
                re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)(v64 + 208), v72);
              }
              else
              {
                re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((void *)(v64 + 208), v68);
                ++*(_DWORD *)(v64 + 232);
              }
            }
            unint64_t v67 = *(void *)(v64 + 224);
          }
          uint64_t v121 = *(void *)(v64 + 240) + 40 * v67;
          *(unsigned char *)uint64_t v121 = 1;
          *(_OWORD *)(v121 + 1) = *(_OWORD *)v148;
          *(_OWORD *)(v121 + 17) = *(_OWORD *)&v148[16];
          *(void *)(v121 + 32) = *(void *)&v148[31];
          ++*(void *)(v64 + 224);
          ++*(_DWORD *)(v64 + 232);
        }
        else
        {
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v64 + 168), (uint64_t)&v144);
        }
      }
      *((void *)this + 11) = this;
      objc_storeWeak((id *)this + 4, (id)(v21 + 8));
      uint64_t v122 = *(void *)(*(void *)(v21 + 56) + 128);
      *(void *)(*(void *)(*((void *)this + 10) + 136) + 56) = v122;
      (*(void (**)(uint64_t))(*(void *)v122 + 192))(v122);
      goto LABEL_25;
    }
  }
  return result;
}

BOOL re::ecs2::CharacterControllerComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v33[0] = v12,
        (v33[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v30, a5, 0);
    unint64_t v15 = v30;
    unint64_t v14 = v31;
    unint64_t v30 = a4;
    unint64_t v31 = v15;
    unint64_t v32 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v31);
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(*(void *)v16 + 16);
        int32x4_t v19 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v33, v18);
        if (v19
          && (uint64_t v20 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v19), (*(unsigned char *)(v18 + 288) & 1) != 0)
          && (uint64_t v21 = v20) != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 32));
          if (WeakRetained)
          {
            BOOL v23 = WeakRetained - 8;
          }
          else
          {
            BOOL v23 = 0;
          }
          if (v23 != (char *)v21) {
            re::ecs2::CharacterControllerComponent::removeFromSimulation((uint64_t *)v17);
          }
          unint64_t v26 = v30;
          unint64_t v27 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v31);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v26, v27, *(void *)(a3 + 48));
        }
        else
        {
          unint64_t v24 = v30;
          unint64_t v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v31);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v24, v25, *(void *)(a3 + 32));
          re::ecs2::CharacterControllerComponent::removeFromSimulation((uint64_t *)v17);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v31);
      }
      while (v31 != a5 || (unsigned __int16)v32 != 0xFFFF || WORD1(v32) != 0xFFFF);
    }
    BOOL v28 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v28 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
  return v28;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::CharacterControllerComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28, 3047, a1);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11
    && (uint64_t v12 = v11,
        uint64_t v13 = *(void *)(a3 + 8),
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11),
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v13),
        v27[0] = v14,
        (v27[1] = v15) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
    uint64_t v17 = v24;
    uint64_t v16 = v25;
    uint64_t v24 = a4;
    uint64_t v25 = v17;
    uint64_t v26 = v16;
    if (v17 != a5 || (unsigned __int16)v16 != 0xFFFFLL || (v16 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        int32x4_t v19 = *(re::ecs2::CharacterControllerComponent **)v18;
        uint64_t v20 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v27, *(void *)(*(void *)v18 + 16));
        uint64_t v21 = v20;
        if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v20) == a6) {
          re::ecs2::CharacterControllerComponent::updateController(v19, v21);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
      }
      while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
    }
    BOOL v22 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v22 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28);
  return v22;
}

void re::ecs2::CharacterControllerPhysicsSubsystem::registerScene(re::ecs2::CharacterControllerPhysicsSubsystem *this, re::EventBus **a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v9 = (re::ecs2::Scene *)a2;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::addScene((uint64_t)this + 8, (uint64_t)a2);
  int32x4_t v5 = a2[36];
  if (v5)
  {
    uint64_t v11 = re::globalAllocators(v4)[2];
    float32x2_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v11 + 32))(v11, 32, 0);
    void *v6 = &unk_26E6E4118;
    v6[1] = this;
    _OWORD v6[2] = re::ecs2::CharacterControllerPhysicsSubsystem::onControllerActivated;
    v6[3] = 0;
    uint64_t v12 = v6;
    *(void *)&long long v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v5, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    *((void *)&v8 + 1) = v7;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 256, (uint64_t *)&v9, &v8);
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v10);
  }
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 40 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::CharacterControllerPhysicsSubsystem::onControllerActivated(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v3)
  {
    uint64_t v4 = (re::ecs2::CharacterControllerComponent *)v3;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 24);
    }
    while (v5);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v6 + 16) + 56) + 32))(*(void *)(*(void *)(v6 + 16) + 56));
    uint64_t v8 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 56))(v8, 1);
      uint64_t v10 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(v9, a2);
      if (v10) {
        re::ecs2::CharacterControllerComponent::updateController(v4, v10);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::CharacterControllerPhysicsSubsystem::unregisterScene(re::ecs2::CharacterControllerPhysicsSubsystem *this, re::ecs2::Scene *a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = (char *)this + 256;
  uint64_t v4 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 256, (uint64_t *)&v6);
  if (v4)
  {
    if (*((void *)v6 + 36)) {
      re::EventBus::unsubscribe(*((void *)v6 + 36), *(void *)v4, *(void *)(v4 + 8));
    }
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v6);
  }
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 8, (uint64_t)v6);
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(void *)(v8 + 40 * v6 + 16) != v2)
  {
    while (1)
    {
      unsigned int v9 = v6;
      LODWORD(v6) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
      if (v6 == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v8 + 40 * v6 + 16) == v2)
      {
        *(_DWORD *)(v8 + 40 * v9 + 8) = *(_DWORD *)(v8 + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = v10 + 40 * v6;
  int v14 = *(_DWORD *)(v11 + 8);
  unsigned int v13 = (int *)(v11 + 8);
  int v12 = v14;
  if (v14 < 0)
  {
    *unsigned int v13 = v12 & 0x7FFFFFFF;
    uint64_t v10 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v10 + 40 * v6 + 8);
  }
  int v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v10 + 40 * v6 + 8) = *(_DWORD *)(a1 + 36) | v12 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 8, a2);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::CharacterControllerPhysicsSubsystem::~CharacterControllerPhysicsSubsystem(re::ecs2::CharacterControllerPhysicsSubsystem *this)
{
  *(void *)this = &unk_26E6E4078;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 32);
  *(void *)this = &unk_26E6E4170;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6E4078;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 32);
  *(void *)this = &unk_26E6E4170;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = (uint64_t)a1 + 8;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((void *)v3 + 21) = 0;
  unint64_t v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  unint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((void *)v3 + 5) = 0;
  *((void *)v3 + 6) = a2;
  *((void *)v3 + 7) = (char *)v3 + 72;
  *((unsigned char *)v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::deinit(void *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  uint64_t v8 = a3;
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), &v8);
  uint64_t v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(void *)(*(void *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(v6 + 16) + 8, *(void *)(v6 + 48));
}

void re::ecs2::CharacterControllerPhysicsSubsystem::afterSimulationUpdate(re::ecs2::CharacterControllerPhysicsSubsystem *this, const re::ecs2::Scene *a2)
{
  long long v2 = xmmword_234361D20;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::updateForScene((uint64_t)this + 8, (uint64_t)a2, (uint64_t)&v2, 0);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = *(void *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(void *)(v5 + 16);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 64), v28);
  if (v6 == -1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(void *)(*(void *)(a1 + 72) + 16 * v6 + 8));
  }
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  int v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (uint64_t i = v26; v26; uint64_t i = v26)
  {
    unint64_t v9 = *(void **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    uint64_t v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      uint64_t v11 = (re::ecs2::Component *)v10;
      for (uint64_t j = 24; j != 56; j += 8)
      {
        unint64_t v13 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v7 + 16), *(void *)(v7 + j), v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v16 = v13;
          unint64_t v17 = v14;
          goto LABEL_16;
        }
      }
      unint64_t v16 = -1;
      unint64_t v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(v7, v16, v17);
    }
    uint64_t v18 = v9[41];
    if (v18)
    {
      unint64_t v19 = (uint64_t *)v9[43];
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v19++;
        *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

uint64_t *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    return re::ecs2::CharacterControllerComponent::removeFromSimulation(result);
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  long long v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    long long v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E4118;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E4118;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E4170;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::~PhysicsSubsystemImpl(void *a1)
{
  *a1 = &unk_26E6E4170;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = xmmword_234361D20;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::updateForScene(a1 + 8, a2, (uint64_t)&v3, a3);
}

void re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  uint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  uint64_t v9 = *(void *)(*v8 + 224);
  unint64_t v10 = v8[3];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 24))(v9, a3, v8, v10, v11, a4);
  }
  else {
    int v12 = 0;
  }
  unint64_t v13 = v8[5];
  unint64_t v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v13);
  if (*(_DWORD *)(v14 + 40)) {
    v12 |= (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 32))(v9, a3, v8, v13, v14, a4);
  }
  unint64_t v15 = v8[6];
  unint64_t v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v15);
  if (*(_DWORD *)(v16 + 40))
  {
    if (((v12 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v9 + 40))(v9, a3, v8, v15, v16, a4)) & 1) == 0)goto LABEL_9; {
    goto LABEL_8;
    }
  }
  if (v12) {
LABEL_8:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
LABEL_9:
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v17 = *(void *)(a1 + 176);
  int v18 = *(_DWORD *)(a1 + 184);
  if (v17 >= 0xB)
  {
    if (v18) {
      unint64_t v19 = (void *)(a1 + 192);
    }
    else {
      unint64_t v19 = *(void **)(a1 + 200);
    }
    uint64_t v21 = 8 * v17;
    while (!*v19)
    {
      ++v19;
      v21 -= 8;
      if (!v21) {
        return;
      }
    }
LABEL_27:
    uint64_t v25 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v25 + 86)) {
      re::ecs2::System::queueToRun(v25, 0.0);
    }
    return;
  }
  if (v18)
  {
    uint64_t v20 = (uint64_t *)(a1 + 192);
    if (!v17) {
      return;
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t **)(a1 + 200);
    if (!v17) {
      return;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = 8 * v17;
  do
  {
    uint64_t v24 = *v20++;
    v22 |= v24;
    v23 -= 8;
  }
  while (v23);
  if (v22) {
    goto LABEL_27;
  }
}

char *re::EventBus::getTypeId<RECharacterControllerDidHitEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RECharacterControllerDidHitEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32RECharacterControllerDidHitEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[142];
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CharacterControllerComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E41E0;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0x3F490FD83C23D70ALL;
  *(_DWORD *)(a1 + 48) = 1045220557;
  *(void *)(a1 + 52) = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 68) = 0x100000000;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void re::ecs2::CharacterControllerComponent::~CharacterControllerComponent(id *this)
{
  *this = &unk_26E6E41E0;
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  *this = &unk_26E6E41E0;
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::CharacterControllerStateComponent::~CharacterControllerStateComponent(re::ecs2::CharacterControllerStateComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::Event<re::CharacterControllerHitInfo>::createSubscription<re::internal::CharacterControllerHitCallback>(re::internal::CharacterControllerHitCallback *,REEventHandlerResult (re::internal::CharacterControllerHitCallback::*)(re::CharacterControllerHitInfo*))::{lambda(re::CharacterControllerHitInfo*,re::Event<re::CharacterControllerHitInfo>::Subscription const&)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t (*)(void *, uint64_t))a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, uint64_t))(*v5 + v3);
  }
  return v3(v5, a1);
}

void re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  v56[0] = a2;
  uint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      unint64_t v7 = (void *)(a1 + 144);
    }
    else {
      unint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  long long v55 = 0u;
  long long v48 = 0u;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = -1;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0;
  uint64_t v53 = 1;
  long long v54 = 0uLL;
  unint64_t v16 = *(void *)(a1 + 40);
  *(void *)&long long v55 = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity((void *)a1, (v16 + 4) >> 2);
    unint64_t v17 = *(void *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v57 = 136315906;
    float32x4_t v58 = "operator[]";
    __int16 v59 = 1024;
    int v60 = 858;
    __int16 v61 = 2048;
    unint64_t v62 = v16 >> 2;
    __int16 v63 = 2048;
    unint64_t v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v18 = a1 + 24;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 32);
  }
  uint64_t v19 = *(void *)(v18 + 8 * (v16 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v20 = v19 + 112 * (v16 & 3);
  long long v21 = v48;
  long long v22 = v49;
  long long v23 = v50;
  *(void *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)uint64_t v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  uint64_t v25 = *(void *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(v26, a1, v56[0]);
  *(void *)&v65[0] = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 160);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 160) = v27;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v32 = a1 + 144;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 152);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 128) - 8) &= v30;
  }
  unint64_t v33 = *(void *)(a1 + 40);
  unint64_t v34 = *(void *)(a1 + 208);
  if ((v33 & 0x3F) != 0) {
    unint64_t v35 = (v33 >> 6) + 1;
  }
  else {
    unint64_t v35 = v33 >> 6;
  }
  *(void *)(a1 + 208) = v33;
  *(void *)&long long v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    uint64_t v36 = 63;
    uint64_t v37 = *(void *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63) {
      uint64_t v36 = ~(-1 << v37);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v38 = a1 + 192;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 200);
    }
    *(void *)(v38 + 8 * *(void *)(a1 + 176) - 8) &= v36;
  }
  unint64_t v15 = *(void *)&v65[0];
  uint64_t v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if (v40) {
      float32x4_t v41 = (void *)(a1 + 192);
    }
    else {
      float32x4_t v41 = *(void **)(a1 + 200);
    }
    uint64_t v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43) {
        return;
      }
    }
LABEL_65:
    float32x4_t v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v47 + 86)) {
      re::ecs2::System::queueToRun(v47, 0.0);
    }
    return;
  }
  if (v40)
  {
    float32x4_t v42 = (uint64_t *)(a1 + 192);
    if (!v39) {
      return;
    }
  }
  else
  {
    float32x4_t v42 = *(uint64_t **)(a1 + 200);
    if (!v39) {
      return;
    }
  }
  uint64_t v44 = 0;
  uint64_t v45 = 8 * v39;
  do
  {
    uint64_t v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44) {
    goto LABEL_65;
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E42F0;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E6E4348;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    long long v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6E43A0;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6E43F8;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    int8x16_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        unint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E42F0;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        unint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        float32x4_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        unint64_t v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E4348;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        unint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E43A0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        unint64_t v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E43F8;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        unint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        __int16 v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *__int16 v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  int v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    int v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E42F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E42F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E4348;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E4348;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E43A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E43A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E43F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E43F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _OWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(void *)(a1 + 16) + 40 * v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 56);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v16);
  if (result != -1)
  {
    uint64_t v5 = *(void *)(a1 + 64) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 120, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, *(void *)(v5 + 8));
    uint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, *(void *)(v5 + 8));
    if (*v6)
    {
      unsigned int v7 = v6;
      void *v6 = 0;
      long long v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      unint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *long long v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void *re::ecs2::allocInfo_ProbeResource(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80D88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80D88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80E28, "ProbeResource");
    __cxa_guard_release(&qword_26AF80D88);
  }
  return &unk_26AF80E28;
}

void re::ecs2::initInfo_ProbeResource(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x27F54796EFB4DF7CLL;
  v18[1] = "ProbeResource";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80D90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80D90);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unsigned int v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "ibl";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80DD0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "intensityExponent";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80DD8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "relativeWeight";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v16 + 32) = 0x1C00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80DE0 = v16;
      __cxa_guard_release(&qword_26AF80D90);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 3;
  *((void *)this + 8) = &qword_26AF80DD0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProbeResource>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProbeResource>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProbeResource>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::ProbeResource>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::ProbeResource>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0x3F80000000000000;
}

void re::internal::defaultDestruct<re::ecs2::ProbeResource>(int a1, int a2, re::AssetHandle *this)
{
}

void *re::internal::defaultConstructV2<re::ecs2::ProbeResource>(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

void *re::ecs2::allocInfo_VirtualEnvironmentProbeComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80DA0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80EA0, "VirtualEnvironmentProbeComponent");
    __cxa_guard_release(&qword_26AF80DA0);
  }
  return &unk_26AF80EA0;
}

void re::ecs2::initInfo_VirtualEnvironmentProbeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v11[0] = 0x52C8F478D61A66EALL;
  v11[1] = "VirtualEnvironmentProbeComponent";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80DA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF80DA8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80DC0 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ProbeResource>>::get(v8);
      uint64_t v9 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "probeResources";
      *(void *)(v9 + 16) = &qword_26AF80DE8;
      *(void *)(v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v9 + 32) = 0x2000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF80DC8 = v9;
      __cxa_guard_release(&qword_26AF80DA8);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 2;
  *((void *)this + 8) = &qword_26AF80DC0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ProbeResource>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80DB8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF80DB8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF80DE8);
      qword_26AF80DE8 = (uint64_t)&unk_26E6E4548;
      __cxa_guard_release(&qword_26AF80DB8);
    }
  }
  if ((_MergedGlobals_151 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF80D98;
    if (qword_26AF80D98
      || (uint64_t v1 = re::ecs2::allocInfo_ProbeResource(a1),
          qword_26AF80D98 = (uint64_t)v1,
          re::ecs2::initInfo_ProbeResource((re::ecs2 *)v1, v2),
          (_MergedGlobals_151 & 1) == 0))
    {
      _MergedGlobals_151 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF80DE8, 0);
      qword_26AF80DF8 = 0x2800000003;
      dword_26AF80E00 = v3;
      word_26AF80E04 = 0;
      *(void *)&xmmword_26AF80E08 = 0;
      *((void *)&xmmword_26AF80E08 + 1) = 0xFFFFFFFFLL;
      qword_26AF80E18 = (uint64_t)v1;
      unk_26AF80E20 = 0;
      qword_26AF80DE8 = (uint64_t)&unk_26E6E4548;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF80DE8, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF80E08 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E45E0;
  *(void *)(v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1)
{
  *(void *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E45E0;
  *(void *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VirtualEnvironmentProbeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeComponent>, this);
}

void *re::ecs2::allocInfo_VirtualEnvironmentProbeSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF80DB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF80DB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF80F18, "VirtualEnvironmentProbeSystem");
    __cxa_guard_release(&qword_26AF80DB0);
  }
  return &unk_26AF80F18;
}

void re::ecs2::initInfo_VirtualEnvironmentProbeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3FCA43CF34C55D6ELL;
  v5[1] = "VirtualEnvironmentProbeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VirtualEnvironmentProbeSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::VirtualEnvironmentProbeSystem *re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeSystem>(uint64_t a1, uint64_t a2, re::ecs2::VirtualEnvironmentProbeSystem *a3)
{
  return re::ecs2::VirtualEnvironmentProbeSystem::VirtualEnvironmentProbeSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &unk_26E6E4450;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 22);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &unk_26E6E4450;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 22);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VirtualEnvironmentProbeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeSystem>, this);
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 24))(*(void *)(*(void *)(a1 + 8) + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
  unint64_t v9 = v24;
  unint64_t v10 = v25;
  unint64_t v24 = a4;
  unint64_t v25 = v9;
  unint64_t v26 = v10;
  uint64_t v11 = (unsigned __int16)v10;
  uint64_t v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      uint64_t v15 = *(void *)(*(void *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25)
                      + 16);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 8))(v27, v8, v15);
      if ((*(unsigned char *)(v15 + 288) & 1) == 0
        || ((uint64_t v16 = *(void *)(*(void *)(a3 + 8) + 376)) == 0 ? (v17 = 1) : (v17 = *(void *)(v16 + 24)),
            v27[1] ? (BOOL v18 = LOBYTE(v27[0]) == 0) : (BOOL v18 = 1),
            v18 ? (BOOL v19 = v17 == 1) : (BOOL v19 = 0),
            uint64_t v20 = (unint64_t *)(a3 + 40),
            v19))
      {
        uint64_t v20 = (unint64_t *)(a3 + 32);
      }
      unint64_t v21 = v24;
      unint64_t v22 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v25);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v21, v22, *v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
    }
    while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    unint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  unint64_t v8 = v22;
  unint64_t v9 = v23;
  unint64_t v22 = a4;
  unint64_t v23 = v8;
  unint64_t v24 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      uint64_t v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      uint64_t v15 = *(void *)(*(void *)v14 + 48);
      if (!v15) {
        goto LABEL_17;
      }
      uint64_t v16 = *(re::AssetHandle **)(*(void *)v14 + 64);
      uint64_t v17 = (re::AssetHandle *)((char *)v16 + 32 * v15);
      char v18 = 1;
      do
      {
        while (*((void *)v16 + 1) && !re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v16))
        {
          re::AssetHandle::loadAsync(v16);
          char v18 = 0;
          uint64_t v16 = (re::AssetHandle *)((char *)v16 + 32);
          if (v16 == v17) {
            goto LABEL_18;
          }
        }
        uint64_t v16 = (re::AssetHandle *)((char *)v16 + 32);
      }
      while (v16 != v17);
      if (v18)
      {
LABEL_17:
        unint64_t v19 = v22;
        unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 48));
      }
LABEL_18:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(re::ImageBasedLightAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v2 = re::ImageBasedLightAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v100[0] = *(id *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 64) + 88);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 24))(*(void *)(*(void *)(a1 + 8) + 136));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v99);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  int v11 = *(_DWORD *)(v10 + 124);
  if (!v11) {
    int v11 = *(_DWORD *)(v10 + 16);
  }
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v95, (uint64_t)v99, (v11 + 1));
  uint64_t v12 = (_anonymous_namespace_ *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v85, a5, 0);
  uint64_t v16 = v85;
  unint64_t v15 = v86;
  uint64_t v85 = a4;
  unint64_t v86 = (unint64_t)v16;
  unint64_t v87 = v15;
  if (v16 != (uint64_t *)a5 || (unsigned __int16)v15 != 0xFFFFLL || (v15 & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      uint64_t v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v86);
      unint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(*(void *)v17 + 16);
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 8))(&v93, v9, v19);
      unsigned __int32 v20 = 0;
      if (v93.n128_u8[0]) {
        unint64_t v21 = (void *)v93.n128_u64[1];
      }
      else {
        unint64_t v21 = 0;
      }
      id v82 = v21;
      do
      {
        unsigned __int32 v22 = v20;
        uint64_t v19 = *(void *)(v19 + 24);
        if (!v19) {
          break;
        }
        ++v20;
      }
      while ((*(unsigned char *)(v19 + 288) & 0x80) == 0);
      uint64_t v23 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(&v95, (unint64_t)v21);
      if (v23 == -1 || *(_DWORD *)(*((void *)&v95 + 1) + 24 * v23 + 16) > v22)
      {
        v93.n128_u64[0] = v18;
        v93.n128_u32[2] = v22;
        uint64_t v24 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(&v95, (unint64_t)v21);
        if (v24 == -1) {
          re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd((_anonymous_namespace_ *)&v95, &v82, &v93);
        }
        else {
          *(__n128 *)(*((void *)&v95 + 1) + 24 * v24 + 8) = v93;
        }
      }
      uint64_t v12 = (_anonymous_namespace_ *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v86);
    }
    while (v86 != a5 || (unsigned __int16)v87 != 0xFFFF || WORD1(v87) != 0xFFFF);
  }
  uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 8) + 112) + 104);
  if (v25)
  {
    uint64_t v12 = (_anonymous_namespace_ *)re::RenderFrameBox::get(v25 + 344, 0xFFFFFFFFFFFFFFFuLL);
    uint64_t v78 = (re::DynamicString **)v12;
  }
  else
  {
    uint64_t v78 = 0;
  }
  uint64_t v77 = *(re::ecs2::RenderingSubsystem **)(a3 + 8);
  v93.n128_u64[0] = (unint64_t)&v95;
  if ((unint64_t)v96 >= 0x10)
  {
    uint64_t v26 = 0;
    unint64_t v27 = (unint64_t)v96 >> 4;
    __n128 v13 = (__n128)xmmword_2343680E0;
    v14.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v28 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v95 + v26)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v93.n128_u64[1] = (unsigned __int16)~v28;
      if (v28 != 0xFFFF) {
        break;
      }
      v26 += 16;
      if (!--v27) {
        goto LABEL_59;
      }
    }
    uint64_t v29 = __clz(__rbit64((unsigned __int16)~v28)) + v26;
    for (i = v29; i != -1; uint64_t v29 = i)
    {
      uint64_t v30 = *(void *)(v93.n128_u64[0] + 8) + 24 * v29;
      uint64_t v32 = *(const re::ecs2::Scene **)v30;
      uint64_t v31 = *(void **)(v30 + 8);
      uint64_t v33 = (re::ecs2::TransformComponent **)v31[2];
      uint64_t v89 = 0;
      unint64_t v86 = 0;
      unint64_t v87 = 0;
      uint64_t v85 = 0;
      int v88 = 0;
      long long v90 = xmmword_23435FD50;
      long long v91 = xmmword_23435FD60;
      long long v92 = xmmword_23435FD80;
      unint64_t v34 = v31[6];
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v34);
      ++v88;
      uint64_t v35 = v31[6];
      if (v35)
      {
        uint64_t v36 = v31[8];
        uint64_t v37 = 32 * v35;
        float v38 = 0.0;
        do
        {
          float v39 = *(float *)(v36 + 28);
          if (v39 > 0.0)
          {
            id v82 = 0;
            id v83 = 0;
            uint64_t v84 = 0;
            uint64_t v40 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v36);
            if (v40)
            {
              uint64_t v41 = v40;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v81, (const re::AssetHandle *)(v40 + 24));
              TextureCubeWithFallback = (void **)re::ecs2::getTextureCubeWithFallback((re::TextureAsset *)v81, (uint64_t)v100);
              NS::SharedPtr<MTL::Texture>::operator=(&v83, TextureCubeWithFallback);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v81);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v80, (const re::AssetHandle *)(v41 + 48));
              uint64_t v43 = (void **)re::ecs2::getTextureCubeWithFallback((re::TextureAsset *)v80, (uint64_t)v100);
              NS::SharedPtr<MTL::Texture>::operator=(&v82, v43);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v80);
            }
            else
            {
              NS::SharedPtr<MTL::Texture>::operator=(&v83, v100);
              uint64_t v44 = NS::SharedPtr<MTL::Texture>::operator=(&v82, v100);
            }
            uint64_t v84 = *(void **)(v36 + 24);
            unint64_t v45 = v87;
            if (v87 >= v86)
            {
              unint64_t v46 = v87 + 1;
              if (v86 < v87 + 1)
              {
                if (v85)
                {
                  if (v86) {
                    unint64_t v47 = 2 * v86;
                  }
                  else {
                    unint64_t v47 = 8;
                  }
                  if (v47 <= v46) {
                    unint64_t v48 = v87 + 1;
                  }
                  else {
                    unint64_t v48 = v47;
                  }
                  re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v48);
                }
                else
                {
                  re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v46);
                  ++v88;
                }
              }
              unint64_t v45 = v87;
            }
            long long v49 = (id *)(v89 + 24 * v45);
            *long long v49 = v82;
            id v82 = 0;
            v49[1] = v83;
            id v83 = 0;
            v49[2] = v84;
            ++v87;
            ++v88;
            if (v83)
            {

              id v83 = 0;
            }
            if (v82) {

            }
            float v38 = v38 + v39;
          }
          v36 += 32;
          v37 -= 32;
        }
        while (v37);
        if (v38 > 0.0)
        {
          if (v87)
          {
            uint64_t v50 = 24 * v87;
            uint64_t v51 = (float *)(v89 + 20);
            do
            {
              *uint64_t v51 = *v51 / v38;
              v51 += 6;
              v50 -= 24;
            }
            while (v50);
          }
          re::ecs2::TransformComponent::worldOrientation(v33, (const re::ecs2::Entity *)1);
          float v53 = v52;
          float v55 = v54;
          float v57 = v56;
          float v58 = v53 + v53;
          float v59 = v55 + v55;
          float v60 = v57 + v57;
          float v61 = (float)(v53 + v53) * v53;
          float v62 = (float)(v55 + v55) * v55;
          float v63 = (float)(v57 + v57) * v57;
          float v64 = v58 * v54;
          float v65 = v58 * v56;
          float v66 = v59 * v56;
          float v68 = v58 * v67;
          float v69 = v59 * v67;
          float v70 = v60 * v67;
          *(float *)&uint64_t v71 = 1.0 - (float)(v62 + v63);
          *(float *)&uint64_t v72 = v64 + v70;
          *(float *)&uint64_t v73 = v65 - v69;
          *((float *)&v71 + 1) = v64 - v70;
          *((float *)&v72 + 1) = 1.0 - (float)(v61 + v63);
          *((float *)&v73 + 1) = v68 + v66;
          *((float *)&v90 + 2) = v65 + v69;
          *(void *)&long long v90 = v71;
          *((float *)&v91 + 2) = v66 - v68;
          *(void *)&long long v91 = v72;
          *((float *)&v92 + 2) = 1.0 - (float)(v61 + v62);
          *(void *)&long long v92 = v73;
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v77, v32, v78, &v82);
          unint64_t v79 = (unint64_t)v82 >> 1;
          uint64_t v74 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v78 + 33), (const re::WeakStringID *)&v79)+ 48);
          (*(void (**)(void))(v74 + 1104))();
          re::StringID::destroyString((re::StringID *)&v82);
        }
      }
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v85);
      uint64_t v12 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v93);
    }
  }
LABEL_59:
  int v75 = *(_DWORD *)(a5 + 40);
  if (*((void *)&v98 + 1))
  {
    if (*((void *)&v95 + 1)) {
      *((void *)&v95 + 1) = 0;
    }
    if ((void)v95) {
      (*(void (**)(__n128, __n128))(**((void **)&v98 + 1) + 40))(v13, v14);
    }
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v99);
  if (v100[0]) {

  }
  return v75 != 0;
}

uint64_t re::ecs2::getTextureCubeWithFallback(re::TextureAsset *a1, uint64_t a2)
{
  uint64_t v3 = re::AssetHandle::loadedAsset<re::TextureAsset>(a1);
  if (!v3) {
    return a2;
  }
  uint64_t v4 = v3;
  if (!*(_DWORD *)(v3 + 240))
  {
    uint64_t v5 = *(void **)(v3 + 160);
    if (!v5) {
      return a2;
    }
    if (objc_msgSend(v5, sel_textureType) != (id)5) {
      return a2;
    }
    a2 = v4 + 160;
    if (!*(_DWORD *)(v4 + 240)) {
      return a2;
    }
  }
  uint64_t v7 = std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::VirtualEnvironmentProbeSystem::updateScenes(v7);
}

void re::ecs2::VirtualEnvironmentProbeSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[0] = a3;
  v29[1] = a4;
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5 || (*(unsigned char *)(v5 + 424) & 0x10) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)a2;
      unint64_t v27 = (uint64_t *)(a1 + 392);
      uint64_t v28 = *(void *)a2 + 8 * v6;
      while (1)
      {
        uint64_t v30 = *v7;
        unint64_t v8 = *(void *)(*(void *)(a1 + 264)
                       + 16
                       * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 256), &v30)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 368, v8);
        uint64_t v9 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 200, v8);
        uint64_t v10 = *(void *)(*v9 + 224);
        unint64_t v11 = v9[3];
        unint64_t v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
        if (*(_DWORD *)(v12 + 40)) {
          int v13 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 24))(v10, v29, v9, v11, v12, 0);
        }
        else {
          int v13 = 0;
        }
        unint64_t v14 = v9[5];
        unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
        if (*(_DWORD *)(v15 + 40)) {
          v13 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 32))(v10, v29, v9, v14, v15, 0);
        }
        unint64_t v16 = v9[6];
        unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
        if (*(_DWORD *)(v17 + 40)) {
          break;
        }
        if (v13) {
          goto LABEL_12;
        }
LABEL_13:
        if (*(unsigned char *)(a1 + 432))
        {
          unint64_t v18 = *(void *)(a1 + 376);
          int v19 = *(_DWORD *)(a1 + 384);
          if (v18 < 0xB)
          {
            unsigned __int32 v22 = v27;
            if ((v19 & 1) == 0) {
              unsigned __int32 v22 = *(uint64_t **)(a1 + 400);
            }
            if (!v18) {
              goto LABEL_31;
            }
            uint64_t v23 = 0;
            uint64_t v24 = 8 * v18;
            do
            {
              uint64_t v25 = *v22++;
              v23 |= v25;
              v24 -= 8;
            }
            while (v24);
            if (!v23) {
              goto LABEL_31;
            }
          }
          else
          {
            unsigned __int32 v20 = v27;
            if ((v19 & 1) == 0) {
              unsigned __int32 v20 = *(uint64_t **)(a1 + 400);
            }
            uint64_t v21 = 8 * v18;
            while (!*v20)
            {
              ++v20;
              v21 -= 8;
              if (!v21) {
                goto LABEL_31;
              }
            }
          }
          uint64_t v26 = *(re::ecs2::System **)(a1 + 416);
          if (!*((unsigned char *)v26 + 86)) {
            re::ecs2::System::queueToRun(v26, 0.0);
          }
        }
LABEL_31:
        if (++v7 == (uint64_t *)v28) {
          return;
        }
      }
      if (((v13 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v10 + 40))(v10, v29, v9, v16, v17, 0)) & 1) == 0)goto LABEL_13; {
LABEL_12:
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 368, v8);
      goto LABEL_13;
    }
  }
}

void re::ecs2::VirtualEnvironmentProbeSystem::willAddSceneToECSService(re::ecs2::VirtualEnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 200;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 320);
  unint64_t v6 = *((void *)this + 41);
  int v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)this + 344);
    }
    else {
      unint64_t v8 = (void *)*((void *)this + 44);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 344);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 44);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 256), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    unint64_t v15 = (char *)this + 368;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 30);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 26);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    float v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 216)) {
    int v19 = (char *)this + 224;
  }
  else {
    int v19 = (char *)*((void *)this + 29);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 30);
  ++*((_DWORD *)this + 62);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 30);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 256), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 30);
  unint64_t v29 = *((void *)this + 45);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 45) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 336)) {
      uint64_t v33 = (char *)this + 344;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 44);
    }
    *(void *)&v33[8 * *((void *)this + 41) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 30);
  unint64_t v35 = *((void *)this + 51);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 51) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 368), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 384)) {
      float v39 = (char *)this + 392;
    }
    else {
      float v39 = (char *)*((void *)this + 50);
    }
    *(void *)&v39[8 * *((void *)this + 47) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  unint64_t v15 = (char *)this + 368;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 432)) {
    return;
  }
  unint64_t v40 = *((void *)this + 47);
  int v41 = *((_DWORD *)this + 96);
  if (v40 >= 0xB)
  {
    if (v41) {
      float32x4_t v42 = (void *)((char *)this + 392);
    }
    else {
      float32x4_t v42 = (void *)*((void *)this + 50);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = (re::ecs2::System *)*((void *)this + 52);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 392);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 50);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::VirtualEnvironmentProbeSystem::willRemoveSceneFromECSService(re::ecs2::VirtualEnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 256);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 32, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 33) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      unint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        unint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *unint64_t v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t re::ecs2::VirtualEnvironmentProbeComponentStateImpl::dependsOnComponents(re::ecs2::VirtualEnvironmentProbeComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VirtualEnvironmentProbeComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::VirtualEnvironmentProbeSystem::~VirtualEnvironmentProbeSystem(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  *((void *)this + objc_destroyWeak(this + 20) = &unk_26E6E4450;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 25);
  *((void *)this + objc_destroyWeak(this + 20) = &unk_26E6E4450;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VirtualEnvironmentProbeSystem::typeInfo(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeSystem>, 0);
}

uint64_t re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 24 * v4;
        uint64_t v6 = (id *)(v3 + 8);
        do
        {
          if (*v6)
          {

            id *v6 = 0;
          }
          unint64_t v7 = *(v6 - 1);
          if (v7)
          {

            *(v6 - 1) = 0;
          }
          v6 += 3;
          v5 -= 24;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::ProbeResource>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v10 = 0u;
  long long v11 = 0u;
  HIDWORD(v11) = 1065353216;
  re::DynamicArray<re::ecs2::ProbeResource>::add(this, (uint64_t *)&v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  unint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 32 * *((void *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

uint64_t re::DynamicArray<re::ecs2::ProbeResource>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::AssetHandle **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        do
        {
          re::AssetHandle::~AssetHandle(v3);
          uint64_t v3 = (re::AssetHandle *)((char *)v3 + 32);
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::AssetHandle **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::AssetHandle *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (re::AssetHandle *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 32 * v9;
        long long v11 = v7;
        do
        {
          uint64_t *v11 = 0;
          v11[1] = 0;
          void v11[2] = 0;
          v11[1] = *((void *)v8 + 1);
          *((void *)v8 + 1) = 0;
          uint64_t v12 = *v11;
          uint64_t *v11 = 0;
          uint64_t *v11 = *(void *)v8;
          *(void *)unint64_t v8 = v12;
          uint64_t v13 = v11[2];
          void v11[2] = *((void *)v8 + 2);
          *((void *)v8 + 2) = v13;
          v11[3] = *((void *)v8 + 3);
          re::AssetHandle::~AssetHandle(v8);
          unint64_t v8 = (re::AssetHandle *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        unint64_t v8 = (re::AssetHandle *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::AssetHandle *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::ProbeResource>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 32 * a2;
    unint64_t v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(void *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 32 * v4;
      do
      {
        unint64_t v7 = (void *)(*(void *)(a1 + 32) + v6);
        void *v7 = 0;
        v7[1] = 0;
        void v7[2] = 0;
        v7[3] = 0x3F80000000000000;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::ecs2::ProbeResource>::add(void *this, uint64_t *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::ProbeResource>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  unint64_t v5 = (uint64_t *)(v3[4] + 32 * v4);
  *unint64_t v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  v5[1] = a2[1];
  a2[1] = 0;
  uint64_t v6 = *v5;
  *unint64_t v5 = 0;
  *unint64_t v5 = *a2;
  *a2 = v6;
  uint64_t v7 = v5[2];
  void v5[2] = a2[2];
  a2[2] = v7;
  v5[3] = a2[3];
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<re::ecs2::ProbeResource>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::ProbeResource>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

re::AssetHandle *re::DynamicArray<re::ecs2::ProbeResource>::clear(re::AssetHandle *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = 0;
  if (v2)
  {
    uint64_t result = (re::AssetHandle *)*((void *)result + 4);
    uint64_t v3 = 32 * v2;
    do
    {
      re::AssetHandle::~AssetHandle(result);
      uint64_t result = (re::AssetHandle *)(v4 + 32);
      v3 -= 32;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::ecs2::VirtualEnvironmentProbeComponent::~VirtualEnvironmentProbeComponent(re::ecs2::VirtualEnvironmentProbeComponent *this)
{
  *(void *)this = &unk_26E6E45E0;
  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)this + 32);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6E45E0;
  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)this + 32);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

re::ecs2::VirtualEnvironmentProbeSystem *re::ecs2::VirtualEnvironmentProbeSystem::VirtualEnvironmentProbeSystem(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 1objc_destroyWeak(this + 20) = 0u;
  *(_OWORD *)(v2 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v2 = &unk_26E6E44B8;
  uint64_t v3 = v2 + 160;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = &unk_26E6E4450;
  *(void *)(v2 + 168) = v2;
  uint64_t v4 = v2 + 200;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(void *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 1;
  *(void *)(v2 + 232) = 0;
  *(void *)(v2 + 240) = 0;
  *(void *)(v2 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  uint64_t v5 = (void *)(v2 + 256);
  BOOL v6 = (void *)(v2 + 320);
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v2 + 3objc_destroyWeak(this + 20) = 0u;
  *(_DWORD *)(v2 + 336) = 1;
  unint64_t v7 = (void *)(v2 + 368);
  *(_OWORD *)(v2 + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(void *)(v2 + 376) = 0;
  *(_DWORD *)(v2 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 417) = 0u;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 84) += 2;
  *((void *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 96) += 2;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = this;
  *((void *)this + 53) = v3;
  *((unsigned char *)this + 432) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  unint64_t v6 = v5 % v3;
  int8x16_t v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  unint64_t v9 = v5 % v3;
  while (1)
  {
    int8x16_t v10 = *(int8x16_t *)(*a1 + 16 * v9);
    unint64_t v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
    uint64_t v14 = -1;
    if (v9 == v6) {
      return v14;
    }
  }
  uint64_t v13 = 16 * v9;
  while (1)
  {
    uint64_t v14 = v12 + v13;
    if (*(void *)(a1[1] + 24 * (v12 + v13)) == a2) {
      return v14;
    }
    if (v12 <= 0x3E)
    {
      unint64_t v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

__n128 re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, __n128 *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  __n128 result = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 24 * (v13 + 16 * v11);
  *(void *)uint64_t v17 = *a2;
  *(__n128 *)(v17 + 8) = result;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18;
  uint64_t v19 = *(void *)(*((void *)a1 + 1) + 24 * (v13 + 16 * v11)) ^ (*(void *)(*((void *)a1 + 1)
                                                                              + 24 * (v13 + 16 * v11)) >> 30);
  unint64_t v20 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v19) ^ ((0xBF58476D1CE4E5B9 * v19) >> 27));
  *((void *)a1 + 5) ^= (v20 >> 31) ^ v20;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v28 = 0u;
  *(_OWORD *)unint64_t v29 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v29[16], 0, 32);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v28, v7, v8);
  v26[0] = a1;
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a1;
    unint64_t v13 = v10 >> 4;
    __n128 v14 = (__n128)xmmword_2343680E0;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v26[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v13) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = __clz(__rbit64((unsigned __int16)~v15)) + v11;
    uint64_t v27 = v16;
    if (v16 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v28, *(void *)(v26[0] + 8) + 24 * v16, *(void *)(v26[0] + 8) + 24 * v16 + 8, v14, v9);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v26);
        uint64_t v16 = v27;
      }
      while (v27 != -1);
      unint64_t v10 = a1[2];
    }
  }
LABEL_14:
  uint64_t v18 = *(void *)&v29[40];
  *(void *)&unsigned char v29[40] = a1[7];
  uint64_t result = *(void *)&v29[40];
  long long v19 = v28;
  long long v20 = *(_OWORD *)v29;
  *(void *)unint64_t v29 = v10;
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  *(void *)&long long v28 = *a1;
  *((void *)&v28 + 1) = v22;
  long long v23 = *(_OWORD *)&v29[16];
  long long v24 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v29[32];
  a1[7] = v18;
  *(_OWORD *)&v29[24] = v24;
  long long v25 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v19;
  *((_OWORD *)a1 + 1) = v20;
  *((_OWORD *)a1 + 2) = v23;
  *(_OWORD *)&v29[8] = v25;
  if (result)
  {
    if (v22) {
      *((void *)&v28 + 1) = 0;
    }
    if (v21) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitCGFloat y = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = v8 + 8;
        uint64_t v12 = v7;
        do
        {
          void *v12 = *(void *)(v11 - 8);
          *(void *)(v11 - 8) = 0;
          v12[1] = *(void *)v11;
          *(void *)uint64_t v11 = 0;
          uint64_t v12[2] = *(void *)(v11 + 8);
          if (*(void *)v11)
          {

            *(void *)uint64_t v11 = 0;
          }
          unint64_t v13 = *(void **)(v11 - 8);
          if (v13)
          {

            *(void *)(v11 - 8) = 0;
          }
          v11 += 24;
          v12 += 3;
          v10 -= 24;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    void *v10 = &unk_26E6E4668;
    v10[1] = a1;
    uint64_t v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    id v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    __n128 v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v14 = v11;
    v14[1] = v13;
    unsigned __int16 v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6E46C0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    long long v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6E4718;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    void v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6E4770;
    v28[1] = a1;
    void v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    uint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6E4668;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        float v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        *uint64_t v43 = &unk_26E6E46C0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        float v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        unint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6E4718;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E6E4770;
        v55[1] = a1;
        uint64_t v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        float v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float v59 = v56;
        v59[1] = v58;
        uint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __n128 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __n128 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __n128 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    __n128 v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E4668;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E4668;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E46C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E46C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E4718;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E4718;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6E4770;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6E4770;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::PhysicsSimulationTracking::updateEnginePreferredUpdateRate(re::ecs2::PhysicsSimulationTracking *this)
{
  uint64_t result = re::ServiceLocator::serviceOrNull<re::Engine>(*((void *)this + 37));
  if (result)
  {
    float v3 = *(float *)(result + 1168);
    if (v3 > 0.0)
    {
      while (v3 < 59.9)
        float v3 = v3 + v3;
    }
  }
  else
  {
    float v3 = 0.0;
  }
  float v4 = 1.0 / v3;
  BOOL v5 = v3 > 0.0;
  float v6 = 0.016667;
  if (v5) {
    float v6 = v4;
  }
  float v7 = *((float *)this + 87);
  if (v7 != v6 && vabds_f32(v7, v6) >= (float)((float)((float)(fabsf(v7) + fabsf(v6)) + 1.0) * 0.00001))
  {
    *((float *)this + 87) = v6;
    if (*((float *)this + 86) <= 0.0)
    {
      return re::ecs2::PhysicsSimulationTracking::updateDefaultFixedTimeStepsForPhysicsSimulations((uint64_t)this);
    }
  }
  return result;
}

re *re::ecs2::PhysicsSimulationTracking::registerScene(re::ecs2::PhysicsSimulationTracking *this, unint64_t a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  unint64_t v4 = 0x94D049BB133111EBLL;
  unint64_t v75 = a2;
  *((void *)&v80 + 1) = 0;
  *(void *)&long long v81 = 0;
  DWORD2(v81) = 0;
  long long v82 = 0uLL;
  LODWORD(v83) = 0;
  *(void *)((char *)&v83 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x1FFFFFFFFLL;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v80, 0);
  ++DWORD2(v81);
  HIDWORD(v82) = 4;
  re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock(&v80);
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  if (!*((void *)this + 52))
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *((unsigned int *)this + 110);
  uint64_t v8 = *(unsigned int *)(*((void *)this + 53) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 416, v7, v6, &v75, &v80);
    ++*((_DWORD *)this + 114);
    uint64_t v10 = *((void *)this + 54) + 88 * v11;
    goto LABEL_9;
  }
  uint64_t v9 = *((void *)this + 54);
  while (*(void *)(v9 + 88 * v8 + 16) != a2)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 88 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 88 * v8;
LABEL_9:
  uint64_t v12 = v10 + 24;
  re::DataArray<re::ecs2::PhysicsSimulationData>::deinit((uint64_t)&v80);
  if ((void)v80)
  {
    uint64_t v13 = v82;
    if ((void)v82) {
      (*(void (**)(void))(*(void *)v80 + 40))();
    }
  }
  float v14 = *((float *)this + 86);
  if (v14 <= 0.0) {
    float v14 = *((float *)this + 87);
  }
  uint64_t v15 = *((void *)this + 37);
  int v16 = *((unsigned __int8 *)this + 304);
  int v17 = *(_DWORD *)(v12 + 56);
  if ((v17 + 1) >> 24) {
    int v18 = 1;
  }
  else {
    int v18 = v17 + 1;
  }
  *(_DWORD *)(v12 + 56) = v18;
  uint64_t v19 = *(unsigned __int16 *)(v12 + 52);
  unint64_t v20 = *(unsigned __int16 *)(v12 + 54);
  if (v19 == 0xFFFF && v20 == 0xFFFF)
  {
    if (*(_DWORD *)(v12 + 48) >= *(_DWORD *)(v12 + 44)) {
      re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock((void *)v12);
    }
    uint64_t v24 = *(void *)(v12 + 16);
    unint64_t v20 = (unsigned __int16)(v24 - 1);
    if (!v24) {
      goto LABEL_60;
    }
    uint64_t v19 = *(unsigned int *)(v12 + 48);
    if (v19 >= 0x10000) {
      goto LABEL_61;
    }
    uint64_t v25 = (void *)(*(void *)(v12 + 32) + 16 * v20);
    *(_DWORD *)(v12 + 48) = v19 + 1;
    *(_DWORD *)(v25[1] + 4 * v19) = *(_DWORD *)(v12 + 56);
    uint64_t v23 = (_DWORD *)(*v25 + 272 * v19);
  }
  else
  {
    unint64_t v4 = *(void *)(v12 + 16);
    if (v4 <= v20)
    {
LABEL_59:
      unint64_t v76 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v85 = 136315906;
      unint64_t v86 = "operator[]";
      __int16 v87 = 1024;
      int v88 = 789;
      __int16 v89 = 2048;
      *(void *)long long v90 = v20;
      *(_WORD *)&v90[8] = 2048;
      *(void *)&v90[10] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      unint64_t v76 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v80 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v85 = 136315906;
      unint64_t v86 = "operator[]";
      __int16 v87 = 1024;
      int v88 = 789;
      __int16 v89 = 2048;
      *(void *)long long v90 = v20;
      *(_WORD *)&v90[8] = 2048;
      *(void *)&v90[10] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_61:
      re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v19);
      _os_crash();
      __break(1u);
    }
    uint64_t v22 = (void *)(*(void *)(v12 + 32) + 16 * v20);
    *(_DWORD *)(v22[1] + 4 * v19) = v18;
    uint64_t v23 = (_DWORD *)(*v22 + 272 * v19);
    *(_DWORD *)(v12 + 52) = *v23;
    unint64_t v4 = 0x94D049BB133111EBLL;
  }
  ++*(_DWORD *)(v12 + 40);
  uint64_t v26 = (_anonymous_namespace_ *)re::ecs2::PhysicsSimulationData::PhysicsSimulationData((uint64_t)v23, v15, 0, (_OWORD *)this + 20, *((_DWORD *)this + 88), v16 == 0, v14);
  *(void *)&long long v80 = (v20 << 16) | ((unint64_t)(*(_DWORD *)(v12 + 56) & 0xFFFFFF) << 32) | v19;
  if (*((void *)this + 58))
  {
    unint64_t v27 = v6 % *((unsigned int *)this + 122);
    uint64_t v28 = *(unsigned int *)(*((void *)this + 59) + 4 * v27);
    if (v28 != 0x7FFFFFFF)
    {
      uint64_t v29 = *((void *)this + 60);
      if (*(void *)(v29 + 32 * v28 + 16) == a2) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v28 = *(_DWORD *)(v29 + 32 * v28 + 8) & 0x7FFFFFFF;
        if (v28 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v29 + 32 * v28 + 16) == a2) {
          goto LABEL_36;
        }
      }
    }
  }
  else
  {
    LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 27) = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 464, v27, v6, &v75, &v80);
  ++*((_DWORD *)this + 126);
LABEL_36:
  unint64_t v76 = a2;
  uint64_t v30 = *(re::EventBus **)(a2 + 288);
  if (!v30)
  {
    re::internal::assertLog((re::internal *)4, v27, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
    goto LABEL_59;
  }
  long long v80 = 0uLL;
  LODWORD(v81) = 1;
  long long v82 = 0uLL;
  *((void *)&v81 + 1) = 0;
  LODWORD(v83) = 0;
  uint64_t v31 = (re *)(*(uint64_t (**)(re::ecs2::PhysicsSimulationTracking *))(*(void *)this + 16))(this);
  if (v32)
  {
    uint64_t v33 = (uint64_t *)v31;
    uint64_t v34 = 8 * v32;
    do
    {
      uint64_t v35 = *v33++;
      *(void *)&v90[4] = re::globalAllocators(v31)[2];
      uint64_t v36 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)&v90[4] + 32))(*(void *)&v90[4], 32, 0);
      void *v36 = &unk_26E6E4878;
      v36[1] = this;
      v36[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      v36[3] = 0;
      *(void *)&v90[12] = v36;
      uint64_t v37 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v30, (uint64_t)&v85, v35, 0);
      uint64_t v39 = v38;
      uint64_t v40 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
      *uint64_t v40 = v37;
      v40[1] = v39;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)&v85);
      re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(this, v30, (uint64_t)&v80, v35);
      uint64_t v31 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(this, v30, (uint64_t)&v80, v35);
      v34 -= 8;
    }
    while (v34);
  }
  int v41 = (re *)(*(uint64_t (**)(re::ecs2::PhysicsSimulationTracking *))(*(void *)this + 24))(this);
  if (v42)
  {
    uint64_t v43 = (uint64_t *)v41;
    uint64_t v44 = 8 * v42;
    do
    {
      uint64_t v45 = *v43++;
      re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(this, v30, (uint64_t)&v80, v45);
      int v41 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(this, v30, (uint64_t)&v80, v45);
      v44 -= 8;
    }
    while (v44);
  }
  *(void *)&v90[4] = re::globalAllocators(v41)[2];
  uint64_t v46 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)&v90[4] + 32))(*(void *)&v90[4], 32, 0);
  *uint64_t v46 = &unk_26E6E4980;
  v46[1] = this;
  v46[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v46[3] = 0;
  *(void *)&v90[12] = v46;
  uint64_t v47 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v30, (uint64_t)&v85, 0, 0);
  uint64_t v49 = v48;
  uint64_t v50 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  *uint64_t v50 = v47;
  v50[1] = v49;
  uint64_t v51 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)&v85);
  *(void *)&v90[4] = re::globalAllocators(v51)[2];
  uint64_t v52 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)&v90[4] + 32))(*(void *)&v90[4], 32, 0);
  *uint64_t v52 = &unk_26E6E49D8;
  v52[1] = this;
  void v52[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v52[3] = 0;
  *(void *)&v90[12] = v52;
  uint64_t v53 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v30, (uint64_t)&v85, 0, 0);
  uint64_t v55 = v54;
  uint64_t v56 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  void *v56 = v53;
  v56[1] = v55;
  uint64_t v57 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)&v85);
  *(void *)&v90[4] = re::globalAllocators(v57)[2];
  uint64_t v58 = (void *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)&v90[4] + 32))(*(void *)&v90[4], 32, 0);
  void *v58 = &unk_26E6E4A30;
  v58[1] = this;
  uint64_t v58[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v58[3] = 0;
  *(void *)&v90[12] = v58;
  uint64_t v59 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v30, (uint64_t)&v85, 0, 0);
  uint64_t v61 = v60;
  __int16 v62 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  *__int16 v62 = v59;
  v62[1] = v61;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)&v85);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 152, (uint64_t *)&v76, (uint64_t)&v80);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 8, (uint64_t *)&v76);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v80);
  uint64_t result = (re *)v80;
  if ((void)v80 && (v81 & 1) == 0) {
    uint64_t result = (re *)(*(uint64_t (**)(void))(*(void *)v80 + 40))();
  }
  uint64_t v64 = *(re::EventBus **)(v75 + 288);
  if (v64)
  {
    LODWORD(v65) = 0x7FFFFFFF;
    if (*((void *)this + 19))
    {
      unint64_t v66 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v75 ^ (v75 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v75 ^ (v75 >> 30))) >> 27));
      uint64_t v67 = *(unsigned int *)(*((void *)this + 20) + 4 * ((v66 ^ (v66 >> 31)) % *((unsigned int *)this + 44)));
      if (v67 != 0x7FFFFFFF)
      {
        uint64_t v68 = *((void *)this + 21);
        if (*(void *)(v68 + 80 * v67 + 16) == v75)
        {
          LODWORD(v65) = v67;
        }
        else
        {
          uint64_t v65 = v67;
          while (1)
          {
            LODWORD(v65) = *(_DWORD *)(v68 + 80 * v65 + 8) & 0x7FFFFFFF;
            if (v65 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v68 + 80 * v65 + 16) == v75) {
              goto LABEL_56;
            }
          }
          LODWORD(v65) = 0x7FFFFFFF;
        }
      }
    }
LABEL_56:
    uint64_t v69 = *((void *)this + 21) + 80 * v65 + 24;
    uint64_t v78 = re::globalAllocators(result)[2];
    uint64_t v70 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v78 + 32))(v78, 32, 0);
    *uint64_t v70 = &unk_26E6E4820;
    v70[1] = this;
    v70[2] = re::ecs2::PhysicsSimulationTracking::clearPhysicsSimulationEventHandler<RESceneEntityWillDeactivateEvent>;
    v70[3] = 0;
    uint64_t v79 = v70;
    uint64_t v71 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v64, (uint64_t)v77, 0, 0);
    uint64_t v73 = v72;
    uint64_t v74 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v69);
    void *v74 = v71;
    v74[1] = v73;
    return (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v77);
  }
  return result;
}