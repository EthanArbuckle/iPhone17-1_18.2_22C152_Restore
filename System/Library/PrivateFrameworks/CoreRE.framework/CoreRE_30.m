uint64_t physx::Sc::Scene::unregisterInteraction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(a2 + 28);
  v3 = *(unsigned int *)(a2 + 16);
  v4 = result + 16 * v2;
  v6 = *(void *)(v4 + 72);
  v5 = v4 + 72;
  v7 = *(_DWORD *)(v5 + 8) - 1;
  v8 = *(void *)(v6 + 8 * v7);
  *(_DWORD *)(v5 + 8) = v7;
  *(void *)(v6 + 8 * v3) = v8;
  *(_DWORD *)(a2 + 16) = -1;
  if (v3 < v7) {
    *(_DWORD *)(*(void *)(*(void *)v5 + 8 * v3) + 16) = v3;
  }
  v9 = result + 4 * v2;
  v12 = *(_DWORD *)(v9 + 120);
  v11 = (unsigned int *)(v9 + 120);
  v10 = v12;
  if (v3 < v12)
  {
    v13 = v10 - 1;
    *v11 = v13;
    if (v13 < *(_DWORD *)(v5 + 8))
    {
      v14 = *(void *)(*(void *)v5 + 8 * v3);
      v15 = *(void *)(*(void *)v5 + 8 * v13);
      *(void *)(*(void *)v5 + 8 * v3) = v15;
      *(void *)(*(void *)v5 + 8 * v13) = v14;
      *(_DWORD *)(v14 + 16) = v13;
      *(_DWORD *)(v15 + 16) = v3;
    }
  }
  return result;
}

uint64_t physx::Sc::Scene::notifyInteractionActivated(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 28);
  uint64_t v3 = result + 4 * v2;
  unsigned int v6 = *(_DWORD *)(v3 + 120);
  v4 = (_DWORD *)(v3 + 120);
  uint64_t v5 = v6;
  uint64_t v7 = result + 16 * v2;
  if (v6 < *(_DWORD *)(v7 + 80))
  {
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    uint64_t v9 = *(void *)(v7 + 72);
    uint64_t v10 = *(void *)(v9 + 8 * v5);
    uint64_t v11 = *(void *)(v9 + 8 * v8);
    *(void *)(v9 + 8 * v5) = v11;
    *(void *)(*(void *)(v7 + 72) + 8 * v8) = v10;
    *(_DWORD *)(v10 + 16) = v8;
    *(_DWORD *)(v11 + 16) = v5;
    LODWORD(v5) = *v4;
  }
  _DWORD *v4 = v5 + 1;
  return result;
}

uint64_t physx::Sc::Scene::notifyInteractionDeactivated(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 28);
  uint64_t v3 = result + 4 * v2;
  unsigned int v6 = *(_DWORD *)(v3 + 120);
  v4 = (unsigned int *)(v3 + 120);
  unsigned int v5 = v6;
  if (v6 >= 2)
  {
    unsigned int v7 = v5 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    uint64_t v9 = result + 16 * v2;
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(void *)(v10 + 8 * v7);
    uint64_t v12 = *(void *)(v10 + 8 * v8);
    *(void *)(v10 + 8 * v7) = v12;
    *(void *)(*(void *)(v9 + 72) + 8 * v8) = v11;
    *(_DWORD *)(v11 + 16) = v8;
    *(_DWORD *)(v12 + 16) = v7;
    unsigned int v5 = *v4;
  }
  unsigned int *v4 = v5 - 1;
  return result;
}

void *physx::Sc::Scene::allocatePointerBlock(physx::Sc::Scene *this, int a2)
{
  HIDWORD(v2) = a2;
  LODWORD(v2) = a2;
  result = 0;
  switch((v2 >> 3))
  {
    case 0u:
      return result;
    case 1u:
      result = (void *)*((void *)this + 87);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,8u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::allocateSlab((uint64_t)this + 136);
        result = (void *)*((void *)this + 87);
      }
      *((void *)this + 87) = *result;
      ++*((_DWORD *)this + 171);
      break;
    case 2u:
      result = (void *)*((void *)this + 158);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,16u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::allocateSlab((uint64_t)this + 704);
        result = (void *)*((void *)this + 158);
      }
      *((void *)this + 158) = *result;
      ++*((_DWORD *)this + 313);
      break;
    case 4u:
      result = (void *)*((void *)this + 229);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,32u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::allocateSlab((uint64_t)this + 1272);
        result = (void *)*((void *)this + 229);
      }
      *((void *)this + 229) = *result;
      ++*((_DWORD *)this + 455);
      break;
    default:
      unsigned int v5 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16);
      result = (void *)v5();
      break;
  }
  return result;
}

uint64_t physx::Sc::Scene::deallocatePointerBlock(uint64_t this, void **a2, int a3)
{
  switch(a3)
  {
    case 32:
      if (a2)
      {
        --*(_DWORD *)(this + 1820);
        *a2 = *(void **)(this + 1832);
        *(void *)(this + 1832) = a2;
      }
      break;
    case 16:
      if (a2)
      {
        --*(_DWORD *)(this + 1252);
        *a2 = *(void **)(this + 1264);
        *(void *)(this + 1264) = a2;
      }
      break;
    case 8:
      if (a2)
      {
        --*(_DWORD *)(this + 684);
        *a2 = *(void **)(this + 696);
        *(void *)(this + 696) = a2;
      }
      break;
    default:
      if (a2) {
        return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
      break;
  }
  return this;
}

void *physx::Sc::Scene::setFilterShaderData(void *this, const void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = this;
  if (a2)
  {
    if (*((_DWORD *)this + 1003) >= a3)
    {
      v17 = (void *)this[500];
      size_t v12 = a3;
LABEL_10:
      this = memcpy(v17, a2, v12);
      v9[500] = v17;
      *((_DWORD *)v9 + 1002) = a3;
      return this;
    }
    size_t v12 = a3;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1434);
    if (v13)
    {
      v17 = (void *)v13;
      *((_DWORD *)v9 + 1003) = a3;
      if (v9[500]) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      goto LABEL_10;
    }
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    return (void *)physx::shdfnd::Foundation::error(v18, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1443, "Failed to allocate memory for filter shader data!", v14, v15, v16, a9);
  }
  else
  {
    if (this[500])
    {
      this = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      v9[500] = 0;
    }
    v9[501] = 0;
  }
  return this;
}

uint64_t physx::Sc::Scene::prepareCollide(physx::Sc::Scene *this)
{
  unint64_t v2 = (char *)this + 4660;
  ++*((_DWORD *)this + 499);
  *((unsigned char *)this + 7472) = 0;
  *((_DWORD *)this + 538) = *(_DWORD *)(*((void *)this + 535) + 56);
  (*(void (**)(uint64_t))(*(void *)(*((void *)this + 230) + 296) + 88))(*((void *)this + 230) + 296);
  *((_DWORD *)this + 556) = 0;
  if (*v2)
  {
    *unint64_t v2 = 0;
    uint64_t v3 = (float *)*((void *)this + 230);
    if (v3[454] != 0.0 || v3[455] != 0.0 || v3[456] != 0.0 || v3[457] != 0.0) {
      *((_DWORD *)this + 1066) |= 4u;
    }
  }
  return physx::Sc::Scene::visualizeStartStep((uint64_t)this);
}

uint64_t physx::Sc::Scene::visualizeStartStep(uint64_t this)
{
  if (*(float *)(this + 4656) != 0.0)
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 1840);
    memset(v7, 0, sizeof(v7));
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0x3F80000000000000;
    int v11 = 1065353216;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    int v14 = 1065353216;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 1065353216;
    uint64_t v18 = v2 + 296;
    if (*(float *)(v2 + 1848) != 0.0) {
      physx::Bp::AABBManager::visualize(*(void *)(this + 1848), v7);
    }
    uint64_t v3 = *(unsigned int *)(v1 + 2052);
    if (v3)
    {
      v4 = *(uint64_t **)(v1 + 2008);
      do
      {
        uint64_t v5 = *v4++;
        physx::Sc::ConstraintSim::visualize(*(void **)(v5 + 80), *(void *)(v1 + 1840) + 296);
        --v3;
      }
      while (v3);
    }
    (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v6);
    return physx::Sc::NPhaseCore::visualize(*(void *)(v1 + 3992), v7, (uint64_t)v6);
  }
  return this;
}

uint64_t physx::Sc::Scene::simulate(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  if (a2 != 0.0)
  {
    uint64_t v4 = this;
    *(float *)(this + 1984) = a2;
    float v5 = 1.0 / a2;
    BOOL v6 = a2 <= 0.0;
    float v7 = 0.0;
    if (!v6) {
      float v7 = v5;
    }
    *(float *)(this + 1988) = v7;
    uint64_t v8 = (physx::PxBaseTask *)(this + 7304);
    *(_DWORD *)(this + 7336) = 1;
    *(void *)(this + 7328) = a3;
    if (a3)
    {
      (*(void (**)(physx::PxBaseTask *))(*(void *)a3 + 32))(a3);
      *(void *)(v4 + 7320) = *(void *)(*(void *)(v4 + 7328) + 16);
    }
    physx::Sc::Scene::prepareCollide((physx::Sc::Scene *)v4);
    physx::Sc::Scene::stepSetupCollide((physx::Sc::Scene *)v4, v8, v9, v10, v11, v12, v13, v14);
    *(_DWORD *)(v4 + 7392) = 1;
    *(void *)(v4 + 7384) = v8;
    (*(void (**)(physx::PxBaseTask *))(*(void *)(v4 + 7304) + 32))(v8);
    *(void *)(v4 + 7376) = *(void *)(*(void *)(v4 + 7384) + 16);
    (*(void (**)(void, physx::PxBaseTask *))(**(void **)(v4 + 7320) + 144))(*(void *)(v4 + 7320), v8);
    uint64_t v15 = *(uint64_t (**)(void))(**(void **)(v4 + 7376) + 144);
    return v15();
  }
  return this;
}

void *physx::Sc::Scene::stepSetupCollide(physx::Sc::Scene *this, physx::PxBaseTask *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::Sc::ConstraintProjectionManager::processPendingUpdates(*((void *)this + 257), *((physx::PxcScratchAllocator **)this + 230), a3, a4, a5, a6, a7, a8);
  physx::Sc::Scene::kinematicsSetup((uint64_t)this, a2);
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 230) + 1776) + 168))(v12);
  result = physx::Sc::NPhaseCore::updateDirtyInteractions(*((int32x2_t **)this + 499), v12, (*((_DWORD *)this + 1067) >> 3) & 1, v10);
  *((_DWORD *)this + 1066) &= 0xFFFFFFF9;
  return result;
}

uint64_t physx::Sc::Scene::advance(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  if (a2 != 0.0)
  {
    uint64_t v4 = this;
    *(float *)(this + 1984) = a2;
    float v5 = 1.0 / a2;
    BOOL v6 = a2 <= 0.0;
    float v7 = 0.0;
    if (!v6) {
      float v7 = v5;
    }
    *(float *)(this + 1988) = v7;
    uint64_t v8 = (physx::PxBaseTask *)(this + 7304);
    *(_DWORD *)(this + 7336) = 1;
    *(void *)(this + 7328) = a3;
    if (a3)
    {
      (*(void (**)(physx::PxBaseTask *))(*(void *)a3 + 32))(a3);
      *(void *)(v4 + 7320) = *(void *)(*(void *)(v4 + 7328) + 16);
    }
    physx::Sc::Scene::kinematicsSetup(v4, v8);
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v4 + 7320) + 144);
    return v9();
  }
  return this;
}

uint64_t physx::Sc::Scene::collide(physx::Sc::Scene *this, float a2, physx::PxBaseTask *a3)
{
  *((float *)this + 496) = a2;
  physx::Sc::Scene::prepareCollide(this);
  physx::Sc::Scene::stepSetupCollide(this, a3, v5, v6, v7, v8, v9, v10);
  bzero((void *)(*((void *)this + 230) + 1936), 0x288uLL);
  *((_DWORD *)this + 1848) = 1;
  *((void *)this + 923) = a3;
  if (a3)
  {
    (*(void (**)(physx::PxBaseTask *))(*(void *)a3 + 32))(a3);
    uint64_t v11 = *(void *)(*((void *)this + 923) + 16);
    *((void *)this + 922) = v11;
  }
  else
  {
    uint64_t v11 = *((void *)this + 922);
  }
  uint64_t v12 = *(uint64_t (**)(void))(*(void *)v11 + 144);
  return v12();
}

uint64_t physx::Sc::Scene::endSimulation(physx::Sc::Scene *this)
{
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 230) + 1776) + 168))(v3);
  physx::Sc::NPhaseCore::fireCustomFilteringCallbacks(*((void *)this + 499), (uint64_t)v3, (*((_DWORD *)this + 1067) & 8) != 0);
  *(_DWORD *)(*((void *)this + 499) + 40) = *(_DWORD *)(*((void *)this + 499) + 32);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 238) + 80))(*((void *)this + 238));
  *((_DWORD *)this + 498) = (*((_DWORD *)this + 498) + 1) & 0x7FFFFFFF;
  ++*((_DWORD *)this + 499);
  return result;
}

uint64_t physx::Sc::Scene::flush(physx::Sc::Scene *this, int a2)
{
  if (a2)
  {
    physx::Sc::Scene::fireQueuedContactCallbacks((uint64_t)this, 1);
    uint64_t v3 = *((void *)this + 499);
    *(_DWORD *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 84) = -1;
    physx::Sc::NPhaseCore::clearContactReportActorPairs(v3, 1);
    physx::Sc::Scene::fireTriggerCallbacks((uint64_t)this);
  }
  else
  {
    physx::Sc::NPhaseCore::clearContactReportActorPairs(*((void *)this + 499), 1);
  }
  physx::Sc::Scene::postReportsCleanup(this);
  uint64_t v4 = *((void *)this + 499);
  *(_DWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 84) = -1;
  unsigned int v5 = *(_DWORD *)(v4 + 80);
  if (*(_DWORD *)(v4 + 76) != v5)
  {
    if (*(void *)(v4 + 64))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      unsigned int v5 = *(_DWORD *)(v4 + 80);
    }
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
      unsigned int v5 = *(_DWORD *)(v4 + 80);
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(void *)(v4 + 64) = v6;
    *(_DWORD *)(v4 + 76) = v5;
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 2128);
  physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate((uint64_t)this + 2128, *((_DWORD *)this + 534));
  uint64_t v7 = *((void *)this + 268);
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(v7);
  physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(v7, *(_DWORD *)(v7 + 8));
  *((_DWORD *)this + 556) = 0;
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 2216);
  physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::recreate((uint64_t)this + 2216, *((_DWORD *)this + 556));
  physx::Sc::Scene::clearSleepWakeBodies(this);
  physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::recreate((uint64_t)this + 4160, *((_DWORD *)this + 1042));
  uint64_t v8 = *((void *)this + 535);
  if (*(_DWORD *)(v8 + 56))
  {
    unint64_t v9 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v8 + 8, *(_DWORD *)(*(void *)(v8 + 48) + 4 * v9++));
    while (v9 < *(unsigned int *)(v8 + 56));
  }
  *(_DWORD *)(v8 + 56) = 0;
  int v14 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v8 + 48, 0, &v14);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v8 + 48, *(_DWORD *)(v8 + 56));
  uint64_t v10 = *((void *)this + 536);
  if (*(_DWORD *)(v10 + 56))
  {
    unint64_t v11 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v10 + 8, *(_DWORD *)(*(void *)(v10 + 48) + 4 * v11++));
    while (v11 < *(unsigned int *)(v10 + 56));
  }
  *(_DWORD *)(v10 + 56) = 0;
  int v15 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v10 + 48, 0, &v15);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v10 + 48, *(_DWORD *)(v10 + 56));
  physx::Sc::Scene::processLostTouchPairs(this);
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 4384);
  physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::recreate((uint64_t)this + 4384, *((_DWORD *)this + 1098));
  physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate((uint64_t)this + 32, *((_DWORD *)this + 10));
  for (uint64_t i = 0; i != 48; i += 16)
    physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate((uint64_t)this + i + 72, *(_DWORD *)((char *)this + i + 80));
  return physx::PxcNpMemBlockPool::releaseUnusedBlocks(*((void *)this + 230) + 40);
}

uint64_t physx::Sc::Scene::fireQueuedContactCallbacks(uint64_t this, char a2)
{
  if (*(void *)(this + 4240))
  {
    uint64_t v2 = this;
    if (a2) {
      unsigned __int8 v3 = 1;
    }
    else {
      unsigned __int8 v3 = *(_DWORD *)(this + 2152) == *(_DWORD *)(*(void *)(this + 4280) + 56) ? 1 : 17;
    }
    uint64_t v4 = *(void *)(this + 3992);
    unint64_t v5 = *(unsigned int *)(v4 + 16);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(v4 + 8);
      do
      {
        if (v6 < (v5 - 1))
        {
          _X9 = *(void *)(v7 + 8 * v6 + 8);
          __asm { PRFM            #0, [X9] }
        }
        unint64_t v14 = v6 + 1;
        int v15 = *(void **)(v7 + 8 * v6);
        uint64_t v16 = (unsigned __int16 *)v15[3];
        if ((v16[5] & 2) == 0)
        {
          if (v14 < v5)
          {
            _X8 = *(void *)(*(void *)(v7 + 8 * v6 + 8) + 24);
            __asm { PRFM            #0, [X8] }
          }
          v21[13] = 0;
          physx::Sc::Scene::finalizeContactStreamAndCreateHeader((void *)v2, (uint64_t)v21, v15, v16, v3);
          this = (*(uint64_t (**)(void, _WORD *, uint64_t, void))(**(void **)(v2 + 4240) + 24))(*(void *)(v2 + 4240), v21, v22, v23);
          v16[2] = v16[3];
          unsigned int v19 = v16[4];
          _ZF = (v19 & 0xF) == 0;
          unsigned int v20 = v19 >> 4;
          if (!_ZF) {
            LOWORD(v20) = v20 + 1;
          }
          v16[5] = v16[5] & 0x1F | (32 * v20);
        }
        unint64_t v6 = v14;
      }
      while (v5 != v14);
    }
  }
  return this;
}

uint64_t physx::Sc::Scene::fireTriggerCallbacks(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 2136);
  if (v2)
  {
    this = *(void *)(this + 4240);
    if (this)
    {
      uint64_t v3 = *(void *)(v1 + 4280);
      unsigned int v4 = *(_DWORD *)(v3 + 56);
      uint64_t v5 = *(void *)(v1 + 2128);
      if (v4)
      {
        uint64_t v6 = 0;
        unsigned int v7 = *(_DWORD *)(v1 + 2152);
        uint64_t v8 = 36;
        do
        {
          if (v7 < v4 || (*(unsigned char *)(v5 + v8) & 4) != 0)
          {
            uint64_t v9 = **(void **)(v1 + 2144);
            unsigned int v10 = *(_DWORD *)(v3 + 40) & 0x7FFFFFFF;
            char v11 = *(_DWORD *)(v9 + v6) >> 5 < v10
               && ((*(_DWORD *)(*(void *)(v3 + 32) + 4 * ((unint64_t)*(unsigned int *)(v9 + v6) >> 5)) >> *(_DWORD *)(v9 + v6)) & 1) != 0;
            unint64_t v12 = *(unsigned int *)(v9 + v6 + 4);
            if ((v12 >> 5) < v10
              && ((*(_DWORD *)(*(void *)(v3 + 32) + 4 * (v12 >> 5)) >> v12) & 1) != 0)
            {
              v11 |= 2u;
            }
            *(unsigned char *)(v5 + v8) = v11;
          }
          v6 += 12;
          v8 += 40;
        }
        while (12 * v2 != v6);
      }
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 32))(this, v5);
    }
  }
  *(_DWORD *)(v1 + 2136) = 0;
  *(_DWORD *)(*(void *)(v1 + 2144) + 8) = 0;
  return this;
}

void *physx::Sc::Scene::clearSleepWakeBodies(physx::Sc::Scene *this)
{
  uint64_t v1 = (_WORD *)((char *)this + 4152);
  uint64_t v2 = *((unsigned int *)this + 1023);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 506);
    do
    {
      uint64_t v4 = *v3++;
      *(_WORD *)(*(void *)v4 + 180) &= 0xFF8Fu;
      --v2;
    }
    while (v2);
  }
  uint64_t v5 = *((unsigned int *)this + 1037);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 513);
    do
    {
      uint64_t v7 = *v6++;
      *(_WORD *)(*(void *)v7 + 180) &= 0xFF4Fu;
      --v5;
    }
    while (v5);
  }
  uint64_t v8 = (char *)this + 4096;
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 4040);
  uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v8);
  *uint64_t v1 = 257;
  return result;
}

void physx::Sc::Scene::processLostTouchPairs(physx::Sc::Scene *this)
{
  if (*((_DWORD *)this + 1098))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = *((void *)this + 548);
      unsigned int v5 = *((_DWORD *)this + 1102) & 0x7FFFFFFF;
      int v6 = *(_DWORD *)(v4 + v2 + 16) >> 5 >= v5
         ? 0
         : *(_DWORD *)(*((void *)this + 550) + 4 * ((unint64_t)*(unsigned int *)(v4 + v2 + 16) >> 5)) & (1 << *(_DWORD *)(v4 + v2 + 16));
      int v7 = *(_DWORD *)(v4 + v2 + 20) >> 5 >= v5
         ? 0
         : *(_DWORD *)(*((void *)this + 550) + 4 * ((unint64_t)*(unsigned int *)(v4 + v2 + 20) >> 5)) & (1 << *(_DWORD *)(v4 + v2 + 20));
      if (v6 | v7) {
        break;
      }
      uint64_t v8 = (physx::Sc::BodySim **)(v4 + v2);
      uint64_t v9 = *v8;
      unsigned int v10 = *((_DWORD *)*v8 + 46);
      unsigned int v11 = *((_DWORD *)v8[1] + 46);
      if (v10 < 0xFFFFFFFE)
      {
        if (v11 < 0xFFFFFFFE) {
          goto LABEL_20;
        }
LABEL_18:
        physx::Sc::BodySim::internalWakeUp(v9, 0.4);
LABEL_19:
        physx::Sc::BodySim::internalWakeUp(*(physx::Sc::BodySim **)(*((void *)this + 548) + v2 + 8), 0.4);
        goto LABEL_20;
      }
      if (v11 < 0xFFFFFFFE) {
        goto LABEL_18;
      }
LABEL_20:
      ++v3;
      v2 += 24;
      if (v3 >= *((unsigned int *)this + 1098)) {
        goto LABEL_21;
      }
    }
    if (!v6) {
      physx::Sc::BodySim::internalWakeUp(*(physx::Sc::BodySim **)(v4 + v2), 0.4);
    }
    if (v7) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_21:
  *((_DWORD *)this + 1098) = 0;
  unint64_t v12 = (void *)*((void *)this + 550);
  size_t v13 = (4 * *((_DWORD *)this + 1102));
  bzero(v12, v13);
}

void physx::Sc::Scene::removeBody(int32x2_t **this, physx::Sc::BodySim *a2, int8x8_t a3)
{
  uint64_t v5 = *((void *)a2 + 25);
  if (v5) {
    physx::Sc::ConstraintProjectionManager::invalidateGroup(this[257], v5, 0, a3);
  }
  uint64_t v8 = (physx::Sc::BodySim *)*((void *)a2 + 10);
  uint64_t v6 = (uint64_t)v8;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 505), (uint64_t *)&v8);
  uint64_t v8 = (physx::Sc::BodySim *)v6;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 512), (uint64_t *)&v8);
  if (*((_DWORD *)a2 + 46) <= 0xFFFFFFFD && (*(unsigned char *)(v6 + 44) & 0x10) != 0)
  {
    uint64_t v8 = a2;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)(this + 936), (uint64_t *)&v8);
  }
  unint64_t v7 = *((unsigned int *)a2 + 22);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)(this + 550), v7 + 1);
  *(__int32 *)((char *)this[550]->i32 + ((v7 >> 3) & 0x1FFFFFFC)) |= 1 << v7;
}

void *physx::Sc::Scene::addConstraint(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[542];
  uint64_t v9 = *(void **)(v8 + 560);
  if (!v9)
  {
    physx::shdfnd::PoolBase<physx::Sc::ConstraintSim,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::allocateSlab(v8);
    uint64_t v9 = *(void **)(v8 + 560);
  }
  *(void *)(v8 + 560) = *v9;
  ++*(_DWORD *)(v8 + 548);
  physx::Sc::ConstraintSim::ConstraintSim((uint64_t)v9, a2, a3, a4, (uint64_t)a1);
  uint64_t v12 = a2;
  char v13 = 0;
  uint64_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1 + 250, &v12, &v13, v10);
  if (!v13) {
    void *result = v12;
  }
  return result;
}

uint64_t physx::Sc::Scene::removeConstraint(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v5 = *(physx::Sc::ConstraintSim **)(a2 + 80);
  if (v5)
  {
    uint64_t v6 = *((void *)v5 + 13);
    if (!v6) {
      uint64_t v6 = *((void *)v5 + 14);
    }
    uint64_t v7 = *(void *)(v6 + 200);
    if (v7) {
      physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(a1 + 2056), v7, v5, a3);
    }
    uint64_t v8 = *(void *)(a1 + 4336);
    physx::Sc::ConstraintSim::~ConstraintSim(v5);
    --*(_DWORD *)(v8 + 548);
    *(void *)uint64_t v5 = *(void *)(v8 + 560);
    *(void *)(v8 + 560) = v5;
  }
  uint64_t v10 = a2;
  return physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 2000, &v10);
}

void *physx::Sc::Scene::addArticulation(int32x2_t *this, physx::Sc::ArticulationCore *a2, physx::Sc::BodySim **a3)
{
  uint64_t v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationSim>::getName() [T = physx::Sc::ArticulationSim]";
  }
  else {
    uint64_t v7 = "<allocation names disabled>";
  }
  uint64_t v8 = (physx::Sc::ArticulationSim *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 104, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1746);
  if (physx::Sc::ArticulationSim::ArticulationSim(v8, a2, (physx::IG::SimpleIslandManager **)this, a3)
    && !*(void *)v8)
  {
    physx::Sc::ArticulationSim::~ArticulationSim(v8);
    unsigned int v11 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    return (void *)v11();
  }
  else
  {
    uint64_t v12 = a2;
    char v13 = 0;
    uint64_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 270, &v12, &v13, v9);
    if (!v13) {
      void *result = v12;
    }
  }
  return result;
}

uint64_t physx::Sc::Scene::removeArticulation(physx::Sc::Scene *this, physx::Sc::ArticulationSim **a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    physx::Sc::ArticulationSim::~ArticulationSim(*a2);
    (*(void (**)(uint64_t, physx::Sc::ArticulationSim *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  uint64_t v6 = a2;
  return physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 2160, (uint64_t *)&v6);
}

uint64_t physx::Sc::Scene::addArticulationJoint(uint64_t a1, uint64_t a2, physx::Sc::ArticulationSim ***a3, physx::Sc::BodySim **a4)
{
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim>::getName() [T = physx::S"
  }
         "c::ArticulationJointSim]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, 40, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 1766);
  uint64_t v10 = *a3;
  unsigned int v11 = *a4;
  return physx::Sc::ArticulationJointSim::ArticulationJointSim(v9, a2, v10, v11);
}

uint64_t physx::Sc::Scene::removeArticulationJoint(uint64_t a1, physx::Sc::ArticulationJointSim **a2)
{
  if (*a2)
  {
    physx::Sc::ArticulationJointSim::~ArticulationJointSim(*a2);
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    return v2();
  }
  return result;
}

uint64_t physx::Sc::Scene::addBrokenConstraint(uint64_t result, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v2 = *(unsigned int *)(result + 2224);
  if ((*(_DWORD *)(result + 2228) & 0x7FFFFFFFu) <= v2) {
    return physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::growAndPushBack(result + 2216, &v3);
  }
  *(void *)(*(void *)(result + 2216) + 8 * v2) = a2;
  *(_DWORD *)(result + 2224) = v2 + 1;
  return result;
}

void *physx::Sc::Scene::addActiveBreakableConstraint(int32x2_t *this, physx::Sc::ConstraintSim *a2, physx::Sc::ConstraintInteraction *a3, int8x8_t a4)
{
  uint64_t v5 = a2;
  char v6 = 0;
  uint64_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 279, &v5, &v6, a4);
  if (!v6) {
    void *result = v5;
  }
  *((unsigned char *)v5 + 120) |= 4u;
  return result;
}

void *physx::Sc::Scene::allocateConstraintBlock(physx::Sc::Scene *this, unsigned int a2)
{
  if (a2 > 0x80)
  {
    if (a2 > 0x100)
    {
      if (a2 > 0x180)
      {
        uint64_t v4 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16);
        return (void *)v4();
      }
      else
      {
        uint64_t result = (void *)*((void *)this + 498);
        if (!result)
        {
          physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,384u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::allocateSlab((uint64_t)this + 3424);
          uint64_t result = (void *)*((void *)this + 498);
        }
        *((void *)this + 498) = *result;
        ++*((_DWORD *)this + 993);
      }
    }
    else
    {
      uint64_t result = (void *)*((void *)this + 427);
      if (!result)
      {
        physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,256u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::allocateSlab((uint64_t)this + 2856);
        uint64_t result = (void *)*((void *)this + 427);
      }
      *((void *)this + 427) = *result;
      ++*((_DWORD *)this + 851);
    }
  }
  else
  {
    uint64_t result = (void *)*((void *)this + 356);
    if (!result)
    {
      physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,128u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::allocateSlab((uint64_t)this + 2288);
      uint64_t result = (void *)*((void *)this + 356);
    }
    *((void *)this + 356) = *result;
    ++*((_DWORD *)this + 709);
  }
  return result;
}

uint64_t physx::Sc::Scene::deallocateConstraintBlock(uint64_t this, void *a2, unsigned int a3)
{
  if (a3 > 0x80)
  {
    if (a3 > 0x100)
    {
      if (a3 > 0x180)
      {
        if (a2) {
          return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
      }
      else if (a2)
      {
        --*(_DWORD *)(this + 3972);
        *a2 = *(void *)(this + 3984);
        *(void *)(this + 3984) = a2;
      }
    }
    else if (a2)
    {
      --*(_DWORD *)(this + 3404);
      *a2 = *(void *)(this + 3416);
      *(void *)(this + 3416) = a2;
    }
  }
  else if (a2)
  {
    --*(_DWORD *)(this + 2836);
    *a2 = *(void *)(this + 2848);
    *(void *)(this + 2848) = a2;
  }
  return this;
}

uint64_t physx::Cm::FanoutTask::removeReference(uint64_t this)
{
  uint64_t v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  }
  if (atomic_fetch_add((atomic_uint *volatile)(v1 + 24), 0xFFFFFFFF) == 1)
  {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 24), 1u);
    *(unsigned char *)(v1 + 152) = 0;
    unint64_t v2 = *(unsigned int *)(v1 + 88);
    if (v2)
    {
      uint64_t v3 = 0;
      for (unint64_t i = 0; i < v2; ++i)
      {
        uint64_t v5 = *(void *)(v1 + 80);
        uint64_t v6 = *(unsigned int *)(v1 + 144);
        if ((*(_DWORD *)(v1 + 148) & 0x7FFFFFFFu) <= v6)
        {
          physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 96, (void *)(v5 + v3));
          unint64_t v2 = *(unsigned int *)(v1 + 88);
        }
        else
        {
          *(void *)(*(void *)(v1 + 136) + 8 * v6) = *(void *)(v5 + 8 * i);
          *(_DWORD *)(v1 + 144) = v6 + 1;
        }
        v3 += 8;
      }
    }
    *(_DWORD *)(v1 + 88) = 0;
    uint64_t v7 = *(uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(v1 + 16) + 8))(*(void *)(v1 + 16));
    this = (*v7)();
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v8 = *(pthread_mutex_t **)(v1 + 160);
    return pthread_mutex_unlock(v8);
  }
  return this;
}

uint64_t physx::Cm::FanoutTask::addReference(uint64_t this)
{
  uint64_t v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  }
  atomic_fetch_add((atomic_uint *volatile)(v1 + 24), 1u);
  *(unsigned char *)(v1 + 152) = 1;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v2 = *(pthread_mutex_t **)(v1 + 160);
    return pthread_mutex_unlock(v2);
  }
  return this;
}

uint64_t physx::Sc::Scene::finishBroadPhase(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  uint64_t v4 = *((void *)this + 231);
  unsigned int v5 = *(_DWORD *)(v4 + 464);
  uint64_t v6 = *(void *)(v4 + 456);
  *(_DWORD *)(*((void *)this + 230) + 2564) += v5;
  physx::Sc::NPhaseCore::onOverlapCreated(*((physx::Sc::ElementInteractionMarker **)this + 499), v6, v5);
  uint64_t v7 = *(unsigned int *)(v4 + 448);
  uint64_t v8 = *(void *)(v4 + 440);
  if ((*((_DWORD *)this + 1889) & 0x7FFFFFFF) == 0) {
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate((uint64_t)this + 7544, 1u);
  }
  if ((*((_DWORD *)this + 1893) & 0x7FFFFFFF) == 0) {
    physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate((uint64_t)this + 7560, 1u);
  }
  if ((*((_DWORD *)this + 1897) & 0x7FFFFFFF) == 0) {
    physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate((uint64_t)this + 7576, 1u);
  }
  *((_DWORD *)this + 1888) = 1;
  *((_DWORD *)this + 1892) = 1;
  *((_DWORD *)this + 1896) = 1;
  uint64_t v9 = *((void *)this + 230);
  *(_DWORD *)(v9 + 2564) += v7;
  *((_DWORD *)this + 1750) = 1;
  *((void *)this + 874) = a2;
  if (a2)
  {
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    *((void *)this + 873) = *(void *)(*((void *)this + 874) + 16);
    uint64_t v9 = *((void *)this + 230);
  }
  uint64_t v10 = *(pthread_mutex_t ***)(v9 + 1920);
  *((_DWORD *)this + 1902) = 0;
  if ((*((_DWORD *)this + 1903) & 0x7FFFFFFFu) >= v7)
  {
    *((_DWORD *)this + 1902) = v7;
    *((void *)this + 949) = 0;
    if (!v7) {
      goto LABEL_20;
    }
    unsigned int v11 = (uint64_t *)((char *)this + 7592);
  }
  else
  {
    physx::shdfnd::Array<physx::PxFilterInfo,physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>>::recreate((uint64_t)this + 7600, v7);
    *((_DWORD *)this + 1902) = v7;
    unsigned int v11 = (uint64_t *)((char *)this + 7592);
    *((void *)this + 949) = 0;
  }
  uint64_t v24 = v8;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = v7;
  do
  {
    uint64_t v15 = v7;
    unsigned int v16 = v14 - 512;
    if (v14 >= 0x200) {
      int v17 = 512;
    }
    else {
      int v17 = v14;
    }
    uint64_t v18 = physx::Cm::FlushPool::allocate(v10, 224, 0x10u);
    uint64_t v19 = *((void *)this + 499);
    uint64_t v20 = *((void *)this + 950) + 8 * v12;
    *(void *)(v18 + 8) = *((void *)this + 3);
    *(void *)(v18 + 16) = 0;
    *(_DWORD *)(v18 + 32) = 0;
    *(void *)uint64_t v18 = &unk_26E726000;
    *(void *)(v18 + 40) = v19;
    *(void *)(v18 + 48) = v24 + 24 * v12;
    *(_DWORD *)(v18 + 56) = v17;
    *(void *)(v18 + 192) = v20;
    *(void *)(v18 + 200) = 0;
    *(_DWORD *)(v18 + 208) = 0;
    *(void *)(v18 + 216) = 0;
    *(_OWORD *)(v18 + 60) = 0u;
    *(_OWORD *)(v18 + 76) = 0u;
    *(_OWORD *)(v18 + 92) = 0u;
    *(_OWORD *)(v18 + 108) = 0u;
    *(_OWORD *)(v18 + 124) = 0u;
    *(_OWORD *)(v18 + 140) = 0u;
    *(_OWORD *)(v18 + 156) = 0u;
    *(_OWORD *)(v18 + 172) = 0u;
    *(_DWORD *)(v18 + 32) = 1;
    *(void *)(v18 + 24) = (char *)this + 6968;
    (*(void (**)(char *))(*((void *)this + 871) + 32))((char *)this + 6968);
    *(void *)(v18 + 16) = *(void *)(*(void *)(v18 + 24) + 16);
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    v21 = (uint64_t *)(v13 + 216);
    if (!v13) {
      v21 = v11;
    }
    uint64_t *v21 = v18;
    v12 += 512;
    unsigned int v14 = v16;
    uint64_t v7 = v15;
    uint64_t v13 = v18;
  }
  while (v12 < v15);
LABEL_20:
  uint64_t v22 = *(uint64_t (**)(void))(**((void **)this + 873) + 144);
  return v22();
}

uint64_t physx::Sc::Scene::postBroadPhaseStage2(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  physx::Sc::Scene::processLostTouchPairs(this);
  *((_DWORD *)this + 1764) = 1;
  *((void *)this + 881) = a2;
  if (a2)
  {
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    *((void *)this + 880) = *(void *)(*((void *)this + 881) + 16);
    *((_DWORD *)this + 1778) = 1;
    *((void *)this + 888) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    *((void *)this + 887) = *(void *)(*((void *)this + 888) + 16);
    *((_DWORD *)this + 1792) = 1;
    *((void *)this + 895) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    *((void *)this + 894) = *(void *)(*((void *)this + 895) + 16);
    *((_DWORD *)this + 1806) = 1;
    *((void *)this + 902) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    *((void *)this + 901) = *(void *)(*((void *)this + 902) + 16);
  }
  else
  {
    *((_DWORD *)this + 1778) = 1;
    *((void *)this + 888) = 0;
    *((_DWORD *)this + 1792) = 1;
    *((void *)this + 895) = 0;
    *((_DWORD *)this + 1806) = 1;
    *((void *)this + 902) = 0;
  }
  (*(void (**)(void, char *))(**((void **)this + 880) + 144))(*((void *)this + 880), (char *)this + 7024);
  (*(void (**)(void, char *))(**((void **)this + 887) + 144))(*((void *)this + 887), (char *)this + 7080);
  (*(void (**)(void, char *))(**((void **)this + 894) + 144))(*((void *)this + 894), (char *)this + 7136);
  uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 901) + 144))(*((void *)this + 901), (char *)this + 7192);
  unint64_t v5 = *((unsigned int *)this + 1888);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*((void *)this + 943) + 8 * i);
      if ((v7 & 1) == 0)
      {
        uint64_t v8 = *((void *)this + 230);
        *(_DWORD *)(*(void *)(v8 + 504) + (((unint64_t)*(unsigned int *)(v7 + 88) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v7 + 88));
        uint64_t v9 = *(void *)(v8 + 472);
        uint64_t v10 = *(unsigned int *)(v8 + 480);
        *(_DWORD *)(v8 + 480) = v10 + 1;
        *(void *)(v9 + 8 * v10) = v7;
        unint64_t v5 = *((unsigned int *)this + 1888);
      }
    }
  }
  uint64_t v11 = *((unsigned int *)this + 1892);
  if (v11)
  {
    unsigned int v12 = (void **)*((void *)this + 945);
    do
    {
      uint64_t v13 = *v12;
      if (*v12) {
        BOOL v14 = ((unint64_t)*v12 & 1) == 0;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        uint64_t v15 = *((void *)this + 499);
        --*(_DWORD *)(v15 + 1844);
        *uint64_t v13 = *(void *)(v15 + 1856);
        *(void *)(v15 + 1856) = v13;
      }
      ++v12;
      --v11;
    }
    while (v11);
  }
  uint64_t v16 = *((unsigned int *)this + 1896);
  if (v16)
  {
    int v17 = (void **)*((void *)this + 947);
    do
    {
      uint64_t v18 = *v17;
      if (*v17) {
        BOOL v19 = ((unint64_t)*v17 & 1) == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        uint64_t v20 = *((void *)this + 499);
        --*(_DWORD *)(v20 + 3548);
        *uint64_t v18 = *(void *)(v20 + 3560);
        *(void *)(v20 + 3560) = v18;
      }
      ++v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t physx::Sc::Scene::releaseConstraints(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 4154))
  {
    if (a2) {
      return this;
    }
    unint64_t v2 = (void *)(this + 1840);
  }
  else
  {
    if (!a2) {
      return this;
    }
    unint64_t v2 = (void *)(this + 1840);
    physx::PxcNpMemBlockPool::releaseContacts((physx::PxcNpMemBlockPool *)(*(void *)(this + 1840) + 40));
  }
  uint64_t v3 = (physx::PxcNpMemBlockPool *)(*v2 + 40);
  return physx::PxcNpMemBlockPool::releaseContacts(v3);
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::Sc::Scene::addToLostTouchList(uint64_t this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3)
{
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  int v3 = *((_DWORD *)a3 + 22);
  LODWORD(v8) = *((_DWORD *)a2 + 22);
  HIDWORD(v8) = v3;
  unsigned int v4 = *(_DWORD *)(this + 4392);
  if ((*(_DWORD *)(this + 4396) & 0x7FFFFFFFu) <= v4) {
    return physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::growAndPushBack((uint64_t *)(this + 4384), &v7);
  }
  uint64_t v5 = *(void *)(this + 4384) + 24 * v4;
  long long v6 = v7;
  *(void *)(v5 + 16) = v8;
  *(_OWORD *)uint64_t v5 = v6;
  ++*(_DWORD *)(this + 4392);
  return this;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void physx::Sc::Scene::postCCDPass(physx::Sc::Scene *this, physx::PxBaseTask *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(*((void *)this + 233) + 180);
  unsigned int v4 = (_DWORD *)*((void *)this + 230);
  int v5 = v4[435];
  int v6 = v4[434];
  int v50 = v6;
  int v51 = v5;
  int v49 = v4[436];
  size_t v7 = (16 * v5);
  if (v7 < 0x401)
  {
    MEMORY[0x270FA5388](this);
    v47 = (int32x2_t ***)((char *)&v46 - ((v7 + 15) & 0x1FFFFFFF0));
    bzero(v47, v7);
  }
  else
  {
    uint64_t v8 = (int32x2_t ***)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v5), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3474);
    v47 = v8;
    int v6 = v50;
  }
  uint64_t v9 = (16 * v6);
  if (v9 < 0x401)
  {
    MEMORY[0x270FA5388](v8);
    v46 = (physx::Sc::ShapeInteraction **)((char *)&v46 - ((v9 + 15) & 0x1FFFFFFF0));
    bzero(v46, (16 * v6));
  }
  else
  {
    uint64_t v10 = (physx::Sc::ShapeInteraction **)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v6), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3475);
    v46 = v10;
  }
  size_t v11 = (16 * v49);
  if (v11 < 0x401)
  {
    MEMORY[0x270FA5388](v10);
    unsigned int v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0x1FFFFFFF0));
    bzero(v12, v11);
  }
  else
  {
    unsigned int v12 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v48, (16 * v49), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 3476);
  }
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 230) + 1776) + 168))(v48);
  unsigned int v13 = *((_DWORD *)this + 1067);
  physx::PxsContext::fillManagerTouchEvents(*((void *)this + 230), (char *)v47, &v51, (char *)v46, &v50, (char *)v12, &v49);
  int v15 = (v13 >> 3) & 1;
  if (v51 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = v47 + 1;
    do
    {
      uint64_t v18 = *v17;
      physx::Sc::NPhaseCore::managerNewTouch(*((int32x2_t **)this + 499), *v17, v14);
      physx::Sc::ShapeInteraction::managerNewTouch((physx::Sc::ShapeInteraction *)v18, v3, 1, (uint64_t)v48, v15);
      if ((*((unsigned char *)v18 + 66) & 4) == 0) {
        physx::IG::SimpleIslandManager::setEdgeConnected(*((void **)this + 235), *((unsigned int *)v18 + 24), v19);
      }
      ++v16;
      v17 += 2;
    }
    while (v16 < v51);
  }
  if (v50 >= 1)
  {
    uint64_t v20 = 0;
    v21 = v46 + 1;
    do
    {
      uint64_t v22 = *v21;
      if (physx::Sc::ShapeInteraction::managerLostTouch(*v21, v3, 1, (uint64_t)v48, v15)
        && (*((unsigned char *)v22 + 66) & 4) == 0)
      {
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)v22 + 5) + 8) + 80) + 13) - 1 >= 2) {
          unsigned int v23 = 0;
        }
        else {
          unsigned int v23 = *(physx::Sc::BodySim **)(*((void *)v22 + 5) + 8);
        }
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)v22 + 6) + 8) + 80) + 13) - 1 >= 2) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(physx::Sc::BodySim **)(*((void *)v22 + 6) + 8);
        }
        physx::Sc::Scene::addToLostTouchList((uint64_t)this, v23, v24);
      }
      physx::IG::SimpleIslandManager::setEdgeDisconnected(*((void *)this + 235), *((_DWORD *)v22 + 24));
      ++v20;
      v21 += 2;
    }
    while (v20 < v50);
  }
  int v25 = v49;
  if (v49 >= 1)
  {
    uint64_t v26 = 0;
    v27 = v12 + 1;
    do
    {
      uint64_t v28 = *v27;
      if ((*(unsigned char *)(*v27 + 64) & 0x20) != 0)
      {
        physx::Sc::ShapeInteraction::processUserNotificationSync(*v27);
        physx::Sc::ShapeInteraction::processUserNotificationAsync(v28, 32, 0, 0, v3, 0, (uint64_t)v48, 0);
        int v25 = v49;
      }
      ++v26;
      v27 += 2;
    }
    while (v26 < v25);
  }
  physx::Sc::Scene::checkForceThresholdContactEvents(this, v3);
  v29 = (void *)(*((void *)this + 231) + 224);
  uint64_t v30 = *((unsigned int *)this + 526);
  if (v30)
  {
    for (uint64_t i = 0; i != v30; ++i)
    {
      uint64_t v32 = *((void *)this + 262);
      uint64_t v33 = *(void *)(v32 + 8 * i);
      if ((int)i + 8 < v30)
      {
        _X8 = *(void *)(v32 + 8 * (i + 8));
        int v35 = ~((_X8 + 511) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
        }
        while (!__CFADD__(v35++, 1));
      }
      physx::Sc::BodySim::updateCached(v33, v29);
    }
  }
  unint64_t v41 = *((unsigned int *)this + 553);
  if (v41)
  {
    unint64_t v42 = 0;
    uint64_t v43 = *((void *)this + 271);
    do
    {
      uint64_t v44 = **(void **)(v43 + 8 * v42);
      if (*(_DWORD *)(v44 + 48))
      {
        unint64_t v45 = 0;
        do
          physx::Sc::BodySim::updateCached(*(void *)(*(void *)(v44 + 40) + 8 * v45++), v29);
        while (v45 < *(unsigned int *)(v44 + 48));
        unint64_t v41 = *((unsigned int *)this + 553);
      }
      ++v42;
    }
    while (v42 < v41);
  }
  if (v11 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, v12);
  }
  if (v9 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, v46);
  }
  if (v7 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v48, v47);
  }
}

void physx::Sc::Scene::checkForceThresholdContactEvents(physx::Sc::Scene *this, int a2)
{
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 230) + 1776) + 168))(v14);
  uint64_t v4 = *(void *)(*((void *)this + 236) + 16);
  uint64_t v5 = *(unsigned int *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 32 * v5;
    do
    {
      uint64_t v8 = *(void *)(v4 + 8);
      uint64_t v9 = *(void *)(v8 + v6);
      if (!v9) {
        goto LABEL_16;
      }
      unsigned int v10 = *(_DWORD *)(v9 + 64);
      if ((v10 & 0x1C0) == 0) {
        goto LABEL_16;
      }
      int v11 = (2 * v10) & 0x100000;
      unsigned int v12 = v10 & 0xFFE7FFFF | (((v10 >> 19) & 1) << 20);
      *(_DWORD *)(v9 + 64) = v12;
      if (*(float *)(v8 + v6 + 24) <= (float)(*(float *)(v8 + v6 + 12) * *((float *)this + 496)))
      {
        if ((v10 & 0x100) == 0 || !v11) {
          goto LABEL_16;
        }
        __int16 v13 = 256;
      }
      else
      {
        *(_DWORD *)(v9 + 64) = v12 | 0x80000;
        if ((v10 & 0x40) == 0 || v11)
        {
          if ((v10 & 0x80) == 0 || !v11) {
            goto LABEL_16;
          }
          __int16 v13 = 128;
        }
        else
        {
          __int16 v13 = 64;
        }
      }
      physx::Sc::ShapeInteraction::processUserNotificationSync(v9);
      physx::Sc::ShapeInteraction::processUserNotificationAsync(v9, v13, 0, 0, a2, 0, (uint64_t)v14, 0);
LABEL_16:
      v6 += 32;
    }
    while (v7 != v6);
  }
}

uint64_t physx::Cm::FlushPool::clear(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*this);
  }
  uint64_t result = physx::Cm::FlushPool::clearNotThreadSafe((uint64_t)this);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    int v3 = *this;
    return pthread_mutex_unlock(v3);
  }
  return result;
}

uint64_t physx::Sc::Scene::kinematicsSetup(uint64_t this, physx::PxBaseTask *a2)
{
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 48);
  uint64_t v5 = *(void *)(this + 32);
  uint64_t v6 = *(pthread_mutex_t ***)(*(void *)(this + 1840) + 1920);
  if (v4)
  {
    unsigned int v7 = 0;
    unsigned int v8 = *(_DWORD *)(this + 48);
    do
    {
      uint64_t v9 = physx::Cm::FlushPool::allocate(v6, 56, 0x10u);
      unsigned int v10 = (void *)v9;
      int v11 = *(_DWORD *)(v3 + 1988);
      if (v8 >= 0x400) {
        int v12 = 1024;
      }
      else {
        int v12 = v8;
      }
      *(void *)(v9 + 8) = *(void *)(v3 + 24);
      *(void *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      __int16 v13 = (uint64_t (**)(void *))&unk_26E725D60;
      *(void *)uint64_t v9 = &unk_26E725D60;
      *(void *)(v9 + 40) = v5 + 8 * v7;
      *(_DWORD *)(v9 + 48) = v12;
      *(_DWORD *)(v9 + 52) = v11;
      *(_DWORD *)(v9 + 32) = 1;
      *(void *)(v9 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
        v10[2] = *(void *)(v10[3] + 16);
        __int16 v13 = (uint64_t (**)(void *))*v10;
      }
      this = v13[5](v10);
      v7 += 1024;
      v8 -= 1024;
    }
    while (v7 < v4);
  }
  if ((*(unsigned char *)(v3 + 4269) & 0x20) != 0)
  {
    uint64_t v14 = physx::Cm::FlushPool::allocate(v6, 64, 0x10u);
    uint64_t v15 = *(void *)(v3 + 1904);
    *(void *)(v14 + 8) = *(void *)(v3 + 24);
    *(void *)(v14 + 16) = 0;
    *(_DWORD *)(v14 + 32) = 0;
    uint64_t v16 = &unk_26E725DD0;
    *(void *)uint64_t v14 = &unk_26E725DD0;
    *(void *)(v14 + 40) = v5;
    *(_DWORD *)(v14 + 48) = v4;
    *(void *)(v14 + 56) = v15;
    *(_DWORD *)(v14 + 32) = 1;
    *(void *)(v14 + 24) = a2;
    if (a2)
    {
      (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
      *(void *)(v14 + 16) = *(void *)(*(void *)(v14 + 24) + 16);
      uint64_t v16 = *(void **)v14;
    }
    int v17 = (uint64_t (*)(uint64_t))v16[5];
    return v17(v14);
  }
  return this;
}

void physx::Sc::Scene::resizeReleasedBodyIDMaps(physx::Sc::Scene *this, int a2, unsigned int a3)
{
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 4400, a2);
  uint64_t v6 = *((void *)this + 536);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v6 + 32, a2);
  if ((*(_DWORD *)(v6 + 60) & 0x7FFFFFFFu) < a3) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v6 + 48, a3);
  }
  uint64_t v7 = *((void *)this + 535);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v7 + 32, a2);
  if ((*(_DWORD *)(v7 + 60) & 0x7FFFFFFFu) < a3)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v7 + 48, a3);
  }
}

void *physx::Sc::Scene::finalizeContactStreamAndCreateHeader(void *result, uint64_t a2, void *a3, unsigned __int16 *a4, unsigned __int8 a5)
{
  uint64_t v5 = *(void *)(result[499] + 64);
  uint64_t v6 = *(unsigned int *)a4;
  unint64_t v7 = a4[5];
  uint64_t v8 = (v7 >> 1) & 0x7FF0;
  int v9 = a4[3];
  if ((v7 & 0x1F & a5) != 0 && v9 != 0)
  {
    uint64_t v11 = result[535];
    unsigned int v12 = *(_DWORD *)(v11 + 40) & 0x7FFFFFFF;
    uint64_t v13 = v8 + v6 + v5 + 48;
    uint64_t v14 = a4[3];
    do
    {
      __int16 v15 = *(_WORD *)v13;
      if (*(_DWORD *)(v13 + 4) >> 5 < v12
        && ((*(_DWORD *)(*(void *)(v11 + 32) + 4 * ((unint64_t)*(unsigned int *)(v13 + 4) >> 5)) >> *(_DWORD *)(v13 + 4)) & 1) != 0)
      {
        v15 |= 1u;
      }
      if (*(_DWORD *)(v13 + 8) >> 5 < v12
        && ((*(_DWORD *)(*(void *)(v11 + 32) + 4 * ((unint64_t)*(unsigned int *)(v13 + 8) >> 5)) >> *(_DWORD *)(v13 + 8)) & 1) != 0)
      {
        v15 |= 2u;
      }
      *(_WORD *)uint64_t v13 = v15;
      v13 += 64;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = v5 + v6;
  uint64_t v17 = result[536];
  *(void *)a2 = *(void *)(a3[3] + 24);
  *(void *)(a2 + 8) = *(void *)(a3[3] + 32);
  uint64_t v18 = a3[3];
  unsigned int v19 = *(_DWORD *)(v17 + 40) & 0x7FFFFFFF;
  __int16 v20 = 0;
  if (*(_DWORD *)(v18 + 16) >> 5 < v19)
  {
    uint64_t result = *(void **)(v17 + 32);
    if ((*((_DWORD *)result + ((unint64_t)*(unsigned int *)(v18 + 16) >> 5)) >> *(_DWORD *)(v18 + 16))) {
      __int16 v20 = 1;
    }
  }
  uint64_t v21 = v16 + v8;
  unint64_t v22 = *(unsigned int *)(v18 + 20);
  if (v22 >> 5) < v19 && ((*(_DWORD *)(*(void *)(v17 + 32) + 4 * (v22 >> 5)) >> v22)) {
    v20 |= 2u;
  }
  *(_WORD *)(a2 + 26) = v20;
  *(void *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 40) = v9;
  unsigned __int16 v23 = a4[4];
  if (v23)
  {
    v23 -= 4;
    *(void *)(a2 + 16) = v16 + 4;
    if ((v7 & 8) != 0)
    {
      uint64_t v24 = a3[2];
      uint64_t v25 = *(void *)(a3[1] + 80);
      if (*(unsigned char *)(v25 + 13))
      {
        *(void *)(v16 + 12) = *(void *)(v25 + 80);
        *(_DWORD *)(v16 + 20) = *(_DWORD *)(v25 + 88);
        uint64_t v26 = *(void *)(v25 + 96);
        int v27 = *(_DWORD *)(v25 + 104);
      }
      else
      {
        uint64_t v26 = 0;
        *(void *)(v16 + 12) = 0;
        *(_DWORD *)(v16 + 20) = 0;
        int v27 = 0;
      }
      *(void *)(v16 + 36) = v26;
      *(_DWORD *)(v16 + 44) = v27;
      uint64_t v28 = *(void *)(v24 + 80);
      if (*(unsigned char *)(v28 + 13))
      {
        *(void *)(v16 + 24) = *(void *)(v28 + 80);
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v28 + 88);
        uint64_t v29 = *(void *)(v28 + 96);
        int v30 = *(_DWORD *)(v28 + 104);
      }
      else
      {
        uint64_t v29 = 0;
        *(void *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 32) = 0;
        int v30 = 0;
      }
      *(void *)(v16 + 48) = v29;
      *(_DWORD *)(v16 + 56) = v30;
      a4[5] = v7 & 0xFFF7;
    }
  }
  else
  {
    *(void *)(a2 + 16) = 0;
  }
  *(_WORD *)(a2 + 24) = v23;
  return result;
}

char *physx::Sc::Scene::getQueuedContactPairHeaders(physx::Sc::Scene *this)
{
  if (*((_DWORD *)this + 538) == *(_DWORD *)(*((void *)this + 535) + 56)) {
    unsigned __int8 v2 = 1;
  }
  else {
    unsigned __int8 v2 = 17;
  }
  uint64_t v3 = *((void *)this + 499);
  uint64_t v4 = *(void *)(v3 + 8);
  unint64_t v5 = *(unsigned int *)(v3 + 16);
  uint64_t v6 = (char *)this + 1968;
  if ((*((_DWORD *)this + 495) & 0x7FFFFFFFu) >= v5)
  {
    *((_DWORD *)this + 494) = 0;
    if (!v5) {
      return v6;
    }
    int v27 = (unsigned int *)((char *)this + 1976);
  }
  else
  {
    physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate((uint64_t)this + 1968, v5);
    int v27 = (unsigned int *)((char *)this + 1976);
    *((_DWORD *)this + 494) = 0;
  }
  unint64_t v7 = 0;
  do
  {
    if (v7 < (v5 - 1))
    {
      _X9 = *(void *)(v4 + 8 * v7 + 8);
      __asm { PRFM            #0, [X9] }
    }
    unint64_t v14 = v7 + 1;
    __int16 v15 = *(void **)(v4 + 8 * v7);
    uint64_t v16 = (unsigned __int16 *)v15[3];
    if ((v16[5] & 2) == 0)
    {
      if (v14 < v5)
      {
        _X8 = *(void *)(*(void *)(v4 + 8 * v7 + 8) + 24);
        __asm { PRFM            #0, [X8] }
      }
      unsigned int v19 = *((_DWORD *)this + 495) & 0x7FFFFFFF;
      unsigned int v20 = *((_DWORD *)this + 494);
      if (v19 <= v20)
      {
        if (v19) {
          unsigned int v21 = 2 * *((_DWORD *)this + 495);
        }
        else {
          unsigned int v21 = 1;
        }
        physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate((uint64_t)v6, v21);
        unsigned int v20 = *v27;
      }
      uint64_t v22 = *((void *)this + 246);
      *((_DWORD *)this + 494) = v20 + 1;
      uint64_t v23 = v22 + 48 * v20;
      *(_WORD *)(v23 + 26) = 0;
      physx::Sc::Scene::finalizeContactStreamAndCreateHeader(this, v23, v15, v16, v2);
      v16[2] = v16[3];
      unsigned int v24 = v16[4];
      _ZF = (v24 & 0xF) == 0;
      unsigned int v25 = v24 >> 4;
      if (!_ZF) {
        LOWORD(v25) = v25 + 1;
      }
      v16[5] = v16[5] & 0x1F | (32 * v25);
    }
    unint64_t v7 = v14;
  }
  while (v5 != v14);
  return v6;
}

uint64_t physx::Sc::Scene::fireBrokenConstraintCallbacks(uint64_t this)
{
  if (*(void *)(this + 4240))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(unsigned int *)(this + 2224);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(v1 + 2216) + v3);
        if (*(void *)(v5 + 80))
        {
          int v9 = -1;
          uint64_t v6 = (*(uint64_t (**)(void, int *))(**(void **)(v5 + 32) + 40))(*(void *)(v5 + 32), &v9);
          v7[0] = v5 + qword_2687A6320;
          v7[1] = v6;
          int v8 = v9;
          this = (***(uint64_t (****)(void, void *, uint64_t))(v1 + 4240))(*(void *)(v1 + 4240), v7, 1);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  return this;
}

void *physx::Sc::Scene::fireCallbacksPostSync(physx::Sc::Scene *this)
{
  uint64_t v2 = (char *)this + 4152;
  if (!*((unsigned char *)this + 4153))
  {
    int v3 = *((_DWORD *)this + 1023);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 506);
      uint64_t v5 = *((void *)this + 235);
      unsigned int v6 = v3 - 1;
      do
      {
        unint64_t v7 = (uint64_t *)(v4 + 8 * v6);
        uint64_t v8 = *(void *)*v7;
        __int16 v9 = *(_WORD *)(v8 + 180);
        if ((v9 & 0x80) != 0)
        {
          *(_WORD *)(v8 + 180) = v9 & 0xFFDF;
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4040, v7);
        }
        else if ((*(unsigned char *)(*(void *)(v5 + 248) {
                            + (((unint64_t)*(unsigned int *)(v8 + 176) >> 2) & 0x3FFFFFE0)
        }
                            + 4) & 2) != 0)
        {
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4040, v7);
          physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v8, 0.4);
        }
      }
      while ((unint64_t)v6--);
    }
    v2[1] = 1;
  }
  if (!*v2)
  {
    int v11 = *((_DWORD *)this + 1037);
    if (v11)
    {
      uint64_t v12 = *((void *)this + 513);
      unsigned int v13 = v11 - 1;
      do
      {
        unint64_t v14 = (uint64_t *)(v12 + 8 * v13);
        if ((*(_WORD *)(*(void *)*v14 + 180) & 0x40) != 0) {
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 4096, v14);
        }
      }
      while ((unint64_t)v13--);
    }
    *uint64_t v2 = 1;
  }
  if (*((void *)this + 530))
  {
    uint64_t v16 = *((unsigned int *)this + 1023);
    uint64_t v17 = *((unsigned int *)this + 1037);
    unsigned int v18 = v16 <= v17 ? *((_DWORD *)this + 1037) : *((_DWORD *)this + 1023);
    if (v18)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v18, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 4569);
      if (v19)
      {
        uint64_t v20 = v19;
        if (v16)
        {
          unsigned int v21 = 0;
          uint64_t v22 = *((void *)this + 506);
          do
          {
            if ((*(unsigned char *)(*(void *)v22 + 12) & 4) != 0) {
              *(void *)(v19 + 8 * v21++) = *(void *)v22
            }
                                             + *((void *)&physx::Sc::gOffsetTable
                                               + *(unsigned __int8 *)(*(void *)v22 + 13)
                                               + 10);
            v22 += 8;
            --v16;
          }
          while (v16);
          if (v21) {
            (*(void (**)(void, uint64_t))(**((void **)this + 530) + 16))(*((void *)this + 530), v19);
          }
        }
        if (v17)
        {
          unsigned int v23 = 0;
          uint64_t v24 = *((void *)this + 513);
          do
          {
            if ((*(unsigned char *)(*(void *)v24 + 12) & 4) != 0) {
              *(void *)(v20 + 8 * v23++) = *(void *)v24
            }
                                             + *((void *)&physx::Sc::gOffsetTable
                                               + *(unsigned __int8 *)(*(void *)v24 + 13)
                                               + 10);
            v24 += 8;
            --v17;
          }
          while (v17);
          if (v23) {
            (*(void (**)(void, uint64_t))(**((void **)this + 530) + 8))(*((void *)this + 530), v20);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v20);
      }
    }
  }
  return physx::Sc::Scene::clearSleepWakeBodies(this);
}

uint64_t physx::Sc::Scene::prepareOutOfBoundsCallbacks(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 1848);
  uint64_t v2 = *(unsigned int *)(v1 + 416);
  uint64_t v3 = *(void *)(v1 + 408);
  *(_DWORD *)(this + 4504) = 0;
  if (v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 4496;
    do
    {
      int v6 = *(_DWORD *)(*(void *)v3 + 64);
      int v8 = v6;
      uint64_t v7 = *(unsigned int *)(v4 + 4504);
      if ((*(_DWORD *)(v4 + 4508) & 0x7FFFFFFFu) <= v7)
      {
        this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v5, &v8);
      }
      else
      {
        *(_DWORD *)(*(void *)(v4 + 4496) + 4 * v7) = v6;
        ++*(_DWORD *)(v4 + 4504);
      }
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t physx::Sc::Scene::fireOutOfBoundsCallbacks(physx::Sc::Scene *this)
{
  uint64_t v1 = *((void *)this + 231);
  uint64_t v2 = *(unsigned int *)(v1 + 416);
  if (!v2)
  {
    char v5 = 0;
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = *(void *)(v1 + 408);
  uint64_t v7 = *((void *)this + 531);
  uint64_t v8 = *((void *)this + 535);
  do
  {
    if (*(_DWORD *)(*((void *)this + 562) + 4 * v4) >> 5 < (*(_DWORD *)(v8 + 40) & 0x7FFFFFFFu))
    {
      unint64_t v9 = *(unsigned int *)(*((void *)this + 562) + 4 * v4);
      int v10 = *(_DWORD *)(*(void *)(v8 + 32) + 4 * (v9 >> 5)) & (1 << v9);
      if (v10) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v7 == 0;
      }
      if (v11)
      {
        v5 |= v10 == 0;
        goto LABEL_13;
      }
LABEL_11:
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v7 + 16))(v7, *(void *)(*(void *)(v6 + 8 * v4) + 56) + qword_2687A62F0, *(void *)(*(void *)(*(void *)(v6 + 8 * v4) + 8) + 80)+ *((void *)&physx::Sc::gOffsetTable+ *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v6 + 8 * v4) + 8) + 80) + 13)+ 10));
      goto LABEL_13;
    }
    if (v7) {
      goto LABEL_11;
    }
    char v5 = 1;
LABEL_13:
    ++v4;
  }
  while (v2 != v4);
  uint64_t v1 = *((void *)this + 231);
LABEL_16:
  *(_DWORD *)(v1 + 416) = 0;
  return v5 & 1;
}

uint64_t physx::Sc::Scene::postCallbacksPreSync(physx::Sc::Scene *this)
{
  uint64_t v2 = *((void *)this + 499);
  *(_DWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 84) = -1;
  physx::Sc::NPhaseCore::clearContactReportActorPairs(v2, 0);
  int v3 = *((_DWORD *)this + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 4);
    unsigned int v5 = v3 - 5;
    unsigned int v6 = v3 - 1;
    uint64_t v7 = (uint64_t *)(v4 + 8 * (v3 - 1));
    while (v6 < 0x11)
    {
      if (v6 >= 5) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v16 = *v7--;
      *(unsigned char *)(*(void *)(v16 + 176) + 28) = 0;
      physx::Sc::BodySim::deactivateKinematic(*(physx::Sc::BodySim **)v16);
      --v5;
      if (--v6 == -1) {
        goto LABEL_8;
      }
    }
    _X8 = *(void *)(v4 + 8 * (v5 - 12));
    __asm { PRFM            #0, [X8] }
LABEL_6:
    _X8 = *(void *)(*(void *)(v4 + 8 * v5) + 176);
    __asm { PRFM            #0, [X8] }
    goto LABEL_7;
  }
LABEL_8:
  return physx::Sc::Scene::releaseConstraints((uint64_t)this, 1);
}

void physx::Sc::Scene::getStats(physx::Sc::Scene *this, physx::PxSimulationStatistics *a2)
{
  physx::Sc::SimStats::readOut(*((void **)this + 532), a2, *((void *)this + 230) + 1936);
  uint64_t v4 = 0;
  *(void *)((char *)a2 + 12) = *((void *)this + 583);
  *((_DWORD *)a2 + 5) = *((_DWORD *)this + 1168);
  int v5 = *((_DWORD *)this + 553);
  *((_DWORD *)a2 + 13) = *(_DWORD *)(*((void *)this + 231) + 528);
  *((_DWORD *)a2 + 14) = v5;
  do
  {
    *(_DWORD *)((char *)a2 + v4 + 24) = *(_DWORD *)((char *)this + v4 + 4676);
    v4 += 4;
  }
  while (v4 != 28);
}

uint64_t physx::Sc::Scene::addShapes(uint64_t result, void *a2, unsigned int a3, uint64_t a4, physx::Sc::RigidSim *a5, uint64_t a6)
{
  if (a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a3;
    for (uint64_t i = (void *)(a6 + 16); ; i += 3)
    {
      unsigned int v13 = (int *)(*a2 + a4);
      uint64_t v14 = *(void *)(v10 + 4312);
      unsigned int v15 = *(_DWORD *)(v14 + 8);
      uint64_t v16 = *(void *)(v14 + 16);
      uint64_t v17 = (uint64_t *)(v16 + 24 * v15);
      unsigned int v18 = (uint64_t *)v17[1];
      if (v18) {
        break;
      }
      uint64_t v19 = v16 + 24 * v15;
      int v22 = *(_DWORD *)(v19 + 16);
      unsigned int v21 = (_DWORD *)(v19 + 16);
      int v20 = v22;
      if (v22 != *(_DWORD *)v14)
      {
        int v23 = *(_DWORD *)(v14 + 4);
        _DWORD *v21 = v20 + 1;
        uint64_t v24 = *v17;
        if (v24)
        {
          unsigned int v18 = (uint64_t *)(v24 + (v20 * v23));
          goto LABEL_9;
        }
      }
      unsigned int v18 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v14);
      if (v18) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v25 = v10 + 4 * v13[18];
      ++*(_DWORD *)(v25 + 4676);
      (*(void (**)(void, uint64_t *, void))(**(void **)(v10 + 1904) + 32))(*(void *)(v10 + 1904), v18 + 3, *((unsigned int *)v18 + 16));
      if (a6)
      {
        uint64_t v26 = (void *)(*(void *)(*(void *)(v10 + 2064) + 8) + 24 * (v18[2] & 0x7FFFFFFF));
        *(i - 2) = *v26;
        *(i - 1) = v26[1];
        *uint64_t i = v26[2];
      }
      uint64_t result = (*(uint64_t (**)(void, int *))(**(void **)(*(void *)(v10 + 1840) + 1776) + 88))(*(void *)(*(void *)(v10 + 1840) + 1776), v13 + 8);
      ++a2;
      if (!--v11) {
        return result;
      }
    }
    v17[1] = *v18;
LABEL_9:
    physx::Sc::ShapeSim::ShapeSim((physx::Sc::ShapeSim *)v18, a5, (const physx::Sc::ShapeCore *)v13);
    goto LABEL_10;
  }
  return result;
}

void physx::Sc::Scene::removeShapes(physx::Sc::Scene *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  for (uint64_t i = *(void **)(a2 + 56); i; uint64_t i = (void *)*i)
  {
    unsigned int v15 = i;
    uint64_t v10 = *(unsigned int *)(a3 + 528);
    if ((*(_DWORD *)(a3 + 532) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>>::growAndPushBack(a3, &v15);
    }
    else
    {
      *(void *)(*(void *)(a3 + 520) + 8 * v10) = i;
      *(_DWORD *)(a3 + 528) = v10 + 1;
    }
    uint64_t v11 = i[7];
    uint64_t v14 = v11;
    uint64_t v12 = *(unsigned int *)(a4 + 528);
    if ((*(_DWORD *)(a4 + 532) & 0x7FFFFFFFu) <= v12)
    {
      physx::shdfnd::Array<physx::Sc::ShapeCore const*,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeCore const*>>>::growAndPushBack(a4, &v14);
    }
    else
    {
      *(void *)(*(void *)(a4 + 520) + 8 * v12) = v11;
      *(_DWORD *)(a4 + 528) = v12 + 1;
    }
  }
  if (*(_DWORD *)(a3 + 528))
  {
    unint64_t v13 = 0;
    do
      physx::Sc::Scene::removeShape(this, *(physx::Sc::ShapeSim **)(*(void *)(a3 + 520) + 8 * v13++), a5);
    while (v13 < *(unsigned int *)(a3 + 528));
  }
}

uint64_t physx::Sc::Scene::addStatic(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 4320);
  unsigned int v13 = *(_DWORD *)(v12 + 8);
  uint64_t v14 = *(void *)(v12 + 16);
  unsigned int v15 = (uint64_t *)(v14 + 24 * v13);
  uint64_t v16 = (physx::Sc::RigidSim *)v15[1];
  if (v16)
  {
    v15[1] = *(void *)v16;
  }
  else
  {
    uint64_t v17 = v14 + 24 * v13;
    int v20 = *(_DWORD *)(v17 + 16);
    uint64_t v19 = (_DWORD *)(v17 + 16);
    int v18 = v20;
    if (v20 == *(_DWORD *)v12 || (v21 = *(_DWORD *)(v12 + 4), *uint64_t v19 = v18 + 1, (v22 = *v15) == 0)) {
      uint64_t v16 = (physx::Sc::RigidSim *)physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v12);
    }
    else {
      uint64_t v16 = (physx::Sc::RigidSim *)(v22 + (v18 * v21));
    }
  }
  physx::Sc::RigidSim::RigidSim((uint64_t)v16, a1, a2);
  *(void *)uint64_t v16 = &unk_26E7277E8;
  ++*(_DWORD *)(a1 + 4664);
  return physx::Sc::Scene::addShapes(a1, a3, a4, a5, v16, a6);
}

void physx::Sc::Scene::prefetchForRemove(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    int v3 = ~((v2 + 95) >> 5) + (v2 >> 5);
    _X10 = *a2;
    do
    {
      __asm { PRFM            #0, [X10] }
      _X10 += 32;
      _CF = __CFADD__(v3++, 1);
    }
    while (!_CF);
    _X8 = *(void *)(v2 + 56);
    int v11 = ~((_X8 + 23) >> 5) + (_X8 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
}

void physx::Sc::Scene::prefetchForRemove(physx::Sc::Scene *this, const physx::Sc::BodyCore *a2)
{
  unint64_t v2 = *(void *)a2;
  if (*(void *)a2)
  {
    int v3 = ~((v2 + 207) >> 5) + (v2 >> 5);
    _X10 = *(void *)a2;
    do
    {
      __asm { PRFM            #0, [X10] }
      _X10 += 32;
      _CF = __CFADD__(v3++, 1);
    }
    while (!_CF);
    _X8 = *(void *)(v2 + 56);
    int v11 = ~((_X8 + 23) >> 5) + (_X8 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
}

void physx::Sc::Scene::removeStatic(physx::Sc::Scene *this, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  if (v5)
  {
    uint64_t v9 = *((void *)this + 547);
    if (v9)
    {
      physx::Sc::Scene::removeShapes(this, v5, v9, a3, a4);
    }
    else
    {
      uint64_t v14 = 0x4000000000;
      v12[512] = 1;
      unsigned int v13 = v12;
      physx::Sc::Scene::removeShapes(this, v5, (uint64_t)v12, a3, a4);
      if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x7FFFFFFF00000000) != 0 && v13 != v12 && v13) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
    uint64_t v10 = (unsigned __int8 *)*a2;
    if (v10)
    {
      int v11 = (physx::Cm::PreallocatingRegionManager *)*((void *)this + 540);
      (**(void (***)(unsigned __int8 *))v10)(v10);
      physx::Cm::PreallocatingRegionManager::deallocateMemory(v11, v10);
    }
    --*((_DWORD *)this + 1166);
  }
}

uint64_t physx::Sc::Scene::addBody(physx::Sc::Scene *a1, physx::Sc::BodyCore *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = *((void *)a1 + 541);
  unsigned int v15 = *(_DWORD *)(v14 + 8);
  uint64_t v16 = *(void *)(v14 + 16);
  uint64_t v17 = (uint64_t *)(v16 + 24 * v15);
  int v18 = (uint64_t *)v17[1];
  if (v18)
  {
    v17[1] = *v18;
  }
  else
  {
    uint64_t v19 = v16 + 24 * v15;
    int v22 = *(_DWORD *)(v19 + 16);
    int v21 = (_DWORD *)(v19 + 16);
    int v20 = v22;
    if (v22 == *(_DWORD *)v14 || (int v23 = *(_DWORD *)(v14 + 4), *v21 = v20 + 1, (v24 = *v17) == 0)) {
      int v18 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v14);
    }
    else {
      int v18 = (uint64_t *)(v24 + (v20 * v23));
    }
  }
  physx::Sc::BodySim::BodySim((physx::Sc::BodySim *)v18, a1, a2, a7);
  if ((*(unsigned char *)(v18[17] + 28) & 0x20) != 0 && *((_DWORD *)v18 + 46) <= 0xFFFFFFFD)
  {
    if (*(unsigned char *)(v18[10] + 13) == 2)
    {
      unsigned int v25 = *((_DWORD *)v18 + 44);
      if (v25 > 0xFFFFFF7F) {
        goto LABEL_14;
      }
      uint64_t v26 = (char *)a1 + 7632;
    }
    else
    {
      uint64_t v26 = (char *)a1 + 7616;
      unsigned int v25 = *((_DWORD *)v18 + 44);
    }
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v26, (v25 >> 7) + 1);
    *(_DWORD *)(*(void *)v26 + 4 * (v25 >> 12)) |= 1 << (v25 >> 7);
  }
LABEL_14:
  if (*((_DWORD *)v18 + 44) <= 0xFFFFFF7F)
  {
    uint64_t v27 = *((void *)a1 + 238);
    int v30 = *((_DWORD *)v18 + 44);
    (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)v27 + 48))(v27, v18 + 12, &v30);
  }
  uint64_t v28 = *((void *)a2 + 22);
  if (v28 && *(unsigned char *)(v28 + 31) == 1) {
    ++*((_DWORD *)a1 + 1168);
  }
  else {
    ++*((_DWORD *)a1 + 1167);
  }
  return physx::Sc::Scene::addShapes((uint64_t)a1, a3, a4, a5, (physx::Sc::RigidSim *)v18, a6);
}

void physx::Sc::Scene::removeBody(physx::Sc::Scene *this, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v9 = *((void *)this + 547);
    if (v9)
    {
      physx::Sc::Scene::removeShapes(this, *a2, v9, a3, a4);
    }
    else
    {
      uint64_t v16 = 0x4000000000;
      v14[512] = 1;
      unsigned int v15 = v14;
      physx::Sc::Scene::removeShapes(this, v4, (uint64_t)v14, a3, a4);
      if ((v16 & 0x8000000000000000) == 0 && (v16 & 0x7FFFFFFF00000000) != 0 && v15 != v14 && v15) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
    if (*(unsigned char *)(*(void *)(v4 + 80) + 13) != 2 && (*(unsigned char *)(*(void *)(v4 + 136) + 28) & 0x20) != 0)
    {
      uint64_t v10 = *(void *)(v4 + 72);
      unint64_t v11 = *(unsigned int *)(v4 + 176);
      if (32 * *(_DWORD *)(v10 + 7624) > v11 >> 7) {
        *(_DWORD *)(*(void *)(v10 + 7616) + ((v11 >> 10) & 0x3FFFFC)) &= ~(1 << (v11 >> 7));
      }
    }
    uint64_t v12 = a2[22];
    if (v12 && *(unsigned char *)(v12 + 31) == 1) {
      --*((_DWORD *)this + 1168);
    }
    else {
      --*((_DWORD *)this + 1167);
    }
    unsigned int v13 = (physx::Cm::PreallocatingRegionManager *)*((void *)this + 541);
    (**(void (***)(uint64_t))v4)(v4);
    physx::Cm::PreallocatingRegionManager::deallocateMemory(v13, (unsigned __int8 *)v4);
  }
}

uint64_t *physx::Sc::Scene::startBatchInsertion(void *a1, void *a2)
{
  uint64_t v4 = a1[539];
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = (uint64_t *)(v6 + 24 * v5);
  uint64_t v8 = (uint64_t *)v7[1];
  if (v8)
  {
    v7[1] = *v8;
  }
  else
  {
    uint64_t v9 = v6 + 24 * v5;
    int v12 = *(_DWORD *)(v9 + 16);
    unint64_t v11 = (_DWORD *)(v9 + 16);
    int v10 = v12;
    if (v12 == *(_DWORD *)v4 || (v13 = *(_DWORD *)(v4 + 4), *unint64_t v11 = v10 + 1, (v14 = *v7) == 0)) {
      uint64_t v8 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v4);
    }
    else {
      uint64_t v8 = (uint64_t *)(v14 + (v10 * v13));
    }
  }
  int v15 = ~(((unint64_t)v8 + 71) >> 5) + ((unint64_t)v8 >> 5);
  _X9 = v8;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v15++, 1);
  }
  while (!_CF);
  a2[2] = v8;
  uint64_t v22 = a1[540];
  unsigned int v23 = *(_DWORD *)(v22 + 8);
  uint64_t v24 = *(void *)(v22 + 16);
  unsigned int v25 = (uint64_t *)(v24 + 24 * v23);
  uint64_t v26 = (uint64_t *)v25[1];
  if (v26)
  {
    v25[1] = *v26;
  }
  else
  {
    uint64_t v27 = v24 + 24 * v23;
    int v30 = *(_DWORD *)(v27 + 16);
    uint64_t v29 = (_DWORD *)(v27 + 16);
    int v28 = v30;
    if (v30 == *(_DWORD *)v22 || (v31 = *(_DWORD *)(v22 + 4), _DWORD *v29 = v28 + 1, (v32 = *v25) == 0)) {
      uint64_t v26 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v22);
    }
    else {
      uint64_t v26 = (uint64_t *)(v32 + (v28 * v31));
    }
  }
  int v33 = ~(((unint64_t)v26 + 95) >> 5) + ((unint64_t)v26 >> 5);
  _X9 = v26;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v33++, 1);
  }
  while (!_CF);
  a2[1] = v26;
  uint64_t v36 = a1[541];
  unsigned int v37 = *(_DWORD *)(v36 + 8);
  uint64_t v38 = *(void *)(v36 + 16);
  v39 = (uint64_t *)(v38 + 24 * v37);
  uint64_t result = (uint64_t *)v39[1];
  if (result)
  {
    v39[1] = *result;
  }
  else
  {
    uint64_t v41 = v38 + 24 * v37;
    int v44 = *(_DWORD *)(v41 + 16);
    uint64_t v43 = (_DWORD *)(v41 + 16);
    int v42 = v44;
    if (v44 == *(_DWORD *)v36 || (v45 = *(_DWORD *)(v36 + 4), *uint64_t v43 = v42 + 1, (v46 = *v39) == 0)) {
      uint64_t result = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v36);
    }
    else {
      uint64_t result = (uint64_t *)(v46 + (v42 * v45));
    }
  }
  int v47 = ~(((unint64_t)result + 207) >> 5) + ((unint64_t)result >> 5);
  _X9 = result;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v47++, 1);
  }
  while (!_CF);
  *a2 = result;
  return result;
}

uint64_t physx::Sc::Scene::addShapes(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, physx::Sc::RigidSim *a5, physx::Sc::ShapeSim **a6, uint64_t a7)
{
  if (a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v40 = (a4 + 176) + 0x1FFFFFFFFFLL;
    unint64_t v12 = a3;
    do
    {
      uint64_t v13 = v11 + 1;
      if (v11 + 1 < v12)
      {
        _X8 = *(void *)(a2 + 8 * v13);
        int v15 = ~((v40 + _X8) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
          _CF = __CFADD__(v15++, 1);
        }
        while (!_CF);
      }
      uint64_t v21 = *(void *)(v10 + 4312);
      unsigned int v22 = *(_DWORD *)(v21 + 8);
      uint64_t v23 = *(void *)(v21 + 16);
      uint64_t v24 = (uint64_t *)(v23 + 24 * v22);
      unint64_t v25 = v24[1];
      if (v25)
      {
        v24[1] = *(void *)v25;
      }
      else
      {
        uint64_t v26 = v23 + 24 * v22;
        int v29 = *(_DWORD *)(v26 + 16);
        int v28 = (_DWORD *)(v26 + 16);
        int v27 = v29;
        if (v29 == *(_DWORD *)v21 || (v30 = *(_DWORD *)(v21 + 4), *int v28 = v27 + 1, (v31 = *v24) == 0)) {
          unint64_t v25 = (unint64_t)physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v21);
        }
        else {
          unint64_t v25 = v31 + (v27 * v30);
        }
      }
      int v32 = ~((v25 + 71) >> 5) + (v25 >> 5);
      _X9 = (physx::Sc::ShapeSim *)v25;
      do
      {
        __asm { PRFM            #0, [X9] }
        _X9 = (physx::Sc::ShapeSim *)((char *)_X9 + 32);
        _CF = __CFADD__(v32++, 1);
      }
      while (!_CF);
      int v35 = (int *)(*(void *)(a2 + 8 * v11) + a4);
      physx::Sc::ShapeSim::ShapeSim(*a6, a5, (const physx::Sc::ShapeCore *)v35);
      uint64_t v36 = *a6;
      unsigned int v37 = (void *)(*(void *)(*(void *)(v10 + 2064) + 8) + 24 * (*((_DWORD *)*a6 + 4) & 0x7FFFFFFF));
      uint64_t v38 = (void *)(a7 + 24 * v11);
      *uint64_t v38 = *v37;
      v38[1] = v37[1];
      v38[2] = v37[2];
      (*(void (**)(void, uint64_t, void))(**(void **)(v10 + 1904) + 32))(*(void *)(v10 + 1904), (uint64_t)v36 + 24, *((unsigned int *)v36 + 16));
      *a6 = (physx::Sc::ShapeSim *)v25;
      uint64_t v39 = v10 + 4 * v35[18];
      ++*(_DWORD *)(v39 + 4676);
      uint64_t result = (*(uint64_t (**)(void, int *))(**(void **)(*(void *)(v10 + 1840) + 1776) + 88))(*(void *)(*(void *)(v10 + 1840) + 1776), v35 + 8);
      ++v11;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t physx::Sc::Scene::addStatic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(physx::Sc::RigidSim **)(a3 + 8);
  uint64_t v8 = a2 + *(void *)(a3 + 32);
  uint64_t v9 = (uint64_t *)v8;
  if (*(_WORD *)(v8 + 8) == 1 || (uint64_t v9 = *(uint64_t **)v8, *(_WORD *)(v8 + 8)))
  {
    _X8 = *v9;
    int v11 = ~((*v9 + (unint64_t)(*(_DWORD *)(a3 + 56) + 176) - 1) >> 5)
        + ((unint64_t)*v9 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v11++, 1);
    }
    while (!_CF);
  }
  physx::Sc::RigidSim::RigidSim((uint64_t)v7, a1, (void *)(a2 + *(void *)(a3 + 24)));
  *(void *)uint64_t v7 = &unk_26E7277E8;
  uint64_t v17 = *(void *)(a1 + 4320);
  unsigned int v18 = *(_DWORD *)(v17 + 8);
  uint64_t v19 = *(void *)(v17 + 16);
  int v20 = (uint64_t *)(v19 + 24 * v18);
  uint64_t v21 = (uint64_t *)v20[1];
  if (v21)
  {
    v20[1] = *v21;
  }
  else
  {
    uint64_t v22 = v19 + 24 * v18;
    int v25 = *(_DWORD *)(v22 + 16);
    uint64_t v24 = (_DWORD *)(v22 + 16);
    int v23 = v25;
    if (v25 == *(_DWORD *)v17 || (v26 = *(_DWORD *)(v17 + 4), *uint64_t v24 = v23 + 1, (v27 = *v20) == 0)) {
      uint64_t v21 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v17);
    }
    else {
      uint64_t v21 = (uint64_t *)(v27 + (v23 * v26));
    }
  }
  int v28 = ~(((unint64_t)v21 + 95) >> 5) + ((unint64_t)v21 >> 5);
  _X9 = v21;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v28++, 1);
  }
  while (!_CF);
  *(void *)(a3 + 8) = v21;
  uint64_t result = physx::Sc::Scene::addShapes(a1, (uint64_t)v9, *(unsigned __int16 *)(v8 + 8), *(void *)(a3 + 56), v7, (physx::Sc::ShapeSim **)(a3 + 16), a4);
  ++*(_DWORD *)(a1 + 4664);
  return result;
}

uint64_t physx::Sc::Scene::addBody(physx::Sc::Scene *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8 = *(physx::Sc::BodySim **)a3;
  uint64_t v9 = a2 + *(void *)(a3 + 48);
  uint64_t v10 = (uint64_t *)v9;
  if (*(_WORD *)(v9 + 8) == 1 || (uint64_t v10 = *(uint64_t **)v9, *(_WORD *)(v9 + 8)))
  {
    _X8 = *v10;
    int v12 = ~((*v10 + (unint64_t)(*(_DWORD *)(a3 + 56) + 176) - 1) >> 5)
        + ((unint64_t)*v10 >> 5);
    do
    {
      __asm { PRFM            #0, [X8] }
      _X8 += 32;
      _CF = __CFADD__(v12++, 1);
    }
    while (!_CF);
  }
  unsigned int v18 = (physx::Sc::BodyCore *)(a2 + *(void *)(a3 + 40));
  physx::Sc::BodySim::BodySim(*(physx::Sc::BodySim **)a3, a1, v18, a5);
  uint64_t v19 = *((void *)a1 + 541);
  unsigned int v20 = *(_DWORD *)(v19 + 8);
  uint64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = (uint64_t *)(v21 + 24 * v20);
  int v23 = (uint64_t *)v22[1];
  if (v23)
  {
    v22[1] = *v23;
  }
  else
  {
    uint64_t v24 = v21 + 24 * v20;
    int v27 = *(_DWORD *)(v24 + 16);
    int v26 = (_DWORD *)(v24 + 16);
    int v25 = v27;
    if (v27 == *(_DWORD *)v19 || (v28 = *(_DWORD *)(v19 + 4), *int v26 = v25 + 1, (v29 = *v22) == 0)) {
      int v23 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v19);
    }
    else {
      int v23 = (uint64_t *)(v29 + (v25 * v28));
    }
  }
  int v30 = ~(((unint64_t)v23 + 207) >> 5) + ((unint64_t)v23 >> 5);
  _X9 = v23;
  do
  {
    __asm { PRFM            #0, [X9] }
    _X9 += 4;
    _CF = __CFADD__(v30++, 1);
  }
  while (!_CF);
  *(void *)a3 = v23;
  if (*(unsigned char *)(*((void *)v8 + 10) + 13) == 2)
  {
    if ((*(unsigned char *)(*((void *)v8 + 17) + 28) & 0x20) == 0) {
      goto LABEL_21;
    }
    uint64_t v33 = 7632;
  }
  else
  {
    if ((*(unsigned char *)(*((void *)v8 + 17) + 28) & 0x20) == 0) {
      goto LABEL_21;
    }
    uint64_t v33 = 7616;
  }
  v34 = (void *)((char *)a1 + v33);
  unint64_t v35 = *((unsigned int *)v8 + 44);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)a1 + v33, (v35 >> 7) + 1);
  *(_DWORD *)(*v34 + ((v35 >> 10) & 0x3FFFFC)) |= 1 << (v35 >> 7);
LABEL_21:
  if (*((_DWORD *)v8 + 44) <= 0xFFFFFF7F)
  {
    uint64_t v36 = *((void *)a1 + 238);
    int v39 = *((_DWORD *)v8 + 44);
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v36 + 48))(v36, (uint64_t)v8 + 96, &v39);
  }
  uint64_t result = physx::Sc::Scene::addShapes((uint64_t)a1, (uint64_t)v10, *(unsigned __int16 *)(v9 + 8), *(void *)(a3 + 56), v8, (physx::Sc::ShapeSim **)(a3 + 16), a4);
  uint64_t v38 = *((void *)v18 + 22);
  if (v38 && *(unsigned char *)(v38 + 31) == 1) {
    ++*((_DWORD *)a1 + 1168);
  }
  else {
    ++*((_DWORD *)a1 + 1167);
  }
  return result;
}

void physx::Sc::Scene::finishBatchInsertion(physx::Cm::PreallocatingRegionManager **a1, unsigned __int8 **a2)
{
  uint64_t v4 = a2[1];
  if (v4) {
    physx::Cm::PreallocatingRegionManager::deallocateMemory(a1[540], v4);
  }
  if (*a2) {
    physx::Cm::PreallocatingRegionManager::deallocateMemory(a1[541], *a2);
  }
  unsigned int v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a1[539];
    physx::Cm::PreallocatingRegionManager::deallocateMemory(v6, v5);
  }
}

uint64_t physx::Sc::Scene::setDominanceGroupPair(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = (int *)(result + 4 * a2 + 4528);
  int v5 = 1 << a3;
  if (*a4) {
    int v6 = *v4 | v5;
  }
  else {
    int v6 = *v4 & ~v5;
  }
  int *v4 = v6;
  uint64_t v7 = (int *)(result + 4 * a3 + 4528);
  int v8 = 1 << a2;
  if (a4[1]) {
    int v9 = *v7 | v8;
  }
  else {
    int v9 = *v7 & ~v8;
  }
  *uint64_t v7 = v9;
  *(_DWORD *)(result + 4264) |= 2u;
  return result;
}

uint64_t physx::Sc::Scene::buildActiveActors(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = *(_DWORD *)(this + 40);
  if ((*(unsigned char *)(this + 4269) & 0x10) != 0)
  {
    uint64_t v4 = *(unsigned int *)(this + 48);
    v2 -= v4;
    uint64_t v3 = *(void *)(this + 32) + 8 * v4;
  }
  else
  {
    uint64_t v3 = *(void *)(this + 32);
  }
  *(_DWORD *)(this + 4184) = 0;
  if (v2)
  {
    uint64_t v5 = v2;
    do
    {
      if ((*(_WORD *)(**(void **)v3 + 124) & 1) == 0)
      {
        uint64_t v6 = *(void *)v3 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(void *)v3 + 13) + 10);
        uint64_t v8 = v6;
        uint64_t v7 = *(unsigned int *)(v1 + 4184);
        if ((*(_DWORD *)(v1 + 4188) & 0x7FFFFFFFu) <= v7)
        {
          this = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(v1 + 4176, &v8);
        }
        else
        {
          *(void *)(*(void *)(v1 + 4176) + 8 * v7) = v6;
          *(_DWORD *)(v1 + 4184) = v7 + 1;
        }
      }
      v3 += 8;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t physx::Sc::Scene::buildActiveAndFrozenActors(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = *(_DWORD *)(this + 40);
  if ((*(unsigned char *)(this + 4269) & 0x10) != 0)
  {
    uint64_t v4 = *(unsigned int *)(this + 48);
    v2 -= v4;
    uint64_t v3 = *(void *)(this + 32) + 8 * v4;
  }
  else
  {
    uint64_t v3 = *(void *)(this + 32);
  }
  *(_DWORD *)(this + 4184) = 0;
  *(_DWORD *)(this + 4200) = 0;
  if (v2)
  {
    for (uint64_t i = v2; i; --i)
    {
      uint64_t v6 = *(void *)v3 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(void *)v3 + 13) + 10);
      if (*(_WORD *)(**(void **)v3 + 124))
      {
        uint64_t v10 = *(void *)v3 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(void *)v3 + 13) + 10);
        uint64_t v8 = *(unsigned int *)(v1 + 4200);
        if ((*(_DWORD *)(v1 + 4204) & 0x7FFFFFFFu) <= v8)
        {
          uint64_t v9 = v1 + 4192;
          goto LABEL_13;
        }
        *(void *)(*(void *)(v1 + 4192) + 8 * v8) = v6;
        *(_DWORD *)(v1 + 4200) = v8 + 1;
      }
      else
      {
        uint64_t v10 = *(void *)v3 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(*(void *)v3 + 13) + 10);
        uint64_t v7 = *(unsigned int *)(v1 + 4184);
        if ((*(_DWORD *)(v1 + 4188) & 0x7FFFFFFFu) <= v7)
        {
          uint64_t v9 = v1 + 4176;
LABEL_13:
          this = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(v9, &v10);
          goto LABEL_14;
        }
        *(void *)(*(void *)(v1 + 4176) + 8 * v7) = v6;
        *(_DWORD *)(v1 + 4184) = v7 + 1;
      }
LABEL_14:
      v3 += 8;
    }
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::Sc::Scene::reserveTriggerReportBufferSpace(uint64_t a1, int a2, void *a3, void *a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 2136);
  int v8 = v7 + a2;
  float v9 = (float)(v7 + a2) * 1.5;
  unsigned int v10 = v9;
  if ((*(_DWORD *)(a1 + 2140) & 0x7FFFFFFFu) < v9) {
    physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate(a1 + 2128, v9);
  }
  *(_DWORD *)(a1 + 2136) = v8;
  *a3 = *(void *)(a1 + 2128) + 40 * v7;
  uint64_t result = *(void *)(a1 + 2144);
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < v10)
  {
    physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(result, v10);
    uint64_t result = *(void *)(a1 + 2144);
  }
  *(_DWORD *)(result + 8) = v8;
  *a4 = *(void *)result + 12 * v7;
  return result;
}

uint64_t physx::Sc::Scene::createClient(physx::Sc::Scene *this)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client>::getName() [T = physx::Sc::Client]";
  }
  else {
    uint64_t v3 = "<allocation names disabled>";
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 5287);
  uint64_t v8 = v4;
  uint64_t v5 = *((unsigned int *)this + 1042);
  if ((*((_DWORD *)this + 1043) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack((uint64_t)this + 4160, &v8);
    int v6 = *((_DWORD *)this + 1042);
  }
  else
  {
    *(void *)(*((void *)this + 520) + 8 * v5) = v4;
    int v6 = v5 + 1;
    *((_DWORD *)this + 1042) = v6;
  }
  return (v6 - 1);
}

int32x2_t *physx::Sc::Scene::onBodySleep(int32x2_t *this, int32x2_t *a2, int8x8_t a3)
{
  __int16 v4 = a2[22].i16[2];
  if (this[530])
  {
    if ((v4 & 0x80) != 0)
    {
      v4 &= ~0x80u;
      this[519].i8[0] = 0;
    }
    v4 |= 0x40u;
    a2[22].i16[2] = v4;
  }
  if ((v4 & 0x10) == 0)
  {
    int32x2_t v5 = a2[10];
    char v6 = 0;
    this = (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 505, &v5, &v6, a3);
    if (!v6) {
      *this = v5;
    }
    a2[22].i16[2] |= 0x10u;
  }
  return this;
}

int32x2_t *physx::Sc::Scene::onBodyWakeUp(int32x2_t *this, int32x2_t *a2, int8x8_t a3)
{
  if (this[530])
  {
    __int16 v4 = a2[22].i16[2];
    if ((v4 & 0x40) != 0)
    {
      v4 &= ~0x40u;
      this[519].i8[1] = 0;
    }
    a2[22].i16[2] = v4 | 0x80;
    if ((v4 & 0x20) == 0)
    {
      int32x2_t v5 = a2[10];
      char v6 = 0;
      this = (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 512, &v5, &v6, a3);
      if (!v6) {
        *this = v5;
      }
      a2[22].i16[2] |= 0x20u;
    }
  }
  return this;
}

double physx::Sc::Scene::createLLArticulation(physx::Sc::Scene *this, physx::Sc::ArticulationSim *a2)
{
  if (*(unsigned char *)(*((void *)a2 + 2) + 44))
  {
    uint64_t v3 = *((void *)this + 544);
    uint64_t v4 = *(void *)(v3 + 560);
    if (!v4)
    {
      physx::shdfnd::PoolBase<physx::Dy::FeatherstoneArticulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(v3);
      uint64_t v4 = *(void *)(v3 + 560);
    }
    *(void *)(v3 + 560) = *(void *)v4;
    ++*(_DWORD *)(v3 + 548);
    *(void *)(v4 + 24) = a2;
    *(void *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_WORD *)(v4 + 160) = 1;
    *(_DWORD *)(v4 + 164) = 0;
    *(void *)uint64_t v4 = &unk_26E724328;
    *(_OWORD *)(v4 + 576) = 0u;
    *(_OWORD *)(v4 + 592) = 0u;
    *(_OWORD *)(v4 + 544) = 0u;
    *(_OWORD *)(v4 + 560) = 0u;
    *(_OWORD *)(v4 + 512) = 0u;
    *(_OWORD *)(v4 + 528) = 0u;
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(void *)(v4 + 632) = 0;
    *(void *)(v4 + 624) = 0;
    *(void *)(v4 + 640) = 0;
    *(void *)(v4 + 648) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v4 + 656) = 0;
    *(unsigned char *)(v4 + 684) = 1;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 696) = 0u;
    *(_OWORD *)(v4 + 712) = 0u;
    *(_OWORD *)(v4 + 848) = 0u;
    *(unsigned char *)(v4 + 864) = 0;
    *(_OWORD *)(v4 + 872) = 0u;
    *(_DWORD *)(v4 + 888) = 0;
  }
  else
  {
    uint64_t v6 = *((void *)this + 543);
    uint64_t v7 = *(void *)(v6 + 560);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Dy::Articulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(v6);
      uint64_t v7 = *(void *)(v6 + 560);
    }
    *(void *)(v6 + 560) = *(void *)v7;
    ++*(_DWORD *)(v6 + 548);
    *(void *)(v7 + 24) = a2;
    *(void *)(v7 + 32) = 0;
    *(_DWORD *)(v7 + 40) = 1;
    *(void *)(v7 + 144) = 0;
    *(void *)(v7 + 152) = 0;
    *(_WORD *)(v7 + 160) = 1;
    *(_DWORD *)(v7 + 164) = 0;
    *(void *)uint64_t v7 = &unk_26E723FE0;
    double result = 0.0;
    *(_OWORD *)(v7 + 248) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 264) = 0u;
  }
  return result;
}

uint64_t physx::Sc::Scene::createAggregate(physx::Sc::Scene *this, uint64_t a2, int a3)
{
  uint64_t v6 = *((void *)this + 537);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    unsigned int v8 = v7 - 1;
    unsigned int v9 = *(_DWORD *)(*(void *)(v6 + 16) + 4 * v8);
    *(_DWORD *)(v6 + 24) = v8;
    unsigned int v10 = v9 + 1;
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v6 + 8);
    unsigned int v10 = v9 + 1;
    *(_DWORD *)(v6 + 8) = v9 + 1;
  }
  uint64_t v11 = *((void *)this + 258);
  unsigned int v12 = *(_DWORD *)(v11 + 20) & 0x7FFFFFFF;
  if (v10 >= v12)
  {
    unsigned int v13 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
    unsigned int v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    int v15 = v14 | HIWORD(v14);
    int v16 = v15 + 1;
    if (v12 < v15 + 1) {
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(*((void *)this + 258), v15 + 1);
    }
    *(_DWORD *)(v11 + 16) = v16;
  }
  uint64_t v17 = *((void *)this + 231);
  return physx::Bp::AABBManager::createAggregate(v17, v9, 0xFFFFFFFFLL, a2, a3);
}

void physx::Sc::Scene::deleteAggregate(physx::Sc::Scene *this, unsigned int a2)
{
  int v6 = 0;
  unsigned int v7 = 0;
  if (physx::Bp::AABBManager::destroyAggregate(*((void *)this + 231), &v7, &v6, a2))
  {
    uint64_t v3 = *((void *)this + 537);
    unint64_t v4 = v7;
    unsigned int v8 = v7;
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v3 + 32, v7 + 1);
    *(_DWORD *)(*(void *)(v3 + 32) + ((v4 >> 3) & 0x1FFFFFFC)) |= 1 << v4;
    uint64_t v5 = *(unsigned int *)(v3 + 56);
    if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 48, &v8);
    }
    else
    {
      *(_DWORD *)(*(void *)(v3 + 48) + 4 * v5) = v4;
      ++*(_DWORD *)(v3 + 56);
    }
  }
}

uint64_t physx::Sc::Scene::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  physx::PxsContext::shiftOrigin(*(void *)(a1 + 1840), (uint64_t)a2);
  physx::Bp::BoundsArray::shiftOrigin(*(void *)(a1 + 2064), a2);
  uint64_t v4 = *(void *)(a1 + 1848);
  uint64_t result = (*(uint64_t (**)(void, float32x2_t *, void, void))(**(void **)(v4 + 392) + 144))(*(void *)(v4 + 392), a2, *(void *)(*(void *)(v4 + 400) + 8), *(void *)(*(void *)(v4 + 280) + 8));
  *(unsigned char *)(v4 + 524) = 1;
  uint64_t v6 = *(unsigned int *)(a1 + 2052);
  if (v6)
  {
    unsigned int v7 = *(uint64_t **)(a1 + 2008);
    do
    {
      uint64_t v8 = *v7++;
      uint64_t result = (*(uint64_t (**)(void, float32x2_t *))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32), a2);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t physx::Bp::BoundsArray::shiftOrigin(uint64_t result, float32x2_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 16);
  if (v2)
  {
    uint64_t v3 = (float32x2_t *)(*(void *)(result + 8) + 12);
    do
    {
      *(float32x2_t *)((char *)v3 - 12) = vsub_f32(*(float32x2_t *)((char *)v3 - 12), *a2);
      v3[-1].f32[1] = v3[-1].f32[1] - a2[1].f32[0];
      *uint64_t v3 = vsub_f32(*v3, *a2);
      v3[1].f32[0] = v3[1].f32[0] - a2[1].f32[0];
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(int a1, unsigned int *a2, int a3, int *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = *a2;
  unsigned int v16 = a1 - v15;
  int v59 = *a4;
  uint64_t v66 = v15;
  uint64_t v17 = (uint64_t *)(a10 + 8 * v15);
  unsigned int v18 = *(_DWORD *)(a6 + 480);
  if (a1 - (int)v15 >= v18) {
    int v19 = a1 - v15 - v18;
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = v16 - v19;
  memcpy(v17, (const void *)(*(void *)(a6 + 472) + 8 * (v18 - v20)), 8 * v20);
  int v21 = *(_DWORD *)(a6 + 480) - (v16 - v19);
  *(_DWORD *)(a6 + 480) = v21;
  unsigned int v58 = v16;
  BOOL v22 = v16 >= v18;
  int v23 = v16 - v18;
  v61 = a2;
  if (v23 == 0 || !v22)
  {
LABEL_31:
    if (v20)
    {
      uint64_t v49 = *(void *)(a6 + 504);
      uint64_t v50 = v20;
      do
      {
        uint64_t v51 = *v17++;
        *(_DWORD *)(v49 + (((unint64_t)*(unsigned int *)(v51 + 88) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v51 + 88);
        --v50;
      }
      while (v50);
    }
    goto LABEL_34;
  }
  v68 = (unsigned int *)(a6 + 456);
  unsigned int v24 = *(_DWORD *)(a6 + 456);
  unsigned int v25 = v19 - 1 + v24;
  if (__CFADD__(v19 - 1, v24))
  {
    int v26 = v20;
LABEL_30:
    *(_DWORD *)(a6 + 480) = v21;
    unsigned int v20 = v26;
    goto LABEL_31;
  }
  int v27 = 0;
  unsigned int v28 = v25 / v24;
  if (v28 <= 1) {
    unsigned int v28 = 1;
  }
  unsigned int v67 = v28;
  while (1)
  {
    uint64_t v29 = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)v68, 120 * *v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 135);
    if (!v29) {
      break;
    }
    uint64_t v30 = v29;
    int v31 = *(_DWORD *)(a6 + 460);
    int v32 = v31 + 1;
    int v33 = *(_DWORD *)(a6 + 456);
    unsigned int v69 = v20;
    if (v33 * (v31 + 1) <= (32 * *(_DWORD *)(a6 + 512)))
    {
      uint64_t v36 = *(void **)(a6 + 488);
    }
    else
    {
      unsigned int v34 = 2 * v32;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a6 + 504, 2 * v32 * v33);
      if (*(void *)(a6 + 472)) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
      *(void *)(a6 + 472) = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)v68, 8 * *(_DWORD *)(a6 + 456) * v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 147);
      unint64_t v35 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)v68, 8 * v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 149);
      uint64_t v36 = v35;
      unsigned int v37 = *(const void **)(a6 + 488);
      if (v37)
      {
        memcpy(v35, v37, (8 * *(_DWORD *)(a6 + 460)));
        if (*(void *)(a6 + 488)) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
      }
      *(void *)(a6 + 488) = v36;
      int v31 = *(_DWORD *)(a6 + 460);
      int v33 = *(_DWORD *)(a6 + 456);
      int v32 = v31 + 1;
    }
    *(_DWORD *)(a6 + 460) = v32;
    v36[v31] = v30;
    int v38 = v33 - 1;
    if (v33 - 1 >= v23)
    {
      int v40 = v33 + v33 * v31 - 1;
      unsigned int v41 = v21;
      unsigned int v39 = v69;
      do
      {
        uint64_t v42 = v30 + 120 * v38;
        *(_DWORD *)(v42 + 16) = 0;
        *(_DWORD *)(v42 + 88) = v40;
        *(_DWORD *)(v42 + 92) = 0;
        *(void *)(v42 + 32) = 0;
        *(void *)(v42 + 40) = 0;
        *(_WORD *)(v42 + 84) = 257;
        *(void *)(v42 + 72) = 0;
        *(unsigned char *)(v42 + 82) = 0;
        int v21 = v41 + 1;
        *(void *)(*(void *)(a6 + 472) + 8 * v41) = v42;
        --v38;
        --v40;
        ++v41;
      }
      while (v38 >= v23);
    }
    else
    {
      unsigned int v39 = v69;
    }
    int v26 = v39;
    if ((v38 & 0x80000000) == 0)
    {
      int v43 = v31 * v33;
      uint64_t v44 = 120 * v38;
      int v45 = (uint64_t *)(a10 + 8 * v66 + 8 * v39 + 8 * v38);
      int v46 = v38 + v43;
      uint64_t v47 = -120;
      do
      {
        uint64_t v48 = v30 + v44;
        *(_DWORD *)(v48 + 16) = 0;
        *(_DWORD *)(v48 + 88) = v46;
        *(_DWORD *)(v48 + 92) = 0;
        *(void *)(v48 + 32) = 0;
        *(void *)(v48 + 40) = 0;
        *(_WORD *)(v48 + 84) = 257;
        *(void *)(v48 + 72) = 0;
        v47 += 120;
        v30 -= 120;
        --v46;
        *(unsigned char *)(v48 + 82) = 0;
        *v45-- = v48;
      }
      while (v44 != v47);
      int v26 = v39 + v38 + 1;
    }
    int v23 = v23 + v39 - v26;
    ++v27;
    unsigned int v20 = v26;
    if (v27 == v67) {
      goto LABEL_30;
    }
  }
LABEL_34:
  if (v66 != a1)
  {
    int v52 = 0;
    do
    {
      v53 = *(void **)(a7 + 1856);
      if (!v53)
      {
        physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(a7 + 1296);
        v53 = *(void **)(a7 + 1856);
      }
      *(void *)(a7 + 1856) = *v53;
      ++*(_DWORD *)(a7 + 1844);
      *(void *)(a11 + 8 * (v52 + *v61)) = v53;
      ++v52;
    }
    while (v58 != v52);
  }
  if (a3 != v59)
  {
    int v54 = 0;
    do
    {
      v55 = *(void **)(a7 + 3560);
      if (!v55)
      {
        physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab(a7 + 3000);
        v55 = *(void **)(a7 + 3560);
      }
      *(void *)(a7 + 3560) = *v55;
      ++*(_DWORD *)(a7 + 3548);
      *(void *)(a12 + 8 * (v54 + *a4)) = v55;
      ++v54;
    }
    while (a3 - v59 != v54);
  }
  _DWORD *v61 = a1;
  *a4 = a3;
  *(_DWORD *)(a8 + 88) = a5;
  *(_DWORD *)(a8 + 32) = 1;
  *(void *)(a8 + 24) = a9;
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 32))(a9);
    *(void *)(a8 + 16) = *(void *)(*(void *)(a8 + 24) + 16);
  }
  v56 = *(uint64_t (**)(uint64_t))(*(void *)a8 + 40);
  return v56(a8);
}

uint64_t physx::Sc::activateInteraction(physx::Sc *this, physx::Sc::Interaction *a2, void *a3, int8x8_t a4)
{
  uint64_t result = 0;
  switch(*((unsigned char *)this + 28))
  {
    case 0:
      uint64_t result = physx::Sc::ShapeInteraction::onActivate_((physx::Sc *)((char *)this - 8), (uint64_t)a2);
      break;
    case 1:
      if ((*((_WORD *)this + 34) & 0x20) != 0) {
        goto LABEL_13;
      }
      uint64_t result = isOneActorActive((physx::Sc *)((char *)this - 8));
      if (result) {
        goto LABEL_13;
      }
      break;
    case 4:
      uint64_t result = physx::Sc::ConstraintInteraction::onActivate_(this, a2, a4);
      break;
    case 5:
      if (*(_DWORD *)(*(void *)this + 184) > 0xFFFFFFFD || *(_DWORD *)(*((void *)this + 1) + 184) > 0xFFFFFFFD)
      {
        uint64_t result = 0;
      }
      else
      {
LABEL_13:
        *((unsigned char *)this + 29) |= 0x20u;
        uint64_t result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Sc::deactivateInteraction(physx::Sc *this, physx::Sc::Interaction *a2)
{
  uint64_t result = 0;
  switch(*((unsigned char *)this + 28))
  {
    case 0:
      uint64_t result = physx::Sc::ShapeInteraction::onDeactivate_((physx::Sc *)((char *)this - 8));
      break;
    case 1:
      if ((*((_WORD *)this + 34) & 0x20) == 0 && !isOneActorActive((physx::Sc *)((char *)this - 8))) {
        goto LABEL_8;
      }
      uint64_t result = 0;
      break;
    case 2:
      goto LABEL_9;
    case 4:
      uint64_t result = physx::Sc::ConstraintInteraction::onDeactivate_(this);
      break;
    case 5:
LABEL_8:
      *((unsigned char *)this + 29) &= ~0x20u;
LABEL_9:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t physx::shdfnd::AlignedAllocator<16u,physx::shdfnd::NonTrackingAllocator>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 + 23;
  if (!v4) {
    return 0;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", a3, a4);
  if (result)
  {
    unint64_t v6 = result;
    unint64_t result = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(result - 8) = result - v6;
  }
  return result;
}

physx::Cm::FlushPool *physx::Cm::FlushPool::FlushPool(physx::Cm::FlushPool *this, unsigned int a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  unint64_t v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 72, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)this = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2;
  if (!a2)
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmFlushPool.h", 57);
  uint64_t v8 = *((unsigned int *)this + 4);
  unsigned int v9 = *((_DWORD *)this + 5) & 0x7FFFFFFF;
  uint64_t v11 = v7;
  if (v9 <= v8)
  {
LABEL_8:
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)this + 8, &v11);
    return this;
  }
  *(void *)(*((void *)this + 1) + 8 * v8) = v7;
  *((_DWORD *)this + 4) = v8 + 1;
  return this;
}

unint64_t physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 + 71;
  if (!v4) {
    return 0;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", a3, a4);
  if (result)
  {
    unint64_t v6 = result;
    unint64_t result = (result + 71) & 0xFFFFFFFFFFFFFFC0;
    *(void *)(result - 8) = result - v6;
  }
  return result;
}

uint64_t ScSimulationControllerCallback::updateScBodyAndShapeSim(uint64_t this, physx::PxBaseTask *a2)
{
  uint64_t v2 = *(void **)(this + 8);
  uint64_t v3 = v2[235];
  uint64_t v4 = *(unsigned int *)(v3 + 384);
  if (v4)
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = v2[230];
    uint64_t v11 = *(pthread_mutex_t ***)(v10 + 1920);
    uint64_t v21 = *(void *)(v10 + 2592);
    uint64_t v22 = v2[236];
    uint64_t v12 = *(void *)(v3 + 376);
    do
    {
      if (v9 >= 0x100)
      {
        uint64_t v13 = physx::Cm::FlushPool::allocate(v11, 88, 0x10u);
        uint64_t v14 = *(void *)(v6 + 8);
        *(void *)(v13 + 8) = *(void *)(v14 + 24);
        *(void *)(v13 + 16) = 0;
        *(_DWORD *)(v13 + 32) = 0;
        uint64_t v15 = (uint64_t (**)(uint64_t))&unk_26E725990;
        *(void *)uint64_t v13 = &unk_26E725990;
        *(void *)(v13 + 40) = v12 + 4 * v8;
        *(_DWORD *)(v13 + 48) = v7 - v8;
        *(void *)(v13 + 56) = v10;
        *(void *)(v13 + 64) = v22;
        *(void *)(v13 + 72) = v21;
        *(void *)(v13 + 80) = v14;
        *(_DWORD *)(v13 + 32) = 1;
        *(void *)(v13 + 24) = a2;
        if (a2)
        {
          (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
          *(void *)(v13 + 16) = *(void *)(*(void *)(v13 + 24) + 16);
          uint64_t v15 = *(uint64_t (***)(uint64_t))v13;
        }
        this = v15[5](v13);
        unsigned int v9 = 0;
        unsigned int v8 = v7;
      }
      unsigned int v16 = *(_DWORD *)(*(void *)(*(void *)(v3 + 248)
                                  + (((unint64_t)*(unsigned int *)(v12 + 4 * v7) >> 2) & 0x3FFFFFE0)
                                  + 24)
                      - 32);
      if (v16 <= 1) {
        unsigned int v16 = 1;
      }
      v9 += v16;
      ++v7;
    }
    while (v4 != v7);
    if (v9)
    {
      uint64_t v17 = physx::Cm::FlushPool::allocate(v11, 88, 0x10u);
      uint64_t v18 = *(void *)(v6 + 8);
      *(void *)(v17 + 8) = *(void *)(v18 + 24);
      *(void *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 32) = 0;
      int v19 = &unk_26E725990;
      *(void *)uint64_t v17 = &unk_26E725990;
      *(void *)(v17 + 40) = v12 + 4 * v8;
      *(_DWORD *)(v17 + 48) = v4 - v8;
      *(void *)(v17 + 56) = v10;
      *(void *)(v17 + 64) = v22;
      *(void *)(v17 + 72) = v21;
      *(void *)(v17 + 80) = v18;
      *(_DWORD *)(v17 + 32) = 1;
      *(void *)(v17 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
        *(void *)(v17 + 16) = *(void *)(*(void *)(v17 + 24) + 16);
        int v19 = *(void **)v17;
      }
      unsigned int v20 = (uint64_t (*)(uint64_t))v19[5];
      return v20(v17);
    }
  }
  return this;
}

uint64_t ScSimulationControllerCallback::getNbCcdBodies(ScSimulationControllerCallback *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 2104);
}

void ScSimulationControllerCallback::~ScSimulationControllerCallback(ScSimulationControllerCallback *this)
{
}

void ScAfterIntegrationTask::~ScAfterIntegrationTask(ScAfterIntegrationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScAfterIntegrationTask::getName(ScAfterIntegrationTask *this)
{
  return "ScScene.afterIntegrationTask";
}

void ScAfterIntegrationTask::runInternal(ScAfterIntegrationTask *this)
{
  MEMORY[0x270FA5388](this);
  uint64_t v7 = v6;
  uint64_t v69 = *MEMORY[0x263EF8340];
  memset(v68, 0, 512);
  memset(v67, 0, 512);
  memset(v66, 0, 512);
  memset(v65, 0, 512);
  uint64_t v8 = *(void *)(v6 + 80);
  uint64_t v9 = *(void *)(v8 + 1880);
  uint64_t v10 = *(void *)(v8 + 2064);
  memset(v64, 0, 512);
  memset(v63, 0, 512);
  if (!*(_DWORD *)(v6 + 48))
  {
    LODWORD(v12) = 0;
    unsigned int v13 = 0;
    unsigned int v31 = 0;
    int v14 = 0;
    LODWORD(v15) = 0;
    unsigned int v30 = 0;
    char v29 = 1;
    goto LABEL_28;
  }
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  unsigned int v56 = 0;
  unsigned int v58 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  LOBYTE(v55) = v9;
  do
  {
    uint64_t v16 = *(void *)(*(void *)(v9 + 248)
                    + (((unint64_t)*(unsigned int *)(*(void *)(v7 + 40) + 4 * v11) >> 2) & 0x3FFFFFE0)
                    + 24);
    uint64_t v17 = v16 - 96;
    uint64_t v18 = *(void *)(v16 - 16);
    *(_DWORD *)(v18 + 156) = *(_DWORD *)(v18 + 160);
    __int16 v19 = *(_WORD *)(v16 + 28);
    if (v19)
    {
      if ((v19 & 2) != 0)
      {
        unsigned int v25 = v56;
        int v26 = v64;
        ++v56;
        goto LABEL_14;
      }
      uint64_t v20 = v12;
      if ((v19 & 4) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v20 = (v12 + 1);
      *((void *)v68 + v12) = v17;
      uint64_t v21 = *(void **)(v16 - 40);
      if (v21)
      {
        unsigned int v60 = v13;
        int v61 = v14;
        uint64_t v22 = v15;
        uint64_t v23 = v7;
        uint64_t v24 = *(void *)(v7 + 72);
        do
        {
          physx::Sc::ShapeSim::updateCached((uint64_t)v21, v24, v10, v1, v2, v3, v4, v5, v55);
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
        __int16 v19 = *(_WORD *)(v16 + 28);
        uint64_t v7 = v23;
        uint64_t v15 = v22;
        unsigned int v13 = v60;
        int v14 = v61;
        uint64_t v9 = v55;
      }
      if ((v19 & 4) == 0)
      {
LABEL_9:
        uint64_t v12 = v20;
        goto LABEL_15;
      }
    }
    unsigned int v25 = v14++;
    int v26 = v63;
    uint64_t v12 = v20;
LABEL_14:
    *((void *)v26 + v25) = v17;
LABEL_15:
    if ((*(unsigned char *)(v18 + 44) & 4) != 0) {
      *((void *)v67 + v13++) = v17;
    }
    if ((v19 & 8) != 0)
    {
      unsigned int v27 = v15;
      uint64_t v15 = (v15 + 1);
      unsigned int v28 = v66;
    }
    else
    {
      if ((v19 & 0x10) == 0) {
        goto LABEL_22;
      }
      unsigned int v27 = v58;
      unsigned int v28 = v65;
      ++v58;
    }
    *((void *)v28 + v27) = v17;
LABEL_22:
    *(_WORD *)(v16 + 28) = v19 & 1;
    ++v11;
  }
  while (v11 < *(unsigned int *)(v7 + 48));
  char v29 = 1;
  if (v12)
  {
    *(unsigned char *)(*(void *)(v7 + 72) + 28) = 1;
    *(unsigned char *)(v10 + 24) = 1;
    char v29 = 0;
  }
  unsigned int v31 = v56;
  unsigned int v30 = v58;
  if (v12)
  {
LABEL_32:
    unsigned int v62 = v14;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(v7 + 56) + 1760));
    }
    uint64_t v59 = v7;
    uint64_t v32 = *(void *)(v7 + 80);
    int v33 = (void *)(*(void *)(v32 + 1848) + 224);
    if ((v29 & 1) == 0)
    {
      int v57 = v15;
      unsigned int v34 = v30;
      uint64_t v35 = 0;
      do
      {
        for (uint64_t i = *(uint64_t ***)(*((void *)v68 + v35) + 56); i; uint64_t i = (uint64_t **)*i)
        {
          if ((i[7][8] & 5) != 0)
          {
            unint64_t v37 = *((unsigned int *)i + 4);
            physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v33, (v37 & 0x7FFFFFFF) + 1);
            *(_DWORD *)(*v33 + ((v37 >> 3) & 0xFFFFFFC)) |= 1 << v37;
          }
        }
        ++v35;
      }
      while (v35 != v12);
      uint64_t v32 = *(void *)(v7 + 80);
      unsigned int v30 = v34;
      LODWORD(v15) = v57;
    }
    if (v13)
    {
      uint64_t v38 = v13;
      unsigned int v39 = v67;
      do
      {
        uint64_t v40 = *(unsigned int *)(v32 + 2104);
        if ((*(_DWORD *)(v32 + 2108) & 0x7FFFFFFFu) <= v40)
        {
          physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v32 + 2096, v39);
        }
        else
        {
          *(void *)(*(void *)(v32 + 2096) + 8 * v40) = *v39;
          *(_DWORD *)(v32 + 2104) = v40 + 1;
        }
        ++v39;
        --v38;
      }
      while (v38);
    }
    if (v31)
    {
      uint64_t v41 = v31;
      uint64_t v42 = (uint64_t *)v64;
      do
      {
        uint64_t v43 = *v42++;
        physx::Sc::BodySim::freezeTransforms(v43, v33);
        --v41;
      }
      while (v41);
    }
    if (v62)
    {
      uint64_t v44 = v62;
      int v45 = (uint64_t *)v63;
      do
      {
        uint64_t v46 = *v45++;
        physx::Sc::BodySim::createSqBounds(v46);
        --v44;
      }
      while (v44);
    }
    if (v15)
    {
      uint64_t v47 = v15;
      uint64_t v48 = (uint64_t *)v66;
      do
      {
        uint64_t v49 = *v48++;
        uint64_t v50 = *(void *)(*(void *)(v49 + 72) + 1880);
        unsigned int v51 = *(_DWORD *)(v49 + 176);
        physx::IG::IslandSim::activateNode(v50 + 224, v51);
        physx::IG::IslandSim::activateNode(v50 + 864, v51);
        --v47;
      }
      while (v47);
    }
    if (v30)
    {
      uint64_t v52 = v30;
      v53 = (uint64_t *)v65;
      do
      {
        uint64_t v54 = *v53++;
        physx::Sc::BodySim::notifyReadyForSleeping(v54);
        --v52;
      }
      while (v52);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(v59 + 56) + 1760));
    }
    return;
  }
LABEL_28:
  if (v31 || v13 || v15 || v30) {
    goto LABEL_32;
  }
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unsigned int v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    unint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  unint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unsigned int v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    unint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  unint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unsigned int v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    unint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::getName() [T = physx::Sc::ConstraintSim]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  unint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          unint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unsigned int v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    unint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  unint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

void physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(uint64_t a1, int a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  char v38 = 0;
  char v37 = v39;
  uint64_t v34 = 0x2000000000;
  uint64_t v35 = v39;
  char v36 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return;
  }
  int v4 = 0;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = v39;
  memset(v39, 0, sizeof(v39));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)(a1 + 8 * (v7 >> 1));
      unint64_t v10 = *(void *)(a1 + 8 * v4);
      if (v9 < v10)
      {
        *(void *)(a1 + 8 * v4) = v9;
        *(void *)(a1 + 8 * v8) = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)(a1 + 8 * v4);
      }
      unint64_t v11 = *(void *)(a1 + 8 * v2);
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8 * v2);
      }
      else
      {
        *(void *)(a1 + 8 * v4) = v11;
        *(void *)(a1 + 8 * v2) = v10;
        unint64_t v9 = *(void *)(a1 + 8 * v8);
      }
      if (v10 < v9)
      {
        *(void *)(a1 + 8 * v8) = v10;
        *(void *)(a1 + 8 * v2) = v9;
        unint64_t v9 = *(void *)(a1 + 8 * v8);
      }
      uint64_t v12 = v2 - 1;
      *(void *)(a1 + 8 * v8) = *(void *)(a1 + 8 * v12);
      *(void *)(a1 + 8 * v12) = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = (unint64_t *)(a1 + 8 * v13);
        do
        {
          unint64_t v17 = v15[1];
          ++v15;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = (unint64_t *)(a1 + 8 * v14);
        do
        {
          unint64_t v20 = *--v18;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *uint64_t v15 = v19;
        *uint64_t v18 = v16;
        unint64_t v9 = *(void *)(a1 + 8 * v12);
      }
      *uint64_t v15 = v9;
      *(void *)(a1 + 8 * v12) = v16;
      unsigned int v21 = v34;
      unsigned int v22 = HIDWORD(v34) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v34 >= v22)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow((uint64_t)v33);
          unsigned int v21 = v34;
          uint64_t v6 = v35;
        }
        LODWORD(v34) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v34;
        LODWORD(v34) = v34 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v34 >= v22)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow((uint64_t)v33);
          unsigned int v21 = v34;
          uint64_t v6 = v35;
        }
        LODWORD(v34) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v34;
        LODWORD(v34) = v34 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = v5 + 8 * v4;
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)(v27 + 8 * v28) < *(void *)(a1 + 8 * v30)) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)(a1 + 8 * v30);
        *(void *)(a1 + 8 * v30) = *(void *)(a1 + 8 * v29);
        *(void *)(a1 + 8 * v29) = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v34;
    if (!v34) {
      break;
    }
    LODWORD(v34) = v34 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v34) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v36)
  {
    if (v6)
    {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)v6 - *((void *)v6 - 1));
      if (v38) {
        physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v37, v37);
      }
    }
  }
}

unint64_t physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack(unint64_t result, void *a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    unint64_t result = physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    unint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v3 - *(void *)(*(void *)v3 - 8));
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)unint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  unint64_t v3 = (void *)physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  unint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5) {
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance
    }
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, v5 - *(void *)(v5 - 8));
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 52);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x20 && *(unsigned char *)(a1 + 32) == 0)
    {
      *(unsigned char *)(a1 + 32) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 48);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 40);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 52) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 32) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 48);
    }
  }
  *(void *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9 + 1;
  *(_DWORD *)(a1 + 52) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::getName() [T = physx::PxBaseTask *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void SpeculativeCCDContactDistanceUpdateTask::~SpeculativeCCDContactDistanceUpdateTask(SpeculativeCCDContactDistanceUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *SpeculativeCCDContactDistanceUpdateTask::getName(SpeculativeCCDContactDistanceUpdateTask *this)
{
  return "SpeculativeCCDContactDistanceUpdateTask";
}

void SpeculativeCCDContactDistanceUpdateTask::runInternal(SpeculativeCCDContactDistanceUpdateTask *this)
{
  if (*((_DWORD *)this + 270))
  {
    unint64_t v2 = 0;
    unint64_t v3 = (char *)this + 56;
    do
      physx::Sc::BodySim::updateContactDistance(*(void *)&v3[8 * v2++], *((void *)this + 5), *((void *)this + 136), *((float *)this + 12));
    while (v2 < *((unsigned int *)this + 270));
  }
}

void SpeculativeCCDContactDistanceArticulationUpdateTask::~SpeculativeCCDContactDistanceArticulationUpdateTask(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *SpeculativeCCDContactDistanceArticulationUpdateTask::getName(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  return "SpeculativeCCDContactDistanceArticulationUpdateTask";
}

void SpeculativeCCDContactDistanceArticulationUpdateTask::runInternal(SpeculativeCCDContactDistanceArticulationUpdateTask *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (*(_DWORD *)(v1 + 48))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 5);
    float v4 = *((float *)this + 12);
    uint64_t v5 = *((void *)this + 8);
    do
      physx::Sc::BodySim::updateContactDistance(*(void *)(*(void *)(v1 + 40) + 8 * v2++), v3, v5, v4);
    while (v2 < *(unsigned int *)(v1 + 48));
  }
}

void DirtyShapeUpdatesTask::~DirtyShapeUpdatesTask(DirtyShapeUpdatesTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *DirtyShapeUpdatesTask::getName(DirtyShapeUpdatesTask *this)
{
  return "DirtyShapeUpdatesTask";
}

void DirtyShapeUpdatesTask::runInternal(DirtyShapeUpdatesTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 526))
  {
    unint64_t v9 = 0;
    unint64_t v10 = (char *)this + 56;
    do
      physx::Sc::ShapeSim::updateCached(*(void *)&v10[8 * v9++], *((void *)this + 5), *((void *)this + 6), a4, a5, a6, a7, a8, v11);
    while (v9 < *((unsigned int *)this + 526));
  }
}

void UpdateCCDBoundsTask::~UpdateCCDBoundsTask(UpdateCCDBoundsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *UpdateCCDBoundsTask::getName(UpdateCCDBoundsTask *this)
{
  return "UpdateCCDBoundsTask";
}

uint64_t UpdateCCDBoundsTask::runInternal(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  uint64_t v16 = this;
  unint64_t v17 = *(unsigned int *)(this + 48);
  if (v17)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(*(void *)(v16 + 40) + 8 * v18);
      unsigned int v21 = *(physx::Sc::ShapeSim **)(v20 + 56);
      if (v21)
      {
        int v22 = 0;
        do
        {
          if ((*(unsigned char *)(*((void *)v21 + 7) + 64) & 5) != 0)
          {
            this = physx::Sc::ShapeSim::updateSweptBounds(v21, a9, a10, a11, a12, a13, a14, a15, a16, a2, a3, a4, a5, a6, a7, a8);
            v19 += this;
            v22 |= this;
          }
          unsigned int v21 = *(physx::Sc::ShapeSim **)v21;
        }
        while (v21);
        unint64_t v17 = *(unsigned int *)(v16 + 48);
      }
      else
      {
        int v22 = 0;
      }
      *(unsigned char *)(*(void *)(v20 + 136) + 156) = v22 != 0;
      ++v18;
    }
    while (v18 < v17);
  }
  else
  {
    unsigned int v19 = 0;
  }
  atomic_fetch_add(*(atomic_uint *volatile *)(v16 + 56), v19);
  return this;
}

void ScKinematicPoseUpdateTask::~ScKinematicPoseUpdateTask(ScKinematicPoseUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScKinematicPoseUpdateTask::getName(ScKinematicPoseUpdateTask *this)
{
  return "ScScene.ScKinematicPoseUpdateTask";
}

void ScKinematicPoseUpdateTask::runInternal(ScKinematicPoseUpdateTask *this)
{
  LODWORD(v1) = *((_DWORD *)this + 12);
  if (v1)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)this + 5);
      if ((int)v3 + 16 < v1)
      {
        _X10 = *(void *)(v4 + 8 * (v3 + 16));
        __asm { PRFM            #0, [X10] }
        if ((int)v3 + 4 < v1)
        {
          char v11 = *(uint64_t **)(v4 + 8 * (v3 + 4));
          _X10 = *v11;
          __asm { PRFM            #0, [X10] }
          _X8 = v11[22];
          __asm { PRFM            #0, [X8] }
        }
      }
      physx::Sc::BodySim::updateKinematicPose(**(physx::Sc::BodySim ***)(v4 + 8 * v3++));
      unint64_t v1 = *((unsigned int *)this + 12);
    }
    while (v3 < v1);
  }
}

void ScKinematicShapeUpdateTask::~ScKinematicShapeUpdateTask(ScKinematicShapeUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScKinematicShapeUpdateTask::getName(ScKinematicShapeUpdateTask *this)
{
  return "ScScene.KinematicShapeUpdateTask";
}

void ScKinematicShapeUpdateTask::runInternal(ScKinematicShapeUpdateTask *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned int *)this + 12);
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      char v11 = *(void **)(**(void **)(*((void *)this + 5) + 8 * i) + 56);
      if (v11)
      {
        uint64_t v12 = *((void *)this + 7);
        uint64_t v13 = *((void *)this + 8);
        do
        {
          physx::Sc::ShapeSim::updateCached((uint64_t)v11, v12, v13, a4, a5, a6, a7, a8, v14);
          char v11 = (void *)*v11;
        }
        while (v11);
        unint64_t v8 = *((unsigned int *)this + 12);
      }
    }
  }
}

void ConstraintProjectionTask::~ConstraintProjectionTask(ConstraintProjectionTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ConstraintProjectionTask::getName(ConstraintProjectionTask *this)
{
  return "ScScene.constraintProjectionWork";
}

uint64_t ConstraintProjectionTask::runInternal(ConstraintProjectionTask *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      uint64_t v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v6;
    }
    else
    {
      uint64_t v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(void *)(v2 + 448));
  }
  *(_DWORD *)(v3 + 7160) = 0;
  if (*((_DWORD *)this + 12))
  {
    unint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 5);
    do
    {
      unint64_t v9 = *(void **)(*(void *)(v8 + 8 * v7) + 40);
      do
      {
        physx::Sc::ConstraintProjectionTree::projectPoseForTree(v9, v3 + 7152);
        unint64_t v9 = (void *)v9[6];
      }
      while (v9);
      uint64_t v8 = *((void *)this + 5);
      *(unsigned char *)(*(void *)(v8 + 8 * v7++) + 88) &= ~2u;
    }
    while (v7 < *((unsigned int *)this + 12));
    if (*(_DWORD *)(v3 + 7160))
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled
        || (pthread_mutex_lock(*(pthread_mutex_t **)(*((void *)this + 8) + 1760)), *(_DWORD *)(v3 + 7160)))
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = *((void *)this + 7);
          uint64_t v13 = *(void *)(v3 + 7152);
          uint64_t v14 = *(unsigned int *)(v12 + 8);
          if ((*(_DWORD *)(v12 + 12) & 0x7FFFFFFFu) <= v14)
          {
            physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v12, (void *)(v13 + v10));
          }
          else
          {
            *(void *)(*(void *)v12 + 8 * v14) = *(void *)(v13 + 8 * v11);
            *(_DWORD *)(v12 + 8) = v14 + 1;
          }
          ++v11;
          v10 += 8;
        }
        while (v11 < *(unsigned int *)(v3 + 7160));
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_unlock(*(pthread_mutex_t **)(*((void *)this + 8) + 1760));
      }
    }
  }
  uint64_t v15 = *(void *)(*((void *)this + 8) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 8));
  *(void *)uint64_t v3 = *(void *)v15;
  *(void *)uint64_t v15 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v15 + 8));
}

uint64_t physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(uint64_t result, int a2)
{
  int v3 = a2;
  if (*(_DWORD *)result - 1 == a2)
  {
    *(_DWORD *)unint64_t result = a2;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(result + 16);
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) <= v2)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result + 8, &v3);
    }
    else
    {
      *(_DWORD *)(*(void *)(result + 8) + 4 * v2) = a2;
      ++*(_DWORD *)(result + 16);
    }
  }
  return result;
}

uint64_t physx::Cm::FlushPool::clearNotThreadSafe(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = *(_DWORD *)(this + 24) + 2;
  unsigned int v3 = *(_DWORD *)(this + 16);
  while (v3 > v2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 8) + 8 * --v3);
    *(_DWORD *)(v1 + 16) = v3;
    if (v4)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      unsigned int v3 = *(_DWORD *)(v1 + 16);
    }
  }
  *(void *)(v1 + 24) = 0;
  return this;
}

void ScKinematicUpdateTask::~ScKinematicUpdateTask(ScKinematicUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScKinematicUpdateTask::getName(ScKinematicUpdateTask *this)
{
  return "ScScene.KinematicUpdateTask";
}

void ScKinematicUpdateTask::runInternal(ScKinematicUpdateTask *this)
{
  int v1 = *((_DWORD *)this + 12);
  if (v1)
  {
    float v2 = *((float *)this + 13);
    unsigned int v3 = (physx::Sc::BodySim ***)*((void *)this + 5);
    do
    {
      --v1;
      uint64_t v4 = *v3++;
      physx::Sc::BodySim::calculateKinematicVelocity(*v4, v2);
    }
    while (v1);
  }
}

void ScKinematicAddDynamicTask::~ScKinematicAddDynamicTask(ScKinematicAddDynamicTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScKinematicAddDynamicTask::getName(ScKinematicAddDynamicTask *this)
{
  return "ScScene.KinematicAddDynamicTask";
}

uint64_t ScKinematicAddDynamicTask::runInternal(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 48);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = *(uint64_t **)(this + 40);
    do
    {
      --v1;
      uint64_t v4 = *v3++;
      uint64_t v5 = *(void *)(v2 + 56);
      int v6 = *(_DWORD *)(*(void *)v4 + 176);
      this = (*(uint64_t (**)(uint64_t, void, int *))(*(void *)v5 + 88))(v5, 0, &v6);
    }
    while (v1);
  }
  return this;
}

void ScBeforeSolverTask::~ScBeforeSolverTask(ScBeforeSolverTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScBeforeSolverTask::getName(ScBeforeSolverTask *this)
{
  return "ScScene.beforeSolver";
}

uint64_t ScBeforeSolverTask::runInternal(uint64_t this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(this + 1072);
  int v8 = 0;
  int v2 = *(_DWORD *)(this + 1060);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = (unsigned int *)(this + 36);
    memset(v10, 0, 512);
    do
    {
      unsigned int v5 = *v4++;
      unint64_t v6 = (unint64_t)v5 >> 7;
      if (*(_DWORD *)(*(void *)(v1 + 264) + 4 * v6) != 0x1FFFFFF)
      {
        uint64_t v7 = *(void *)(v1 + 248) + 32 * v6;
        if (!*(unsigned char *)(v7 + 5)) {
          this = physx::Sc::BodySim::updateForces(*(void *)(v7 + 24) - 96, (uint64_t)v10, (uint64_t)v9, &v8, 0, 0, *(unsigned __int8 *)(v3 + 1088), *(float *)(v3 + 1064));
        }
      }
      --v2;
    }
    while (v2);
    if (v8) {
      return (*(uint64_t (**)(void, unsigned char *, unsigned char *))(**(void **)(v3 + 1080) + 104))(*(void *)(v3 + 1080), v10, v9);
    }
  }
  return this;
}

void ScArticBeforeSolverTask::~ScArticBeforeSolverTask(ScArticBeforeSolverTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *ScArticBeforeSolverTask::getName(ScArticBeforeSolverTask *this)
{
  return "ScScene.ScArticBeforeSolverTask";
}

void ScArticBeforeSolverTask::runInternal(ScArticBeforeSolverTask *this)
{
  if (*((_DWORD *)this + 12))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 7);
    do
    {
      uint64_t v4 = *(unsigned int **)(*(void *)(*(void *)(v3 + 248)
                                        + (((unint64_t)*(unsigned int *)(*((void *)this + 5) + 4 * v2) >> 2) & 0x3FFFFFE0)
                                        + 24)
                            + 24);
      physx::Sc::ArticulationSim::checkResize(v4);
      physx::Sc::ArticulationSim::updateForces(v4, *((float *)this + 13), *((unsigned __int8 *)this + 64));
      physx::Sc::ArticulationSim::saveLastCCDTransform((physx::Sc::ArticulationSim *)v4);
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
}

void UpdatProjectedPoseTask::~UpdatProjectedPoseTask(UpdatProjectedPoseTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *UpdatProjectedPoseTask::getName(UpdatProjectedPoseTask *this)
{
  return "ScScene.UpdatProjectedPoseTask";
}

void UpdatProjectedPoseTask::runInternal(UpdatProjectedPoseTask *this)
{
  if (*((_DWORD *)this + 12))
  {
    unint64_t v2 = 0;
    do
      physx::Sc::BodySim::updateCached(*(void *)(*((void *)this + 5) + 8 * v2++), 0);
    while (v2 < *((unsigned int *)this + 12));
  }
}

void UpdateArticulationTask::~UpdateArticulationTask(UpdateArticulationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *UpdateArticulationTask::getName(UpdateArticulationTask *this)
{
  return "UpdateArticulationTask";
}

void UpdateArticulationTask::runInternal(UpdateArticulationTask *this)
{
  if (*((_DWORD *)this + 14))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)this + 5) + 24)
                                 + (((unint64_t)*(unsigned int *)(*((void *)this + 6) + 4 * v2) >> 2) & 0x3FFFFFE0)
                                 + 24)
                     + 24);
      physx::Sc::ArticulationSim::sleepCheck((void *)v3, *((float *)this + 15));
      if (*(_DWORD *)(v3 + 48))
      {
        unint64_t v4 = 0;
        do
          physx::Sc::BodySim::updateCached(*(void *)(*(void *)(v3 + 40) + 8 * v4++), 0);
        while (v4 < *(unsigned int *)(v3 + 48));
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 14));
  }
}

void OverlapFilterTask::~OverlapFilterTask(OverlapFilterTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *OverlapFilterTask::getName(OverlapFilterTask *this)
{
  return "OverlapFilterTask";
}

uint64_t OverlapFilterTask::runInternal(OverlapFilterTask *this)
{
  return physx::Sc::NPhaseCore::runOverlapFilters(*((void *)this + 5), *((_DWORD *)this + 14), *((void *)this + 6), *((void *)this + 24), (_DWORD *)this + 50, (_DWORD *)this + 51, (_DWORD *)this + 52, (uint64_t)this + 60, (uint64_t)this + 124);
}

void OnOverlapCreatedTask::~OnOverlapCreatedTask(OnOverlapCreatedTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *OnOverlapCreatedTask::getName(OnOverlapCreatedTask *this)
{
  return "OnOverlapCreatedTask";
}

physx::Sc::ElementInteractionMarker *OnOverlapCreatedTask::runInternal(physx::Sc::ElementInteractionMarker *this)
{
  if (*((_DWORD *)this + 22))
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v6 = (physx::Sc::ShapeInteraction **)*((void *)this + 9);
    unsigned int v5 = (physx::Sc::ElementInteractionMarker **)*((void *)this + 10);
    uint64_t v7 = (uint64_t *)*((void *)this + 8);
    do
    {
      this = physx::Sc::NPhaseCore::createRbElementInteraction(*((physx::Sc::NPhaseCore **)v1 + 5), *((void *)v1 + 7) + v3, *(physx::Sc::ElementSim **)(*((void *)v1 + 6) + v2 + 8), *(physx::Sc::ElementSim **)(*((void *)v1 + 6) + v2), *v7, *v6, *v5, 0);
      if (this)
      {
        if (*((unsigned char *)this + 36) == 2)
        {
          *unsigned int v5 = (physx::Sc::ElementInteractionMarker *)((unint64_t)*v5 | 1);
          ++v5;
        }
        else if (!*((unsigned char *)this + 36))
        {
          *unint64_t v6 = (physx::Sc::ShapeInteraction *)((unint64_t)*v6 | 1);
          ++v6;
          if (*((void *)this + 11)) {
            *v7++ |= 1uLL;
          }
        }
      }
      ++v4;
      v3 += 8;
      v2 += 24;
    }
    while (v4 < *((unsigned int *)v1 + 22));
  }
  return this;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 8>>::getName() [T = physx"
  }
         "::Sc::Scene::Block<void *, 8>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 16>>::getName() [T = phys"
  }
         "x::Sc::Scene::Block<void *, 16>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *, 32>>::getName() [T = phys"
  }
         "x::Sc::Scene::Block<void *, 32>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  unint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v15);
      unint64_t v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(void *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 128>>::getName() ["
  }
         "T = physx::Sc::Scene::Block<unsigned char, 128>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 256>>::getName() ["
  }
         "T = physx::Sc::Scene::Block<unsigned char, 256>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char, 384>>::getName() ["
  }
         "T = physx::Sc::Scene::Block<unsigned char, 384>]";
  else {
    int v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::secondPassNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  physx::IG::IslandSim::wakeIslands2((_DWORD *)(*(void *)(v1 + 1880) + 864));
  uint64_t v4 = *(void *)(v1 + 1880);
  uint64_t v5 = *(unsigned int *)(v4 + 1072);
  if (v5)
  {
    unsigned int v6 = *(unsigned int **)(v4 + 1064);
    do
    {
      unsigned int v8 = *v6++;
      unsigned int v7 = v8;
      unsigned int v9 = *(unsigned __int8 **)(*(void *)(*(void *)(*(void *)(v1 + 1880) + 64)
                                           + 8 * (v8 / *(_DWORD *)(*(void *)(v1 + 1880) + 88)))
                               + 8 * (v8 % *(_DWORD *)(*(void *)(v1 + 1880) + 88)));
      if (v9
        && (v9[29] & 0x20) == 0
        && (*(_WORD *)(*(void *)(*(void *)(v4 + 920) + 8 * (v7 / *(_DWORD *)(v4 + 944)))
                     + 16 * (v7 % *(_DWORD *)(v4 + 944))
                     + 4) & 4) != 0
        && physx::Sc::activateInteraction((physx::Sc *)v9, 0, v2, (int8x8_t)v3.n128_u64[0])
        && v9[28] <= 2u)
      {
        physx::Sc::Scene::notifyInteractionActivated(v1, (uint64_t)v9);
      }
      --v5;
    }
    while (v5);
  }
  v3.n128_u32[0] = *(_DWORD *)(v1 + 1984);
  uint64_t v10 = *(uint64_t (**)(__n128))(**(void **)(*(void *)(v1 + 1840) + 1776) + 40);
  return v10(v3);
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postNarrowPhase>::~DelegateFanoutTask(uint64_t a1)
{
  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t vars8;

  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  unsigned int v6 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v6();
}

uint64_t physx::Cm::BaseTask::run(physx::Cm::BaseTask *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t physx::Cm::FanoutTask::getName(physx::Cm::FanoutTask *this)
{
  return *((void *)this + 4);
}

uint64_t physx::Cm::FanoutTask::getReference(physx::Cm::FanoutTask *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Cm::FanoutTask::release(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[80] = 1;
  uint64_t v10 = v9;
  uint64_t v11 = 0xA00000000;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
    unsigned int v2 = HIDWORD(v11) & 0x7FFFFFFF;
  }
  else
  {
    unsigned int v2 = 10;
  }
  uint64_t v3 = *(unsigned int *)(v1 + 144);
  if (v2 >= v3)
  {
    if (!v3) {
      goto LABEL_13;
    }
  }
  else
  {
    this = physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::recreate((uint64_t)v9, *(_DWORD *)(v1 + 144));
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = (void *)(*(void *)(v1 + 136) + v4);
    int v6 = v11;
    if ((HIDWORD(v11) & 0x7FFFFFFFu) <= v11)
    {
      this = physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack((uint64_t)v9, v5);
    }
    else
    {
      *(void *)&v10[8 * v11] = *v5;
      LODWORD(v11) = v6 + 1;
    }
    v4 += 8;
    --v3;
  }
  while (v3);
LABEL_13:
  *(_DWORD *)(v1 + 144) = 0;
  if (*(unsigned char *)(v1 + 152)) {
    this = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  else {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 24), 0xFFFFFFFF);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 160));
  }
  if (v11)
  {
    unint64_t v7 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)&v10[8 * v7] + 40))(*(void *)&v10[8 * v7]);
      ++v7;
    }
    while (v7 < v11);
  }
  if ((v11 & 0x8000000000000000) == 0 && (v11 & 0x7FFFFFFF00000000) != 0 && v10 != v9 && v10 != 0) {
    return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return this;
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  *(unsigned char *)(v1 + 2080) = 0;
  unsigned int v2 = *(physx::PxsContext **)(v1 + 1840);
  (*(void (**)(void *))(**((void **)v2 + 222) + 48))(*((void **)v2 + 222));
  uint64_t result = physx::PxsContext::mergeCMDiscreteUpdateResults(v2, v3);
  if (*(unsigned char *)(v1 + 4154))
  {
    uint64_t v5 = (physx::PxcNpMemBlockPool *)(*(void *)(v1 + 1840) + 40);
    return physx::PxcNpMemBlockPool::releaseContacts(v5);
  }
  return result;
}

void physx::Cm::FanoutTask::~FanoutTask(pthread_mutex_t **this)
{
  *this = (pthread_mutex_t *)&unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 20);
  int v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = (physx::Cm::FanoutTask *)this[17];
    if (v3 == (physx::Cm::FanoutTask *)(this + 12))
    {
      *((unsigned char *)this + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  int v4 = *((_DWORD *)this + 23);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = (physx::Cm::FanoutTask *)this[10];
    if (v5 == (physx::Cm::FanoutTask *)(this + 5))
    {
      *((unsigned char *)this + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

{
  int v2;
  physx::Cm::FanoutTask *v3;
  int v4;
  physx::Cm::FanoutTask *v5;
  uint64_t vars8;

  *this = (pthread_mutex_t *)&unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 20);
  int v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = (physx::Cm::FanoutTask *)this[17];
    if (v3 == (physx::Cm::FanoutTask *)(this + 12))
    {
      *((unsigned char *)this + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  int v4 = *((_DWORD *)this + 23);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = (physx::Cm::FanoutTask *)this[10];
    if (v5 == (physx::Cm::FanoutTask *)(this + 5))
    {
      *((unsigned char *)this + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = (8 * a2);
    if (v4 > 0x50 || *(unsigned char *)(result + 80))
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v5 = (void *)result;
    }
    else
    {
      *(unsigned char *)(result + 80) = 1;
      uint64_t v5 = (void *)result;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 96);
  if (v6)
  {
    unint64_t v7 = (unint64_t)&v5[v6];
    unsigned int v8 = *(uint64_t **)(v3 + 88);
    unsigned int v9 = v5;
    do
    {
      uint64_t v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 100) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v3 + 88);
    if (v11 == v3)
    {
      *(unsigned char *)(v3 + 80) = 0;
    }
    else if (v11)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 100) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<80u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 100);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x50 && *(unsigned char *)(a1 + 80) == 0)
    {
      *(unsigned char *)(a1 + 80) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  uint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 88);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *uint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 100) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 88);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 80) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 96);
    }
  }
  *(void *)(a1 + 88) = v8;
  *(_DWORD *)(a1 + 96) = v9 + 1;
  *(_DWORD *)(a1 + 100) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::finalizationPhase>::~DelegateFanoutTask(uint64_t a1)
{
  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t vars8;

  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v6();
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::finalizationPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  uint64_t v2 = *(void *)(v1 + 1864);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 304);
    if (v3)
    {
      int v4 = *(uint64_t **)(v2 + 296);
      do
      {
        uint64_t v5 = *v4++;
        uint64_t v6 = *(void *)(v1 + 1904);
        BOOL v7 = *(unsigned __int8 *)(*(void *)(v5 - 16) + 13) == 2;
        LODWORD(v55) = *(_DWORD *)(v5 + 80);
        (*(void (**)(uint64_t, BOOL, unint64_t *))(*(void *)v6 + 88))(v6, v7, &v55);
        --v3;
      }
      while (v3);
      uint64_t v2 = *(void *)(v1 + 1864);
    }
    *(_DWORD *)(v2 + 304) = 0;
  }
  unint64_t v8 = *(void *)(v1 + 7480);
  if (v8)
  {
    physx::PxcScratchAllocator::free(*(void *)(v1 + 1840), v8);
    *(void *)(v1 + 7480) = 0;
  }
  if (*(void *)(v1 + 4240))
  {
    uint64_t v9 = *(unsigned int *)(v1 + 7540);
    if (v9)
    {
      *(_DWORD *)(v1 + 4216) = 0;
      if ((*(_DWORD *)(v1 + 4220) & 0x7FFFFFFFu) < v9) {
        physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::recreate(v1 + 4208, v9);
      }
      *(_DWORD *)(v1 + 4232) = 0;
      if ((*(_DWORD *)(v1 + 4236) & 0x7FFFFFFFu) < v9) {
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(v1 + 4224, v9);
      }
      uint64_t v10 = *(void *)(v1 + 7496);
      do
      {
        if ((*(_WORD *)(*(void *)v10 + 124) & 1) == 0)
        {
          uint64_t v11 = *(void *)(*(void *)v10 + 80);
          unint64_t v12 = v11 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v11 + 13) + 10);
          unint64_t v55 = v12;
          uint64_t v13 = *(unsigned int *)(v1 + 4216);
          if ((*(_DWORD *)(v1 + 4220) & 0x7FFFFFFFu) <= v13)
          {
            physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::growAndPushBack(v1 + 4208, &v55);
          }
          else
          {
            *(void *)(*(void *)(v1 + 4208) + 8 * v13) = v12;
            *(_DWORD *)(v1 + 4216) = v13 + 1;
          }
          float v14 = *(float *)(v11 + 64) * -2.0;
          float v15 = *(float *)(v11 + 68) * -2.0;
          float v16 = *(float *)(v11 + 72) * -2.0;
          float v18 = *(float *)(v11 + 56);
          float v17 = *(float *)(v11 + 60);
          float v19 = (float)(v17 * v17) + -0.5;
          float v20 = *(float *)(v11 + 48);
          float v21 = *(float *)(v11 + 52);
          float v22 = (float)((float)(v15 * v21) + (float)(v20 * v14)) + (float)(v18 * v16);
          float v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
              + (float)(v20 * v22);
          float v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(v20 * v16)) * v17))
              + (float)(v21 * v22);
          float v25 = (float)((float)(v16 * v19) - (float)((float)((float)(v20 * v15) - (float)(v21 * v14)) * v17))
              + (float)(v18 * v22);
          float v26 = v23 + v23;
          float v27 = v24 + v24;
          float v28 = v25 + v25;
          float v30 = *(float *)(v11 + 24);
          float v29 = *(float *)(v11 + 28);
          float v31 = (float)(v29 * v29) + -0.5;
          float v32 = *(float *)(v11 + 16);
          float v33 = *(float *)(v11 + 20);
          float v34 = (float)((float)(v33 * v27) + (float)(v32 * (float)(v23 + v23))) + (float)(v30 * v28);
          float v35 = (float)((float)(v29 * (float)((float)(v33 * v28) - (float)(v30 * v27)))
                      + (float)((float)(v23 + v23) * v31))
              + (float)(v32 * v34);
          float v36 = (float)((float)(v29 * (float)((float)(v30 * v26) - (float)(v32 * v28))) + (float)(v27 * v31))
              + (float)(v33 * v34);
          float v37 = (float)((float)(v29 * (float)((float)(v32 * v27) - (float)(v33 * v26))) + (float)(v28 * v31))
              + (float)(v30 * v34);
          float v38 = *(float *)(v11 + 32) + v35;
          float v39 = *(float *)(v11 + 36) + v36;
          float v40 = *(float *)(v11 + 40) + v37;
          float v41 = (float)((float)((float)(v17 * v32) - (float)(v29 * v20)) - (float)(v33 * v18)) + (float)(v21 * v30);
          float v42 = (float)((float)((float)(v17 * v33) - (float)(v29 * v21)) - (float)(v30 * v20)) + (float)(v18 * v32);
          float v43 = (float)((float)((float)(v17 * v30) - (float)(v29 * v18)) - (float)(v32 * v21)) + (float)(v20 * v33);
          float v44 = (float)((float)((float)(v20 * v32) + (float)(v29 * v17)) + (float)(v33 * v21)) + (float)(v30 * v18);
          unint64_t v55 = __PAIR64__(LODWORD(v42), LODWORD(v41));
          float v56 = v43;
          float v57 = v44;
          float v58 = v38;
          float v59 = v39;
          float v60 = v40;
          unsigned int v45 = *(_DWORD *)(v1 + 4232);
          if ((*(_DWORD *)(v1 + 4236) & 0x7FFFFFFFu) <= v45)
          {
            physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::growAndPushBack(v1 + 4224, (uint64_t)&v55);
          }
          else
          {
            uint64_t v46 = *(void *)(v1 + 4224) + 28 * v45;
            *(float *)uint64_t v46 = v41;
            *(float *)(v46 + 4) = v42;
            *(float *)(v46 + 8) = v43;
            *(float *)(v46 + 12) = v44;
            *(float *)(v46 + 16) = v38;
            *(float *)(v46 + 20) = v39;
            *(float *)(v46 + 24) = v40;
            *(_DWORD *)(v1 + 4232) = v45 + 1;
          }
        }
        v10 += 8;
        --v9;
      }
      while (v9);
      if (*(_DWORD *)(v1 + 4216)) {
        (*(void (**)(void, void, void))(**(void **)(v1 + 4240) + 40))(*(void *)(v1 + 4240), *(void *)(v1 + 4208), *(void *)(v1 + 4224));
      }
    }
  }
  int v47 = *(_DWORD *)(v1 + 2284);
  if (v47)
  {
    uint64_t v48 = *(void *)(v1 + 2240);
    unsigned int v49 = v47 - 1;
    do
    {
      uint64_t v50 = v49;
      physx::Sc::ConstraintSim::checkMaxForceExceeded(*(physx::Sc::ConstraintSim **)(v48 + 8 * v49--));
    }
    while (v50);
  }
  uint64_t v51 = *(void *)(v1 + 4296);
  uint64_t v52 = v51;
  if (*(_DWORD *)(v51 + 56))
  {
    unint64_t v53 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v51 + 8, *(_DWORD *)(*(void *)(v51 + 48) + 4 * v53++));
    while (v53 < *(unsigned int *)(v51 + 56));
    uint64_t v52 = *(void *)(v1 + 4296);
  }
  *(_DWORD *)(v51 + 56) = 0;
  bzero(*(void **)(v52 + 32), (4 * *(_DWORD *)(v52 + 40)));
  uint64_t result = physx::Cm::FlushPool::clear((pthread_mutex_t **)(v1 + 7416));
  ++*(_DWORD *)(v1 + 1996);
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDMultiPass>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 1912) + 8))(*(void *)(v1 + 1912));
  *(_DWORD *)(v1 + 2104) = result;
  if ((*(unsigned char *)(v1 + 4268) & 2) != 0)
  {
    uint64_t v77 = v2;
    if (*(unsigned char *)(v1 + 7472))
    {
      uint64_t v4 = *(void *)(v1 + 3992);
      unint64_t v5 = *(unsigned int *)(v4 + 16);
      if (v5)
      {
        unint64_t v6 = 0;
        uint64_t v7 = *(void *)(v4 + 8);
        do
        {
          if (v6 < (v5 - 1))
          {
            _X13 = *(void *)(v7 + 8 * v6 + 8);
            __asm { PRFM            #0, [X13] }
          }
          float v14 = *(void **)(v7 + 8 * v6);
          float v15 = (unsigned int *)v14[3];
          __int16 v16 = *((_WORD *)v15 + 5);
          if ((v16 & 2) != 0)
          {
            ++v6;
          }
          else
          {
            if (++v6 < v5)
            {
              _X0 = *(void *)(*(void *)(v7 + 8 * v6) + 24);
              __asm { PRFM            #0, [X0] }
            }
            if ((v16 & 8) != 0 && *((_WORD *)v15 + 4))
            {
              uint64_t v19 = *(void *)(v4 + 64) + *v15;
              uint64_t v21 = v14[1];
              uint64_t v20 = v14[2];
              uint64_t v22 = *(void *)(v21 + 80);
              if (*(unsigned char *)(v22 + 13))
              {
                *(void *)(v19 + 12) = *(void *)(v22 + 80);
                *(_DWORD *)(v19 + 20) = *(_DWORD *)(v22 + 88);
                uint64_t v23 = *(void *)(v22 + 96);
                int v24 = *(_DWORD *)(v22 + 104);
              }
              else
              {
                uint64_t v23 = 0;
                *(void *)(v19 + 12) = 0;
                *(_DWORD *)(v19 + 20) = 0;
                int v24 = 0;
              }
              *(void *)(v19 + 36) = v23;
              *(_DWORD *)(v19 + 44) = v24;
              uint64_t v25 = *(void *)(v20 + 80);
              if (*(unsigned char *)(v25 + 13))
              {
                *(void *)(v19 + 24) = *(void *)(v25 + 80);
                *(_DWORD *)(v19 + 32) = *(_DWORD *)(v25 + 88);
                uint64_t v26 = *(void *)(v25 + 96);
                int v27 = *(_DWORD *)(v25 + 104);
              }
              else
              {
                uint64_t v26 = 0;
                *(void *)(v19 + 24) = 0;
                *(_DWORD *)(v19 + 32) = 0;
                int v27 = 0;
              }
              *(void *)(v19 + 48) = v26;
              *(_DWORD *)(v19 + 56) = v27;
              *((_WORD *)v15 + 5) = v16 & 0xFFF7;
            }
          }
        }
        while (v6 != v5);
      }
    }
    unsigned int v28 = *(_DWORD *)(v1 + 5264);
    if (v28 != 2)
    {
      v83 = (_DWORD *)(v1 + 5256);
      if (v28)
      {
        uint64_t v29 = *(void *)v83;
        unint64_t v30 = *(void *)v83 + 56 * v28;
        float v31 = *(void (****)(void))v83;
        float v32 = *(void (****)(void))v83;
        do
        {
          float v33 = *v32;
          v32 += 7;
          (*v33)(v31);
          v29 += 56;
          float v31 = v32;
        }
        while ((unint64_t)v32 < v30);
      }
      *(_DWORD *)(v1 + 5264) = 0;
      unsigned int v34 = *(_DWORD *)(v1 + 5184);
      if (v34)
      {
        float v35 = *(void (****)(void))(v1 + 5176);
        unint64_t v36 = (unint64_t)&v35[7 * v34];
        float v37 = v35;
        float v38 = v35;
        do
        {
          float v39 = *v38;
          v38 += 7;
          (*v39)(v37);
          v35 += 7;
          float v37 = v38;
        }
        while ((unint64_t)v38 < v36);
      }
      *(_DWORD *)(v1 + 5184) = 0;
      unsigned int v40 = *(_DWORD *)(v1 + 5248);
      if (v40)
      {
        float v41 = *(void (****)(void))(v1 + 5240);
        unint64_t v42 = (unint64_t)&v41[7 * v40];
        float v43 = v41;
        float v44 = v41;
        do
        {
          unsigned int v45 = *v44;
          v44 += 7;
          (*v45)(v43);
          v41 += 7;
          float v43 = v44;
        }
        while ((unint64_t)v44 < v42);
      }
      *(_DWORD *)(v1 + 5248) = 0;
      unsigned int v46 = *(_DWORD *)(v1 + 5232);
      if (v46)
      {
        int v47 = *(void (****)(void))(v1 + 5224);
        unint64_t v48 = (unint64_t)&v47[7 * v46];
        unsigned int v49 = v47;
        uint64_t v50 = v47;
        do
        {
          uint64_t v51 = *v50;
          v50 += 7;
          (*v51)(v49);
          v47 += 7;
          unsigned int v49 = v50;
        }
        while ((unint64_t)v50 < v48);
      }
      v82 = (_DWORD *)(v1 + 5176);
      *(_DWORD *)(v1 + 5232) = 0;
      if ((*(_DWORD *)(v1 + 5268) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::recreate(v83);
      }
      if ((*(_DWORD *)(v1 + 5188) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::recreate(v82);
      }
      v81 = (_DWORD *)(v1 + 5192);
      if ((*(_DWORD *)(v1 + 5204) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::recreate(v81);
      }
      v80 = (_DWORD *)(v1 + 5240);
      v79 = (_DWORD *)(v1 + 5208);
      if ((*(_DWORD *)(v1 + 5220) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::recreate(v79);
      }
      v78 = (_DWORD *)(v1 + 5224);
      if ((*(_DWORD *)(v1 + 5252) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::recreate(v80);
      }
      if ((*(_DWORD *)(v1 + 5236) & 0x7FFFFFFE) == 0) {
        physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::recreate(v78);
      }
      char v52 = 1;
      do
      {
        char v53 = v52;
        unint64_t v54 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E727828;
        long long v85 = v54;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.postCCDPass";
        unsigned int v55 = *(_DWORD *)(v1 + 5264);
        if ((*(_DWORD *)(v1 + 5268) & 0x7FFFFFFFu) <= v55)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::growAndPushBack((uint64_t)v83, (uint64_t)&v84);
        }
        else
        {
          uint64_t v56 = *(void *)(v1 + 5256) + 56 * v55;
          *(void *)uint64_t v56 = &unk_26E725A00;
          *(_OWORD *)(v56 + 8) = v85;
          *(void *)(v56 + 24) = v86;
          *(_DWORD *)(v56 + 32) = v87;
          *(void *)uint64_t v56 = &unk_26E727828;
          *(_OWORD *)(v56 + 40) = v88;
          ++*(_DWORD *)(v1 + 5264);
        }
        unint64_t v57 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E7278B8;
        long long v85 = v57;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.updateCCDSinglePass";
        unsigned int v58 = *(_DWORD *)(v1 + 5184);
        if ((*(_DWORD *)(v1 + 5188) & 0x7FFFFFFFu) <= v58)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::growAndPushBack((uint64_t)v82, (uint64_t)&v84);
        }
        else
        {
          uint64_t v59 = *(void *)(v1 + 5176) + 56 * v58;
          *(void *)uint64_t v59 = &unk_26E725A00;
          *(_OWORD *)(v59 + 8) = v85;
          *(void *)(v59 + 24) = v86;
          *(_DWORD *)(v59 + 32) = v87;
          *(void *)uint64_t v59 = &unk_26E7278B8;
          *(_OWORD *)(v59 + 40) = v88;
          ++*(_DWORD *)(v1 + 5184);
        }
        unint64_t v60 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E727948;
        long long v85 = v60;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.updateCCDSinglePassStage2";
        unsigned int v61 = *(_DWORD *)(v1 + 5200);
        if ((*(_DWORD *)(v1 + 5204) & 0x7FFFFFFFu) <= v61)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::growAndPushBack((uint64_t)v81, (uint64_t)&v84);
        }
        else
        {
          uint64_t v62 = *(void *)(v1 + 5192) + 56 * v61;
          *(void *)uint64_t v62 = &unk_26E725A00;
          *(_OWORD *)(v62 + 8) = v85;
          *(void *)(v62 + 24) = v86;
          *(_DWORD *)(v62 + 32) = v87;
          *(void *)uint64_t v62 = &unk_26E727948;
          *(_OWORD *)(v62 + 40) = v88;
          ++*(_DWORD *)(v1 + 5200);
        }
        unint64_t v63 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E7279D8;
        long long v85 = v63;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.updateCCDSinglePassStage3";
        unsigned int v64 = *(_DWORD *)(v1 + 5216);
        if ((*(_DWORD *)(v1 + 5220) & 0x7FFFFFFFu) <= v64)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::growAndPushBack((uint64_t)v79, (uint64_t)&v84);
        }
        else
        {
          uint64_t v65 = *(void *)(v1 + 5208) + 56 * v64;
          *(void *)uint64_t v65 = &unk_26E725A00;
          *(_OWORD *)(v65 + 8) = v85;
          *(void *)(v65 + 24) = v86;
          *(_DWORD *)(v65 + 32) = v87;
          *(void *)uint64_t v65 = &unk_26E7279D8;
          *(_OWORD *)(v65 + 40) = v88;
          ++*(_DWORD *)(v1 + 5216);
        }
        unint64_t v66 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E727A68;
        long long v85 = v66;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.ccdBroadPhase";
        unsigned int v67 = *(_DWORD *)(v1 + 5248);
        if ((*(_DWORD *)(v1 + 5252) & 0x7FFFFFFFu) <= v67)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::growAndPushBack((uint64_t)v80, (uint64_t)&v84);
        }
        else
        {
          uint64_t v68 = *(void *)(v1 + 5240) + 56 * v67;
          *(void *)uint64_t v68 = &unk_26E725A00;
          *(_OWORD *)(v68 + 8) = v85;
          *(void *)(v68 + 24) = v86;
          *(_DWORD *)(v68 + 32) = v87;
          *(void *)uint64_t v68 = &unk_26E727A68;
          *(_OWORD *)(v68 + 40) = v88;
          ++*(_DWORD *)(v1 + 5248);
        }
        unint64_t v69 = *(void *)(v1 + 24);
        uint64_t v86 = 0;
        int v87 = 0;
        v84 = &unk_26E727AF8;
        long long v85 = v69;
        *(void *)&long long v88 = v1;
        *((void *)&v88 + 1) = "ScScene.ccdBroadPhaseAABB";
        unsigned int v70 = *(_DWORD *)(v1 + 5232);
        if ((*(_DWORD *)(v1 + 5236) & 0x7FFFFFFFu) <= v70)
        {
          physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::growAndPushBack((uint64_t)v78, (uint64_t)&v84);
        }
        else
        {
          uint64_t v71 = *(void *)(v1 + 5224) + 56 * v70;
          *(void *)uint64_t v71 = &unk_26E725A00;
          *(_OWORD *)(v71 + 8) = v85;
          *(void *)(v71 + 24) = v86;
          *(_DWORD *)(v71 + 32) = v87;
          *(void *)uint64_t v71 = &unk_26E727AF8;
          *(_OWORD *)(v71 + 40) = v88;
          ++*(_DWORD *)(v1 + 5232);
        }
        char v52 = 0;
      }
      while ((v53 & 1) != 0);
    }
    physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
    uint64_t v72 = *(void *)(v1 + 1864);
    *(_DWORD *)(v72 + 180) = 0;
    *(_DWORD *)(v72 + 184) = 0;
    uint64_t v73 = *(void *)(v1 + 5240);
    *(_DWORD *)(v73 + 32) = 1;
    *(void *)(v73 + 24) = v77;
    if (v77)
    {
      (*(void (**)(uint64_t))(*(void *)v77 + 32))(v77);
      *(void *)(v73 + 16) = *(void *)(*(void *)(v73 + 24) + 16);
      uint64_t v73 = *(void *)(v1 + 5240);
      uint64_t v74 = v1 + 5224;
      uint64_t v75 = *(void *)(v1 + 5224);
      *(_DWORD *)(v75 + 32) = 1;
      *(void *)(v75 + 24) = v73;
      if (!v73)
      {
        uint64_t v76 = 0;
LABEL_71:
        (*(void (**)(uint64_t))(*(void *)v76 + 40))(v76);
        return (*(uint64_t (**)(void))(**(void **)v74 + 40))();
      }
    }
    else
    {
      uint64_t v75 = *(void *)(v1 + 5224);
      uint64_t v74 = v1 + 5224;
      *(_DWORD *)(v75 + 32) = 1;
      *(void *)(v75 + 24) = v73;
    }
    (*(void (**)(uint64_t))(*(void *)v73 + 32))(v73);
    *(void *)(v75 + 16) = *(void *)(*(void *)(v75 + 24) + 16);
    uint64_t v76 = *(void *)(v1 + 5240);
    goto LABEL_71;
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::afterIntegration>::runInternal(uint64_t a1)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v1 + 1840);
  uint64_t v4 = *(void *)(v3 + 2592);
  *(unsigned char *)(v4 + 28) = 0;
  uint64_t v5 = *(void *)(v1 + 2064);
  *(unsigned char *)(v5 + 24) = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 1760));
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v1 + 1904) + 152))(*(void *)(v1 + 1904), v4, v5, v2);
  uint64_t v6 = *(void *)(v1 + 1880);
  unsigned int v7 = *(_DWORD *)(v6 + 576);
  uint64_t v8 = *(unsigned int *)(v1 + 4704);
  if (v7 > v8)
  {
    uint64_t v9 = (void *)(*(void *)(v1 + 1848) + 224);
    int v10 = v7 - v8;
    uint64_t v11 = (unsigned int *)(*(void *)(v6 + 568) + 4 * v8);
    do
    {
      unsigned int v12 = *v11++;
      uint64_t v13 = *(void *)(*(void *)(v6 + 248) + (((unint64_t)v12 >> 2) & 0x3FFFFFE0) + 24);
      uint64_t v14 = *(void *)(v13 - 16);
      uint64_t v15 = *(void *)(v13 + 40);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v13;
      *(void *)(v15 + 16) = *(void *)(v13 + 16);
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(v13 + 24);
      physx::Sc::BodySim::updateCached(v13 - 96, v9);
      uint64_t v16 = *(void *)(v1 + 1904);
      BOOL v17 = *(unsigned __int8 *)(*(void *)(v13 - 16) + 13) == 2;
      LODWORD(v97) = *(_DWORD *)(v13 + 80);
      (*(void (**)(uint64_t, BOOL, long long *))(*(void *)v16 + 88))(v16, v17, &v97);
      __int16 v18 = *(_WORD *)(v13 + 28);
      if ((v18 & 2) != 0)
      {
        physx::Sc::BodySim::freezeTransforms(v13 - 96, (void *)(*(void *)(v1 + 1848) + 224));
        __int16 v18 = *(_WORD *)(v13 + 28);
      }
      *(_DWORD *)(v14 + 156) = 0;
      *(void *)(v14 + 80) = 0;
      *(_DWORD *)(v14 + 88) = 0;
      *(void *)(v14 + 96) = 0;
      *(_DWORD *)(v14 + 104) = 0;
      *(_WORD *)(v13 + 28) = v18 & 1;
      --v10;
    }
    while (v10);
  }
  if (*(_DWORD *)(v1 + 2120))
  {
    int v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
    do
    {
      uint64_t v22 = physx::Cm::FlushPool::allocate(v21, 56, 0x10u);
      uint64_t v23 = (void *)v22;
      uint64_t v24 = *(void *)(v1 + 2112) + 8 * v20;
      unsigned int v25 = v19 + *(_DWORD *)(v1 + 2120);
      if (v25 >= 0x100) {
        unsigned int v25 = 256;
      }
      *(void *)(v22 + 8) = *(void *)(v1 + 24);
      *(void *)(v22 + 16) = 0;
      *(_DWORD *)(v22 + 32) = 0;
      uint64_t v26 = (void (**)(void *))&unk_26E725F20;
      *(void *)uint64_t v22 = &unk_26E725F20;
      *(void *)(v22 + 40) = v24;
      *(_DWORD *)(v22 + 48) = v25;
      *(_DWORD *)(v22 + 32) = 1;
      *(void *)(v22 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        v23[2] = *(void *)(v23[3] + 16);
        uint64_t v26 = (void (**)(void *))*v23;
      }
      v26[5](v23);
      v20 += 256;
      unsigned int v27 = *(_DWORD *)(v1 + 2120);
      v19 -= 256;
    }
    while (v20 < v27);
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = (void *)(*(void *)(v1 + 1848) + 224);
      do
      {
        uint64_t v30 = *(void *)(*(void *)(v1 + 2112) + 8 * v28);
        if ((*(_WORD *)(v30 + 124) & 1) == 0)
        {
          float v31 = *(uint64_t ***)(v30 + 56);
          if (v31)
          {
            do
            {
              unint64_t v32 = *((unsigned int *)v31 + 4);
              if ((v32 & 0x80000000) != 0)
              {
                physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v29, (v32 & 0x7FFFFFFF) + 1);
                *(_DWORD *)(*v29 + ((v32 >> 3) & 0xFFFFFFC)) |= 1 << v32;
              }
              float v31 = (uint64_t **)*v31;
            }
            while (v31);
            unsigned int v27 = *(_DWORD *)(v1 + 2120);
          }
        }
        ++v28;
      }
      while (v28 < v27);
      if (v27)
      {
        int v33 = 0;
        for (unsigned int i = 0; i < v27; i += 256)
        {
          long long v128 = 0u;
          long long v127 = 0u;
          long long v126 = 0u;
          long long v125 = 0u;
          long long v124 = 0u;
          long long v123 = 0u;
          long long v122 = 0u;
          long long v121 = 0u;
          long long v120 = 0u;
          long long v119 = 0u;
          long long v118 = 0u;
          long long v117 = 0u;
          long long v116 = 0u;
          long long v115 = 0u;
          long long v114 = 0u;
          long long v113 = 0u;
          long long v112 = 0u;
          long long v111 = 0u;
          long long v110 = 0u;
          long long v109 = 0u;
          long long v108 = 0u;
          long long v107 = 0u;
          long long v106 = 0u;
          long long v105 = 0u;
          long long v104 = 0u;
          long long v103 = 0u;
          long long v102 = 0u;
          long long v101 = 0u;
          long long v100 = 0u;
          long long v99 = 0u;
          if (v27 - i >= 0x100) {
            int v35 = 256;
          }
          else {
            int v35 = v27 - i;
          }
          long long v98 = 0uLL;
          long long v97 = 0uLL;
          if (v35)
          {
            unint64_t v36 = v27 + v33;
            if (v36 >= 0x100) {
              unint64_t v36 = 256;
            }
            float v37 = (uint64_t *)(*(void *)(v1 + 2112) + 8 * i);
            float v38 = v96;
            float v39 = &v97;
            do
            {
              *(void *)float v39 = *v37 + 96;
              float v39 = (long long *)((char *)v39 + 8);
              uint64_t v40 = *v37++;
              *v38++ = *(_DWORD *)(v40 + 176) >> 7;
              --v36;
            }
            while (v36);
          }
          (*(void (**)(void, long long *, unsigned char *))(**(void **)(v1 + 1904) + 56))(*(void *)(v1 + 1904), &v97, v96);
          unsigned int v27 = *(_DWORD *)(v1 + 2120);
          v33 -= 256;
        }
      }
    }
  }
  uint64_t v41 = *(unsigned int *)(v1 + 48);
  if (v41)
  {
    uint64_t v42 = 0;
    unsigned int v43 = 0;
    uint64_t v44 = *(void *)(v1 + 32);
    unsigned int v45 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
    do
    {
      unsigned int v46 = 0;
      uint64_t v47 = v42;
      while (1)
      {
        v46 += *(_DWORD *)(**(void **)(v44 + 8 * v47) + 64);
        if (v46 >= 0x400) {
          break;
        }
        if (v41 == ++v47)
        {
          if (v46)
          {
            uint64_t v52 = physx::Cm::FlushPool::allocate(v45, 72, 0x10u);
            uint64_t v53 = *(void *)(*(void *)(v1 + 1840) + 2592);
            uint64_t v54 = *(void *)(v1 + 2064);
            *(void *)(v52 + 8) = *(void *)(v1 + 24);
            *(void *)(v52 + 16) = 0;
            *(_DWORD *)(v52 + 32) = 0;
            unsigned int v55 = (void (**)(uint64_t))&unk_26E725C80;
            *(void *)uint64_t v52 = &unk_26E725C80;
            *(void *)(v52 + 40) = v44 + 8 * v43;
            *(_DWORD *)(v52 + 48) = v41 - v43;
            *(void *)(v52 + 56) = v53;
            *(void *)(v52 + 64) = v54;
            *(_DWORD *)(v52 + 32) = 1;
            *(void *)(v52 + 24) = v2;
            if (v2)
            {
              (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
              *(void *)(v52 + 16) = *(void *)(*(void *)(v52 + 24) + 16);
              unsigned int v55 = *(void (***)(uint64_t))v52;
            }
            v55[5](v52);
          }
          goto LABEL_50;
        }
      }
      uint64_t v48 = physx::Cm::FlushPool::allocate(v45, 72, 0x10u);
      uint64_t v49 = *(void *)(*(void *)(v1 + 1840) + 2592);
      uint64_t v50 = *(void *)(v1 + 2064);
      *(void *)(v48 + 8) = *(void *)(v1 + 24);
      *(void *)(v48 + 16) = 0;
      *(_DWORD *)(v48 + 32) = 0;
      uint64_t v51 = (void (**)(uint64_t))&unk_26E725C80;
      *(void *)uint64_t v48 = &unk_26E725C80;
      *(void *)(v48 + 40) = v44 + 8 * v43;
      *(_DWORD *)(v48 + 48) = v47 - v43 + 1;
      *(void *)(v48 + 56) = v49;
      *(void *)(v48 + 64) = v50;
      *(_DWORD *)(v48 + 32) = 1;
      *(void *)(v48 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        *(void *)(v48 + 16) = *(void *)(*(void *)(v48 + 24) + 16);
        uint64_t v51 = *(void (***)(uint64_t))v48;
      }
      uint64_t v42 = v47 + 1;
      v51[5](v48);
      unsigned int v43 = v47 + 1;
    }
    while (v41 - 1 != v47);
LABEL_50:
    uint64_t v56 = 0;
    uint64_t v57 = *(void *)(v1 + 1848);
    *(unsigned char *)(*(void *)(*(void *)(v1 + 1840) + 2592) + 28) = 1;
    *(unsigned char *)(*(void *)(v1 + 2064) + 24) = 1;
    do
    {
      uint64_t v58 = **(void **)(v44 + 8 * v56);
      if ((int)v56 + 16 < v41)
      {
        _X9 = *(void *)(v44 + 8 * (v56 + 16));
        __asm { PRFM            #0, [X9] }
        if ((int)v56 + 8 < v41)
        {
          _X9 = **(void **)(v44 + 8 * (v56 + 8));
          __asm { PRFM            #0, [X9] }
        }
        if ((int)v56 + 4 < v41)
        {
          _X9 = *(void *)(**(void **)(v44 + 8 * (v56 + 4)) + 56);
          __asm { PRFM            #0, [X9] }
        }
      }
      for (j = *(uint64_t **)(v58 + 56); j; j = (uint64_t *)*j)
      {
        if ((*(unsigned char *)(j[7] + 64) & 5) != 0) {
          *(_DWORD *)(*(void *)(v57 + 224) + 4 * (((unint64_t)*((unsigned int *)j + 4) >> 5) & 0x3FFFFFF)) |= 1 << *((_DWORD *)j + 4);
        }
      }
      uint64_t v70 = *(void *)(v1 + 1904);
      LODWORD(v97) = *(_DWORD *)(v58 + 176);
      (*(void (**)(uint64_t, void, long long *))(*(void *)v70 + 88))(v70, 0, &v97);
      ++v56;
    }
    while (v56 != v41);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(v1 + 1840) + 1760));
  }
  uint64_t v71 = *(void *)(v1 + 1880);
  unsigned int v72 = *(_DWORD *)(v71 + 400);
  if (v72)
  {
    unsigned int v73 = 0;
    uint64_t v74 = v71 + 224;
    uint64_t v75 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
    uint64_t v95 = *(void *)(v1 + 1880);
    uint64_t v76 = *(void *)(v71 + 392);
    unsigned int v77 = *(_DWORD *)(v71 + 400);
    do
    {
      uint64_t v78 = physx::Cm::FlushPool::allocate(v75, 64, 0x10u);
      v79 = (void *)v78;
      if (v77 >= 0x40) {
        int v80 = 64;
      }
      else {
        int v80 = v77;
      }
      int v81 = *(_DWORD *)(v1 + 1984);
      *(void *)(v78 + 8) = *(void *)(v1 + 24);
      *(void *)(v78 + 16) = 0;
      *(_DWORD *)(v78 + 32) = 0;
      v82 = (void (**)(void *))&unk_26E725F90;
      *(void *)uint64_t v78 = &unk_26E725F90;
      *(void *)(v78 + 40) = v74;
      *(void *)(v78 + 48) = v76 + 4 * v73;
      *(_DWORD *)(v78 + 56) = v80;
      *(_DWORD *)(v78 + 60) = v81;
      *(_DWORD *)(v78 + 32) = 1;
      *(void *)(v78 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        v79[2] = *(void *)(v79[3] + 16);
        v82 = (void (**)(void *))*v79;
      }
      v82[5](v79);
      v73 += 64;
      v77 -= 64;
    }
    while (v73 < v72);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(v1 + 1840) + 1760));
    }
    uint64_t v83 = 0;
    v84 = (void *)(*(void *)(v1 + 1848) + 224);
    long long v128 = 0u;
    long long v127 = 0u;
    long long v126 = 0u;
    long long v125 = 0u;
    long long v124 = 0u;
    long long v123 = 0u;
    long long v122 = 0u;
    long long v121 = 0u;
    long long v120 = 0u;
    long long v119 = 0u;
    long long v118 = 0u;
    long long v117 = 0u;
    long long v116 = 0u;
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    if (v72 <= 1) {
      uint64_t v85 = 1;
    }
    else {
      uint64_t v85 = v72;
    }
    long long v98 = 0uLL;
    long long v97 = 0uLL;
    do
    {
      uint64_t v86 = *(void *)(*(void *)(*(void *)(v95 + 248)
                                  + (((unint64_t)*(unsigned int *)(v76 + 4 * v83) >> 2) & 0x3FFFFFE0)
                                  + 24)
                      + 24);
      uint64_t v87 = *(unsigned int *)(v86 + 48);
      if (v87)
      {
        uint64_t v88 = 0;
        unsigned int v89 = 0;
        uint64_t v90 = 8 * v87;
        do
        {
          uint64_t v91 = *(void *)(*(void *)(v86 + 40) + v88);
          if ((*(unsigned char *)(*(void *)(v91 + 136) + 28) & 4) != 0) {
            *((void *)&v97 + v89++) = v91;
          }
          v88 += 8;
        }
        while (v90 != v88);
        if (v89)
        {
          uint64_t v92 = v89;
          v93 = &v97;
          do
          {
            uint64_t v94 = *(unsigned int *)(v1 + 2104);
            if ((*(_DWORD *)(v1 + 2108) & 0x7FFFFFFFu) <= v94)
            {
              physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(v1 + 2096, v93);
            }
            else
            {
              *(void *)(*(void *)(v1 + 2096) + 8 * v94) = *(void *)v93;
              *(_DWORD *)(v1 + 2104) = v94 + 1;
            }
            v93 = (long long *)((char *)v93 + 8);
            --v92;
          }
          while (v92);
        }
      }
      physx::Sc::ArticulationSim::markShapesUpdated(v86, v84);
      ++v83;
    }
    while (v83 != v85);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)(v1 + 1840) + 1760));
    }
  }
  physx::Sc::Scene::checkForceThresholdContactEvents((physx::Sc::Scene *)v1, 0);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::constraintProjection>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(_DWORD *)(v1 + 2052))
  {
    uint64_t v2 = *(void *)(v1 + 1880);
    int v3 = *(_DWORD *)(v2 + 384);
    if (v3)
    {
      uint64_t v4 = *(void *)(result + 24);
      uint64_t v5 = *(void *)(v2 + 376);
      uint64_t result = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(v1 + 1840), 8 * v3, 1);
      *(void *)(v1 + 7480) = result;
      if (result)
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        do
        {
          uint64_t v8 = *(void *)(*(void *)(*(void *)(v2 + 248)
                                     + (((unint64_t)*(unsigned int *)(v5 + 4 * v6) >> 2) & 0x3FFFFFE0)
                                     + 24)
                         + 104);
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 8);
            uint64_t v10 = *(void *)(v9 + 8);
            if (v10 != v9)
            {
              int v11 = 0;
              do
              {
                uint64_t v9 = v10;
                int v12 = v11;
                uint64_t v10 = *(void *)(v10 + 8);
                ++v11;
              }
              while (v9 != v10);
              if (v11)
              {
                int v13 = ~v12;
                do
                {
                  uint64_t v14 = *(void *)(v8 + 8);
                  *(void *)(v8 + 8) = v9;
                  uint64_t v8 = v14;
                }
                while (!__CFADD__(v13++, 1));
              }
            }
            char v16 = *(unsigned char *)(v9 + 88);
            if ((v16 & 2) == 0 && *(void *)(v9 + 40))
            {
              *(void *)(*(void *)(v1 + 7480) + 8 * v7++) = v9;
              *(unsigned char *)(v9 + 88) = v16 | 2;
            }
          }
          ++v6;
          --v3;
        }
        while (v3);
        if (v7)
        {
          uint64_t v17 = 0;
          unsigned int v18 = 0;
          int v19 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
          uint64_t v20 = v1 + 2112;
          do
          {
            unsigned int v21 = 0;
            uint64_t v22 = v17;
            while (1)
            {
              unsigned int v23 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 7480) + 8 * v22) + 88);
              if ((v23 & 0x40) != 0)
              {
                int v24 = 128;
              }
              else if ((v23 & 0x20) != 0)
              {
                int v24 = 40;
              }
              else
              {
                int v24 = (v23 & 0x10) != 0 ? 10 : (v23 >> 2) & 2;
              }
              v21 += v24;
              if (v21 >= 0x100) {
                break;
              }
              if (v7 == ++v22)
              {
                if (v21)
                {
                  uint64_t v30 = physx::Cm::FlushPool::allocate(v19, 72, 0x10u);
                  uint64_t v31 = *(void *)(v1 + 7480) + 8 * v18;
                  uint64_t v32 = *(void *)(v1 + 1840);
                  *(void *)(v30 + 8) = *(void *)(v32 + 2616);
                  *(void *)(v30 + 16) = 0;
                  *(_DWORD *)(v30 + 32) = 0;
                  int v33 = &unk_26E725CF0;
                  *(void *)uint64_t v30 = &unk_26E725CF0;
                  *(void *)(v30 + 40) = v31;
                  *(_DWORD *)(v30 + 48) = v7 - v18;
                  *(void *)(v30 + 56) = v20;
                  *(void *)(v30 + 64) = v32;
                  *(_DWORD *)(v30 + 32) = 1;
                  *(void *)(v30 + 24) = v4;
                  if (v4)
                  {
                    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
                    *(void *)(v30 + 16) = *(void *)(*(void *)(v30 + 24) + 16);
                    int v33 = *(void **)v30;
                  }
                  unsigned int v34 = (uint64_t (*)(uint64_t))v33[5];
                  return v34(v30);
                }
                return result;
              }
            }
            uint64_t v25 = physx::Cm::FlushPool::allocate(v19, 72, 0x10u);
            uint64_t v26 = *(void *)(v1 + 7480) + 8 * v18;
            uint64_t v27 = *(void *)(v1 + 1840);
            *(void *)(v25 + 8) = *(void *)(v27 + 2616);
            *(void *)(v25 + 16) = 0;
            *(_DWORD *)(v25 + 32) = 0;
            unint64_t v28 = (uint64_t (**)(uint64_t))&unk_26E725CF0;
            *(void *)uint64_t v25 = &unk_26E725CF0;
            *(void *)(v25 + 40) = v26;
            *(_DWORD *)(v25 + 48) = v22 - v18 + 1;
            *(void *)(v25 + 56) = v20;
            *(void *)(v25 + 64) = v27;
            *(_DWORD *)(v25 + 32) = 1;
            *(void *)(v25 + 24) = v4;
            if (v4)
            {
              (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
              *(void *)(v25 + 16) = *(void *)(*(void *)(v25 + 24) + 16);
              unint64_t v28 = *(uint64_t (***)(uint64_t))v25;
            }
            uint64_t result = v28[5](v25);
            uint64_t v17 = v22 + 1;
            unsigned int v18 = v22 + 1;
          }
          while (v7 - 1 != v22);
        }
      }
      else
      {
        uint64_t v29 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance
                                                                                  + 8))(physx::shdfnd::Foundation::mInstance)
                                  + 16);
        return v29();
      }
    }
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postSolver>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v1 + 1840);
  (*(void (**)(void))(**(void **)(v1 + 1888) + 32))(*(void *)(v1 + 1888));
  physx::PxcNpMemBlockPool::releaseConstraintMemory(v3 + 40);
  physx::PxcNpMemBlockPool::release(v3 + 40, v3 + 40 + 16 * (1 - *(_DWORD *)(v3 + 220)) + 56, 0);
  *(_DWORD *)(v3 + 220) = 1 - *(_DWORD *)(v3 + 220);
  *(_DWORD *)(v1 + 2104) = 0;
  *(_DWORD *)(v1 + 2120) = 0;
  uint64_t v4 = *(void *)(v1 + 1840);
  *(_DWORD *)(v4 + 2560) = *(_DWORD *)(v3 + 280);
  *(_DWORD *)(v1 + 5368) = 1;
  *(void *)(v1 + 5360) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    *(void *)(v1 + 5352) = *(void *)(*(void *)(v1 + 5360) + 16);
    uint64_t v4 = *(void *)(v1 + 1840);
  }
  unsigned int v5 = *(_DWORD *)(v1 + 48);
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = *(void *)(v1 + 32);
    uint64_t v8 = *(pthread_mutex_t ***)(v4 + 1920);
    unsigned int v9 = *(_DWORD *)(v1 + 48);
    do
    {
      uint64_t v10 = physx::Cm::FlushPool::allocate(v8, 56, 0x10u);
      int v11 = (void *)v10;
      if (v9 >= 0x400) {
        int v12 = 1024;
      }
      else {
        int v12 = v9;
      }
      *(void *)(v10 + 8) = *(void *)(v1 + 24);
      *(void *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(void *)uint64_t v10 = &unk_26E725C10;
      *(void *)(v10 + 40) = v7 + 8 * v6;
      *(_DWORD *)(v10 + 48) = v12;
      *(_DWORD *)(v10 + 32) = 1;
      *(void *)(v10 + 24) = v1 + 5336;
      (*(void (**)(uint64_t))(*(void *)(v1 + 5336) + 32))(v1 + 5336);
      v11[2] = *(void *)(v11[3] + 16);
      (*(void (**)(void *))(*v11 + 40))(v11);
      v6 += 1024;
      v9 -= 1024;
    }
    while (v6 < v5);
  }
  int v13 = *(uint64_t (**)(void))(**(void **)(v1 + 5352) + 144);
  return v13();
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::solver>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_DWORD *)(*(void *)(*(void *)(v1 + 1888) + 8) + 16) = 0;
  uint64_t v3 = *(void *)(v1 + 1880);
  uint64_t v4 = *(unsigned int *)(v3 + 384);
  *(void *)(v1 + 4704) = 0;
  uint64_t v41 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 1904) + 248))(*(void *)(v1 + 1904), v4);
  unsigned int v40 = *(_DWORD *)(v1 + 4268) & 8;
  unint64_t v5 = *(_DWORD *)(v1 + 4424) & 0x7FFFFFFF;
  if (v5)
  {
    unsigned int v6 = *(unsigned int **)(v1 + 4416);
    unsigned int v7 = *v6;
    if (*v6)
    {
      uint64_t v8 = 0;
LABEL_7:
      unsigned int v9 = __clz(__rbit32(v7)) | (32 * v8);
      int v10 = (v7 - 1) & v7;
      if (!v10)
      {
        uint64_t v11 = v8;
        if ((int)v8 + 1 > v5) {
          uint64_t v8 = (v8 + 1);
        }
        else {
          uint64_t v8 = v5;
        }
        unint64_t v12 = v11 + 1;
        while (v12 < v5)
        {
          int v10 = v6[v12++];
          if (v10)
          {
            uint64_t v8 = (v12 - 1);
            goto LABEL_16;
          }
        }
        int v10 = 0;
      }
LABEL_16:
      while (v9 != -1)
      {
        uint64_t v13 = physx::Cm::FlushPool::allocate(v41, 1096, 0x10u);
        int v14 = *(_DWORD *)(v1 + 1984);
        uint64_t v15 = v3;
        uint64_t v16 = *(void *)(v1 + 1880);
        uint64_t v17 = *(void *)(v1 + 1904);
        uint64_t v18 = *(void *)(v1 + 24);
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(_DWORD *)(v13 + 32) = 0;
        *(void *)uint64_t v13 = &unk_26E725E40;
        *(void *)(v13 + 8) = v18;
        memset_pattern16((void *)(v13 + 36), &unk_234420780, 0x400uLL);
        unint64_t v19 = 0;
        *(_DWORD *)(v13 + 1064) = v14;
        *(void *)(v13 + 1072) = v16;
        uint64_t v3 = v15;
        *(void *)(v13 + 1080) = v17;
        *(unsigned char *)(v13 + 1088) = v40 >> 3;
        uint64_t v20 = v8;
        unsigned int v21 = v10;
        uint64_t v22 = *(void *)(v15 + 248);
        while (1)
        {
          uint64_t v23 = *(void *)(v22 + 32 * (v9 & 0x1FFFFFF) + 24);
          if (!v23
            || (unint64_t v24 = v13 + 4 * v19,
                ++v19,
                *(_DWORD *)(v24 + 36) = v9 << 7,
                (*(char *)(*(void *)(v23 + 40) + 28) & 0x80000000) == 0))
          {
            *(_DWORD *)(*(void *)(v1 + 4416) + 4 * (v9 >> 5)) &= ~(1 << v9);
          }
          if (!v21) {
            break;
          }
          int v10 = (v21 - 1) & v21;
          if (v10)
          {
            uint64_t v8 = v20;
          }
          else
          {
            unsigned int v25 = *(_DWORD *)(v1 + 4424) & 0x7FFFFFFF;
            if ((int)v20 + 1 > v25) {
              uint64_t v8 = (v20 + 1);
            }
            else {
              uint64_t v8 = v25;
            }
            LODWORD(v26) = v20;
            while (v8 - 1 != v26)
            {
              uint64_t v26 = (v26 + 1);
              int v10 = *(_DWORD *)(*(void *)(v1 + 4416) + 4 * v26);
              if (v10)
              {
                uint64_t v8 = v26;
                goto LABEL_32;
              }
            }
            int v10 = 0;
          }
LABEL_32:
          unsigned int v9 = __clz(__rbit32(v21)) | (32 * v20);
          if (v19 <= 0xFF)
          {
            uint64_t v20 = v8;
            unsigned int v21 = v10;
            if (v9 != -1) {
              continue;
            }
          }
          goto LABEL_36;
        }
        int v10 = 0;
        unsigned int v9 = -1;
        uint64_t v8 = v20;
LABEL_36:
        *(_DWORD *)(v13 + 1060) = v19;
        *(_DWORD *)(v13 + 32) = 1;
        *(void *)(v13 + 24) = v2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
          *(void *)(v13 + 16) = *(void *)(*(void *)(v13 + 24) + 16);
          uint64_t v27 = *(void (***)(uint64_t))v13;
        }
        else
        {
          uint64_t v27 = (void (**)(uint64_t))&unk_26E725E40;
        }
        v27[5](v13);
      }
    }
    else
    {
      uint64_t v8 = 0;
      while (v5 - 1 != v8)
      {
        unsigned int v7 = v6[++v8];
        if (v7) {
          goto LABEL_7;
        }
      }
    }
  }
  unsigned int v28 = *(_DWORD *)(v3 + 400);
  if (v28)
  {
    unsigned int v29 = 0;
    uint64_t v30 = *(void *)(v3 + 392);
    unsigned int v31 = *(_DWORD *)(v3 + 400);
    do
    {
      unsigned int v32 = v31 - 32;
      if (v31 >= 0x20) {
        int v33 = 32;
      }
      else {
        int v33 = v31;
      }
      uint64_t v34 = physx::Cm::FlushPool::allocate(v41, 72, 0x10u);
      int v35 = *(_DWORD *)(v1 + 1984);
      uint64_t v36 = *(void *)(v1 + 1880);
      *(void *)(v34 + 8) = *(void *)(v1 + 24);
      *(void *)(v34 + 16) = 0;
      *(_DWORD *)(v34 + 32) = 0;
      float v37 = (void (**)(uint64_t))&unk_26E725EB0;
      *(void *)uint64_t v34 = &unk_26E725EB0;
      *(void *)(v34 + 40) = v30 + 4 * v29;
      *(_DWORD *)(v34 + 48) = v33;
      *(_DWORD *)(v34 + 52) = v35;
      *(void *)(v34 + 56) = v36;
      *(unsigned char *)(v34 + 64) = v40 >> 3;
      *(_DWORD *)(v34 + 32) = 1;
      *(void *)(v34 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        *(void *)(v34 + 16) = *(void *)(*(void *)(v34 + 24) + 16);
        float v37 = *(void (***)(uint64_t))v34;
      }
      v37[5](v34);
      v29 += 32;
      unsigned int v31 = v32;
    }
    while (v29 < v28);
  }
  *(_DWORD *)(v1 + 1964) = 0;
  uint64_t v38 = *(void *)(v1 + 1840);
  uint64_t result = physx::PxcNpMemBlockPool::release(v38 + 40, v38 + 40 + 16 * (1 - *(_DWORD *)(v38 + 216)) + 88, 0);
  *(_DWORD *)(v38 + 216) = 1 - *(_DWORD *)(v38 + 216);
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateBodiesAndShapes>::runInternal(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 1904) + 112))(*(void *)(*(void *)(a1 + 40) + 1904), *(void *)(a1 + 24));
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateSimulationController>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void, void))(**(void **)(v1 + 1888) + 24))(*(void *)(v1 + 1888), *(void *)(a1 + 24));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 1904) + 144);
  return v2();
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateDynamics>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 + 24);
  *(_DWORD *)(v1 + 5816) = 1;
  *(void *)(v1 + 5808) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    *(void *)(v1 + 5800) = *(void *)(*(void *)(v1 + 5808) + 16);
  }
  *(_DWORD *)(v1 + 5760) = 1;
  *(void *)(v1 + 5752) = v1 + 5784;
  (*(void (**)(uint64_t))(*(void *)(v1 + 5784) + 32))(v1 + 5784);
  *(void *)(v1 + 5744) = *(void *)(*(void *)(v1 + 5752) + 16);
  *(_DWORD *)(v1 + 5704) = 1;
  *(void *)(v1 + 5696) = v1 + 5728;
  (*(void (**)(uint64_t))(*(void *)(v1 + 5728) + 32))(v1 + 5728);
  *(void *)(v1 + 5688) = *(void *)(*(void *)(v1 + 5696) + 16);
  physx::PxcNpMemBlockPool::acquireConstraintMemory((pthread_mutex_t ***)(*(void *)(v1 + 1840) + 40));
  uint64_t v4 = *(void *)(v1 + 1840);
  int v5 = *(_DWORD *)(v4 + 2608);
  (*(void (**)(void *__return_ptr))(**(void **)(v4 + 1776) + 168))(v12);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 1840) + 1776) + 136))(*(void *)(*(void *)(v1 + 1840) + 1776));
  uint64_t v7 = *(void *)(v1 + 1848);
  unsigned int v8 = (*(_DWORD *)(*(void *)(v1 + 4296) + 8) + 31) >> 5;
  int v9 = *(_DWORD *)(v7 + 232);
  int v10 = *(void **)(v7 + 224);
  if (v8 > (v9 & 0x7FFFFFFFu))
  {
    if ((v9 & 0x80000000) == 0 && v10) {
      (*(void (**)(void, void))(**(void **)(v7 + 240) + 24))(*(void *)(v7 + 240), *(void *)(v7 + 224));
    }
    *(_DWORD *)(v7 + 232) = v8;
    int v10 = (void *)(*(uint64_t (**)(void, void, const char *, uint64_t))(**(void **)(v7 + 240) + 16))(*(void *)(v7 + 240), 4 * v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 461);
    *(void *)(v7 + 224) = v10;
    int v9 = *(_DWORD *)(v7 + 232);
  }
  bzero(v10, (4 * v9));
  (*(void (**)(void, void, uint64_t, uint64_t, void, void, void, void, float, int, void *, uint64_t, uint64_t, int))(**(void **)(v1 + 1888) + 8))(*(void *)(v1 + 1888), *(void *)(v1 + 1880), v2, v1 + 5672, *(void *)(v1 + 4464), *(unsigned int *)(v1 + 4472), *(void *)(v1 + 4480), *(unsigned int *)(v1 + 4488), *(float *)(v1 + 1984), v5, v12, v6, v1 + 1952, *(_DWORD *)(v7 + 232) & 0x7FFFFFFF);
  *(_DWORD *)(*(void *)(v1 + 1880) + 136) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 5800) + 144))(*(void *)(v1 + 5800), v1 + 5784);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 5744) + 144))(*(void *)(v1 + 5744), v1 + 5728);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 5688) + 144))(*(void *)(v1 + 5688), v1 + 5672);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_DWORD *)(v1 + 6040) = 1;
  *(void *)(v1 + 6032) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v3 = *(void *)(*(void *)(v1 + 6032) + 16);
    *(void *)(v1 + 6024) = v3;
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 6024);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 144))(v3, v1 + 6008);
  *(_DWORD *)(v1 + 6096) = 1;
  *(void *)(v1 + 6088) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(void *)(*(void *)(v1 + 6088) + 16);
    *(void *)(v1 + 6080) = v4;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 6080);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 144))(v4, v1 + 6064);
  uint64_t v6 = *(void *)(v1 + 1848);
  int v7 = *(_DWORD *)(v6 + 480);
  if (v7)
  {
    unsigned int v8 = *(unint64_t **)(v6 + 472);
    uint64_t v9 = *(void *)(v1 + 3992);
    do
    {
      --v7;
      uint64_t result = physx::Sc::NPhaseCore::findInteraction(v9, *v8, v8[1]);
      v8[2] = result;
      v8 += 3;
    }
    while (v7);
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts2>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_DWORD *)(v1 + 5872) = 1;
  *(void *)(v1 + 5864) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    *(void *)(v1 + 5856) = *(void *)(*(void *)(v1 + 5864) + 16);
  }
  *(_DWORD *)(v1 + 5928) = 1;
  *(void *)(v1 + 5920) = v1 + 5840;
  (*(void (**)(uint64_t))(*(void *)(v1 + 5840) + 32))(v1 + 5840);
  uint64_t v3 = *(void *)(*(void *)(v1 + 5920) + 16);
  *(void *)(v1 + 5912) = v3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 144))(v3, v1 + 5896);
  *(_DWORD *)(v1 + 5984) = 1;
  *(void *)(v1 + 5976) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(void *)(*(void *)(v1 + 5976) + 16);
    *(void *)(v1 + 5968) = v4;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 5968);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 144))(v4, v1 + 5952);
  uint64_t v5 = *(void *)(v1 + 1848);
  int v6 = *(_DWORD *)(v5 + 480);
  if (v6)
  {
    int v7 = (uint64_t *)(*(void *)(v5 + 472) + 16);
    do
    {
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (!*(unsigned char *)(v8 + 36))
        {
          unsigned int v9 = *(_DWORD *)(v8 + 96);
          if (v9 != -1)
          {
            physx::IG::SimpleIslandManager::removeConnection(*(void *)(*(void *)(*(void *)(v8 + 8) + 72) + 1880), v9);
            *(_DWORD *)(v8 + 96) = -1;
          }
        }
      }
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  int v10 = *(uint64_t (**)(void))(**(void **)(v1 + 5856) + 144);
  return v10();
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostContacts3>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unsigned int v2 = *(_DWORD *)(v1 + 4268);
  (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v12);
  uint64_t v3 = *(void *)(v1 + 1848);
  int v4 = *(_DWORD *)(v3 + 480);
  int v5 = (v2 >> 3) & 1;
  if (v4)
  {
    uint64_t v6 = *(void *)(v3 + 472);
    do
    {
      --v4;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(void *)(v1 + 3992), *(void *)v6, *(void *)(v6 + 8), 0, *(void *)(v6 + 16), (uint64_t)v12, v5);
      v6 += 24;
    }
    while (v4);
  }
  int v7 = *(_DWORD *)(v3 + 496);
  if (v7)
  {
    uint64_t v8 = *(unint64_t **)(v3 + 488);
    do
    {
      --v7;
      unint64_t v9 = *v8;
      unint64_t v10 = v8[1];
      v8 += 3;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(void *)(v1 + 3992), v9, v10, 0, 0, (uint64_t)v12, v5);
    }
    while (v7);
  }
  (*(void (**)(void))(**(void **)(v3 + 392) + 160))(*(void *)(v3 + 392));
  (*(void (**)(void))(**(void **)(v3 + 392) + 136))(*(void *)(v3 + 392));
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 6136) + 144))(*(void *)(v1 + 6136), v1 + 6120);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::destroyManagers>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 5808);
  *(_DWORD *)(v1 + 6152) = 1;
  *(void *)(v1 + 6144) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    *(void *)(v1 + 6136) = *(void *)(*(void *)(v1 + 6144) + 16);
  }
  physx::IG::SimpleIslandManager::thirdPassIslandGen(*(void *)(v1 + 1880), v1 + 6120);
  uint64_t v3 = *(void *)(v1 + 1848);
  int v4 = *(_DWORD *)(v3 + 480);
  if (v4)
  {
    int v5 = (uint64_t *)(*(void *)(v3 + 472) + 16);
    do
    {
      uint64_t v6 = *v5;
      if (*v5 && !*(unsigned char *)(v6 + 36))
      {
        if (*(void *)(v6 + 88))
        {
          uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 72);
          (*(void (**)(void))(**(void **)(*(void *)(v7 + 1840) + 1776) + 72))(*(void *)(*(void *)(v7 + 1840) + 1776));
          physx::PxsContext::destroyContactManager(*(void *)(v7 + 1840), *(void *)(v6 + 88));
          *(void *)(v6 + 88) = 0;
        }
      }
      v5 += 3;
      --v4;
    }
    while (v4);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::lostTouchReports>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v7);
  uint64_t v2 = *(void *)(v1 + 1848);
  int v3 = *(_DWORD *)(v2 + 480);
  if (v3)
  {
    int v4 = (physx::Sc::ShapeInteraction **)(*(void *)(v2 + 472) + 16);
    int v5 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    do
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        if (!*((unsigned char *)v6 + 36)) {
          physx::Sc::NPhaseCore::lostTouchReports(*(void *)(v1 + 3992), v6, 4, 0, (uint64_t)v7, v5);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unregisterInteractions>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 1848);
  int v3 = *(_DWORD *)(v2 + 480);
  if (v3)
  {
    int v4 = (uint64_t *)(*(void *)(v2 + 472) + 16);
    do
    {
      uint64_t v5 = *v4;
      if (*v4 && (*(unsigned __int8 *)(v5 + 36) | 2) == 2)
      {
        physx::Sc::Scene::unregisterInteraction(v1, v5 + 8);
        uint64_t v6 = *(void *)(v1 + 3992) + 3704;
        unint64_t v7 = *(void *)(v5 + 40);
        unint64_t v8 = *(void *)(v5 + 48);
        if (v7 <= v8) {
          uint64_t v9 = *(void *)(v5 + 40);
        }
        else {
          uint64_t v9 = *(void *)(v5 + 48);
        }
        if (v7 <= v8) {
          unint64_t v7 = *(void *)(v5 + 48);
        }
        v10[0] = v9;
        v10[1] = v7;
        uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v6, v10);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEventsIslands>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(_DWORD *)(v1 + 4456))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    do
    {
      uint64_t result = physx::IG::SimpleIslandManager::setEdgeDisconnected(*(void *)(v1 + 1880), *(_DWORD *)(*(void *)(*(void *)(v1 + 4448) + v3) + 96));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(unsigned int *)(v1 + 4456));
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processNarrowPhaseLostTouchEvents>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = (*(void *(**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v9);
  if (*(_DWORD *)(v1 + 4456))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    int v5 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 4448) + v4);
      uint64_t result = (void *)physx::Sc::ShapeInteraction::managerLostTouch((physx::Sc::ShapeInteraction *)v6, 0, 1, (uint64_t)v9, v5);
      if (result && (*(unsigned char *)(v6 + 66) & 4) == 0)
      {
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v6 + 40) + 8) + 80) + 13) - 1 >= 2) {
          unint64_t v7 = 0;
        }
        else {
          unint64_t v7 = *(physx::Sc::BodySim **)(*(void *)(v6 + 40) + 8);
        }
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v6 + 48) + 8) + 80) + 13) - 1 >= 2) {
          unint64_t v8 = 0;
        }
        else {
          unint64_t v8 = *(physx::Sc::BodySim **)(*(void *)(v6 + 48) + 8);
        }
        uint64_t result = (void *)physx::Sc::Scene::addToLostTouchList(v1, v7, v8);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < *(unsigned int *)(v1 + 4456));
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postThirdPassIslandGen>::runInternal(uint64_t a1, physx::Sc::Interaction *a2, int8x8_t a3)
{
  unint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = v3[235];
  uint64_t v5 = *(unsigned int *)(v4 + 576);
  if (v5)
  {
    uint64_t v6 = *(unsigned int **)(v4 + 568);
    do
    {
      unsigned int v7 = *v6++;
      unint64_t v8 = *(void *)(v4 + 248) + 32 * ((unint64_t)v7 >> 7);
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9 && (*(unsigned char *)(v8 + 4) & 2) == 0) {
        physx::Sc::BodySim::setActive((physx::Sc::BodySim *)(v9 - 96), 0, 2, a3);
      }
      --v5;
    }
    while (v5);
  }
  uint64_t v10 = *(unsigned int *)(v4 + 592);
  if (v10)
  {
    uint64_t v11 = *(unsigned int **)(v4 + 584);
    do
    {
      unsigned int v12 = *v11++;
      unint64_t v13 = *(void *)(v4 + 248) + 32 * ((unint64_t)v12 >> 7);
      int v14 = *(physx::Sc::ArticulationSim **)(*(void *)(v13 + 24) + 24);
      if (v14 && (*(unsigned char *)(v13 + 4) & 2) == 0) {
        physx::Sc::ArticulationSim::setActive(v14, 0, 2, a3);
      }
      --v10;
    }
    while (v10);
  }
  uint64_t v15 = v3[235];
  uint64_t v16 = *(unsigned int *)(v15 + 1440);
  if (v16)
  {
    uint64_t v17 = *(unsigned int **)(v15 + 1432);
    do
    {
      unsigned int v19 = *v17++;
      unsigned int v18 = v19;
      uint64_t v20 = *(unsigned __int8 **)(*(void *)(*(void *)(v3[235] + 64) + 8 * (v19 / *(_DWORD *)(v3[235] + 88)))
                                + 8 * (v19 % *(_DWORD *)(v3[235] + 88)));
      if (v20
        && (v20[29] & 0x20) != 0
        && (*(_WORD *)(*(void *)(*(void *)(v15 + 920) + 8 * (v18 / *(_DWORD *)(v15 + 944)))
                     + 16 * (v18 % *(_DWORD *)(v15 + 944))
                     + 4) & 4) == 0
        && physx::Sc::deactivateInteraction((physx::Sc *)v20, a2)
        && v20[28] <= 2u)
      {
        physx::Sc::Scene::notifyInteractionDeactivated((uint64_t)v3, (uint64_t)v20);
      }
      --v16;
    }
    while (v16);
  }
  (*(void (**)(void *__return_ptr))(**(void **)(v3[230] + 1776) + 168))(v21);
  physx::Sc::NPhaseCore::processPersistentContactEvents(v3[499], (uint64_t)v21);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postIslandGen>::runInternal(uint64_t a1)
{
  return physx::Sc::NPhaseCore::processTriggerInteractions(*(uint64_t **)(*(void *)(a1 + 40) + 3992), *(physx::PxBaseTask **)(a1 + 24));
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandGen>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  *(_DWORD *)(v1 + 6488) = 1;
  *(void *)(v1 + 6480) = v1 + 5616;
  (*(void (**)(void))(*(void *)(v1 + 5616) + 32))();
  *(void *)(v1 + 6472) = *(void *)(*(void *)(v1 + 6480) + 16);
  *(_DWORD *)(v1 + 6432) = 1;
  *(void *)(v1 + 6424) = v1 + 6456;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6456) + 32))(v1 + 6456);
  *(void *)(v1 + 6416) = *(void *)(*(void *)(v1 + 6424) + 16);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6472) + 144))(*(void *)(v1 + 6472), v1 + 6456);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6416) + 144))(*(void *)(v1 + 6416), v1 + 6400);
  unint64_t v3 = *(_DWORD **)(v1 + 1840);
  LODWORD(v20[0]) = v3[435];
  unsigned int v4 = v20[0];
  unsigned int v5 = v3[434];
  int v18 = 0;
  unsigned int v19 = v5;
  *(_DWORD *)(v1 + 4440) = 0;
  if ((*(_DWORD *)(v1 + 4444) & 0x7FFFFFFFu) < v4) {
    physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(v1 + 4432, v4);
  }
  *(_DWORD *)(v1 + 4440) = v4;
  *(_DWORD *)(v1 + 4456) = 0;
  if ((*(_DWORD *)(v1 + 4460) & 0x7FFFFFFFu) < v5) {
    physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(v1 + 4448, v5);
  }
  *(_DWORD *)(v1 + 4456) = v5;
  physx::PxsContext::fillManagerTouchEvents((uint64_t)v3, *(char **)(v1 + 4432), v20, *(char **)(v1 + 4448), &v19, 0, &v18);
  unsigned int v7 = v19;
  int v6 = v20[0];
  *(_DWORD *)(v1 + 4440) = v20[0];
  *(_DWORD *)(v1 + 4456) = v7;
  v3[643] = v6;
  v3[644] = v7;
  *(_DWORD *)(v1 + 6376) = 1;
  *(void *)(v1 + 6368) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v8 = *(void *)(*(void *)(v1 + 6368) + 16);
    *(void *)(v1 + 6360) = v8;
  }
  else
  {
    uint64_t v8 = *(void *)(v1 + 6360);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 144))(v8, v1 + 6344);
  (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v20);
  unsigned int v10 = *(_DWORD *)(v1 + 4440);
  if (v10)
  {
    unsigned int v11 = 0;
    int v12 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
    unsigned int v13 = *(_DWORD *)(v1 + 4440);
    do
    {
      if (v13 >= 0x100uLL) {
        uint64_t v14 = 256;
      }
      else {
        uint64_t v14 = v13;
      }
      int v15 = v10 - v11;
      if (v10 - v11 >= 0x100) {
        int v15 = 256;
      }
      if (v15)
      {
        uint64_t v16 = (16 * v11) | 8;
        do
        {
          uint64_t v17 = *(int32x2_t ***)(*(void *)(v1 + 4432) + v16);
          physx::Sc::NPhaseCore::managerNewTouch(*(int32x2_t **)(v1 + 3992), v17, v9);
          physx::Sc::ShapeInteraction::managerNewTouch((physx::Sc::ShapeInteraction *)v17, 0, 1, (uint64_t)v20, v12);
          v16 += 16;
          --v14;
        }
        while (v14);
      }
      v11 += 256;
      v13 -= 256;
    }
    while (v11 < v10);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preRigidBodyNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  unsigned int v72 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
  int v3 = *(_DWORD *)(v1 + 7624);
  uint64_t v4 = v3 & 0x7FFFFFFF;
  if ((v3 & 0x7FFFFFFF) != 0)
  {
    unsigned int v5 = *(unsigned int **)(v1 + 7616);
    unsigned int v6 = *v5;
    if (*v5)
    {
      LODWORD(v4) = 0;
      goto LABEL_9;
    }
    uint64_t v7 = 0;
    uint64_t v8 = v5 + 1;
    while (v4 - 1 != v7)
    {
      unsigned int v6 = v8[v7++];
      if (v6)
      {
        LODWORD(v4) = v7;
        goto LABEL_9;
      }
    }
  }
  unsigned int v6 = 0;
LABEL_9:
  uint64_t v9 = physx::Cm::FlushPool::allocate(v72, 1096, 0x10u);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = *(void *)(*(void *)(v1 + 2072) + 8);
  int v12 = *(_DWORD *)(v1 + 1984);
  uint64_t v13 = *(void *)(v1 + 2064);
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 0;
  *(void *)uint64_t v9 = &unk_26E725A50;
  *(void *)(v9 + 8) = v10;
  *(void *)(v9 + 40) = v11;
  *(_DWORD *)(v9 + 48) = v12;
  *(_DWORD *)(v9 + 1080) = 0;
  *(void *)(v9 + 1088) = v13;
  uint64_t v14 = *(void *)(v1 + 1880);
  int v15 = (void *)(*(void *)(v1 + 1848) + 224);
  BOOL v16 = *(unsigned char *)(v1 + 2080) != 0;
  if (v6)
  {
    uint64_t v17 = v9;
    do
    {
      unsigned int v18 = v6;
      int v19 = v4;
      v6 &= v6 - 1;
      if (!v6)
      {
        if ((int)v4 + 1 > (*(_DWORD *)(v1 + 7624) & 0x7FFFFFFFu)) {
          LODWORD(v4) = v4 + 1;
        }
        else {
          LODWORD(v4) = *(_DWORD *)(v1 + 7624) & 0x7FFFFFFF;
        }
        int v20 = v19;
        while (v4 - 1 != v20)
        {
          unsigned int v6 = *(_DWORD *)(*(void *)(v1 + 7616) + 4 * ++v20);
          if (v6)
          {
            LODWORD(v4) = v20;
            goto LABEL_20;
          }
        }
        unsigned int v6 = 0;
      }
LABEL_20:
      unsigned int v21 = __clz(__rbit32(v18)) | (32 * v19);
      if (v21 == -1) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(v14 + 248) + 32 * (v21 & 0x1FFFFFF) + 24);
      if (v22)
      {
        uint64_t v23 = *(unsigned int *)(v17 + 1080);
        int v24 = v23 + 1;
        *(_DWORD *)(v17 + 1080) = v23 + 1;
        *(void *)(v17 + 8 * v23 + 56) = v22 - 96;
        unsigned int v25 = *(uint64_t ***)(v22 - 40);
        if (v25)
        {
          do
          {
            if (v25[7][8])
            {
              unint64_t v26 = *((unsigned int *)v25 + 4);
              physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v15, (v26 & 0x7FFFFFFF) + 1);
              *(_DWORD *)(*v15 + ((v26 >> 3) & 0xFFFFFFC)) |= 1 << v26;
            }
            unsigned int v25 = (uint64_t **)*v25;
          }
          while (v25);
          int v24 = *(_DWORD *)(v17 + 1080);
        }
        if (v24 == 128)
        {
          *(_DWORD *)(v17 + 32) = 1;
          *(void *)(v17 + 24) = v2;
          if (v2)
          {
            (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
            *(void *)(v17 + 16) = *(void *)(*(void *)(v17 + 24) + 16);
          }
          (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
          uint64_t v17 = physx::Cm::FlushPool::allocate(v72, 1096, 0x10u);
          uint64_t v27 = *(void *)(v1 + 24);
          uint64_t v28 = *(void *)(*(void *)(v1 + 2072) + 8);
          int v29 = *(_DWORD *)(v1 + 1984);
          uint64_t v30 = *(void *)(v1 + 2064);
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 24) = 0;
          *(_DWORD *)(v17 + 32) = 0;
          *(void *)uint64_t v17 = &unk_26E725A50;
          *(void *)(v17 + 8) = v27;
          *(void *)(v17 + 40) = v28;
          *(_DWORD *)(v17 + 48) = v29;
          *(_DWORD *)(v17 + 1080) = 0;
          *(void *)(v17 + 1088) = v30;
        }
        BOOL v16 = 1;
      }
    }
    while (v6);
    if (*(_DWORD *)(v17 + 1080))
    {
      *(_DWORD *)(v17 + 32) = 1;
      *(void *)(v17 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        *(void *)(v17 + 16) = *(void *)(*(void *)(v17 + 24) + 16);
      }
      (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    }
  }
  int v31 = *(_DWORD *)(v1 + 7640);
  uint64_t v32 = v31 & 0x7FFFFFFF;
  if ((v31 & 0x7FFFFFFF) != 0)
  {
    int v33 = *(unsigned int **)(v1 + 7632);
    unsigned int v34 = *v33;
    if (*v33)
    {
      uint64_t v35 = 0;
      do
      {
LABEL_43:
        int v38 = (v34 - 1) & v34;
        if (v38)
        {
          uint64_t v39 = v35;
        }
        else
        {
          unsigned int v40 = *(_DWORD *)(v1 + 7640) & 0x7FFFFFFF;
          if ((int)v35 + 1 > v40) {
            uint64_t v39 = (v35 + 1);
          }
          else {
            uint64_t v39 = v40;
          }
          LODWORD(v41) = v35;
          while (v39 - 1 != v41)
          {
            uint64_t v41 = (v41 + 1);
            int v38 = *(_DWORD *)(*(void *)(v1 + 7632) + 4 * v41);
            if (v38)
            {
              uint64_t v39 = v41;
              goto LABEL_53;
            }
          }
          int v38 = 0;
        }
LABEL_53:
        int v42 = __clz(__rbit32(v34)) | (32 * v35);
        if (v42 == -1) {
          break;
        }
        uint64_t v43 = *(void *)(*(void *)(*(void *)(v14 + 248) + 32 * (v42 & 0x1FFFFFF) + 24) + 24);
        if (v43)
        {
          uint64_t v44 = physx::Cm::FlushPool::allocate(v72, 72, 0x10u);
          uint64_t v45 = *(void *)(*(void *)(v1 + 2072) + 8);
          int v46 = *(_DWORD *)(v1 + 1984);
          uint64_t v47 = *(void *)(v1 + 2064);
          *(void *)(v44 + 8) = *(void *)(v1 + 24);
          *(void *)(v44 + 16) = 0;
          *(_DWORD *)(v44 + 32) = 0;
          uint64_t v48 = (void (**)(uint64_t))&unk_26E725AC0;
          *(void *)uint64_t v44 = &unk_26E725AC0;
          *(void *)(v44 + 40) = v45;
          *(_DWORD *)(v44 + 48) = v46;
          *(void *)(v44 + 56) = v43;
          *(void *)(v44 + 64) = v47;
          *(_DWORD *)(v44 + 32) = 1;
          *(void *)(v44 + 24) = v2;
          if (v2)
          {
            (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
            *(void *)(v44 + 16) = *(void *)(*(void *)(v44 + 24) + 16);
            uint64_t v48 = *(void (***)(uint64_t))v44;
          }
          v48[5](v44);
          BOOL v16 = 1;
        }
        unsigned int v34 = v38;
        uint64_t v35 = v39;
      }
      while (v38);
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v36 = v33 + 1;
      uint64_t v37 = v32 - 1;
      while (v37 != v35)
      {
        unsigned int v34 = v36[v35++];
        if (v34) {
          goto LABEL_43;
        }
      }
    }
  }
  *(unsigned char *)(v1 + 2080) = v16;
  int v49 = *(_DWORD *)(v1 + 4520);
  uint64_t v50 = v49 & 0x7FFFFFFF;
  if ((v49 & 0x7FFFFFFF) != 0)
  {
    uint64_t v51 = *(unsigned int **)(v1 + 4512);
    unsigned int v52 = *v51;
    if (*v51)
    {
      LODWORD(v50) = 0;
      goto LABEL_67;
    }
    uint64_t v53 = 0;
    uint64_t v54 = v51 + 1;
    while (v50 - 1 != v53)
    {
      unsigned int v52 = v54[v53++];
      if (v52)
      {
        LODWORD(v50) = v53;
        goto LABEL_67;
      }
    }
  }
  unsigned int v52 = 0;
LABEL_67:
  uint64_t v55 = *(void *)(*(void *)(v1 + 1840) + 2592);
  uint64_t v56 = *(void *)(*(void *)(v1 + 1848) + 400);
  uint64_t v57 = physx::Cm::FlushPool::allocate(v72, 2112, 0x10u);
  uint64_t v58 = *(void *)(v1 + 24);
  *(void *)(v57 + 16) = 0;
  *(void *)(v57 + 24) = 0;
  *(_DWORD *)(v57 + 32) = 0;
  *(void *)uint64_t v57 = &unk_26E725B30;
  *(void *)(v57 + 8) = v58;
  uint64_t v71 = v55;
  *(void *)(v57 + 40) = v55;
  *(void *)(v57 + 48) = v56;
  *(_DWORD *)(v57 + 2104) = 0;
  if (v52)
  {
    char v59 = 0;
    do
    {
      int v60 = v50;
      unsigned int v61 = v52;
      v52 &= v52 - 1;
      if (!v52)
      {
        if ((int)v50 + 1 > (*(_DWORD *)(v1 + 4520) & 0x7FFFFFFFu)) {
          LODWORD(v50) = v50 + 1;
        }
        else {
          LODWORD(v50) = *(_DWORD *)(v1 + 4520) & 0x7FFFFFFF;
        }
        int v62 = v60;
        while (v50 - 1 != v62)
        {
          unsigned int v52 = *(_DWORD *)(*(void *)(v1 + 4512) + 4 * ++v62);
          if (v52)
          {
            LODWORD(v50) = v62;
            goto LABEL_78;
          }
        }
        unsigned int v52 = 0;
      }
LABEL_78:
      unsigned int v63 = __clz(__rbit32(v61));
      unsigned int v64 = v63 | (32 * v60);
      if (v64 == -1) {
        break;
      }
      uint64_t v65 = *(void *)(v1 + 1848);
      if (*(_DWORD *)(v65 + 296) > v64)
      {
        unint64_t v66 = *(void *)(*(void *)(v65 + 288) + 16 * (v63 | (32 * v60))) & 0xFFFFFFFFFFFFFFFCLL;
        if (v66)
        {
          physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v15, v64 + 1);
          char v59 = 1;
          *(_DWORD *)(*v15 + 4 * (v60 & 0x7FFFFFF)) |= 1 << v63;
          uint64_t v67 = *(unsigned int *)(v57 + 2104);
          *(_DWORD *)(v57 + 2104) = v67 + 1;
          *(void *)(v57 + 8 * v67 + 56) = v66;
          if (v67 == 255)
          {
            *(_DWORD *)(v57 + 32) = 1;
            *(void *)(v57 + 24) = v2;
            if (v2)
            {
              (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
              *(void *)(v57 + 16) = *(void *)(*(void *)(v57 + 24) + 16);
            }
            (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
            uint64_t v57 = physx::Cm::FlushPool::allocate(v72, 2112, 0x10u);
            uint64_t v68 = *(void *)(v1 + 24);
            *(void *)(v57 + 16) = 0;
            *(void *)(v57 + 24) = 0;
            *(_DWORD *)(v57 + 32) = 0;
            *(void *)uint64_t v57 = &unk_26E725B30;
            *(void *)(v57 + 8) = v68;
            *(void *)(v57 + 40) = v71;
            *(void *)(v57 + 48) = v56;
            *(_DWORD *)(v57 + 2104) = 0;
            char v59 = 1;
          }
        }
      }
    }
    while (v52);
    if (v59)
    {
      *(unsigned char *)(*(void *)(v1 + 2064) + 24) = 1;
      *(unsigned char *)(*(void *)(*(void *)(v1 + 1840) + 2592) + 28) = 1;
    }
  }
  if (*(_DWORD *)(v57 + 2104))
  {
    *(_DWORD *)(v57 + 32) = 1;
    *(void *)(v57 + 24) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      *(void *)(v57 + 16) = *(void *)(*(void *)(v57 + 24) + 16);
    }
    (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
  }
  unint64_t v69 = *(void **)(v1 + 4512);
  size_t v70 = (4 * *(_DWORD *)(v1 + 4520));
  bzero(v69, v70);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::setEdgesConnected>::runInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(v3 + 4440);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 16 * v4;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v3 + 4432) + v5 + 8);
      if ((*(unsigned char *)(v7 + 66) & 4) == 0) {
        physx::IG::SimpleIslandManager::setEdgeConnected(*(void **)(v3 + 1880), *(unsigned int *)(v7 + 96), a3);
      }
      v5 += 16;
    }
    while (v6 != v5);
  }
  physx::IG::SimpleIslandManager::secondPassIslandGen(*(physx::IG::SimpleIslandManager **)(v3 + 1880));
  uint64_t v9 = *(void *)(v3 + 1880);
  int v10 = *(_DWORD *)(v9 + 384);
  uint64_t v11 = *(unsigned int *)(v9 + 560);
  uint64_t v12 = (v10 - v11);
  if (v10 != v11)
  {
    uint64_t v13 = (unsigned int *)(*(void *)(v9 + 376) + 4 * v11);
    do
    {
      unsigned int v14 = *v13++;
      unint64_t v15 = *(void *)(v9 + 248) + 32 * ((unint64_t)v14 >> 7);
      uint64_t v16 = *(void *)(v15 + 24);
      if (v16 && (*(unsigned char *)(v15 + 4) & 2) != 0) {
        physx::Sc::BodySim::setActive((physx::Sc::BodySim *)(v16 - 96), (physx::Sc::Interaction *)1, 2, v8);
      }
      --v12;
    }
    while (v12);
  }
  int v17 = *(_DWORD *)(v9 + 400);
  uint64_t v18 = *(unsigned int *)(v9 + 564);
  uint64_t v19 = (v17 - v18);
  if (v17 != v18)
  {
    int v20 = (unsigned int *)(*(void *)(v9 + 392) + 4 * v18);
    do
    {
      unsigned int v21 = *v20++;
      unint64_t v22 = *(void *)(v9 + 248) + 32 * ((unint64_t)v21 >> 7);
      uint64_t v23 = *(physx::Sc::ArticulationSim **)(*(void *)(v22 + 24) + 24);
      if (v23)
      {
        if ((*(unsigned char *)(v22 + 4) & 2) != 0) {
          physx::Sc::ArticulationSim::setActive(v23, (physx::Sc::Interaction *)1, 2, v8);
        }
      }
      --v19;
    }
    while (v19);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::fetchPatchEvents>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 1840);
  unsigned int v3 = *(_DWORD *)(v2 + 1748);
  unsigned int v6 = *(_DWORD *)(v2 + 1752);
  unsigned int v4 = v6;
  unsigned int v7 = v3;
  *(_DWORD *)(v1 + 4472) = 0;
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(v1 + 4464, v3);
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 4464, *(_DWORD *)(v1 + 4472));
  *(_DWORD *)(v1 + 4488) = 0;
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::resizeUninitialized(v1 + 4480, v4);
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 4480, *(_DWORD *)(v1 + 4488));
  uint64_t result = physx::PxsContext::fillManagerPatchChangedEvents(*(void *)(v1 + 1840), *(uint64_t **)(v1 + 4464), &v7, *(uint64_t **)(v1 + 4480), &v6);
  *(_DWORD *)(v1 + 4472) = v7;
  *(_DWORD *)(v1 + 4488) = v6;
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::processLostSolverPatches>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v1 + 1840) + 1776) + 168))(v3);
  return (*(uint64_t (**)(void, void, void, void, void *))(**(void **)(v1 + 1888) + 16))(*(void *)(v1 + 1888), *(void *)(v1 + 1880), *(void *)(v1 + 4480), *(unsigned int *)(v1 + 4488), v3);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::rigidBodyNarrowPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 24);
  *(_DWORD *)(v1 + 1876) = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 6952));
  }
  atomic_fetch_add((atomic_uint *volatile)(v1 + 6816), 1u);
  *(void *)(v1 + 6808) = v2[2];
  unsigned int v6 = v2;
  uint64_t v3 = *(unsigned int *)(v1 + 6880);
  if ((*(_DWORD *)(v1 + 6884) & 0x7FFFFFFFu) <= v3)
  {
    physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 6832, &v6);
  }
  else
  {
    *(void *)(*(void *)(v1 + 6872) + 8 * v3) = v2;
    *(_DWORD *)(v1 + 6880) = v3 + 1;
  }
  (*(void (**)(void *))(*v2 + 32))(v2);
  *(unsigned char *)(v1 + 6944) = 1;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 6952));
  }
  *(_DWORD *)(v1 + 6768) = 1;
  *(void *)(v1 + 6760) = v1 + 6792;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6792) + 32))(v1 + 6792);
  *(void *)(v1 + 6752) = *(void *)(*(void *)(v1 + 6760) + 16);
  *(_DWORD *)(v1 + 6712) = 1;
  *(void *)(v1 + 6704) = v1 + 6736;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6736) + 32))(v1 + 6736);
  *(void *)(v1 + 6696) = *(void *)(*(void *)(v1 + 6704) + 16);
  *(_DWORD *)(v1 + 6656) = 1;
  *(void *)(v1 + 6648) = v1 + 6680;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6680) + 32))(v1 + 6680);
  *(void *)(v1 + 6640) = *(void *)(*(void *)(v1 + 6648) + 16);
  *(_DWORD *)(v1 + 7280) = 1;
  *(void *)(v1 + 7272) = v1 + 6624;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6624) + 32))(v1 + 6624);
  *(void *)(v1 + 7264) = *(void *)(*(void *)(v1 + 7272) + 16);
  *(_DWORD *)(v1 + 6600) = 1;
  *(void *)(v1 + 6592) = v2;
  (*(void (**)(void *))(*v2 + 32))(v2);
  uint64_t v4 = *(void *)(*(void *)(v1 + 6592) + 16);
  *(void *)(v1 + 6584) = v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 152))(v4, v1 + 6568);
  physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
  (*(void (**)(void, void, void, void *, uint64_t, float))(**(void **)(*(void *)(v1 + 1840)
                                                                                         + 1776)
                                                                           + 24))(*(void *)(*(void *)(v1 + 1840) + 1776), *(unsigned __int8 *)(*(void *)(v1 + 2064) + 24), *(unsigned __int8 *)(v1 + 2080), v2, v1 + 6568, *(float *)(v1 + 1984));
  physx::Cm::FanoutTask::removeReference(v1 + 6792);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6752) + 144))(*(void *)(v1 + 6752), v1 + 6736);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6696) + 144))(*(void *)(v1 + 6696), v1 + 6680);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6640) + 144))(*(void *)(v1 + 6640), v1 + 6624);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 7264) + 144))(*(void *)(v1 + 7264), v1 + 7248);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::unblockNarrowPhase>::runInternal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a1 + 40) + 1840) + 1776) + 144))();
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(physx::PxBaseTask **)(a1 + 24);
  (*(void (**)(void))(**(void **)(v1[230] + 1776) + 32))(*(void *)(v1[230] + 1776));
  uint64_t v3 = (physx::Bp::AABBManager *)v1[231];
  uint64_t v4 = *(pthread_mutex_t ***)(v1[230] + 1920);
  physx::Bp::AABBManager::postBroadPhase(v3, v2, (physx::PxBaseTask *)(v1 + 821), v4);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseContinuation>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(physx::Sc::Scene **)(a1 + 40);
  uint64_t v2 = *(physx::PxBaseTask **)(a1 + 24);
  bzero(*(void **)(*((void *)v1 + 231) + 224), (4 * *(_DWORD *)(*((void *)v1 + 231) + 232)));
  return physx::Sc::Scene::finishBroadPhase(v1, v2);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage2>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::postBroadPhaseStage2(*(physx::Sc::Scene **)(a1 + 40), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage3>::~DelegateFanoutTask(uint64_t a1)
{
  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t vars8;

  *(void *)a1 = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)(a1 + 160));
  int v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3 == a1 + 96)
    {
      *(unsigned char *)(a1 + 128) = 0;
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v4 = *(_DWORD *)(a1 + 92);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5 == a1 + 40)
    {
      *(unsigned char *)(a1 + 72) = 0;
    }
    else if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  unsigned int v6 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v6();
}

void physx::Cm::DelegateFanoutTask<physx::Sc::Scene,&physx::Sc::Scene::postBroadPhaseStage3>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(physx::Sc::Scene **)(a1 + 168);
  *(_DWORD *)(*((void *)v1 + 230) + 2568) += *(_DWORD *)(*((void *)v1 + 231) + 480)
                                               + *(_DWORD *)(*((void *)v1 + 231) + 496);
  physx::Sc::Scene::processLostTouchPairs(v1);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::preallocateContactManagers>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(*(void *)(v1 + 1848) + 440);
  uint64_t v3 = *(void *)(v1 + 7600);
  uint64_t v4 = *(void *)(v1 + 7592);
  if (v4)
  {
    int v5 = 0;
    int v6 = 0;
    uint64_t v50 = *(void *)(*(void *)(v1 + 1848) + 440);
    uint64_t v51 = *(void *)(a1 + 40);
    do
    {
      if (*(_DWORD *)(v4 + 208))
      {
        int v52 = v5;
        int v54 = v6;
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(*(void *)(v1 + 3992) + 152);
        uint64_t v9 = *(void *)(v1 + 4000);
        v57[0] = *(void *)(v1 + 4016);
        v57[1] = v9;
        int v58 = *(_DWORD *)(v1 + 4008);
        uint64_t v59 = *(void *)(v1 + 4024);
        uint64_t v60 = v8;
        uint64_t v61 = *(void *)(v1 + 4032);
        do
        {
          uint64_t v10 = v4 + 4 * v7;
          unsigned int v11 = *(_DWORD *)(v10 + 124);
          if (v11)
          {
            uint64_t v12 = (_DWORD *)(v10 + 60);
            int v13 = 32 * v7;
            do
            {
              unsigned int v14 = __clz(__rbit32(v11));
              unint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 24 * (v14 | v13));
              uint64_t v16 = *v15;
              uint64_t v17 = v15[1];
              uint64_t v18 = *(void *)(*v15 + 8);
              if (*(unsigned __int8 *)(*(void *)(v18 + 80) + 13) - 1 >= 2) {
                uint64_t v19 = 0;
              }
              else {
                uint64_t v19 = v18;
              }
              if (*(unsigned __int8 *)(*(void *)(*(void *)(v17 + 8) + 80) + 13) - 1 >= 2) {
                uint64_t v20 = 0;
              }
              else {
                uint64_t v20 = *(void *)(v17 + 8);
              }
              physx::Sc::filterRbCollisionPairSecondStage((uint64_t)v57, v16, v17, v19, v20, 0xFFFFFFFFLL, 1, (unsigned __int16 *)v56);
              unsigned int v21 = (_DWORD *)(*(void *)(v4 + 192) + 8 * (v14 | v13));
              _DWORD *v21 = v56[0];
              v21[1] = v56[1];
              if ((v56[0] & 1) == 0)
              {
                if ((v56[0] & 2) != 0) {
                  ++*(_DWORD *)(v4 + 204);
                }
                else {
                  ++*(_DWORD *)(v4 + 200);
                }
                *v12 |= 1 << v14;
              }
              v11 &= v11 - 1;
            }
            while (v11);
          }
          ++v7;
        }
        while (v7 != 16);
        uint64_t v2 = v50;
        uint64_t v1 = v51;
        int v6 = v54;
        int v5 = v52;
      }
      v5 += *(_DWORD *)(v4 + 200);
      v6 += *(_DWORD *)(v4 + 204);
      uint64_t v4 = *(void *)(v4 + 216);
    }
    while (v4);
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
  }
  physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 7544, *(_DWORD *)(v1 + 7552));
  physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(v1 + 7560, *(_DWORD *)(v1 + 7568));
  physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(v1 + 7576, *(_DWORD *)(v1 + 7584));
  if ((*(_DWORD *)(v1 + 7556) & 0x7FFFFFFFu) < v5 + 1) {
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v1 + 7544, v5 + 1);
  }
  if ((*(_DWORD *)(v1 + 7572) & 0x7FFFFFFFu) < v5 + 1) {
    physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(v1 + 7560, v5 + 1);
  }
  if ((*(_DWORD *)(v1 + 7588) & 0x7FFFFFFFu) < v6 + 1) {
    physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(v1 + 7576, v6 + 1);
  }
  *(_DWORD *)(v1 + 7552) = v5;
  *(_DWORD *)(v1 + 7568) = v5;
  *(_DWORD *)(v1 + 7584) = v6;
  uint64_t v22 = *(void *)(v1 + 7544);
  uint64_t v23 = *(void *)(v1 + 7560);
  uint64_t v24 = *(void *)(v1 + 7576);
  uint64_t v48 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
  uint64_t result = physx::Cm::FlushPool::allocate(v48, 96, 0x10u);
  uint64_t v26 = *(void *)(v1 + 24);
  uint64_t v27 = *(void *)(v1 + 3992);
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(void *)uint64_t result = &unk_26E726070;
  *(void *)(result + 8) = v26;
  *(void *)(result + 40) = v27;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 64) = v22;
  uint64_t v53 = v22;
  uint64_t v55 = v24;
  *(void *)(result + 72) = v23;
  *(void *)(result + 80) = v24;
  *(_DWORD *)(result + 88) = 0;
  LODWORD(v57[0]) = 0;
  v56[0] = 0;
  uint64_t v28 = *(void *)(v1 + 7592);
  if (v28)
  {
    uint64_t v29 = result;
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    unsigned int v33 = 0;
    while (2)
    {
      unsigned int v34 = 0;
      while (1)
      {
        if (*(_DWORD *)(v28 + 200) || *(_DWORD *)(v28 + 204))
        {
          for (uint64_t i = 0; i != 16; ++i)
          {
            for (unsigned int j = *(_DWORD *)(v28 + 4 * i + 60); j; j &= j - 1)
            {
              unsigned int v37 = __clz(__rbit32(j)) | (32 * i);
              if (v33 < v37 + v30)
              {
                uint64_t v38 = *(void *)(v28 + 48) + 24 * v37;
                uint64_t v39 = v2 + 24 * v33;
                long long v40 = *(_OWORD *)v38;
                *(void *)(v39 + 16) = *(void *)(v38 + 16);
                *(_OWORD *)uint64_t v39 = v40;
                uint64_t v41 = (_DWORD *)(*(void *)(v28 + 192) + 8 * v37);
                int v42 = (_DWORD *)(v3 + 8 * v33);
                *int v42 = *v41;
                v42[1] = v41[1];
              }
              ++v33;
              ++v34;
            }
          }
          v32 += *(_DWORD *)(v28 + 204);
          v31 += *(_DWORD *)(v28 + 200);
          if (v34 > 0xFF) {
            break;
          }
        }
        v30 += 512;
        uint64_t v28 = *(void *)(v28 + 216);
        if (!v28)
        {
          if (v34) {
            return physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(v31, v56, v32, (int *)v57, v34, *(void *)(v1 + 1840), *(void *)(v1 + 3992), v29, v49, v53, v23, v55);
          }
          return result;
        }
      }
      physx::Sc::Scene::preallocateContactManagers(physx::PxBaseTask *)::Local::processBatch(v31, v56, v32, (int *)v57, v34, *(void *)(v1 + 1840), *(void *)(v1 + 3992), v29, v49, v53, v23, v55);
      uint64_t result = physx::Cm::FlushPool::allocate(v48, 96, 0x10u);
      uint64_t v29 = result;
      uint64_t v43 = *(void *)(v1 + 24);
      uint64_t v44 = *(void *)(v1 + 3992);
      uint64_t v45 = v53 + 8 * v56[0];
      uint64_t v46 = v23 + 8 * v56[0];
      uint64_t v47 = v55 + 8 * LODWORD(v57[0]);
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(_DWORD *)(result + 32) = 0;
      *(void *)uint64_t result = &unk_26E726070;
      *(void *)(result + 8) = v43;
      *(void *)(result + 40) = v44;
      *(void *)(result + 48) = v2 + 24 * v33;
      *(void *)(result + 56) = v3 + 8 * v33;
      *(void *)(result + 64) = v45;
      *(void *)(result + 72) = v46;
      *(void *)(result + 80) = v47;
      *(_DWORD *)(result + 88) = 0;
      v30 += 512;
      uint64_t v28 = *(void *)(v28 + 216);
      if (v28) {
        continue;
      }
      break;
    }
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::islandInsertion>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(unsigned int *)(v1 + 7568);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 7560) + v3);
      if (v5)
      {
        unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 48);
        uint64_t v8 = *(void *)(*(void *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 40) + 8);
        if (*(unsigned __int8 *)(*(void *)(v8 + 80) + 13) - 1 >= 2) {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void *)(v7 + 8);
        if (v9) {
          BOOL v10 = *(unsigned __int8 *)(*(void *)(v9 + 80) + 13) - 3 >= 0xFFFFFFFE;
        }
        else {
          BOOL v10 = 0;
        }
        if (v10) {
          int v11 = *(_DWORD *)(v9 + 176);
        }
        else {
          int v11 = -128;
        }
        uint64_t v12 = *(void *)(v6 + 88);
        if (v6) {
          uint64_t v13 = v6 + 8;
        }
        else {
          uint64_t v13 = 0;
        }
        int v14 = physx::IG::SimpleIslandManager::addContactManager(*(void *)(v1 + 1880), *(void *)(v6 + 88), *(unsigned int *)(v8 + 176), v11, v13);
        *(_DWORD *)(v6 + 96) = v14;
        if (v12) {
          *(_DWORD *)(v12 + 104) = v14;
        }
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  if (!*(_DWORD *)(v1 + 1876))
  {
    unint64_t v15 = *(physx::IG::SimpleIslandManager **)(v1 + 1880);
    physx::IG::SimpleIslandManager::firstPassIslandGen(v15);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerContactManagers>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(v1 + 1840) + 1776);
  (*(void (**)(uint64_t))(*(void *)v2 + 208))(v2);
  uint64_t v3 = *(unsigned int *)(v1 + 7552);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 7544) + v4);
      if (v6) {
        (*(void (**)(uint64_t, unint64_t, void, void))(*(void *)v2 + 56))(v2, v6 & 0xFFFFFFFFFFFFFFFELL, 0, 0);
      }
      v4 += 8;
    }
    while (v5 != v4);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 216);
  return v7(v2);
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

physx::Sc::Scene **physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerInteractions>::runInternal(physx::Sc::Scene **result, int8x8_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = result[5];
  uint64_t v5 = *((unsigned int *)v4 + 1892);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *(void *)(*((void *)v4 + 945) + v6);
      if (v8)
      {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v9 = v10 == 0;
        uint64_t v13 = *(physx::Sc::ActorSim **)(v10 + 8);
        uint64_t v12 = *(physx::Sc::ActorSim **)(v10 + 16);
        unint64_t v11 = v10 + 8;
        int v14 = v9 ? 0 : (physx::Sc::Interaction *)v11;
        physx::Sc::ActorSim::registerInteractionInActor(v13, v14);
        uint64_t result = physx::Sc::ActorSim::registerInteractionInActor(v12, v14);
        unint64_t v15 = *(unsigned __int8 *)(*((void *)v13 + 10) + 13) - 1 >= 2 ? 0 : v13;
        unsigned int v16 = *(unsigned __int8 *)(*((void *)v12 + 10) + 13) - 1;
        ++*(_DWORD *)(*((void *)v15 + 17) + 148);
        if (v16 <= 1) {
          ++*(_DWORD *)(*((void *)v12 + 17) + 148);
        }
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  uint64_t v17 = *((unsigned int *)v4 + 1896);
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = *(void *)(*((void *)v4 + 947) + v18);
      if (v20)
      {
        unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v22 = (physx::Sc *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 8);
        physx::Sc::activateInteraction(v22, 0, a4, a2);
        physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(v21 + 8), v22);
        uint64_t result = physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(v21 + 16), v22);
      }
      v18 += 8;
    }
    while (v19 != v18);
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::registerSceneInteractions>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(unsigned int *)(v1 + 7568);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 7560) + v3);
      if (v5)
      {
        uint64_t v7 = (void *)(v5 & 0xFFFFFFFFFFFFFFFELL);
        BOOL v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) == 0;
        unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
        BOOL v9 = v6 ? 0 : (physx::Sc::Interaction *)v8;
        physx::Sc::Scene::registerInteraction(v1, v9, v7[11] != 0);
        unint64_t v11 = v7[5];
        unint64_t v12 = v7[6];
        uint64_t v13 = v11 <= v12 ? v7[5] : v7[6];
        uint64_t v14 = v11 <= v12 ? v7[6] : v7[5];
        physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(void *)(v1 + 3992) + 3704), v13, v14, (uint64_t)v7, v10);
        uint64_t v15 = v7[11];
        if (v15)
        {
          uint64_t v16 = *(void *)(v1 + 1840);
          unint64_t v17 = *(unsigned int *)(v15 + 88);
          if (v17 >= 32 * *(_DWORD *)(v16 + 1664)) {
            physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v16 + 1656, ((2 * v17) & 0xFFFFFF00) + 256);
          }
          *(_DWORD *)(*(void *)(v16 + 1656) + 4 * (v17 >> 5)) |= 1 << v17;
          if ((*(unsigned char *)(v15 + 16) & 2) != 0 && (*(_WORD *)(v15 + 80) & 0x1000) != 0)
          {
            if (v17 >= 32 * *(_DWORD *)(v16 + 1680)) {
              physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v16 + 1672, ((2 * v17) & 0xFFFFFF00) + 256);
            }
            *(_DWORD *)(*(void *)(v16 + 1672) + 4 * (v17 >> 5)) |= 1 << v17;
          }
        }
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  uint64_t v18 = *(unsigned int *)(v1 + 7584);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *(void *)(*(void *)(v1 + 7576) + v19);
      if (v21)
      {
        unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v6 = (v21 & 0xFFFFFFFFFFFFFFFELL) == 0;
        unint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFFELL) + 8;
        if (v6) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = (physx::Sc::Interaction *)v23;
        }
        physx::Sc::Scene::registerInteraction(v1, v24, 0);
        unint64_t v26 = *(void *)(v22 + 40);
        unint64_t v27 = *(void *)(v22 + 48);
        if (v26 <= v27) {
          uint64_t v28 = *(void *)(v22 + 40);
        }
        else {
          uint64_t v28 = *(void *)(v22 + 48);
        }
        if (v26 <= v27) {
          uint64_t v29 = *(void *)(v22 + 48);
        }
        else {
          uint64_t v29 = *(void *)(v22 + 40);
        }
        physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(void *)(v1 + 3992) + 3704), v28, v29, v22, v25);
      }
      v19 += 8;
    }
    while (v20 != v19);
  }
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::broadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(physx::PxBaseTask **)(a1 + 24);
  uint64_t v3 = (*(uint64_t (**)(void *))(**((void **)v2 + 2) + 8))(*((void **)v2 + 2));
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v5 = *(physx::Bp::AABBManager **)(v1 + 1848);
  BOOL v6 = *(physx::PxcScratchAllocator **)(v1 + 1840);
  uint64_t v7 = (pthread_mutex_t **)*((void *)v6 + 240);
  char v8 = *(unsigned char *)(v1 + 2080);
  return physx::Bp::AABBManager::updateAABBsAndBP(v5, v4, v7, v6, v8, v2, (physx::PxBaseTask *)(v1 + 6568));
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::advanceStep>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(float *)(v1 + 1984) != 0.0)
  {
    uint64_t v2 = *(void **)(result + 24);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 5104));
    }
    uint64_t v3 = v1 + 4944;
    atomic_fetch_add((atomic_uint *volatile)(v1 + 4968), 1u);
    *(void *)(v1 + 4960) = v2[2];
    uint64_t v7 = v2;
    uint64_t v4 = *(unsigned int *)(v1 + 5032);
    if ((*(_DWORD *)(v1 + 5036) & 0x7FFFFFFFu) <= v4)
    {
      physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 4984, &v7);
    }
    else
    {
      *(void *)(*(void *)(v1 + 5024) + 8 * v4) = v2;
      *(_DWORD *)(v1 + 5032) = v4 + 1;
    }
    (*(void (**)(void *))(*v2 + 32))(v2);
    *(unsigned char *)(v1 + 5096) = 1;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5104));
    }
    physx::Cm::FanoutTask::removeReference(v1 + 4944);
    if ((*(unsigned char *)(v1 + 4268) & 2) != 0)
    {
      *(_DWORD *)(v1 + 5152) = 1;
      *(void *)(v1 + 5144) = v3;
      (*(void (**)(uint64_t))(*(void *)(v1 + 4944) + 32))(v3);
      *(void *)(v1 + 5136) = *(void *)(*(void *)(v1 + 5144) + 16);
      *(_DWORD *)(v1 + 5312) = 1;
      *(void *)(v1 + 5304) = v1 + 5120;
      (*(void (**)(uint64_t))(*(void *)(v1 + 5120) + 32))(v1 + 5120);
      *(void *)(v1 + 5296) = *(void *)(*(void *)(v1 + 5304) + 16);
      (*(void (**)(void, uint64_t))(**(void **)(v1 + 5136) + 144))(*(void *)(v1 + 5136), v1 + 5120);
    }
    else
    {
      *(_DWORD *)(v1 + 5312) = 1;
      *(void *)(v1 + 5304) = v3;
      (*(void (**)(uint64_t))(*(void *)(v1 + 4944) + 32))(v1 + 4944);
      *(void *)(v1 + 5296) = *(void *)(*(void *)(v1 + 5304) + 16);
    }
    *(_DWORD *)(v1 + 5424) = 1;
    *(void *)(v1 + 5416) = v1 + 5280;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5280) + 32))(v1 + 5280);
    *(void *)(v1 + 5408) = *(void *)(*(void *)(v1 + 5416) + 16);
    *(_DWORD *)(v1 + 5592) = 1;
    *(void *)(v1 + 5584) = v1 + 5392;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5392) + 32))(v1 + 5392);
    *(void *)(v1 + 5576) = *(void *)(*(void *)(v1 + 5584) + 16);
    *(_DWORD *)(v1 + 5648) = 1;
    *(void *)(v1 + 5640) = v1 + 5560;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5560) + 32))(v1 + 5560);
    *(void *)(v1 + 5632) = *(void *)(*(void *)(v1 + 5640) + 16);
    *(_DWORD *)(v1 + 5536) = 1;
    *(void *)(v1 + 5528) = v1 + 5616;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5616) + 32))(v1 + 5616);
    *(void *)(v1 + 5520) = *(void *)(*(void *)(v1 + 5528) + 16);
    *(_DWORD *)(v1 + 5480) = 1;
    *(void *)(v1 + 5472) = v1 + 5504;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5504) + 32))(v1 + 5504);
    *(void *)(v1 + 5464) = *(void *)(*(void *)(v1 + 5472) + 16);
    *(_DWORD *)(v1 + 6208) = 1;
    *(void *)(v1 + 6200) = v1 + 5448;
    (*(void (**)(uint64_t))(*(void *)(v1 + 5448) + 32))(v1 + 5448);
    *(void *)(v1 + 6192) = *(void *)(*(void *)(v1 + 6200) + 16);
    *(_DWORD *)(v1 + 6264) = 1;
    *(void *)(v1 + 6256) = v1 + 6176;
    (*(void (**)(uint64_t))(*(void *)(v1 + 6176) + 32))(v1 + 6176);
    *(void *)(v1 + 6248) = *(void *)(*(void *)(v1 + 6256) + 16);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 4928));
    }
    uint64_t v5 = v1 + 4768;
    atomic_fetch_add((atomic_uint *volatile)(v1 + 4792), 1u);
    *(void *)(v1 + 4784) = *(void *)(v1 + 6248);
    uint64_t v7 = (void *)(v1 + 6232);
    uint64_t v6 = *(unsigned int *)(v1 + 4856);
    if ((*(_DWORD *)(v1 + 4860) & 0x7FFFFFFFu) <= v6)
    {
      physx::shdfnd::Array<physx::PxBaseTask *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::PxBaseTask *>>>::growAndPushBack(v1 + 4808, &v7);
    }
    else
    {
      *(void *)(*(void *)(v1 + 4848) + 8 * v6) = v1 + 6232;
      *(_DWORD *)(v1 + 4856) = v6 + 1;
    }
    (*(void (**)(uint64_t))(*(void *)(v1 + 6232) + 32))(v1 + 6232);
    *(unsigned char *)(v1 + 4920) = 1;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 4928));
    }
    physx::Cm::FanoutTask::removeReference(v5);
    *(_DWORD *)(v1 + 4744) = 1;
    *(void *)(v1 + 4736) = v5;
    (*(void (**)(uint64_t))(*(void *)(v1 + 4768) + 32))(v5);
    *(void *)(v1 + 4728) = *(void *)(*(void *)(v1 + 4736) + 16);
    physx::Cm::FanoutTask::removeReference(v1 + 4944);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5296) + 144))(*(void *)(v1 + 5296), v1 + 5280);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5408) + 144))(*(void *)(v1 + 5408), v1 + 5392);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5576) + 144))(*(void *)(v1 + 5576), v1 + 5560);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5632) + 144))(*(void *)(v1 + 5632), v1 + 5616);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5520) + 144))(*(void *)(v1 + 5520), v1 + 5504);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 5464) + 144))(*(void *)(v1 + 5464), v1 + 5448);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 6192) + 144))(*(void *)(v1 + 6192), v1 + 6176);
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 6248) + 144))(*(void *)(v1 + 6248), v1 + 6232);
    physx::Cm::FanoutTask::removeReference(v5);
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 4728) + 144))(*(void *)(v1 + 4728), v1 + 4712);
  }
  return result;
}

void *physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::~DelegateTask(void *result)
{
  void *result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::collideStep>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void *)(v1 + 4256);
  *(void *)uint64_t v3 = *(void *)(v3 + 8);
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_DWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 8) = 0u;
  bzero((void *)(*(void *)(v1 + 1840) + 1936), 0x288uLL);
  *(void *)(v1 + 4784) = v2[2];
  physx::Cm::FanoutTask::addReference(v1 + 4768);
  *(void *)(v1 + 4960) = v2[2];
  physx::Cm::FanoutTask::addReference(v1 + 4944);
  *(_DWORD *)(v1 + 6544) = 1;
  *(void *)(v1 + 6536) = v2;
  (*(void (**)(void *))(*v2 + 32))(v2);
  *(void *)(v1 + 6528) = *(void *)(*(void *)(v1 + 6536) + 16);
  *(_DWORD *)(v1 + 6320) = 1;
  *(void *)(v1 + 6312) = v1 + 6512;
  (*(void (**)(uint64_t))(*(void *)(v1 + 6512) + 32))(v1 + 6512);
  *(void *)(v1 + 6304) = *(void *)(*(void *)(v1 + 6312) + 16);
  (*(void (**)(void, uint64_t))(**(void **)(v1 + 6528) + 144))(*(void *)(v1 + 6528), v1 + 6512);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v1 + 6304) + 144);
  return v4();
}

physx::Cm::PreallocatingRegionManager *physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(physx::Cm::PreallocatingRegionManager *this, unsigned int a2, uint64_t a3, const char *a4)
{
  *(_DWORD *)this = 64;
  *((_DWORD *)this + 1) = a2;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  uint64_t v5 = (uint64_t *)((char *)this + 16);
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 1;
  *((void *)this + 5) = a3;
  long long v12 = 0uLL;
  LODWORD(v13) = 0;
  if (a2
    && (uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, (unint64_t)a2 << 6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60), v7 = *((_DWORD *)this + 6), v8 = *((_DWORD *)this + 7) & 0x7FFFFFFF, *(void *)&v12 = v6, v8 > v7))
  {
    uint64_t v9 = *((void *)this + 2) + 24 * v7;
    long long v10 = v12;
    *(void *)(v9 + 16) = v13;
    *(_OWORD *)uint64_t v9 = v10;
    ++*((_DWORD *)this + 6);
  }
  else
  {
    physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v5, &v12);
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(uint64_t *a1, long long *a2)
{
  int v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::allocate(24 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (v7)
  {
    unint64_t v8 = v6 + 24 * v7;
    uint64_t v9 = (long long *)*a1;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v9;
      *(void *)(v10 + 16) = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v10 = v11;
      v10 += 24;
      uint64_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v10 < v8);
    unsigned int v12 = *((_DWORD *)a1 + 2);
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v13 = v6 + 24 * v12;
  long long v14 = *a2;
  *(void *)(v13 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *a1 = v6;
  unsigned int v15 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v15 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v6 + 24 * v15;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::getName() [T = physx::"
    }
           "Cm::PreallocatingRegion]";
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>::getName() [T = physx::Sc::Client *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    long long v11 = *(uint64_t **)a1;
    unsigned int v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t *physx::Cm::PreallocatingRegionManager::searchForMemory(physx::Cm::PreallocatingRegionManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  uint64_t v3 = *((unsigned int *)this + 6);
  unsigned int v5 = *(_DWORD *)this;
  unsigned int v4 = *((_DWORD *)this + 1);
  if (v3)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = 24 * *((unsigned int *)this + 2);
    while (1)
    {
      if (v8 != v6)
      {
        uint64_t v9 = (uint64_t *)(*v2 + v6);
        uint64_t result = (uint64_t *)v9[1];
        if (result)
        {
          v9[1] = *result;
          goto LABEL_21;
        }
        int v11 = *((_DWORD *)v9 + 4);
        if (v11 != v5)
        {
          *((_DWORD *)v9 + 4) = v11 + 1;
          uint64_t v12 = *v9;
          if (v12) {
            break;
          }
        }
      }
      ++v7;
      v6 += 24;
      if (24 * v3 == v6) {
        goto LABEL_8;
      }
    }
    uint64_t result = (uint64_t *)(v12 + v11 * v4);
LABEL_21:
    *((_DWORD *)this + 2) = v7;
  }
  else
  {
LABEL_8:
    *((_DWORD *)this + 2) = v3;
    *((unsigned char *)this + 32) = 1;
    unint64_t v13 = v4 * (unint64_t)v5;
    LODWORD(v22) = 0;
    *((void *)&v21 + 1) = 0;
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60);
      LODWORD(v3) = *((_DWORD *)this + 6);
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)&long long v21 = v14;
    if ((*((_DWORD *)this + 7) & 0x7FFFFFFFu) <= v3)
    {
      uint64_t v19 = physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v2, &v21);
    }
    else
    {
      uint64_t v15 = *((void *)this + 2) + 24 * v3;
      long long v16 = v21;
      *(void *)(v15 + 16) = v22;
      *(_OWORD *)uint64_t v15 = v16;
      uint64_t v17 = *((void *)this + 2);
      unsigned int v18 = *((_DWORD *)this + 6);
      *((_DWORD *)this + 6) = v18 + 1;
      uint64_t v19 = v17 + 24 * v18;
    }
    uint64_t result = *(uint64_t **)(v19 + 8);
    if (result)
    {
      *(void *)(v19 + 8) = *result;
    }
    else
    {
      int v20 = *(_DWORD *)(v19 + 16);
      if (v20 == v5)
      {
        return 0;
      }
      else
      {
        *(_DWORD *)(v19 + 16) = v20 + 1;
        return (uint64_t *)(*(void *)v19 + v20 * v4);
      }
    }
  }
  return result;
}

void physx::Sc::StaticSim::~StaticSim(physx::Sc::StaticSim *this)
{
  *(void *)this = &unk_26E7277E8;
  **((void **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E7277E8;
  **((void **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

void physx::Cm::PreallocatingRegionManager::deallocateMemory(physx::Cm::PreallocatingRegionManager *this, unsigned __int8 *a2)
{
  if (a2)
  {
    if (*((unsigned char *)this + 32)) {
      physx::shdfnd::sort<physx::Cm::PreallocatingRegion,physx::shdfnd::Less<physx::Cm::PreallocatingRegion>,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>(*((void *)this + 2), *((_DWORD *)this + 6), (uint64_t)&v12, (uint64_t)&v11, 32);
    }
    int v4 = *((_DWORD *)this + 6) - 1;
    if (v4 >= 0)
    {
      signed int v5 = 0;
      uint64_t v6 = *((void *)this + 2);
      while (1)
      {
        unsigned int v7 = (v5 + v4) >> 1;
        unint64_t v8 = *(void *)(v6 + 24 * v7);
        if (v8 <= (unint64_t)a2
          && v8 + (*(_DWORD *)this * *((_DWORD *)this + 1)) > (unint64_t)a2)
        {
          break;
        }
        if (v8 >= (unint64_t)a2) {
          int v4 = v7 - 1;
        }
        else {
          signed int v5 = v7 + 1;
        }
        if (v5 > v4) {
          return;
        }
      }
      uint64_t v10 = v6 + 24 * v7;
      *(void *)a2 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = a2;
      if (*((unsigned char *)this + 32)) {
        *((_DWORD *)this + 2) = v7;
      }
      *((unsigned char *)this + 32) = 0;
    }
  }
}

void physx::shdfnd::sort<physx::Cm::PreallocatingRegion,physx::shdfnd::Less<physx::Cm::PreallocatingRegion>,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  size_t v8 = (4 * a5);
  BOOL v70 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = &v64[-((v8 + 15) & 0x1FFFFFFF0)];
    bzero(v9, v8);
  }
  else
  {
    uint64_t v9 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v64, (4 * a5), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  unint64_t v69 = v9;
  unsigned int v65 = 0;
  int v66 = a5;
  uint64_t v67 = v9;
  int v10 = a2 - 1;
  char v68 = 0;
  if (a2 - 1 < 1) {
    goto LABEL_45;
  }
  int v11 = 0;
  for (i = v9; ; int v11 = *((_DWORD *)i + v62 - 2))
  {
    while (1)
    {
      if (v10 <= v11) {
        goto LABEL_38;
      }
      if ((v10 - v11) <= 4) {
        break;
      }
      int v13 = v11 + v10;
      if (v11 + v10 < 0 != __OFADD__(v11, v10)) {
        ++v13;
      }
      uint64_t v14 = (long long *)(a1 + 24 * (v13 >> 1));
      uint64_t v15 = (unint64_t *)(a1 + 24 * v11);
      unint64_t v16 = *v15;
      if (*(void *)v14 < *v15)
      {
        long long v17 = *(_OWORD *)v15;
        unint64_t v18 = v15[2];
        int v19 = *((_DWORD *)v14 + 4);
        *(_OWORD *)uint64_t v15 = *v14;
        *((_DWORD *)v15 + 4) = v19;
        *((_DWORD *)v14 + 4) = v18;
        *uint64_t v14 = v17;
        unint64_t v16 = *v15;
      }
      int v20 = (unint64_t *)(a1 + 24 * v10);
      unint64_t v21 = *v20;
      if (*v20 < v16)
      {
        long long v22 = *(_OWORD *)v15;
        unint64_t v23 = v15[2];
        int v24 = *((_DWORD *)v20 + 4);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v20;
        *((_DWORD *)v15 + 4) = v24;
        *((_DWORD *)v20 + 4) = v23;
        *(_OWORD *)int v20 = v22;
        unint64_t v21 = *v20;
      }
      if (v21 < *(void *)v14)
      {
        long long v25 = *v14;
        uint64_t v26 = *((void *)v14 + 2);
        int v27 = *((_DWORD *)v20 + 4);
        *uint64_t v14 = *(_OWORD *)v20;
        *((_DWORD *)v14 + 4) = v27;
        *((_DWORD *)v20 + 4) = v26;
        *(_OWORD *)int v20 = v25;
      }
      uint64_t v28 = v10 - 1;
      uint64_t v29 = (uint64_t *)(a1 + 24 * v28);
      long long v30 = *v14;
      uint64_t v31 = *((void *)v14 + 2);
      int v32 = *((_DWORD *)v29 + 4);
      *uint64_t v14 = *(_OWORD *)v29;
      *((_DWORD *)v14 + 4) = v32;
      *((_DWORD *)v29 + 4) = v31;
      *(_OWORD *)uint64_t v29 = v30;
      int v33 = v11;
      while (1)
      {
        unint64_t v34 = *v29;
        uint64_t v35 = (long long *)(a1 + 24 * v33);
        do
        {
          unint64_t v36 = *((void *)v35 + 3);
          uint64_t v35 = (long long *)((char *)v35 + 24);
          ++v33;
        }
        while (v36 < v34);
        unsigned int v37 = (long long *)(a1 + 24 * (int)v28);
        do
        {
          unint64_t v38 = *((void *)v37 - 3);
          unsigned int v37 = (long long *)((char *)v37 - 24);
          LODWORD(v28) = v28 - 1;
        }
        while (v34 < v38);
        if (v33 >= (int)v28) {
          break;
        }
        long long v39 = *v35;
        uint64_t v40 = *((void *)v35 + 2);
        int v41 = *((_DWORD *)v37 + 4);
        *uint64_t v35 = *v37;
        *((_DWORD *)v35 + 4) = v41;
        *((_DWORD *)v37 + 4) = v40;
        *unsigned int v37 = v39;
      }
      long long v42 = *v35;
      uint64_t v43 = *((void *)v35 + 2);
      int v44 = *((_DWORD *)v29 + 4);
      *uint64_t v35 = *(_OWORD *)v29;
      *((_DWORD *)v35 + 4) = v44;
      *((_DWORD *)v29 + 4) = v43;
      *(_OWORD *)uint64_t v29 = v42;
      unsigned int v45 = v65;
      unsigned int v46 = v66 - 1;
      if (v33 - v11 >= v10 - v33)
      {
        if (v65 >= v46)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow((uint64_t)v64);
          unsigned int v45 = v65;
          uint64_t i = v67;
        }
        unsigned int v65 = v45 + 1;
        *((_DWORD *)i + v45) = v33 + 1;
        uint64_t v48 = v65++;
        *((_DWORD *)i + v48) = v10;
        int v10 = v33 - 1;
      }
      else
      {
        if (v65 >= v46)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow((uint64_t)v64);
          unsigned int v45 = v65;
          uint64_t i = v67;
        }
        unsigned int v65 = v45 + 1;
        *((_DWORD *)i + v45) = v11;
        uint64_t v47 = v65++;
        *((_DWORD *)i + v47) = v33 - 1;
        int v11 = v33 + 1;
      }
    }
    uint64_t v49 = v11;
    int v50 = v11 + 1;
    uint64_t v51 = a1 + 24 + 24 * v11;
    do
    {
      uint64_t v52 = 0;
      uint64_t v53 = v49++;
      int v54 = (unint64_t *)v51;
      int v55 = v53;
      do
      {
        unint64_t v56 = *v54;
        v54 += 3;
        if (v56 < *(void *)(a1 + 24 * v55)) {
          int v55 = v50 + v52;
        }
        ++v52;
      }
      while (v53 + v52 < v10);
      if (v55 != v53)
      {
        uint64_t v57 = (long long *)(a1 + 24 * v55);
        int v58 = (long long *)(a1 + 24 * v53);
        long long v59 = *v57;
        uint64_t v60 = *((void *)v57 + 2);
        int v61 = *((_DWORD *)v58 + 4);
        *uint64_t v57 = *v58;
        *((_DWORD *)v57 + 4) = v61;
        *((_DWORD *)v58 + 4) = v60;
        *int v58 = v59;
      }
      ++v50;
      v51 += 24;
    }
    while (v49 != v10);
LABEL_38:
    unsigned int v62 = v65;
    if (!v65) {
      break;
    }
    --v65;
    int v10 = *((_DWORD *)i + v62 - 1);
    unsigned int v65 = v62 - 2;
  }
  if (v68) {
    BOOL v63 = i == 0;
  }
  else {
    BOOL v63 = 1;
  }
  if (!v63) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, i);
  }
LABEL_45:
  if (v8 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v69, v9);
  }
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

void physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(physx::Cm::PreallocatingRegionManager *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 24 * v2;
    do
    {
      uint64_t v5 = *((void *)this + 2);
      if (*(void *)(v5 + v3)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *(void *)(v5 + v3) = 0;
      v3 += 24;
    }
    while (v4 != v3);
  }
  int v6 = *((_DWORD *)this + 7);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 2) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>::getName() [T = physx::Sc::BodyCore *]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v6 = (void *)result;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  size_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    int v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    size_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t *physx::Cm::PreallocatingRegionManager::preAllocate(uint64_t *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    unsigned int v4 = *(_DWORD *)this;
    unsigned int v5 = *(_DWORD *)this * *((_DWORD *)this + 6);
    if (v5 < a2)
    {
      unint64_t v6 = *((unsigned int *)this + 1) * (unint64_t)v4;
      do
      {
        long long v10 = 0uLL;
        LODWORD(v11) = 0;
        if (v6) {
          this = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPreallocatingPool.h", 60);
        }
        else {
          this = 0;
        }
        *(void *)&long long v10 = this;
        unsigned int v7 = *((_DWORD *)v3 + 6);
        if ((*((_DWORD *)v3 + 7) & 0x7FFFFFFFu) <= v7)
        {
          this = (uint64_t *)physx::shdfnd::Array<physx::Cm::PreallocatingRegion,physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingRegion>>::growAndPushBack(v3 + 2, &v10);
        }
        else
        {
          uint64_t v8 = v3[2] + 24 * v7;
          long long v9 = v10;
          *(void *)(v8 + 16) = v11;
          *(_OWORD *)uint64_t v8 = v9;
          ++*((_DWORD *)v3 + 6);
        }
        v5 += v4;
      }
      while (v5 < a2);
    }
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>::getName() [T = physx::Sc::BodyCore *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  long long v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)a1;
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *long long v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>::getName() [T = physx::Sc::Interaction *]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    long long v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    uint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>::getName() [T = physx::Sc::Interaction *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  long long v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)a1;
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *long long v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,8u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 8;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  long long v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *long long v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,16u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 16;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  long long v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *long long v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<void *,32u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 8) - 256;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 8) - 256);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 32;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 32;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  long long v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *long long v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::allocate(result, 40 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(long long **)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 40 * v5;
    unint64_t v8 = v4;
    do
    {
      long long v9 = *v6;
      long long v10 = v6[1];
      *(_DWORD *)(v8 + 32) = *((_DWORD *)v6 + 8);
      *(_OWORD *)unint64_t v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      *(unsigned char *)(v8 + 36) = *((unsigned char *)v6 + 36);
      v8 += 40;
      uint64_t v6 = (long long *)((char *)v6 + 40);
    }
    while (v8 < v7);
    uint64_t v6 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::allocate(result, 12 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 12 * v5;
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6;
      *(_DWORD *)(v8 + 8) = *((_DWORD *)v6 + 2);
      *(void *)unint64_t v8 = v9;
      v8 += 12;
      uint64_t v6 = (uint64_t *)((char *)v6 + 12);
    }
    while (v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>::getName() [T = physx::Sc:"
    }
           ":ConstraintCore *]";
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    long long v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>::getName() [T = physx::Sc::Client *]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    long long v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>::getName() [T = physx"
    }
           "::Sc::Scene::SimpleBodyPair]";
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 24 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  unint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 24 * v7;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      *(void *)(v10 + 16) = *((void *)v8 + 2);
      *(_OWORD *)unint64_t v10 = v11;
      v10 += 24;
      unint64_t v8 = (long long *)((char *)v8 + 24);
    }
    while (v10 < v9);
    unint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintSim,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    unsigned int v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128);
    do
    {
      *unsigned int v7 = v6;
      v7 -= 16;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    long long v11 = *(uint64_t **)(a1 + 520);
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::ConstraintCore *,physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintCore *,physx::shdfnd::Hash<physx::Sc::ConstraintCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 8 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ConstraintCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintCore *>::getName() [T = physx::Sc:"
    }
           ":ConstraintCore *]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)a1;
    int32x2_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,128u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    unint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128);
    do
    {
      *unint64_t v7 = v6;
      v7 -= 16;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    int32x2_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,256u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 8) - 256;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    unint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 8) - 256);
    do
    {
      *unint64_t v7 = v6;
      v7 -= 32;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 32;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    int32x2_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::Scene::Block<unsigned char,384u>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  int v5 = (void *)(v3 + 384 * *(unsigned int *)(a1 + 544) - 384);
  if ((unint64_t)v5 >= v3)
  {
    uint64_t v6 = *(void **)(a1 + 560);
    do
    {
      *int v5 = v6;
      unint64_t v7 = v5 - 48;
      uint64_t v6 = v5;
      int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 48;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    int32x2_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxvContactManagerTouchEvent,physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 16 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxvContactManagerTouchEvent>::getName() [T = physx"
  }
         "::PxvContactManagerTouchEvent]";
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unsigned int v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 16 * v9;
    int32x2_t v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unsigned int v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::postCCDPass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::postCCDPass>]";
  else {
    unint64_t v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    uint64_t v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E727828;
      long long v11 = *v8;
      uint64_t v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      unint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        unint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::updateCCDSinglePass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::updateCCDSinglePass>]";
  else {
    unint64_t v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    uint64_t v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E7278B8;
      long long v11 = *v8;
      uint64_t v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      unint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        unint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(physx::PxBaseTask **)(a1 + 24);
  ++*(_DWORD *)(v1 + 1996);
  physx::Bp::AABBManager::postBroadPhase(*(physx::Bp::AABBManager **)(v1 + 1848), 0, 0, *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920));
  physx::Sc::Scene::finishBroadPhase((physx::Sc::Scene *)v1, v2);
  if (!*(_DWORD *)(*(void *)(v1 + 1864) + 180))
  {
    unint64_t v3 = *(unsigned int *)(v1 + 2104);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (void *)(*(void *)(v1 + 1848) + 224);
      do
      {
        unsigned int v6 = *(uint64_t ***)(*(void *)(*(void *)(v1 + 2096) + 8 * v4) + 56);
        if (v6)
        {
          do
          {
            if ((v6[7][8] & 5) != 0)
            {
              unint64_t v7 = *((unsigned int *)v6 + 4);
              physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)v5, (v7 & 0x7FFFFFFF) + 1);
              *(_DWORD *)(*v5 + ((v7 >> 3) & 0xFFFFFFC)) |= 1 << v7;
            }
            unsigned int v6 = (uint64_t **)*v6;
          }
          while (v6);
          unint64_t v3 = *(unsigned int *)(v1 + 2104);
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::updateCCDSinglePassStage2>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::up"
         "dateCCDSinglePassStage2>]";
  else {
    unint64_t v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    uint64_t v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E727948;
      long long v11 = *v8;
      uint64_t v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      unint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        unint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::postBroadPhaseStage2(*(physx::Sc::Scene **)(a1 + 40), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::updateCCDSinglePassStage3>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::up"
         "dateCCDSinglePassStage3>]";
  else {
    unint64_t v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    uint64_t v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E7279D8;
      long long v11 = *v8;
      uint64_t v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      unint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        unint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(physx::PxBaseTask **)(a1 + 24);
  ++*(_DWORD *)(v1 + 1996);
  int v3 = *(_DWORD *)(*(void *)(v1 + 1864) + 180);
  uint64_t v4 = *(void *)(v1 + 1848);
  uint64_t v5 = *(void *)(v1 + 1840);
  *(_DWORD *)(v5 + 2568) += *(_DWORD *)(v4 + 480) + *(_DWORD *)(v4 + 496);
  int v6 = v3 + 1;
  if (v3 == -1)
  {
    physx::Sc::Scene::processLostTouchPairs((physx::Sc::Scene *)v1);
    goto LABEL_22;
  }
  (*(void (**)(void *__return_ptr))(**(void **)(v5 + 1776) + 168))(v29);
  int v7 = *(_DWORD *)(v4 + 480);
  int v8 = (*(_DWORD *)(v1 + 4268) >> 3) & 1;
  if (v7)
  {
    uint64_t v9 = *(unint64_t **)(v4 + 472);
    while (1)
    {
      uint64_t v10 = *(void *)(v1 + 3992);
      Interaction = (physx::Sc::ShapeInteraction *)physx::Sc::NPhaseCore::findInteraction(v10, *v9, v9[1]);
      v9[2] = (unint64_t)Interaction;
      if (Interaction) {
        break;
      }
LABEL_17:
      v9 += 3;
      if (!--v7) {
        goto LABEL_18;
      }
    }
    uint64_t v12 = (uint64_t)Interaction;
    if (*((unsigned char *)Interaction + 36) != 2)
    {
      if (*((unsigned char *)Interaction + 36))
      {
LABEL_16:
        physx::Sc::NPhaseCore::releaseElementPair(v10, v12, 4, v6, 1, (uint64_t)v29, v8);
        goto LABEL_17;
      }
      physx::Sc::NPhaseCore::lostTouchReports(v10, Interaction, 4, 0, (uint64_t)v29, v8);
      uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 72);
      (*(void (**)(void, void))(**(void **)(*(void *)(v13 + 1840) + 1776) + 72))(*(void *)(*(void *)(v13 + 1840) + 1776), *(void *)(v12 + 88));
      physx::PxsContext::destroyContactManager(*(void *)(v13 + 1840), *(void *)(v12 + 88));
      *(void *)(v12 + 88) = 0;
      unsigned int v14 = *(_DWORD *)(v12 + 96);
      if (v14 != -1)
      {
        physx::IG::SimpleIslandManager::removeConnection(*(void *)(*(void *)(*(void *)(v12 + 8) + 72) + 1880), v14);
        *(_DWORD *)(v12 + 96) = -1;
      }
    }
    physx::Sc::Scene::unregisterInteraction(v1, v12 + 8);
    uint64_t v15 = *(void *)(v1 + 3992) + 3704;
    unint64_t v16 = *(void *)(v12 + 40);
    unint64_t v17 = *(void *)(v12 + 48);
    if (v16 <= v17) {
      uint64_t v18 = *(void *)(v12 + 40);
    }
    else {
      uint64_t v18 = *(void *)(v12 + 48);
    }
    if (v16 <= v17) {
      unint64_t v16 = *(void *)(v12 + 48);
    }
    v30[0] = v18;
    v30[1] = v16;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v15, v30);
    uint64_t v10 = *(void *)(v1 + 3992);
    goto LABEL_16;
  }
LABEL_18:
  int v19 = *(_DWORD *)(v4 + 496);
  if (v19)
  {
    int v20 = *(unint64_t **)(v4 + 488);
    do
    {
      --v19;
      unint64_t v21 = *v20;
      unint64_t v22 = v20[1];
      v20[2] = 0;
      physx::Sc::NPhaseCore::onOverlapRemoved(*(void *)(v1 + 3992), v21, v22, v6, 0, (uint64_t)v29, v8);
      v20 += 3;
    }
    while (v19);
  }
  physx::Sc::Scene::processLostTouchPairs((physx::Sc::Scene *)v1);
  (*(void (**)(void))(**(void **)(v4 + 392) + 160))(*(void *)(v4 + 392));
  (*(void (**)(void))(**(void **)(v4 + 392) + 136))(*(void *)(v4 + 392));
LABEL_22:
  physx::PxsContext::resetThreadContexts(*(physx::PxsContext **)(v1 + 1840));
  unint64_t v23 = *(physx::PxsCCDContext **)(v1 + 1864);
  float v24 = *(float *)(v1 + 1984);
  long long v25 = (physx::IG::IslandSim *)(*(void *)(v1 + 1880) + 224);
  int v26 = (*(_DWORD *)(v1 + 4268) >> 2) & 1;
  int v27 = *(_DWORD *)(v1 + 1872);
  return physx::PxsCCDContext::updateCCD(v23, v24, v2, v25, v26, v27);
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::ccdBroadPhase>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhase>]";
  else {
    int v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    int v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E727A68;
      long long v11 = *v8;
      int v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      uint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        unint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = *(physx::PxsCCDContext **)(v1 + 1864);
  int v4 = *((_DWORD *)v3 + 45);
  int v5 = *((_DWORD *)v3 + 109);
  *(_DWORD *)(v1 + 1876) = v4 + 1;
  if (v4)
  {
    if (!*((_DWORD *)v3 + 46) || !*(_DWORD *)(v1 + 1872)) {
      return;
    }
    goto LABEL_6;
  }
  if (*(_DWORD *)(v1 + 1872))
  {
LABEL_6:
    BOOL v6 = !(v4 & 1);
    int v7 = v5 - 1;
    if (v4 == v5 - 1)
    {
      int v8 = (uint64_t *)(v1 + 5256);
      uint64_t v9 = *(void *)(v1 + 5256);
      uint64_t v10 = v4 & 1;
      uint64_t v11 = v9 + 56 * v10;
    }
    else
    {
      uint64_t v12 = *(void *)(v1 + 5240);
      uint64_t v13 = v12 + 56 * !(v4 & 1);
      *(_DWORD *)(v13 + 32) = 1;
      *(void *)(v13 + 24) = v2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
        *(void *)(v13 + 16) = *(void *)(*(void *)(v13 + 24) + 16);
        uint64_t v12 = *(void *)(v1 + 5240);
      }
      uint64_t v14 = *(void *)(v1 + 5224);
      uint64_t v15 = v14 + 56 * v6;
      uint64_t v16 = v12 + 56 * v6;
      *(_DWORD *)(v15 + 32) = 1;
      *(void *)(v15 + 24) = v16;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
        *(void *)(v15 + 16) = *(void *)(*(void *)(v15 + 24) + 16);
        uint64_t v14 = *(void *)(v1 + 5224);
      }
      int v8 = (uint64_t *)(v1 + 5256);
      uint64_t v9 = *(void *)(v1 + 5256);
      uint64_t v10 = v4 & 1;
      uint64_t v11 = v9 + 56 * v10;
      uint64_t v2 = v14 + 56 * !(v4 & 1);
    }
    *(_DWORD *)(v11 + 32) = 1;
    *(void *)(v11 + 24) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      *(void *)(v11 + 16) = *(void *)(*(void *)(v11 + 24) + 16);
      uint64_t v9 = *v8;
    }
    uint64_t v17 = *(void *)(v1 + 5208);
    uint64_t v18 = 56 * v10;
    uint64_t v19 = v17 + 56 * v10;
    uint64_t v20 = v9 + 56 * v10;
    *(_DWORD *)(v19 + 32) = 1;
    *(void *)(v19 + 24) = v20;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
      *(void *)(v19 + 16) = *(void *)(*(void *)(v19 + 24) + 16);
      uint64_t v17 = *(void *)(v1 + 5208);
    }
    uint64_t v21 = *(void *)(v1 + 5192);
    uint64_t v22 = v21 + v18;
    *(_DWORD *)(v22 + 32) = 1;
    *(void *)(v22 + 24) = v17 + v18;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)(v17 + v18) + 32))(v17 + v18);
      *(void *)(v22 + 16) = *(void *)(*(void *)(v22 + 24) + 16);
      uint64_t v21 = *(void *)(v1 + 5192);
    }
    uint64_t v23 = *(void *)(v1 + 5176);
    uint64_t v24 = v23 + v18;
    *(_DWORD *)(v24 + 32) = 1;
    *(void *)(v24 + 24) = v21 + v18;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)(v21 + v18) + 32))(v21 + v18);
      *(void *)(v24 + 16) = *(void *)(*(void *)(v24 + 24) + 16);
      uint64_t v23 = *(void *)(v1 + 5176);
    }
    long long v25 = (physx::PxBaseTask *)(v23 + v18);
    uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(v23 + v18 + 16) + 8))(*(void *)(v23 + v18 + 16));
    unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 8))(v26);
    physx::Bp::AABBManager::updateAABBsAndBP(*(physx::Bp::AABBManager **)(v1 + 1848), v27, *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920), *(physx::PxcScratchAllocator **)(v1 + 1840), 0, v25, 0);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 5256) + v18) + 40))(*(void *)(v1 + 5256) + v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 5208) + v18) + 40))(*(void *)(v1 + 5208) + v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 5192) + v18) + 40))(*(void *)(v1 + 5192) + v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 5176) + v18) + 40))(*(void *)(v1 + 5176) + v18);
    if (v4 != v7)
    {
      uint64_t v28 = *(void *)(v1 + 5240) + 56 * !(v4 & 1);
      (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
      uint64_t v29 = *(void (**)(void))(*(void *)(*(void *)(v1 + 5224) + 56 * !(v4 & 1)) + 40);
      v29();
    }
    return;
  }
  physx::PxsCCDContext::resetContactManagers(v3);
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::recreate(_DWORD *a1)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Sce"
  }
         "ne::ccdBroadPhaseAABB>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhaseAABB>]";
  else {
    int v3 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 112, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  unsigned int v6 = a1[2];
  if (v6)
  {
    unint64_t v7 = result + 56 * v6;
    int v8 = (_OWORD *)(*(void *)a1 + 40);
    uint64_t v9 = result;
    unint64_t v10 = result;
    do
    {
      *(void *)unint64_t v10 = &unk_26E725A00;
      *(_OWORD *)(v10 + 8) = *(v8 - 2);
      *(void *)(v10 + 24) = *((void *)v8 - 2);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v8 - 2);
      *(void *)unint64_t v10 = &unk_26E727AF8;
      long long v11 = *v8;
      int v8 = (_OWORD *)((char *)v8 + 56);
      *(_OWORD *)(v10 + 40) = v11;
      v9 += 56;
      v10 += 56;
    }
    while (v10 < v7);
    unsigned int v12 = a1[2];
    if (v12)
    {
      uint64_t v13 = *(void *)a1;
      unint64_t v14 = *(void *)a1 + 56 * v12;
      uint64_t result = *(void *)a1;
      uint64_t v15 = *(void (****)(uint64_t))a1;
      do
      {
        uint64_t v16 = *v15;
        v15 += 7;
        (*v16)(result);
        v13 += 56;
        uint64_t result = (uint64_t)v15;
      }
      while ((unint64_t)v15 < v14);
    }
  }
  if ((a1[3] & 0x80000000) == 0 && *(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v5;
  a1[3] = 2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)(v1 + 1864);
  int v4 = *(_DWORD *)(v3 + 180);
  uint64_t v5 = *(pthread_mutex_t ***)(*(void *)(v1 + 1840) + 1920);
  *(_DWORD *)(v1 + 1872) = 0;
  if (!v4 || *(_DWORD *)(v3 + 184))
  {
    unsigned int v6 = *(_DWORD *)(v1 + 2104);
    if (v6)
    {
      int v7 = 0;
      for (unsigned int i = 0; i < v6; i += 256)
      {
        unsigned int v9 = v6 + v7;
        if (v9 >= 0x100) {
          int v10 = 256;
        }
        else {
          int v10 = v9;
        }
        uint64_t v11 = physx::Cm::FlushPool::allocate(v5, 64, 0x10u);
        uint64_t v12 = *(void *)(v1 + 2096) + 8 * i;
        *(void *)(v11 + 8) = *(void *)(v1 + 24);
        *(void *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 32) = 0;
        uint64_t v13 = (uint64_t (**)(uint64_t))&unk_26E725BA0;
        *(void *)uint64_t v11 = &unk_26E725BA0;
        *(void *)(v11 + 40) = v12;
        *(_DWORD *)(v11 + 48) = v10;
        *(void *)(v11 + 56) = v1 + 1872;
        *(_DWORD *)(v11 + 32) = 1;
        *(void *)(v11 + 24) = v2;
        if (v2)
        {
          (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
          *(void *)(v11 + 16) = *(void *)(*(void *)(v11 + 24) + 16);
          uint64_t v13 = *(uint64_t (***)(uint64_t))v11;
        }
        uint64_t result = v13[5](v11);
        unsigned int v6 = *(_DWORD *)(v1 + 2104);
        v7 -= 256;
      }
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::postCCDPass>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::postCCDPass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::postCCDPass>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E727828;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E727828;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePass>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::updateCCDSinglePass>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::upda"
           "teCCDSinglePass>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E7278B8;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E7278B8;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage2>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::updateCCDSinglePassStage2>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene"
           "::updateCCDSinglePassStage2>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E727948;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E727948;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::updateCCDSinglePassStage3>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::updateCCDSinglePassStage3>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene"
           "::updateCCDSinglePassStage3>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E7279D8;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E7279D8;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhase>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::ccdBroadPhase>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhase>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E727A68;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E727A68;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>,physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene,&physx::Sc::Scene::ccdBroadPhaseAABB>>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::S"
    }
           "cene::ccdBroadPhaseAABB>>::getName() [T = physx::Cm::DelegateTask<physx::Sc::Scene, &physx::Sc::Scene::ccdBroadPhaseAABB>]";
    else {
      int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = v3[2];
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = (_OWORD *)(*(void *)v3 + 40);
    uint64_t v12 = v8;
    unint64_t v13 = v8;
    do
    {
      *(void *)unint64_t v13 = &unk_26E725A00;
      *(_OWORD *)(v13 + 8) = *(v11 - 2);
      *(void *)(v13 + 24) = *((void *)v11 - 2);
      *(_DWORD *)(v13 + 32) = *((_DWORD *)v11 - 2);
      *(void *)unint64_t v13 = &unk_26E727AF8;
      long long v14 = *v11;
      uint64_t v11 = (_OWORD *)((char *)v11 + 56);
      *(_OWORD *)(v13 + 40) = v14;
      v12 += 56;
      v13 += 56;
    }
    while (v13 < v10);
    unsigned int v15 = v3[2];
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 56 * v15;
  *(void *)uint64_t v16 = &unk_26E725A00;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(v16 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)uint64_t v16 = &unk_26E727AF8;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  unsigned int v17 = v3[2];
  if (v17)
  {
    uint64_t v18 = *(void *)v3;
    unint64_t v19 = *(void *)v3 + 56 * v17;
    uint64_t result = *(void *)v3;
    uint64_t v20 = *(void (****)(uint64_t))v3;
    do
    {
      uint64_t v21 = *v20;
      v20 += 7;
      (*v21)(result);
      v18 += 56;
      uint64_t result = (uint64_t)v20;
    }
    while ((unint64_t)v20 < v19);
  }
  if ((v3[3] & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++v3[2];
  v3[3] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxContactPairHeader,physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxContactPairHeader>::getName() [T = physx::PxCo"
    }
           "ntactPairHeader]";
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 48 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  uint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 48 * v7;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      *(_OWORD *)(v10 + 10) = *(long long *)((char *)v8 + 10);
      *(_OWORD *)unint64_t v10 = v11;
      *(_WORD *)(v10 + 26) = *((_WORD *)v8 + 13);
      uint64_t v12 = *((void *)v8 + 4);
      *(_DWORD *)(v10 + 40) = *((_DWORD *)v8 + 10);
      *(void *)(v10 + 32) = v12;
      v10 += 48;
      v8 += 3;
    }
    while (v10 < v9);
    uint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxRigidBody *>::getName() [T = const physx::PxRigidBody *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidBody const*,physx::shdfnd::ReflectionAllocator<physx::PxRigidBody const*>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxRigidBody *>::getName() [T = const physx"
    }
           "::PxRigidBody *]";
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxTransform>::allocate(result, 28 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  uint64_t v8 = (_OWORD *)(v6 + 28 * v7);
  uint64_t v9 = *(void *)v3;
  if (v7)
  {
    uint64_t v10 = *(void *)v3;
    unint64_t v11 = v6;
    do
    {
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *(void *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      v11 += 28;
      v10 += 28;
    }
    while (v11 < (unint64_t)v8);
  }
  *uint64_t v8 = *(_OWORD *)a2;
  uint64_t v12 = v6 + 28 * v7;
  *(void *)(v12 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(a2 + 24);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v9)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    unsigned int v7 = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(result + 512) == 0) {
      *(unsigned char *)(result + 512) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 528);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)(v3 + 520);
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *uint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 520);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v14)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v9) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v8;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v9 + 1;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::getName() [T = physx::Sc::ShapeSim *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeCore const*,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeCore const*>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (!v5) {
    goto LABEL_14;
  }
  if ((8 * v5) <= 0x200 && *(unsigned char *)(result + 512) == 0)
  {
    *(unsigned char *)(result + 512) = 1;
    uint64_t v9 = (void *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sc::ShapeCore *>::getName() [T = const physx"
  }
         "::Sc::ShapeCore *]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v9 = (void *)result;
LABEL_16:
  uint64_t v10 = *(unsigned int *)(v3 + 528);
  unint64_t v11 = &v9[v10];
  if (v10)
  {
    uint64_t v12 = *(uint64_t **)(v3 + 520);
    uint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *unint64_t v11 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(v3 + 520);
    if (v15 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v15)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v10) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v9;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v10 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxActor *>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (void *)(v6 + 8 * v7);
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 8 * v7;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxActor *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxActor *>::getName() [T = physx::PxActor *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxActor *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Scene::SimpleBodyPair,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>>::growAndPushBack(uint64_t *a1, long long *a2)
{
  int v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::SimpleBodyPair>::getName() [T = physx"
    }
           "::Sc::Scene::SimpleBodyPair]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    unint64_t v10 = v8 + 24 * v9;
    uint64_t v11 = (long long *)*a1;
    unint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      *(void *)(v12 + 16) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      v12 += 24;
      uint64_t v11 = (long long *)((char *)v11 + 24);
    }
    while (v12 < v10);
    unsigned int v14 = *((_DWORD *)a1 + 2);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = v8 + 24 * v14;
  long long v16 = *a2;
  *(void *)(v15 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  unsigned int v17 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = v17 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 24 * v17;
}

unint64_t physx::shdfnd::PoolBase<physx::Dy::Articulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(uint64_t a1)
{
  unint64_t result = physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  unint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    unint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unsigned int v5 = (void *)(v3 + 320 * *(unsigned int *)(a1 + 544) - 320);
  if ((unint64_t)v5 >= v3)
  {
    uint64_t v6 = *(void **)(a1 + 560);
    do
    {
      *unsigned int v5 = v6;
      unint64_t v7 = v5 - 40;
      uint64_t v6 = v5;
      unsigned int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 40;
  }
  return result;
}

unint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      unint64_t v8 = a1;
    }
    else
    {
      unint64_t v8 = physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    unint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14 - *(void *)(v14 - 8));
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

unint64_t physx::shdfnd::PoolBase<physx::Dy::FeatherstoneArticulation,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::allocateSlab(uint64_t a1)
{
  unint64_t result = physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  unint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    unint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  int v5 = (void *)(v3 + 896 * *(unsigned int *)(a1 + 544) - 896);
  if ((unint64_t)v5 >= v3)
  {
    uint64_t v6 = *(void **)(a1 + 560);
    do
    {
      *int v5 = v6;
      unint64_t v7 = v5 - 112;
      uint64_t v6 = v5;
      int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 112;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    unint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (void *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ElementInteractionMarker *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker *>::getName() [T = "
    }
           "physx::Sc::ElementInteractionMarker *]";
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxFilterInfo,physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxFilterInfo>::getName() [T = physx::PxFilterInfo]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(_DWORD **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    unint64_t v12 = *(_DWORD **)a1;
    uint64_t v13 = (_DWORD *)result;
    do
    {
      *uint64_t v13 = *v12;
      v13[1] = v12[1];
      v13 += 2;
      v12 += 2;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::Sc::ShapeCore::ShapeCore(uint64_t a1, uint64_t *a2, unsigned char *a3, const unsigned __int16 *a4, unsigned int a5)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 65) = 1;
  uint64_t v9 = (float *)physx::Sc::Physics::mInstance;
  physx::Gu::GeometryUnion::set(a1 + 72, a2);
  *(_OWORD *)(a1 + 32) = xmmword_23435FBB0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(float *)(a1 + 60) = *v9 * 0.02;
  *(unsigned char *)(a1 + 64) = *a3;
  physx::Sc::ShapeCore::setMaterialIndices((char *)a1, a4, a5);
  return a1;
}

char *physx::Sc::ShapeCore::setMaterialIndices(char *this, const unsigned __int16 *__src, unsigned int a3)
{
  int v5 = *((_DWORD *)this + 18);
  *((_WORD *)this + 33) = *__src;
  if (v5 == 6)
  {
    uint64_t v6 = this + 120;
    uint64_t v7 = this + 112;
    if (*((unsigned __int16 *)this + 60) < a3)
    {
      uint64_t v9 = this + 65;
      int v8 = this[65];
      uint64_t v10 = *((void *)this + 14);
      goto LABEL_7;
    }
  }
  else
  {
    if (v5 != 5) {
      return this;
    }
    uint64_t v6 = this + 144;
    uint64_t v7 = this + 136;
    if (*((unsigned __int16 *)this + 72) < a3)
    {
      uint64_t v9 = this + 65;
      int v8 = this[65];
      uint64_t v10 = *((void *)this + 17);
LABEL_7:
      if (v10) {
        BOOL v11 = v8 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        *((_WORD *)v7 + 4) = 0;
      }
      *(void *)uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/GuGeometryUnion.h", 109);
      *((_WORD *)v7 + 4) = a3;
      *uint64_t v9 = 1;
    }
  }
  this = (char *)memcpy(*(void **)v7, __src, 2 * a3);
  *uint64_t v6 = a3;
  return this;
}

void physx::Sc::ShapeCore::~ShapeCore(physx::Sc::ShapeCore *this)
{
  int v1 = *((_DWORD *)this + 18);
  if (v1 == 6)
  {
    if (!*((unsigned char *)this + 65)) {
      return;
    }
    uint64_t v2 = (char *)this + 112;
  }
  else
  {
    if (v1 != 5 || !*((unsigned char *)this + 65)) {
      return;
    }
    uint64_t v2 = (char *)this + 136;
  }
  if (*(void *)v2) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *((_WORD *)v2 + 4) = 0;
}

void physx::Sc::ShapeCore::setGeometry(uint64_t a1, uint64_t *a2)
{
  int v5 = *(_DWORD *)(a1 + 72);
  uint64_t v3 = a1 + 72;
  int v4 = v5;
  int v6 = *(_DWORD *)a2;
  if (v5 == 6)
  {
    uint64_t v7 = (uint64_t *)(a1 + 112);
    int v8 = (unsigned __int16 *)(a1 + 120);
    uint64_t v9 = (__int16 *)(a1 + 122);
    uint64_t v10 = (int *)(a1 + 124);
    goto LABEL_5;
  }
  if (v4 == 5)
  {
    uint64_t v7 = (uint64_t *)(a1 + 136);
    int v8 = (unsigned __int16 *)(a1 + 144);
    uint64_t v9 = (__int16 *)(a1 + 146);
    uint64_t v10 = (int *)(a1 + 148);
LABEL_5:
    uint64_t v11 = *v7;
    int v12 = *v8;
    __int16 v13 = *v9;
    int v14 = *v10;
    goto LABEL_7;
  }
  int v12 = 0;
  uint64_t v11 = 0;
  __int16 v13 = -12851;
  int v14 = -842150451;
LABEL_7:
  __n128 v15 = physx::Gu::GeometryUnion::set(v3, a2);
  if ((v6 - 5) > 1)
  {
    if (v12 && *(unsigned char *)(a1 + 65) && v11)
    {
      uint64_t v18 = *(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
      v18(v15);
    }
  }
  else
  {
    if (v6 == 5) {
      uint64_t v16 = 136;
    }
    else {
      uint64_t v16 = 112;
    }
    if (v6 == 5) {
      uint64_t v17 = a1 + 136;
    }
    else {
      uint64_t v17 = a1 + 112;
    }
    if (v12)
    {
      *(void *)(a1 + v16) = v11;
      *(_WORD *)(v17 + 8) = v12;
      *(_WORD *)(v17 + 10) = v13;
      *(_DWORD *)(v17 + 12) = v14;
    }
    else
    {
      unint64_t v19 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/GuGeometryUnion.h", 109, v15);
      *(void *)(a1 + v16) = v19;
      *(_WORD *)(v17 + 8) = 1;
      *unint64_t v19 = *(_WORD *)(a1 + 66);
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
}

uint64_t physx::Sc::ShapeCore::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 72);
  if (v4 == 6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v5 = *(void *)(v3 + 112);
    int v6 = *(unsigned __int16 *)(v3 + 120);
  }
  else
  {
    if (v4 != 5) {
      return result;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v5 = *(void *)(v3 + 136);
    int v6 = *(unsigned __int16 *)(v3 + 144);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16);
  return v7(a2, v5, (2 * v6));
}

physx::Sc::ShapeInteraction *physx::Sc::ShapeInteraction::ShapeInteraction(physx::Sc::ShapeInteraction *this, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a3 + 8);
  *((void *)this + 1) = v6;
  int v8 = (physx::Sc::ShapeInteraction *)((char *)this + 8);
  *((void *)this + 2) = v7;
  *((void *)this + 3) = -1;
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 1280;
  *((unsigned char *)this + 38) = 0;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = a3;
  *(void *)this = &unk_26E727BA0;
  *((void *)this + 7) = -1;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = -1;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = -1;
  *((_WORD *)this + 50) = 0;
  int v9 = *a4;
  int v10 = v9 & 0x7FFF;
  uint64_t v11 = *(void **)(v6 + 72);
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = *(void *)(a3 + 8);
  if (*(unsigned __int8 *)(*(void *)(v13 + 80) + 13) - 1 >= 2) {
    uint64_t v13 = 0;
  }
  if (*(unsigned char *)(*(void *)(v12 + 80) + 44))
  {
    if (!v13) {
      goto LABEL_12;
    }
    BOOL v14 = (*(unsigned char *)(*(void *)(v13 + 80) + 44) & 1) == 0;
    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v14 = 1;
    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
  }
  if (!v14) {
LABEL_12:
  }
    v10 |= 0x40000u;
  if ((v9 & 0x2020202) == 0
    && (__n128 v15 = (float *)v11[230], v15[454] == 0.0)
    && v15[455] == 0.0
    && v15[456] == 0.0
    && v15[457] == 0.0)
  {
    unsigned int v16 = v10 & 0xFFFDFFFF;
  }
  else
  {
    unsigned int v16 = v10 | 0x20000;
  }
  *((_DWORD *)this + 16) = v16;
  if (a5)
  {
    physx::Sc::ShapeInteraction::onActivate_(this, a5);
  }
  else
  {
    uint64_t v17 = *(unsigned int *)(v12 + 176);
    ++*(_DWORD *)(*(void *)(v12 + 136) + 148);
    if (v13)
    {
      int v18 = *(_DWORD *)(v13 + 176);
      ++*(_DWORD *)(*(void *)(v13 + 136) + 148);
    }
    else
    {
      int v18 = -128;
    }
    *((_DWORD *)this + 24) = physx::IG::SimpleIslandManager::addContactManager(v11[235], 0, v17, v18, (uint64_t)v8);
    int v21 = physx::Sc::activateInteraction(v8, 0, v19, v20);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 1), v8);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 2), v8);
    unint64_t v23 = *((void *)this + 5);
    unint64_t v24 = *((void *)this + 6);
    if (v23 <= v24) {
      uint64_t v25 = *((void *)this + 5);
    }
    else {
      uint64_t v25 = *((void *)this + 6);
    }
    if (v23 <= v24) {
      uint64_t v26 = *((void *)this + 6);
    }
    else {
      uint64_t v26 = *((void *)this + 5);
    }
    physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(v11[499] + 3704), v25, v26, (uint64_t)this, v22);
    physx::Sc::Scene::registerInteraction((uint64_t)v11, v8, v21);
  }
  return this;
}

uint64_t physx::Sc::ShapeInteraction::onActivate_(physx::Sc::ShapeInteraction *this, uint64_t a2)
{
  if ((*((_DWORD *)this + 16) & 0x1DC) != 0 && (*((_DWORD *)this + 16) & 0x400000) != 0)
  {
    physx::Sc::NPhaseCore::addToPersistentContactEventPairs(*(void *)(*(void *)(*((void *)this + 1) + 72) + 3992), this);
    *((_DWORD *)this + 16) &= ~0x400000u;
  }
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 8);
  }
  uint64_t v6 = *(void *)(*((void *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(void *)(v6 + 80) + 13) - 1 >= 2) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*((void *)this + 1) + 72) + 1880) + 888);
  if ((*(unsigned char *)(v7 + (((unint64_t)*(unsigned int *)(v5 + 176) >> 2) & 0x3FFFFFE0) + 4) & 2) == 0
    && (!v6 || (*(unsigned char *)(v7 + (((unint64_t)*(unsigned int *)(v6 + 176) >> 2) & 0x3FFFFFE0) + 4) & 2) == 0))
  {
    return 0;
  }
  if (!*((void *)this + 11))
  {
    physx::Sc::ShapeInteraction::createManager(this, a2);
    if (!*((void *)this + 11)) {
      return 0;
    }
  }
  *((unsigned char *)this + 37) |= 0x20u;
  return 1;
}

void physx::Sc::ShapeInteraction::~ShapeInteraction(physx::Sc::ShapeInteraction *this)
{
  *(void *)this = &unk_26E727BA0;
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *(void *)(*((void *)this + 5) + 8);
  }
  uint64_t v3 = *(void *)(*((void *)this + 6) + 8);
  unsigned int v4 = *(unsigned __int8 *)(*(void *)(v3 + 80) + 13) - 3;
  --*(_DWORD *)(*(void *)(v2 + 136) + 148);
  if (v3) {
    BOOL v5 = v4 >= 0xFFFFFFFE;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    --*(_DWORD *)(*(void *)(v3 + 136) + 148);
  }
  if (*((void *)this + 11))
  {
    uint64_t v6 = *(void *)(*((void *)this + 1) + 72);
    (*(void (**)(void))(**(void **)(*(void *)(v6 + 1840) + 1776) + 72))(*(void *)(*(void *)(v6 + 1840) + 1776));
    physx::PxsContext::destroyContactManager(*(void *)(v6 + 1840), *((void *)this + 11));
    *((void *)this + 11) = 0;
  }
  unsigned int v7 = *((_DWORD *)this + 24);
  if (v7 != -1)
  {
    uint64_t v8 = *(void *)(*((void *)this + 1) + 72);
    physx::IG::SimpleIslandManager::removeConnection(*(void *)(v8 + 1880), v7);
    *((_DWORD *)this + 24) = -1;
    physx::Sc::Scene::unregisterInteraction(v8, (uint64_t)this + 8);
    uint64_t v9 = *(void *)(v8 + 3992) + 3704;
    unint64_t v10 = *((void *)this + 5);
    unint64_t v11 = *((void *)this + 6);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)this + 5);
    }
    else {
      uint64_t v12 = *((void *)this + 6);
    }
    if (v10 <= v11) {
      unint64_t v10 = *((void *)this + 6);
    }
    v18[0] = v12;
    v18[1] = v10;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v9, v18);
  }
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 1), (void *)this + 1);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 2), (void *)this + 1);
  uint64_t v13 = *((unsigned int *)this + 20);
  if (v13 != -1)
  {
    int v14 = *((_DWORD *)this + 16);
    uint64_t v15 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 3992);
    if ((v14 & 0x800000) != 0)
    {
      *((_DWORD *)this + 16) = v14 & 0xFF7FFFFF;
      *((_DWORD *)this + 20) = -1;
      uint64_t v16 = *(void *)(v15 + 48);
      unsigned int v17 = *(_DWORD *)(v15 + 56) - 1;
      *(_DWORD *)(v15 + 56) = v17;
      *(void *)(v16 + 8 * v13) = *(void *)(v16 + 8 * v17);
      if (v13 < v17) {
        *(_DWORD *)(*(void *)(*(void *)(v15 + 48) + 8 * v13) + 80) = v13;
      }
    }
    else
    {
      physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v15, (uint64_t)this);
    }
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sc::ShapeInteraction::~ShapeInteraction(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Sc::ShapeInteraction::visualize(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (*(void *)(result + 88))
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    int v8 = 0;
    uint64_t v46 = *(void *)(*(void *)(result + 8) + 72);
    float v9 = -1.0;
    if (*(void *)(*(void *)(result + 40) + 8) < *(void *)(*(void *)(result + 48) + 8)) {
      float v9 = 1.0;
    }
    float v55 = v9;
    float v45 = *(float *)(v46 + 4656);
    float v10 = v45 * 0.1;
    uint64_t v47 = result;
    while (1)
    {
      uint64_t v11 = *(void *)(v7 + 88);
      if (!v11) {
        return result;
      }
      unsigned int v12 = *(_DWORD *)(v11 + 108);
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(v7 + 8) + 72) + 1840) + 1776);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 160))(v13);
      }
      else
      {
        uint64_t result = *(void *)(v5 + 32) + 32 * (*(_DWORD *)(v5 + 4 * (v12 & 7)) + (v12 >> 3));
      }
      int v14 = *(float32x2_t **)(v11 + 64);
      int v15 = *(unsigned __int8 *)(result + 24);
      if (!*(unsigned char *)(result + 24)) {
        goto LABEL_12;
      }
      if (v8) {
        break;
      }
      int v22 = *(unsigned __int8 *)(result + 25);
      unsigned int v17 = *(float **)(result + 16);
      int v18 = v14 != 0;
      unint64_t v23 = *(float **)(v46 + 1840);
      float v20 = v23[457];
      float v54 = v23[455];
      float v52 = v23[456];
      float v21 = v23[454];
      if (!*(void *)result)
      {
        unsigned int v51 = 0;
        goto LABEL_29;
      }
      unsigned int v4 = *(float32x2_t **)(result + 8);
      uint64_t v3 = *(float32x2_t **)result;
LABEL_23:
      if ((v3[5].i8[3] & 2) != 0) {
        int v24 = 64;
      }
      else {
        int v24 = 16;
      }
      if (v3[5].i8[3] < 0) {
        int v24 = 32;
      }
      unsigned int v51 = v24;
LABEL_29:
      int v49 = v18;
      int v50 = v8;
      if (v22)
      {
        int v25 = 0;
        int v26 = 0;
        unsigned int v27 = 0;
        BOOL v29 = v20 != 0.0 && v17 != 0;
        float v53 = v45 * v20;
        while (1)
        {
          if (v26)
          {
            unsigned int v30 = v3[5].u8[1];
            BOOL v31 = v30 > v27;
            LODWORD(v32) = (v30 - v27) * v51;
            if (v31) {
              uint64_t v32 = v32;
            }
            else {
              uint64_t v32 = 0;
            }
            unsigned int v4 = (float32x2_t *)((char *)v4 + v32);
            v3 += 6;
          }
          if (v3[5].i8[1]) {
            break;
          }
          unsigned int v27 = 0;
LABEL_60:
          if (++v26 == v22) {
            goto LABEL_61;
          }
        }
        unsigned int v27 = 0;
        while (2)
        {
          if (v25) {
            uint64_t v33 = v51;
          }
          else {
            uint64_t v33 = 0;
          }
          unsigned int v4 = (float32x2_t *)((char *)v4 + v33);
          if (v29)
          {
            float v34 = v53 * *v17;
            int v35 = 16711680;
LABEL_53:
            if (v34 != 0.0)
            {
              a2[8] = 0;
              *a2 = 1;
              a2[1] = v35;
              float v56 = v34;
              float32x2_t v65 = *v4;
              __int32 v66 = v4[1].i32[0];
              uint64_t v36 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (float *)&v65);
              float v37 = (float)(v55 * (float)(v56 * v3[3].f32[0])) + v4[1].f32[0];
              float32x2_t v63 = vadd_f32(vmul_n_f32(vmul_n_f32(v3[2], v56), v55), *v4);
              float v64 = v37;
              uint64_t result = physx::Cm::RenderOutput::operator<<(v36, (float *)&v63);
            }
          }
          else
          {
            if (v54 != 0.0)
            {
              int v35 = 255;
              float v34 = v45 * v54;
              goto LABEL_53;
            }
            if (v52 != 0.0)
            {
              float v34 = fabsf((float)(v45 * v52) * v4[1].f32[1]);
              int v35 = 16776960;
              goto LABEL_53;
            }
          }
          if (v21 != 0.0)
          {
            float v39 = v4->f32[0];
            float v38 = v4->f32[1];
            float v40 = v4[1].f32[0];
            a2[8] = 0;
            *(void *)a2 = 0xFFFF000000000001;
            v62[0] = v39 - v10;
            v62[1] = v38 + 0.0;
            v62[2] = v40 + 0.0;
            uint64_t v41 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v62);
            v61[0] = v10 + v39;
            v61[1] = v38 + 0.0;
            v61[2] = v40 + 0.0;
            physx::Cm::RenderOutput::operator<<(v41, v61);
            float v42 = v39 + 0.0;
            v60[0] = v42;
            v60[1] = v38 - v10;
            v60[2] = v40 + 0.0;
            uint64_t v43 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v60);
            v59[0] = v42;
            v59[1] = v10 + v38;
            v59[2] = v40 + 0.0;
            physx::Cm::RenderOutput::operator<<(v43, v59);
            v58[0] = v42;
            v58[1] = v38 + 0.0;
            v58[2] = v40 - v10;
            uint64_t v44 = physx::Cm::RenderOutput::operator<<((uint64_t)a2, v58);
            v57[0] = v42;
            v57[1] = v38 + 0.0;
            void v57[2] = v10 + v40;
            uint64_t result = physx::Cm::RenderOutput::operator<<(v44, v57);
          }
          ++v27;
          int v25 = 1;
          if (v27 >= v3[5].u8[1]) {
            goto LABEL_60;
          }
          continue;
        }
      }
LABEL_61:
      int v8 = v49;
      uint64_t v7 = v47;
      uint64_t v5 = a3;
      if (v49 == v50) {
        return result;
      }
    }
    int v15 = 1;
LABEL_12:
    if (!v14) {
      return result;
    }
    int v16 = v8 - v15 + 1;
    while (--v16)
    {
      int v14 = (float32x2_t *)*v14;
      if (!v14) {
        return result;
      }
    }
    uint64_t v3 = v14 + 2;
    unsigned int v4 = v14 + 8;
    unsigned int v17 = (float *)((char *)v14 + ((v14[1].u16[0] + 15) & 0x1FFF0));
    if (*v14) {
      int v18 = v8 + 1;
    }
    else {
      int v18 = v8;
    }
    unint64_t v19 = *(float **)(v46 + 1840);
    float v20 = v19[457];
    float v54 = v19[455];
    float v52 = v19[456];
    float v21 = v19[454];
    int v22 = 1;
    goto LABEL_23;
  }
  return result;
}

uint64_t physx::Sc::ShapeInteraction::setContactReportPostSolverVelocity(uint64_t result, unsigned int *a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(result + 8) + 72) + 3992) + 64) + *a2;
  uint64_t v3 = *(void *)(result + 72);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v5 + 80);
  if (*(unsigned char *)(v6 + 13))
  {
    *(void *)(v2 + 12) = *(void *)(v6 + 80);
    *(_DWORD *)(v2 + 20) = *(_DWORD *)(v6 + 88);
    uint64_t v7 = *(void *)(v6 + 96);
    int v8 = *(_DWORD *)(v6 + 104);
  }
  else
  {
    uint64_t v7 = 0;
    *(void *)(v2 + 12) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    int v8 = 0;
  }
  *(void *)(v2 + 36) = v7;
  *(_DWORD *)(v2 + 44) = v8;
  uint64_t v9 = *(void *)(v4 + 80);
  if (*(unsigned char *)(v9 + 13))
  {
    *(void *)(v2 + 24) = *(void *)(v9 + 80);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)(v9 + 88);
    uint64_t v10 = *(void *)(v9 + 96);
    int v11 = *(_DWORD *)(v9 + 104);
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    int v11 = 0;
  }
  *(void *)(v2 + 48) = v10;
  *(_DWORD *)(v2 + 56) = v11;
  *((_WORD *)a2 + 5) &= ~8u;
  return result;
}

uint64_t physx::Sc::ShapeInteraction::resetManagerCachedState(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(this + 8) + 72) + 1840) + 1776);
    *(unsigned char *)(v1 + 82) = 0;
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 80))(v2, *(void *)(this + 88));
  }
  return this;
}

uint64_t physx::Sc::ShapeInteraction::processUserNotificationSync(uint64_t this)
{
  if (*(void *)(this + 88)) {
    __asm { PRFM            #0, [X8] }
  }
  uint64_t v7 = *(void *)(this + 72);
  if (v7)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(this + 8) + 72) + 3992);
    if ((*(_WORD *)v7 & 2) == 0)
    {
      *(_WORD *)v7 |= 2u;
      uint64_t v14 = v7;
      uint64_t v9 = *(unsigned int *)(v8 + 16);
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFFFu) <= v9)
      {
        this = physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::growAndPushBack(v8 + 8, &v14);
      }
      else
      {
        *(void *)(*(void *)(v8 + 8) + 8 * v9) = v7;
        *(_DWORD *)(v8 + 16) = v9 + 1;
      }
      ++*(_WORD *)(v7 + 4);
    }
    if (!*(void *)(v7 + 24))
    {
      this = (uint64_t)physx::Sc::NPhaseCore::createActorPairContactReportData((pthread_mutex_t **)v8);
      *(void *)(v7 + 24) = this;
      if (this)
      {
        uint64_t v10 = *(void *)(v7 + 8);
        uint64_t v11 = *(void *)(v7 + 16);
        int v12 = *(_DWORD *)(v11 + 88);
        *(_DWORD *)(this + 16) = *(_DWORD *)(v10 + 88);
        *(_DWORD *)(this + 20) = v12;
        uint64_t v13 = *(void *)(v11 + 80) + qword_2687A6328[*(unsigned __int8 *)(*(void *)(v11 + 80) + 13)];
        *(void *)(this + 24) = *(void *)(v10 + 80)
                               + qword_2687A6328[*(unsigned __int8 *)(*(void *)(v10 + 80) + 13)];
        *(void *)(this + 32) = v13;
      }
    }
  }
  return this;
}

void physx::Sc::ShapeInteraction::processUserNotificationAsync(uint64_t a1, __int16 a2, __int16 a3, int a4, int a5, int a6, uint64_t a7, physx::Sc::ContactReportAllocationManager *a8)
{
  if (a5) {
    __int16 v8 = a2 | 0x20;
  }
  else {
    __int16 v8 = a2;
  }
  uint64_t v9 = *(void **)(a1 + 72);
  if (!v9) {
    return;
  }
  int v11 = a5;
  uint64_t v13 = a1;
  uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 72);
  int v15 = *(physx::Sc::NPhaseCore **)(v14 + 3992);
  int v16 = (pthread_mutex_t *)v9[3];
  if (!v16)
  {
    ActorPairContactReportData = physx::Sc::NPhaseCore::createActorPairContactReportData(*(pthread_mutex_t ***)(v14 + 3992));
    int v16 = ActorPairContactReportData;
    v9[3] = ActorPairContactReportData;
    if (ActorPairContactReportData)
    {
      uint64_t v18 = v9[1];
      *(_DWORD *)&ActorPairContactReportData->__opaque[8] = *(_DWORD *)(v18 + 88);
      uint64_t v19 = v9[2];
      *(_DWORD *)&ActorPairContactReportData->__opaque[12] = *(_DWORD *)(v19 + 88);
      *(void *)&ActorPairContactReportData->__opaque[16] = *(void *)(v18 + 80)
                                                           + qword_2687A6328[*(unsigned __int8 *)(*(void *)(v18 + 80)
                                                                                                + 13)];
      *(void *)&ActorPairContactReportData->__opaque[24] = *(void *)(v19 + 80)
                                                           + qword_2687A6328[*(unsigned __int8 *)(*(void *)(v19 + 80)
                                                                                                + 13)];
    }
  }
  unsigned int v20 = *(_DWORD *)(v14 + 1992);
  int v21 = *(_DWORD *)(v14 + 1996);
  int v22 = *(_DWORD *)(v13 + 64);
  uint64_t v23 = v9[1];
  uint64_t v24 = *(void *)(v13 + 40);
  uint64_t v241 = *(void *)(v24 + 8);
  if (v23 == v241) {
    uint64_t v25 = *(void *)(v13 + 40);
  }
  else {
    uint64_t v25 = *(void *)(v13 + 48);
  }
  if (v23 == v241) {
    uint64_t v24 = *(void *)(v13 + 48);
  }
  uint64_t v243 = v25;
  uint64_t v244 = v24;
  unsigned int v26 = *(_DWORD *)&v16->__opaque[4];
  *(_DWORD *)&v16->__opaque[4] = v20;
  char v247 = a4;
  __int16 v248 = v8;
  if (v26 == v20)
  {
    unsigned int sig_high = HIWORD(v16->__sig);
    if (!HIWORD(v16->__sig)) {
      goto LABEL_68;
    }
    uint64_t v28 = (unsigned __int16 *)(*((void *)v15 + 8) + LODWORD(v16->__sig));
    if ((v22 & 0x7000) != 0 && (v247 & 1) == 0)
    {
      uint64_t v239 = v23;
      unsigned int v29 = *(unsigned __int16 *)v16->__opaque;
      if (*(_WORD *)v16->__opaque) {
        int v30 = *v28;
      }
      else {
        int v30 = -1;
      }
      if (v30 < v11)
      {
        if ((v22 & 0x1000) != 0) {
          __int16 v57 = 56;
        }
        else {
          __int16 v57 = 4;
        }
        if ((v22 & 0x2000) != 0) {
          v57 += 52;
        }
        if ((v22 & 0x4000) != 0) {
          v57 += 60;
        }
        if (!*(_WORD *)v16->__opaque) {
          v57 += 4;
        }
        unsigned __int16 v58 = v57 + v29;
        int v49 = (_WORD *)(*((void *)v15 + 8) + LODWORD(v16->__sig));
        if (((*(unsigned __int16 *)&v16->__opaque[2] >> 1) & 0x7FF0u) < v58)
        {
          int v59 = v58;
          unsigned int v60 = WORD2(v16->__sig);
          if (sig_high < v60) {
            unsigned int v61 = WORD2(v16->__sig);
          }
          else {
            unsigned int v61 = v60 + 1;
          }
          uint64_t v62 = (uint64_t)v15;
          int v63 = v21;
          v237 = v15;
          uint64_t v64 = v13;
          uint64_t v65 = v14;
          int v66 = v22;
          uint64_t v67 = physx::Sc::NPhaseCore::resizeContactReportPairData(v62, v61, v59, (unsigned int *)v16);
          int v22 = v66;
          uint64_t v14 = v65;
          uint64_t v13 = v64;
          int v15 = v237;
          int v21 = v63;
          int v49 = v67;
        }
        if (v49)
        {
          if (v29) {
            uint64_t v68 = v29;
          }
          else {
            uint64_t v68 = 4;
          }
          uint64_t v69 = v9[1];
          uint64_t v70 = v9[2];
          *int v49 = v11;
          uint64_t v71 = (char *)v49 + v68;
          *uint64_t v71 = 3;
          *((_WORD *)v71 + 1) = sig_high;
          if ((v22 & 0x2000) != 0)
          {
            v71[4] = 1;
            unsigned int v72 = v71 + 56;
            if (v11)
            {
              uint64_t v74 = *(void *)(v69 + 80);
              if (*(unsigned char *)(v74 + 13))
              {
                *((void *)v71 + 1) = *(void *)(v74 + 80);
                *((_DWORD *)v71 + 4) = *(_DWORD *)(v74 + 88);
                uint64_t v75 = *(void *)(v74 + 96);
                int v76 = *(_DWORD *)(v74 + 104);
              }
              else
              {
                uint64_t v75 = 0;
                *((void *)v71 + 1) = 0;
                *((_DWORD *)v71 + 4) = 0;
                int v76 = 0;
              }
              *((void *)v71 + 4) = v75;
              *((_DWORD *)v71 + 10) = v76;
              uint64_t v180 = *(void *)(v70 + 80);
              uint64_t v23 = v239;
              if (*(unsigned char *)(v180 + 13))
              {
                *(void *)(v71 + 20) = *(void *)(v180 + 80);
                *((_DWORD *)v71 + 7) = *(_DWORD *)(v180 + 88);
                *(void *)(v71 + 44) = *(void *)(v180 + 96);
                *((_DWORD *)v71 + 13) = *(_DWORD *)(v180 + 104);
              }
              else
              {
                *(void *)(v71 + 20) = 0;
                *((_DWORD *)v71 + 7) = 0;
                *(void *)(v71 + 44) = 0;
                *((_DWORD *)v71 + 13) = 0;
              }
LABEL_150:
              if ((v22 & 0x1000) == 0) {
                goto LABEL_168;
              }
              *unsigned int v72 = 0;
              uint64_t v181 = *(void *)(v69 + 80);
              if (*(unsigned char *)(v181 + 13))
              {
                if (v11)
                {
                  v182 = *(uint64_t **)(v69 + 128);
                  if (v182)
                  {
                    uint64_t v183 = *v182;
                    int v184 = *((_DWORD *)v182 + 2);
                    uint64_t v185 = v182[2];
                    int v186 = *((_DWORD *)v182 + 6);
                  }
                  else
                  {
                    uint64_t v183 = 0;
                    int v184 = 0;
                    int v186 = 0;
                    uint64_t v185 = 0;
                  }
                  *(void *)(v72 + 4) = v183;
                  *((_DWORD *)v72 + 3) = v184;
                  *(void *)(v72 + 28) = v185;
                  *((_DWORD *)v72 + 9) = v186;
                  if (*(unsigned char *)(*(void *)(v70 + 80) + 13)) {
                    goto LABEL_162;
                  }
                  goto LABEL_164;
                }
                *(void *)(v72 + 4) = *(void *)(v181 + 80);
                *((_DWORD *)v72 + 3) = *(_DWORD *)(v181 + 88);
                *(void *)(v72 + 28) = *(void *)(v181 + 96);
                *((_DWORD *)v72 + 9) = *(_DWORD *)(v181 + 104);
                uint64_t v187 = *(void *)(v70 + 80);
                if (*(unsigned char *)(v187 + 13))
                {
LABEL_159:
                  *((void *)v72 + 2) = *(void *)(v187 + 80);
                  *((_DWORD *)v72 + 6) = *(_DWORD *)(v187 + 88);
                  *((void *)v72 + 5) = *(void *)(v187 + 96);
                  int v188 = *(_DWORD *)(v187 + 104);
LABEL_167:
                  *((_DWORD *)v72 + 12) = v188;
                  v72 += 52;
LABEL_168:
                  if ((v22 & 0x4000) != 0)
                  {
                    *unsigned int v72 = 2;
                    uint64_t v193 = *(void *)(v69 + 80);
                    __int16 v236 = (_WORD)v49 + v68;
                    __int16 v238 = v68;
                    int v235 = v22;
                    int v194 = v21;
                    if (*(unsigned char *)(v193 + 13))
                    {
                      int v195 = a6 ^ 1;
                      if (v11) {
                        int v195 = 1;
                      }
                      v196 = (float *)(v69 + 96);
                      if (v195) {
                        v197 = v196;
                      }
                      else {
                        v197 = (float *)(v193 + 16);
                      }
                      float v198 = *(float *)(v193 + 64) * -2.0;
                      float v199 = *(float *)(v193 + 68) * -2.0;
                      float v200 = *(float *)(v193 + 72) * -2.0;
                      float v202 = *(float *)(v193 + 56);
                      float v201 = *(float *)(v193 + 60);
                      float v203 = (float)(v201 * v201) + -0.5;
                      float v204 = *(float *)(v193 + 48);
                      float v205 = *(float *)(v193 + 52);
                      float v206 = (float)((float)(v199 * v205) + (float)(v204 * v198)) + (float)(v202 * v200);
                      float v249 = -v204;
                      float v250 = -v205;
                      float v251 = -v202;
                      float v252 = v201;
                      float v253 = (float)((float)(v198 * v203)
                                   - (float)((float)((float)(v205 * v200) - (float)(v202 * v199)) * v201))
                           + (float)(v204 * v206);
                      float v254 = (float)((float)(v199 * v203)
                                   - (float)((float)((float)(v202 * v198) - (float)(v204 * v200)) * v201))
                           + (float)(v205 * v206);
                      float v255 = (float)((float)(v200 * v203)
                                   - (float)((float)((float)(v204 * v199) - (float)(v205 * v198)) * v201))
                           + (float)(v202 * v206);
                      float v208 = v197[2];
                      float v207 = v197[3];
                      float v209 = (float)(v207 * v207) + -0.5;
                      float v210 = v197[1];
                      float v211 = (float)((float)((float)(v254 + v254) * v210) + (float)(*v197 * (float)(v253 + v253)))
                           + (float)(v208 * (float)(v255 + v255));
                      float v212 = v197[4]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(v210 * (float)(v255 + v255))
                                                           - (float)(v208 * (float)(v254 + v254))))
                                           + (float)((float)(v253 + v253) * v209))
                                   + (float)(*v197 * v211));
                      float v213 = v197[5]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(v208 * (float)(v253 + v253))
                                                           - (float)(*v197 * (float)(v255 + v255))))
                                           + (float)((float)(v254 + v254) * v209))
                                   + (float)(v210 * v211));
                      float v214 = v197[6]
                           + (float)((float)((float)(v207
                                                   * (float)((float)(*v197 * (float)(v254 + v254))
                                                           - (float)(v210 * (float)(v253 + v253))))
                                           + (float)((float)(v255 + v255) * v209))
                                   + (float)(v208 * v211));
                      physx::PxQuat::operator*(v197, &v249, v256);
                      *(_OWORD *)(v72 + 4) = *(_OWORD *)v256;
                      *((float *)v72 + 5) = v212;
                      *((float *)v72 + 6) = v213;
                    }
                    else
                    {
                      *(_OWORD *)(v72 + 4) = *(_OWORD *)(v193 + 16);
                      *(void *)(v72 + 20) = *(void *)(v193 + 32);
                      float v214 = *(float *)(v193 + 40);
                    }
                    *((float *)v72 + 7) = v214;
                    uint64_t v215 = *(void *)(v70 + 80);
                    if (*(unsigned char *)(v215 + 13))
                    {
                      int v216 = a6 ^ 1;
                      if (v11) {
                        int v216 = 1;
                      }
                      if (v216) {
                        v217 = (float *)(v70 + 96);
                      }
                      else {
                        v217 = (float *)(v215 + 16);
                      }
                      float v218 = *(float *)(v215 + 64) * -2.0;
                      float v219 = *(float *)(v215 + 68) * -2.0;
                      float v220 = *(float *)(v215 + 72) * -2.0;
                      float v222 = *(float *)(v215 + 56);
                      float v221 = *(float *)(v215 + 60);
                      float v223 = (float)(v221 * v221) + -0.5;
                      float v224 = *(float *)(v215 + 48);
                      float v225 = *(float *)(v215 + 52);
                      float v226 = (float)((float)(v219 * v225) + (float)(v224 * v218)) + (float)(v222 * v220);
                      float v249 = -v224;
                      float v250 = -v225;
                      float v251 = -v222;
                      float v252 = v221;
                      float v253 = (float)((float)(v218 * v223)
                                   - (float)((float)((float)(v225 * v220) - (float)(v222 * v219)) * v221))
                           + (float)(v224 * v226);
                      float v254 = (float)((float)(v219 * v223)
                                   - (float)((float)((float)(v222 * v218) - (float)(v224 * v220)) * v221))
                           + (float)(v225 * v226);
                      float v255 = (float)((float)(v220 * v223)
                                   - (float)((float)((float)(v224 * v219) - (float)(v225 * v218)) * v221))
                           + (float)(v222 * v226);
                      float v228 = v217[2];
                      float v227 = v217[3];
                      float v229 = (float)(v227 * v227) + -0.5;
                      float v230 = v217[1];
                      float v231 = (float)((float)((float)(v254 + v254) * v230) + (float)(*v217 * (float)(v253 + v253)))
                           + (float)(v228 * (float)(v255 + v255));
                      float v232 = v217[4]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(v230 * (float)(v255 + v255))
                                                           - (float)(v228 * (float)(v254 + v254))))
                                           + (float)((float)(v253 + v253) * v229))
                                   + (float)(*v217 * v231));
                      float v233 = v217[5]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(v228 * (float)(v253 + v253))
                                                           - (float)(*v217 * (float)(v255 + v255))))
                                           + (float)((float)(v254 + v254) * v229))
                                   + (float)(v230 * v231));
                      float v234 = v217[6]
                           + (float)((float)((float)(v227
                                                   * (float)((float)(*v217 * (float)(v254 + v254))
                                                           - (float)(v230 * (float)(v253 + v253))))
                                           + (float)((float)(v255 + v255) * v229))
                                   + (float)(v228 * v231));
                      physx::PxQuat::operator*(v217, &v249, v256);
                      *((_OWORD *)v72 + 2) = *(_OWORD *)v256;
                      *((float *)v72 + 12) = v232;
                    }
                    else
                    {
                      *((_OWORD *)v72 + 2) = *(_OWORD *)(v215 + 16);
                      *((_DWORD *)v72 + 12) = *(_DWORD *)(v215 + 32);
                      float v233 = *(float *)(v215 + 36);
                      float v234 = *(float *)(v215 + 40);
                    }
                    int v21 = v194;
                    int v22 = v235;
                    LOWORD(v71) = v236;
                    LOWORD(v68) = v238;
                    *((float *)v72 + 13) = v233;
                    *((float *)v72 + 14) = v234;
                    LOWORD(v72) = (_WORD)v72 + 60;
                  }
                  *(_WORD *)v16->__opaque = v68 + (_WORD)v72 - (_WORD)v71;
                  if ((~v22 & 0x2800) != 0) {
                    goto LABEL_113;
                  }
LABEL_112:
                  *(unsigned char *)(v14 + 7472) = 1;
                  goto LABEL_113;
                }
              }
              else
              {
                *(void *)(v72 + 4) = 0;
                *((_DWORD *)v72 + 3) = 0;
                *(void *)(v72 + 28) = 0;
                *((_DWORD *)v72 + 9) = 0;
                uint64_t v187 = *(void *)(v70 + 80);
                if (*(unsigned char *)(v187 + 13))
                {
                  if (v11)
                  {
LABEL_162:
                    v189 = *(uint64_t **)(v70 + 128);
                    if (v189)
                    {
                      uint64_t v190 = *v189;
                      int v191 = *((_DWORD *)v189 + 2);
                      uint64_t v192 = v189[2];
                      int v188 = *((_DWORD *)v189 + 6);
                    }
                    else
                    {
                      uint64_t v190 = 0;
                      int v191 = 0;
                      int v188 = 0;
                      uint64_t v192 = 0;
                    }
                    *((void *)v72 + 2) = v190;
                    *((_DWORD *)v72 + 6) = v191;
                    *((void *)v72 + 5) = v192;
                    goto LABEL_167;
                  }
                  goto LABEL_159;
                }
              }
LABEL_164:
              *((void *)v72 + 2) = 0;
              *((_DWORD *)v72 + 6) = 0;
              *((void *)v72 + 5) = 0;
              int v188 = 0;
              goto LABEL_167;
            }
            *(_WORD *)&v16->__opaque[2] |= 8u;
          }
          else
          {
            unsigned int v72 = v71 + 4;
          }
          uint64_t v23 = v239;
          goto LABEL_150;
        }
        *(_WORD *)&v16->__opaque[2] |= 4u;
      }
      uint64_t v23 = v239;
    }
LABEL_67:
    int v49 = v28;
    if (v28) {
      goto LABEL_113;
    }
LABEL_68:
    __int16 v73 = *(_WORD *)&v16->__opaque[2] | 2;
    goto LABEL_69;
  }
  int v31 = WORD2(v16->__sig);
  if (!WORD2(v16->__sig))
  {
    int v31 = 2;
    WORD2(v16->__sig) = 2;
  }
  unsigned int v32 = *(unsigned __int16 *)&v16->__opaque[2];
  if ((v22 & 0x7000) == 0 || a4)
  {
    *(_WORD *)&v16->__opaque[2] &= 0x1Fu;
    float v42 = v15;
    uint64_t v43 = v15;
    int v44 = v21;
    uint64_t v45 = physx::Sc::NPhaseCore::reserveContactReportPairData(v42, v31, 0, (unsigned int *)v16, a8);
    int v21 = v44;
    int v15 = v43;
    uint64_t v28 = (unsigned __int16 *)v45;
    *(_DWORD *)((char *)&v16->__sig + 6) = 0;
    *(_WORD *)&v16->__opaque[2] &= 0xFFE0u;
    goto LABEL_67;
  }
  uint64_t v240 = v13;
  uint64_t v33 = v14;
  float v34 = v15;
  int v35 = v11;
  uint64_t v36 = v23;
  if ((v22 & 0x1000) != 0) {
    int v37 = 56;
  }
  else {
    int v37 = 4;
  }
  if ((v22 & 0x2000) != 0) {
    v37 += 52;
  }
  if ((v22 & 0x4000) != 0) {
    v37 += 60;
  }
  unsigned int v38 = v37 + 4;
  int v39 = v22;
  int v40 = v21;
  if (((v32 >> 1) & 0x7FF0) >= v37 + 4)
  {
    unsigned int v38 = (v32 >> 1) & 0x7FF0;
  }
  else
  {
    unsigned int v41 = v38 >> 4;
    if ((v38 & 0xF) != 0) {
      LOWORD(v41) = v41 + 1;
    }
    *(_WORD *)&v16->__opaque[2] = *(_WORD *)&v16->__opaque[2] & 0x1F | (32 * v41);
  }
  uint64_t v46 = v34;
  uint64_t v47 = physx::Sc::NPhaseCore::reserveContactReportPairData(v34, v31, v38, (unsigned int *)v16, a8);
  int v48 = v39;
  uint64_t v14 = v33;
  uint64_t v13 = v240;
  if (!v47) {
    goto LABEL_68;
  }
  int v49 = (_WORD *)v47;
  int v21 = v40;
  uint64_t v23 = v36;
  int v11 = v35;
  int v15 = v46;
  *(_DWORD *)((char *)&v16->__sig + 6) = 0;
  __int16 v50 = *(_WORD *)&v16->__opaque[2] & 0xFFE0;
  *(_WORD *)&v16->__opaque[2] = v50;
  uint64_t v52 = v9[1];
  uint64_t v51 = v9[2];
  *(_WORD *)uint64_t v47 = v11;
  *(unsigned char *)(v47 + 4) = 3;
  *(_WORD *)(v47 + 6) = 0;
  if ((v48 & 0x2000) != 0)
  {
    *(unsigned char *)(v47 + 8) = 1;
    uint64_t v53 = v47 + 60;
    if (v11)
    {
      uint64_t v54 = *(void *)(v52 + 80);
      if (*(unsigned char *)(v54 + 13))
      {
        *(void *)(v47 + 12) = *(void *)(v54 + 80);
        *(_DWORD *)(v47 + 20) = *(_DWORD *)(v54 + 88);
        uint64_t v55 = *(void *)(v54 + 96);
        int v56 = *(_DWORD *)(v54 + 104);
      }
      else
      {
        uint64_t v55 = 0;
        *(void *)(v47 + 12) = 0;
        *(_DWORD *)(v47 + 20) = 0;
        int v56 = 0;
      }
      *(void *)(v47 + 36) = v55;
      *(_DWORD *)(v47 + 44) = v56;
      uint64_t v77 = *(void *)(v51 + 80);
      if (*(unsigned char *)(v77 + 13))
      {
        *(void *)(v47 + 24) = *(void *)(v77 + 80);
        *(_DWORD *)(v47 + 32) = *(_DWORD *)(v77 + 88);
        *(void *)(v47 + 48) = *(void *)(v77 + 96);
        *(_DWORD *)(v47 + 56) = *(_DWORD *)(v77 + 104);
      }
      else
      {
        *(void *)(v47 + 24) = 0;
        *(_DWORD *)(v47 + 32) = 0;
        *(void *)(v47 + 48) = 0;
        *(_DWORD *)(v47 + 56) = 0;
      }
    }
    else
    {
      *(_WORD *)&v16->__opaque[2] = v50 | 8;
    }
  }
  else
  {
    uint64_t v53 = v47 + 8;
  }
  if ((v48 & 0x1000) != 0)
  {
    *(unsigned char *)uint64_t v53 = 0;
    uint64_t v78 = *(void *)(v52 + 80);
    if (*(unsigned char *)(v78 + 13))
    {
      if (v11)
      {
        v79 = *(uint64_t **)(v52 + 128);
        if (v79)
        {
          uint64_t v80 = *v79;
          int v81 = *((_DWORD *)v79 + 2);
          uint64_t v82 = v79[2];
          int v83 = *((_DWORD *)v79 + 6);
        }
        else
        {
          uint64_t v80 = 0;
          int v81 = 0;
          int v83 = 0;
          uint64_t v82 = 0;
        }
        *(void *)(v53 + 4) = v80;
        *(_DWORD *)(v53 + 12) = v81;
        *(void *)(v53 + 28) = v82;
        *(_DWORD *)(v53 + 36) = v83;
        if (*(unsigned char *)(*(void *)(v51 + 80) + 13)) {
          goto LABEL_89;
        }
        goto LABEL_91;
      }
      *(void *)(v53 + 4) = *(void *)(v78 + 80);
      *(_DWORD *)(v53 + 12) = *(_DWORD *)(v78 + 88);
      *(void *)(v53 + 28) = *(void *)(v78 + 96);
      *(_DWORD *)(v53 + 36) = *(_DWORD *)(v78 + 104);
      uint64_t v84 = *(void *)(v51 + 80);
      if (*(unsigned char *)(v84 + 13))
      {
LABEL_86:
        *(void *)(v53 + 16) = *(void *)(v84 + 80);
        *(_DWORD *)(v53 + 24) = *(_DWORD *)(v84 + 88);
        *(void *)(v53 + 40) = *(void *)(v84 + 96);
        int v85 = *(_DWORD *)(v84 + 104);
LABEL_94:
        *(_DWORD *)(v53 + 48) = v85;
        v53 += 52;
        goto LABEL_95;
      }
    }
    else
    {
      *(void *)(v53 + 4) = 0;
      *(_DWORD *)(v53 + 12) = 0;
      *(void *)(v53 + 28) = 0;
      *(_DWORD *)(v53 + 36) = 0;
      uint64_t v84 = *(void *)(v51 + 80);
      if (*(unsigned char *)(v84 + 13))
      {
        if (v11)
        {
LABEL_89:
          uint64_t v86 = *(uint64_t **)(v51 + 128);
          if (v86)
          {
            uint64_t v87 = *v86;
            int v88 = *((_DWORD *)v86 + 2);
            uint64_t v89 = v86[2];
            int v85 = *((_DWORD *)v86 + 6);
          }
          else
          {
            uint64_t v87 = 0;
            int v88 = 0;
            int v85 = 0;
            uint64_t v89 = 0;
          }
          *(void *)(v53 + 16) = v87;
          *(_DWORD *)(v53 + 24) = v88;
          *(void *)(v53 + 40) = v89;
          goto LABEL_94;
        }
        goto LABEL_86;
      }
    }
LABEL_91:
    *(void *)(v53 + 16) = 0;
    *(_DWORD *)(v53 + 24) = 0;
    *(void *)(v53 + 40) = 0;
    int v85 = 0;
    goto LABEL_94;
  }
LABEL_95:
  if ((v48 & 0x4000) != 0)
  {
    *(unsigned char *)uint64_t v53 = 2;
    uint64_t v90 = *(void *)(v52 + 80);
    if (*(unsigned char *)(v90 + 13))
    {
      int v91 = a6 ^ 1;
      if (v11) {
        int v91 = 1;
      }
      uint64_t v92 = (float *)(v52 + 96);
      if (!v91) {
        uint64_t v92 = (float *)(v90 + 16);
      }
      float v93 = *(float *)(v90 + 64) * -2.0;
      float v94 = *(float *)(v90 + 68) * -2.0;
      float v95 = *(float *)(v90 + 72) * -2.0;
      float v97 = *(float *)(v90 + 56);
      float v96 = *(float *)(v90 + 60);
      float v98 = (float)(v96 * v96) + -0.5;
      float v99 = *(float *)(v90 + 48);
      float v100 = *(float *)(v90 + 52);
      float v101 = (float)((float)(v94 * v100) + (float)(v99 * v93)) + (float)(v97 * v95);
      float v102 = (float)((float)(v93 * v98) - (float)((float)((float)(v100 * v95) - (float)(v97 * v94)) * v96))
           + (float)(v99 * v101);
      float v103 = (float)((float)(v94 * v98) - (float)((float)((float)(v97 * v93) - (float)(v99 * v95)) * v96))
           + (float)(v100 * v101);
      float v104 = (float)((float)(v95 * v98) - (float)((float)((float)(v99 * v94) - (float)(v100 * v93)) * v96))
           + (float)(v97 * v101);
      float v105 = v103 + v103;
      float v106 = v104 + v104;
      float v108 = v92[2];
      float v107 = v92[3];
      float v109 = (float)(v107 * v107) + -0.5;
      float v110 = v92[1];
      float v111 = (float)((float)(v110 * v105) + (float)(*v92 * (float)(v102 + v102))) + (float)(v108 * v106);
      float v112 = (float)((float)(v107 * (float)((float)(v110 * v106) - (float)(v108 * v105)))
                   + (float)((float)(v102 + v102) * v109))
           + (float)(*v92 * v111);
      float v113 = (float)((float)(v107 * (float)((float)(v108 * (float)(v102 + v102)) - (float)(*v92 * v106)))
                   + (float)(v105 * v109))
           + (float)(v110 * v111);
      float v114 = (float)((float)(v107 * (float)((float)(*v92 * v105) - (float)(v110 * (float)(v102 + v102))))
                   + (float)(v106 * v109))
           + (float)(v108 * v111);
      float v115 = v92[4] + v112;
      float v116 = v92[5] + v113;
      float v117 = v92[6] + v114;
      float v118 = (float)((float)((float)(v96 * *v92) - (float)(v107 * v99)) - (float)(v110 * v97)) + (float)(v100 * v108);
      float v119 = (float)((float)((float)(v96 * v110) - (float)(v107 * v100)) - (float)(v108 * v99)) + (float)(v97 * *v92);
      float v120 = (float)((float)((float)(v96 * v108) - (float)(v107 * v97)) - (float)(*v92 * v100)) + (float)(v99 * v110);
      float v121 = (float)((float)((float)(v99 * *v92) + (float)(v107 * v96)) + (float)(v110 * v100)) + (float)(v108 * v97);
      *(float *)(v53 + 4) = v118;
      *(float *)(v53 + 8) = v119;
      *(float *)(v53 + 12) = v120;
    }
    else
    {
      *(void *)(v53 + 4) = *(void *)(v90 + 16);
      *(_DWORD *)(v53 + 12) = *(_DWORD *)(v90 + 24);
      float v121 = *(float *)(v90 + 28);
      float v115 = *(float *)(v90 + 32);
      float v116 = *(float *)(v90 + 36);
      float v117 = *(float *)(v90 + 40);
    }
    *(float *)(v53 + 16) = v121;
    *(float *)(v53 + 20) = v115;
    *(float *)(v53 + 24) = v116;
    *(float *)(v53 + 28) = v117;
    uint64_t v122 = *(void *)(v51 + 80);
    if (*(unsigned char *)(v122 + 13))
    {
      int v123 = a6 ^ 1;
      if (v11) {
        int v123 = 1;
      }
      long long v124 = (float *)(v51 + 96);
      if (!v123) {
        long long v124 = (float *)(v122 + 16);
      }
      float v125 = *(float *)(v122 + 64) * -2.0;
      float v126 = *(float *)(v122 + 68) * -2.0;
      float v127 = *(float *)(v122 + 72) * -2.0;
      float v129 = *(float *)(v122 + 56);
      float v128 = *(float *)(v122 + 60);
      float v130 = (float)(v128 * v128) + -0.5;
      float v131 = *(float *)(v122 + 48);
      float v132 = *(float *)(v122 + 52);
      float v133 = (float)((float)(v126 * v132) + (float)(v131 * v125)) + (float)(v129 * v127);
      float v134 = (float)((float)(v125 * v130) - (float)((float)((float)(v132 * v127) - (float)(v129 * v126)) * v128))
           + (float)(v131 * v133);
      float v135 = (float)((float)(v126 * v130) - (float)((float)((float)(v129 * v125) - (float)(v131 * v127)) * v128))
           + (float)(v132 * v133);
      float v136 = (float)((float)(v127 * v130) - (float)((float)((float)(v131 * v126) - (float)(v132 * v125)) * v128))
           + (float)(v129 * v133);
      float v137 = v135 + v135;
      float v138 = v136 + v136;
      float v140 = v124[2];
      float v139 = v124[3];
      float v141 = (float)(v139 * v139) + -0.5;
      float v142 = v124[1];
      float v143 = (float)((float)(v142 * v137) + (float)(*v124 * (float)(v134 + v134))) + (float)(v140 * v138);
      float v144 = (float)((float)(v139 * (float)((float)(v142 * v138) - (float)(v140 * v137)))
                   + (float)((float)(v134 + v134) * v141))
           + (float)(*v124 * v143);
      float v145 = (float)((float)(v139 * (float)((float)(v140 * (float)(v134 + v134)) - (float)(*v124 * v138)))
                   + (float)(v137 * v141))
           + (float)(v142 * v143);
      float v146 = (float)((float)(v139 * (float)((float)(*v124 * v137) - (float)(v142 * (float)(v134 + v134))))
                   + (float)(v138 * v141))
           + (float)(v140 * v143);
      float v147 = v124[4] + v144;
      float v148 = v124[5] + v145;
      float v149 = v124[6] + v146;
      float v150 = (float)((float)((float)(v128 * *v124) - (float)(v139 * v131)) - (float)(v142 * v129))
           + (float)(v132 * v140);
      float v151 = (float)((float)((float)(v128 * v142) - (float)(v139 * v132)) - (float)(v140 * v131))
           + (float)(v129 * *v124);
      float v152 = (float)((float)((float)(v128 * v140) - (float)(v139 * v129)) - (float)(*v124 * v132))
           + (float)(v131 * v142);
      float v153 = (float)((float)((float)(v131 * *v124) + (float)(v139 * v128)) + (float)(v142 * v132))
           + (float)(v140 * v129);
      *(float *)(v53 + 32) = v150;
      *(float *)(v53 + 36) = v151;
      *(float *)(v53 + 40) = v152;
    }
    else
    {
      *(void *)(v53 + 32) = *(void *)(v122 + 16);
      *(_DWORD *)(v53 + 40) = *(_DWORD *)(v122 + 24);
      float v153 = *(float *)(v122 + 28);
      float v147 = *(float *)(v122 + 32);
      float v148 = *(float *)(v122 + 36);
      float v149 = *(float *)(v122 + 40);
    }
    *(float *)(v53 + 44) = v153;
    *(float *)(v53 + 48) = v147;
    *(float *)(v53 + 52) = v148;
    *(float *)(v53 + 56) = v149;
    LOWORD(v53) = v53 + 60;
  }
  *(_WORD *)v16->__opaque = v53 - v47;
  if ((~v48 & 0x2800) == 0) {
    goto LABEL_112;
  }
LABEL_113:
  unint64_t v154 = ((unint64_t)*(unsigned __int16 *)&v16->__opaque[2] >> 1) & 0x7FF0;
  v155 = (char *)v49 + v154;
  if (*(_DWORD *)(v13 + 60) != v21)
  {
    unsigned int v159 = HIWORD(v16->__sig);
    if (v159 < WORD2(v16->__sig))
    {
      __int16 v157 = v248;
LABEL_121:
      v156 = &v155[64 * (unint64_t)v159];
      *(_WORD *)(v13 + 100) = v159;
      uint64_t v164 = qword_2687A62F0;
      *(void *)v156 = *(void *)(v243 + 56) + qword_2687A62F0;
      *((void *)v156 + 1) = *(void *)(v244 + 56) + v164;
      *((_OWORD *)v156 + 1) = 0u;
      *((_OWORD *)v156 + 2) = 0u;
      *((_WORD *)v156 + 24) = a3;
      *((_WORD *)v156 + 25) = v157;
      *((_DWORD *)v156 + 13) = *(_DWORD *)(v243 + 64);
      *((_DWORD *)v156 + 14) = *(_DWORD *)(v244 + 64);
      HIWORD(v16->__sig) = v159 + 1;
      *(_DWORD *)(v13 + 60) = v21;
      goto LABEL_122;
    }
    uint64_t v160 = (uint64_t)v15;
    int v161 = v21;
    v162 = physx::Sc::NPhaseCore::resizeContactReportPairData(v160, v159 + (v159 >> 1) + 1, v154, (unsigned int *)v16);
    unint64_t v163 = *(unsigned __int16 *)&v16->__opaque[2];
    __int16 v157 = v248;
    if (v162)
    {
      v155 = &v162[(v163 >> 1) & 0x7FF0];
      unsigned int v159 = HIWORD(v16->__sig);
      int v21 = v161;
      goto LABEL_121;
    }
    __int16 v73 = v163 | 4;
LABEL_69:
    *(_WORD *)&v16->__opaque[2] = v73;
    return;
  }
  v156 = &v155[64 * (unint64_t)*(unsigned __int16 *)(v13 + 100)];
  __int16 v157 = v248;
  __int16 v158 = *((_WORD *)v156 + 25) | v248;
  if ((*(_DWORD *)&v247 & ((v158 & 8) >> 3)) != 0) {
    v158 &= ~8u;
  }
  *((_WORD *)v156 + 25) = v158;
  *((_WORD *)v156 + 24) |= a3;
LABEL_122:
  if ((*(unsigned char *)(v13 + 65) & 2) != 0)
  {
    uint64_t v165 = *(void *)(v13 + 88);
    if (v165)
    {
      if ((v157 & 0x110) == 0 && !*((void *)v156 + 2))
      {
        unsigned int v166 = *(_DWORD *)(v165 + 108);
        if ((v166 & 0x80000000) != 0)
        {
          uint64_t v168 = *(void *)(*(void *)(*(void *)(*(void *)(v13 + 8) + 72) + 1840) + 1776);
          uint64_t v167 = (*(uint64_t (**)(uint64_t))(*(void *)v168 + 160))(v168);
        }
        else
        {
          uint64_t v167 = *(void *)(a7 + 32) + 32 * (*(_DWORD *)(a7 + 4 * (v166 & 7)) + (v166 >> 3));
        }
        unint64_t v169 = *(void *)(v165 + 64);
        if (v11 || (int v170 = *(unsigned __int8 *)(v167 + 25), !*(unsigned char *)(v167 + 25)))
        {
          if (!v169 || !v11 || *(_WORD *)(v169 + 10)) {
            return;
          }
          int64x2_t v172 = vaddq_s64(vdupq_n_s64(v169), (int64x2_t)xmmword_234421A80);
          int v176 = *(unsigned __int16 *)(v169 + 8);
          __int16 v173 = v176 - 16;
          uint64_t v175 = ((v176 + 15) & 0x1FFF0u) - 16;
          uint64_t v174 = v172.i64[0] + v175;
          int v171 = 1;
          LOBYTE(v170) = 1;
        }
        else
        {
          int v171 = *(unsigned __int8 *)(v167 + 24);
          int64x2_t v172 = *(int64x2_t *)v167;
          __int16 v173 = 48 * v170 + 16 * v171;
          uint64_t v174 = *(void *)(v167 + 16);
          LODWORD(v175) = 48 * v170 + 16 * v171;
        }
        __int16 v177 = *((_WORD *)v156 + 24) | (32 * (v23 != v241));
        int v178 = 4 * v171;
        *((int64x2_t *)v156 + 1) = v172;
        if (!v174) {
          int v178 = 0;
        }
        v156[44] = v171;
        v156[45] = v170;
        if (v178) {
          __int16 v179 = v177 | 0x10;
        }
        else {
          __int16 v179 = v177;
        }
        *((_WORD *)v156 + 23) = v173;
        *((_DWORD *)v156 + 10) = v178 + v175;
        *((void *)v156 + 4) = v174;
        *((_WORD *)v156 + 24) = v179;
      }
    }
  }
}

void physx::Sc::ShapeInteraction::managerNewTouch(physx::Sc::ShapeInteraction *this, int a2, int a3, uint64_t a4, char a5)
{
  int v5 = *((_DWORD *)this + 16);
  if ((v5 & 0x8000) == 0)
  {
    *((_DWORD *)this + 16) = v5 & 0xFFFE7FFF | 0x8000;
    if (a3)
    {
      uint64_t v9 = *(void *)(*((void *)this + 5) + 8);
      int v10 = *(unsigned __int8 *)(*(void *)(v9 + 80) + 13);
      uint64_t v11 = *(void *)(*((void *)this + 6) + 8);
      if (*(unsigned __int8 *)(*(void *)(v11 + 80) + 13) - 1 >= 2) {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *((void *)this + 9);
      int v13 = *(unsigned __int16 *)(v12 + 2);
      *(_WORD *)(v12 + 2) = v13 + 1;
      if ((a5 & 1) != 0 || !v13)
      {
        if ((v10 - 1) >= 2) {
          uint64_t v9 = 0;
        }
        ++*(_DWORD *)(*(void *)(v9 + 136) + 152);
        if (v11) {
          ++*(_DWORD *)(*(void *)(v11 + 136) + 152);
        }
      }
    }
    if ((v5 & 0x1DC) != 0)
    {
      if ((v5 & 4) != 0)
      {
        __int16 v14 = *(_WORD *)(*((void *)this + 9) + 2) == 1;
        physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
        physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, 4, 4 * v14, 0, a2, 1, a4, 0);
      }
      if ((v5 & 8) != 0)
      {
        uint64_t v16 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 3992);
        physx::Sc::NPhaseCore::addToPersistentContactEventPairsDelayed(v16, this);
      }
      else if ((v5 & 0x1C0) != 0)
      {
        uint64_t v15 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 3992);
        physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs(v15, this);
      }
    }
  }
}

uint64_t physx::Sc::ShapeInteraction::managerLostTouch(physx::Sc::ShapeInteraction *this, int a2, int a3, uint64_t a4, char a5)
{
  int v5 = *((_DWORD *)this + 16);
  if ((v5 & 0x8000) == 0) {
    return 0;
  }
  if ((v5 & 0x1DC) != 0)
  {
    if ((v5 & 0x80000) != 0) {
      int v9 = 272;
    }
    else {
      int v9 = 16;
    }
    __int16 v10 = v9 & v5;
    if ((v9 & v5) != 0)
    {
      __int16 v13 = *(_WORD *)(*((void *)this + 9) + 2) == 1;
      physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
      physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, v10, 8 * v13, 1, a2, 0, a4, 0);
    }
    uint64_t v14 = *(void *)(*((void *)this + 9) + 24);
    if (v14 && *(_DWORD *)(v14 + 12) == *(_DWORD *)(*(void *)(*((void *)this + 1) + 72) + 1992)) {
      *(_WORD *)(v14 + 10) |= 0x10u;
    }
    unsigned int v15 = *((_DWORD *)this + 16);
    if ((v15 & 0xA00000) != 0)
    {
      uint64_t v16 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 3992);
      if ((v15 & 0x800000) != 0)
      {
        uint64_t v19 = *((unsigned int *)this + 20);
        unsigned int v17 = v15 & 0xFF7FFFFF;
        *((_DWORD *)this + 20) = -1;
        uint64_t v20 = *(void *)(v16 + 48);
        unsigned int v21 = *(_DWORD *)(v16 + 56) - 1;
        *(_DWORD *)(v16 + 56) = v21;
        *(void *)(v20 + 8 * v19) = *(void *)(v20 + 8 * v21);
        if (v19 < v21) {
          *(_DWORD *)(*(void *)(*(void *)(v16 + 48) + 8 * v19) + 80) = v19;
        }
      }
      else
      {
        physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v16, (uint64_t)this);
        unsigned int v17 = *((_DWORD *)this + 16);
      }
      unsigned int v15 = v17 & 0xFFE7FFFF;
    }
    unsigned int v18 = v15 & 0xFFFE7FFF;
  }
  else
  {
    unsigned int v18 = v5 & 0xFFFF7FFF;
  }
  *((_DWORD *)this + 16) = v18 | 0x10000;
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 8) + 80) + 13) - 1 >= 2) {
    int v22 = 0;
  }
  else {
    int v22 = *(physx::Sc::BodySim **)(*((void *)this + 5) + 8);
  }
  uint64_t v23 = *(void *)(*((void *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(void *)(v23 + 80) + 13) - 1 >= 2) {
    uint64_t v23 = 0;
  }
  if (!a3
    || (uint64_t v24 = *((void *)this + 9), v25 = *(_WORD *)(v24 + 2) - 1, *(_WORD *)(v24 + 2) = v25, (a5 & 1) == 0) && v25)
  {
    if (!v23) {
      goto LABEL_32;
    }
    return 1;
  }
  --*(_DWORD *)(*((void *)v22 + 17) + 152);
  if (v23)
  {
    --*(_DWORD *)(*(void *)(v23 + 136) + 152);
    return 1;
  }
LABEL_32:
  physx::Sc::BodySim::internalWakeUp(v22, 0.4);
  return 0;
}

uint64_t physx::Sc::ShapeInteraction::updateState(uint64_t this, char a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v4 = this + 8;
  int v5 = *(_DWORD *)(this + 64);
  char v6 = *(unsigned char *)(this + 38) | a2;
  uint64_t v7 = *(void *)(*(void *)(this + 8) + 72);
  if ((v6 & 0x21) == 0) {
    goto LABEL_28;
  }
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(this + 40) + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(this + 40) + 8);
  }
  uint64_t v9 = *(void *)(*(void *)(this + 48) + 8);
  if (*(unsigned __int8 *)(*(void *)(v9 + 80) + 13) - 1 >= 2) {
    uint64_t v9 = 0;
  }
  if (*(unsigned char *)(*(void *)(v8 + 80) + 44))
  {
    if (!v9) {
      goto LABEL_14;
    }
    BOOL v10 = (*(unsigned char *)(*(void *)(v9 + 80) + 44) & 1) == 0;
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v10 = 1;
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
  }
  if (!v10)
  {
LABEL_14:
    unsigned int v11 = v5 | 0x40000;
    goto LABEL_15;
  }
  unsigned int v11 = v5 & 0xFFFBFFFF;
LABEL_15:
  if ((v5 & 0x202) == 0
    && (uint64_t v12 = *(float **)(v7 + 1840), v12[454] == 0.0)
    && v12[455] == 0.0
    && v12[456] == 0.0
    && v12[457] == 0.0)
  {
    unsigned int v13 = v11 & 0xFFFDFFFF;
  }
  else
  {
    unsigned int v13 = v11 | 0x20000;
  }
  *(_DWORD *)(this + 64) = v13;
  int v14 = v13 & 0x40000;
  if ((v5 & 0x40000) != 0 || !v14)
  {
    if ((v5 & 0x40000) != 0 && !v14 && (v13 & 0x8000) != 0) {
      this = (uint64_t)physx::IG::SimpleIslandManager::setEdgeConnected(*(void **)(v7 + 1880), *(unsigned int *)(this + 96), a3);
    }
  }
  else
  {
    this = physx::IG::SimpleIslandManager::setEdgeDisconnected(*(void *)(v7 + 1880), *(_DWORD *)(this + 96));
  }
LABEL_28:
  unsigned int v15 = *(_DWORD *)(v3 + 64);
  if (((v15 ^ v5) & 0x601DE) == 0)
  {
    uint64_t v22 = *(void *)(v3 + 88);
    if (v22)
    {
      uint64_t v23 = *(void *)(v3 + 40);
      uint64_t v24 = *(void *)(v3 + 48);
      if ((v6 & 8) != 0)
      {
        uint64_t v25 = *(void *)(v23 + 8);
        if (*(unsigned __int8 *)(*(void *)(v25 + 80) + 13) - 1 >= 2) {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void *)(v24 + 8);
        uint64_t v27 = *(void *)(v26 + 80);
        uint64_t v28 = *(unsigned __int8 *)(*(void *)(v25 + 80) + 14);
        if (v26) {
          BOOL v29 = *(unsigned __int8 *)(v27 + 13) - 3 >= 0xFFFFFFFE;
        }
        else {
          BOOL v29 = 0;
        }
        if (v29) {
          unsigned int v30 = *(unsigned __int8 *)(v27 + 14);
        }
        else {
          unsigned int v30 = 0;
        }
        uint64_t v33 = *(void *)(*(void *)v4 + 72) + 4528;
        unsigned int v34 = *(_DWORD *)(v33 + 4 * v28);
        LODWORD(v33) = *(_DWORD *)(v33 + 4 * v30);
        *(unsigned char *)(v22 + 84) = (v34 >> v30) & 1;
        *(unsigned char *)(v22 + 85) = (v33 >> v28) & 1;
      }
      if ((v6 & 5) != 0)
      {
        uint64_t v35 = *(void *)(v24 + 8);
        uint64_t v36 = *(void *)(v35 + 80);
        if (v35 && *(unsigned __int8 *)(v36 + 13) - 3 >= 0xFFFFFFFE) {
          *(_WORD *)(v22 + 80) = *(_WORD *)(v22 + 80) & 0xFBFF | ((*(unsigned char *)(v36 + 44) & 1) << 10);
        }
      }
      if ((v6 & 0x10) != 0) {
        *(float *)(v22 + 92) = *(float *)(*(void *)(v23 + 56) + 160) + *(float *)(*(void *)(v24 + 56) + 160);
      }
      *(_DWORD *)(v22 + 16) = *(_DWORD *)(v22 + 16) & 0xFFFFFFF9 | (v15 >> 10) & 2;
      return this;
    }
  }
  if ((*(unsigned char *)(v3 + 37) & 0x20) == 0) {
    return this;
  }
  if ((v6 & 5) == 0)
  {
    unsigned int v31 = *(_DWORD *)(v3 + 96);
    if (v31 != -1) {
      physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(void *)(v7 + 1880), v31);
    }
    uint64_t v32 = *(void *)(*(void *)(v3 + 8) + 72);
    (*(void (**)(void, void))(**(void **)(*(void *)(v32 + 1840) + 1776) + 72))(*(void *)(*(void *)(v32 + 1840) + 1776), *(void *)(v3 + 88));
    uint64_t v21 = *(void *)(v32 + 1840);
    goto LABEL_52;
  }
  uint64_t v16 = *(void *)(*(void *)(v3 + 8) + 72);
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)(*(void *)(v3 + 40) + 8);
  }
  uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8);
  if (*(unsigned __int8 *)(*(void *)(v18 + 80) + 13) - 1 >= 2) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(*(void *)(v16 + 1880) + 888);
  if ((*(unsigned char *)(v19 + (((unint64_t)*(unsigned int *)(v17 + 176) >> 2) & 0x3FFFFFE0) + 4) & 0x22) != 0
    || v18 && (*(unsigned char *)(v19 + (((unint64_t)*(unsigned int *)(v18 + 176) >> 2) & 0x3FFFFFE0) + 4) & 0x22) != 0)
  {
    unsigned int v20 = *(_DWORD *)(v3 + 96);
    if (v20 != -1)
    {
      physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(void *)(v7 + 1880), v20);
      uint64_t v16 = *(void *)(*(void *)v4 + 72);
    }
    (*(void (**)(void, void))(**(void **)(*(void *)(v16 + 1840) + 1776) + 72))(*(void *)(*(void *)(v16 + 1840) + 1776), *(void *)(v3 + 88));
    uint64_t v21 = *(void *)(v16 + 1840);
LABEL_52:
    physx::PxsContext::destroyContactManager(v21, *(void *)(v3 + 88));
    *(void *)(v3 + 88) = 0;
    return physx::Sc::ShapeInteraction::createManager((physx::Sc::ShapeInteraction *)v3, 0);
  }
  physx::Sc::ShapeInteraction::onDeactivate_((physx::Sc::ShapeInteraction *)v3);
  return physx::Sc::Scene::notifyInteractionDeactivated(v7, v4);
}

uint64_t physx::Sc::ShapeInteraction::onDeactivate_(physx::Sc::ShapeInteraction *this)
{
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 8) + 80) + 13) - 1 >= 2) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  }
  uint64_t v2 = *(void *)(*((void *)this + 6) + 8);
  if (*(unsigned __int8 *)(*(void *)(v2 + 80) + 13) - 1 >= 2) {
    uint64_t v2 = 0;
  }
  if (*(_DWORD *)(v1 + 184) < 0xFFFFFFFE || v2 && *(_DWORD *)(v2 + 184) < 0xFFFFFFFE) {
    return 0;
  }
  uint64_t v5 = *((unsigned int *)this + 20);
  if (v5 != -1)
  {
    int v6 = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = (2 * v6) & 0x400000 | v6;
    uint64_t v7 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 3992);
    if ((v6 & 0x800000) != 0)
    {
      *((_DWORD *)this + 16) = (2 * v6) & 0x400000 | v6 & 0xFF7FFFFF;
      *((_DWORD *)this + 20) = -1;
      uint64_t v8 = *(void *)(v7 + 48);
      unsigned int v9 = *(_DWORD *)(v7 + 56) - 1;
      *(_DWORD *)(v7 + 56) = v9;
      *(void *)(v8 + 8 * v5) = *(void *)(v8 + 8 * v9);
      if (v5 < v9) {
        *(_DWORD *)(*(void *)(*(void *)(v7 + 48) + 8 * v5) + 80) = v5;
      }
    }
    else
    {
      physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(v7, (uint64_t)this);
    }
  }
  uint64_t v10 = *((void *)this + 11);
  if (v10)
  {
    int v11 = *((_DWORD *)this + 16);
    if ((v11 & 0x18000) == 0 && (*(unsigned char *)(v10 + 83) & 3) != 0 && (*(unsigned char *)(v10 + 83) & 2) == 0) {
      *((_DWORD *)this + 16) = v11 | 0x10000;
    }
    uint64_t v13 = *(void *)(*((void *)this + 1) + 72);
    (*(void (**)(void))(**(void **)(*(void *)(v13 + 1840) + 1776) + 72))(*(void *)(*(void *)(v13 + 1840) + 1776));
    physx::PxsContext::destroyContactManager(*(void *)(v13 + 1840), *((void *)this + 11));
    *((void *)this + 11) = 0;
    unsigned int v14 = *((_DWORD *)this + 24);
    if (v14 != -1) {
      physx::IG::SimpleIslandManager::clearEdgeRigidCM(*(void *)(*(void *)(*((void *)this + 1) + 72) + 1880), v14);
    }
  }
  physx::IG::SimpleIslandManager::deactivateEdge(*(void *)(*(void *)(*((void *)this + 1) + 72) + 1880), *((_DWORD *)this + 24));
  *((unsigned char *)this + 37) &= ~0x20u;
  return 1;
}

uint64_t physx::Sc::ShapeInteraction::createManager(physx::Sc::ShapeInteraction *this, uint64_t a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 1) + 72);
  unsigned int v5 = *((_DWORD *)this + 16);
  uint64_t result = physx::PxsContext::createContactManager(*(void *)(v4 + 1840), a2, (v5 >> 11) & 1);
  int v7 = v5 & 2;
  uint64_t v9 = *((void *)this + 5);
  uint64_t v8 = *((void *)this + 6);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = *(void *)(v10 + 80);
  int v12 = *(unsigned __int8 *)(v11 + 13);
  uint64_t v13 = *(void *)(*(void *)(v8 + 8) + 80);
  int v14 = *(unsigned __int8 *)(v13 + 13);
  unsigned int v15 = *((_DWORD *)this + 16);
  int v16 = v15 & 0x40000;
  if ((v5 & 0x1C0) != 0) {
    int v17 = (v15 >> 18) & 1;
  }
  else {
    int v17 = 1;
  }
  if ((v15 & 0x8000) != 0) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  int v19 = v15 & 0x18000;
  if ((v15 & 0x18000) == 0) {
    int v18 = 0;
  }
  if ((v12 - 1) >= 2) {
    uint64_t v10 = 0;
  }
  if ((v14 - 1) >= 2) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(v8 + 8);
  }
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v10 + 80) + 14);
  if (v20)
  {
    uint64_t v22 = *(void *)(v20 + 80);
    unsigned int v23 = *(unsigned __int8 *)(v22 + 14);
    int v24 = *(unsigned char *)(v22 + 44) & 1;
  }
  else
  {
    unsigned int v23 = 0;
    int v24 = 0;
  }
  if (v20) {
    uint64_t v25 = v20 + 96;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v14 == 2) {
    int v26 = (8 * (v12 == 2)) | 0x10;
  }
  else {
    int v26 = 8 * (v12 == 2);
  }
  if (*(unsigned char *)(v11 + 13)) {
    int v27 = v26 | 0x20;
  }
  else {
    int v27 = v26;
  }
  if (*(unsigned char *)(v13 + 13)) {
    v27 |= 0x40u;
  }
  if (!(v16 | v7)) {
    v27 |= 2u;
  }
  int v28 = v27 | (v5 >> 1) & 0x200;
  if (v24) {
    LOWORD(v28) = v28 | 0x400;
  }
  if (v16) {
    __int16 v29 = v28 | 0x800;
  }
  else {
    __int16 v29 = v28;
  }
  if ((v5 & 0x800) != 0) {
    v29 |= 0x1000u;
  }
  if (v17) {
    __int16 v30 = v29 | ((v15 & 0x20000 | v7) != 0);
  }
  else {
    __int16 v30 = v29 | ((v15 & 0x20000 | v7) != 0) | 0x100;
  }
  BOOL v35 = (*((_DWORD *)this + 16) & 0x8000) == 0;
  int v31 = (*(_DWORD *)(v4 + 4528 + 4 * v21) >> v23) & 1;
  int v32 = (*(_DWORD *)(v4 + 4528 + 4 * v23) >> v21) & 1;
  uint64_t v33 = *(void *)(v9 + 56);
  uint64_t v34 = *(void *)(v8 + 56);
  *(void *)uint64_t result = v10 + 96;
  *(void *)(result + 8) = v25;
  *(void *)(result + 48) = v33 + 32;
  *(void *)(result + 56) = v34 + 32;
  *(void *)(result + 24) = this;
  *(void *)(result + 32) = v11 + 16;
  *(void *)(result + 40) = v13 + 16;
  *(float *)(result + 92) = *(float *)(v33 + 160) + *(float *)(v34 + 160);
  *(unsigned char *)(result + 84) = v31;
  *(unsigned char *)(result + 85) = v32;
  *(unsigned char *)(result + 86) = *(_DWORD *)(v33 + 72);
  *(unsigned char *)(result + 87) = *(_DWORD *)(v34 + 72);
  *(_DWORD *)(result + 96) = *(_DWORD *)(v9 + 16) & 0x7FFFFFFF;
  *(_DWORD *)(result + 100) = *(_DWORD *)(v8 + 16) & 0x7FFFFFFF;
  *(int8x8_t *)(result + 112) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v33 + 164), *(float32x2_t *)(v34 + 164)), *(int8x8_t *)(v33 + 164), *(int8x8_t *)(v34 + 164));
  *(_WORD *)(result + 80) = v30 | ((_WORD)v7 << 6);
  *(_DWORD *)(result + 16) = (v5 >> 1) & 1 | ((unsigned __int16)(v5 & 0x800) >> 10);
  *(_DWORD *)(result + 108) = -1;
  *((void *)this + 11) = result;
  BOOL v35 = !v35 || v19 == 0;
  char v36 = !v35;
  if (v18 > 0) {
    char v36 = 2;
  }
  *(unsigned char *)(result + 83) = v36;
  if (!a2)
  {
    unsigned int v37 = *((_DWORD *)this + 24);
    *(void *)(*(void *)(*(void *)(*(void *)(v4 + 1880) + 176)
                          + 8 * (v37 / *(_DWORD *)(*(void *)(v4 + 1880) + 200)))
              + 8 * (v37 % *(_DWORD *)(*(void *)(v4 + 1880) + 200))) = result;
    *(_DWORD *)(result + 104) = v37;
    unsigned int v38 = *(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 1840) + 1776) + 56);
    return v38();
  }
  return result;
}

uint64_t physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(uint64_t this, int a2)
{
  if (!*(void *)(this + 88))
  {
    uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(this + 40) + 8) + 80) + 13) - 1 >= 2
       ? 0
       : *(physx::Sc::BodySim **)(*(void *)(this + 40) + 8);
    if (a2)
    {
      int v4 = *(_DWORD *)(this + 64);
      if ((v4 & 0x18000) == 0)
      {
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(this + 48) + 8) + 80) + 13)
           - 1 >= 2)
          unsigned int v5 = 0;
        else {
          unsigned int v5 = *(physx::Sc::BodySim **)(*(void *)(this + 48) + 8);
        }
        if ((v4 & 0x40000) == 0)
        {
          if (v5) {
            return physx::Sc::Scene::addToLostTouchList(*(void *)(*(void *)(this + 8) + 72), v3, v5);
          }
        }
      }
    }
  }
  return this;
}

void physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(physx::Sc::ShapeSim *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 72);
  uint64_t v3 = *(void *)(v2 + 2064);
  uint64_t v4 = *((_DWORD *)this + 4) & 0x7FFFFFFF;
  physx::Sc::ShapeSim::getAbsPoseAligned((uint64_t)this, &v40);
  uint64_t v16 = *(void *)(*(void *)(v2 + 1840) + 2592);
  unsigned int v17 = *(_DWORD *)(v16 + 20) & 0x7FFFFFFF;
  if (v17 <= v4)
  {
    unsigned int v18 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
    unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    unsigned int v20 = v19 | HIWORD(v19);
    unsigned int v21 = v20 + 1;
    if (v17 <= v20) {
      physx::shdfnd::Array<physx::PxsCachedTransform,physx::shdfnd::VirtualAllocator>::recreate(*(void **)(*(void *)(v2 + 1840) + 2592), v20 + 1);
    }
    *(_DWORD *)(v16 + 16) = v21;
  }
  unsigned int v22 = *(_DWORD *)(v16 + 24);
  if (v22 <= (int)v4 + 1) {
    unsigned int v22 = v4 + 1;
  }
  *(_DWORD *)(v16 + 24) = v22;
  unsigned int v23 = (float32x4_t *)(*(void *)(v16 + 8) + 32 * v4);
  v24.i64[1] = v40.i64[1];
  *unsigned int v23 = v40;
  v23[1].i64[0] = v41;
  v23[1].i32[2] = v42;
  v23[1].i32[3] = 0;
  *(unsigned char *)(v16 + 28) = 1;
  v24.i64[0] = 0;
  v9.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)(*(void *)(v3 + 8) + 24 * v4), *((void *)this + 7) + 72, (uint64_t)&v40, 0, v24, v9, v10, v11, v12, v13, v14, v15, v5, v6, v7, v8, v40.i8[0]);
  *(unsigned char *)(v3 + 24) = 1;
  uint64_t v25 = *((void *)this + 7);
  char v26 = *(unsigned char *)(v25 + 64);
  if ((v26 & 5) != 0)
  {
    float v27 = *(float *)(v25 + 60);
    int BPGroup = physx::Sc::ShapeSim::getBPGroup(this);
    physx::Sc::ElementSim::addToAABBMgr((uint64_t)this, BPGroup, v26 & 4, v27, v29, v30, v31, v32, v33, v40.i8[0]);
  }
  else
  {
    physx::Bp::AABBManager::reserveSpaceForBounds(*(physx::Bp::AABBManager **)(v2 + 1848), v4);
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 2072) + 8) + 4 * v4) = *(_DWORD *)(*((void *)this + 7) + 60);
  *(unsigned char *)(v2 + 2080) = 1;
  int v34 = *(_DWORD *)(v2 + 4520);
  if (v4 >= 32 * v34)
  {
    unsigned int v35 = (v34 << 6) | 2;
    if ((int)v4 + 1 <= v35) {
      int v36 = v35;
    }
    else {
      int v36 = v4 + 1;
    }
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 4512, v36);
  }
  uint64_t v37 = *((void *)this + 1);
  int v38 = *(unsigned __int8 *)(*(void *)(v37 + 80) + 13);
  if ((v38 - 1) <= 1 && *(_DWORD *)(v37 + 184) <= 0xFFFFFFFD)
  {
    physx::Sc::ShapeSim::createSqBounds((uint64_t)this);
    int v38 = *(unsigned __int8 *)(*(void *)(v37 + 80) + 13);
  }
  *((_DWORD *)this + 9) = v4;
  *((void *)this + 3) = *((void *)this + 7) + 32;
  if (v38) {
    int v39 = *(_DWORD *)(*((void *)this + 1) + 176);
  }
  else {
    int v39 = -128;
  }
  *((_DWORD *)this + 8) = v39;
}

float32x4_t physx::Sc::ShapeSim::getAbsPoseAligned(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 56);
  uint64_t v3 = *(float32x4_t **)(*(void *)(a1 + 8) + 80);
  if (v3->i8[13] && !v3[2].i8[13])
  {
    v25.i64[0] = v2[3].i64[0];
    v25.i64[1] = v2[3].u32[2];
    float32x4_t v26 = v2[2];
    v27.i64[0] = v3[4].i64[0];
    v27.i64[1] = v3[4].u32[2];
    v4.i64[0] = v3[2].i64[0];
    v4.i64[1] = v3[2].u32[2];
    float32x4_t v28 = v3[3];
    float32x2_t v29 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v28, 3).u64[0];
    float32x4_t v30 = v28;
    v30.i32[3] = 0;
    float32x4_t v31 = v3[1];
    float32x4_t v32 = v26;
    v32.i32[3] = 0;
    float32x4_t v33 = vmulq_f32(v32, v30);
    v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
    *(float32x2_t *)v33.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v26, 3), v29);
    float32x2_t v34 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    float32x2_t v35 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
    float32x2_t v36 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v35, 4uLL);
    int8x8_t v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.f32, v36), (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v34, 4uLL), *(float32x2_t *)v28.f32);
    *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32(v34, *(float32x2_t *)v28.f32), *(float32x2_t *)v26.f32, v35), 4uLL);
    v38.i64[1] = v37.u32[0];
    float32x4_t v39 = vmlaq_laneq_f32(v38, v32, v28, 3);
    v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
    float32x4_t v40 = vmlsq_laneq_f32(v39, v30, v26, 3);
    float32x4_t v41 = v31;
    v41.i32[3] = 0;
    float32x2_t v42 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    float32x2_t v43 = (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)v42, 4uLL);
    int8x8_t v44 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL)), v43, *(float32x2_t *)v40.f32);
    v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
    float32x4_t v45 = vsubq_f32(v25, v27);
    float32x4_t v46 = vmulq_n_f32(v45, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
    v46.i32[3] = 0;
    int8x8_t v47 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v45.f32, v36), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), *(float32x2_t *)v28.f32);
    *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), *(float32x2_t *)v45.f32, v35), 4uLL);
    v48.i64[1] = v47.u32[0];
    float32x4_t v49 = vmlaq_laneq_f32(v46, v48, v28, 3);
    v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
    float32x4_t v50 = vmulq_f32(v30, v45);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x4_t v51 = vmlaq_n_f32(v49, v30, vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32).f32[0]);
    v30.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
    *(float32x2_t *)v28.f32 = vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
    v51.i64[1] = v30.u32[0];
    float32x4_t v52 = vaddq_f32(v51, v51);
    float32x2_t v53 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v31, 3).u64[0];
    float32x4_t v54 = vmulq_f32(v41, v40);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    float32x2_t v17 = vsub_f32(vmul_laneq_f32(*(float32x2_t *)v33.f32, v31, 3), vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32));
    *(int8x8_t *)v50.f32 = vext_s8(v44, (int8x8_t)vmls_f32(vmul_f32(v42, *(float32x2_t *)v40.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)&v40.u32[2]), 4uLL);
    v50.i64[1] = v44.u32[0];
    float32x4_t v55 = vmlaq_laneq_f32(v50, v40, v31, 3);
    v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
    float32x4_t v18 = vmlaq_n_f32(v55, v41, v33.f32[0]);
    float32x4_t v56 = vmulq_n_f32(v52, vmla_f32((float32x2_t)0xBF000000BF000000, v53, v53).f32[0]);
    v56.i32[3] = 0;
    *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
    *(float32x2_t *)v48.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, *(int8x8_t *)v30.f32, 4uLL)), v43, *(float32x2_t *)v28.f32);
    *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)vmls_f32(vmul_f32(v42, *(float32x2_t *)v28.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)v30.f32), 4uLL);
    v30.i64[1] = v48.u32[0];
    float32x4_t v57 = vmlaq_laneq_f32(v56, v30, v31, 3);
    v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
    float32x4_t v58 = vmulq_f32(v41, v52);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    float32x4_t v24 = vmlaq_n_f32(v57, v41, vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  }
  else
  {
    v4.i64[0] = v3[2].i64[0];
    v4.i64[1] = v3[2].u32[2];
    float32x4_t v5 = v3[1];
    v6.i64[0] = v2[3].i64[0];
    v6.i64[1] = v2[3].u32[2];
    float32x2_t v7 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v5, 3).u64[0];
    float32x4_t v8 = v2[2];
    float32x4_t v9 = v5;
    v9.i32[3] = 0;
    float32x4_t v10 = v8;
    v10.i32[3] = 0;
    float32x4_t v11 = vmulq_f32(v9, v10);
    v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
    float32x2_t v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
    float32x2_t v13 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v11.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    float32x2_t v14 = (float32x2_t)vext_s8(*(int8x8_t *)v5.f32, (int8x8_t)v13, 4uLL);
    int8x8_t v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, *(int8x8_t *)v11.f32, 4uLL)), v14, *(float32x2_t *)v8.f32);
    *(int8x8_t *)v11.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v8.f32), *(float32x2_t *)v5.f32, *(float32x2_t *)v11.f32), 4uLL);
    v11.i64[1] = v15.u32[0];
    float32x4_t v16 = vmlaq_laneq_f32(v11, v10, v5, 3);
    float32x2_t v17 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL)), v12);
    v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
    float32x4_t v18 = vmlaq_laneq_f32(v16, v9, v8, 3);
    float32x4_t v19 = vmulq_n_f32(v6, vmla_f32((float32x2_t)0xBF000000BF000000, v7, v7).f32[0]);
    v19.i32[3] = 0;
    v8.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
    int8x8_t v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v6.f32, *(int8x8_t *)v8.f32, 4uLL)), v14, *(float32x2_t *)v6.f32);
    *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v6.f32), *(float32x2_t *)v5.f32, *(float32x2_t *)v8.f32), 4uLL);
    v21.i64[1] = v20.u32[0];
    float32x4_t v22 = vmlaq_laneq_f32(v19, v21, v5, 3);
    v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
    float32x4_t v23 = vmulq_f32(v9, v6);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    float32x4_t v24 = vmlaq_n_f32(v22, v9, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  }
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  v59.i64[0] = 0x4000000040000000;
  v59.i64[1] = 0x4000000040000000;
  float32x4_t result = vmlaq_f32(v4, v59, v24);
  a2[1].i64[0] = result.i64[0];
  a2[1].i32[2] = result.i32[2];
  v18.i32[3] = v17.i32[1];
  *a2 = v18;
  return result;
}

uint64_t physx::Sc::ShapeSim::createSqBounds(uint64_t this)
{
  if (*(_DWORD *)(this + 68) == -1)
  {
    uint64_t v1 = *(void *)(this + 8);
    if (*(unsigned __int8 *)(*(void *)(v1 + 80) + 13) - 1 >= 2) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *(void *)(this + 8);
    }
    if ((~*(unsigned __int8 *)(*(void *)(v2 + 80) + 44) & 3) != 0
      && (*(_WORD *)(v2 + 124) & 1) == 0
      && *(_DWORD *)(v2 + 184) <= 0xFFFFFFFD
      && (*(_WORD *)(v2 + 180) & 0x1000) == 0
      && (*(unsigned char *)(*(void *)(this + 56) + 64) & 2) != 0)
    {
      return physx::Sc::SqBoundsManager::addShape(*(void *)(*(void *)(v1 + 72) + 2088), (physx::Sc::ShapeSim *)this);
    }
  }
  return this;
}

physx::Sc::ShapeSim *physx::Sc::ShapeSim::ShapeSim(physx::Sc::ShapeSim *this, physx::Sc::RigidSim *a2, const physx::Sc::ShapeCore *a3)
{
  float32x4_t v5 = physx::Sc::ElementSim::ElementSim(this, a2);
  *((_DWORD *)v5 + 8) = -128;
  *((void *)v5 + 7) = a3;
  *((_DWORD *)v5 + 17) = -1;
  uint64_t v6 = *(void *)(*(void *)(*((void *)v5 + 1) + 72) + 4280);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    int v8 = v7 - 1;
    int v9 = *(_DWORD *)(*(void *)(v6 + 16) + 4 * (v7 - 1));
    *(_DWORD *)(v6 + 24) = v8;
  }
  else
  {
    int v9 = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v6 + 8) = v9 + 1;
  }
  *((_DWORD *)this + 16) = v9;
  physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(this);
  return this;
}

void physx::Sc::ShapeSim::~ShapeSim(physx::Sc::ShapeSim *this)
{
  uint64_t v2 = *(uint64_t **)(*((void *)this + 1) + 72);
  *(_DWORD *)(v2[564] + 4 * (((unint64_t)*((unsigned int *)this + 4) >> 5) & 0x3FFFFFF)) &= ~(1 << *((_DWORD *)this + 4));
  if (*((_DWORD *)this + 17) != -1) {
    physx::Sc::SqBoundsManager::removeShape(v2[261], this);
  }
  uint64_t v3 = v2[535];
  unint64_t v4 = *((unsigned int *)this + 16);
  int v6 = v4;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v3 + 32, v4 + 1);
  *(_DWORD *)(*(void *)(v3 + 32) + ((v4 >> 3) & 0x1FFFFFFC)) |= 1 << v4;
  uint64_t v5 = *(unsigned int *)(v3 + 56);
  if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 48, &v6);
  }
  else
  {
    *(_DWORD *)(*(void *)(v3 + 48) + 4 * v5) = v4;
    ++*(_DWORD *)(v3 + 56);
  }
  physx::Sc::ElementSim::~ElementSim(this);
}

uint64_t physx::Sc::ShapeSim::getBPGroup(physx::Sc::ShapeSim *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 80);
  int v3 = *(unsigned __int8 *)(v2 + 13);
  if (v1) {
    BOOL v4 = (v3 - 3) >= 0xFFFFFFFE;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (*(unsigned char *)(v2 + 44)) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
  }
  else
  {
    int v5 = 2;
  }
  unsigned int v6 = (4 * *(_DWORD *)(v1 + 88) + 4) | v5;
  if (v3) {
    return v6;
  }
  else {
    return 0;
  }
}

physx::Sc::ElementSim *physx::Sc::ShapeSim::removeFromBroadPhase(physx::Sc::ElementSim *this, int a2)
{
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
  {
    uint64_t v3 = (uint64_t)this;
    physx::Sc::ElementSim::removeFromAABBMgr(this);
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 72);
    (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v4 + 1840) + 1776) + 168))(v6);
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    return (physx::Sc::ElementSim *)physx::Sc::NPhaseCore::onVolumeRemoved(*(unsigned char **)(v4 + 3992), v3, v5, (uint64_t)v6, (*(_DWORD *)(v4 + 4268) & 8) != 0);
  }
  return this;
}

uint64_t physx::Sc::ShapeSim::reinsertBroadPhase(physx::Sc::ShapeSim *this)
{
  if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
  {
    physx::Sc::ElementSim::removeFromAABBMgr(this);
    uint64_t v2 = *(void *)(*((void *)this + 1) + 72);
    (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v2 + 1840) + 1776) + 168))(v19);
    physx::Sc::NPhaseCore::onVolumeRemoved(*(unsigned char **)(v2 + 3992), (uint64_t)this, 4, (uint64_t)v19, (*(_DWORD *)(v2 + 4268) & 8) != 0);
  }
  uint64_t v3 = *(void *)(*((void *)this + 1) + 72);
  (*(void (**)(void, void))(**(void **)(v3 + 1904) + 40))(*(void *)(v3 + 1904), *((unsigned int *)this + 16));
  *(_DWORD *)(*(void *)(v3 + 4512) + 4 * (((unint64_t)*((unsigned int *)this + 4) >> 5) & 0x3FFFFFF)) &= ~(1 << *((_DWORD *)this + 4));
  if (*((_DWORD *)this + 17) != -1) {
    physx::Sc::SqBoundsManager::removeShape(*(void *)(*(void *)(*((void *)this + 1) + 72) + 2088), this);
  }
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 4296);
  unint64_t v5 = *((unsigned int *)this + 4);
  LODWORD(v19[0]) = v5 & 0x7FFFFFFF;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v4 + 32, (v5 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(void *)(v4 + 32) + ((v5 >> 3) & 0xFFFFFFC)) |= 1 << v5;
  uint64_t v6 = *(unsigned int *)(v4 + 56);
  if ((*(_DWORD *)(v4 + 60) & 0x7FFFFFFFu) <= v6)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v4 + 48, v19);
  }
  else
  {
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v6) = v5 & 0x7FFFFFFF;
    ++*(_DWORD *)(v4 + 56);
  }
  uint64_t v7 = *(void *)(*((void *)this + 1) + 72);
  uint64_t v8 = *(void *)(v7 + 4296);
  int v9 = *(_DWORD *)(v8 + 24);
  if (v9)
  {
    int v10 = v9 - 1;
    int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 4 * (v9 - 1));
    *(_DWORD *)(v8 + 24) = v10;
  }
  else
  {
    int v11 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v8 + 8) = v11 + 1;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0x80000000 | v11 & 0x7FFFFFFF;
  uint64_t v12 = *(void *)(v7 + 2064);
  unsigned int v13 = (v11 & 0x7FFFFFFF) + 1;
  unsigned int v14 = *(_DWORD *)(v12 + 20) & 0x7FFFFFFF;
  if (v13 >= v14)
  {
    unsigned int v15 = v13 | (v13 >> 1) | ((v13 | (v13 >> 1)) >> 2);
    unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    unsigned int v17 = (v16 | HIWORD(v16)) + 1;
    if (v14 < v17) {
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(v12, (v16 | HIWORD(v16)) + 1);
    }
    *(_DWORD *)(v12 + 16) = v17;
  }
  physx::Sc::ShapeSim::initSubsystemsDependingOnElementID(this);
  return (*(uint64_t (**)(void, char *, void))(**(void **)(v3 + 1904) + 32))(*(void *)(v3 + 1904), (char *)this + 24, *((unsigned int *)this + 16));
}

void physx::Sc::ShapeSim::onContactOffsetChange(physx::Sc::ShapeSim *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1 < 0)
  {
    uint64_t v2 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 1848);
    *(_DWORD *)(*(void *)(*(void *)(v2 + 280) + 8) + 4 * (v1 & 0x7FFFFFFF)) = *(_DWORD *)(*((void *)this + 7)
                                                                                                + 60);
    *(unsigned char *)(v2 + 525) = 1;
    physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v2 + 224, (v1 & 0x7FFFFFFF) + 1);
    *(_DWORD *)(*(void *)(v2 + 224) + 4 * ((v1 & 0x7FFFFFFFu) >> 5)) |= 1 << v1;
  }
}

uint64_t physx::Sc::ShapeSim::onFlagChange(uint64_t this, unsigned char *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 56);
  char v5 = *(unsigned char *)(v4 + 64);
  if (((v5 & 5) != 0) == ((*a2 & 5) != 0))
  {
    if ((((*a2 & 4) == 0) ^ ((v5 & 4) >> 2))) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if ((*a2 & 5) != 0 || (v5 & 5) == 0)
  {
    physx::Sc::ElementSim::removeFromAABBMgr((physx::Sc::ElementSim *)this);
    uint64_t v7 = *(void *)(*(void *)(v3 + 8) + 72);
    (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v7 + 1840) + 1776) + 168))(v20);
    this = (uint64_t)physx::Sc::NPhaseCore::onVolumeRemoved(*(unsigned char **)(v7 + 3992), v3, 4, (uint64_t)v20, (*(_DWORD *)(v7 + 4268) & 8) != 0);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(v4 + 64) & 4) != 0)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(this + 8) + 72) + 1848);
    unint64_t v9 = *(unsigned int *)(this + 16);
    uint64_t v10 = (v9 >> 5) & 0x3FFFFFF;
    if (v10 < (*(_DWORD *)(v8 + 216) & 0x7FFFFFFFu)
      && ((*(_DWORD *)(*(void *)(v8 + 208) + 4 * v10) >> v9) & 1) != 0)
    {
LABEL_9:
      this = physx::Sc::ShapeSim::reinsertBroadPhase((physx::Sc::ShapeSim *)this);
      goto LABEL_14;
    }
  }
  float v11 = *(float *)(v4 + 60);
  int BPGroup = physx::Sc::ShapeSim::getBPGroup((physx::Sc::ShapeSim *)this);
  this = physx::Sc::ElementSim::addToAABBMgr(v3, BPGroup, v5 & 4, v11, v13, v14, v15, v16, v17, v19);
LABEL_14:
  if ((v5 & 2) != 0)
  {
    if ((*a2 & 2) == 0)
    {
      uint64_t v18 = *(void *)(v3 + 8);
      if (v18)
      {
        if (*(unsigned __int8 *)(*(void *)(v18 + 80) + 13) - 3 >= 0xFFFFFFFE
          && *(_DWORD *)(v18 + 184) <= 0xFFFFFFFD)
        {
          return physx::Sc::ShapeSim::createSqBounds(v3);
        }
      }
    }
  }
  else if ((*a2 & 2) != 0 && *(_DWORD *)(v3 + 68) != -1)
  {
    return physx::Sc::SqBoundsManager::removeShape(*(void *)(*(void *)(*(void *)(v3 + 8) + 72) + 2088), (physx::Sc::ShapeSim *)v3);
  }
  return this;
}

void physx::Sc::ShapeSim::updateCached(uint64_t a1, __int32 a2, void *a3)
{
  physx::Sc::ShapeSim::getAbsPoseAligned(a1, &v24);
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 72);
  int v7 = *(_DWORD *)(a1 + 16);
  unsigned int v8 = v7 & 0x7FFFFFFF;
  uint64_t v9 = *(void *)(*(void *)(v6 + 1840) + 2592);
  uint64_t v10 = (float32x4_t *)(*(void *)(v9 + 8) + 32 * (v7 & 0x7FFFFFFF));
  v11.i64[1] = v24.i64[1];
  *uint64_t v10 = v24;
  v10[1].i64[0] = v25;
  v10[1].i32[2] = v26;
  v10[1].i32[3] = a2;
  *(unsigned char *)(v9 + 28) = 1;
  uint64_t v12 = *(void *)(v6 + 2064);
  v11.i64[0] = 0;
  v13.i32[0] = 1.0;
  physx::Gu::computeBounds((float32x2_t *)(*(void *)(v12 + 8) + 24 * (v7 & 0x7FFFFFFF)), *(void *)(a1 + 56) + 72, (uint64_t)&v24, 0, v11, v13, v18, v19, v20, v21, v22, v23, v14, v15, v16, v17, v24.i8[0]);
  *(unsigned char *)(v12 + 24) = 1;
  if (a3)
  {
    if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)a3, v8 + 1);
      *(_DWORD *)(*a3 + 4 * (v8 >> 5)) |= 1 << v7;
    }
  }
}

void physx::Sc::ShapeSim::updateCached(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  _X21 = (float32x4_t *)(*(void *)(a2 + 8) + 32 * v11);
  __asm { PRFM            #0, [X21] }
  float32x4_t AbsPoseAligned = physx::Sc::ShapeSim::getAbsPoseAligned(a1, _X21);
  _X21[1].i32[3] = 0;
  float32x4_t v28 = (float32x2_t *)(*(void *)(a3 + 8) + 24 * v11);
  uint64_t v29 = *(void *)(a1 + 56) + 72;
  AbsPoseAligned.i64[0] = 0;
  v31.i32[0] = 1.0;
  physx::Gu::computeBounds(v28, v29, (uint64_t)_X21, 0, AbsPoseAligned, v31, v22, v23, v24, v25, v26, v27, v18, v19, v20, v21, a9);
}

float physx::Sc::ShapeSim::updateContactDistance(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  int v7 = (float *)(*(void *)(a4 + 8) + 24 * v6);
  float v8 = (float)(v7[3] - *v7) * 0.5;
  float v9 = (float)(v7[4] - v7[1]) * 0.5;
  float result = (float)(*(float *)(*(void *)(a1 + 56) + 60) + a5)
         + (float)(sqrtf((float)((float)(v9 * v9) + (float)(v8 * v8))+ (float)((float)((float)(v7[5] - v7[2]) * 0.5) * (float)((float)(v7[5] - v7[2]) * 0.5)))* (float)(sqrtf((float)((float)(a3[1] * a3[1]) + (float)(*a3 * *a3)) + (float)(a3[2] * a3[2])) * a6));
  *(float *)(a2 + 4 * v6) = result;
  return result;
}

BOOL physx::Sc::ShapeSim::updateSweptBounds(physx::Sc::ShapeSim *this, float32x4_t a2, int8x16_t a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = (float32x4_t *)*((void *)this + 7);
  float v22 = physx::Gu::computeBoundsWithCCDThreshold((float *)&v82, (float *)v81, (uint64_t)&v17[4].i64[1], *(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 1) + 72) + 1840) + 2592) + 8)+ 32 * (*((_DWORD *)this + 4) & 0x7FFFFFFF), 0, a14, a15, a16, a2, a3, a4, a5, a6, a7, a8, a9);
  v23.i32[0] = v83;
  float32x4_t v74 = v23;
  *(float32x2_t *)v23.f32 = v81[1];
  float32x4_t v75 = v23;
  double v24 = (float32x4_t *)*((void *)this + 1);
  if (*(unsigned __int8 *)(v24[5].i64[0] + 13) - 1 >= 2) {
    double v24 = 0;
  }
  v25.i64[0] = v17[3].i64[0];
  v25.i64[1] = v17[3].u32[2];
  double v26 = (float32x4_t *)v24[5].i64[0];
  float32x4_t v27 = v17[2];
  v28.i64[0] = v26[4].i64[0];
  v28.i64[1] = v26[4].u32[2];
  v29.i64[0] = v24[7].i64[0];
  float32x4_t v30 = v26[3];
  v29.i64[1] = v24[7].u32[2];
  float32x4_t v31 = v24[6];
  float32x2_t v32 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v30, 3).u64[0];
  float32x4_t v33 = v30;
  v33.i32[3] = 0;
  float32x4_t v34 = v27;
  v34.i32[3] = 0;
  float32x4_t v35 = vmulq_f32(v34, v33);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  float32x2_t v38 = (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, (int8x8_t)v37, 4uLL);
  int8x8_t v39 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v27.f32, v38), (float32x2_t)vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)v36, 4uLL), *(float32x2_t *)v30.f32);
  *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(v36, *(float32x2_t *)v30.f32), *(float32x2_t *)v27.f32, v37), 4uLL);
  v40.i64[1] = v39.u32[0];
  float32x4_t v41 = vmlaq_laneq_f32(v40, v34, v30, 3);
  v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
  *(float32x2_t *)v35.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 3), v32);
  float32x4_t v42 = vmlsq_laneq_f32(v41, v33, v27, 3);
  float32x4_t v43 = v31;
  v43.i32[3] = 0;
  v34.i64[0] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
  float32x2_t v44 = (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, *(int8x8_t *)v34.f32, 4uLL);
  int8x8_t v45 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v44, *(float32x2_t *)v42.f32);
  v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
  float32x4_t v46 = vsubq_f32(v25, v28);
  int8x8_t v47 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v46.f32, v38), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL), *(float32x2_t *)v30.f32);
  float32x4_t v48 = vmulq_n_f32(v46, vmla_f32((float32x2_t)0xBF000000BF000000, v32, v32).f32[0]);
  v48.i32[3] = 0;
  *(int8x8_t *)v49.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)), *(float32x2_t *)v46.f32, v37), 4uLL);
  v49.i64[1] = v47.u32[0];
  float32x4_t v50 = vmlaq_laneq_f32(v48, v49, v30, 3);
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  float32x4_t v51 = vmulq_f32(v33, v46);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  float32x4_t v52 = vmlaq_n_f32(v50, v33, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
  v51.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
  *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
  v52.i64[1] = v51.u32[0];
  v33.i64[0] = vdupq_laneq_s32((int32x4_t)v31, 3).u64[0];
  float32x4_t v53 = vaddq_f32(v52, v52);
  int32x4_t v54 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL);
  float32x4_t v55 = vmulq_f32(v43, v42);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  *(int8x8_t *)v27.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v42.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)&v42.u32[2]), 4uLL);
  v27.i64[1] = v45.u32[0];
  float32x4_t v56 = vmlaq_laneq_f32(v27, v42, v31, 3);
  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  *(float32x2_t *)v54.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v35.f32), vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32));
  float32x4_t v57 = vmlaq_n_f32(v56, v43, v35.f32[0]);
  float32x4_t v58 = vmulq_n_f32(v53, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v58.i32[3] = 0;
  *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  *(float32x2_t *)v33.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v31.f32, (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, *(int8x8_t *)v51.f32, 4uLL)), v44, *(float32x2_t *)v30.f32);
  *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v30.f32), *(float32x2_t *)v31.f32, *(float32x2_t *)v51.f32), 4uLL);
  v51.i64[1] = v33.u32[0];
  float32x4_t v59 = vmlaq_laneq_f32(v58, v51, v31, 3);
  v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
  float32x4_t v60 = vmulq_f32(v43, v53);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  float32x4_t v61 = vmlaq_n_f32(v59, v43, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).f32[0]);
  v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
  v60.i64[0] = 0x4000000040000000;
  v60.i64[1] = 0x4000000040000000;
  float32x4_t v62 = vmlaq_f32(v29, v60, v61);
  uint64_t v79 = v62.i64[0];
  __int32 v80 = v62.i32[2];
  v57.i32[3] = v54.i32[1];
  float32x4_t v78 = v57;
  v62.i64[0] = 0;
  v60.i32[0] = 1.0;
  physx::Gu::computeBounds(&v76, (uint64_t)&v17[4].i64[1], (uint64_t)&v78, 0, v62, (int8x16_t)v60, *(double *)v61.i64, *(double *)v51.i64, *(double *)v53.i64, *(double *)v30.i64, COERCE_DOUBLE((unint64_t)v33.u32[0]), v54, v18, v19, v20, v21, v74.i8[0]);
  *(float32x2_t *)v63.i8 = v82;
  *(int32x2_t *)v64.f32 = vzip1_s32(*(int32x2_t *)v75.f32, (int32x2_t)v81[0]);
  *(int32x2_t *)&v64.u32[2] = vdup_lane_s32((int32x2_t)v81[0], 1);
  float32x4_t v65 = vaddq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), v63, 0xCuLL), v64);
  float32x4_t v66 = v65;
  v66.i32[0] = vsubq_f32(v74, v75).u32[0];
  v66.i32[3] = v65.i32[0];
  float32x2_t v67 = vsub_f32(v82, v81[0]);
  float v68 = vaddq_f32(v77, (float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 3)).f32[0];
  float v69 = (float)((float)((float)((float)((float)(v76.f32[1] + v77.f32[2]) * 0.5) - v82.f32[1])
                      * (float)((float)((float)(v76.f32[1] + v77.f32[2]) * 0.5) - v82.f32[1]))
              + (float)((float)((float)((float)(v76.f32[0] + v77.f32[1]) * 0.5) - v82.f32[0])
                      * (float)((float)((float)(v76.f32[0] + v77.f32[1]) * 0.5) - v82.f32[0])))
      + (float)((float)((float)(0.5 * v68) - v74.f32[0]) * (float)((float)(0.5 * v68) - v74.f32[0]));
  if (v69 >= (float)(v22 * v22))
  {
    float32x2_t v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v76, v67), (int8x8_t)v67, (int8x8_t)v76);
    int16x4_t v70 = vmovn_s32(vcgtq_f32(v66, v77));
    v70.i16[0] = vmovn_s32(vcgtq_f32(v77, v66)).u16[0];
    float32x4_t v66 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v70), (int8x16_t)v66, (int8x16_t)v77);
  }
  BOOL result = v69 >= (float)(v22 * v22);
  uint64_t v72 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 2064);
  uint64_t v73 = *(void *)(v72 + 8) + 24 * (*((_DWORD *)this + 4) & 0x7FFFFFFF);
  *(float32x2_t *)uint64_t v73 = v67;
  *(float32x4_t *)(v73 + 8) = v66;
  *(unsigned char *)(v72 + 24) = 1;
  return result;
}

uint64_t physx::Sc::ShapeSim::updateBPGroup(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 16);
  if (v1 < 0)
  {
    uint64_t v2 = (physx::Sc::ShapeSim *)this;
    uint64_t v3 = *(void *)(*(void *)(*(void *)(this + 8) + 72) + 1848);
    *(_DWORD *)(*(void *)(v3 + 264) + 4 * (v1 & 0x7FFFFFFF)) = physx::Sc::ShapeSim::getBPGroup((physx::Sc::ShapeSim *)this);
    return physx::Sc::ShapeSim::reinsertBroadPhase(v2);
  }
  return this;
}

void physx::Sc::ShapeSim::markBoundsForUpdate(physx::Sc::ShapeSim *this, int a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 72);
  if (a2)
  {
    uint64_t v3 = (void *)(*(void *)(v2 + 1848) + 224);
    physx::Sc::ShapeSim::updateCached((uint64_t)this, 0, v3);
  }
  else
  {
    unint64_t v4 = *((unsigned int *)this + 4);
    if ((v4 & 0x80000000) != 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 4512, (v4 & 0x7FFFFFFF) + 1);
      *(_DWORD *)(*(void *)(v2 + 4512) + ((v4 >> 3) & 0xFFFFFFC)) |= 1 << v4;
    }
  }
}

void physx::Sc::ShapeSim::onVolumeOrTransformChange(physx::Sc::ShapeSim *this, int a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (*(unsigned __int8 *)(*(void *)(v4 + 80) + 13) - 1 >= 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 1);
  }
  if (v5) {
    BOOL v6 = *(_DWORD *)(v5 + 184) > 0xFFFFFFFD;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = *(unsigned int *)(v4 + 52);
  if (v7)
  {
    uint64_t v8 = *(void *)(v4 + 72);
    uint64_t v9 = *(void *)(v4 + 40);
    uint64_t v10 = (uint64_t *)(v9 + 8 * v7);
    uint64_t v11 = (uint64_t *)(v9 + 8);
    uint64_t v12 = 8 * v7;
    while (1)
    {
      uint64_t v13 = *(v11 - 1);
      if ((*(unsigned char *)(v13 + 29) & 1) != 0
        && (*(physx::Sc::ShapeSim **)(v13 + 32) == this || *(physx::Sc::ShapeSim **)(v13 + 40) == this))
      {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        goto LABEL_13;
      }
    }
    while (1)
    {
      if (*(unsigned char *)(v13 + 28) == 1)
      {
        *(_WORD *)(v13 + 68) |= 0x20u;
        if ((*(unsigned char *)(v13 + 29) & 0x20) == 0)
        {
          *(unsigned char *)(v13 + 29) |= 0x20u;
          physx::Sc::Scene::notifyInteractionActivated(v8, v13);
        }
      }
      else if (!*(unsigned char *)(v13 + 28))
      {
        uint64_t v16 = v13 - 8;
        physx::Sc::ShapeInteraction::resetManagerCachedState(v13 - 8);
        if (v6) {
          physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(v16, v5 != 0);
        }
      }
      if (v11 == v10) {
        break;
      }
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = *v14++;
        uint64_t v13 = v15;
        if ((*(unsigned char *)(v15 + 29) & 1) != 0
          && (*(physx::Sc::ShapeSim **)(v13 + 32) == this || *(physx::Sc::ShapeSim **)(v13 + 40) == this))
        {
          break;
        }
        uint64_t v11 = v14;
        if (v14 == v10) {
          goto LABEL_13;
        }
      }
      ++v11;
    }
  }
LABEL_13:
  physx::Sc::ShapeSim::markBoundsForUpdate(this, a2);
}

uint64_t notifyActorInteractionsOfTransformChange(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(*(void *)(result + 80) + 13) - 1;
  BOOL v2 = v1 > 1 || *(_DWORD *)(result + 184) > 0xFFFFFFFD;
  int v3 = *(_DWORD *)(result + 52);
  if (v3)
  {
    uint64_t v4 = *(void *)(result + 72);
    uint64_t v5 = *(uint64_t **)(result + 40);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      int v8 = *(unsigned __int8 *)(v7 + 28);
      if (v8 == 1)
      {
        *(_WORD *)(v6 + 68) |= 0x20u;
        if ((*(unsigned char *)(v6 + 29) & 0x20) == 0)
        {
          *(unsigned char *)(v6 + 29) |= 0x20u;
          BOOL result = physx::Sc::Scene::notifyInteractionActivated(v4, v6);
        }
      }
      else if (!v8)
      {
        uint64_t v9 = v6 - 8;
        BOOL result = physx::Sc::ShapeInteraction::resetManagerCachedState(v6 - 8);
        if (v2) {
          BOOL result = physx::Sc::ShapeInteraction::onShapeChangeWhileSleeping(v9, v1 < 2);
        }
      }
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t physx::Sc::SqBoundsManager::addShape(uint64_t this, physx::Sc::ShapeSim *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(this + 8);
  *((_DWORD *)a2 + 17) = v4;
  uint64_t v9 = a2;
  if ((*(_DWORD *)(this + 12) & 0x7FFFFFFFu) <= v4)
  {
    this = physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(this, &v9);
  }
  else
  {
    *(void *)(*(void *)this + 8 * v4) = a2;
    *(_DWORD *)(this + 8) = v4 + 1;
  }
  LODWORD(v9) = -1;
  uint64_t v5 = *(unsigned int *)(v3 + 24);
  if ((*(_DWORD *)(v3 + 28) & 0x7FFFFFFFu) <= v5)
  {
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 16, &v9);
  }
  else
  {
    *(_DWORD *)(*(void *)(v3 + 16) + 4 * v5) = -1;
    ++*(_DWORD *)(v3 + 24);
  }
  int v6 = *((_DWORD *)a2 + 4) & 0x7FFFFFFF;
  LODWORD(v9) = v6;
  uint64_t v7 = *(unsigned int *)(v3 + 40);
  if ((*(_DWORD *)(v3 + 44) & 0x7FFFFFFFu) <= v7)
  {
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 32, &v9);
  }
  else
  {
    *(_DWORD *)(*(void *)(v3 + 32) + 4 * v7) = v6;
    ++*(_DWORD *)(v3 + 40);
  }
  uint64_t v9 = a2;
  uint64_t v8 = *(unsigned int *)(v3 + 56);
  if ((*(_DWORD *)(v3 + 60) & 0x7FFFFFFFu) <= v8) {
    return physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(v3 + 48, &v9);
  }
  *(void *)(*(void *)(v3 + 48) + 8 * v8) = a2;
  *(_DWORD *)(v3 + 56) = v8 + 1;
  return this;
}

uint64_t physx::Sc::SqBoundsManager::removeShape(uint64_t this, physx::Sc::ShapeSim *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 17);
  *((_DWORD *)a2 + 17) = -1;
  *(void *)(*(void *)this + 8 * v2) = *(void *)(*(void *)this
                                                                    + 8 * (*(_DWORD *)(this + 8) - 1));
  *(_DWORD *)(*(void *)(this + 32) + 4 * v2) = *(_DWORD *)(*(void *)(this + 32)
                                                                           + 4
                                                                           * (*(_DWORD *)(this + 40) - 1));
  *(_DWORD *)(*(void *)(this + 16) + 4 * v2) = *(_DWORD *)(*(void *)(this + 16)
                                                                           + 4
                                                                           * (*(_DWORD *)(this + 24) - 1));
  int v3 = *(_DWORD *)(this + 8);
  if (v2 + 1 != v3) {
    *(_DWORD *)(*(void *)(*(void *)this + 8 * v2) + 68) = v2;
  }
  *(_DWORD *)(this + 8) = v3 - 1;
  --*(_DWORD *)(this + 24);
  --*(_DWORD *)(this + 40);
  return this;
}

__n128 physx::Sc::SimStats::readOut(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a3 + 588;
  physx::PxSimulationStatistics::PxSimulationStatistics((uint64_t)__src);
  memcpy(a2, __src, 0x384uLL);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = a2 + 88;
  uint64_t v10 = a1 + 2;
  uint64_t v11 = 704;
  do
  {
    uint64_t v12 = 0;
    uint64_t v13 = v11;
    do
    {
      *(_DWORD *)((char *)v9 + v12) += *(_DWORD *)((char *)v10 + v12);
      if (v7 != v12) {
        *(_DWORD *)((char *)a2 + v13) += *(_DWORD *)((char *)v10 + v12);
      }
      v13 += 28;
      v12 += 4;
    }
    while (v12 != 28);
    ++v8;
    v11 += 4;
    v7 += 4;
    uint64_t v9 = (void *)((char *)v9 + 28);
    uint64_t v10 = (void *)((char *)v10 + 28);
  }
  while (v8 != 5);
  unint64_t v14 = 0;
  *(void *)((char *)a2 + 108) = *a1;
  uint64_t v15 = (_DWORD *)a2 + 85;
  uint64_t v16 = (_DWORD *)a2 + 79;
  uint64_t v17 = (int *)(a3 + 200);
  uint64_t v18 = 6;
  do
  {
    uint64_t v19 = (_DWORD *)(a3 + 28 * v14 + 4 * v14);
    uint64_t v20 = (_DWORD *)a2 + 7 * v14 + v14;
    v20[29] = *v19;
    v20[127] = v19[98];
    v20[78] = v19[49];
    if (v14 <= 5)
    {
      uint64_t v21 = v17;
      float v22 = v16;
      float32x4_t v23 = v15;
      uint64_t v24 = v18;
      do
      {
        int v25 = *(v21 - 49);
        *(v22 - 49) = v25;
        *(v23 - 49) = v25;
        int v26 = v21[49];
        v22[49] = v26;
        v23[49] = v26;
        int v27 = *v21++;
        *v22++ = v27;
        *float32x4_t v23 = v27;
        v23 += 7;
        --v24;
      }
      while (v24);
    }
    ++v14;
    --v18;
    v15 += 8;
    v16 += 8;
    v17 += 8;
  }
  while (v14 != 7);
  *(void *)((char *)a2 + 76) = *(void *)v6;
  *((_DWORD *)a2 + 21) = *(_DWORD *)(a3 + 596);
  *a2 = *(void *)(a3 + 600);
  *((_DWORD *)a2 + 2) = *(_DWORD *)(a3 + 608);
  *((_DWORD *)a2 + 18) = *(_DWORD *)(a3 + 624) << 14;
  *(void *)((char *)a2 + 60) = *(void *)(v6 + 24);
  *((_DWORD *)a2 + 17) = *(_DWORD *)(a3 + 620);
  __n128 result = *(__n128 *)(v6 + 40);
  *(__n128 *)(a2 + 11) = result;
  *((_DWORD *)a2 + 26) = *(_DWORD *)(a3 + 644);
  return result;
}

uint64_t physx::Sc::SimulationController::udpateScBodyAndShapeSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (***(uint64_t (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), a4);
}

uint64_t physx::Sc::SqBoundsManager::syncBounds(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (***a3)(void, void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(unsigned int *)(a1 + 56);
  if (v10)
  {
    uint64_t v12 = *(uint64_t **)(a1 + 48);
    do
    {
      uint64_t v13 = *v12;
      uint64_t v14 = *(unsigned int *)(*v12 + 68);
      if (v14 != -1 && *(_DWORD *)(*(void *)(a1 + 16) + 4 * v14) == -1)
      {
        uint64_t v15 = *(void *)(v13 + 8);
        if (*(unsigned __int8 *)(*(void *)(v15 + 80) + 13) - 1 >= 2) {
          uint64_t v15 = 0;
        }
        *(_DWORD *)(*(void *)(a1 + 16) + 4 * v14) = (**a3)(a3, *(void *)(v15 + 80)+ *((void *)&physx::Sc::gOffsetTable+ *(unsigned __int8 *)(*(void *)(v15 + 80) + 13)+ 10), *(void *)(v13 + 56) + qword_2687A62F0);
      }
      ++v12;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(unsigned int *)(a1 + 8);
  uint64_t v19 = **a2;
  return v19(a2, v16, v17, a4, v18, a6);
}

physx::Sc::RigidSim *physx::Sc::StaticCore::setActor2World(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  __n128 result = *(physx::Sc::RigidSim **)a1;
  if (result) {
    return (physx::Sc::RigidSim *)physx::Sc::RigidSim::notifyShapesOfTransformChange(result);
  }
  return result;
}

physx::Sc::TriggerInteraction *physx::Sc::TriggerInteraction::TriggerInteraction(physx::Sc::TriggerInteraction *this, physx::Sc::ShapeSim *a2, physx::Sc::ShapeSim *a3)
{
  uint64_t v4 = *((void *)a3 + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  uint64_t v5 = (physx::Sc::ActorSim **)((char *)this + 8);
  *((void *)this + 2) = v4;
  *((void *)this + 3) = -1;
  *((_DWORD *)this + 8) = -1;
  *((_WORD *)this + 18) = 1281;
  *((unsigned char *)this + 38) = 0;
  *((void *)this + 5) = a2;
  *((void *)this + 6) = a3;
  *((_DWORD *)this + 14) = -1;
  *(void *)this = &unk_26E727BC0;
  *((_WORD *)this + 38) = 32;
  *((unsigned char *)this + 78) = 0;
  int v6 = physx::Sc::activateInteraction((physx::Sc::TriggerInteraction *)((char *)this + 8), 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*v5, (physx::Sc::Interaction *)v5);
  physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 2), (physx::Sc::Interaction *)v5);
  uint64_t v7 = *((void *)*v5 + 9);
  physx::Sc::Scene::registerInteraction(v7, (physx::Sc::Interaction *)v5, v6);
  unint64_t v9 = *((void *)this + 5);
  unint64_t v10 = *((void *)this + 6);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)this + 5);
  }
  else {
    uint64_t v11 = *((void *)this + 6);
  }
  if (v9 <= v10) {
    uint64_t v12 = *((void *)this + 6);
  }
  else {
    uint64_t v12 = *((void *)this + 5);
  }
  physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(void *)(v7 + 3992) + 3704), v11, v12, (uint64_t)this, v8);
  *((_WORD *)this + 36) = 0;
  return this;
}

void physx::Sc::TriggerInteraction::~TriggerInteraction(physx::Sc::TriggerInteraction *this)
{
  *(void *)this = &unk_26E727BC0;
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  uint64_t v3 = *(void *)(*((void *)this + 1) + 72);
  physx::Sc::Scene::unregisterInteraction(v3, (uint64_t)this + 8);
  uint64_t v4 = *(void *)(v3 + 3992) + 3704;
  unint64_t v5 = *((void *)this + 5);
  unint64_t v6 = *((void *)this + 6);
  if (v5 <= v6) {
    uint64_t v7 = *((void *)this + 5);
  }
  else {
    uint64_t v7 = *((void *)this + 6);
  }
  if (v5 <= v6) {
    unint64_t v5 = *((void *)this + 6);
  }
  v8[0] = v7;
  v8[1] = v5;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, v8);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*v2, v2);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 2), v2);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sc::TriggerInteraction::~TriggerInteraction(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

BOOL isOneActorActive(physx::Sc::TriggerInteraction *a1)
{
  uint64_t v1 = *(void *)(*((void *)a1 + 5) + 8);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(*(void *)(v1 + 80) + 13) - 3 >= 0xFFFFFFFE;
  }
  else {
    BOOL v2 = 0;
  }
  BOOL result = 1;
  if (!v2 || *(_DWORD *)(v1 + 184) >= 0xFFFFFFFE)
  {
    uint64_t v3 = *(void *)(*((void *)a1 + 6) + 8);
    BOOL v4 = v3 && *(unsigned __int8 *)(*(void *)(v3 + 80) + 13) - 3 >= 0xFFFFFFFE;
    if (!v4 || *(_DWORD *)(v3 + 184) >= 0xFFFFFFFE) {
      return 0;
    }
  }
  return result;
}

void physx::Sc::SimulationController::~SimulationController(physx::Sc::SimulationController *this)
{
}

uint64_t physx::Sc::SimulationController::getActiveBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getDeactiveBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getRigidBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbBodies(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getUnfrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getFrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getShapeSims(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbFrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getNbUnfrozenShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::Sc::SimulationController::getArticulationRemapIndex(physx::Sc::SimulationController *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t physx::Sc::SimulationController::getNbShapes(physx::Sc::SimulationController *this)
{
  return 0;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    BOOL result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v6 = (void *)result;
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  int8x8_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *int8x8_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    BOOL result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

float physx::PxQuat::operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = a1[1];
  float v5 = a2[2];
  float v4 = a2[3];
  float v6 = a2[1];
  float v8 = a1[2];
  float v7 = a1[3];
  float v9 = (float)((float)((float)(v4 * v3) + (float)(v7 * v6)) + (float)(v8 * *a2)) - (float)(v5 * *a1);
  float v10 = (float)((float)((float)(v4 * v8) + (float)(v7 * v5)) + (float)(*a1 * v6)) - (float)(*a2 * v3);
  float v11 = (float)((float)(v7 * v4) - (float)(*a1 * *a2)) - (float)(v3 * v6);
  *a3 = (float)((float)((float)(v4 * *a1) + (float)(v7 * *a2)) + (float)(v3 * v5)) - (float)(v6 * v8);
  a3[1] = v9;
  float result = v11 - (float)(v8 * v5);
  a3[2] = v10;
  a3[3] = result;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCachedTransform,physx::shdfnd::VirtualAllocator>::recreate(void *a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *, uint64_t))(*(void *)*a1 + 16))(*a1, 32 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *((unsigned int *)a1 + 4);
  uint64_t v7 = a1[1];
  if (v6)
  {
    unint64_t v8 = result + 32 * v6;
    uint64_t v9 = a1[1];
    unint64_t v10 = result;
    do
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v9;
      *(void *)(v10 + 16) = *(void *)(v9 + 16);
      *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
      v10 += 32;
      v9 += 32;
    }
    while (v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeSim *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *unint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

physx::Sq::AABBPruner *physx::Sq::AABBPruner::AABBPruner(physx::Sq::AABBPruner *this, char a2, uint64_t a3)
{
  *(void *)this = &unk_26E727D60;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(void *)((char *)this + 68) = 0;
  physx::Sq::ExtendedBucketPruner::ExtendedBucketPruner((physx::Sq::AABBPruner *)((char *)this + 80), (physx::Sq::AABBPruner *)((char *)this + 416));
  *((void *)this + 50) = 0x6400000000;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_DWORD *)this + 114) = -1;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((unsigned char *)this + 496) = a2;
  *(_WORD *)((char *)this + 497) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((void *)this + 67) = a3;
  return this;
}

void physx::Sq::AABBPruner::~AABBPruner(physx::Sq::AABBPruner *this)
{
  *(void *)this = &unk_26E727D60;
  physx::Sq::AABBPruner::release(this);
  int v2 = *((_DWORD *)this + 133);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 65) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 129);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 63) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this + 480);
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this + 464);
  physx::Sq::PruningPool::~PruningPool((physx::Sq::AABBPruner *)((char *)this + 416));
  physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner((physx::Sq::AABBPruner *)((char *)this + 80));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sq::AABBPruner::~AABBPruner(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Sq::AABBPruner::release(physx::Sq::AABBPruner *this)
{
  physx::Sq::ExtendedBucketPruner::release((physx::Sq::AABBPruner *)((char *)this + 80));
  *((_DWORD *)this + 18) = 0;
  int v5 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 464, 0, &v5);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 464, *((_DWORD *)this + 118));
  int v6 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 480, 0, &v6);
  uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 480, *((_DWORD *)this + 122));
  if (*((void *)this + 7)) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (*((void *)this + 4)) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 6));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
  }
  *((void *)this + 6) = 0;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 1));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 128) = 0;
  *((unsigned char *)this + 497) = 0;
  return result;
}

uint64_t physx::Sq::AABBPruner::addObjects(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, unsigned int a5, int a6)
{
  if (!a5) {
    return 1;
  }
  char v6 = a6;
  uint64_t v7 = (unsigned int *)a2;
  if (!a6 || !*(void *)(a1 + 8)) {
    *(unsigned char *)(a1 + 497) = 1;
  }
  unsigned int v28 = physx::Sq::PruningPool::addObjects((physx::Sq::PruningPool *)(a1 + 416), a2, a3, a4, a5);
  if (*(unsigned char *)(a1 + 496))
  {
    if (*(void *)(a1 + 8))
    {
      *(unsigned char *)(a1 + 498) = 1;
      if ((v6 & 1) == 0)
      {
        if (v28)
        {
          uint64_t v9 = a1 + 88;
          uint64_t v10 = v28;
          while (1)
          {
            unsigned int v11 = *v7++;
            unsigned int v12 = *(_DWORD *)(a1 + 88);
            unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 440) + 4 * v11);
            int v14 = *(_DWORD *)(a1 + 72);
            uint64_t v15 = a1 + 88 + 72 * v12;
            uint64_t v18 = *(void *)(v15 + 16);
            uint64_t v17 = (uint64_t *)(v15 + 16);
            uint64_t v16 = v18;
            if (!v18) {
              break;
            }
            if (!*(void *)(v16 + 1144)) {
              goto LABEL_17;
            }
LABEL_18:
            *(_DWORD *)(a1 + 256) = 0;
            uint64_t v24 = physx::Sq::IncrementalAABBTree::insert(v16, v13, *(void *)(*(void *)(a1 + 240) + 8), a1 + 248);
            physx::Sq::IncrementalAABBPrunerCore::updateMapping(v9, (int32x2_t *)(a1 + 72 * v12 + 112), v13, (uint64_t)v24, v25);
            if (!--v10) {
              return v28 == a5;
            }
          }
          uint64_t v19 = v9;
          uint64_t v20 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
            uint64_t v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTree>::getName() [T = "
          }
                  "physx::Sq::IncrementalAABBTree]";
          else {
            uint64_t v21 = "<allocation names disabled>";
          }
          float v22 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v20 + 24)
                                                                                                + 16);
          uint64_t v23 = v20 + 24;
          uint64_t v9 = v19;
          uint64_t v16 = v22(v23, 1184, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqIncrementalAABBPrunerCore.cpp", 88);
          *(void *)(v16 + 544) = 0x4000000000;
          *(unsigned char *)(v16 + 528) = 1;
          *(void *)(v16 + 536) = v16 + 16;
          *(void *)(v16 + 552) = 256;
          *(_DWORD *)(v16 + 560) = 5120;
          *(void *)(v16 + 568) = 0;
          *(void *)(v16 + 1112) = 0x4000000000;
          *(unsigned char *)(v16 + 1096) = 1;
          *(void *)(v16 + 1104) = v16 + 584;
          *(void *)(v16 + 1120) = 256;
          *(_DWORD *)(v16 + 1128) = 0x8000;
          *(_OWORD *)(v16 + 1136) = 0u;
          *(_OWORD *)(v16 + 1152) = 0u;
          *(_OWORD *)(v16 + 1168) = 0u;
          uint64_t *v17 = v16;
LABEL_17:
          *((_DWORD *)v17 - 2) = v14;
          goto LABEL_18;
        }
      }
    }
  }
  return v28 == a5;
}

uint64_t physx::Sq::AABBPruner::updateObjectsAfterManualBoundsUpdates(uint64_t this, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 497) = 1;
    if (*(unsigned char *)(this + 496))
    {
      if (*(void *)(this + 8))
      {
        *(unsigned char *)(this + 498) = 1;
        uint64_t v5 = *(void *)(this + 424);
        uint64_t v6 = *(void *)(this + 432);
        uint64_t v7 = a3;
        do
        {
          int v12 = 0;
          unsigned int v8 = *a2++;
          uint64_t v9 = *(unsigned int *)(*(void *)(v3 + 440) + 4 * v8);
          int v12 = v9;
          if (*(_DWORD *)(v3 + 472) <= v9
            || (unsigned int v10 = *(_DWORD *)(*(void *)(v3 + 464) + 4 * v9), v10 == -1))
          {
            this = physx::Sq::ExtendedBucketPruner::updateObject(v3 + 80, (int)v5 + 24 * (int)v9, (void *)(v6 + 16 * v9), v9);
          }
          else
          {
            this = (uint64_t)physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v3 + 8), v10);
          }
          if ((*(_DWORD *)(v3 + 400) - 3) <= 1)
          {
            uint64_t v11 = *(unsigned int *)(v3 + 528);
            if ((*(_DWORD *)(v3 + 532) & 0x7FFFFFFFu) <= v11)
            {
              this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 520, &v12);
            }
            else
            {
              *(_DWORD *)(*(void *)(v3 + 520) + 4 * v11) = v12;
              ++*(_DWORD *)(v3 + 528);
            }
          }
          --v7;
        }
        while (v7);
      }
    }
  }
  return this;
}

physx::Sq::BitArray *physx::Sq::AABBTree::markNodeForRefit(physx::Sq::AABBTree *this, unsigned int a2)
{
  uint64_t v5 = *((void *)this + 10);
  uint64_t result = (physx::Sq::AABBTree *)((char *)this + 80);
  if (!v5) {
    uint64_t result = (physx::Sq::BitArray *)physx::Sq::BitArray::init(result, *((_DWORD *)this + 16));
  }
  if (!*((void *)this + 7))
  {
    uint64_t v6 = *((unsigned int *)this + 16);
    if (v6) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 464);
    else {
      uint64_t v7 = 0;
    }
    *((void *)this + 7) = v7;
    uint64_t result = (physx::Sq::BitArray *)_createParentArray(v7, *((void *)this + 2), *((void *)this + 2), *((void *)this + 2));
  }
  uint64_t v8 = *((void *)this + 10);
  do
  {
    uint64_t v9 = a2 >> 5;
    int v10 = *(_DWORD *)(v8 + 4 * v9);
    if (((1 << a2) & v10) != 0) {
      break;
    }
    *(_DWORD *)(v8 + 4 * v9) = (1 << a2) | v10;
    if (*((_DWORD *)this + 24) > v9) {
      LODWORD(v9) = *((_DWORD *)this + 24);
    }
    *((_DWORD *)this + 24) = v9;
    BOOL v11 = a2 == *(_DWORD *)(*((void *)this + 7) + 4 * a2);
    a2 = *(_DWORD *)(*((void *)this + 7) + 4 * a2);
  }
  while (!v11);
  return result;
}

uint64_t physx::Sq::AABBPruner::updateObjectsAndInflateBounds(uint64_t result, unsigned int *a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  if (a5)
  {
    int v5 = a4;
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    uint64_t v8 = result;
    *(unsigned char *)(result + 497) = 1;
    uint64_t v9 = *(void *)(result + 440);
    uint64_t v10 = *(void *)(result + 424);
    uint64_t v11 = a5;
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    unsigned int v13 = a2;
    int v14 = a3;
    uint64_t v15 = a5;
    do
    {
      unsigned int v16 = *v13++;
      uint64_t v17 = (float32x4_t *)(v10 + 24 * *(unsigned int *)(v9 + 4 * v16));
      unsigned int v18 = *v14++;
      uint64_t v19 = a4 + 24 * v18;
      float32x4_t v20 = *(float32x4_t *)(v19 + 12);
      float32x4_t v21 = vmulq_f32(vsubq_f32(v20, *(float32x4_t *)v19), v12);
      float32x4_t v22 = vsubq_f32(*(float32x4_t *)v19, v21);
      int8x16_t v23 = (int8x16_t)vaddq_f32(v20, v21);
      v22.i32[3] = v23.i32[0];
      float32x4_t *v17 = v22;
      v17[1].i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
      --v15;
    }
    while (v15);
    if (*(unsigned char *)(result + 496) && *(void *)(result + 8))
    {
      *(unsigned char *)(result + 498) = 1;
      uint64_t v24 = *(void *)(result + 432);
      do
      {
        int v29 = 0;
        unsigned int v25 = *v7++;
        uint64_t v26 = *(unsigned int *)(*(void *)(v8 + 440) + 4 * v25);
        int v29 = v26;
        if (*(_DWORD *)(v8 + 472) <= v26
          || (unsigned int v27 = *(_DWORD *)(*(void *)(v8 + 464) + 4 * v26), v27 == -1))
        {
          uint64_t result = physx::Sq::ExtendedBucketPruner::updateObject(v8 + 80, v5 + 24 * *v6, (void *)(v24 + 16 * v26), v26);
        }
        else
        {
          uint64_t result = (uint64_t)physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v8 + 8), v27);
        }
        if ((*(_DWORD *)(v8 + 400) - 3) <= 1)
        {
          uint64_t v28 = *(unsigned int *)(v8 + 528);
          if ((*(_DWORD *)(v8 + 532) & 0x7FFFFFFFu) <= v28)
          {
            uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v8 + 520, &v29);
          }
          else
          {
            *(_DWORD *)(*(void *)(v8 + 520) + 4 * v28) = v29;
            ++*(_DWORD *)(v8 + 528);
          }
        }
        ++v6;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

unsigned char *physx::Sq::AABBPruner::removeObjects(unsigned char *this, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = (uint64_t)this;
    this[497] = 1;
    int v5 = (physx::Sq::PruningPool *)(this + 416);
    uint64_t v6 = (uint64_t *)(this + 464);
    uint64_t v7 = (int32x2_t *)(this + 80);
    uint64_t v8 = (uint64_t)(this + 504);
    uint64_t v9 = a3;
    while (1)
    {
      unsigned int v10 = *a2++;
      uint64_t v11 = *(void *)(v4 + 440);
      long long v18 = *(_OWORD *)(*(void *)(v4 + 432) + 16 * *(unsigned int *)(v11 + 4 * v10));
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      this = (unsigned char *)physx::Sq::PruningPool::removeObject(v5, v10);
      if (*(unsigned char *)(v4 + 496))
      {
        unsigned int v13 = this;
        this = *(unsigned char **)(v4 + 8);
        if (this) {
          break;
        }
      }
LABEL_14:
      if (!--v9)
      {
        if (!*(_DWORD *)v5)
        {
          this = (unsigned char *)physx::Sq::AABBPruner::release((physx::Sq::AABBPruner *)v4);
          *(unsigned char *)(v4 + 497) = 1;
        }
        return this;
      }
    }
    *(unsigned char *)(v4 + 498) = 1;
    if (*(_DWORD *)(v4 + 472) <= v12)
    {
      long long v17 = *(_OWORD *)(*(void *)(v4 + 432) + 16 * v12);
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(*(void *)(v4 + 464) + 4 * v12);
      long long v17 = *(_OWORD *)(*(void *)(v4 + 432) + 16 * v12);
      if (v14 != -1)
      {
        physx::Sq::AABBTree::markNodeForRefit((physx::Sq::AABBTree *)this, v14);
        physx::Sq::ExtendedBucketPruner::swapIndex(v7, v12, &v17, v13, 1);
        goto LABEL_10;
      }
    }
    LODWORD(v16) = 0;
    physx::Sq::ExtendedBucketPruner::removeObject((uint64_t)v7, (uint64_t *)&v18, v12, &v17, v13, (unsigned int *)&v16);
LABEL_10:
    this = physx::Sq::AABBTreeUpdateMap::invalidate(v6, v12, v13, **(void **)(v4 + 8), *(void *)(*(void *)(v4 + 8) + 16));
    if (*(void *)(v4 + 48))
    {
      unint64_t v16 = __PAIR64__(v13, v12);
      uint64_t v15 = *(unsigned int *)(v4 + 512);
      if ((*(_DWORD *)(v4 + 516) & 0x7FFFFFFFu) <= v15)
      {
        this = (unsigned char *)physx::shdfnd::Array<physx::Sq::AABBPruner::NewTreeFixup,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>>::growAndPushBack(v8, &v16);
      }
      else
      {
        *(void *)(*(void *)(v4 + 504) + 8 * v15) = v16;
        ++*(_DWORD *)(v4 + 512);
      }
    }
    goto LABEL_14;
  }
  return this;
}

uint64_t *physx::Sq::AABBTreeUpdateMap::invalidate(uint64_t *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *((_DWORD *)result + 2);
  if (v5 <= a2) {
    unsigned int v6 = -1;
  }
  else {
    unsigned int v6 = *(_DWORD *)(*result + 4 * a2);
  }
  if (v5 <= a3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*result + 4 * a3);
  }
  if (v6 != -1)
  {
    uint64_t v8 = a5 + 28 * v6;
    unsigned int v11 = *(_DWORD *)(v8 + 24);
    uint64_t v9 = (_DWORD *)(v8 + 24);
    unint64_t v10 = v11;
    unint64_t v12 = ((unint64_t)v11 >> 1) & 0xF;
    if (v12)
    {
      unsigned int v13 = (int *)(a4 + ((v10 >> 3) & 0x1FFFFFFC));
      unsigned int v14 = v13;
      unint64_t v15 = v12;
      while (*v14 != a2)
      {
        ++v14;
        if (!--v15) {
          goto LABEL_15;
        }
      }
      int v16 = v12 - 1;
      *uint64_t v9 = v10 & 0xFFFFFFE1 | (2 * v16);
      *unsigned int v14 = -1;
      *(_DWORD *)(*result + 4 * a2) = -1;
      if (v15 != 1)
      {
        int v17 = *v14;
        *unsigned int v14 = v13[v16];
        v13[v16] = v17;
      }
    }
  }
LABEL_15:
  if (a2 != a3 && v7 != -1)
  {
    unint64_t v18 = *(unsigned int *)(a5 + 28 * v7 + 24);
    uint64_t v19 = (v18 >> 1) & 0xF;
    if (v19)
    {
      for (unsigned int i = (unsigned int *)(a4 + ((v18 >> 3) & 0x1FFFFFFC)); *i != a3; ++i)
      {
        if (!--v19) {
          return result;
        }
      }
      *unsigned int i = a2;
      uint64_t v21 = *result;
      *(_DWORD *)(*result + 4 * a2) = v7;
      *(_DWORD *)(v21 + 4 * a3) = -1;
    }
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(void **)(a1 + 8);
  if (v13)
  {
    switch(*(_WORD *)(a2 + 98))
    {
      case 0:
        LODWORD(a4) = *(_DWORD *)(a2 + 112);
        float32x4_t v14 = *(float32x4_t *)(a2 + 100);
        v14.i64[1] = *(unsigned int *)(a2 + 108);
        float32x4_t v41 = v14;
        *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
        *(int32x2_t *)v42.i8 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
        if (physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(void *)(a1 + 432), *(void *)(a1 + 424), v13, (uint64_t)&v41, a3))goto LABEL_19; {
        goto LABEL_23;
        }
      case 2:
        float v15 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
        float v16 = *(float *)(a2 + 120);
        v20.i64[0] = *(void *)(a2 + 112);
        float32x2_t v17 = *(float32x2_t *)(a2 + 12);
        double v18 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v20.f32, vmul_n_f32(v17, v15)));
        double v19 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v17), *(int8x8_t *)v20.f32, vbsl_s8((int8x8_t)vcgez_f32(v17), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
        v20.i64[1] = LODWORD(v16);
        float v21 = *(float *)(a2 + 20);
        *(float32x2_t *)v22.i8 = v17;
        v22.i64[1] = LODWORD(v21);
        *(int8x8_t *)&long long v23 = vext_s8((int8x8_t)v17, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), 4uLL);
        *((void *)&v23 + 1) = v17.u32[0];
        *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
        int32x4_t v24 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
        v24.i32[3] = 0;
        float32x4_t v41 = v20;
        int8x16_t v42 = v22;
        long long v43 = v23;
        int32x4_t v44 = v24;
        int8x16_t v25 = (int8x16_t)vabsq_f32((float32x4_t)v22);
        *(int8x8_t *)&long long v26 = vext_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), 4uLL);
        float v27 = v16 + (float)(v15 * v21);
        float v28 = -3.4028e38;
        if (v21 >= 0.0) {
          float v28 = 3.4028e38;
        }
        if (v21 != 0.0) {
          float v16 = v28;
        }
        BOOL v29 = v15 < 3.4028e38;
        if (v15 >= 3.4028e38) {
          float v30 = v16;
        }
        else {
          float v30 = v27;
        }
        if (v29) {
          *(double *)v31.i64 = v18;
        }
        else {
          *(double *)v31.i64 = v19;
        }
        v31.i64[1] = LODWORD(v30);
        int8x16_t v45 = v25;
        *((void *)&v26 + 1) = v25.u32[0];
        long long v46 = v26;
        float32x4_t v47 = vminq_f32(v20, v31);
        float32x4_t v48 = vmaxq_f32(v20, v31);
        if (physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(void *)(a1 + 432), *(void *)(a1 + 424), v13, &v41, a3))goto LABEL_19; {
        goto LABEL_23;
        }
      case 3:
        if (*(_WORD *)(a2 + 96)) {
          goto LABEL_18;
        }
        float v33 = *(float *)(a2 + 80);
        float v34 = *(float *)(a2 + 92);
        float32x2_t v35 = *(float32x2_t *)(a2 + 72);
        float32x2_t v36 = *(float32x2_t *)(a2 + 84);
        *(float32x2_t *)v37.f32 = vmul_f32(vadd_f32(v35, v36), (float32x2_t)0x3F0000003F000000);
        v37.f32[2] = (float)(v33 + v34) * 0.5;
        v37.i32[3] = 0;
        float v38 = v34 - v33;
        *(float32x2_t *)v39.i8 = vmul_f32(vsub_f32(v36, v35), (float32x2_t)0x3F0000003F000000);
        v39.i64[1] = COERCE_UNSIGNED_INT(v38 * 0.5);
        float32x4_t v41 = v37;
        int8x16_t v42 = v39;
        uint64_t result = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(void *)(a1 + 432), *(void *)(a1 + 424), v13, &v41, a3);
        if (!result) {
          return result;
        }
        goto LABEL_19;
      case 4:
LABEL_18:
        physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v41, a2 + 48, (__int32 *)(a2 + 12), a2, a4, a5, a6, a7, a8, a9, a10);
        if (physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v40, *(void *)(a1 + 432), *(void *)(a1 + 424), *(void **)(a1 + 8), &v41, (unsigned int (***)(void, int *, uint64_t))a3))goto LABEL_19; {
LABEL_23:
        }
        uint64_t result = 0;
        break;
      default:
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    if (*(unsigned char *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324)) {
      return physx::Sq::ExtendedBucketPruner::overlap(a1 + 80, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float32x4_t *a5, unsigned int (***a6)(void, int *, uint64_t))
{
  uint64_t v8 = a4;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0x10000000100;
  int v9 = 1;
  char v41 = 1;
  int8x16_t v42 = v40;
  uint64_t v10 = a4[2];
  v40[0] = v10;
  while (1)
  {
    int v11 = v9 - 1;
    uint64_t v12 = v42[v9 - 1];
    float32x4_t v13 = *(float32x4_t *)(v12 + 12);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    float32x4_t v15 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v14);
    v15.i32[3] = 0;
    float32x4_t v16 = vmulq_f32(vaddq_f32(*(float32x4_t *)v12, v13), v14);
    v16.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a5, v16, v15))
    {
      unsigned int v17 = 2 * v9;
      while (1)
      {
        int v11 = v9 - 1;
        unint64_t v18 = *(unsigned int *)(v12 + 24);
        if (v18) {
          break;
        }
        uint64_t v12 = v10 + 28 * (*(_DWORD *)(v12 + 24) >> 1);
        v42[v11] = v12 + 28;
        if (v9 == (HIDWORD(v43) & 0x7FFFFFFF)) {
          physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v40, v17);
        }
        float32x4_t v19 = *(float32x4_t *)(v12 + 12);
        v20.i64[0] = 0x3F0000003F000000;
        v20.i64[1] = 0x3F0000003F000000;
        float32x4_t v21 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v12), v20);
        v21.i32[3] = 0;
        float32x4_t v22 = vmulq_f32(vaddq_f32(*(float32x4_t *)v12, v19), v20);
        v22.i32[3] = 0;
        ++v9;
        v17 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a5, v22, v21))
        {
          int v11 = v9 - 1;
          goto LABEL_16;
        }
      }
      unsigned int v23 = (v18 >> 1) & 0xF;
      if (v23) {
        break;
      }
    }
LABEL_16:
    int v9 = v11;
    if (!v11)
    {
      uint64_t v34 = 1;
      goto LABEL_19;
    }
  }
  int32x4_t v24 = (unsigned int *)(*v8 + ((v18 >> 3) & 0x1FFFFFFC));
  unsigned int v25 = (v18 >> 1) & 0xF;
  while (1)
  {
    unsigned int v27 = *v24++;
    uint64_t v26 = v27;
    if (v23 < 2) {
      goto LABEL_27;
    }
    uint64_t v28 = a3 + 24 * v26;
    float32x4_t v29 = *(float32x4_t *)(v28 + 12);
    float32x4_t v30 = vaddq_f32(*(float32x4_t *)v28, v29);
    v31.i64[0] = 0x3F0000003F000000;
    v31.i64[1] = 0x3F0000003F000000;
    float32x4_t v32 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v31);
    float32x4_t v33 = vmulq_f32(v30, v31);
    v33.i32[3] = 0;
    v32.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a5, v33, v32))
    {
LABEL_27:
      int v39 = 0;
      if (!(**a6)(a6, &v39, a2 + 16 * v26)) {
        break;
      }
    }
    if (!--v25)
    {
      uint64_t v8 = a4;
      goto LABEL_16;
    }
  }
  uint64_t v34 = 0;
LABEL_19:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v34;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float32x4_t *a5, uint64_t (***a6)(void, int *, uint64_t))
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0x10000000100;
  unsigned int v8 = 1;
  char v37 = 1;
  float v38 = v36;
  uint64_t v9 = a4[2];
  v36[0] = v9;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v11 = 2 * v8--;
    uint64_t v12 = v38[v8];
    float32x4_t v13 = *(float32x4_t *)(v12 + 12);
    float32x4_t v14 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v10);
    v14.i32[3] = 0;
    float32x4_t v15 = vaddq_f32(*(float32x4_t *)v12, v13);
    while (1)
    {
      float32x4_t v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      int8x8_t v17 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v14, a5[1]), vabdq_f32(v16, *a5)));
      if ((~vuzp1_s8(v17, v17).u32[0] & 0xFFFFFF) != 0) {
        break;
      }
      unint64_t v18 = *(unsigned int *)(v12 + 24);
      if (v18)
      {
        unsigned int v20 = (v18 >> 1) & 0xF;
        if (v20)
        {
          float32x4_t v21 = (unsigned int *)(*a4 + ((v18 >> 3) & 0x1FFFFFFC));
          unsigned int v22 = (v18 >> 1) & 0xF;
          while (1)
          {
            unsigned int v24 = *v21++;
            uint64_t v23 = v24;
            if (v20 < 2
              || (uint64_t v25 = a3 + 24 * v23,
                  float32x4_t v26 = *(float32x4_t *)(v25 + 12),
                  float32x4_t v27 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)v25), v10),
                  v27.i32[3] = 0,
                  float32x4_t v28 = vmulq_f32(vaddq_f32(*(float32x4_t *)v25, v26), v10),
                  v28.i32[3] = 0,
                  *(int16x4_t *)v27.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(a5[1], v27), vabdq_f32(v28, *a5))),
                  (~vuzp1_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0))
            {
              int v35 = 0;
              int v29 = (**a6)(a6, &v35, a2 + 16 * v23);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v29) {
                break;
              }
            }
            if (!--v22) {
              goto LABEL_14;
            }
          }
          uint64_t v30 = 0;
          goto LABEL_17;
        }
        break;
      }
      uint64_t v12 = v9 + 28 * (*(_DWORD *)(v12 + 24) >> 1);
      v38[v8] = v12 + 28;
      if (v8 + 1 == (HIDWORD(v39) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v36, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v19 = *(float32x4_t *)(v12 + 12);
      float32x4_t v14 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v12), v10);
      v14.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(*(float32x4_t *)v12, v19);
      v11 += 2;
      ++v8;
    }
LABEL_14:
    if (v8) {
      continue;
    }
    break;
  }
  uint64_t v30 = 1;
LABEL_17:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v30;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float32x4_t *a5, uint64_t (***a6)(void, int *, uint64_t))
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v46 = 0x10000000100;
  unsigned int v9 = 1;
  char v44 = 1;
  int8x16_t v45 = v43;
  uint64_t v10 = a4[2];
  v43[0] = v10;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v12 = 2 * v9--;
    uint64_t v13 = v45[v9];
    float32x4_t v14 = *(float32x4_t *)(v13 + 12);
    float32x4_t v15 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v13), v11);
    v15.i32[3] = 0;
    float32x4_t v16 = vaddq_f32(*(float32x4_t *)v13, v14);
    while (1)
    {
      float32x4_t v17 = vmulq_f32(v16, v11);
      v17.i32[3] = 0;
      float32x4_t v18 = vaddq_f32(v15, a5[3]);
      float32x4_t v19 = vsubq_f32(*a5, v17);
      *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), 4uLL);
      v20.i64[1] = v19.u32[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
      v21.i64[1] = v18.u32[0];
      *(int16x4_t *)v18.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a5[7], vsubq_f32(v17, v18)), (int8x16_t)vcgeq_f32(vaddq_f32(v17, v18), a5[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a5[4], v21), a5[5], v18), vabsq_f32(vmlsq_f32(vmulq_f32(a5[1], v20), v19, a5[2])))));
      if (vuzp1_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v18.f32).u32[0] != -1) {
        break;
      }
      unint64_t v22 = *(unsigned int *)(v13 + 24);
      if (v22)
      {
        unsigned int v24 = (v22 >> 1) & 0xF;
        if (v24)
        {
          uint64_t v25 = (unsigned int *)(*a4 + ((v22 >> 3) & 0x1FFFFFFC));
          unsigned int v26 = (v22 >> 1) & 0xF;
          while (1)
          {
            unsigned int v28 = *v25++;
            uint64_t v27 = v28;
            if (v24 < 2) {
              goto LABEL_25;
            }
            uint64_t v29 = a3 + 24 * v27;
            float32x4_t v30 = *(float32x4_t *)(v29 + 12);
            float32x4_t v31 = vmulq_f32(vsubq_f32(v30, *(float32x4_t *)v29), v11);
            float32x4_t v32 = vmulq_f32(vaddq_f32(*(float32x4_t *)v29, v30), v11);
            v32.i32[3] = 0;
            v31.i32[3] = 0;
            float32x4_t v33 = vaddq_f32(a5[3], v31);
            float32x4_t v34 = vsubq_f32(*a5, v32);
            *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v34.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), 4uLL);
            v35.i64[1] = v34.u32[0];
            *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
            v36.i64[1] = v33.u32[0];
            *(int16x4_t *)v33.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a5[7], vsubq_f32(v32, v33)), (int8x16_t)vcgeq_f32(vaddq_f32(v32, v33), a5[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a5[4], v36), a5[5], v33), vabsq_f32(vmlsq_f32(vmulq_f32(a5[1], v35), v34, a5[2])))));
            if (vuzp1_s8(*(int8x8_t *)v33.f32, *(int8x8_t *)v33.f32).u32[0] == -1)
            {
LABEL_25:
              int v42 = 0;
              int v37 = (**a6)(a6, &v42, a2 + 16 * v27);
              v11.i64[0] = 0x3F0000003F000000;
              v11.i64[1] = 0x3F0000003F000000;
              if (!v37) {
                break;
              }
            }
            if (!--v26) {
              goto LABEL_14;
            }
          }
          uint64_t v38 = 0;
          goto LABEL_17;
        }
        break;
      }
      uint64_t v13 = v10 + 28 * (*(_DWORD *)(v13 + 24) >> 1);
      v45[v9] = v13 + 28;
      if (v9 + 1 == (HIDWORD(v46) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v43, v12);
        v11.i64[0] = 0x3F0000003F000000;
        v11.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v23 = *(float32x4_t *)(v13 + 12);
      float32x4_t v15 = vmulq_f32(vsubq_f32(v23, *(float32x4_t *)v13), v11);
      v15.i32[3] = 0;
      float32x4_t v16 = vaddq_f32(*(float32x4_t *)v13, v23);
      v12 += 2;
      ++v9;
    }
LABEL_14:
    if (v9) {
      continue;
    }
    break;
  }
  uint64_t v38 = 1;
LABEL_17:
  if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x7FFFFFFF00000000) != 0 && v45 != v43 && v45) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v38;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (***a6)(void, int *, uint64_t))
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v46 = 0x10000000100;
  unsigned int v9 = 1;
  char v44 = 1;
  int8x16_t v45 = v43;
  uint64_t v10 = a4[2];
  v43[0] = v10;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v12 = 2 * v9--;
    uint64_t v13 = v45[v9];
    float32x4_t v14 = *(float32x4_t *)(v13 + 12);
    float32x4_t v15 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v13), v11);
    v15.i32[3] = 0;
    float32x4_t v16 = vaddq_f32(*(float32x4_t *)v13, v14);
    while (1)
    {
      float32x4_t v17 = vmulq_f32(v16, v11);
      v17.i32[3] = 0;
      float32x4_t v18 = vsubq_f32(*(float32x4_t *)a5, v17);
      float32x4_t v19 = vnegq_f32(v15);
      v19.i32[3] = 0;
      float32x4_t v20 = vsubq_f32(v18, vmaxq_f32(vminq_f32(v18, v15), v19));
      float32x4_t v21 = vmulq_f32(v20, v20);
      v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
      *(int16x4_t *)v21.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a5 + 16), vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v21.f32).u32[0] != -1) {
        break;
      }
      unint64_t v22 = *(unsigned int *)(v13 + 24);
      if (v22)
      {
        unsigned int v24 = (v22 >> 1) & 0xF;
        if (v24)
        {
          uint64_t v25 = (unsigned int *)(*a4 + ((v22 >> 3) & 0x1FFFFFFC));
          unsigned int v26 = (v22 >> 1) & 0xF;
          while (1)
          {
            unsigned int v28 = *v25++;
            uint64_t v27 = v28;
            if (v24 < 2) {
              goto LABEL_25;
            }
            uint64_t v29 = a3 + 24 * v27;
            float32x4_t v30 = *(float32x4_t *)(v29 + 12);
            float32x4_t v31 = vmulq_f32(vsubq_f32(v30, *(float32x4_t *)v29), v11);
            float32x4_t v32 = vmulq_f32(vaddq_f32(*(float32x4_t *)v29, v30), v11);
            v32.i32[3] = 0;
            v31.i32[3] = 0;
            float32x4_t v33 = vsubq_f32(*(float32x4_t *)a5, v32);
            float32x4_t v34 = vnegq_f32(v31);
            v34.i32[3] = 0;
            float32x4_t v35 = vsubq_f32(v33, vmaxq_f32(vminq_f32(v33, v31), v34));
            float32x4_t v36 = vmulq_f32(v35, v35);
            v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
            *(int16x4_t *)v36.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a5 + 16), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), 0);
            if (vuzp1_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v36.f32).u32[0] == -1)
            {
LABEL_25:
              int v42 = 0;
              int v37 = (**a6)(a6, &v42, a2 + 16 * v27);
              v11.i64[0] = 0x3F0000003F000000;
              v11.i64[1] = 0x3F0000003F000000;
              if (!v37) {
                break;
              }
            }
            if (!--v26) {
              goto LABEL_14;
            }
          }
          uint64_t v38 = 0;
          goto LABEL_17;
        }
        break;
      }
      uint64_t v13 = v10 + 28 * (*(_DWORD *)(v13 + 24) >> 1);
      v45[v9] = v13 + 28;
      if (v9 + 1 == (HIDWORD(v46) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v43, v12);
        v11.i64[0] = 0x3F0000003F000000;
        v11.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v23 = *(float32x4_t *)(v13 + 12);
      float32x4_t v15 = vmulq_f32(vsubq_f32(v23, *(float32x4_t *)v13), v11);
      v15.i32[3] = 0;
      float32x4_t v16 = vaddq_f32(*(float32x4_t *)v13, v23);
      v12 += 2;
      ++v9;
    }
LABEL_14:
    if (v9) {
      continue;
    }
    break;
  }
  uint64_t v38 = 1;
LABEL_17:
  if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x7FFFFFFF00000000) != 0 && v45 != v43 && v45) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v38;
}

uint64_t physx::Sq::AABBPruner::sweep(uint64_t a1, float *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(void, float *, uint64_t))
{
  uint64_t v10 = *(void **)(a1 + 8);
  if (!v10) {
    goto LABEL_9;
  }
  float v11 = a2[18];
  float v12 = a2[19];
  float v14 = a2[20];
  float v13 = a2[21];
  float v15 = a2[22];
  float v16 = a2[23];
  v23.f32[0] = (float)(v13 - v11) * 0.5;
  v23.f32[1] = (float)(v15 - v12) * 0.5;
  float v24 = (float)(v16 - v14) * 0.5;
  uint64_t v18 = *(void *)(a1 + 424);
  uint64_t v17 = *(void *)(a1 + 432);
  v20.f32[0] = (float)(v13 + v11) * 0.5;
  v20.f32[1] = (float)(v15 + v12) * 0.5;
  float v21 = (float)(v16 + v14) * 0.5;
  uint64_t result = physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v22, v17, v18, v10, &v20, a3, a4, &v23, a5);
  if (result)
  {
LABEL_9:
    if (*(unsigned char *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324)) {
      return physx::Sq::ExtendedBucketPruner::sweep(a1 + 80, a2, a3, a4, (unsigned int (**)(void, float *, uint64_t))a5);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, unsigned int (***a9)(void, float *, uint64_t))
{
  int v12 = 0;
  uint64_t v101 = *MEMORY[0x263EF8340];
  float v13 = a5[1].f32[0] + a5[1].f32[0];
  float32x2_t v14 = vadd_f32(*a5, *a5);
  float32x2_t v15 = vadd_f32(*a6, *a6);
  float v16 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v22.f32 = vadd_f32(*a8, *a8);
  double v17 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  double v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v19.f32 = v14;
  v19.i64[1] = LODWORD(v13);
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v16);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22.f32[2] = a8[1].f32[0] + a8[1].f32[0];
  v22.i32[3] = 0;
  float32x4_t v23 = vabsq_f32(v20);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
  v24.i64[1] = v23.u32[0];
  float v25 = v13 + (float)(v16 * *a7);
  float v26 = -3.4028e38;
  if (v16 >= 0.0) {
    float v26 = 3.4028e38;
  }
  if (v16 != 0.0) {
    float v13 = v26;
  }
  if (*a7 >= 3.4028e38)
  {
    *(double *)v27.i64 = v18;
  }
  else
  {
    float v13 = v25;
    *(double *)v27.i64 = v17;
  }
  v27.i64[1] = LODWORD(v13);
  float32x4_t v28 = vminq_f32(v19, v27);
  float32x4_t v29 = vmaxq_f32(v19, v27);
  uint64_t v100 = 0x10000000100;
  char v98 = 1;
  float v99 = v97;
  uint64_t v30 = a4[2];
  v97[0] = v30;
  float32x4_t v31 = vnegq_f32(v21);
  float32x4_t v90 = v20;
  float32x4_t v91 = v19;
  float32x4_t v88 = v23;
  float32x4_t v89 = v22;
  float32x4_t v86 = v31;
  float32x4_t v87 = v24;
  do
  {
    uint64_t v32 = v99[v12];
    float32x4_t v33 = *(float32x4_t *)(v32 + 12);
    float32x4_t v34 = vsubq_f32(v33, *(float32x4_t *)v32);
    v34.i32[3] = 0;
    float32x4_t v35 = vaddq_f32(*(float32x4_t *)v32, v33);
    v35.i32[3] = 0;
    float32x4_t v36 = vaddq_f32(v22, v34);
    float32x4_t v37 = vaddq_f32(v35, v36);
    float32x4_t v38 = vsubq_f32(v35, v36);
    float32x4_t v39 = vsubq_f32(v19, v35);
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
    v40.i64[1] = v39.u32[0];
    *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), 4uLL);
    v41.i64[1] = v36.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v37, v28), (int8x16_t)vcgeq_f32(v29, v38)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v41), v24, v36), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v40), v39, v31))))), *(int8x8_t *)v33.f32).u32[0] == -1)
    {
      unsigned int v42 = HIDWORD(*(_OWORD *)(v32 + 12));
      float v43 = *a7;
      float v96 = *a7;
      if ((v33.i8[12] & 1) == 0)
      {
        float32x4_t v23 = v88;
        float32x4_t v22 = v89;
        float32x4_t v31 = v86;
        float32x4_t v24 = v87;
        float32x4_t v92 = v29;
        float32x4_t v94 = v28;
        do
        {
          uint64_t v44 = v30 + 28 * (v42 >> 1);
          float32x4_t v45 = *(float32x4_t *)(v44 + 12);
          float32x4_t v46 = vsubq_f32(v45, *(float32x4_t *)v44);
          v46.i32[3] = 0;
          float32x4_t v47 = vaddq_f32(*(float32x4_t *)v44, v45);
          v47.i32[3] = 0;
          float32x4_t v48 = vaddq_f32(v22, v46);
          float32x4_t v49 = vsubq_f32(v19, v47);
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), 4uLL);
          v50.i64[1] = v49.u32[0];
          *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
          v51.i64[1] = v48.u32[0];
          unsigned __int32 v52 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v47, v48), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v47, v48))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v51), v24, v48), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v50), v49, v31))))), *(int8x8_t *)v47.f32).u32[0];
          float32x4_t v53 = *(float32x4_t *)(v44 + 28);
          float32x4_t v54 = *(float32x4_t *)(v44 + 40);
          float32x4_t v55 = vsubq_f32(v54, v53);
          v55.i32[3] = 0;
          float32x4_t v56 = vaddq_f32(v53, v54);
          v56.i32[3] = 0;
          float32x4_t v57 = vaddq_f32(v22, v55);
          float32x4_t v58 = vsubq_f32(v19, v56);
          *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
          v51.i64[1] = v58.u32[0];
          *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v59.i64[1] = v57.u32[0];
          unsigned __int32 v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v56, v57), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v56, v57))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v59), v24, v57), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v51), v58, v31))))), *(int8x8_t *)v47.f32).u32[0];
          if (v52 == -1 && v60 == -1)
          {
            float32x4_t v64 = vmulq_f32(v20, vsubq_f32(v56, v47));
            v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
            v64.f32[0] = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32).f32[0];
            v99[v12] = v44 + 28 * (v64.f32[0] > 0.0);
            uint64_t v62 = v44 + 28 * (v64.f32[0] <= 0.0);
            if (v12 + 1 == (HIDWORD(v100) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v97, 2 * (v12 + 1));
              float32x4_t v29 = v92;
              float32x4_t v28 = v94;
              float32x4_t v31 = v86;
              float32x4_t v24 = v87;
              float32x4_t v23 = v88;
              float32x4_t v22 = v89;
              float32x4_t v20 = v90;
              float32x4_t v19 = v91;
            }
            ++v12;
          }
          else
          {
            if (v52 == -1) {
              uint64_t v62 = v44;
            }
            else {
              uint64_t v62 = v44 + 28;
            }
            if (v52 != -1 && v60 != -1) {
              goto LABEL_38;
            }
          }
          unsigned int v42 = *(_DWORD *)(v62 + 24);
        }
        while ((v42 & 1) == 0);
        float v43 = *a7;
      }
      unsigned int v65 = (v42 >> 1) & 0xF;
      if (v65)
      {
        float32x4_t v66 = (unsigned int *)(*a4 + 4 * (v42 >> 5));
        for (int i = (v42 >> 1) & 0xF; i; --i)
        {
          unsigned int v69 = *v66++;
          uint64_t v68 = v69;
          if (v65 < 2) {
            goto LABEL_33;
          }
          uint64_t v70 = a3 + 24 * v68;
          float32x4_t v71 = *(float32x4_t *)(v70 + 12);
          float32x4_t v72 = vaddq_f32(*(float32x4_t *)v70, v71);
          float32x4_t v73 = vsubq_f32(v71, *(float32x4_t *)v70);
          v72.i32[3] = 0;
          v73.i32[3] = 0;
          float32x4_t v74 = vaddq_f32(v89, v73);
          float32x4_t v75 = vaddq_f32(v72, v74);
          float32x4_t v76 = vsubq_f32(v72, v74);
          float32x4_t v77 = vsubq_f32(v19, v72);
          *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v77.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), 4uLL);
          v78.i64[1] = v77.u32[0];
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), 4uLL);
          v79.i64[1] = v74.u32[0];
          *(int16x4_t *)v74.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v75, v28), (int8x16_t)vcgeq_f32(v29, v76)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v88, v79), v87, v74), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v78), v77, v86)))));
          if (vuzp1_s8(*(int8x8_t *)v74.f32, *(int8x8_t *)v74.f32).u32[0] == -1)
          {
LABEL_33:
            float32x4_t v93 = v29;
            float32x4_t v95 = v28;
            if (!(**a9)(a9, &v96, a2 + 16 * v68))
            {
              uint64_t v83 = 0;
              goto LABEL_41;
            }
            float v80 = v96;
            float32x4_t v20 = v90;
            float32x4_t v19 = v91;
            float32x4_t v29 = v93;
            float32x4_t v28 = v95;
            if (v96 < v43)
            {
              *a7 = v96;
              float32x4_t v81 = vmlaq_n_f32(v91, v90, v80);
              v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
              float32x4_t v28 = vminq_f32(v91, v81);
              float32x4_t v29 = vmaxq_f32(v91, v81);
            }
          }
        }
      }
      float32x4_t v23 = v88;
      float32x4_t v22 = v89;
      float32x4_t v31 = v86;
      float32x4_t v24 = v87;
    }
LABEL_38:
    ;
  }
  while (v12--);
  uint64_t v83 = 1;
LABEL_41:
  if ((v100 & 0x8000000000000000) == 0 && (v100 & 0x7FFFFFFF00000000) != 0 && v99 != v97 && v99) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v83;
}

uint64_t physx::Sq::AABBPruner::raycast(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (**a5)(void, float *, uint64_t))
{
  uint64_t v10 = *(void **)(a1 + 8);
  if (!v10
    || (uint64_t v12 = *(void *)(a1 + 424),
        uint64_t v11 = *(void *)(a1 + 432),
        uint64_t v15 = 0,
        int v16 = 0,
        int v13 = physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v17, v11, v12, v10, a2, a3, a4, (uint64_t)&v15, (unsigned int (***)(void, float *, uint64_t))a5), result = 0, v13))
  {
    if (*(unsigned char *)(a1 + 496) && *(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324)) {
      return physx::Sq::ExtendedBucketPruner::raycast(a1 + 80, a2, a3, a4, a5);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, unsigned int (***a9)(void, float *, uint64_t))
{
  int v12 = 0;
  uint64_t v98 = *MEMORY[0x263EF8340];
  float v13 = a5[1].f32[0] + a5[1].f32[0];
  float32x2_t v14 = vadd_f32(*a5, *a5);
  float32x2_t v15 = vadd_f32(*a6, *a6);
  double v16 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  double v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v14;
  v18.i64[1] = LODWORD(v13);
  float v19 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v19);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  float32x4_t v22 = vabsq_f32(v20);
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v23.i64[1] = v22.u32[0];
  float v24 = v13 + (float)(v19 * *a7);
  float v25 = -3.4028e38;
  if (v19 >= 0.0) {
    float v25 = 3.4028e38;
  }
  if (v19 != 0.0) {
    float v13 = v25;
  }
  if (*a7 >= 3.4028e38)
  {
    *(double *)v26.i64 = v17;
  }
  else
  {
    float v13 = v24;
    *(double *)v26.i64 = v16;
  }
  v26.i64[1] = LODWORD(v13);
  float32x4_t v27 = vminq_f32(v18, v26);
  float32x4_t v28 = vmaxq_f32(v18, v26);
  uint64_t v97 = 0x10000000100;
  char v95 = 1;
  float v96 = v94;
  uint64_t v29 = a4[2];
  v94[0] = v29;
  float32x4_t v30 = vnegq_f32(v21);
  float32x4_t v87 = v20;
  float32x4_t v88 = v18;
  float32x4_t v85 = v23;
  float32x4_t v86 = v22;
  float32x4_t v84 = v30;
  do
  {
    uint64_t v31 = v96[v12];
    float32x4_t v32 = *(float32x4_t *)(v31 + 12);
    int8x16_t v33 = (int8x16_t)vsubq_f32(v32, *(float32x4_t *)v31);
    float32x4_t v34 = (float32x4_t)v33;
    v34.i32[3] = 0;
    float32x4_t v35 = vaddq_f32(*(float32x4_t *)v31, v32);
    v35.i32[3] = 0;
    float32x4_t v36 = vaddq_f32(v35, v34);
    float32x4_t v37 = vsubq_f32(v35, v34);
    float32x4_t v38 = vsubq_f32(v18, v35);
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
    v39.i64[1] = v38.u32[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), 4uLL);
    v40.i64[1] = v33.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, v27), (int8x16_t)vcgeq_f32(v28, v37)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v40), v23, v34), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v39), v38, v30))))), *(int8x8_t *)v32.f32).u32[0] == -1)
    {
      unsigned int v41 = HIDWORD(*(_OWORD *)(v31 + 12));
      float v42 = *a7;
      float v93 = *a7;
      if ((v32.i8[12] & 1) == 0)
      {
        float32x4_t v23 = v85;
        float32x4_t v22 = v86;
        float32x4_t v30 = v84;
        float32x4_t v89 = v28;
        float32x4_t v91 = v27;
        do
        {
          uint64_t v43 = v29 + 28 * (v41 >> 1);
          float32x4_t v44 = *(float32x4_t *)(v43 + 12);
          int8x16_t v45 = (int8x16_t)vsubq_f32(v44, *(float32x4_t *)v43);
          float32x4_t v46 = (float32x4_t)v45;
          v46.i32[3] = 0;
          float32x4_t v47 = vaddq_f32(*(float32x4_t *)v43, v44);
          v47.i32[3] = 0;
          float32x4_t v48 = vsubq_f32(v18, v47);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
          v49.i64[1] = v48.u32[0];
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), 4uLL);
          v50.i64[1] = v45.u32[0];
          unsigned __int32 v51 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v47, v46), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v47, v46))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v50), v23, v46), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v48, v30))))), *(int8x8_t *)v47.f32).u32[0];
          float32x4_t v52 = *(float32x4_t *)(v43 + 28);
          float32x4_t v53 = *(float32x4_t *)(v43 + 40);
          int8x16_t v54 = (int8x16_t)vsubq_f32(v53, v52);
          float32x4_t v55 = (float32x4_t)v54;
          v55.i32[3] = 0;
          float32x4_t v56 = vaddq_f32(v52, v53);
          v56.i32[3] = 0;
          float32x4_t v57 = vsubq_f32(v18, v56);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
          v49.i64[1] = v57.u32[0];
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), 4uLL);
          v50.i64[1] = v54.u32[0];
          unsigned __int32 v58 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v56, v55), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v56, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v50), v23, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v57, v30))))), *(int8x8_t *)v47.f32).u32[0];
          if (v51 == -1 && v58 == -1)
          {
            float32x4_t v62 = vmulq_f32(v20, vsubq_f32(v56, v47));
            v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
            v62.f32[0] = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32).f32[0];
            v96[v12] = v43 + 28 * (v62.f32[0] > 0.0);
            uint64_t v60 = v43 + 28 * (v62.f32[0] <= 0.0);
            if (v12 + 1 == (HIDWORD(v97) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized((uint64_t)v94, 2 * (v12 + 1));
              float32x4_t v28 = v89;
              float32x4_t v27 = v91;
              float32x4_t v30 = v84;
              float32x4_t v23 = v85;
              float32x4_t v22 = v86;
              float32x4_t v20 = v87;
              float32x4_t v18 = v88;
            }
            ++v12;
          }
          else
          {
            if (v51 == -1) {
              uint64_t v60 = v43;
            }
            else {
              uint64_t v60 = v43 + 28;
            }
            if (v51 != -1 && v58 != -1) {
              goto LABEL_38;
            }
          }
          unsigned int v41 = *(_DWORD *)(v60 + 24);
        }
        while ((v41 & 1) == 0);
        float v42 = *a7;
      }
      unsigned int v63 = (v41 >> 1) & 0xF;
      if (v63)
      {
        float32x4_t v64 = (unsigned int *)(*a4 + 4 * (v41 >> 5));
        for (int i = (v41 >> 1) & 0xF; i; --i)
        {
          unsigned int v67 = *v64++;
          uint64_t v66 = v67;
          if (v63 < 2) {
            goto LABEL_33;
          }
          uint64_t v68 = a3 + 24 * v66;
          float32x4_t v69 = *(float32x4_t *)(v68 + 12);
          float32x4_t v70 = vaddq_f32(*(float32x4_t *)v68, v69);
          int8x16_t v71 = (int8x16_t)vsubq_f32(v69, *(float32x4_t *)v68);
          v70.i32[3] = 0;
          float32x4_t v72 = (float32x4_t)v71;
          v72.i32[3] = 0;
          float32x4_t v73 = vaddq_f32(v70, v72);
          float32x4_t v74 = vsubq_f32(v70, v72);
          float32x4_t v75 = vsubq_f32(v18, v70);
          *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), 4uLL);
          v76.i64[1] = v75.u32[0];
          *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v71.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), 4uLL);
          v77.i64[1] = v71.u32[0];
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v73, v27), (int8x16_t)vcgeq_f32(v28, v74)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v86, v77), v85, v72), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v76), v75, v84)))));
          if (vuzp1_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v71.i8).u32[0] == -1)
          {
LABEL_33:
            float32x4_t v90 = v28;
            float32x4_t v92 = v27;
            if (!(**a9)(a9, &v93, a2 + 16 * v66))
            {
              uint64_t v81 = 0;
              goto LABEL_41;
            }
            float v78 = v93;
            float32x4_t v20 = v87;
            float32x4_t v18 = v88;
            float32x4_t v28 = v90;
            float32x4_t v27 = v92;
            if (v93 < v42)
            {
              *a7 = v93;
              float32x4_t v79 = vmlaq_n_f32(v88, v87, v78);
              v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
              float32x4_t v27 = vminq_f32(v88, v79);
              float32x4_t v28 = vmaxq_f32(v88, v79);
            }
          }
        }
      }
      float32x4_t v23 = v85;
      float32x4_t v22 = v86;
      float32x4_t v30 = v84;
    }
LABEL_38:
    ;
  }
  while (v12--);
  uint64_t v81 = 1;
LABEL_41:
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v94 && v96) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v81;
}

uint64_t physx::Sq::AABBPruner::purge(physx::Sq::AABBPruner *this)
{
  uint64_t result = physx::Sq::AABBPruner::release(this);
  *((unsigned char *)this + 497) = 1;
  return result;
}

uint64_t physx::Sq::AABBPruner::setRebuildRateHint(uint64_t this, int a2)
{
  *(_DWORD *)(this + 404) = a2 - 3;
  *(_DWORD *)(this + 412) = 0;
  return this;
}

uint64_t physx::Sq::AABBPruner::commit(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 497) && *(_DWORD *)(this + 400) != 6) {
    return this;
  }
  *(unsigned char *)(this + 497) = 0;
  uint64_t v2 = *(void *)(this + 8);
  if (!v2) {
    goto LABEL_11;
  }
  if (!*(unsigned char *)(this + 496))
  {
    physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(this + 8));
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
LABEL_11:
    *(void *)(v1 + 8) = 0;
    unsigned int v6 = *(_DWORD *)(v1 + 416);
    if (v6)
    {
      uint64_t v7 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        unsigned int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
      }
      else {
        unsigned int v8 = "<allocation names disabled>";
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, 104, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 750);
      *(void *)uint64_t v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 96) = 0;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 76) = 0u;
      *(void *)(v1 + 8) = v9;
      uint64_t v22 = *(void *)(v1 + 424);
      uint64_t v23 = 0;
      LODWORD(v21) = 4;
      HIDWORD(v21) = v6;
      this = physx::Sq::AABBTree::build((_DWORD *)v9, (uint64_t)&v21);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      if (v23) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      if (*(unsigned char *)(v1 + 496))
      {
        if (v6 <= *(_DWORD *)(v1 + 64)) {
          unsigned int v10 = *(_DWORD *)(v1 + 64);
        }
        else {
          unsigned int v10 = v6;
        }
        return (uint64_t)physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)(v1 + 464), v10, *(const physx::Sq::AABBTree **)(v1 + 8));
      }
    }
    return this;
  }
  if (*(_DWORD *)(this + 400) == 6)
  {
    physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(this + 8));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    if (*(void *)(v1 + 56)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 400) = 0;
    unsigned int v3 = *(_DWORD *)(v1 + 68);
    unsigned int v4 = *(_DWORD *)(v1 + 404);
    if (v3 <= v4)
    {
      if (v3 >= v4)
      {
LABEL_28:
        uint64_t v11 = *(const physx::Sq::AABBTree **)(v1 + 48);
        *(void *)(v1 + 8) = v11;
        *(void *)(v1 + 48) = 0;
        int v12 = (void *)(v1 + 464);
        if (*(_DWORD *)(v1 + 416) <= *(_DWORD *)(v1 + 64)) {
          unsigned int v13 = *(_DWORD *)(v1 + 64);
        }
        else {
          unsigned int v13 = *(_DWORD *)(v1 + 416);
        }
        physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)(v1 + 464), v13, v11);
        if (*(_DWORD *)(v1 + 512))
        {
          float32x2_t v14 = *(unsigned int **)(v1 + 504);
          do
          {
            uint64_t v15 = *v14;
            if (*(_DWORD *)(v1 + 472) > v15 && *(_DWORD *)(*v12 + 4 * v15) != -1)
            {
              physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v1 + 8), *(_DWORD *)(*v12 + 4 * v15));
              LODWORD(v15) = *v14;
            }
            physx::Sq::AABBTreeUpdateMap::invalidate((uint64_t *)(v1 + 464), v15, v14[1], **(void **)(v1 + 8), *(void *)(*(void *)(v1 + 8) + 16));
            v14 += 2;
          }
          while ((unint64_t)v14 < *(void *)(v1 + 504) + 8 * (unint64_t)*(unsigned int *)(v1 + 512));
        }
        *(_DWORD *)(v1 + 512) = 0;
        uint64_t v16 = *(unsigned int *)(v1 + 528);
        if (v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 4 * v16;
          do
          {
            uint64_t v19 = *(unsigned int *)(*(void *)(v1 + 520) + v17);
            if (*(_DWORD *)(v1 + 472) > v19)
            {
              unsigned int v20 = *(_DWORD *)(*v12 + 4 * v19);
              if (v20 != -1) {
                physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(v1 + 8), v20);
              }
            }
            v17 += 4;
          }
          while (v18 != v17);
        }
        *(_DWORD *)(v1 + 528) = 0;
        physx::Sq::AABBPruner::refitUpdatedAndRemoved((uint64_t *)v1);
        this = physx::Sq::ExtendedBucketPruner::removeMarkedObjects((physx::Sq::ExtendedBucketPruner *)(v1 + 80), *(_DWORD *)(v1 + 72) - 1);
        *(unsigned char *)(v1 + 498) = *(_DWORD *)(v1 + 236) + *(_DWORD *)(v1 + 164) + *(_DWORD *)(v1 + 324) != 0;
        return this;
      }
      int v5 = -1;
    }
    else
    {
      int v5 = 1;
    }
    *(_DWORD *)(v1 + 412) += v5;
    goto LABEL_28;
  }
  return (uint64_t)physx::Sq::AABBPruner::refitUpdatedAndRemoved((uint64_t *)this);
}

uint64_t *physx::Sq::AABBPruner::refitUpdatedAndRemoved(uint64_t *this)
{
  uint64_t v1 = (uint64_t *)this[1];
  if (v1)
  {
    uint64_t v2 = this;
    if (*((_DWORD *)this + 104))
    {
      physx::Sq::ExtendedBucketPruner::refitMarkedNodes((uint64_t)(this + 10), this[53]);
      uint64_t v3 = v2[53];
      return physx::Sq::AABBTree::refitMarkedNodes(v1, v3);
    }
  }
  return this;
}

void *physx::Sq::AABBTreeUpdateMap::initMap(physx::Sq::AABBTreeUpdateMap *this, unsigned int a2, const physx::Sq::AABBTree *a3)
{
  if (a2)
  {
    unsigned int v6 = a2 + (a2 >> 2);
    unsigned int v7 = *((_DWORD *)this + 3);
    int v8 = v7 & 0x7FFFFFFF;
    unsigned int v9 = (v7 >> 1) & 0x3FFFFFFF;
    if (v8 - v6 <= 0x400 || v6 >= v9) {
      unsigned int v11 = v8;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 < a2)
    {
      int v26 = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this, 0, &v26);
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, *((_DWORD *)this + 2));
      if ((*((_DWORD *)this + 3) & 0x7FFFFFFFu) < v6) {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, v6);
      }
    }
    *((_DWORD *)this + 2) = a2;
    int v12 = *(void **)this;
    uint64_t result = memset(v12, 255, 4 * a2);
    uint64_t v14 = *((unsigned int *)a3 + 16);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *((void *)a3 + 2);
      uint64_t v17 = *(void *)a3;
      do
      {
        uint64_t v18 = v16 + 28 * v15;
        unsigned int v21 = *(_DWORD *)(v18 + 24);
        uint64_t v19 = (unsigned int *)(v18 + 24);
        unint64_t v20 = v21;
        if (v21)
        {
          uint64_t v22 = (v20 >> 1) & 0xF;
          if (v22)
          {
            uint64_t v23 = v17;
            do
            {
              uint64_t v24 = *(unsigned int *)(v23 + (((unint64_t)*v19 >> 3) & 0x1FFFFFFC));
              v23 += 4;
              *((_DWORD *)v12 + v24) = v15;
              --v22;
            }
            while (v22);
          }
        }
        ++v15;
      }
      while (v15 != v14);
    }
  }
  else
  {
    int v25 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this, 0, &v25);
    return (void *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this, *((_DWORD *)this + 2));
  }
  return result;
}

float physx::Sq::AABBPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  float result = physx::Sq::PruningPool::shiftOrigin((unsigned int *)(a1 + 416), a2);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    float result = physx::Sq::AABBTree::shiftOrigin(v5, a2);
  }
  if (*(unsigned char *)(a1 + 496)) {
    physx::Sq::ExtendedBucketPruner::shiftOrigin(a1 + 80, a2);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    return physx::Sq::AABBTree::shiftOrigin(v6, a2);
  }
  return result;
}

float physx::Sq::AABBTree::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0;
    _X10 = (float *)(*(void *)(a1 + 16) + 20);
    do
    {
      if (++v3 < v2) {
        __asm { PRFM            #0, [X10,#8] }
      }
      *(float32x2_t *)(_X10 - 5) = vsub_f32(*(float32x2_t *)(_X10 - 5), *a2);
      *(_X10 - 3) = *(_X10 - 3) - a2[1].f32[0];
      *((float32x2_t *)_X10 - 1) = vsub_f32(*(float32x2_t *)(_X10 - 2), *a2);
      float result = *_X10 - a2[1].f32[0];
      *_X10 = result;
      _X10 += 7;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 && *(void *)(v6 + 16))
  {
    long long v8 = xmmword_23435FBB0;
    uint64_t v9 = 0;
    int v10 = 0;
    physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v8);
    a2[1] = a3;
    physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(void *)(v6 + 16), *(long long **)(v6 + 16), a2);
  }
  long long v8 = xmmword_23435FBB0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v8);
  a2[1] = -1;
  if (*(unsigned char *)(a1 + 496))
  {
    if (*(_DWORD *)(a1 + 236) + *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 324)) {
      return physx::Sq::ExtendedBucketPruner::visualize(a1 + 80, a2, a3);
    }
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(uint64_t a1, long long *a2, _DWORD *a3)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  char v10 = 1;
  uint64_t result = physx::Cm::operator<<(a3, (uint64_t *)&v8);
  if ((*((_DWORD *)a2 + 6) & 1) == 0)
  {
    physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(a1, a1 + 28 * (*((_DWORD *)a2 + 6) >> 1), a3);
    if (a1) {
      uint64_t v7 = a1 + 28 * (*((_DWORD *)a2 + 6) >> 1) + 28;
    }
    else {
      uint64_t v7 = 0;
    }
    return physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(a1, v7, a3);
  }
  return result;
}

BOOL physx::Sq::AABBPruner::buildStep(physx::Sq::AABBPruner *this, int a2)
{
  if (!*((unsigned char *)this + 498)) {
    return 0;
  }
  switch(*((_DWORD *)this + 100))
  {
    case 0:
      if (!a2 || ((*(uint64_t (**)(physx::Sq::AABBPruner *))(*(void *)this + 152))(this) & 1) == 0) {
        return 0;
      }
      goto LABEL_43;
    case 1:
      physx::Sq::AABBTree::progressiveBuild(*((physx::Sq::AABBTree **)this + 6), (uint64_t)this + 16, (uint64_t *)this + 5, 0, 0);
      int v5 = 0;
      *((_DWORD *)this + 100) = 2;
      *((_DWORD *)this + 17) = 0;
      unsigned int v6 = *((_DWORD *)this + 5);
      unsigned int v7 = v6;
      break;
    case 2:
      ++*((_DWORD *)this + 17);
      if (physx::Sq::AABBTree::progressiveBuild(*((physx::Sq::AABBTree **)this + 6), (uint64_t)this + 16, (uint64_t *)this + 5, 1, *((_DWORD *)this + 102) / *((_DWORD *)this + 101) + 1))goto LABEL_42; {
      int v12 = 3;
      }
LABEL_41:
      *((_DWORD *)this + 100) = v12;
LABEL_42:
      if (a2) {
        goto LABEL_43;
      }
      return *((_DWORD *)this + 100) == 6;
    case 3:
      ++*((_DWORD *)this + 17);
      *((_DWORD *)this + 100) = 4;
      if (!*((_DWORD *)this + 128)) {
        goto LABEL_42;
      }
      if (*((_DWORD *)this + 104) <= *((_DWORD *)this + 16)) {
        unsigned int v13 = *((_DWORD *)this + 16);
      }
      else {
        unsigned int v13 = *((_DWORD *)this + 104);
      }
      physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBPruner *)((char *)this + 480), v13, *((const physx::Sq::AABBTree **)this + 6));
      if (*((_DWORD *)this + 128))
      {
        uint64_t v14 = (unsigned int *)*((void *)this + 63);
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[1];
          v14 += 2;
          physx::Sq::AABBTreeUpdateMap::invalidate((uint64_t *)this + 60, v15, v16, **((void **)this + 6), *(void *)(*((void *)this + 6) + 16));
        }
        while ((unint64_t)v14 < *((void *)this + 63) + 8 * (unint64_t)*((unsigned int *)this + 128));
      }
      *((_DWORD *)this + 128) = 0;
      if (!a2) {
        return *((_DWORD *)this + 100) == 6;
      }
      goto LABEL_43;
    case 4:
      ++*((_DWORD *)this + 17);
      *((_DWORD *)this + 100) = 5;
      uint64_t v17 = (uint64_t *)*((void *)this + 6);
      unsigned int v18 = *((_DWORD *)v17 + 16);
      if (v18)
      {
        uint64_t v19 = *((void *)this + 53);
        uint64_t v20 = *v17;
        uint64_t v21 = v17[2];
        int32x4_t v22 = vdupq_n_s32(0x5A60B17Fu);
        int32x4_t v23 = vdupq_n_s32(0xDA60B17F);
        do
        {
          _X15 = (float32x4_t *)(v21 + 28 * --v18);
          if (v18) {
            __asm { PRFUM           #0, [X15,#-0x1C] }
          }
          unint64_t v29 = *(unsigned int *)(v21 + 28 * v18 + 24);
          if (v29)
          {
            unsigned int v35 = (v29 >> 1) & 0xF;
            float32x4_t v34 = (float32x4_t)v23;
            float32x4_t v31 = (float32x4_t)v22;
            if (v35)
            {
              float32x4_t v36 = (unsigned int *)(v20 + ((v29 >> 3) & 0x1FFFFFFC));
              float32x4_t v37 = (_OWORD *)(v19 + 24 * *v36);
              float32x4_t v31 = *(float32x4_t *)v37;
              float32x4_t v34 = *(float32x4_t *)((char *)v37 + 12);
              if (v35 != 1)
              {
                float32x4_t v38 = v36 + 1;
                uint64_t v39 = 4 * v35 - 4;
                do
                {
                  unsigned int v40 = *v38++;
                  uint64_t v41 = v19 + 24 * v40;
                  float32x4_t v31 = vminq_f32(v31, *(float32x4_t *)v41);
                  float32x4_t v34 = vmaxq_f32(v34, *(float32x4_t *)(v41 + 12));
                  v39 -= 4;
                }
                while (v39);
              }
            }
          }
          else
          {
            uint64_t v30 = v21 + 28 * (*(_DWORD *)(v21 + 28 * v18 + 24) >> 1);
            float32x4_t v31 = vminq_f32(*(float32x4_t *)v30, *(float32x4_t *)(v30 + 28));
            v32.i32[0] = HIDWORD(*(_OWORD *)v30);
            v32.i32[1] = *(_DWORD *)(v30 + 16);
            v32.i64[1] = *(unsigned int *)(v30 + 20);
            v33.i32[0] = HIDWORD(*(_OWORD *)(v30 + 28));
            v33.i32[1] = *(_DWORD *)(v30 + 44);
            v33.i64[1] = *(unsigned int *)(v30 + 48);
            float32x4_t v34 = vmaxq_f32(v32, v33);
          }
          v31.i32[3] = v34.i32[0];
          *_X15 = v31;
          _X15[1].i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL).u64[0];
        }
        while (v18);
      }
      goto LABEL_42;
    case 5:
      int v12 = 6;
      goto LABEL_41;
    default:
      goto LABEL_42;
  }
  while (v7 >= 2)
  {
    v7 >>= 1;
    if (++v5 == 32)
    {
      int v5 = -1;
      break;
    }
  }
  unsigned int v8 = v5 * v6;
  uint64_t v9 = *((void *)this + 1);
  if (v9) {
    LODWORD(v9) = *(_DWORD *)(v9 + 68);
  }
  if (v8 <= 2 * (int)v9 && v8 >= v9 >> 1)
  {
    int v11 = *((_DWORD *)this + 103);
  }
  else
  {
    int v11 = 0;
    *((_DWORD *)this + 103) = 0;
    LODWORD(v9) = v8;
  }
  *((_DWORD *)this + 102) = (v9 + v11 * v6) & ~((int)(v9 + v11 * v6) >> 31);
  if (a2) {
LABEL_43:
  }
    *((unsigned char *)this + 497) = 1;
  return *((_DWORD *)this + 100) == 6;
}

uint64_t physx::Sq::AABBTree::progressiveBuild(physx::Sq::AABBTree *this, uint64_t a2, uint64_t *a3, int a4, unsigned int a5)
{
  if (a4 == 1)
  {
    if (*(_DWORD *)(*((void *)this + 9) + 8))
    {
      if (a5)
      {
        for (unsigned int i = 0; i < a5; i += v23)
        {
          uint64_t v15 = *((void *)this + 9);
          int v16 = *(_DWORD *)(v15 + 8);
          if (!v16) {
            break;
          }
          uint64_t v17 = *(unsigned int *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = v17 + 1;
          unsigned int v18 = *(float32x4_t **)(*(void *)v15 + 8 * v17);
          if (v17 + 1 == v16)
          {
            *(_DWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
          }
          physx::Gu::AABBTreeBuildNode::subdivide(v18, a2, a3, (uint64_t)this + 24, *(void *)this);
          uint64_t v19 = v18[1].i64[1];
          if (v19)
          {
            uint64_t v25 = v19 + 40;
            unint64_t v20 = *(unsigned int *)(v15 + 8);
            unint64_t v21 = *(_DWORD *)(v15 + 12) & 0x7FFFFFFF;
            if (v21 <= v20)
            {
              physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v15, &v25);
              unint64_t v22 = *(unsigned int *)(v15 + 8);
              unint64_t v21 = *(_DWORD *)(v15 + 12) & 0x7FFFFFFF;
            }
            else
            {
              *(void *)(*(void *)v15 + 8 * v20) = v19 + 40;
              unint64_t v22 = v20 + 1;
              *(_DWORD *)(v15 + 8) = v20 + 1;
            }
            uint64_t v25 = v19;
            if (v21 <= v22)
            {
              physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v15, &v25);
            }
            else
            {
              *(void *)(*(void *)v15 + 8 * v22) = v19;
              *(_DWORD *)(v15 + 8) = v22 + 1;
            }
          }
          __int32 v23 = v18[2].i32[1];
          *((_DWORD *)a3 + 1) += v23;
        }
      }
      return 1;
    }
    else
    {
      physx::Sq::AABBTree::buildEnd((uint64_t)this, a2, a3);
      uint64_t v24 = *((void *)this + 9);
      if (v24)
      {
        physx::IG::HandleManager<unsigned int>::~HandleManager(*((void *)this + 9));
        (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v24);
      }
      uint64_t result = 0;
      *((void *)this + 9) = 0;
    }
  }
  else if (!a4 {
         && (int v8 = *(_DWORD *)(a2 + 4)) != 0
  }
         && (physx::Sq::AABBTree::release(this, 1),
             *((_DWORD *)this + 2) = v8,
             physx::Gu::initAABBTreeBuild(a2, (physx::Sq::AABBTree *)((char *)this + 24), a3, (uint64_t *)this)))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      char v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::FIFOStack>::getName() [T = physx::Sq::FIFOStack]";
    }
    else {
      char v10 = "<allocation names disabled>";
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 24, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 281);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *((void *)this + 9) = v11;
    uint64_t v25 = *((void *)this + 3);
    physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(v11, &v25);
    return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::prepareBuild(physx::Sq::AABBPruner *this)
{
  if (!*((unsigned char *)this + 498)) {
    return 0;
  }
  if (*((_DWORD *)this + 100)) {
    return 1;
  }
  int v3 = *((_DWORD *)this + 104);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 6));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
  }
  else {
    unsigned int v6 = "<allocation names disabled>";
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 104, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 691);
  int v8 = 0;
  *(void *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 76) = 0u;
  *((void *)this + 6) = v7;
  *((_DWORD *)this + 16) = v3;
  if (v3 != -1) {
    int v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBPruner.cpp", 695);
  *((void *)this + 7) = v8;
  memcpy(v8, *((const void **)this + 53), (24 * v3));
  ++*((_DWORD *)this + 18);
  *((int8x8_t *)this + 11) = vbic_s8((int8x8_t)0x100000001, *(int8x8_t *)((char *)this + 88));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 16);
  *((void *)this + 3) = *((void *)this + 7);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 4) = 4;
  *((_DWORD *)this + 5) = v9;
  *((void *)this + 5) = 0;
  uint64_t result = 1;
  *((_DWORD *)this + 100) = 1;
  return result;
}

BOOL physx::Sq::AABBTree::build(_DWORD *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    physx::Sq::AABBTree::release((physx::Sq::AABBTree *)a1, 1);
    uint64_t v6 = 0;
    a1[2] = v2;
    physx::Gu::buildAABBTree(a2, (physx::Gu::NodeAllocator *)(a1 + 6), &v6, (uint64_t *)a1);
    physx::Sq::AABBTree::buildEnd((uint64_t)a1, a2, &v6);
  }
  return v2 != 0;
}

uint64_t *physx::Sq::AABBTree::refitMarkedNodes(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[10];
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)result + 24);
    int v4 = v3 + 1;
    if (v3 != -1)
    {
      uint64_t v5 = *result;
      uint64_t v6 = result[2];
      int32x4_t v7 = vdupq_n_s32(0x5A60B17Fu);
      int32x4_t v8 = vdupq_n_s32(0xDA60B17F);
      do
      {
        uint64_t v9 = v3;
        int v10 = *(_DWORD *)(v2 + 4 * v3);
        if (v10)
        {
          unsigned int v11 = 32 * v4;
          unsigned int v12 = 0x80000000;
          int v13 = 31;
          do
          {
            int v14 = v13;
            _X2 = (float32x4_t *)(v6 + 28 * --v11);
            __asm { PRFM            #0, [X2] }
            if ((v12 & v10) != 0)
            {
              unint64_t v21 = *(unsigned int *)(v6 + 28 * v11 + 24);
              if (v21)
              {
                unsigned int v27 = (v21 >> 1) & 0xF;
                float32x4_t v26 = (float32x4_t)v8;
                float32x4_t v23 = (float32x4_t)v7;
                if (v27)
                {
                  float32x4_t v28 = (unsigned int *)(v5 + ((v21 >> 3) & 0x1FFFFFFC));
                  unint64_t v29 = (_OWORD *)(a2 + 24 * *v28);
                  float32x4_t v23 = *(float32x4_t *)v29;
                  float32x4_t v26 = *(float32x4_t *)((char *)v29 + 12);
                  if (v27 != 1)
                  {
                    uint64_t v30 = v28 + 1;
                    uint64_t v31 = 4 * v27 - 4;
                    do
                    {
                      unsigned int v32 = *v30++;
                      uint64_t v33 = a2 + 24 * v32;
                      float32x4_t v23 = vminq_f32(v23, *(float32x4_t *)v33);
                      float32x4_t v26 = vmaxq_f32(v26, *(float32x4_t *)(v33 + 12));
                      v31 -= 4;
                    }
                    while (v31);
                  }
                }
              }
              else
              {
                uint64_t v22 = v6 + 28 * (*(_DWORD *)(v6 + 28 * v11 + 24) >> 1);
                float32x4_t v23 = vminq_f32(*(float32x4_t *)v22, *(float32x4_t *)(v22 + 28));
                v24.i32[0] = HIDWORD(*(_OWORD *)v22);
                v24.i32[1] = *(_DWORD *)(v22 + 16);
                v24.i64[1] = *(unsigned int *)(v22 + 20);
                v25.i32[0] = HIDWORD(*(_OWORD *)(v22 + 28));
                v25.i32[1] = *(_DWORD *)(v22 + 44);
                v25.i64[1] = *(unsigned int *)(v22 + 48);
                float32x4_t v26 = vmaxq_f32(v24, v25);
              }
              v23.i32[3] = v26.i32[0];
              *_X2 = v23;
              _X2[1].i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
            }
            v12 >>= 1;
            int v13 = v14 - 1;
          }
          while (v14);
          *(_DWORD *)(v2 + 4 * v9) = 0;
        }
        uint64_t v3 = v9 - 1;
        int v4 = v9;
      }
      while (v9);
    }
    *((_DWORD *)result + 24) = 0;
  }
  return result;
}

int32x2_t *physx::Sq::AABBPruner::merge(int32x2_t *this, void *a2)
{
  uint64_t v2 = (uint64_t)this[1];
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a2 + 4);
    int v4 = this[52].i32[0] - v3;
    int v5 = *(_DWORD *)a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[3];
    unsigned int v31 = *(_DWORD *)a2;
    uint64_t v32 = v6;
    int v33 = v3;
    uint64_t v34 = v7;
    int v35 = v4;
    if (this[62].i8[0])
    {
      return (int32x2_t *)physx::Sq::ExtendedBucketPruner::addTree(this + 10, (uint64_t)&v31, this[9].u32[0]);
    }
    else
    {
      int v8 = *(_DWORD *)(v2 + 8);
      if (v8 + v3)
      {
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v8 + v3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 840);
        int v8 = *(_DWORD *)(v2 + 8);
      }
      else
      {
        uint64_t v9 = 0;
      }
      memcpy(v9, *(const void **)v2, (4 * v8));
      if (*(void *)v2) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *(void *)uint64_t v2 = v9;
      *(_DWORD *)(v2 + 68) += v3;
      if (v3)
      {
        for (unint64_t i = 0; i < v3; ++i)
          *((_DWORD *)v9 + (i + *(_DWORD *)(v2 + 8))) = *(_DWORD *)(v7 + 4 * i) + v4;
      }
      unsigned int v11 = *(_DWORD *)(v2 + 64) + v5 + 1;
      if ((v11 & 0x1F) != 0) {
        unsigned int v12 = (v11 >> 5) + 1;
      }
      else {
        unsigned int v12 = v11 >> 5;
      }
      if (v12 > *(_DWORD *)(v2 + 88))
      {
        int v13 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 337);
        bzero(&v13[4 * *(unsigned int *)(v2 + 88)], 4 * (v12 - *(_DWORD *)(v2 + 88)));
        memcpy(v13, *(const void **)(v2 + 80), (4 * *(_DWORD *)(v2 + 88)));
        if (*(void *)(v2 + 80)) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        *(void *)(v2 + 80) = v13;
        *(_DWORD *)(v2 + 88) = v12;
      }
      if (!*(void *)(v2 + 56))
      {
        uint64_t v14 = *(unsigned int *)(v2 + 64);
        if (v14) {
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
        }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 859);
        else {
          uint64_t v15 = 0;
        }
        *(void *)(v2 + 56) = v15;
        _createParentArray(v15, *(void *)(v2 + 16), *(void *)(v2 + 16), *(void *)(v2 + 16));
      }
      uint64_t v16 = *(void *)(v2 + 16);
      float v17 = *(float *)v6;
      if (*(float *)v16 <= *(float *)v6)
      {
        float v18 = *(float *)(v6 + 4);
        if (*(float *)(v16 + 4) <= v18)
        {
          float v19 = *(float *)(v6 + 8);
          if (*(float *)(v16 + 8) <= v19)
          {
            float v20 = *(float *)(v6 + 12);
            if (*(float *)(v16 + 12) >= v20)
            {
              float v21 = *(float *)(v6 + 16);
              if (*(float *)(v16 + 16) >= v21)
              {
                float v22 = *(float *)(v6 + 20);
                if (*(float *)(v16 + 20) >= v22)
                {
                  unsigned int v23 = *(_DWORD *)(v16 + 24);
                  if ((v23 & 1) == 0)
                  {
                    unsigned int v24 = 0;
                    uint64_t v25 = *(void *)(v2 + 16);
                    while (1)
                    {
                      unsigned int v26 = v23 >> 1;
                      uint64_t v27 = v16 + 28 * (v23 >> 1);
                      if (*(float *)v27 > v17
                        || *(float *)(v27 + 4) > v18
                        || *(float *)(v27 + 8) > v19
                        || *(float *)(v27 + 12) < v20
                        || *(float *)(v27 + 16) < v21
                        || *(float *)(v27 + 20) < v22)
                      {
                        if (*(float *)(v27 + 28) > v17
                          || *(float *)(v27 + 32) > v18
                          || *(float *)(v27 + 36) > v19
                          || *(float *)(v27 + 40) < v20
                          || *(float *)(v27 + 44) < v21
                          || *(float *)(v27 + 48) < v22)
                        {
                          if (v23) {
                            this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeLeaf(v2, v25, &v31, v24);
                          }
                          else {
                            this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeNode(v2, v25, &v31, v24);
                          }
                          goto LABEL_54;
                        }
                        ++v26;
                        v27 += 28;
                      }
                      unsigned int v23 = *(_DWORD *)(v27 + 24);
                      uint64_t v25 = v27;
                      unsigned int v24 = v26;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(unsigned char *)(v16 + 24)) {
        this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeLeaf(v2, v16, &v31, 0);
      }
      else {
        this = (int32x2_t *)physx::Sq::AABBTree::mergeRuntimeNode(v2, v16, &v31, 0);
      }
      uint64_t v28 = *(void *)(v2 + 16);
      float v29 = *(float *)(v28 + 8);
      if (v29 >= *(float *)(v6 + 8)) {
        float v29 = *(float *)(v6 + 8);
      }
      *(int8x8_t *)uint64_t v28 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6, *(float32x2_t *)v28), *(int8x8_t *)v28, *(int8x8_t *)v6);
      *(float *)(v28 + 8) = v29;
      float v30 = *(float *)(v28 + 20);
      if (v30 <= *(float *)(v6 + 20)) {
        float v30 = *(float *)(v6 + 20);
      }
      *(int8x8_t *)(v28 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v28 + 12), *(float32x2_t *)(v6 + 12)), *(int8x8_t *)(v28 + 12), *(int8x8_t *)(v6 + 12));
      *(float *)(v28 + 20) = v30;
LABEL_54:
      *(_DWORD *)(v2 + 8) += v3;
    }
  }
  return this;
}

uint64_t **flatten(uint64_t **result, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 4);
  if (v2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    int v5 = result[1];
    do
    {
      uint64_t result = (uint64_t **)&v5[2 * v3];
      uint64_t v6 = *((unsigned int *)result + 2);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t result = (uint64_t **)*result;
        do
        {
          int v8 = (uint64_t *)&result[5 * v7];
          uint64_t v9 = (uint64_t *)(a2 + 28 * v4);
          *uint64_t v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          unint64_t v10 = v8[3];
          if (v10)
          {
            int v11 = 0;
            unsigned int v12 = (unsigned int *)(v5 + 1);
            uint64_t v13 = v2;
            do
            {
              unint64_t v14 = *((void *)v12 - 1);
              int v15 = *v12;
              unint64_t v16 = v14 + 40 * *v12;
              BOOL v18 = v10 >= v14;
              unint64_t v17 = v10 - v14;
              BOOL v18 = !v18 || v10 >= v16;
              if (!v18)
              {
                int v20 = -858993459 * (v17 >> 3);
                goto LABEL_15;
              }
              v12 += 4;
              v11 += v15;
              --v13;
            }
            while (v13);
            int v20 = -1;
LABEL_15:
            int v19 = 2 * (v20 + v11);
          }
          else
          {
            int v19 = (32 * LODWORD(result[5 * v7 + 4])) | (2 * (HIDWORD(result[5 * v7 + 4]) & 0xF)) | 1;
          }
          *(_DWORD *)(a2 + 28 * v4++ + 24) = v19;
          ++v7;
        }
        while (v7 != v6);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void physx::Sq::AABBTree::~AABBTree(physx::Sq::AABBTree *this)
{
  if (*((void *)this + 10)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *((void *)this + 1physx::Sq::AABBTree::release(this, 0) = 0;
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Sq::AABBTree *)((char *)this + 24));
}

void physx::Sq::AABBTree::release(physx::Sq::AABBTree *this, int a2)
{
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    physx::IG::HandleManager<unsigned int>::~HandleManager(*((void *)this + 9));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  *((void *)this + 9) = 0;
  if (*((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 7) = 0;
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5 - 16);
  }
  *((void *)this + 2) = 0;
  physx::Gu::NodeAllocator::release((physx::Sq::AABBTree *)((char *)this + 24));
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)this = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 2) = 0;
  if (a2) {
    bzero(*((void **)this + 10), (4 * *((_DWORD *)this + 22)));
  }
  *((_DWORD *)this + 24) = 0;
}

void *physx::Sq::AABBTree::initTree(uint64_t a1, const void **a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 4);
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 168);
    LODWORD(v4) = *((_DWORD *)a2 + 4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v4;
  memcpy(v5, a2[3], (4 * v4));
  uint64_t v6 = *(unsigned int *)a2;
  uint64_t v7 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::allocate((uint64_t)&v10, 28 * v6 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 173);
  *uint64_t v7 = 28;
  v7[1] = v6;
  v7 += 2;
  *(void *)(a1 + 16) = v7;
  int v8 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)a2;
  return memcpy(v7, a2[1], (28 * v8));
}

uint64_t physx::Sq::AABBTree::buildEnd(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(void *)(a2 + 16)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *a3;
  *(void *)(a1 + 64) = *a3;
  uint64_t v7 = v6;
  int v8 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::allocate((uint64_t)&v11, 28 * v6 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 209);
  *int v8 = 28;
  v8[1] = v7;
  *(void *)(a1 + 16) = v8 + 2;
  uint64_t v9 = (uint64_t **)(a1 + 24);
  flatten(v9, (uint64_t)(v8 + 2));
  return physx::Gu::NodeAllocator::release((physx::Gu::NodeAllocator *)v9);
}

uint64_t physx::Sq::BitArray::init(physx::Sq::BitArray *this, unsigned int a2)
{
  unsigned int v3 = a2 >> 5;
  if ((a2 & 0x1F) != 0) {
    ++v3;
  }
  *((_DWORD *)this + 2) = v3;
  if (*(void *)this)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    unsigned int v3 = *((_DWORD *)this + 2);
  }
  if (v3)
  {
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 325);
    size_t v5 = (4 * *((_DWORD *)this + 2));
  }
  else
  {
    size_t v5 = 0;
    uint64_t v4 = 0;
  }
  *(void *)this = v4;
  bzero(v4, v5);
  return 1;
}

uint64_t _createParentArray(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(result + 0xFFFFFFFEDB6DB6DCLL * ((unint64_t)(a3 - a4) >> 2)) = -1227133513
                                                                                                * ((unint64_t)(a2 - a4) >> 2);
  size_t v5 = (unsigned int *)(a3 + 24);
  unsigned int v4 = *(_DWORD *)(a3 + 24);
  if ((v4 & 1) == 0)
  {
    uint64_t v7 = a3;
    uint64_t v8 = result;
    uint64_t v9 = a4 + 28;
    do
    {
      uint64_t result = _createParentArray(v8, v7, a4 + 28 * (v4 >> 1), a4);
      unint64_t v10 = (unint64_t)*v5 >> 1;
      unint64_t v11 = v7 - a4;
      uint64_t v7 = v9 + 28 * v10;
      if (a4) {
        uint64_t v12 = v9 + 28 * v10;
      }
      else {
        uint64_t v12 = 0;
      }
      *(_DWORD *)(v8 + 0xFFFFFFFEDB6DB6DCLL * ((unint64_t)(v12 - a4) >> 2)) = -1227133513
                                                                                                 * (v11 >> 2);
      unsigned int v13 = *(_DWORD *)(v12 + 24);
      size_t v5 = (unsigned int *)(v12 + 24);
      unsigned int v4 = v13;
    }
    while ((v13 & 1) == 0);
  }
  return result;
}

uint64_t physx::Sq::AABBTree::addRuntimeChilds(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  if (*a3)
  {
    unint64_t v3 = 0;
    unsigned int v4 = *a2;
    uint64_t v5 = *(void *)(result + 16);
    uint64_t v6 = *((void *)a3 + 1) + 16;
    unsigned int v7 = *a2;
    do
    {
      unsigned int v8 = v7;
      uint64_t v9 = (void *)(v5 + 28 * v7);
      *uint64_t v9 = *(void *)(v6 - 16);
      v9[1] = *(void *)(v6 - 8);
      v9[2] = *(void *)v6;
      unsigned int v10 = *(_DWORD *)(v6 + 8);
      if (v10)
      {
        *(_DWORD *)(v5 + 28 * v8 + 24) = *(_DWORD *)(v6 + 8) & 0x1E | (*(_DWORD *)(v6 + 8)
                                                                       + 32 * *(_DWORD *)(result + 8)) & 0xFFFFFFE0 | 1;
      }
      else
      {
        unsigned int v11 = v4 + (v10 >> 1);
        *(_DWORD *)(v5 + 28 * v8 + 24) = 2 * v11;
        uint64_t v12 = *(void *)(result + 56);
        *(_DWORD *)(v12 + 4 * v11) = *a2;
        *(_DWORD *)(v12 + 4 * (v11 + 1)) = *a2;
      }
      v6 += 28;
      unsigned int v7 = *a2 + 1;
      *a2 = v7;
      ++v3;
    }
    while (v3 < *a3);
  }
  return result;
}

uint64_t physx::Sq::AABBTree::mergeRuntimeLeaf(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v8 = *(_DWORD *)(a1 + 64) + *a3 + 1;
  uint64_t v9 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::allocate((uint64_t)&v21, 28 * v8 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 659);
  *uint64_t v9 = 28;
  v9[1] = v8;
  unsigned int v10 = (char *)(v9 + 2);
  int v11 = *(_DWORD *)(a1 + 64);
  if (v11 + *a3 == -1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v11 + *a3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 660);
    int v11 = *(_DWORD *)(a1 + 64);
  }
  memcpy(v10, *(const void **)(a1 + 16), (28 * v11));
  memcpy(v12, *(const void **)(a1 + 56), (4 * *(_DWORD *)(a1 + 64)));
  unint64_t v13 = *(unsigned int *)(a1 + 64);
  unint64_t v14 = &v10[28 * v13];
  *(void *)unint64_t v14 = *(void *)a2;
  *((void *)v14 + 1) = *(void *)(a2 + 8);
  *((void *)v14 + 2) = *(void *)(a2 + 16);
  *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)v12 + v13) = a4;
  uint64_t v15 = *(void *)(a1 + 80);
  if (v15 && ((*(_DWORD *)(v15 + 4 * (a4 >> 5)) >> a4) & 1) != 0)
  {
    *(_DWORD *)(v15 + 4 * (v13 >> 5)) |= 1 << v13;
    unsigned int v16 = *(_DWORD *)(a1 + 96);
    if (v16 <= (v13 >> 5)) {
      unsigned int v16 = v13 >> 5;
    }
    *(_DWORD *)(a1 + 96) = v16;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v17 - 16);
  }
  *(void *)(a1 + 16) = v10;
  if (*(void *)(a1 + 56)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 56) = v12;
  unsigned int v20 = v13 + 1;
  uint64_t result = physx::Sq::AABBTree::addRuntimeChilds(a1, &v20, a3);
  *(_DWORD *)(*(void *)(a1 + 56) + 4 * (*(_DWORD *)(a1 + 64) + 1)) = a4;
  int v19 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(*(void *)(a1 + 16) + 28 * a4 + 24) = 2 * v19;
  *(_DWORD *)(a1 + 64) = v19 + *a3 + 1;
  return result;
}

uint64_t physx::Sq::AABBTree::mergeRuntimeNode(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unint64_t v8 = *(unsigned int *)(a2 + 24);
  unint64_t v9 = v8 >> 1;
  uint64_t v10 = *(_DWORD *)(a1 + 64) + *a3 + 1;
  int v11 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::allocate((uint64_t)&v27, 28 * v10 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 725);
  *int v11 = 28;
  v11[1] = v10;
  uint64_t v12 = (char *)(v11 + 2);
  if (*(_DWORD *)(a1 + 64) + *a3 == -1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (*(_DWORD *)(a1 + 64) + *a3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqAABBTree.cpp", 726);
  }
  memcpy(v12, *(const void **)(a1 + 16), (28 * v9));
  memcpy(v13, *(const void **)(a1 + 56), (4 * v9));
  unsigned int v26 = v8 >> 1;
  unint64_t v14 = &v12[28 * v9];
  *(void *)unint64_t v14 = *(void *)a2;
  *((void *)v14 + 1) = *(void *)(a2 + 8);
  *((void *)v14 + 2) = *(void *)(a2 + 16);
  *((_DWORD *)v14 + 6) = 2 * (*a3 + (*(_DWORD *)(a2 + 24) >> 1)) + 2;
  uint64_t v15 = &v13[4 * v9];
  *(_DWORD *)uint64_t v15 = a4;
  uint64_t v16 = *(void *)(a1 + 80);
  if (v16 && ((*(_DWORD *)(v16 + 4 * (a4 >> 5)) >> a4) & 1) != 0)
  {
    *(_DWORD *)(v16 + 4 * (v8 >> 6)) |= 1 << (v8 >> 1);
    unsigned int v17 = *(_DWORD *)(a1 + 96);
    if (v17 <= (v8 >> 6)) {
      unsigned int v17 = v8 >> 6;
    }
    *(_DWORD *)(a1 + 96) = v17;
  }
  int v18 = *(_DWORD *)(a1 + 64) - v9;
  if (v18)
  {
    memcpy(&v14[28 * *a3 + 28], (const void *)(*(void *)(a1 + 16) + 28 * v9), (28 * v18));
    memcpy(&v15[4 * *a3 + 4], (const void *)(*(void *)(a1 + 56) + 4 * v9), (4 * (*(_DWORD *)(a1 + 64) - v9)));
  }
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19 - 16);
  }
  *(void *)(a1 + 16) = v12;
  if (*(void *)(a1 + 56)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 56) = v13;
  unsigned int v26 = v9 + 1;
  uint64_t result = physx::Sq::AABBTree::addRuntimeChilds(a1, &v26, a3);
  *(_DWORD *)(a1 + 64) += *a3 + 1;
  uint64_t v21 = *(void *)(a1 + 56);
  *(_DWORD *)(v21 + 4 * (v9 + 1)) = a4;
  unint64_t v22 = *a3 + v9 + 1;
  if (v22 < *(_DWORD *)(a1 + 64))
  {
    uint64_t v23 = *(void *)(a1 + 16);
    unsigned int v24 = (unsigned int *)(v23 + 28 * v22 + 24);
    do
    {
      unsigned int v25 = *(_DWORD *)(v21 + 4 * v22);
      if (v25 == a4)
      {
        *(_DWORD *)(v21 + 4 * v22) = v9;
      }
      else if (v25 >= v9)
      {
        *(_DWORD *)(v21 + 4 * v22) = v25 + *a3 + 1;
      }
      else if (v22)
      {
        *(_DWORD *)(v23 + 28 * v25 + 24) = (*(_DWORD *)(v23 + 28 * v25 + 24) + 2 * *a3 + 2) & 0xFFFFFFFE;
      }
      if ((*v24 & 1) == 0) {
        *unsigned int v24 = (*v24 + 2 * *a3 + 2) & 0xFFFFFFFE;
      }
      ++v22;
      v24 += 7;
    }
    while (v22 < *(unsigned int *)(a1 + 64));
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

float32x4_t *physx::Sq::IncrementalAABBTree::insert(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (_OWORD *)(a3 + 24 * a2);
  float32x4_t v7 = *(float32x4_t *)v6;
  v7.i32[3] = 0;
  float32x4_t v8 = *(float32x4_t *)((char *)v6 + 12);
  v8.i32[3] = 0;
  float32x4_t v97 = v8;
  float32x4_t v98 = v7;
  unint64_t v9 = *(float32x4_t **)(a1 + 1144);
  if (v9)
  {
    uint64_t v12 = (float32x4_t *)v9[3].i64[0];
    if (v12)
    {
      float32x4_t v13 = vaddq_f32(v7, v8);
      uint64_t v15 = &v9[2].i8[8];
      unint64_t v14 = (float32x4_t *)v9[2].i64[1];
      float32x4_t v16 = v14[1];
      float32x4_t v17 = v12[1];
      float32x4_t v18 = vsubq_f32(v13, vaddq_f32(v16, *v14));
      float32x4_t v19 = vsubq_f32(v13, vaddq_f32(v17, *v12));
      float32x4_t v20 = vsubq_f32(v16, *v14);
      float32x4_t v21 = vsubq_f32(v17, *v12);
      float32x4_t v22 = vmulq_laneq_f32(vmulq_lane_f32(v20, *(float32x2_t *)v20.f32, 1), v20, 2);
      float32x4_t v23 = vmulq_laneq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v21.f32, 1), v21, 2);
      BOOL v24 = (float)(3.0 * v22.f32[0]) < v23.f32[0];
      int v25 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v22, v23))).u16[0];
      if ((float)(3.0 * v23.f32[0]) < v22.f32[0]) {
        BOOL v24 = 1;
      }
      unsigned int v26 = v24 & v25;
      v18.i32[3] = 0;
      float32x4_t v27 = vmulq_f32(v18, v18);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      v19.i32[3] = 0;
      float32x4_t v28 = vmulq_f32(v19, v19);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      unsigned __int32 v29 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32)), 0), *(int8x8_t *)v13.f32).u32[0];
      if (v24)
      {
        char v30 = *(void *)(*(void *)&v15[8 * v26] + 48) == 0;
        if (*(void *)(*(void *)&v15[8 * v26] + 48)) {
          uint64_t v31 = *(void *)(a1 + 1144);
        }
        else {
          uint64_t v31 = 0;
        }
      }
      else
      {
        uint64_t v31 = 0;
        char v30 = 1;
      }
      uint64_t v34 = *(float32x4_t **)&v15[8 * (v29 == -1)];
      float v96 = v34;
      for (unint64_t i = (float32x4_t *)v34[3].i64[0]; i; unint64_t i = (float32x4_t *)v34[3].i64[0])
      {
        float32x4_t v44 = &v34[2].i8[8];
        int8x16_t v45 = (float32x4_t *)v34[2].i64[1];
        _X14 = v45[2].i64[1];
        __asm { PRFM            #0, [X14] }
        _X14 = i[2].i64[1];
        __asm { PRFM            #0, [X14] }
        float32x4_t v54 = *v45;
        float32x4_t v53 = v45[1];
        float32x4_t v56 = *i;
        float32x4_t v55 = i[1];
        if (v30)
        {
          float32x4_t v57 = vsubq_f32(v53, v54);
          float32x4_t v58 = vsubq_f32(v55, v56);
          float32x4_t v59 = vmulq_laneq_f32(vmulq_lane_f32(v57, *(float32x2_t *)v57.f32, 1), v57, 2);
          float32x4_t v60 = vmulq_laneq_f32(vmulq_lane_f32(v58, *(float32x2_t *)v58.f32, 1), v58, 2);
          _NF = (float)(3.0 * v59.f32[0]) < v60.f32[0] || (float)(3.0 * v60.f32[0]) < v59.f32[0];
          uint64_t v62 = *(void *)&vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v59, v60))) & 1;
          if (_NF) {
            unsigned int v26 = v62;
          }
          if (_NF) {
            LOBYTE(v24) = 1;
          }
        }
        if (!v31)
        {
          if (v24)
          {
            if (*(void *)(*(void *)&v44[8 * v26] + 48)) {
              uint64_t v31 = (uint64_t)v34;
            }
            else {
              uint64_t v31 = 0;
            }
            v30 &= *(void *)(*(void *)&v44[8 * v26] + 48) == 0;
          }
          else
          {
            uint64_t v31 = 0;
          }
        }
        float32x4_t v63 = vsubq_f32(v13, vaddq_f32(v53, v54));
        float32x4_t v64 = vsubq_f32(v13, vaddq_f32(v55, v56));
        v63.i32[3] = 0;
        float32x4_t v65 = vmulq_f32(v63, v63);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        v64.i32[3] = 0;
        float32x4_t v66 = vmulq_f32(v64, v64);
        v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
        uint64_t v34 = *(float32x4_t **)&v44[8
                                  * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32)), 0), *(int8x8_t *)v13.f32).u32[0] == -1)];
        float v96 = v34;
      }
      unsigned int v67 = (_DWORD *)v34[2].i64[1];
      uint64_t v68 = *v67;
      if (v68 > 3)
      {
        int v77 = *(_DWORD *)(a4 + 8);
        if (v77 && **(float32x4_t ***)a4 == v34) {
          *(_DWORD *)(a4 + 8) = v77 - 1;
        }
        physx::Sq::IncrementalAABBTree::splitLeafNode(a1, v34, a2, &v98, &v97, a3);
        uint64_t v34 = v78;
        uint64_t v79 = v78[2].i64[0];
        float v80 = (void *)(v79 + 40);
        uint64_t v81 = *(unsigned int *)(a4 + 8);
        unsigned int v82 = *(_DWORD *)(a4 + 12) & 0x7FFFFFFF;
        if (v82 <= v81)
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, v80);
          unsigned int v83 = *(_DWORD *)(a4 + 8);
          unsigned int v82 = *(_DWORD *)(a4 + 12) & 0x7FFFFFFF;
        }
        else
        {
          *(void *)(*(void *)a4 + 8 * v81) = *v80;
          unsigned int v83 = v81 + 1;
          *(_DWORD *)(a4 + 8) = v83;
        }
        float32x4_t v89 = (float32x4_t **)(v79 + 48);
        if (v82 > v83)
        {
          *(void *)(*(void *)a4 + 8 * v83) = *v89;
          int v76 = v83 + 1;
          goto LABEL_67;
        }
      }
      else
      {
        *unsigned int v67 = v68 + 1;
        v67[v68 + 1] = a2;
        float32x4_t v69 = vminq_f32(*v34, v7);
        float32x4_t v70 = vmaxq_f32(v34[1], v8);
        float32x4_t *v34 = v69;
        v34[1] = v70;
        for (unsigned int j = (float32x4_t *)v34[2].i64[0]; j; unsigned int j = (float32x4_t *)j[2].i64[0])
        {
          if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*j, v69)), *(int8x8_t *)v70.f32).u32[0] & 0xFFFFFF) == 0)
          {
            int8x8_t v72 = (int8x8_t)vmovn_s32(vcgtq_f32(v70, j[1]));
            if ((vuzp1_s8(v72, v72).u32[0] & 0xFFFFFF) == 0) {
              break;
            }
          }
          float32x4_t v73 = (float32x4_t *)j[2].i64[1];
          float32x4_t v74 = (float32x4_t *)j[3].i64[0];
          float32x4_t v69 = vminq_f32(*v73, *v74);
          float32x4_t *j = v69;
          float32x4_t v70 = vmaxq_f32(v73[1], v74[1]);
          j[1] = v70;
        }
        uint64_t v75 = *(unsigned int *)(a4 + 8);
        if (v75)
        {
          if (**(float32x4_t ***)a4 == v34) {
            goto LABEL_68;
          }
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) > v75)
          {
            *(void *)(*(void *)a4 + 8 * v75) = v34;
            int v76 = v75 + 1;
LABEL_67:
            *(_DWORD *)(a4 + 8) = v76;
LABEL_68:
            if (!v31) {
              return v34;
            }
            goto LABEL_72;
          }
        }
        else if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFF) != 0)
        {
          **(void **)a4 = v34;
          int v76 = 1;
          goto LABEL_67;
        }
        float32x4_t v89 = &v96;
      }
      physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, v89);
      if (v31)
      {
LABEL_72:
        physx::Sq::IncrementalAABBTree::rotateTree(a1, v31, a4, v26, a3, 1);
        return 0;
      }
    }
    else
    {
      int v35 = (_DWORD *)v9[2].i64[1];
      uint64_t v36 = *v35;
      if (v36 > 3)
      {
        int v84 = *(_DWORD *)(a4 + 8);
        if (v84 && **(float32x4_t ***)a4 == v9) {
          *(_DWORD *)(a4 + 8) = v84 - 1;
        }
        physx::Sq::IncrementalAABBTree::splitLeafNode(a1, v9, a2, &v98, &v97, a3);
        uint64_t v34 = v85;
        float v96 = v85;
        uint64_t v86 = v85[2].i64[0];
        *(void *)(a1 + 1144) = v86;
        float32x4_t v87 = *(float32x4_t **)(v86 + 40);
        if (v87 == v85) {
          float32x4_t v87 = *(float32x4_t **)(v86 + 48);
        }
        char v95 = v87;
        uint64_t v88 = *(unsigned int *)(a4 + 8);
        if (!v87[3].i64[0])
        {
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v88)
          {
            physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, &v95);
            LODWORD(v88) = *(_DWORD *)(a4 + 8);
          }
          else
          {
            *(void *)(*(void *)a4 + 8 * v88) = v87;
            LODWORD(v88) = v88 + 1;
            *(_DWORD *)(a4 + 8) = v88;
          }
        }
        if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v88)
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a4, &v96);
          return v96;
        }
        else
        {
          *(void *)(*(void *)a4 + 8 * v88) = v34;
          *(_DWORD *)(a4 + 8) = v88 + 1;
        }
      }
      else
      {
        *int v35 = v36 + 1;
        v35[v36 + 1] = a2;
        float32x4_t v37 = vminq_f32(*v9, v7);
        float32x4_t v38 = vmaxq_f32(v9[1], v8);
        *unint64_t v9 = v37;
        v9[1] = v38;
        for (k = (float32x4_t *)v9[2].i64[0]; k; k = (float32x4_t *)k[2].i64[0])
        {
          if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*k, v37)), *(int8x8_t *)v38.f32).u32[0] & 0xFFFFFF) == 0)
          {
            int8x8_t v40 = (int8x8_t)vmovn_s32(vcgtq_f32(v38, k[1]));
            if ((vuzp1_s8(v40, v40).u32[0] & 0xFFFFFF) == 0) {
              break;
            }
          }
          uint64_t v41 = (float32x4_t *)k[2].i64[1];
          float v42 = (float32x4_t *)k[3].i64[0];
          float32x4_t v37 = vminq_f32(*v41, *v42);
          float32x4_t *k = v37;
          float32x4_t v38 = vmaxq_f32(v41[1], v42[1]);
          k[1] = v38;
        }
        return *(float32x4_t **)(a1 + 1144);
      }
    }
  }
  else
  {
    uint64_t v32 = *(void *)(a1 + 568);
    if (!v32)
    {
      float32x4_t v91 = v8;
      float32x4_t v93 = v7;
      physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(a1 + 8);
      float32x4_t v8 = v91;
      float32x4_t v7 = v93;
      uint64_t v32 = *(void *)(a1 + 568);
    }
    *(void *)(a1 + 568) = *(void *)v32;
    ++*(_DWORD *)(a1 + 556);
    *(_DWORD *)uint64_t v32 = 1;
    *(_DWORD *)(v32 + 4) = a2;
    *(void *)(v32 + 8) = 0;
    *(_DWORD *)(v32 + 16) = 0;
    int v33 = *(void **)(a1 + 1136);
    if (!v33)
    {
      float32x4_t v92 = v8;
      float32x4_t v94 = v7;
      physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
      float32x4_t v8 = v92;
      float32x4_t v7 = v94;
      int v33 = *(void **)(a1 + 1136);
    }
    *(void *)(a1 + 1136) = *v33;
    ++*(_DWORD *)(a1 + 1124);
    *(void *)(a1 + 1144) = v33;
    *(float32x4_t *)int v33 = v7;
    *(float32x4_t *)(*(void *)(a1 + 1144) + 16) = v8;
    *(void *)(*(void *)(a1 + 1144) + 4physx::Sq::AABBTree::release(this, 0) = v32;
    *(void *)(*(void *)(a1 + 1144) + 48) = 0;
    uint64_t v34 = *(float32x4_t **)(a1 + 1144);
    v34[2].i64[0] = 0;
  }
  return v34;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    float32x4_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

float32x4_t *physx::Sq::IncrementalAABBTree::update(uint64_t a1, float32x4_t *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = physx::Sq::IncrementalAABBTree::remove(a1, a2, a3, a4);
  uint64_t v12 = v9;
  if (v9 && !*(void *)(v9 + 48))
  {
    uint64_t v10 = *(unsigned int *)(a5 + 8);
    if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a5, &v12);
    }
    else
    {
      *(void *)(*(void *)a5 + 8 * v1physx::Sq::AABBTree::release(this, 0) = v9;
      *(_DWORD *)(a5 + 8) = v10 + 1;
    }
  }
  return physx::Sq::IncrementalAABBTree::insert(a1, a3, a4, a5);
}

uint64_t physx::Sq::IncrementalAABBTree::remove(uint64_t a1, float32x4_t *a2, int a3, uint64_t a4)
{
  unsigned int v4 = (float32x4_t *)a2[2].i64[1];
  uint64_t v5 = v4->u32[0];
  if (v5 < 2)
  {
    if (*(float32x4_t **)(a1 + 1144) == a2)
    {
      uint64_t result = 0;
      --*(_DWORD *)(a1 + 1124);
      a2->i64[0] = *(void *)(a1 + 1136);
      *(void *)(a1 + 1136) = a2;
      *(void *)(a1 + 1144) = 0;
    }
    else
    {
      uint64_t result = a2[2].i64[0];
      uint64_t v12 = *(float32x4_t **)(result + 40);
      float32x4_t v13 = v12;
      if (v12 == a2) {
        float32x4_t v13 = *(float32x4_t **)(result + 48);
      }
      *(float32x4_t *)(result + 16) = v13[1];
      *(float32x4_t *)uint64_t result = *v13;
      uint64_t v14 = v13[2].i64[1];
      uint64_t v15 = v13[3].i64[0];
      *(void *)(result + 4physx::Sq::AABBTree::release(this, 0) = v14;
      if (v15)
      {
        *(void *)(v14 + 32) = result;
        uint64_t v16 = v13[3].i64[0];
        *(void *)(result + 48) = v16;
        *(void *)(v16 + 32) = result;
      }
      else
      {
        *(void *)(result + 48) = 0;
      }
      char v30 = *(float32x4_t **)(result + 32);
      if (v30)
      {
        uint64_t v32 = (float32x4_t *)v30[2].i64[1];
        uint64_t v31 = (float32x4_t *)v30[3].i64[0];
        if (!v31)
        {
          uint64_t v34 = v32->u32[0];
          int v35 = (_OWORD *)(a4 + 24 * v32->u32[1]);
          float32x4_t v36 = *(float32x4_t *)v35;
          float32x4_t v37 = *(float32x4_t *)((char *)v35 + 12);
          if (v34 >= 2)
          {
            uint64_t v38 = v34 - 1;
            uint64_t v39 = &v32->i32[2];
            do
            {
              unsigned int v40 = *v39++;
              uint64_t v41 = a4 + 24 * v40;
              float32x4_t v36 = vminq_f32(v36, *(float32x4_t *)v41);
              float32x4_t v37 = vmaxq_f32(v37, *(float32x4_t *)(v41 + 12));
              --v38;
            }
            while (v38);
          }
          v36.i32[3] = 0;
          v37.i32[3] = 0;
          *char v30 = v36;
          v30[1] = v37;
          goto LABEL_32;
        }
        *char v30 = vminq_f32(*v32, *v31);
        float32x4_t v33 = vmaxq_f32(v32[1], v31[1]);
        while (1)
        {
          v30[1] = v33;
LABEL_32:
          char v30 = (float32x4_t *)v30[2].i64[0];
          if (!v30) {
            break;
          }
          float v42 = (float32x4_t *)v30[2].i64[1];
          uint64_t v43 = (float32x4_t *)v30[3].i64[0];
          float32x4_t v44 = vminq_f32(*v42, *v43);
          float32x4_t v33 = vmaxq_f32(v42[1], v43[1]);
          if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*v30, v44)), *(int8x8_t *)v33.f32).u32[0] == -1
            && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v33, v30[1])), *(int8x8_t *)v33.f32).u32[0] == -1)
          {
            break;
          }
          *char v30 = v44;
        }
      }
      int8x16_t v45 = (void *)a2[2].i64[1];
      if (v45)
      {
        --*(_DWORD *)(a1 + 556);
        *int8x16_t v45 = *(void *)(a1 + 568);
        *(void *)(a1 + 568) = v45;
      }
      if (v12)
      {
        --*(_DWORD *)(a1 + 1124);
        v12->i64[0] = *(void *)(a1 + 1136);
        *(void *)(a1 + 1136) = v12;
      }
    }
  }
  else
  {
    uint64_t v6 = v5;
    while (v6 * 4)
    {
      __int32 v7 = v4->i32[v6--];
      if (v7 == a3)
      {
        __int32 v8 = v5 - 1;
        v4->i32[0] = v8;
        *(_DWORD *)(a2[2].i64[1] + v6 * 4 + 4) = v4->i32[v8 + 1];
        unsigned int v4 = (float32x4_t *)a2[2].i64[1];
        break;
      }
    }
    uint64_t v9 = (float32x4_t *)a2[3].i64[0];
    if (v9)
    {
      *a2 = vminq_f32(*v4, *v9);
      a2[1] = vmaxq_f32(v4[1], v9[1]);
    }
    else
    {
      uint64_t v17 = v4->u32[0];
      float32x4_t v18 = (_OWORD *)(a4 + 24 * v4->u32[1]);
      float32x4_t v19 = *(float32x4_t *)v18;
      float32x4_t v20 = *(float32x4_t *)((char *)v18 + 12);
      if (v17 >= 2)
      {
        uint64_t v21 = v17 - 1;
        float32x4_t v22 = &v4->i32[2];
        do
        {
          unsigned int v23 = *v22++;
          uint64_t v24 = a4 + 24 * v23;
          float32x4_t v19 = vminq_f32(v19, *(float32x4_t *)v24);
          float32x4_t v20 = vmaxq_f32(v20, *(float32x4_t *)(v24 + 12));
          --v21;
        }
        while (v21);
      }
      v19.i32[3] = 0;
      v20.i32[3] = 0;
      *a2 = v19;
      a2[1] = v20;
    }
    for (unint64_t i = (float32x4_t *)a2[2].i64[0]; i; unint64_t i = (float32x4_t *)i[2].i64[0])
    {
      unsigned int v26 = (float32x4_t *)i[2].i64[1];
      float32x4_t v27 = (float32x4_t *)i[3].i64[0];
      float32x4_t v28 = vminq_f32(*v26, *v27);
      float32x4_t v29 = vmaxq_f32(v26[1], v27[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*i, v28)), *(int8x8_t *)v29.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v29, i[1])), *(int8x8_t *)v29.f32).u32[0] == -1)
      {
        break;
      }
      *unint64_t i = v28;
      i[1] = v29;
    }
    return 0;
  }
  return result;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, unsigned int (***a5)(void, int *, uint64_t))
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0x10000000100;
  int v9 = 1;
  char v37 = 1;
  uint64_t v38 = v36;
  v36[0] = a3;
  while (1)
  {
    int v10 = v9 - 1;
    int v11 = (float32x4_t *)v38[v9 - 1];
    float32x4_t v12 = v11[1];
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = vmulq_f32(vsubq_f32(v12, *v11), v13);
    v14.i32[3] = 0;
    float32x4_t v15 = vmulq_f32(vaddq_f32(v12, *v11), v13);
    v15.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v15, v14))
    {
      unsigned int v16 = 2 * v9;
      while (1)
      {
        int v10 = v9 - 1;
        uint64_t v17 = &v11[2].i8[8];
        int v11 = (float32x4_t *)v11[2].i64[1];
        if (!*((void *)v17 + 1)) {
          break;
        }
        v38[v10] = v11 + 4;
        if (v9 == (HIDWORD(v39) & 0x7FFFFFFF)) {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v36, v16);
        }
        float32x4_t v18 = v11[1];
        v19.i64[0] = 0x3F0000003F000000;
        v19.i64[1] = 0x3F0000003F000000;
        float32x4_t v20 = vmulq_f32(vsubq_f32(v18, *v11), v19);
        v20.i32[3] = 0;
        float32x4_t v21 = vmulq_f32(vaddq_f32(v18, *v11), v19);
        v21.i32[3] = 0;
        ++v9;
        v16 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a4, v21, v20))
        {
          int v10 = v9 - 1;
          goto LABEL_15;
        }
      }
      unsigned int v22 = v11->i32[0];
      if (v11->i32[0]) {
        break;
      }
    }
LABEL_15:
    int v9 = v10;
    if (!v10)
    {
      uint64_t v33 = 1;
      goto LABEL_18;
    }
  }
  unsigned int v23 = &v11->i32[1];
  __int32 v24 = v11->i32[0];
  while (1)
  {
    unsigned int v26 = *v23++;
    uint64_t v25 = v26;
    if (v22 < 2) {
      goto LABEL_26;
    }
    uint64_t v27 = a2 + 24 * v25;
    float32x4_t v28 = *(float32x4_t *)(v27 + 12);
    float32x4_t v29 = vaddq_f32(*(float32x4_t *)v27, v28);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    float32x4_t v31 = vmulq_f32(vsubq_f32(v28, *(float32x4_t *)v27), v30);
    float32x4_t v32 = vmulq_f32(v29, v30);
    v32.i32[3] = 0;
    v31.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v32, v31))
    {
LABEL_26:
      int v35 = 0;
      if (!(**a5)(a5, &v35, a1 + 16 * v25)) {
        break;
      }
    }
    if (!--v24) {
      goto LABEL_15;
    }
  }
  uint64_t v33 = 0;
LABEL_18:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v33;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t (***a5)(void, int *, uint64_t))
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v36 = 0x10000000100;
  unsigned int v9 = 1;
  char v34 = 1;
  int v35 = v33;
  v33[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v11 = 2 * v9--;
    float32x4_t v12 = (float32x4_t *)v35[v9];
    float32x4_t v13 = v12[1];
    float32x4_t v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    float32x4_t v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      float32x4_t v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      int8x8_t v17 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v14, a4[1]), vabdq_f32(v16, *a4)));
      if ((~vuzp1_s8(v17, v17).u32[0] & 0xFFFFFF) != 0) {
        break;
      }
      float32x4_t v18 = &v12[2].i8[8];
      float32x4_t v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((void *)v18 + 1))
      {
        unsigned int v20 = v12->i32[0];
        if (v12->i32[0])
        {
          float32x4_t v21 = &v12->i32[1];
          unsigned int v22 = v20;
          while (1)
          {
            unsigned int v24 = *v21++;
            uint64_t v23 = v24;
            if (v20 < 2
              || (uint64_t v25 = a2 + 24 * v23,
                  float32x4_t v26 = *(float32x4_t *)(v25 + 12),
                  float32x4_t v27 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)v25), v10),
                  v27.i32[3] = 0,
                  float32x4_t v28 = vmulq_f32(vaddq_f32(*(float32x4_t *)v25, v26), v10),
                  v28.i32[3] = 0,
                  *(int16x4_t *)v27.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(a4[1], v27), vabdq_f32(v28, *a4))),
                  (~vuzp1_s8(*(int8x8_t *)v27.f32, *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0))
            {
              int v32 = 0;
              int v29 = (**a5)(a5, &v32, a1 + 16 * v23);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v29) {
                break;
              }
            }
            if (!--v22) {
              goto LABEL_14;
            }
          }
          uint64_t v30 = 0;
          goto LABEL_17;
        }
        break;
      }
      v35[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v36) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v33, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v19 = v12[1];
      float32x4_t v14 = vmulq_f32(vsubq_f32(v19, *v12), v10);
      v14.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(v19, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9) {
      continue;
    }
    break;
  }
  uint64_t v30 = 1;
LABEL_17:
  if ((v36 & 0x8000000000000000) == 0 && (v36 & 0x7FFFFFFF00000000) != 0 && v35 != v33 && v35) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v30;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t (***a5)(void, int *, uint64_t))
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0x10000000100;
  unsigned int v9 = 1;
  char v41 = 1;
  float v42 = v40;
  v40[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v11 = 2 * v9--;
    float32x4_t v12 = (float32x4_t *)v42[v9];
    float32x4_t v13 = v12[1];
    float32x4_t v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    float32x4_t v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      float32x4_t v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      float32x4_t v17 = vaddq_f32(v14, a4[3]);
      float32x4_t v18 = vsubq_f32(*a4, v16);
      *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
      v19.i64[1] = v18.u32[0];
      *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), 4uLL);
      v20.i64[1] = v17.u32[0];
      *(int16x4_t *)v17.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a4[7], vsubq_f32(v16, v17)), (int8x16_t)vcgeq_f32(vaddq_f32(v16, v17), a4[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a4[4], v20), a4[5], v17), vabsq_f32(vmlsq_f32(vmulq_f32(a4[1], v19), v18, a4[2])))));
      if (vuzp1_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v17.f32).u32[0] != -1) {
        break;
      }
      float32x4_t v21 = &v12[2].i8[8];
      float32x4_t v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((void *)v21 + 1))
      {
        unsigned int v23 = v12->i32[0];
        if (v12->i32[0])
        {
          unsigned int v24 = &v12->i32[1];
          unsigned int v25 = v23;
          while (1)
          {
            unsigned int v27 = *v24++;
            uint64_t v26 = v27;
            if (v23 < 2) {
              goto LABEL_25;
            }
            uint64_t v28 = a2 + 24 * v26;
            float32x4_t v29 = *(float32x4_t *)(v28 + 12);
            float32x4_t v30 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v10);
            float32x4_t v31 = vmulq_f32(vaddq_f32(*(float32x4_t *)v28, v29), v10);
            v31.i32[3] = 0;
            v30.i32[3] = 0;
            float32x4_t v32 = vaddq_f32(a4[3], v30);
            float32x4_t v33 = vsubq_f32(*a4, v31);
            *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
            v34.i64[1] = v33.u32[0];
            *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
            v35.i64[1] = v32.u32[0];
            *(int16x4_t *)v32.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(a4[7], vsubq_f32(v31, v32)), (int8x16_t)vcgeq_f32(vaddq_f32(v31, v32), a4[6])), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(a4[4], v35), a4[5], v32), vabsq_f32(vmlsq_f32(vmulq_f32(a4[1], v34), v33, a4[2])))));
            if (vuzp1_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v32.f32).u32[0] == -1)
            {
LABEL_25:
              int v39 = 0;
              int v36 = (**a5)(a5, &v39, a1 + 16 * v26);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v36) {
                break;
              }
            }
            if (!--v25) {
              goto LABEL_14;
            }
          }
          uint64_t v37 = 0;
          goto LABEL_17;
        }
        break;
      }
      v42[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v43) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v40, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v22 = v12[1];
      float32x4_t v14 = vmulq_f32(vsubq_f32(v22, *v12), v10);
      v14.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(v22, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9) {
      continue;
    }
    break;
  }
  uint64_t v37 = 1;
LABEL_17:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v37;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(void, int *, uint64_t))
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0x10000000100;
  unsigned int v9 = 1;
  char v41 = 1;
  float v42 = v40;
  v40[0] = a3;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  while (2)
  {
    unsigned int v11 = 2 * v9--;
    float32x4_t v12 = (float32x4_t *)v42[v9];
    float32x4_t v13 = v12[1];
    float32x4_t v14 = vmulq_f32(vsubq_f32(v13, *v12), v10);
    v14.i32[3] = 0;
    float32x4_t v15 = vaddq_f32(v13, *v12);
    while (1)
    {
      float32x4_t v16 = vmulq_f32(v15, v10);
      v16.i32[3] = 0;
      float32x4_t v17 = vsubq_f32(*(float32x4_t *)a4, v16);
      float32x4_t v18 = vnegq_f32(v14);
      v18.i32[3] = 0;
      float32x4_t v19 = vsubq_f32(v17, vmaxq_f32(vminq_f32(v17, v14), v18));
      float32x4_t v20 = vmulq_f32(v19, v19);
      v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
      *(int16x4_t *)v20.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a4 + 16), vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v20.f32).u32[0] != -1) {
        break;
      }
      float32x4_t v21 = &v12[2].i8[8];
      float32x4_t v12 = (float32x4_t *)v12[2].i64[1];
      if (!*((void *)v21 + 1))
      {
        unsigned int v23 = v12->i32[0];
        if (v12->i32[0])
        {
          unsigned int v24 = &v12->i32[1];
          unsigned int v25 = v23;
          while (1)
          {
            unsigned int v27 = *v24++;
            uint64_t v26 = v27;
            if (v23 < 2) {
              goto LABEL_25;
            }
            uint64_t v28 = a2 + 24 * v26;
            float32x4_t v29 = *(float32x4_t *)(v28 + 12);
            float32x4_t v30 = vmulq_f32(vsubq_f32(v29, *(float32x4_t *)v28), v10);
            float32x4_t v31 = vmulq_f32(vaddq_f32(*(float32x4_t *)v28, v29), v10);
            v31.i32[3] = 0;
            v30.i32[3] = 0;
            float32x4_t v32 = vsubq_f32(*(float32x4_t *)a4, v31);
            float32x4_t v33 = vnegq_f32(v30);
            v33.i32[3] = 0;
            float32x4_t v34 = vsubq_f32(v32, vmaxq_f32(vminq_f32(v32, v30), v33));
            float32x4_t v35 = vmulq_f32(v34, v34);
            v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
            *(int16x4_t *)v35.f32 = vdup_lane_s16((int16x4_t)vcge_f32(*(float32x2_t *)(a4 + 16), vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32)), 0);
            if (vuzp1_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v35.f32).u32[0] == -1)
            {
LABEL_25:
              int v39 = 0;
              int v36 = (**a5)(a5, &v39, a1 + 16 * v26);
              v10.i64[0] = 0x3F0000003F000000;
              v10.i64[1] = 0x3F0000003F000000;
              if (!v36) {
                break;
              }
            }
            if (!--v25) {
              goto LABEL_14;
            }
          }
          uint64_t v37 = 0;
          goto LABEL_17;
        }
        break;
      }
      v42[v9] = v12 + 4;
      if (v9 + 1 == (HIDWORD(v43) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v40, v11);
        v10.i64[0] = 0x3F0000003F000000;
        v10.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v22 = v12[1];
      float32x4_t v14 = vmulq_f32(vsubq_f32(v22, *v12), v10);
      v14.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(v22, *v12);
      v11 += 2;
      ++v9;
    }
LABEL_14:
    if (v9) {
      continue;
    }
    break;
  }
  uint64_t v37 = 1;
LABEL_17:
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x7FFFFFFF00000000) != 0 && v42 != v40 && v42) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v37;
}

uint64_t physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, unsigned int (***a9)(void, float *, uint64_t))
{
  int v12 = 0;
  uint64_t v98 = *MEMORY[0x263EF8340];
  float v13 = a5[1].f32[0] + a5[1].f32[0];
  float32x2_t v14 = vadd_f32(*a5, *a5);
  float32x2_t v15 = vadd_f32(*a6, *a6);
  float v16 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v22.f32 = vadd_f32(*a8, *a8);
  double v17 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  double v18 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v19.f32 = v14;
  v19.i64[1] = LODWORD(v13);
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v16);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  v22.f32[2] = a8[1].f32[0] + a8[1].f32[0];
  v22.i32[3] = 0;
  float32x4_t v23 = vabsq_f32(v20);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
  v24.i64[1] = v23.u32[0];
  float v25 = v13 + (float)(v16 * *a7);
  float v26 = -3.4028e38;
  if (v16 >= 0.0) {
    float v26 = 3.4028e38;
  }
  if (v16 != 0.0) {
    float v13 = v26;
  }
  if (*a7 >= 3.4028e38)
  {
    *(double *)v27.i64 = v18;
  }
  else
  {
    float v13 = v25;
    *(double *)v27.i64 = v17;
  }
  v27.i64[1] = LODWORD(v13);
  float32x4_t v28 = vminq_f32(v19, v27);
  float32x4_t v29 = vmaxq_f32(v19, v27);
  uint64_t v97 = 0x10000000100;
  char v95 = 1;
  float v96 = v94;
  v94[0] = *(void *)(a4 + 1144);
  float32x4_t v30 = vnegq_f32(v21);
  float32x4_t v87 = v20;
  float32x4_t v88 = v19;
  float32x4_t v85 = v23;
  float32x4_t v86 = v22;
  float32x4_t v83 = v30;
  float32x4_t v84 = v24;
  do
  {
    float32x4_t v31 = (float32x4_t *)v96[v12];
    float32x4_t v32 = v31[1];
    float32x4_t v33 = vsubq_f32(v32, *v31);
    v33.i32[3] = 0;
    float32x4_t v34 = vaddq_f32(v32, *v31);
    v34.i32[3] = 0;
    float32x4_t v35 = vaddq_f32(v22, v33);
    float32x4_t v36 = vaddq_f32(v34, v35);
    float32x4_t v37 = vsubq_f32(v34, v35);
    float32x4_t v38 = vsubq_f32(v19, v34);
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
    v39.i64[1] = v38.u32[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v35.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), 4uLL);
    v40.i64[1] = v35.u32[0];
    *(int16x4_t *)v38.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v36, v28), (int8x16_t)vcgeq_f32(v29, v37)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v40), v24, v35), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v39), v38, v30)))));
    if (vuzp1_s8(*(int8x8_t *)v38.f32, *(int8x8_t *)v38.f32).u32[0] == -1)
    {
      float v41 = *a7;
      float v93 = *a7;
      if (v31[3].i64[0])
      {
        float32x4_t v23 = v85;
        float32x4_t v22 = v86;
        float32x4_t v30 = v83;
        float32x4_t v24 = v84;
        float32x4_t v89 = v29;
        float32x4_t v91 = v28;
        do
        {
          float v42 = (float32x4_t *)v31[2].i64[1];
          float32x4_t v43 = v42[1];
          float32x4_t v44 = vsubq_f32(v43, *v42);
          v44.i32[3] = 0;
          float32x4_t v45 = vaddq_f32(v43, *v42);
          v45.i32[3] = 0;
          float32x4_t v46 = vaddq_f32(v22, v44);
          float32x4_t v47 = vsubq_f32(v19, v45);
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), 4uLL);
          v48.i64[1] = v47.u32[0];
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
          v49.i64[1] = v46.u32[0];
          unsigned __int32 v50 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v45, v46), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v45, v46))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v49), v24, v46), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v48), v47, v30))))), *(int8x8_t *)v45.f32).u32[0];
          float32x4_t v51 = v42[4];
          float32x4_t v52 = v42[5];
          float32x4_t v53 = vsubq_f32(v52, v51);
          v53.i32[3] = 0;
          float32x4_t v54 = vaddq_f32(v52, v51);
          v54.i32[3] = 0;
          float32x4_t v55 = vaddq_f32(v22, v53);
          float32x4_t v56 = vsubq_f32(v19, v54);
          *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
          v49.i64[1] = v56.u32[0];
          *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
          v57.i64[1] = v55.u32[0];
          unsigned __int32 v58 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v55), v28), (int8x16_t)vcgeq_f32(v29, vsubq_f32(v54, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v23, v57), v24, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v49), v56, v30))))), *(int8x8_t *)v45.f32).u32[0];
          if (v50 == -1 && v58 == -1)
          {
            float32x4_t v61 = vmulq_f32(v20, vsubq_f32(v54, v45));
            v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
            v61.f32[0] = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32).f32[0];
            v96[v12] = &v42[4 * (unint64_t)(v61.f32[0] > 0.0)];
            float32x4_t v31 = &v42[4 * (unint64_t)(v61.f32[0] <= 0.0)];
            if (v12 + 1 == (HIDWORD(v97) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v94, 2 * (v12 + 1));
              float32x4_t v29 = v89;
              float32x4_t v28 = v91;
              float32x4_t v30 = v83;
              float32x4_t v24 = v84;
              float32x4_t v23 = v85;
              float32x4_t v22 = v86;
              float32x4_t v20 = v87;
              float32x4_t v19 = v88;
            }
            ++v12;
          }
          else
          {
            if (v50 == -1) {
              float32x4_t v31 = (float32x4_t *)v31[2].i64[1];
            }
            else {
              float32x4_t v31 = v42 + 4;
            }
            if (v50 != -1 && v58 != -1) {
              goto LABEL_38;
            }
          }
        }
        while (v31[3].i64[0]);
        float v41 = *a7;
      }
      uint64_t v62 = (unsigned int *)v31[2].i64[1];
      unsigned int v63 = *v62;
      if (*v62)
      {
        float32x4_t v64 = v62 + 1;
        for (unsigned int i = *v62; i; --i)
        {
          unsigned int v67 = *v64++;
          uint64_t v66 = v67;
          if (v63 < 2) {
            goto LABEL_33;
          }
          uint64_t v68 = a3 + 24 * v66;
          float32x4_t v69 = *(float32x4_t *)(v68 + 12);
          float32x4_t v70 = vaddq_f32(*(float32x4_t *)v68, v69);
          float32x4_t v71 = vsubq_f32(v69, *(float32x4_t *)v68);
          v70.i32[3] = 0;
          v71.i32[3] = 0;
          float32x4_t v72 = vaddq_f32(v86, v71);
          float32x4_t v73 = vaddq_f32(v70, v72);
          float32x4_t v74 = vsubq_f32(v70, v72);
          float32x4_t v75 = vsubq_f32(v19, v70);
          *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), 4uLL);
          v76.i64[1] = v75.u32[0];
          *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v72.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), 4uLL);
          v77.i64[1] = v72.u32[0];
          *(int16x4_t *)v72.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v73, v28), (int8x16_t)vcgeq_f32(v29, v74)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v85, v77), v84, v72), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v76), v75, v83)))));
          if (vuzp1_s8(*(int8x8_t *)v72.f32, *(int8x8_t *)v72.f32).u32[0] == -1)
          {
LABEL_33:
            float32x4_t v90 = v29;
            float32x4_t v92 = v28;
            if (!(**a9)(a9, &v93, a2 + 16 * v66))
            {
              uint64_t v81 = 0;
              goto LABEL_41;
            }
            float v78 = v93;
            float32x4_t v20 = v87;
            float32x4_t v19 = v88;
            float32x4_t v29 = v90;
            float32x4_t v28 = v92;
            if (v93 < v41)
            {
              *a7 = v93;
              float32x4_t v79 = vmlaq_n_f32(v88, v87, v78);
              v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
              float32x4_t v28 = vminq_f32(v88, v79);
              float32x4_t v29 = vmaxq_f32(v88, v79);
            }
          }
        }
      }
      float32x4_t v23 = v85;
      float32x4_t v22 = v86;
      float32x4_t v30 = v83;
      float32x4_t v24 = v84;
    }
LABEL_38:
    ;
  }
  while (v12--);
  uint64_t v81 = 1;
LABEL_41:
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v94 && v96) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v81;
}

uint64_t physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, unsigned int (***a9)(void, float *, uint64_t))
{
  int v12 = 0;
  uint64_t v95 = *MEMORY[0x263EF8340];
  float v13 = a5[1].f32[0] + a5[1].f32[0];
  float32x2_t v14 = vadd_f32(*a5, *a5);
  float32x2_t v15 = vadd_f32(*a6, *a6);
  double v16 = COERCE_DOUBLE(vadd_f32(v14, vmul_n_f32(v15, *a7)));
  double v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v15), (int8x8_t)v14, vbsl_s8((int8x8_t)vcgez_f32(v15), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v14;
  v18.i64[1] = LODWORD(v13);
  float v19 = a6[1].f32[0] + a6[1].f32[0];
  *(float32x2_t *)v20.f32 = v15;
  v20.i64[1] = LODWORD(v19);
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
  v21.i64[1] = v15.u32[0];
  float32x4_t v22 = vabsq_f32(v20);
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v23.i64[1] = v22.u32[0];
  float v24 = v13 + (float)(v19 * *a7);
  float v25 = -3.4028e38;
  if (v19 >= 0.0) {
    float v25 = 3.4028e38;
  }
  if (v19 != 0.0) {
    float v13 = v25;
  }
  if (*a7 >= 3.4028e38)
  {
    *(double *)v26.i64 = v17;
  }
  else
  {
    float v13 = v24;
    *(double *)v26.i64 = v16;
  }
  v26.i64[1] = LODWORD(v13);
  float32x4_t v27 = vminq_f32(v18, v26);
  float32x4_t v28 = vmaxq_f32(v18, v26);
  uint64_t v94 = 0x10000000100;
  char v92 = 1;
  float v93 = v91;
  v91[0] = *(void *)(a4 + 1144);
  float32x4_t v29 = vnegq_f32(v21);
  float32x4_t v84 = v20;
  float32x4_t v85 = v18;
  float32x4_t v82 = v23;
  float32x4_t v83 = v22;
  float32x4_t v81 = v29;
  do
  {
    float32x4_t v30 = (float32x4_t *)v93[v12];
    float32x4_t v31 = v30[1];
    int8x16_t v32 = (int8x16_t)vsubq_f32(v31, *v30);
    float32x4_t v33 = (float32x4_t)v32;
    v33.i32[3] = 0;
    float32x4_t v34 = vaddq_f32(v31, *v30);
    v34.i32[3] = 0;
    float32x4_t v35 = vaddq_f32(v34, v33);
    float32x4_t v36 = vsubq_f32(v34, v33);
    float32x4_t v37 = vsubq_f32(v18, v34);
    *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), 4uLL);
    v38.i64[1] = v37.u32[0];
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), 4uLL);
    v39.i64[1] = v32.u32[0];
    *(int16x4_t *)v37.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v35, v27), (int8x16_t)vcgeq_f32(v28, v36)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v39), v23, v33), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v38), v37, v29)))));
    if (vuzp1_s8(*(int8x8_t *)v37.f32, *(int8x8_t *)v37.f32).u32[0] == -1)
    {
      float v40 = *a7;
      float v90 = *a7;
      if (v30[3].i64[0])
      {
        float32x4_t v23 = v82;
        float32x4_t v22 = v83;
        float32x4_t v29 = v81;
        float32x4_t v86 = v28;
        float32x4_t v88 = v27;
        do
        {
          float v41 = (float32x4_t *)v30[2].i64[1];
          float32x4_t v42 = v41[1];
          int8x16_t v43 = (int8x16_t)vsubq_f32(v42, *v41);
          float32x4_t v44 = (float32x4_t)v43;
          v44.i32[3] = 0;
          float32x4_t v45 = vaddq_f32(v42, *v41);
          v45.i32[3] = 0;
          float32x4_t v46 = vsubq_f32(v18, v45);
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
          v47.i64[1] = v46.u32[0];
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v43.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), 4uLL);
          v48.i64[1] = v43.u32[0];
          unsigned __int32 v49 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v45, v44), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v45, v44))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v48), v23, v44), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v47), v46, v29))))), *(int8x8_t *)v45.f32).u32[0];
          float32x4_t v50 = v41[4];
          float32x4_t v51 = v41[5];
          int8x16_t v52 = (int8x16_t)vsubq_f32(v51, v50);
          float32x4_t v53 = (float32x4_t)v52;
          v53.i32[3] = 0;
          float32x4_t v54 = vaddq_f32(v51, v50);
          v54.i32[3] = 0;
          float32x4_t v55 = vsubq_f32(v18, v54);
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
          v47.i64[1] = v55.u32[0];
          *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
          v48.i64[1] = v52.u32[0];
          unsigned __int32 v56 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v53), v27), (int8x16_t)vcgeq_f32(v28, vsubq_f32(v54, v53))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v22, v48), v23, v53), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v47), v55, v29))))), *(int8x8_t *)v45.f32).u32[0];
          if (v49 == -1 && v56 == -1)
          {
            float32x4_t v59 = vmulq_f32(v20, vsubq_f32(v54, v45));
            v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
            v59.f32[0] = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32).f32[0];
            v93[v12] = &v41[4 * (unint64_t)(v59.f32[0] > 0.0)];
            float32x4_t v30 = &v41[4 * (unint64_t)(v59.f32[0] <= 0.0)];
            if (v12 + 1 == (HIDWORD(v94) & 0x7FFFFFFF))
            {
              physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v91, 2 * (v12 + 1));
              float32x4_t v28 = v86;
              float32x4_t v27 = v88;
              float32x4_t v29 = v81;
              float32x4_t v23 = v82;
              float32x4_t v22 = v83;
              float32x4_t v20 = v84;
              float32x4_t v18 = v85;
            }
            ++v12;
          }
          else
          {
            if (v49 == -1) {
              float32x4_t v30 = (float32x4_t *)v30[2].i64[1];
            }
            else {
              float32x4_t v30 = v41 + 4;
            }
            if (v49 != -1 && v56 != -1) {
              goto LABEL_38;
            }
          }
        }
        while (v30[3].i64[0]);
        float v40 = *a7;
      }
      float32x4_t v60 = (unsigned int *)v30[2].i64[1];
      unsigned int v61 = *v60;
      if (*v60)
      {
        uint64_t v62 = v60 + 1;
        for (unsigned int i = *v60; i; --i)
        {
          unsigned int v65 = *v62++;
          uint64_t v64 = v65;
          if (v61 < 2) {
            goto LABEL_33;
          }
          uint64_t v66 = a3 + 24 * v64;
          float32x4_t v67 = *(float32x4_t *)(v66 + 12);
          float32x4_t v68 = vaddq_f32(*(float32x4_t *)v66, v67);
          int8x16_t v69 = (int8x16_t)vsubq_f32(v67, *(float32x4_t *)v66);
          v68.i32[3] = 0;
          float32x4_t v70 = (float32x4_t)v69;
          v70.i32[3] = 0;
          float32x4_t v71 = vaddq_f32(v68, v70);
          float32x4_t v72 = vsubq_f32(v68, v70);
          float32x4_t v73 = vsubq_f32(v18, v68);
          *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v73.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), 4uLL);
          v74.i64[1] = v73.u32[0];
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), 4uLL);
          v75.i64[1] = v69.u32[0];
          *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v71, v27), (int8x16_t)vcgeq_f32(v28, v72)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v83, v75), v82, v70), vabsq_f32(vmlaq_f32(vmulq_f32(v20, v74), v73, v81)))));
          if (vuzp1_s8(*(int8x8_t *)v69.i8, *(int8x8_t *)v69.i8).u32[0] == -1)
          {
LABEL_33:
            float32x4_t v87 = v28;
            float32x4_t v89 = v27;
            if (!(**a9)(a9, &v90, a2 + 16 * v64))
            {
              uint64_t v79 = 0;
              goto LABEL_41;
            }
            float v76 = v90;
            float32x4_t v20 = v84;
            float32x4_t v18 = v85;
            float32x4_t v28 = v87;
            float32x4_t v27 = v89;
            if (v90 < v40)
            {
              *a7 = v90;
              float32x4_t v77 = vmlaq_n_f32(v85, v84, v76);
              v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
              float32x4_t v27 = vminq_f32(v85, v77);
              float32x4_t v28 = vmaxq_f32(v85, v77);
            }
          }
        }
      }
      float32x4_t v23 = v82;
      float32x4_t v22 = v83;
      float32x4_t v29 = v81;
    }
LABEL_38:
    ;
  }
  while (v12--);
  uint64_t v79 = 1;
LABEL_41:
  if ((v94 & 0x8000000000000000) == 0 && (v94 & 0x7FFFFFFF00000000) != 0 && v93 != v91 && v93) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v79;
}

physx::Sq::IncrementalAABBPrunerCore *physx::Sq::IncrementalAABBPrunerCore::IncrementalAABBPrunerCore(physx::Sq::IncrementalAABBPrunerCore *this, const physx::Sq::PruningPool *a2)
{
  *(void *)this = 1;
  unsigned int v4 = (char *)this + 152;
  uint64_t v5 = 8;
  do
  {
    uint64_t v6 = (char *)this + v5;
    *(_DWORD *)uint64_t v6 = 0;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 4physx::Sq::AABBTree::release(this, 0) = 0u;
    *((_DWORD *)v6 + 14) = 1061158912;
    *(void *)(v6 + 6physx::Sq::AABBTree::release(this, 0) = 0xFFFFFFFFLL;
    *((_DWORD *)v6 + 17) = 0;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + v5 + 16, 0x40u, 0);
    v5 += 72;
  }
  while (v6 + 72 != v4);
  *((void *)this + 2physx::Sq::AABBTree::release(this, 0) = 0;
  *((void *)this + 19) = a2;
  *((void *)this + 21) = 0;
  if (*((_DWORD *)this + 15) <= 0xFFu) {
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 24, 0x100u, v7);
  }
  if (*((_DWORD *)this + 33) <= 0xFFu) {
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 96, 0x100u, v7);
  }
  if ((*((_DWORD *)this + 43) & 0x7FFFFFE0) == 0) {
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)this + 160, 0x20u);
  }
  return this;
}

void physx::Sq::IncrementalAABBPrunerCore::~IncrementalAABBPrunerCore(physx::Sq::IncrementalAABBPrunerCore *this)
{
  v2.n128_f64[0] = physx::Sq::IncrementalAABBPrunerCore::release(this);
  int v3 = *((_DWORD *)this + 43);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((void *)this + 20) != 0) {
    (*(void (**)(uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  for (uint64_t i = 96; i != -48; i -= 72)
  {
    if (*(void *)((char *)this + i)) {
      (*(void (**)(uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    }
  }
}

double physx::Sq::IncrementalAABBPrunerCore::release(physx::Sq::IncrementalAABBPrunerCore *this)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)this + 72 * v2;
    __int32 v8 = (physx::Sq::IncrementalAABBTree *)*((void *)v5 + 2);
    int8x8_t v7 = v5 + 16;
    uint64_t v6 = v8;
    if (v8)
    {
      physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(v6);
      (*(void (**)(uint64_t, physx::Sq::IncrementalAABBTree *))(*(void *)(physx::shdfnd::Foundation::mInstance
                                                                                    + 24)
                                                                        + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
      *int8x8_t v7 = 0;
    }
    physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 72 * v2 + 24);
    char v3 = 0;
    *((_DWORD *)v7 - 2) = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  *(void *)&double result = 1;
  *(void *)this = 1;
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::updateMapping(uint64_t result, int32x2_t *a2, int a3, uint64_t a4, int8x8_t a5)
{
  int v17 = a3;
  unint64_t v7 = *(unsigned int *)(result + 168);
  if (v7)
  {
    uint64_t v8 = result;
    if (!a4) {
      goto LABEL_4;
    }
    if (*(void *)(a4 + 48)) {
      goto LABEL_4;
    }
    float v13 = *(_DWORD **)(a4 + 40);
    if (!*v13) {
      goto LABEL_4;
    }
    unint64_t v14 = 0;
    do
    {
      int v16 = 0;
      int v16 = v13[v14 + 1];
      char v18 = 0;
      double result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v16, &v18, a5);
      if (!v18) {
        *(_DWORD *)double result = v16;
      }
      *(void *)(result + 8) = a4;
      ++v14;
      float v13 = *(_DWORD **)(a4 + 40);
    }
    while (v14 < *v13);
    unint64_t v7 = *(unsigned int *)(v8 + 168);
    if (v7)
    {
LABEL_4:
      for (unint64_t i = 0; i < v7; ++i)
      {
        uint64_t v10 = *(void *)(*(void *)(v8 + 160) + 8 * i);
        unsigned int v11 = *(_DWORD **)(v10 + 40);
        if (*v11)
        {
          unint64_t v12 = 0;
          do
          {
            int v15 = 0;
            int v15 = v11[v12 + 1];
            char v19 = 0;
            double result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v15, &v19, a5);
            if (!v19) {
              *(_DWORD *)double result = v15;
            }
            *(void *)(result + 8) = v10;
            ++v12;
            unsigned int v11 = *(_DWORD **)(v10 + 40);
          }
          while (v12 < *v11);
          unint64_t v7 = *(unsigned int *)(v8 + 168);
        }
      }
    }
  }
  else
  {
    char v20 = 0;
    double result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a2, &v17, &v20, a5);
    if (!v20) {
      *(_DWORD *)double result = v17;
    }
    *(void *)(result + 8) = a4;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::removeObject(int32x2_t *this, int a2, int a3, unsigned int *a4)
{
  int v32 = a3;
  int v33 = a2;
  int v30 = 0;
  float32x4_t v31 = 0;
  int v7 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[1] + 3], &v33, (uint64_t)&v30);
  uint64_t v8 = 1;
  if (!v7) {
    uint64_t v8 = 0;
  }
  unsigned __int32 v9 = this->u32[v8];
  if (v9 != this->i32[0]
    || (uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v9 + 3], &v33, (uint64_t)&v30), result))
  {
    unsigned int v11 = &this[9 * v9];
    *a4 = v11[1].u32[0];
    uint64_t v12 = physx::Sq::IncrementalAABBTree::remove(*(void *)&v11[2], v31, v33, *(void *)(*(void *)&this[19] + 8));
    if (v12)
    {
      uint64_t v14 = v12;
      if (!*(void *)(v12 + 48))
      {
        int v15 = *(_DWORD **)(v12 + 40);
        if (*v15)
        {
          unint64_t v16 = 0;
          int v17 = &this[9 * v9 + 3];
          do
          {
            int v28 = 0;
            int v28 = v15[v16 + 1];
            char v34 = 0;
            uint64_t v18 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v17, &v28, &v34, v13);
            if (!v34) {
              *(_DWORD *)uint64_t v18 = v28;
            }
            *(void *)(v18 + 8) = v14;
            ++v16;
            int v15 = *(_DWORD **)(v14 + 40);
          }
          while (v16 < *v15);
        }
      }
    }
    if (v33 != a3)
    {
      int v28 = 0;
      uint64_t v29 = 0;
      int v19 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[0] + 3], &v32, (uint64_t)&v28);
      uint64_t v21 = 1;
      if (v19) {
        uint64_t v21 = 0;
      }
      unsigned __int32 v22 = this->u32[v21];
      if (v22 != this->i32[1]
        || physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v22 + 3], &v32, (uint64_t)&v28))
      {
        uint64_t v23 = v29;
        char v34 = 0;
        uint64_t v24 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(&this[9 * v22 + 3], &v33, &v34, v20);
        if (!v34) {
          *(_DWORD *)uint64_t v24 = v33;
        }
        *(void *)(v24 + 8) = v23;
        float v25 = *(unsigned int **)(v29 + 40);
        uint64_t v26 = *v25;
        if (v26)
        {
          for (unint64_t i = v25 + 1; *i != v32; ++i)
          {
            if (!--v26) {
              return 1;
            }
          }
          *unint64_t i = v33;
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::swapIndex(int32x2_t *this, int a2, int a3)
{
  int v15 = a3;
  int v16 = a2;
  int v13 = 0;
  uint64_t v14 = 0;
  int v4 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * this->u32[0] + 3], &v15, (uint64_t)&v13);
  uint64_t v6 = 1;
  if (v4) {
    uint64_t v6 = 0;
  }
  unsigned __int32 v7 = this->u32[v6];
  if (v7 != this->i32[1]
    || (uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[9 * v7 + 3], &v15, (uint64_t)&v13), result))
  {
    uint64_t v9 = v14;
    char v17 = 0;
    uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(&this[9 * v7 + 3], &v16, &v17, v5);
    if (!v17) {
      *(_DWORD *)uint64_t result = v16;
    }
    *(void *)(result + 8) = v9;
    uint64_t v10 = *(unsigned int **)(v14 + 40);
    uint64_t v11 = *v10;
    if (v11)
    {
      for (unint64_t i = v10 + 1; *i != v15; ++i)
      {
        if (!--v11) {
          return result;
        }
      }
      *unint64_t i = v16;
    }
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::updateObject(int32x2_t *this, unsigned int a2)
{
  unsigned __int32 v4 = this->u32[1];
  int8x8_t v5 = &this[9 * v4];
  if (!v5[9].i32[1]
    || (uint64_t v6 = (char *)&v5[3],
        unsigned int v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10)),
        uint64_t v8 = *(unsigned int *)(*((void *)v6 + 3)
                             + 4
                             * ((*((_DWORD *)v6 + 9) - 1) & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16)))),
        v8 == -1))
  {
LABEL_6:
    unsigned __int32 v4 = this->i32[0];
    uint64_t v10 = &this[9 * this->u32[0]];
    if (!v10[9].i32[1]) {
      return 0;
    }
    uint64_t v11 = (char *)&v10[3];
    unsigned int v12 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v8 = *(unsigned int *)(*((void *)v11 + 3)
                         + 4
                         * ((*((_DWORD *)v11 + 9) - 1) & (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16))));
    if (v8 == -1) {
      return 0;
    }
    uint64_t v9 = *((void *)v11 + 1);
    while (*(_DWORD *)(v9 + 16 * v8) != a2)
    {
      uint64_t v8 = *(unsigned int *)(*((void *)v11 + 2) + 4 * v8);
      if (v8 == -1) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v9 = *((void *)v6 + 1);
    while (*(_DWORD *)(v9 + 16 * v8) != a2)
    {
      uint64_t v8 = *(unsigned int *)(*((void *)v6 + 2) + 4 * v8);
      if (v8 == -1) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v14 = v9 + 16 * v8;
  this[21].i32[0] = 0;
  uint64_t v15 = (uint64_t)this[9 * v4 + 2];
  int v16 = *(float32x4_t **)(v14 + 8);
  uint64_t v17 = *(void *)(*(void *)&this[19] + 8);
  float32x4_t v18 = *(float32x4_t *)(v17 + 24 * a2 + 12);
  v18.i32[3] = 0;
  *(int16x4_t *)v18.f32 = vmovn_s32(vcgtq_f32(*v16, v18));
  if ((vuzp1_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v18.f32).u32[0] & 0xFFFFFF) != 0
    || (float32x4_t v19 = *(float32x4_t *)(v17 + 24 * a2),
        v19.i32[3] = 0,
        *(int16x4_t *)v19.f32 = vmovn_s32(vcgtq_f32(v19, v16[1])),
        (vuzp1_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v19.f32).u32[0] & 0xFFFFFF) != 0))
  {
    uint64_t v20 = physx::Sq::IncrementalAABBTree::remove(*(void *)&this[9 * v4 + 2], *(float32x4_t **)(v14 + 8), a2, *(void *)(*(void *)&this[19] + 8));
    uint64_t v36 = v20;
    if (v20 && !*(void *)(v20 + 48))
    {
      uint64_t v21 = this[21].u32[0];
      if ((this[21].i32[1] & 0x7FFFFFFFu) <= v21)
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack((uint64_t)&this[20], &v36);
      }
      else
      {
        *(void *)(*(void *)&this[20] + 8 * v21) = v20;
        this[21].i32[0] = v21 + 1;
      }
    }
    int v16 = physx::Sq::IncrementalAABBTree::insert(v15, a2, v17, (uint64_t)&this[20]);
  }
  else
  {
    uint64_t v23 = (float32x4_t *)v16[2].i64[1];
    unsigned __int32 v22 = (float32x4_t *)v16[3].i64[0];
    if (v22)
    {
      *int v16 = vminq_f32(*v23, *v22);
      float32x4_t v24 = vmaxq_f32(v23[1], v22[1]);
    }
    else
    {
      uint64_t v25 = v23->u32[0];
      uint64_t v26 = (_OWORD *)(v17 + 24 * v23->u32[1]);
      float32x4_t v27 = *(float32x4_t *)v26;
      float32x4_t v24 = *(float32x4_t *)((char *)v26 + 12);
      if (v25 >= 2)
      {
        uint64_t v28 = v25 - 1;
        uint64_t v29 = &v23->i32[2];
        do
        {
          unsigned int v30 = *v29++;
          uint64_t v31 = v17 + 24 * v30;
          float32x4_t v27 = vminq_f32(v27, *(float32x4_t *)v31);
          float32x4_t v24 = vmaxq_f32(v24, *(float32x4_t *)(v31 + 12));
          --v28;
        }
        while (v28);
      }
      v27.i32[3] = 0;
      *int v16 = v27;
      v24.i32[3] = 0;
    }
    v16[1] = v24;
    for (unint64_t i = (float32x4_t *)v16[2].i64[0]; i; unint64_t i = (float32x4_t *)i[2].i64[0])
    {
      int v33 = (float32x4_t *)i[2].i64[1];
      char v34 = (float32x4_t *)i[3].i64[0];
      float32x4_t v35 = vminq_f32(*v33, *v34);
      float32x4_t v24 = vmaxq_f32(v33[1], v34[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*i, v35)), *(int8x8_t *)v24.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v24, i[1])), *(int8x8_t *)v24.f32).u32[0] == -1)
      {
        break;
      }
      *unint64_t i = v35;
      i[1] = v24;
    }
  }
  if (this[21].i32[0] || v16 != *(float32x4_t **)(v14 + 8)) {
    physx::Sq::IncrementalAABBPrunerCore::updateMapping((uint64_t)this, &this[9 * v4 + 3], a2, (uint64_t)v16, *(int8x8_t *)v24.f32);
  }
  return 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::removeMarkedObjects(physx::Sq::IncrementalAABBPrunerCore *this)
{
  unsigned int v1 = *((_DWORD *)this + 1);
  uint64_t v2 = (char *)this + 72 * v1;
  uint64_t v5 = *((void *)v2 + 2);
  unsigned __int32 v4 = (uint64_t *)(v2 + 16);
  uint64_t v3 = v5;
  if (!v5 || !*(void *)(v3 + 1144)) {
    return 0;
  }
  uint64_t v6 = (_DWORD *)((char *)this + 72 * v1);
  uint64_t v7 = v6[19];
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v6 + 6);
  v6[2] = 0;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void **)(v8 + 1144);
  if (v9)
  {
    physx::Sq::IncrementalAABBTree::releaseNode(v8, v9);
    *(void *)(v8 + 1144) = 0;
  }
  return v7;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v13 = 0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2 + 48;
  uint64_t v15 = (__int32 *)(a2 + 12);
  char v16 = 1;
  int8x8_t v17 = (int8x8_t)vdup_n_s32(0x7F7FFFFFu);
  char v18 = 1;
  do
  {
    char v19 = v16;
    uint64_t v20 = a1 + 72 * v13;
    uint64_t v23 = *(void *)(v20 + 16);
    uint64_t v22 = v20 + 16;
    uint64_t v21 = v23;
    if (v23)
    {
      uint64_t v24 = *(void *)(v21 + 1144);
      if (((v24 != 0) & v18) == 1)
      {
        char v18 = 1;
        switch(*(_WORD *)(a2 + 98))
        {
          case 0:
            LODWORD(a4) = *(_DWORD *)(a2 + 112);
            float32x4_t v25 = *(float32x4_t *)(a2 + 100);
            v25.i64[1] = *(unsigned int *)(a2 + 108);
            float32x4_t v50 = v25;
            *(float *)&a4 = *(float *)&a4 * *(float *)&a4;
            *(int32x2_t *)v51.f32 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
            char v18 = physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*(void *)(a1 + 152) + 16), *(void *)(*(void *)(a1 + 152) + 8), v24, (uint64_t)&v50, a3);
            break;
          case 2:
            float v26 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
            float v27 = *(float *)(a2 + 120);
            v31.i64[0] = *(void *)(a2 + 112);
            float32x2_t v28 = *(float32x2_t *)(a2 + 12);
            double v29 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v31.f32, vmul_n_f32(v28, v26)));
            double v30 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v28), *(int8x8_t *)v31.f32, vbsl_s8((int8x8_t)vcgez_f32(v28), v17, (int8x8_t)0x80000000800000)));
            v31.i64[1] = LODWORD(v27);
            *(float32x2_t *)v32.f32 = v28;
            *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
            v32.i64[1] = *(unsigned int *)(a2 + 20);
            float32x4_t v50 = v31;
            float32x4_t v51 = v32;
            *(int8x8_t *)&long long v33 = vext_s8((int8x8_t)v28, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
            *((void *)&v33 + 1) = v28.u32[0];
            int32x4_t v34 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
            v34.i32[3] = 0;
            long long v52 = v33;
            int32x4_t v53 = v34;
            int8x16_t v35 = (int8x16_t)vabsq_f32(v32);
            *(int8x8_t *)&long long v36 = vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
            float v37 = v27 + (float)(v26 * v32.f32[2]);
            float v38 = -3.4028e38;
            if (v32.f32[2] >= 0.0) {
              float v38 = 3.4028e38;
            }
            if (v32.f32[2] != 0.0) {
              float v27 = v38;
            }
            BOOL v39 = v26 < 3.4028e38;
            if (v26 >= 3.4028e38) {
              float v40 = v27;
            }
            else {
              float v40 = v37;
            }
            if (v39) {
              *(double *)v41.i64 = v29;
            }
            else {
              *(double *)v41.i64 = v30;
            }
            v41.i64[1] = LODWORD(v40);
            int8x16_t v54 = v35;
            *((void *)&v36 + 1) = v35.u32[0];
            long long v55 = v36;
            float32x4_t v56 = vminq_f32(v31, v41);
            float32x4_t v57 = vmaxq_f32(v31, v41);
            char v18 = physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*(void *)(a1 + 152) + 16), *(void *)(*(void *)(a1 + 152) + 8), v24, &v50, a3);
            break;
          case 3:
            if (*(_WORD *)(a2 + 96)) {
              goto LABEL_18;
            }
            float v42 = *(float *)(a2 + 80);
            float v43 = *(float *)(a2 + 92);
            float32x2_t v44 = *(float32x2_t *)(a2 + 72);
            float32x2_t v45 = *(float32x2_t *)(a2 + 84);
            *(float32x2_t *)v46.f32 = vmul_f32(vadd_f32(v44, v45), (float32x2_t)0x3F0000003F000000);
            v46.f32[2] = (float)(v42 + v43) * 0.5;
            v46.i32[3] = 0;
            float v47 = v43 - v42;
            *(float32x2_t *)v48.f32 = vmul_f32(vsub_f32(v45, v44), (float32x2_t)0x3F0000003F000000);
            v48.i64[1] = COERCE_UNSIGNED_INT(v47 * 0.5);
            float32x4_t v50 = v46;
            float32x4_t v51 = v48;
            char v18 = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*(void *)(a1 + 152) + 16), *(void *)(*(void *)(a1 + 152) + 8), v24, &v50, a3);
            break;
          case 4:
LABEL_18:
            physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v50, v14, v15, a2, a4, a5, a6, a7, a8, a9, a10);
            char v18 = physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*(void *)(a1 + 152) + 16), *(void *)(*(void *)(a1 + 152) + 8), *(void *)(*(void *)v22 + 1144), &v50, (unsigned int (***)(void, int *, uint64_t))a3);
            break;
          default:
            break;
        }
      }
    }
    char v16 = 0;
    uint64_t v13 = 1;
  }
  while ((v19 & 1) != 0);
  return v18 & 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::sweep(uint64_t a1, float *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(void, float *, uint64_t))
{
  uint64_t v10 = 0;
  char v11 = 1;
  char v12 = 1;
  do
  {
    char v13 = v11;
    uint64_t v14 = *(void *)(a1 + 72 * v10 + 16);
    if (v14 && ((*(void *)(v14 + 1144) != 0) & v12) == 1)
    {
      float v15 = a2[18];
      float v16 = a2[19];
      float v18 = a2[20];
      float v17 = a2[21];
      float v19 = a2[22];
      float v20 = a2[23];
      v28.f32[0] = (float)(v17 - v15) * 0.5;
      v28.f32[1] = (float)(v19 - v16) * 0.5;
      float v29 = (float)(v20 - v18) * 0.5;
      uint64_t v21 = *(void *)(a1 + 152);
      uint64_t v23 = *(void *)(v21 + 8);
      uint64_t v22 = *(void *)(v21 + 16);
      v25.f32[0] = (float)(v17 + v15) * 0.5;
      v25.f32[1] = (float)(v19 + v16) * 0.5;
      float v26 = (float)(v20 + v18) * 0.5;
      char v12 = physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v27, v22, v23, v14, &v25, a3, a4, &v28, a5);
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while ((v13 & 1) != 0);
  return v12 & 1;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::raycast(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(void, float *, uint64_t))
{
  uint64_t v10 = 0;
  char v11 = 1;
  char v12 = 1;
  do
  {
    char v13 = v11;
    uint64_t v14 = *(void *)(a1 + 72 * v10 + 16);
    if (v14 && ((*(void *)(v14 + 1144) != 0) & v12) == 1)
    {
      uint64_t v15 = *(void *)(a1 + 152);
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v16 = *(void *)(v15 + 16);
      uint64_t v19 = 0;
      int v20 = 0;
      char v12 = physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v21, v16, v17, v14, a2, a3, a4, (uint64_t)&v19, a5);
    }
    char v11 = 0;
    uint64_t v10 = 1;
  }
  while ((v13 & 1) != 0);
  return v12 & 1;
}

void physx::Sq::IncrementalAABBPrunerCore::shiftOrigin(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(a1 + 72 * v4 + 16);
    if (v7)
    {
      uint64_t v8 = *(float32x4_t **)(v7 + 1144);
      if (v8)
      {
        float32x4_t v9 = *a2;
        v9.i32[3] = 0;
        float32x4_t v10 = v9;
        shiftNode(v8, &v10);
      }
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::visualize(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = v5 + 72 * v6;
    uint64_t v12 = *(void *)(v9 + 16);
    uint64_t v11 = v9 + 16;
    uint64_t v10 = v12;
    if (v12)
    {
      if (*(void *)(v10 + 1144))
      {
        long long v13 = xmmword_23435FBB0;
        uint64_t v14 = 0;
        int v15 = 0;
        physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v13);
        a2[1] = a3;
        physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(int **)(*(void *)v11 + 1144), a2);
        long long v13 = xmmword_23435FBB0;
        uint64_t v14 = 0;
        int v15 = 0;
        uint64_t result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v13);
        a2[1] = -1;
      }
    }
    char v7 = 0;
    uint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  return result;
}

uint64_t physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(int *a1, _DWORD *a2)
{
  *(void *)&long long v4 = *(void *)(a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = a1[6];
  int v8 = *a1;
  *((void *)&v4 + 1) = v5;
  long long v9 = v4;
  int v10 = v6;
  char v11 = 1;
  uint64_t result = physx::Cm::operator<<(a2, (uint64_t *)&v8);
  if (*((void *)a1 + 6))
  {
    physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*((void *)a1 + 5), a2);
    return physx::Sq::IncrementalAABBPrunerCore::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*((void *)a1 + 6), a2);
  }
  return result;
}

void physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(physx::Sq::IncrementalAABBTree *this)
{
  uint64_t v2 = (void *)*((void *)this + 143);
  if (v2)
  {
    physx::Sq::IncrementalAABBTree::releaseNode((uint64_t)this, v2);
    *((void *)this + 143) = 0;
  }
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Sq::IncrementalAABBTree *)((char *)this + 1152));
  physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::~PoolBase((uint64_t)this + 576);
  physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::~PoolBase((uint64_t)this + 8);
}

uint64_t physx::Sq::IncrementalAABBTree::releaseNode(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = a2 + 5;
  long long v4 = (void *)a2[5];
  if (v5[1])
  {
    physx::Sq::IncrementalAABBTree::releaseNode(result, v4);
    uint64_t result = physx::Sq::IncrementalAABBTree::releaseNode(v3, a2[6]);
  }
  else if (v4)
  {
    --*(_DWORD *)(result + 556);
    void *v4 = *(void *)(result + 568);
    *(void *)(result + 568) = v4;
  }
  uint64_t v6 = a2[4];
  if (v6)
  {
    if (*(void **)(v6 + 48) == a2)
    {
      char v7 = *(void **)(v6 + 40);
      if (v7)
      {
        --*(_DWORD *)(v3 + 1124);
        *char v7 = *(void *)(v3 + 1136);
        *(void *)(v3 + 1136) = v7;
      }
    }
  }
  else
  {
    --*(_DWORD *)(v3 + 1124);
    *a2 = *(void *)(v3 + 1136);
    *(void *)(v3 + 1136) = a2;
  }
  return result;
}

float32x4_t physx::Sq::IncrementalAABBTree::splitLeafNode(uint64_t a1, float32x4_t *a2, unsigned int a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  uint64_t v12 = *(float32x4_t **)(a1 + 1136);
  if (!v12)
  {
    physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
    uint64_t v12 = *(float32x4_t **)(a1 + 1136);
  }
  *(void *)(a1 + 1136) = v12->i64[0];
  ++*(_DWORD *)(a1 + 1124);
  long long v13 = *(unsigned int **)(a1 + 568);
  if (!v13)
  {
    physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(a1 + 8);
    long long v13 = *(unsigned int **)(a1 + 568);
  }
  *(void *)(a1 + 568) = *(void *)v13;
  ++*(_DWORD *)(a1 + 556);
  float32x4_t v14 = vminq_f32(*a2, *a4);
  float32x4_t result = vmaxq_f32(a2[1], *a5);
  v16.i64[0] = 0x3F0000003F000000;
  v16.i64[1] = 0x3F0000003F000000;
  float32x4_t v17 = vsubq_f32(result, v14);
  float32x4_t v55 = vmulq_f32(vaddq_f32(v14, result), v16);
  uint64_t v54 = v17.i64[0];
  unsigned __int8 v18 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1), v17)).u8[0];
  float v19 = *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v18 & 1)));
  v12[2].i64[0] = (uint64_t)a2;
  v12[6].i64[0] = (uint64_t)a2;
  int v20 = (unsigned int *)a2[2].i64[1];
  v12[2].i64[1] = (uint64_t)v20;
  v12[3].i64[0] = 0;
  v12[6].i64[1] = (uint64_t)v13;
  v12[7].i64[0] = 0;
  *long long v13 = 0;
  unsigned int v21 = *v20;
  if (!*v20) {
    goto LABEL_14;
  }
  uint64_t v22 = v18 & 1;
  if (v17.f32[2] > v19) {
    uint64_t v22 = 2;
  }
  float v23 = *(float *)((unint64_t)&v55 | (4 * v22));
  unsigned int v24 = v21 - 1;
  do
  {
    float32x2_t v25 = &v20[v24];
    unsigned int v28 = v25[1];
    float v26 = v25 + 1;
    unsigned int v27 = v28;
    if (v23 >= (float)((float)(*(float *)(a6 + 4 * v22 + 24 * v28) + *(float *)(a6 + 4 * v22 + 24 * v28 + 12)) * 0.5))
    {
      uint64_t v29 = *v13;
      *long long v13 = v29 + 1;
      v13[v29 + 1] = v27;
      unsigned int v21 = *v20 - 1;
      *int v20 = v21;
      *float v26 = v20[v21 + 1];
    }
  }
  while ((unint64_t)v24--);
  if (v21 && (uint64_t v31 = *v13, v31 != 4))
  {
    if (v21 == 4)
    {
      *long long v13 = 1;
      float32x4_t v32 = v13 + 1;
    }
    else
    {
      int32x4_t v53 = (float *)(a6 + 24 * a3 + 4 * v22);
      if (v23 >= (float)((float)(*v53 + v53[3]) * 0.5))
      {
        *long long v13 = v31 + 1;
        float32x4_t v32 = &v13[v31 + 1];
      }
      else
      {
        *int v20 = v21 + 1;
        float32x4_t v32 = &v20[v21 + 1];
      }
    }
  }
  else
  {
LABEL_14:
    *int v20 = 1;
    float32x4_t v32 = v20 + 1;
  }
  *float32x4_t v32 = a3;
  uint64_t v33 = *v20;
  int32x4_t v34 = (_OWORD *)(a6 + 24 * v20[1]);
  float32x4_t v35 = *(float32x4_t *)v34;
  float32x4_t v36 = *(float32x4_t *)((char *)v34 + 12);
  if (v33 >= 2)
  {
    uint64_t v37 = v33 - 1;
    float v38 = v20 + 2;
    do
    {
      unsigned int v39 = *v38++;
      uint64_t v40 = a6 + 24 * v39;
      float32x4_t v35 = vminq_f32(v35, *(float32x4_t *)v40);
      float32x4_t v36 = vmaxq_f32(v36, *(float32x4_t *)(v40 + 12));
      --v37;
    }
    while (v37);
  }
  v35.i32[3] = 0;
  v36.i32[3] = 0;
  *uint64_t v12 = v35;
  v12[1] = v36;
  uint64_t v41 = *v13;
  float v42 = (_OWORD *)(a6 + 24 * v13[1]);
  float32x4_t v43 = *(float32x4_t *)v42;
  float32x4_t v44 = *(float32x4_t *)((char *)v42 + 12);
  if (v41 >= 2)
  {
    uint64_t v45 = v41 - 1;
    float32x4_t v46 = v13 + 2;
    do
    {
      unsigned int v47 = *v46++;
      uint64_t v48 = a6 + 24 * v47;
      float32x4_t v43 = vminq_f32(v43, *(float32x4_t *)v48);
      float32x4_t v44 = vmaxq_f32(v44, *(float32x4_t *)(v48 + 12));
      --v45;
    }
    while (v45);
  }
  v43.i32[3] = 0;
  v44.i32[3] = 0;
  v12[4] = v43;
  void v12[5] = v44;
  a2[2].i64[1] = (uint64_t)v12;
  a2[3].i64[0] = (uint64_t)&v12[4];
  *a2 = v14;
  a2[1] = result;
  for (unint64_t i = (float32x4_t *)a2[2].i64[0]; i; unint64_t i = (float32x4_t *)i[2].i64[0])
  {
    if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*i, v14)), *(int8x8_t *)result.f32).u32[0] & 0xFFFFFF) == 0)
    {
      int8x8_t v50 = (int8x8_t)vmovn_s32(vcgtq_f32(result, i[1]));
      *(int8x8_t *)result.f32 = vuzp1_s8(v50, v50);
      if ((result.i32[0] & 0xFFFFFF) == 0) {
        break;
      }
    }
    float32x4_t v51 = (float32x4_t *)i[2].i64[1];
    long long v52 = (float32x4_t *)i[3].i64[0];
    float32x4_t v14 = vminq_f32(*v51, *v52);
    *unint64_t i = v14;
    float32x4_t result = vmaxq_f32(v51[1], v52[1]);
    i[1] = result;
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::rotateTree(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v9 = result;
  int v10 = *(float32x4_t **)(a2 + 40 + 8 * (a4 == 0));
  uint64_t v11 = *(void *)(a2 + 40 + 8 * a4);
  float32x4_t v12 = vaddq_f32(v10[1], *v10);
  float32x4_t v13 = vsubq_f32(v12, vaddq_f32(*(float32x4_t *)(*(void *)(v11 + 40) + 16), *(float32x4_t *)*(void *)(v11 + 40)));
  float32x4_t v14 = vsubq_f32(v12, vaddq_f32(*(float32x4_t *)(*(void *)(v11 + 48) + 16), *(float32x4_t *)*(void *)(v11 + 48)));
  v13.i32[3] = 0;
  float32x4_t v15 = vmulq_f32(v13, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v14.i32[3] = 0;
  float32x4_t v16 = vmulq_f32(v14, v14);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  for (unint64_t i = *(float32x4_t **)(v11
                            + 40
                            + 8
                            * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 0), *(int8x8_t *)v12.f32).u32[0] == -1));
        ;
        unint64_t i = (float32x4_t *)i[2].i64[(vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)), 0), *(int8x8_t *)v12.f32).u32[0] == -1)+ 1])
  {
    unsigned __int8 v18 = (float32x4_t *)i[3].i64[0];
    if (!v18) {
      break;
    }
    float v19 = (float32x4_t *)i[2].i64[1];
    _X10 = v19[2].i64[1];
    __asm { PRFM            #0, [X10] }
    _X10 = v18[2].i64[1];
    __asm { PRFM            #0, [X10] }
    float32x4_t v27 = vsubq_f32(v12, vaddq_f32(v19[1], *v19));
    float32x4_t v28 = vsubq_f32(v12, vaddq_f32(v18[1], *v18));
    v27.i32[3] = 0;
    float32x4_t v29 = vmulq_f32(v27, v27);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    v28.i32[3] = 0;
    float32x4_t v30 = vmulq_f32(v28, v28);
    v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  }
  uint64_t v31 = *(unsigned int *)(a3 + 8);
  if (v31)
  {
    uint64_t v32 = 0;
    while (*(float32x4_t **)(*(void *)a3 + 8 * v32) != i)
    {
      if (v31 == ++v32) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if (v32 != v31)
  {
    uint64_t v33 = *(void *)a3;
    unsigned int v34 = v31 - 1;
    *(_DWORD *)(a3 + 8) = v34;
    *(void *)(v33 + 8 * v32) = *(void *)(v33 + 8 * v34);
  }
LABEL_12:
  uint64_t v35 = i[2].i64[0];
  uint64_t v136 = v35;
  float32x4_t v36 = *(float32x4_t **)(v35 + 40);
  uint64_t v37 = v36;
  if (v36 == i) {
    uint64_t v37 = *(float32x4_t **)(v35 + 48);
  }
  *(float32x4_t *)(v35 + 16) = v37[1];
  *(float32x4_t *)uint64_t v35 = *v37;
  uint64_t v38 = v37[2].i64[1];
  uint64_t v39 = v37[3].i64[0];
  *(void *)(v35 + 4physx::Sq::AABBTree::release(this, 0) = v38;
  if (v39)
  {
    *(void *)(v38 + 32) = v35;
    uint64_t v40 = v37[3].i64[0];
    *(void *)(v35 + 48) = v40;
    *(void *)(v40 + 32) = v35;
  }
  else
  {
    *(void *)(v35 + 48) = 0;
    uint64_t v41 = *(unsigned int *)(a3 + 8);
    if (v41)
    {
      uint64_t v42 = 0;
      while (*(float32x4_t **)(*(void *)a3 + 8 * v42) != v37)
      {
        if (v41 == ++v42) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    if (v42 != v41)
    {
      uint64_t v43 = *(void *)a3;
      LODWORD(v41) = v41 - 1;
      *(_DWORD *)(a3 + 8) = v41;
      *(void *)(v43 + 8 * v42) = *(void *)(v43 + 8 * v41);
    }
LABEL_24:
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v41)
    {
      float32x4_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v136);
    }
    else
    {
      *(void *)(*(void *)a3 + 8 * v41) = v136;
      *(_DWORD *)(a3 + 8) = v41 + 1;
    }
  }
  float32x4_t v44 = *(float32x4_t **)(v136 + 32);
  if (v44)
  {
    float32x4_t v46 = (float32x4_t *)v44[2].i64[1];
    uint64_t v45 = (float32x4_t *)v44[3].i64[0];
    if (!v45)
    {
      uint64_t v48 = v46->u32[0];
      unsigned __int32 v49 = (_OWORD *)(a5 + 24 * v46->u32[1]);
      float32x4_t v50 = *(float32x4_t *)v49;
      float32x4_t v51 = *(float32x4_t *)((char *)v49 + 12);
      if (v48 >= 2)
      {
        uint64_t v52 = v48 - 1;
        int32x4_t v53 = &v46->i32[2];
        do
        {
          unsigned int v54 = *v53++;
          uint64_t v55 = a5 + 24 * v54;
          float32x4_t v50 = vminq_f32(v50, *(float32x4_t *)v55);
          float32x4_t v51 = vmaxq_f32(v51, *(float32x4_t *)(v55 + 12));
          --v52;
        }
        while (v52);
      }
      v50.i32[3] = 0;
      v51.i32[3] = 0;
      *float32x4_t v44 = v50;
      v44[1] = v51;
      goto LABEL_35;
    }
    *float32x4_t v44 = vminq_f32(*v46, *v45);
    float32x4_t v47 = vmaxq_f32(v46[1], v45[1]);
    while (1)
    {
      v44[1] = v47;
LABEL_35:
      float32x4_t v44 = (float32x4_t *)v44[2].i64[0];
      if (!v44) {
        break;
      }
      float32x4_t v56 = (float32x4_t *)v44[2].i64[1];
      float32x4_t v57 = (float32x4_t *)v44[3].i64[0];
      float32x4_t v58 = vminq_f32(*v56, *v57);
      float32x4_t v47 = vmaxq_f32(v56[1], v57[1]);
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(*v44, v58)), *(int8x8_t *)v47.f32).u32[0] == -1
        && vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v47, v44[1])), *(int8x8_t *)v47.f32).u32[0] == -1)
      {
        break;
      }
      *float32x4_t v44 = v58;
    }
  }
  float32x4_t v59 = (float32x4_t *)v10[3].i64[0];
  if (v59)
  {
    float32x4_t v60 = vaddq_f32(i[1], *i);
    unsigned int v61 = &v10[2].i8[8];
    uint64_t v62 = (float32x4_t *)v10[2].i64[1];
    float32x4_t v63 = v62[1];
    float32x4_t v64 = v59[1];
    float32x4_t v65 = vsubq_f32(v60, vaddq_f32(v63, *v62));
    float32x4_t v66 = vsubq_f32(v60, vaddq_f32(v64, *v59));
    if (a6)
    {
      float32x4_t v67 = vsubq_f32(v63, *v62);
      float32x4_t v68 = vsubq_f32(v64, *v59);
      float32x4_t v69 = vmulq_laneq_f32(vmulq_lane_f32(v67, *(float32x2_t *)v67.f32, 1), v67, 2);
      float32x4_t v70 = vmulq_laneq_f32(vmulq_lane_f32(v68, *(float32x2_t *)v68.f32, 1), v68, 2);
      unsigned __int8 v71 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v69, v70))).u8[0];
      _NF = (float)(3.0 * v69.f32[0]) < v70.f32[0] || (float)(3.0 * v70.f32[0]) < v69.f32[0];
      unsigned int v73 = v71 & 1;
      if (_NF) {
        uint64_t v74 = v73;
      }
      else {
        uint64_t v74 = 0;
      }
      char v75 = !_NF;
      int v76 = _NF;
    }
    else
    {
      uint64_t v74 = 0;
      int v76 = 0;
      char v75 = 1;
    }
    v65.i32[3] = 0;
    float32x4_t v78 = vmulq_f32(v65, v65);
    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
    v66.i32[3] = 0;
    float32x4_t v79 = vmulq_f32(v66, v66);
    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
    unsigned __int32 v80 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32)), 0), *(int8x8_t *)v60.f32).u32[0];
    if (v75)
    {
      float32x4_t v77 = 0;
    }
    else
    {
      uint64_t v81 = *(void *)(*(void *)&v61[8 * v74] + 48);
      if (v81) {
        float32x4_t v77 = v10;
      }
      else {
        float32x4_t v77 = 0;
      }
      if (v81) {
        LOBYTE(a6) = 0;
      }
    }
    int v10 = *(float32x4_t **)&v61[8 * (v80 == -1)];
    float v135 = v10;
    for (unsigned int j = (float32x4_t *)v10[3].i64[0]; j; unsigned int j = (float32x4_t *)v10[3].i64[0])
    {
      float32x4_t v83 = &v10[2].i8[8];
      float32x4_t v84 = (float32x4_t *)v10[2].i64[1];
      _X13 = v84[2].i64[1];
      __asm { PRFM            #0, [X13] }
      _X13 = j[2].i64[1];
      __asm { PRFM            #0, [X13] }
      float32x4_t v90 = *v84;
      float32x4_t v89 = v84[1];
      float32x4_t v92 = *j;
      float32x4_t v91 = j[1];
      if (a6)
      {
        float32x4_t v93 = vsubq_f32(v89, v90);
        float32x4_t v94 = vsubq_f32(v91, v92);
        float32x4_t v95 = vmulq_laneq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v93.f32, 1), v93, 2);
        float32x4_t v96 = vmulq_laneq_f32(vmulq_lane_f32(v94, *(float32x2_t *)v94.f32, 1), v94, 2);
        BOOL v97 = (float)(3.0 * v95.f32[0]) < v96.f32[0] || (float)(3.0 * v96.f32[0]) < v95.f32[0];
        unsigned int v98 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v95, v96))).u8[0] & 1;
        uint64_t v74 = v97 ? v98 : v74;
        if (v97) {
          int v76 = 1;
        }
      }
      if (!v77)
      {
        if (v76)
        {
          if (*(void *)(*(void *)&v83[8 * v74] + 48)) {
            float32x4_t v77 = v10;
          }
          else {
            float32x4_t v77 = 0;
          }
          LOBYTE(a6) = a6 & (*(void *)(*(void *)&v83[8 * v74] + 48) == 0);
        }
        else
        {
          float32x4_t v77 = 0;
        }
      }
      float32x4_t v99 = vsubq_f32(v60, vaddq_f32(v89, v90));
      float32x4_t v100 = vsubq_f32(v60, vaddq_f32(v91, v92));
      v99.i32[3] = 0;
      float32x4_t v101 = vmulq_f32(v99, v99);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      v100.i32[3] = 0;
      float32x4_t v102 = vmulq_f32(v100, v100);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      int v10 = *(float32x4_t **)&v83[8
                                * (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32), vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32)), 0), *(int8x8_t *)v60.f32).u32[0] == -1)];
      float v135 = v10;
    }
  }
  else
  {
    uint64_t v74 = 0;
    float32x4_t v77 = 0;
    float v135 = v10;
  }
  float v103 = (int *)v10[2].i64[1];
  int v104 = *v103;
  float v105 = (_DWORD *)i[2].i64[1];
  if ((*v105 + *v103) > 4)
  {
    float v112 = *(float32x4_t **)(v9 + 1136);
    if (!v112)
    {
      float32x4_t result = physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(v9 + 576);
      float v112 = *(float32x4_t **)(v9 + 1136);
    }
    *(void *)(v9 + 1136) = v112->i64[0];
    ++*(_DWORD *)(v9 + 1124);
    v112[2].i64[0] = (uint64_t)v10;
    v112[6].i64[0] = (uint64_t)v10;
    v112[2].i64[1] = v10[2].i64[1];
    v112[3].i64[0] = 0;
    *float v112 = *v10;
    v112[1] = v10[1];
    v112[6].i64[1] = i[2].i64[1];
    v112[7].i64[0] = 0;
    v112[4] = *i;
    float v113 = v112 + 4;
    float v133 = v112 + 4;
    float v134 = v112;
    v112[5] = i[1];
    v10[2].i64[1] = (uint64_t)v112;
    v10[3].i64[0] = (uint64_t)&v112[4];
    float32x4_t v114 = vminq_f32(*v112, v112[4]);
    *int v10 = v114;
    float32x4_t v115 = vmaxq_f32(v112[1], v112[5]);
    v10[1] = v115;
    for (k = (float32x4_t *)v10[2].i64[0]; k; k = (float32x4_t *)k[2].i64[0])
    {
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*k, v114)), *(int8x8_t *)v115.f32).u32[0] & 0xFFFFFF) == 0)
      {
        int8x8_t v117 = (int8x8_t)vmovn_s32(vcgtq_f32(v115, k[1]));
        if ((vuzp1_s8(v117, v117).u32[0] & 0xFFFFFF) == 0) {
          break;
        }
      }
      float v118 = (float32x4_t *)k[2].i64[1];
      float v119 = (float32x4_t *)k[3].i64[0];
      float32x4_t v114 = vminq_f32(*v118, *v119);
      float32x4_t *k = v114;
      float32x4_t v115 = vmaxq_f32(v118[1], v119[1]);
      k[1] = v115;
    }
    uint64_t v120 = *(unsigned int *)(a3 + 8);
    if (v120)
    {
      uint64_t v121 = 0;
      while (*(float32x4_t **)(*(void *)a3 + 8 * v121) != v10)
      {
        if (v120 == ++v121) {
          goto LABEL_105;
        }
      }
    }
    else
    {
      LODWORD(v121) = 0;
    }
    if (v121 != v120)
    {
      uint64_t v122 = *(void *)a3;
      LODWORD(v12physx::Sq::AABBTree::release(this, 0) = v120 - 1;
      *(_DWORD *)(a3 + 8) = v120;
      *(void *)(v122 + 8 * v121) = *(void *)(v122 + 8 * v120);
    }
LABEL_105:
    unsigned int v123 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
    if (v123 <= v120)
    {
      float32x4_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v134);
      unsigned int v124 = *(_DWORD *)(a3 + 8);
      unsigned int v123 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
    }
    else
    {
      *(void *)(*(void *)a3 + 8 * v12physx::Sq::AABBTree::release(this, 0) = v112;
      unsigned int v124 = v120 + 1;
      *(_DWORD *)(a3 + 8) = v120 + 1;
    }
    if (v123 <= v124)
    {
      float32x4_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v133);
    }
    else
    {
      *(void *)(*(void *)a3 + 8 * v124) = v113;
      *(_DWORD *)(a3 + 8) = v124 + 1;
    }
  }
  else
  {
    if (*v105)
    {
      unint64_t v106 = 0;
      do
      {
        int v107 = v105[v106 + 1];
        *float v103 = v104 + v106 + 1;
        v103[(v104 + v106++) + 1] = v107;
      }
      while (v106 < *v105);
    }
    uint64_t v108 = *(unsigned int *)(a3 + 8);
    uint64_t v109 = *(void *)a3;
    if (v108)
    {
      uint64_t v110 = 0;
      while (*(float32x4_t **)(v109 + 8 * v110) != v10)
      {
        if (v108 == ++v110)
        {
          uint64_t v111 = *(unsigned int *)(a3 + 8);
          goto LABEL_118;
        }
      }
      uint64_t v111 = *(unsigned int *)(a3 + 8);
    }
    else
    {
      uint64_t v111 = 0;
      LODWORD(v11physx::Sq::AABBTree::release(this, 0) = 0;
    }
    if (v110 == v108)
    {
LABEL_118:
      if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v108)
      {
        float32x4_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(a3, &v135);
      }
      else
      {
        *(void *)(v109 + 8 * v111) = v10;
        *(_DWORD *)(a3 + 8) = v108 + 1;
      }
    }
    float v125 = (void *)i[2].i64[1];
    if (v125)
    {
      --*(_DWORD *)(v9 + 556);
      *float v125 = *(void *)(v9 + 568);
      *(void *)(v9 + 568) = v125;
    }
    float v126 = v135;
    float32x4_t v127 = v135[1];
    float32x4_t v128 = vminq_f32(*v135, *i);
    *float v135 = v128;
    for (float32x4_t m = vmaxq_f32(v127, i[1]); ; float32x4_t m = vmaxq_f32(v131[1], v132[1]))
    {
      v126[1] = m;
      float v126 = (float32x4_t *)v126[2].i64[0];
      if (!v126) {
        break;
      }
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(*v126, v128)), *(int8x8_t *)m.f32).u32[0] & 0xFFFFFF) == 0)
      {
        int8x8_t v130 = (int8x8_t)vmovn_s32(vcgtq_f32(m, v126[1]));
        if ((vuzp1_s8(v130, v130).u32[0] & 0xFFFFFF) == 0) {
          break;
        }
      }
      float v131 = (float32x4_t *)v126[2].i64[1];
      float v132 = (float32x4_t *)v126[3].i64[0];
      float32x4_t v128 = vminq_f32(*v131, *v132);
      *float v126 = v128;
    }
  }
  if (v36)
  {
    --*(_DWORD *)(v9 + 1124);
    v36->i64[0] = *(void *)(v9 + 1136);
    *(void *)(v9 + 1136) = v36;
  }
  if (v77) {
    return physx::Sq::IncrementalAABBTree::rotateTree(v9, v77, a3, v74, a5, 0);
  }
  return result;
}

float32x4_t shiftNode(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2 = *a1;
  a1[1] = vsubq_f32(a1[1], *a2);
  float32x4_t result = vsubq_f32(v2, *a2);
  *a1 = result;
  if (a1[3].i64[0])
  {
    uint64_t v5 = a1;
    do
    {
      shiftNode(v5[2].i64[1], a2);
      uint64_t v5 = (float32x4_t *)v5[3].i64[0];
      float32x4_t v6 = *v5;
      v5[1] = vsubq_f32(v5[1], *a2);
      float32x4_t result = vsubq_f32(v6, *a2);
      *uint64_t v5 = result;
    }
    while (v5[3].i64[0]);
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::copyNode(uint64_t result, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  *(void *)(a2 + 32) = a5;
  long long v11 = *a3;
  HIDWORD(v11) = 0;
  *(_OWORD *)a2 = v11;
  long long v12 = *(long long *)((char *)a3 + 12);
  HIDWORD(v12) = 0;
  *(_OWORD *)(a2 + 16) = v12;
  float32x4_t v13 = (_DWORD *)a3 + 6;
  if (*((unsigned char *)a3 + 24))
  {
    uint64_t v17 = a2;
  }
  else
  {
    uint64_t v15 = a4 + 28;
    do
    {
      uint64_t v16 = *(void *)(v10 + 1136);
      if (!v16)
      {
        physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(v10 + 576);
        uint64_t v16 = *(void *)(v10 + 1136);
      }
      *(void *)(v10 + 1136) = *(void *)v16;
      ++*(_DWORD *)(v10 + 1124);
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 8physx::Sq::AABBTree::release(this, 0) = 0u;
      *(_OWORD *)(v16 + 96) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(void *)(v9 + 4physx::Sq::AABBTree::release(this, 0) = v16;
      *(void *)(v9 + 48) = v16 + 64;
      float32x4_t result = physx::Sq::IncrementalAABBTree::copyNode(v10);
      uint64_t v17 = *(void *)(v9 + 48);
      if (a4) {
        unsigned __int8 v18 = (long long *)(v15 + 28 * (*v13 >> 1));
      }
      else {
        unsigned __int8 v18 = 0;
      }
      *(void *)(v17 + 32) = v9;
      long long v19 = *v18;
      HIDWORD(v19) = 0;
      *(_OWORD *)uint64_t v17 = v19;
      long long v20 = *(long long *)((char *)v18 + 12);
      HIDWORD(v2physx::Sq::AABBTree::release(this, 0) = 0;
      *(_OWORD *)(v17 + 16) = v20;
      char v21 = *((unsigned char *)v18 + 24);
      float32x4_t v13 = (_DWORD *)v18 + 6;
      uint64_t v9 = v17;
    }
    while ((v21 & 1) == 0);
  }
  uint64_t v22 = *(void **)(v10 + 568);
  if (!v22)
  {
    float32x4_t result = physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(v10 + 8);
    uint64_t v22 = *(void **)(v10 + 568);
  }
  *(void *)(v10 + 568) = *v22;
  ++*(_DWORD *)(v10 + 556);
  *(void *)(v17 + 4physx::Sq::AABBTree::release(this, 0) = v22;
  unint64_t v23 = *v13;
  uint64_t v24 = (v23 >> 1) & 0xF;
  *(_DWORD *)uint64_t v22 = v24;
  if (v24)
  {
    float32x2_t v25 = (unsigned int *)(a6 + ((v23 >> 3) & 0x1FFFFFFC));
    float v26 = (unsigned int *)v22 + 1;
    do
    {
      unsigned int v27 = *v25++;
      *v26++ = v27;
      *(void *)(*a7 + 8 * v27) = v17;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t physx::Sq::IncrementalAABBTree::copy(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 80))(a2);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 1136);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(a1 + 576);
      uint64_t v7 = *(void *)(a1 + 1136);
    }
    *(void *)(a1 + 1136) = *(void *)v7;
    ++*(_DWORD *)(a1 + 1124);
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 8physx::Sq::AABBTree::release(this, 0) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(void *)(a1 + 1144) = v7;
    int v8 = (long long *)a2[9];
    uint64_t v9 = a2[7];
    return physx::Sq::IncrementalAABBTree::copyNode(a1, v7, v8, (uint64_t)v8, 0, v9, a3);
  }
  return result;
}

void physx::Sq::computeStaticWorldAABB(float32x2_t *a1, uint64_t a2, int32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = (int8x8_t *)(a2 + 64);
  if ((v8 & 4) != 0) {
    uint64_t v10 = *(int8x8_t **)(a2 + 16);
  }
  if ((a3->i32[2] & 0x40) != 0) {
    long long v11 = (int32x4_t *)(a3[1].i64[0] + 176);
  }
  else {
    long long v11 = a3 + 3;
  }
  v12.i64[0] = v11[1].i64[0];
  v12.i64[1] = v11[1].u32[2];
  *(int8x8_t *)v13.f32 = v10[2];
  v13.i64[1] = v10[3].u32[0];
  int8x16_t v14 = *(int8x16_t *)v10->i8;
  float32x2_t v15 = (float32x2_t)vdupq_laneq_s32(*v11, 3).u64[0];
  float32x4_t v16 = *(float32x4_t *)v11;
  v16.i32[3] = 0;
  float32x4_t v17 = *(float32x4_t *)v10->i8;
  v17.i32[3] = 0;
  float32x4_t v18 = vmulq_f32(v16, v17);
  float32x2_t v19 = (float32x2_t)vpaddq_f32(v18, v18).u64[0];
  float32x2_t v20 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v18.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  float32x2_t v21 = (float32x2_t)vext_s8(*(int8x8_t *)v11->i8, (int8x8_t)v20, 4uLL);
  int8x8_t v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11->i8, (float32x2_t)vext_s8(*v10, *(int8x8_t *)v18.f32, 4uLL)), v21, (float32x2_t)*v10);
  *(int8x8_t *)v18.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, (float32x2_t)*v10), *(float32x2_t *)v11->i8, *(float32x2_t *)v18.f32), 4uLL);
  v18.i64[1] = v22.u32[0];
  float32x4_t v23 = vmlaq_laneq_f32(v18, v17, *(float32x4_t *)v11, 3);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  float32x4_t v24 = vmulq_n_f32(v13, vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).f32[0]);
  v24.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v11, *(int8x16_t *)v11, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), vpadd_f32(v19, v19));
  float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  int8x8_t v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11->i8, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v25, 4uLL)), v21, *(float32x2_t *)v13.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v13.f32), *(float32x2_t *)v11->i8, v25), 4uLL);
  v27.i64[1] = v26.u32[0];
  float32x4_t v28 = vmlaq_laneq_f32(v24, v27, *(float32x4_t *)v11, 3);
  uint64_t v29 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  v28.i64[1] = v29;
  float32x4_t v34 = vmlaq_laneq_f32(v23, v16, *(float32x4_t *)v10->i8, 3);
  float32x4_t v30 = vmulq_f32(v16, v13);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  float32x4_t v31 = vmlaq_n_f32(v28, v16, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  v32.i64[0] = 0x4000000040000000;
  v32.i64[1] = 0x4000000040000000;
  float32x4_t v33 = vmlaq_f32(v12, v32, v31);
  __int32 v39 = v33.i32[2];
  v34.i32[3] = v17.i32[1];
  uint64_t v38 = v33.i64[0];
  float32x4_t v37 = v34;
  uint64_t v35 = v9 + 64;
  if (v8) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = a2 + 104;
  }
  v32.i32[0] = 1065437102;
  v33.i64[0] = 0;
  physx::Gu::computeBounds(a1, v36, (uint64_t)&v37, 0, v33, (int8x16_t)v32, *(double *)v16.i64, *(double *)v14.i64, *(double *)v34.i64, COERCE_DOUBLE((unint64_t)v29), *(double *)v27.i64, (int32x4_t)v31, a5, a6, a7, a8, v37.i8[0]);
}

void physx::Sq::computeDynamicWorldAABB(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int32 v9 = a2[1].i32[0];
  uint64_t v10 = (float32x2_t *)a2[2];
  int v11 = *(_DWORD *)(a3 + 284);
  float32x4_t v12 = *(__n128 **)(a3 + 16);
  float32x4_t v13 = &v12[21].n128_u8[12];
  if ((v11 & 0x4000) == 0) {
    float32x4_t v13 = (unsigned __int8 *)(a3 + 76);
  }
  if ((~*v13 & 3) != 0) {
    goto LABEL_10;
  }
  if ((v11 & 0x8000) != 0)
  {
    a4 = (float32x4_t)v12[17];
    float32x4_t v65 = a4;
    float32x4_t v16 = (unsigned __int32 *)&v12[18];
    float32x2_t v15 = &v12[18].n128_u32[1];
    float32x4_t v17 = &v12[18].n128_u32[2];
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 8) >> 30 == 3
    || (int8x16_t v14 = *(float32x4_t **)(a3 + 208)) == 0
    || v14[1].i8[15] != 1
    || !v14[1].i8[12])
  {
LABEL_10:
    float32x4_t v18 = (int8x8_t *)(a3 + 224);
    float32x4_t v16 = (unsigned __int32 *)(a3 + 240);
    float32x2_t v15 = (unsigned __int32 *)(a3 + 244);
    float32x4_t v17 = (unsigned __int32 *)(a3 + 248);
    goto LABEL_13;
  }
  float32x2_t v15 = &v14[1].u32[1];
  a4 = *v14;
  float32x4_t v65 = *v14;
  float32x4_t v16 = (unsigned __int32 *)&v14[1];
  float32x4_t v17 = &v14[1].u32[2];
LABEL_12:
  float32x4_t v18 = (int8x8_t *)&v65;
LABEL_13:
  float32x2_t v19 = a2 + 8;
  if ((v9 & 4) != 0) {
    float32x2_t v19 = v10;
  }
  float32x2_t v20 = (int32x4_t *)&v12[14];
  if ((v11 & 0x400) != 0) {
    float32x2_t v21 = v20;
  }
  else {
    float32x2_t v21 = (int32x4_t *)(a3 + 80);
  }
  *(float32x2_t *)v22.f32 = v19[2];
  v22.i64[1] = v19[3].u32[0];
  v23.i64[0] = v21[1].i64[0];
  v23.i64[1] = v21[1].u32[2];
  a4.i32[0] = *v16;
  a4.i32[1] = *v15;
  a4.i32[2] = *v17;
  float32x2_t v24 = (float32x2_t)vdupq_laneq_s32(*v21, 3).u64[0];
  float32x4_t v25 = *(float32x4_t *)v21;
  v25.i32[3] = 0;
  float32x4_t v26 = *(float32x4_t *)v19->f32;
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_f32(v26, v25);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  float32x2_t v28 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  float32x2_t v30 = (float32x2_t)vext_s8(*(int8x8_t *)v21->i8, (int8x8_t)v29, 4uLL);
  int8x8_t v31 = (int8x8_t)vmls_f32(vmul_f32(*v19, v30), (float32x2_t)vext_s8((int8x8_t)*v19, (int8x8_t)v28, 4uLL), *(float32x2_t *)v21->i8);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v21->i8), *v19, v29), 4uLL);
  v32.i64[1] = v31.u32[0];
  float32x4_t v33 = vmlaq_laneq_f32(v32, v26, *(float32x4_t *)v21, 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  float32x4_t v34 = vmlsq_laneq_f32(v33, v25, *(float32x4_t *)v19->f32, 3);
  float32x4_t v35 = *(float32x4_t *)v18->i8;
  v35.i32[3] = 0;
  float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  float32x2_t v37 = (float32x2_t)vext_s8(*v18, (int8x8_t)v36, 4uLL);
  int8x8_t v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v18, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL)), v37, *(float32x2_t *)v34.f32);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  float32x4_t v39 = vsubq_f32(v22, v23);
  float32x4_t v40 = vmulq_n_f32(v39, vmla_f32((float32x2_t)0xBF000000BF000000, v24, v24).f32[0]);
  v40.i32[3] = 0;
  *(float32x2_t *)v27.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v19->f32, 3), v24);
  int8x8_t v41 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)), *(float32x2_t *)v39.f32, v29);
  int8x8_t v42 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.f32, v30), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL), *(float32x2_t *)v21->i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, v41, 4uLL);
  v43.i64[1] = v42.u32[0];
  float32x4_t v44 = vmlaq_laneq_f32(v40, v43, *(float32x4_t *)v21, 3);
  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  float32x4_t v45 = vmulq_f32(v25, v39);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x4_t v46 = vmlaq_n_f32(v44, v25, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
  v45.i64[0] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
  float32x2_t v47 = vadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
  v46.i64[1] = v45.u32[0];
  float32x4_t v48 = vaddq_f32(v46, v46);
  int32x4_t v53 = vdupq_laneq_s32(*(int32x4_t *)v18->i8, 3);
  float32x4_t v49 = vmulq_f32(v35, v34);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  *(int8x8_t *)v50.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(v36, *(float32x2_t *)v34.f32), (float32x2_t)*v18, *(float32x2_t *)&v34.u32[2]), 4uLL);
  v50.i64[1] = v38.u32[0];
  float32x4_t v51 = vmlaq_laneq_f32(v50, v34, *(float32x4_t *)v18->i8, 3);
  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
  float32x4_t v52 = vmulq_n_f32(v48, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8).f32[0]);
  v52.i32[3] = 0;
  *(float32x2_t *)v53.i8 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v18->i8, *(int8x16_t *)v18->i8, 8uLL), *(float32x2_t *)v27.f32), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32));
  *(float32x2_t *)v45.f32 = vadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  int8x8_t v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v18, (float32x2_t)vext_s8((int8x8_t)v47, *(int8x8_t *)v45.f32, 4uLL)), v37, v47);
  *(int8x8_t *)v55.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(v36, v47), (float32x2_t)*v18, *(float32x2_t *)v45.f32), 4uLL);
  v55.i64[1] = v54.u32[0];
  float32x4_t v56 = vmlaq_laneq_f32(v52, v55, *(float32x4_t *)v18->i8, 3);
  uint64_t v57 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  v56.i64[1] = v57;
  float32x4_t v58 = vmlaq_n_f32(v51, v35, v27.f32[0]);
  float32x4_t v59 = vmulq_f32(v35, v48);
  v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
  float32x4_t v60 = vmlaq_n_f32(v56, v35, vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32).f32[0]);
  v60.i64[1] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u32[0];
  v61.i64[0] = 0x4000000040000000;
  v61.i64[1] = 0x4000000040000000;
  float32x4_t v62 = vmlaq_f32(a4, v61, v60);
  __int32 v68 = v62.i32[2];
  v58.i32[3] = v53.i32[1];
  uint64_t v67 = v62.i64[0];
  float32x4_t v66 = v58;
  uint64_t v63 = (uint64_t)&v10[8];
  if (v9) {
    uint64_t v64 = v63;
  }
  else {
    uint64_t v64 = (uint64_t)&a2[13];
  }
  v61.i32[0] = 1065437102;
  v62.i64[0] = 0;
  physx::Gu::computeBounds(a1, v64, (uint64_t)&v66, 0, v62, (int8x16_t)v61, COERCE_DOUBLE((unint64_t)v57), *(double *)v55.i64, *(double *)v60.i64, *(double *)v48.i64, *(double *)&v47, v53, a6, a7, a8, a9, v65.i8[0]);
}

physx::Sq::BVHCompoundPruner *physx::Sq::BVHCompoundPruner::BVHCompoundPruner(physx::Sq::BVHCompoundPruner *this)
{
  *(void *)this = &unk_26E727E10;
  *((void *)this + 69) = 0x4000000000;
  *((unsigned char *)this + 536) = 1;
  *((void *)this + 68) = (char *)this + 24;
  *((void *)this + 7physx::Sq::AABBTree::release(this, 0) = 256;
  *((_DWORD *)this + 142) = 5120;
  *((void *)this + 72) = 0;
  *((void *)this + 14physx::Sq::AABBTree::release(this, 0) = 0x4000000000;
  *((unsigned char *)this + 1104) = 1;
  *((void *)this + 139) = (char *)this + 592;
  *((void *)this + 141) = 256;
  *((_DWORD *)this + 284) = 0x8000;
  float32x4_t v2 = (char *)this + 1192;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 116physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 124physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *((void *)this + 159) = -3233808384;
  *((void *)this + 16physx::Sq::AABBTree::release(this, 0) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 1232, 0x40u, 0);
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  if (*((_DWORD *)this + 303) <= 0x1Fu) {
    physx::Sq::CompoundTreePool::resize((physx::Sq::BVHCompoundPruner *)((char *)this + 1208), 0x20u);
  }
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized((uint64_t)v2, 0x20u);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resizeUninitialized((uint64_t)this + 1288, 0x20u);
  if ((*((_DWORD *)this + 329) & 0x7FFFFFE0) == 0) {
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)this + 1304, 0x20u);
  }
  return this;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

void physx::Sq::BVHCompoundPruner::~BVHCompoundPruner(physx::Sq::BVHCompoundPruner *this)
{
  *(void *)this = &unk_26E727E10;
  int v2 = *((_DWORD *)this + 329);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 163) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 325);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 161) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 154)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Sq::CompoundTreePool::~CompoundTreePool((physx::Sq::BVHCompoundPruner *)((char *)this + 1208));
  int v6 = *((_DWORD *)this + 301);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 149)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Sq::IncrementalAABBTree::~IncrementalAABBTree((physx::Sq::BVHCompoundPruner *)((char *)this + 8));
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sq::BVHCompoundPruner::~BVHCompoundPruner(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Sq::BVHCompoundPruner::addCompound(uint64_t a1, uint64_t a2, void *a3, int a4, float *a5, int a6, long long *a7)
{
  int v57 = a4;
  __int32 v9 = (float *)a3[9];
  float v10 = v9[1];
  float v12 = v9[2];
  float v11 = v9[3];
  float v14 = v9[4];
  float v13 = v9[5];
  float v15 = (float)((float)(*v9 + v11) * 0.5) + (float)((float)(*v9 + v11) * 0.5);
  float v16 = (float)((float)(v10 + v14) * 0.5) + (float)((float)(v10 + v14) * 0.5);
  float v17 = (float)((float)(v12 + v13) * 0.5) + (float)((float)(v12 + v13) * 0.5);
  float v19 = a5[2];
  float v18 = a5[3];
  float v20 = (float)(v18 * v18) + -0.5;
  float v21 = *a5;
  float v22 = a5[1];
  float v23 = (float)((float)(v16 * v22) + (float)(*a5 * v15)) + (float)(v19 * v17);
  float v24 = (float)((float)(v18 * (float)((float)(v22 * v17) - (float)(v19 * v16))) + (float)(v15 * v20))
      + (float)(*a5 * v23);
  float v25 = (float)((float)(v18 * (float)((float)(v19 * v15) - (float)(*a5 * v17))) + (float)(v16 * v20))
      + (float)(v22 * v23);
  float v26 = (float)((float)(v18 * (float)((float)(*a5 * v16) - (float)(v22 * v15))) + (float)(v17 * v20))
      + (float)(v19 * v23);
  float v27 = a5[4] + v24;
  float v28 = a5[5] + v25;
  float v29 = a5[6] + v26;
  float v30 = v22 + v22;
  float v31 = v19 + v19;
  float v32 = v22 * (float)(v22 + v22);
  float v33 = v19 * (float)(v19 + v19);
  float v34 = (float)(v21 + v21) * v22;
  float v35 = (float)(v21 + v21) * v19;
  float v36 = v18 * (float)(v21 + v21);
  float v37 = v30 * v19;
  float v38 = v18 * v30;
  float v39 = v18 * v31;
  float v40 = 1.0 - (float)(v21 * (float)(v21 + v21));
  float v41 = (float)(v11 - *v9) * 0.5;
  float v42 = (float)(v14 - v10) * 0.5;
  float v43 = (float)(v13 - v12) * 0.5;
  float v44 = fabsf(v43 * (float)(v35 + v38))
      + (float)(fabsf(v41 * (float)((float)(1.0 - v32) - v33)) + fabsf(v42 * (float)(v34 - v39)));
  float v45 = fabsf(v43 * (float)(v37 - v36)) + (float)(fabsf(v41 * (float)(v34 + v39)) + fabsf(v42 * (float)(v40 - v33)));
  float v46 = fabsf(v43 * (float)(v40 - v32)) + (float)(fabsf(v41 * (float)(v35 - v38)) + fabsf(v42 * (float)(v36 + v37)));
  *(float *)&uint64_t v52 = v27 - v44;
  *((float *)&v52 + 1) = v28 - v45;
  float v53 = v29 - v46;
  float v54 = v27 + v44;
  float v55 = v28 + v45;
  float v56 = v29 + v46;
  unsigned int v47 = physx::Sq::CompoundTreePool::addCompound((physx::Sq::CompoundTreePool *)(a1 + 1208), a2, a3, &v52, (uint64_t)a5, a6, a7);
  *(_DWORD *)(a1 + 1312) = 0;
  float32x4_t v48 = physx::Sq::IncrementalAABBTree::insert(a1 + 8, v47, *(void *)(a1 + 1216), a1 + 1304);
  physx::Sq::BVHCompoundPruner::updateMapping(a1, v47, (uint64_t)v48);
  char v58 = 0;
  float32x4_t v50 = (_DWORD *)physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(a1 + 1232), &v57, &v58, v49);
  if (!v58) {
    *float32x4_t v50 = a4;
  }
  v50[1] = v47;
  *(_DWORD *)(*(void *)(a1 + 1288) + 4 * v47) = a4;
  return 1;
}

uint64_t physx::Sq::BVHCompoundPruner::updateMapping(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = (void *)(result + 1192);
  unsigned int v7 = *(_DWORD *)(result + 1200);
  if (v7 <= a2)
  {
    unsigned int v8 = 2 * v7;
    uint64_t v17 = 0;
    physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resize(result + 1192, 2 * v7, &v17);
    int v16 = 0;
    uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v5 + 1288, v8, &v16);
  }
  LODWORD(v9) = *(_DWORD *)(v5 + 1312);
  if (v9)
  {
    if (a3)
    {
      if (!*(void *)(a3 + 48))
      {
        float v10 = *(_DWORD **)(a3 + 40);
        if (*v10)
        {
          unint64_t v11 = 0;
          do
          {
            *(void *)(*v6 + 8 * v10[++v11]) = a3;
            float v10 = *(_DWORD **)(a3 + 40);
          }
          while (v11 < *v10);
        }
      }
    }
    uint64_t v12 = 0;
    if (v9 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v9;
    }
    do
    {
      uint64_t v13 = *(void *)(*(void *)(v5 + 1304) + 8 * v12);
      float v14 = *(_DWORD **)(v13 + 40);
      if (*v14)
      {
        unint64_t v15 = 0;
        do
        {
          *(void *)(*v6 + 8 * v14[++v15]) = v13;
          float v14 = *(_DWORD **)(v13 + 40);
        }
        while (v15 < *v14);
      }
      ++v12;
    }
    while (v12 != v9);
  }
  else
  {
    *(void *)(*v6 + 8 * a2) = a3;
  }
  return result;
}

uint64_t physx::Sq::BVHCompoundPruner::removeCompound(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 1284))
  {
    uint64_t v3 = this;
    unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    unsigned int v5 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
    uint64_t v6 = *(unsigned int *)(*(void *)(this + 1256) + 4 * ((*(_DWORD *)(this + 1268) - 1) & v5));
    if (v6 != -1)
    {
      uint64_t v7 = *(void *)(this + 1240);
      while (*(_DWORD *)(v7 + 8 * v6) != a2)
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(this + 1248) + 4 * v6);
        if (v6 == -1) {
          return this;
        }
      }
      uint64_t v8 = v7 + 8 * v6;
      uint64_t v9 = *(unsigned int *)(v8 + 4);
      physx::Sq::CompoundTreePool::removeCompound((physx::Sq::CompoundTreePool *)(this + 1208), *(_DWORD *)(v8 + 4));
      unsigned int v11 = v10;
      this = physx::Sq::IncrementalAABBTree::remove(v3 + 8, *(float32x4_t **)(*(void *)(v3 + 1192) + 8 * v9), v9, *(void *)(v3 + 1216));
      if (this)
      {
        if (!*(void *)(this + 48))
        {
          uint64_t v13 = *(_DWORD **)(this + 40);
          if (*v13)
          {
            unint64_t v14 = 0;
            do
            {
              *(void *)(*(void *)(v3 + 1192) + 8 * v13[++v14]) = this;
              uint64_t v13 = *(_DWORD **)(this + 40);
            }
            while (v14 < *v13);
          }
        }
      }
      if (v11 != v9)
      {
        *(void *)(*(void *)(v3 + 1192) + 8 * v9) = *(void *)(*(void *)(v3 + 1192) + 8 * v11);
        uint64_t v15 = v11;
        int v16 = *(unsigned int **)(*(void *)(*(void *)(v3 + 1192) + 8 * v9) + 40);
        uint64_t v17 = *v16;
        if (v17)
        {
          float v18 = v16 + 1;
          while (*v18 != v11)
          {
            ++v18;
            if (!--v17) {
              goto LABEL_19;
            }
          }
          *float v18 = v9;
        }
LABEL_19:
        uint64_t v19 = *(void *)(v3 + 1288);
        float v20 = (_DWORD *)(v19 + 4 * v11);
        char v33 = 0;
        this = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(v3 + 1232), (int *)(v19 + 4 * v15), &v33, v12);
        if (!v33) {
          *(_DWORD *)this = *v20;
        }
        *(_DWORD *)(this + 4) = v9;
        *(_DWORD *)(*(void *)(v3 + 1288) + 4 * v9) = *(_DWORD *)(*(void *)(v3 + 1288) + 4 * v15);
      }
      if (*(_DWORD *)(v3 + 1284))
      {
        uint64_t v21 = *(void *)(v3 + 1256);
        float v22 = (_DWORD *)(v21 + 4 * ((*(_DWORD *)(v3 + 1268) - 1) & v5));
        uint64_t v23 = *v22;
        if (v23 != -1)
        {
          uint64_t v24 = *(void *)(v3 + 1240);
          uint64_t v25 = *(void *)(v3 + 1248);
          if (*(_DWORD *)(v24 + 8 * v23) == a2)
          {
LABEL_28:
            *float v22 = *(_DWORD *)(v25 + 4 * v23);
            unsigned int v27 = *(_DWORD *)(v3 + 1284) - 1;
            *(_DWORD *)(v3 + 1284) = v27;
            ++*(_DWORD *)(v3 + 1280);
            if (v23 != v27)
            {
              *(void *)(v24 + 8 * v23) = *(void *)(v24 + 8 * v27);
              *(_DWORD *)(v25 + 4 * v23) = *(_DWORD *)(v25 + 4 * v27);
              unsigned int v28 = 9
                  * ((*(_DWORD *)(v24 + 8 * v23) + ~(*(_DWORD *)(v24 + 8 * v23) << 15)) ^ ((*(_DWORD *)(v24 + 8 * v23) + ~(*(_DWORD *)(v24 + 8 * v23) << 15)) >> 10));
              float v29 = (_DWORD *)(v21
                             + 4
                             * ((((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6))
                                                                                      + ~((v28 ^ (v28 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(v3 + 1268) - 1)));
              uint64_t v30 = *(unsigned int *)(v3 + 1284);
              uint64_t v31 = *v29;
              if (v31 != v30)
              {
                do
                {
                  uint64_t v32 = v31;
                  uint64_t v31 = *(unsigned int *)(v25 + 4 * v31);
                }
                while (v31 != v30);
                float v29 = (_DWORD *)(v25 + 4 * v32);
              }
              _DWORD *v29 = v23;
            }
            --*(_DWORD *)(v3 + 1276);
          }
          else
          {
            while (1)
            {
              uint64_t v26 = v23;
              uint64_t v23 = *(unsigned int *)(v25 + 4 * v23);
              if (v23 == -1) {
                break;
              }
              if (*(_DWORD *)(v24 + 8 * v23) == a2)
              {
                float v22 = (_DWORD *)(v25 + 4 * v26);
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::updateCompound(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 1284))
  {
    uint64_t v3 = result;
    unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v5 = *(unsigned int *)(*(void *)(result + 1256)
                         + 4
                         * ((*(_DWORD *)(result + 1268) - 1) & (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16))));
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(result + 1240);
      while (*(_DWORD *)(v6 + 8 * v5) != a2)
      {
        uint64_t v5 = *(unsigned int *)(*(void *)(result + 1248) + 4 * v5);
        if (v5 == -1) {
          return result;
        }
      }
      uint64_t v7 = *(unsigned int *)(v6 + 8 * v5 + 4);
      uint64_t v8 = *(void *)(result + 1224) + 56 * v7;
      uint64_t v9 = *(float **)(*(void *)v8 + 1144);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)a3;
      *(void *)(v8 + 4physx::Sq::AABBTree::release(this, 0) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 48) = *(_DWORD *)(a3 + 24);
      float v10 = v9[1];
      float v11 = v9[2];
      float v12 = v9[4];
      float v13 = v9[5];
      float v14 = v9[6];
      float v15 = (float)((float)(*v9 + v12) * 0.5) + (float)((float)(*v9 + v12) * 0.5);
      float v16 = (float)((float)(v10 + v13) * 0.5) + (float)((float)(v10 + v13) * 0.5);
      float v17 = (float)((float)(v11 + v14) * 0.5) + (float)((float)(v11 + v14) * 0.5);
      float v19 = *(float *)(a3 + 8);
      float v18 = *(float *)(a3 + 12);
      float v20 = (float)(v18 * v18) + -0.5;
      float v21 = *(float *)a3;
      float v22 = *(float *)(a3 + 4);
      float v23 = (float)((float)(v16 * v22) + (float)(*(float *)a3 * v15)) + (float)(v19 * v17);
      float v24 = (float)((float)(v18 * (float)((float)(v22 * v17) - (float)(v19 * v16))) + (float)(v15 * v20))
          + (float)(*(float *)a3 * v23);
      float v25 = (float)((float)(v18 * (float)((float)(v19 * v15) - (float)(*(float *)a3 * v17))) + (float)(v16 * v20))
          + (float)(v22 * v23);
      float v26 = (float)((float)(v18 * (float)((float)(*(float *)a3 * v16) - (float)(v22 * v15))) + (float)(v17 * v20))
          + (float)(v19 * v23);
      float v27 = *(float *)(a3 + 16) + v24;
      float v28 = *(float *)(a3 + 20) + v25;
      float v29 = *(float *)(a3 + 24) + v26;
      float v30 = v22 + v22;
      float v31 = v19 + v19;
      float v32 = v22 * (float)(v22 + v22);
      float v33 = v19 * (float)(v19 + v19);
      float v34 = (float)(v21 + v21) * v22;
      float v35 = (float)(v21 + v21) * v19;
      float v36 = v18 * (float)(v21 + v21);
      float v37 = v30 * v19;
      float v38 = v18 * v30;
      float v39 = v18 * v31;
      float v40 = 1.0 - (float)(v21 * (float)(v21 + v21));
      float v41 = (float)(v12 - *v9) * 0.5;
      float v42 = (float)(v13 - v10) * 0.5;
      float v43 = (float)(v14 - v11) * 0.5;
      float v44 = fabsf(v43 * (float)(v35 + v38))
          + (float)(fabsf(v41 * (float)((float)(1.0 - v32) - v33)) + fabsf(v42 * (float)(v34 - v39)));
      float v45 = fabsf(v43 * (float)(v37 - v36)) + (float)(fabsf(v41 * (float)(v34 + v39)) + fabsf(v42 * (float)(v40 - v33)));
      float v46 = fabsf(v43 * (float)(v40 - v32)) + (float)(fabsf(v41 * (float)(v35 - v38)) + fabsf(v42 * (float)(v36 + v37)));
      uint64_t v47 = *(void *)(result + 1216);
      float32x4_t v48 = (float *)(v47 + 24 * v7);
      *float32x4_t v48 = v27 - v44;
      v48[1] = v28 - v45;
      v48[2] = v29 - v46;
      v48[3] = v27 + v44;
      v48[4] = v28 + v45;
      void v48[5] = v29 + v46;
      *(_DWORD *)(result + 1312) = 0;
      int8x8_t v49 = physx::Sq::IncrementalAABBTree::update(result + 8, *(float32x4_t **)(*(void *)(result + 1192) + 8 * v7), v7, v47, result + 1304);
      return physx::Sq::BVHCompoundPruner::updateMapping(v3, v7, (uint64_t)v49);
    }
  }
  return result;
}

uint64_t physx::Sq::BVHCompoundPruner::raycast(void *a1, float32x2_t *a2, float32x2_t *a3, float *a4, uint64_t a5, __int16 *a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1[144];
  uint64_t v10 = 1;
  if (!v9) {
    return v10;
  }
  int v12 = 0;
  uint64_t v94 = 0;
  int v95 = 0;
  __int16 v13 = *a6;
  v92[0] = &unk_26E728008;
  v92[1] = a2;
  v92[2] = a3;
  v92[3] = &v94;
  v92[4] = a5;
  __int16 v93 = v13;
  float v14 = a2[1].f32[0] + a2[1].f32[0];
  float32x2_t v15 = vadd_f32(*a2, *a2);
  *(float32x2_t *)a9.f32 = vadd_f32(*a3, *a3);
  double v16 = COERCE_DOUBLE(vadd_f32(v15, vmul_n_f32(*(float32x2_t *)a9.f32, *a4)));
  double v17 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)a9.f32), (int8x8_t)v15, vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a9.f32), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v18.f32 = v15;
  v18.i64[1] = LODWORD(v14);
  float v19 = a3[1].f32[0] + a3[1].f32[0];
  float32x4_t v22 = a9;
  v22.f32[2] = v19;
  uint64_t v20 = a1[153];
  int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  v22.i32[3] = 0;
  *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)a9.f32, v21, 4uLL);
  v23.i64[1] = a9.u32[0];
  float32x4_t v24 = vabsq_f32(v22);
  *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), 4uLL);
  v25.i64[1] = v24.u32[0];
  float v26 = v14 + (float)(v19 * *a4);
  float v27 = -3.4028e38;
  if (v19 >= 0.0) {
    float v27 = 3.4028e38;
  }
  if (v19 != 0.0) {
    float v14 = v27;
  }
  if (*a4 >= 3.4028e38)
  {
    *(double *)v28.i64 = v17;
  }
  else
  {
    float v14 = v26;
    *(double *)v28.i64 = v16;
  }
  v28.i64[1] = LODWORD(v14);
  uint64_t v29 = a1[152];
  float32x4_t v30 = vminq_f32(v18, v28);
  float32x4_t v31 = vmaxq_f32(v18, v28);
  uint64_t v100 = 0x10000000100;
  char v98 = 1;
  float32x4_t v99 = v97;
  v97[0] = v9;
  float32x4_t v32 = vnegq_f32(v23);
  float32x4_t v86 = v22;
  float32x4_t v87 = v18;
  float32x4_t v84 = v25;
  float32x4_t v85 = v24;
  float32x4_t v83 = v32;
  while (1)
  {
    float v33 = (float32x4_t *)v99[v12];
    float32x4_t v34 = v33[1];
    int8x16_t v35 = (int8x16_t)vsubq_f32(v34, *v33);
    float32x4_t v36 = (float32x4_t)v35;
    v36.i32[3] = 0;
    float32x4_t v37 = vaddq_f32(v34, *v33);
    v37.i32[3] = 0;
    float32x4_t v38 = vaddq_f32(v37, v36);
    float32x4_t v39 = vsubq_f32(v37, v36);
    float32x4_t v40 = vsubq_f32(v18, v37);
    *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), 4uLL);
    v41.i64[1] = v40.u32[0];
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
    v42.i64[1] = v35.u32[0];
    *(int16x4_t *)v40.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v38, v30), (int8x16_t)vcgeq_f32(v31, v39)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v42), v25, v36), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v41), v40, v32)))));
    if (vuzp1_s8(*(int8x8_t *)v40.f32, *(int8x8_t *)v40.f32).u32[0] == -1) {
      break;
    }
LABEL_39:
    if (!v12--)
    {
      uint64_t v10 = 1;
      goto LABEL_42;
    }
  }
  float v43 = *a4;
  float v96 = *a4;
  if (v33[3].i64[0])
  {
    float32x4_t v25 = v84;
    float32x4_t v24 = v85;
    float32x4_t v32 = v83;
    float32x4_t v88 = v31;
    float32x4_t v90 = v30;
    do
    {
      float v44 = (float32x4_t *)v33[2].i64[1];
      float32x4_t v45 = v44[1];
      int8x16_t v46 = (int8x16_t)vsubq_f32(v45, *v44);
      float32x4_t v47 = (float32x4_t)v46;
      v47.i32[3] = 0;
      float32x4_t v48 = vaddq_f32(v45, *v44);
      v48.i32[3] = 0;
      float32x4_t v49 = vsubq_f32(v18, v48);
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), 4uLL);
      v50.i64[1] = v49.u32[0];
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), 4uLL);
      v51.i64[1] = v46.u32[0];
      unsigned __int32 v52 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v48, v47), v30), (int8x16_t)vcgeq_f32(v31, vsubq_f32(v48, v47))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v51), v25, v47), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v50), v49, v32))))), *(int8x8_t *)v48.f32).u32[0];
      float32x4_t v53 = v44[4];
      float32x4_t v54 = v44[5];
      int8x16_t v55 = (int8x16_t)vsubq_f32(v54, v53);
      float32x4_t v56 = (float32x4_t)v55;
      v56.i32[3] = 0;
      float32x4_t v57 = vaddq_f32(v54, v53);
      v57.i32[3] = 0;
      float32x4_t v58 = vsubq_f32(v18, v57);
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
      v50.i64[1] = v58.u32[0];
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), 4uLL);
      v51.i64[1] = v55.u32[0];
      unsigned __int32 v59 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v57, v56), v30), (int8x16_t)vcgeq_f32(v31, vsubq_f32(v57, v56))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v24, v51), v25, v56), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v50), v58, v32))))), *(int8x8_t *)v48.f32).u32[0];
      if (v52 == -1 && v59 == -1)
      {
        float32x4_t v62 = vmulq_f32(v22, vsubq_f32(v57, v48));
        v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
        v62.f32[0] = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32).f32[0];
        v99[v12] = &v44[4 * (unint64_t)(v62.f32[0] > 0.0)];
        float v33 = &v44[4 * (unint64_t)(v62.f32[0] <= 0.0)];
        if (v12 + 1 == (HIDWORD(v100) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v97, 2 * (v12 + 1));
          float32x4_t v31 = v88;
          float32x4_t v30 = v90;
          float32x4_t v32 = v83;
          float32x4_t v25 = v84;
          float32x4_t v24 = v85;
          float32x4_t v22 = v86;
          float32x4_t v18 = v87;
        }
        ++v12;
      }
      else
      {
        if (v52 == -1) {
          float v33 = (float32x4_t *)v33[2].i64[1];
        }
        else {
          float v33 = v44 + 4;
        }
        if (v52 != -1 && v59 != -1) {
          goto LABEL_39;
        }
      }
    }
    while (v33[3].i64[0]);
    float v43 = *a4;
  }
  uint64_t v63 = (unsigned int *)v33[2].i64[1];
  unsigned int v64 = *v63;
  if (!*v63)
  {
LABEL_38:
    float32x4_t v25 = v84;
    float32x4_t v24 = v85;
    float32x4_t v32 = v83;
    goto LABEL_39;
  }
  float32x4_t v65 = v63 + 1;
  unsigned int v66 = *v63;
  while (1)
  {
    unsigned int v68 = *v65++;
    unsigned int v67 = v68;
    if (v64 < 2) {
      break;
    }
    uint64_t v69 = v29 + 24 * v67;
    float32x4_t v70 = *(float32x4_t *)(v69 + 12);
    float32x4_t v71 = vaddq_f32(*(float32x4_t *)v69, v70);
    int8x16_t v72 = (int8x16_t)vsubq_f32(v70, *(float32x4_t *)v69);
    v71.i32[3] = 0;
    float32x4_t v73 = (float32x4_t)v72;
    v73.i32[3] = 0;
    float32x4_t v74 = vaddq_f32(v71, v73);
    float32x4_t v75 = vsubq_f32(v71, v73);
    float32x4_t v76 = vsubq_f32(v18, v71);
    *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v76.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), 4uLL);
    v77.i64[1] = v76.u32[0];
    *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), 4uLL);
    v78.i64[1] = v72.u32[0];
    *(int16x4_t *)v72.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v74, v30), (int8x16_t)vcgeq_f32(v31, v75)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v85, v78), v84, v73), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v77), v76, v83)))));
    if (vuzp1_s8(*(int8x8_t *)v72.i8, *(int8x8_t *)v72.i8).u32[0] == -1) {
      break;
    }
LABEL_37:
    if (!--v66) {
      goto LABEL_38;
    }
  }
  float32x4_t v89 = v31;
  float32x4_t v91 = v30;
  if ((*(unsigned int (**)(void *, float *, uint64_t))(v92[0] + 16))(v92, &v96, v20 + 56 * v67))
  {
    float v79 = v96;
    float32x4_t v22 = v86;
    float32x4_t v18 = v87;
    float32x4_t v31 = v89;
    float32x4_t v30 = v91;
    if (v96 < v43)
    {
      *a4 = v96;
      float32x4_t v80 = vmlaq_n_f32(v87, v86, v79);
      v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
      float32x4_t v30 = vminq_f32(v87, v80);
      float32x4_t v31 = vmaxq_f32(v87, v80);
    }
    goto LABEL_37;
  }
  uint64_t v10 = 0;
LABEL_42:
  if ((v100 & 0x8000000000000000) == 0 && (v100 & 0x7FFFFFFF00000000) != 0 && v99 != v97 && v99) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v10;
}

uint64_t physx::Sq::BVHCompoundPruner::overlap(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  uint64_t v11 = a1[144];
  if (!v11) {
    return 1;
  }
  uint64_t v13 = 1;
  switch(*(_WORD *)(a2 + 98))
  {
    case 0:
      float32x4_t v17 = *(float32x4_t *)(a2 + 100);
      v17.i64[1] = *(unsigned int *)(a2 + 108);
      float32x4_t v143 = v17;
      v17.f32[0] = *(float *)(a2 + 112) * *(float *)(a2 + 112);
      float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
      __int16 v19 = *a4;
      uint64_t v147 = a2;
      uint64_t v148 = a3;
      __int16 v149 = v19;
      float v146 = (uint64_t (**)(void **, _DWORD *, uint64_t))&unk_26E727FC8;
      uint64_t v20 = a1[153];
      uint64_t v21 = a1[152];
      uint64_t v154 = 0x10000000100;
      unsigned int v22 = 1;
      char v152 = 1;
      float v153 = v151;
      v151[0].i64[0] = v11;
      v23.i64[0] = 0x3F0000003F000000;
      v23.i64[1] = 0x3F0000003F000000;
      while (1)
      {
        unsigned int v24 = 2 * v22--;
        float32x4_t v25 = (float32x4_t *)v153->i64[v22];
        float32x4_t v26 = v25[1];
        float32x4_t v27 = vmulq_f32(vsubq_f32(v26, *v25), v23);
        v27.i32[3] = 0;
        float32x4_t v28 = vaddq_f32(v26, *v25);
        while (1)
        {
          float32x4_t v29 = vmulq_f32(v28, v23);
          v29.i32[3] = 0;
          float32x4_t v30 = vsubq_f32(v143, v29);
          float32x4_t v31 = vnegq_f32(v27);
          v31.i32[3] = 0;
          float32x4_t v32 = vsubq_f32(v30, vmaxq_f32(vminq_f32(v30, v27), v31));
          float32x4_t v33 = vmulq_f32(v32, v32);
          v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
          *(int16x4_t *)v33.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v18, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v33.f32, *(int8x8_t *)v33.f32).u32[0] != -1) {
            goto LABEL_16;
          }
          float32x4_t v34 = &v25[2].i8[8];
          float32x4_t v25 = (float32x4_t *)v25[2].i64[1];
          if (!*((void *)v34 + 1)) {
            break;
          }
          v153->i64[v22] = (uint64_t)&v25[4];
          if (v22 + 1 == (HIDWORD(v154) & 0x7FFFFFFF))
          {
            physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v151, v24);
            v23.i64[0] = 0x3F0000003F000000;
            v23.i64[1] = 0x3F0000003F000000;
          }
          float32x4_t v35 = v25[1];
          float32x4_t v27 = vmulq_f32(vsubq_f32(v35, *v25), v23);
          v27.i32[3] = 0;
          float32x4_t v28 = vaddq_f32(v35, *v25);
          v24 += 2;
          ++v22;
        }
        unsigned int v36 = v25->i32[0];
        if (v25->i32[0])
        {
          float32x4_t v37 = &v25->i32[1];
          unsigned int v38 = v36;
          do
          {
            unsigned int v40 = *v37++;
            unsigned int v39 = v40;
            if (v36 < 2) {
              goto LABEL_70;
            }
            uint64_t v41 = v21 + 24 * v39;
            float32x4_t v42 = *(float32x4_t *)(v41 + 12);
            float32x4_t v43 = vmulq_f32(vsubq_f32(v42, *(float32x4_t *)v41), v23);
            float32x4_t v44 = vmulq_f32(vaddq_f32(*(float32x4_t *)v41, v42), v23);
            v44.i32[3] = 0;
            v43.i32[3] = 0;
            float32x4_t v45 = vsubq_f32(v143, v44);
            float32x4_t v46 = vnegq_f32(v43);
            v46.i32[3] = 0;
            float32x4_t v47 = vsubq_f32(v45, vmaxq_f32(vminq_f32(v45, v43), v46));
            float32x4_t v48 = vmulq_f32(v47, v47);
            v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
            *(int16x4_t *)v48.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v18, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32)), 0);
            if (vuzp1_s8(*(int8x8_t *)v48.f32, *(int8x8_t *)v48.f32).u32[0] == -1)
            {
LABEL_70:
              int v150 = 0;
              int v49 = v146[2]((void **)&v146, &v150, v20 + 56 * v39);
              v23.i64[0] = 0x3F0000003F000000;
              v23.i64[1] = 0x3F0000003F000000;
              if (!v49) {
                goto LABEL_61;
              }
            }
            --v38;
          }
          while (v38);
        }
LABEL_16:
        if (!v22) {
          goto LABEL_60;
        }
      }
    case 2:
      float v50 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
      float v51 = *(float *)(a2 + 120);
      *(float *)&a7 = *(float *)(a2 + 124) * 1.01;
      float32x2_t v52 = *(float32x2_t *)(a2 + 112);
      float32x2_t v53 = *(float32x2_t *)(a2 + 12);
      double v54 = COERCE_DOUBLE(vadd_f32(v52, vmul_n_f32(v53, v50)));
      double v55 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v53), (int8x8_t)v52, vbsl_s8((int8x8_t)vcgez_f32(v53), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
      *(float32x2_t *)v56.f32 = v52;
      v56.i64[1] = LODWORD(v51);
      float v57 = *(float *)(a2 + 20);
      *(float32x2_t *)v58.f32 = v53;
      v58.i64[1] = LODWORD(v57);
      *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)v53, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
      v59.i64[1] = v53.u32[0];
      int32x4_t v60 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      v60.i32[3] = 0;
      float32x4_t v140 = (float32x4_t)v60;
      float32x4_t v141 = v58;
      int8x16_t v61 = (int8x16_t)vabsq_f32(v58);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v61.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), 4uLL);
      v58.i64[1] = v61.u32[0];
      float32x4_t v138 = v58;
      float32x4_t v139 = (float32x4_t)v61;
      float v62 = v51 + (float)(v50 * v57);
      float v63 = -3.4028e38;
      if (v57 >= 0.0) {
        float v63 = 3.4028e38;
      }
      if (v57 != 0.0) {
        float v51 = v63;
      }
      BOOL v64 = v50 < 3.4028e38;
      if (v50 >= 3.4028e38) {
        float v65 = v51;
      }
      else {
        float v65 = v62;
      }
      if (v64) {
        *(double *)v66.i64 = v54;
      }
      else {
        *(double *)v66.i64 = v55;
      }
      v66.i64[1] = LODWORD(v65);
      __int16 v67 = *a4;
      float32x4_t v144 = v56;
      float32x4_t v136 = vmaxq_f32(v56, v66);
      float32x4_t v137 = vminq_f32(v56, v66);
      uint64_t v147 = a2;
      uint64_t v148 = a3;
      __int16 v149 = v67;
      float v146 = (uint64_t (**)(void **, _DWORD *, uint64_t))&unk_26E727F88;
      uint64_t v68 = a1[153];
      uint64_t v69 = a1[152];
      uint64_t v154 = 0x10000000100;
      unsigned int v70 = 1;
      char v152 = 1;
      float v153 = v151;
      v151[0].i64[0] = v11;
      float32x4_t v135 = vnegq_f32(v59);
      v71.i64[0] = 0x3F0000003F000000;
      v71.i64[1] = 0x3F0000003F000000;
      while (2)
      {
        unsigned int v72 = 2 * v70--;
        float32x4_t v73 = (float32x4_t *)v153->i64[v70];
        float32x4_t v74 = v73[1];
        float32x4_t v75 = vmulq_f32(vsubq_f32(v74, *v73), v71);
        v75.i32[3] = 0;
        float32x4_t v76 = vaddq_f32(v74, *v73);
        while (2)
        {
          float32x4_t v77 = vmulq_f32(v76, v71);
          v77.i32[3] = 0;
          float32x4_t v78 = vaddq_f32(v140, v75);
          float32x4_t v79 = vaddq_f32(v77, v78);
          float32x4_t v80 = vsubq_f32(v77, v78);
          float32x4_t v81 = vsubq_f32(v144, v77);
          *(int8x8_t *)v82.f32 = vext_s8(*(int8x8_t *)v81.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), 4uLL);
          v82.i64[1] = v81.u32[0];
          *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v78.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), 4uLL);
          v83.i64[1] = v78.u32[0];
          *(int16x4_t *)v78.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v136, v80), (int8x16_t)vcgeq_f32(v79, v137)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v139, v83), v138, v78), vabsq_f32(vmlaq_f32(vmulq_f32(v141, v82), v81, v135)))));
          if (vuzp1_s8(*(int8x8_t *)v78.f32, *(int8x8_t *)v78.f32).u32[0] == -1)
          {
            float32x4_t v84 = &v73[2].i8[8];
            float32x4_t v73 = (float32x4_t *)v73[2].i64[1];
            if (*((void *)v84 + 1))
            {
              v153->i64[v70] = (uint64_t)&v73[4];
              if (v70 + 1 == (HIDWORD(v154) & 0x7FFFFFFF))
              {
                physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v151, v72);
                v71.i64[0] = 0x3F0000003F000000;
                v71.i64[1] = 0x3F0000003F000000;
              }
              float32x4_t v85 = v73[1];
              float32x4_t v75 = vmulq_f32(vsubq_f32(v85, *v73), v71);
              v75.i32[3] = 0;
              float32x4_t v76 = vaddq_f32(v85, *v73);
              v72 += 2;
              ++v70;
              continue;
            }
            unsigned int v86 = v73->i32[0];
            if (v73->i32[0])
            {
              float32x4_t v87 = &v73->i32[1];
              unsigned int v88 = v86;
              while (1)
              {
                unsigned int v90 = *v87++;
                unsigned int v89 = v90;
                if (v86 < 2) {
                  goto LABEL_71;
                }
                uint64_t v91 = v69 + 24 * v89;
                float32x4_t v92 = *(float32x4_t *)(v91 + 12);
                float32x4_t v93 = vmulq_f32(vsubq_f32(v92, *(float32x4_t *)v91), v71);
                float32x4_t v94 = vmulq_f32(vaddq_f32(*(float32x4_t *)v91, v92), v71);
                v94.i32[3] = 0;
                v93.i32[3] = 0;
                float32x4_t v95 = vaddq_f32(v140, v93);
                float32x4_t v96 = vaddq_f32(v94, v95);
                float32x4_t v97 = vsubq_f32(v94, v95);
                float32x4_t v98 = vsubq_f32(v144, v94);
                *(int8x8_t *)v99.f32 = vext_s8(*(int8x8_t *)v98.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL), 4uLL);
                v99.i64[1] = v98.u32[0];
                *(int8x8_t *)v100.f32 = vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL), 4uLL);
                v100.i64[1] = v95.u32[0];
                *(int16x4_t *)v95.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v136, v97), (int8x16_t)vcgeq_f32(v96, v137)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v139, v100), v138, v95), vabsq_f32(vmlaq_f32(vmulq_f32(v141, v99), v98, v135)))));
                if (vuzp1_s8(*(int8x8_t *)v95.f32, *(int8x8_t *)v95.f32).u32[0] == -1)
                {
LABEL_71:
                  int v150 = 0;
                  int v101 = v146[2]((void **)&v146, &v150, v68 + 56 * v89);
                  v71.i64[0] = 0x3F0000003F000000;
                  v71.i64[1] = 0x3F0000003F000000;
                  if (!v101) {
                    goto LABEL_61;
                  }
                }
                if (!--v88) {
                  goto LABEL_42;
                }
              }
            }
          }
          break;
        }
LABEL_42:
        if (v70) {
          continue;
        }
        goto LABEL_60;
      }
    case 3:
      if (*(_WORD *)(a2 + 96)) {
        goto LABEL_45;
      }
      float v103 = *(float *)(a2 + 80);
      float v104 = *(float *)(a2 + 92);
      float32x2_t v105 = *(float32x2_t *)(a2 + 72);
      float32x2_t v106 = *(float32x2_t *)(a2 + 84);
      *(float32x2_t *)v107.f32 = vmul_f32(vadd_f32(v105, v106), (float32x2_t)0x3F0000003F000000);
      v107.f32[2] = (float)(v103 + v104) * 0.5;
      v107.i32[3] = 0;
      float v108 = v104 - v103;
      *(float32x2_t *)v109.f32 = vmul_f32(vsub_f32(v106, v105), (float32x2_t)0x3F0000003F000000);
      v109.i64[1] = COERCE_UNSIGNED_INT(v108 * 0.5);
      float32x4_t v142 = v109;
      float32x4_t v145 = v107;
      __int16 v110 = *a4;
      uint64_t v147 = a2;
      uint64_t v148 = a3;
      __int16 v149 = v110;
      float v146 = (uint64_t (**)(void **, _DWORD *, uint64_t))&unk_26E727F48;
      uint64_t v111 = a1[153];
      uint64_t v112 = a1[152];
      uint64_t v154 = 0x10000000100;
      unsigned int v113 = 1;
      char v152 = 1;
      float v153 = v151;
      v151[0].i64[0] = v11;
      v114.i64[0] = 0x3F0000003F000000;
      v114.i64[1] = 0x3F0000003F000000;
      break;
    case 4:
LABEL_45:
      physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v151, a2 + 48, (__int32 *)(a2 + 12), a2, a5, a6, a7, a8, a9, a10, a11);
      __int16 v102 = *a4;
      uint64_t v147 = a2;
      uint64_t v148 = a3;
      __int16 v149 = v102;
      float v146 = (uint64_t (**)(void **, _DWORD *, uint64_t))&unk_26E727EF8;
      return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::CompoundTree,MainTreeOBBOverlapCompoundPrunerCallback>::operator()(a1[153], a1[152], a1[144], v151, (uint64_t)&v146);
    default:
      return v13;
  }
  while (2)
  {
    unsigned int v115 = 2 * v113--;
    float v116 = (float32x4_t *)v153->i64[v113];
    float32x4_t v117 = v116[1];
    float32x4_t v118 = vmulq_f32(vsubq_f32(v117, *v116), v114);
    v118.i32[3] = 0;
    float32x4_t v119 = vaddq_f32(v117, *v116);
    while (1)
    {
      float32x4_t v120 = vmulq_f32(v119, v114);
      v120.i32[3] = 0;
      int8x8_t v121 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v142, v118), vabdq_f32(v120, v145)));
      if ((~vuzp1_s8(v121, v121).u32[0] & 0xFFFFFF) != 0) {
        break;
      }
      uint64_t v122 = &v116[2].i8[8];
      float v116 = (float32x4_t *)v116[2].i64[1];
      if (!*((void *)v122 + 1))
      {
        unsigned int v124 = v116->i32[0];
        if (v116->i32[0])
        {
          float v125 = &v116->i32[1];
          unsigned int v126 = v124;
          while (1)
          {
            unsigned int v128 = *v125++;
            unsigned int v127 = v128;
            if (v124 < 2
              || (uint64_t v129 = v112 + 24 * v127,
                  float32x4_t v130 = *(float32x4_t *)(v129 + 12),
                  float32x4_t v131 = vmulq_f32(vsubq_f32(v130, *(float32x4_t *)v129), v114),
                  float32x4_t v132 = vmulq_f32(vaddq_f32(*(float32x4_t *)v129, v130), v114),
                  v132.i32[3] = 0,
                  v131.i32[3] = 0,
                  *(int16x4_t *)v131.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(v142, v131), vabdq_f32(v132, v145))),
                  (~vuzp1_s8(*(int8x8_t *)v131.f32, *(int8x8_t *)v131.f32).u32[0] & 0xFFFFFF) == 0))
            {
              int v150 = 0;
              int v133 = v146[2]((void **)&v146, &v150, v111 + 56 * v127);
              v114.i64[0] = 0x3F0000003F000000;
              v114.i64[1] = 0x3F0000003F000000;
              if (!v133) {
                break;
              }
            }
            if (!--v126) {
              goto LABEL_59;
            }
          }
LABEL_61:
          uint64_t v13 = 0;
          goto LABEL_62;
        }
        break;
      }
      v153->i64[v113] = (uint64_t)&v116[4];
      if (v113 + 1 == (HIDWORD(v154) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v151, v115);
        v114.i64[0] = 0x3F0000003F000000;
        v114.i64[1] = 0x3F0000003F000000;
      }
      float32x4_t v123 = v116[1];
      float32x4_t v118 = vmulq_f32(vsubq_f32(v123, *v116), v114);
      v118.i32[3] = 0;
      float32x4_t v119 = vaddq_f32(v123, *v116);
      v115 += 2;
      ++v113;
    }
LABEL_59:
    if (v113) {
      continue;
    }
    break;
  }
LABEL_60:
  uint64_t v13 = 1;
LABEL_62:
  if ((v154 & 0x8000000000000000) == 0 && (v154 & 0x7FFFFFFF00000000) != 0 && v153 != v151 && v153) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v13;
}

uint64_t physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::CompoundTree,MainTreeOBBOverlapCompoundPrunerCallback>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0x10000000100;
  int v9 = 1;
  char v37 = 1;
  unsigned int v38 = v36;
  v36[0] = a3;
  while (1)
  {
    int v10 = v9 - 1;
    uint64_t v11 = (float32x4_t *)v38[v9 - 1];
    float32x4_t v12 = v11[1];
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = vmulq_f32(vsubq_f32(v12, *v11), v13);
    v14.i32[3] = 0;
    float32x4_t v15 = vmulq_f32(vaddq_f32(v12, *v11), v13);
    v15.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v15, v14))
    {
      unsigned int v16 = 2 * v9;
      while (1)
      {
        int v10 = v9 - 1;
        float32x4_t v17 = &v11[2].i8[8];
        uint64_t v11 = (float32x4_t *)v11[2].i64[1];
        if (!*((void *)v17 + 1)) {
          break;
        }
        v38[v10] = v11 + 4;
        if (v9 == (HIDWORD(v39) & 0x7FFFFFFF)) {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v36, v16);
        }
        float32x4_t v18 = v11[1];
        v19.i64[0] = 0x3F0000003F000000;
        v19.i64[1] = 0x3F0000003F000000;
        float32x4_t v20 = vmulq_f32(vsubq_f32(v18, *v11), v19);
        v20.i32[3] = 0;
        float32x4_t v21 = vmulq_f32(vaddq_f32(v18, *v11), v19);
        v21.i32[3] = 0;
        ++v9;
        v16 += 2;
        if (!physx::Gu::OBBAABBTests<true>::operator()(a4, v21, v20))
        {
          int v10 = v9 - 1;
          goto LABEL_15;
        }
      }
      unsigned int v22 = v11->i32[0];
      if (v11->i32[0]) {
        break;
      }
    }
LABEL_15:
    int v9 = v10;
    if (!v10)
    {
      uint64_t v33 = 1;
      goto LABEL_18;
    }
  }
  float32x4_t v23 = &v11->i32[1];
  unsigned int v24 = v22;
  while (1)
  {
    unsigned int v26 = *v23++;
    unsigned int v25 = v26;
    if (v22 < 2) {
      goto LABEL_26;
    }
    uint64_t v27 = a2 + 24 * v25;
    float32x4_t v28 = *(float32x4_t *)(v27 + 12);
    float32x4_t v29 = vaddq_f32(*(float32x4_t *)v27, v28);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    float32x4_t v31 = vmulq_f32(vsubq_f32(v28, *(float32x4_t *)v27), v30);
    float32x4_t v32 = vmulq_f32(v29, v30);
    v32.i32[3] = 0;
    v31.i32[3] = 0;
    if (physx::Gu::OBBAABBTests<true>::operator()(a4, v32, v31))
    {
LABEL_26:
      int v35 = 0;
      if (!(*(unsigned int (**)(uint64_t, int *, uint64_t))(*(void *)a5 + 16))(a5, &v35, a1 + 56 * v25)) {
        break;
      }
    }
    if (!--v24) {
      goto LABEL_15;
    }
  }
  uint64_t v33 = 0;
LABEL_18:
  if ((v39 & 0x8000000000000000) == 0 && (v39 & 0x7FFFFFFF00000000) != 0 && v38 != v36 && v38) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v33;
}

uint64_t physx::Sq::BVHCompoundPruner::sweep(void *a1, uint64_t a2, float32x2_t *a3, float *a4, uint64_t a5, __int16 *a6, double a7, double a8, double a9, double a10, float32x4_t a11)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v11 = a1[144];
  uint64_t v12 = 1;
  if (!v11) {
    return v12;
  }
  int v14 = 0;
  float v15 = *(float *)(a2 + 92);
  float v16 = *(float *)(a2 + 80);
  float v106 = (float)(v15 - v16) * 0.5;
  float v104 = (float)(v15 + v16) * 0.5;
  __int16 v17 = *a6;
  v101[0] = &unk_26E728040;
  v101[1] = &v103;
  v101[2] = a3;
  v101[3] = &v105;
  v101[4] = a5;
  __int16 v102 = v17;
  uint64_t v18 = a1[153];
  uint64_t v19 = a1[152];
  float v20 = v104 + v104;
  float32x2_t v21 = *(float32x2_t *)(a2 + 84);
  float32x2_t v22 = *(float32x2_t *)(a2 + 72);
  float32x2_t v105 = vmul_f32(vsub_f32(v21, v22), (float32x2_t)0x3F0000003F000000);
  float32x2_t v23 = vmul_f32(vadd_f32(v21, v22), (float32x2_t)0x3F0000003F000000);
  float32x2_t v24 = vadd_f32(v23, v23);
  *(float32x2_t *)a11.f32 = vadd_f32(*a3, *a3);
  float v25 = a3[1].f32[0] + a3[1].f32[0];
  *(float32x2_t *)v32.f32 = vadd_f32(v105, v105);
  double v26 = COERCE_DOUBLE(vadd_f32(v24, vmul_n_f32(*(float32x2_t *)a11.f32, *a4)));
  double v27 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)a11.f32), (int8x8_t)v24, vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)a11.f32), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v28.f32 = v24;
  v28.f32[2] = v104 + v104;
  v28.i32[3] = 0;
  float32x4_t v30 = a11;
  v30.f32[2] = v25;
  int8x8_t v29 = (int8x8_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v30.i32[3] = 0;
  *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)a11.f32, v29, 4uLL);
  v31.i64[1] = a11.u32[0];
  v32.f32[2] = v106 + v106;
  v32.i32[3] = 0;
  float32x4_t v33 = vabsq_f32(v30);
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
  v34.i64[1] = v33.u32[0];
  float v35 = -3.4028e38;
  if (v25 >= 0.0) {
    float v35 = 3.4028e38;
  }
  if (v25 != 0.0) {
    float v20 = v35;
  }
  if (*a4 >= 3.4028e38)
  {
    *(double *)v36.i64 = v27;
  }
  else
  {
    float v20 = (float)(v104 + v104) + (float)(v25 * *a4);
    *(double *)v36.i64 = v26;
  }
  v36.i64[1] = LODWORD(v20);
  float32x2_t v103 = v23;
  float32x4_t v37 = vminq_f32(v28, v36);
  float32x4_t v38 = vmaxq_f32(v28, v36);
  uint64_t v111 = 0x10000000100;
  char v109 = 1;
  __int16 v110 = v108;
  v108[0] = v11;
  float32x4_t v39 = vnegq_f32(v31);
  float32x4_t v95 = v30;
  float32x4_t v96 = v28;
  float32x4_t v93 = v33;
  float32x4_t v94 = v32;
  float32x4_t v91 = v39;
  float32x4_t v92 = v34;
  while (1)
  {
    uint64_t v40 = (float32x4_t *)v110[v14];
    float32x4_t v41 = v40[1];
    float32x4_t v42 = vsubq_f32(v41, *v40);
    v42.i32[3] = 0;
    float32x4_t v43 = vaddq_f32(v41, *v40);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(v32, v42);
    float32x4_t v45 = vaddq_f32(v43, v44);
    float32x4_t v46 = vsubq_f32(v43, v44);
    float32x4_t v47 = vsubq_f32(v28, v43);
    *(int8x8_t *)v48.f32 = vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), 4uLL);
    v48.i64[1] = v47.u32[0];
    *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v44.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), 4uLL);
    v49.i64[1] = v44.u32[0];
    *(int16x4_t *)v47.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v45, v37), (int8x16_t)vcgeq_f32(v38, v46)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v49), v34, v44), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v48), v47, v39)))));
    if (vuzp1_s8(*(int8x8_t *)v47.f32, *(int8x8_t *)v47.f32).u32[0] == -1) {
      break;
    }
LABEL_39:
    if (!v14--)
    {
      uint64_t v12 = 1;
      goto LABEL_42;
    }
  }
  float v50 = *a4;
  float v107 = *a4;
  if (v40[3].i64[0])
  {
    float32x4_t v33 = v93;
    float32x4_t v32 = v94;
    float32x4_t v39 = v91;
    float32x4_t v34 = v92;
    float32x4_t v97 = v38;
    float32x4_t v99 = v37;
    do
    {
      float v51 = (float32x4_t *)v40[2].i64[1];
      float32x4_t v52 = v51[1];
      float32x4_t v53 = vsubq_f32(v52, *v51);
      v53.i32[3] = 0;
      float32x4_t v54 = vaddq_f32(v52, *v51);
      v54.i32[3] = 0;
      float32x4_t v55 = vaddq_f32(v32, v53);
      float32x4_t v56 = vsubq_f32(v28, v54);
      *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
      v57.i64[1] = v56.u32[0];
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
      v58.i64[1] = v55.u32[0];
      unsigned __int32 v59 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v54, v55), v37), (int8x16_t)vcgeq_f32(v38, vsubq_f32(v54, v55))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v58), v34, v55), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v57), v56, v39))))), *(int8x8_t *)v54.f32).u32[0];
      float32x4_t v60 = v51[4];
      float32x4_t v61 = v51[5];
      float32x4_t v62 = vsubq_f32(v61, v60);
      v62.i32[3] = 0;
      float32x4_t v63 = vaddq_f32(v61, v60);
      v63.i32[3] = 0;
      float32x4_t v64 = vaddq_f32(v32, v62);
      float32x4_t v65 = vsubq_f32(v28, v63);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), 4uLL);
      v58.i64[1] = v65.u32[0];
      *(int8x8_t *)v66.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), 4uLL);
      v66.i64[1] = v64.u32[0];
      unsigned __int32 v67 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v63, v64), v37), (int8x16_t)vcgeq_f32(v38, vsubq_f32(v63, v64))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v66), v34, v64), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v58), v65, v39))))), *(int8x8_t *)v54.f32).u32[0];
      if (v59 == -1 && v67 == -1)
      {
        float32x4_t v70 = vmulq_f32(v30, vsubq_f32(v63, v54));
        v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
        v70.f32[0] = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32).f32[0];
        v110[v14] = &v51[4 * (unint64_t)(v70.f32[0] > 0.0)];
        uint64_t v40 = &v51[4 * (unint64_t)(v70.f32[0] <= 0.0)];
        if (v14 + 1 == (HIDWORD(v111) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized((uint64_t)v108, 2 * (v14 + 1));
          float32x4_t v38 = v97;
          float32x4_t v37 = v99;
          float32x4_t v39 = v91;
          float32x4_t v34 = v92;
          float32x4_t v33 = v93;
          float32x4_t v32 = v94;
          float32x4_t v30 = v95;
          float32x4_t v28 = v96;
        }
        ++v14;
      }
      else
      {
        if (v59 == -1) {
          uint64_t v40 = (float32x4_t *)v40[2].i64[1];
        }
        else {
          uint64_t v40 = v51 + 4;
        }
        if (v59 != -1 && v67 != -1) {
          goto LABEL_39;
        }
      }
    }
    while (v40[3].i64[0]);
    float v50 = *a4;
  }
  float32x4_t v71 = (unsigned int *)v40[2].i64[1];
  unsigned int v72 = *v71;
  if (!*v71)
  {
LABEL_38:
    float32x4_t v33 = v93;
    float32x4_t v32 = v94;
    float32x4_t v39 = v91;
    float32x4_t v34 = v92;
    goto LABEL_39;
  }
  float32x4_t v73 = v71 + 1;
  unsigned int v74 = *v71;
  while (1)
  {
    unsigned int v76 = *v73++;
    unsigned int v75 = v76;
    if (v72 < 2) {
      break;
    }
    uint64_t v77 = v19 + 24 * v75;
    float32x4_t v78 = *(float32x4_t *)(v77 + 12);
    float32x4_t v79 = vaddq_f32(*(float32x4_t *)v77, v78);
    float32x4_t v80 = vsubq_f32(v78, *(float32x4_t *)v77);
    v79.i32[3] = 0;
    v80.i32[3] = 0;
    float32x4_t v81 = vaddq_f32(v94, v80);
    float32x4_t v82 = vaddq_f32(v79, v81);
    float32x4_t v83 = vsubq_f32(v79, v81);
    float32x4_t v84 = vsubq_f32(v28, v79);
    *(int8x8_t *)v85.f32 = vext_s8(*(int8x8_t *)v84.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), 4uLL);
    v85.i64[1] = v84.u32[0];
    *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v81.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), 4uLL);
    v86.i64[1] = v81.u32[0];
    *(int16x4_t *)v81.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v82, v37), (int8x16_t)vcgeq_f32(v38, v83)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v93, v86), v92, v81), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v85), v84, v91)))));
    if (vuzp1_s8(*(int8x8_t *)v81.f32, *(int8x8_t *)v81.f32).u32[0] == -1) {
      break;
    }
LABEL_37:
    if (!--v74) {
      goto LABEL_38;
    }
  }
  float32x4_t v98 = v38;
  float32x4_t v100 = v37;
  if ((*(unsigned int (**)(void *, float *, uint64_t))(v101[0] + 16))(v101, &v107, v18 + 56 * v75))
  {
    float v87 = v107;
    float32x4_t v30 = v95;
    float32x4_t v28 = v96;
    float32x4_t v38 = v98;
    float32x4_t v37 = v100;
    if (v107 < v50)
    {
      *a4 = v107;
      float32x4_t v88 = vmlaq_n_f32(v96, v95, v87);
      v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
      float32x4_t v37 = vminq_f32(v96, v88);
      float32x4_t v38 = vmaxq_f32(v96, v88);
    }
    goto LABEL_37;
  }
  uint64_t v12 = 0;
LABEL_42:
  if ((v111 & 0x8000000000000000) == 0 && (v111 & 0x7FFFFFFF00000000) != 0 && v110 != v108 && v110) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v12;
}

uint64_t physx::Sq::BVHCompoundPruner::getPayload(physx::Sq::BVHCompoundPruner *this, unsigned int a2, int a3)
{
  unsigned int v3 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  uint64_t v5 = *(unsigned int *)(*((void *)this + 157) + 4 * ((*((_DWORD *)this + 317) - 1) & (v4 ^ HIWORD(v4))));
  for (i = *((void *)this + 155); *(_DWORD *)(i + 8 * v5) != a3; uint64_t v5 = *(unsigned int *)(*((void *)this + 156)
                                                                                         + 4 * v5))
    ;
  uint64_t v7 = *(void *)(*((void *)this + 153) + 56 * *(unsigned int *)(i + 8 * v5 + 4) + 8);
  return *(void *)(v7 + 16) + 16 * *(unsigned int *)(*(void *)(v7 + 24) + 4 * a2);
}

uint64_t physx::Sq::BVHCompoundPruner::getPayload(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  unsigned int v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 1256) + 4 * ((*(_DWORD *)(a1 + 1268) - 1) & (v5 ^ HIWORD(v5))));
  for (i = *(void *)(a1 + 1240); *(_DWORD *)(i + 8 * v6) != a3; uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 1248) + 4 * v6))
    ;
  uint64_t v8 = *(void **)(*(void *)(a1 + 1224) + 56 * *(unsigned int *)(i + 8 * v6 + 4) + 8);
  uint64_t v9 = *(unsigned int *)(v8[3] + 4 * a2);
  *a4 = v8[1] + 24 * v9;
  return v8[2] + 16 * v9;
}

uint64_t physx::Sq::BVHCompoundPruner::updateObjectAfterManualBoundsUpdates(uint64_t this, int a2, unsigned int a3)
{
  if (*(_DWORD *)(this + 1284))
  {
    unsigned int v3 = (physx::Sq::BVHCompoundPruner *)this;
    unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v5 = *(unsigned int *)(*(void *)(this + 1256)
                         + 4
                         * ((*(_DWORD *)(this + 1268) - 1) & (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16))));
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(this + 1240);
      while (*(_DWORD *)(v6 + 8 * v5) != a2)
      {
        uint64_t v5 = *(unsigned int *)(*(void *)(this + 1248) + 4 * v5);
        if (v5 == -1) {
          return this;
        }
      }
      uint64_t v7 = v6 + 8 * v5;
      physx::Sq::CompoundTree::updateObjectAfterManualBoundsUpdates((physx::Sq::CompoundTree *)(*(void *)(this + 1224) + 56 * *(unsigned int *)(v7 + 4)), a3);
      unsigned int v8 = *(_DWORD *)(v7 + 4);
      return physx::Sq::BVHCompoundPruner::updateMainTreeNode(v3, v8);
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::updateMainTreeNode(physx::Sq::BVHCompoundPruner *this, unsigned int a2)
{
  unsigned int v4 = (float *)(*((void *)this + 153) + 56 * a2);
  uint64_t v5 = *(float **)(*(void *)v4 + 1144);
  float v6 = v5[1];
  float v7 = v5[2];
  float v8 = v5[4];
  float v9 = v5[5];
  float v10 = v5[6];
  float v11 = (float)((float)(*v5 + v8) * 0.5) + (float)((float)(*v5 + v8) * 0.5);
  float v12 = (float)((float)(v6 + v9) * 0.5) + (float)((float)(v6 + v9) * 0.5);
  float v13 = (float)((float)(v7 + v10) * 0.5) + (float)((float)(v7 + v10) * 0.5);
  float v15 = v4[8];
  float v14 = v4[9];
  float v16 = (float)(v14 * v14) + -0.5;
  float v17 = v4[6];
  float v18 = v4[7];
  float v19 = (float)((float)(v12 * v18) + (float)(v17 * v11)) + (float)(v15 * v13);
  float v20 = (float)((float)(v14 * (float)((float)(v18 * v13) - (float)(v15 * v12))) + (float)(v11 * v16))
      + (float)(v17 * v19);
  float v21 = (float)((float)(v14 * (float)((float)(v15 * v11) - (float)(v17 * v13))) + (float)(v12 * v16))
      + (float)(v18 * v19);
  float v22 = (float)((float)(v14 * (float)((float)(v17 * v12) - (float)(v18 * v11))) + (float)(v13 * v16))
      + (float)(v15 * v19);
  float v23 = v4[10] + v20;
  float v24 = v4[11] + v21;
  float v25 = v4[12] + v22;
  float v26 = v18 + v18;
  float v27 = v15 + v15;
  float v28 = v18 * (float)(v18 + v18);
  float v29 = v15 * (float)(v15 + v15);
  float v30 = (float)(v17 + v17) * v18;
  float v31 = (float)(v17 + v17) * v15;
  float v32 = v14 * (float)(v17 + v17);
  float v33 = v26 * v15;
  float v34 = v14 * v26;
  float v35 = v14 * v27;
  float v36 = 1.0 - (float)(v17 * (float)(v17 + v17));
  float v37 = (float)(v8 - *v5) * 0.5;
  float v38 = (float)(v9 - v6) * 0.5;
  float v39 = (float)(v10 - v7) * 0.5;
  float v40 = fabsf(v39 * (float)(v31 + v34))
      + (float)(fabsf(v37 * (float)((float)(1.0 - v28) - v29)) + fabsf(v38 * (float)(v30 - v35)));
  float v41 = fabsf(v39 * (float)(v33 - v32)) + (float)(fabsf(v37 * (float)(v30 + v35)) + fabsf(v38 * (float)(v36 - v29)));
  float v42 = fabsf(v39 * (float)(v36 - v28)) + (float)(fabsf(v37 * (float)(v31 - v34)) + fabsf(v38 * (float)(v32 + v33)));
  uint64_t v43 = *((void *)this + 152);
  float32x4_t v44 = (float *)(v43 + 24 * a2);
  *float32x4_t v44 = v23 - v40;
  v44[1] = v24 - v41;
  v44[2] = v25 - v42;
  v44[3] = v23 + v40;
  v44[4] = v24 + v41;
  v44[5] = v25 + v42;
  *((_DWORD *)this + 328) = 0;
  float32x4_t v45 = physx::Sq::IncrementalAABBTree::update((uint64_t)this + 8, *(float32x4_t **)(*((void *)this + 149) + 8 * a2), a2, v43, (uint64_t)this + 1304);
  return physx::Sq::BVHCompoundPruner::updateMapping((uint64_t)this, a2, (uint64_t)v45);
}

uint64_t physx::Sq::BVHCompoundPruner::removeObject(uint64_t this, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(this + 1284))
  {
    unsigned int v4 = (physx::Sq::BVHCompoundPruner *)this;
    unsigned int v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    uint64_t v6 = *(unsigned int *)(*(void *)(this + 1256)
                         + 4
                         * ((*(_DWORD *)(this + 1268) - 1) & (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16))));
    if (v6 != -1)
    {
      uint64_t v7 = *(void *)(this + 1240);
      while (*(_DWORD *)(v7 + 8 * v6) != a2)
      {
        uint64_t v6 = *(unsigned int *)(*(void *)(this + 1248) + 4 * v6);
        if (v6 == -1) {
          return this;
        }
      }
      uint64_t v8 = *(unsigned int *)(v7 + 8 * v6 + 4);
      physx::Sq::CompoundTree::removeObject((physx::Sq::CompoundTree *)(*(void *)(this + 1224) + 56 * v8), a3);
      if (*(void *)(*(void *)(*((void *)v4 + 153) + 56 * v8) + 1144))
      {
        return physx::Sq::BVHCompoundPruner::updateMainTreeNode(v4, v8);
      }
      else
      {
        float v9 = *(uint64_t (**)(physx::Sq::BVHCompoundPruner *, uint64_t))(*(void *)v4 + 8);
        return v9(v4, a2);
      }
    }
  }
  return this;
}

uint64_t physx::Sq::BVHCompoundPruner::addObject(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a1 + 1284)) {
    return 0;
  }
  unsigned int v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 1256)
                       + 4
                       * ((*(_DWORD *)(a1 + 1268) - 1) & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16))));
  if (v8 == -1) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 1240);
  while (*(_DWORD *)(v9 + 8 * v8) != a2)
  {
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 1248) + 4 * v8);
    if (v8 == -1) {
      return 0;
    }
  }
  uint64_t v11 = v9 + 8 * v8;
  physx::Sq::CompoundTree::addObject(*(void *)(a1 + 1224) + 56 * *(unsigned int *)(v11 + 4), a3, a4, a5, a6);
  physx::Sq::BVHCompoundPruner::updateMainTreeNode((physx::Sq::BVHCompoundPruner *)a1, *(_DWORD *)(v11 + 4));
  return 1;
}

double physx::Sq::BVHCompoundPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  *(float *)&double result = physx::Sq::CompoundTreePool::shiftOrigin((unsigned int *)(a1 + 1208), a2);
  unsigned int v5 = *(float32x4_t **)(a1 + 1152);
  if (v5)
  {
    float32x4_t v6 = *(float32x4_t *)a2->f32;
    v6.i32[3] = 0;
    float32x4_t v7 = v6;
    *(void *)&double result = shiftNode(v5, &v7).u64[0];
  }
  return result;
}

uint64_t physx::Sq::AABBPruner::getPayload(physx::Sq::AABBPruner *this, unsigned int a2)
{
  return *((void *)this + 54) + 16 * *(unsigned int *)(*((void *)this + 55) + 4 * a2);
}

uint64_t physx::Sq::AABBPruner::getPayload(void *a1, unsigned int a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a1[55] + 4 * a2);
  *a3 = a1[53] + 24 * v3;
  return a1[54] + 16 * v3;
}

uint64_t physx::Sq::AABBPruner::preallocate(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 420) < a2) {
    return physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)(this + 416), a2);
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Gu::AABBTreeBuildNode *,physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float32x4_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode *>::getName() [T = physx::"
    }
           "Gu::AABBTreeBuildNode *]";
    else {
      float32x4_t v7 = "<allocation names disabled>";
    }
    double result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  float v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    float v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *float v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  float v12 = &v11[4 * v3];
  double result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 8);
    float v16 = &v11[v10 + 8];
    do
    {
      unsigned int v17 = *(_DWORD *)v15 + ~(*(_DWORD *)v15 << 15);
      unsigned int v18 = (9 * (v17 ^ (v17 >> 10))) ^ ((9 * (v17 ^ (v17 >> 10))) >> 6);
      unsigned int v19 = ((v18 + ~(v18 << 11)) ^ ((v18 + ~(v18 << 11)) >> 16)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v14;
      *((_DWORD *)v16 - 2) = *(_DWORD *)v15;
      *(void *)float v16 = *(void *)(v15 + 8);
      v16 += 16;
      ++v14;
      v15 += 16;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = &v11[v10];
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::~PoolBase(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 548)) {
    physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::disposeElements(a1);
  }
  uint64_t v2 = *(unsigned int *)(a1 + 536);
  if (v2)
  {
    unsigned int v3 = *(void **)(a1 + 528);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  int v5 = *(_DWORD *)(a1 + 540);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 528);
    if (v6 == a1 + 8)
    {
      *(unsigned char *)(a1 + 52physx::Sq::AABBTree::release(this, 0) = 0;
    }
    else if (v6)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

char *physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::disposeElements(uint64_t a1)
{
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v2 = *(void *)(a1 + 560);
  if (v2)
  {
    do
    {
      uint64_t v8 = v2;
      int v3 = v10;
      if ((HIDWORD(v10) & 0x7FFFFFFFu) <= v10)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::growAndPushBack((uint64_t)&v9, &v8);
      }
      else
      {
        *(void *)&v9[8 * v10] = v2;
        LODWORD(v1physx::Sq::AABBTree::release(this, 0) = v3 + 1;
      }
      uint64_t v2 = **(void **)(a1 + 560);
      *(void *)(a1 + 56physx::Sq::AABBTree::release(this, 0) = v2;
    }
    while (v2);
    uint64_t v4 = v9;
    int v5 = v10;
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(v4, v5);
  double result = physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(*(char **)(a1 + 528), *(_DWORD *)(a1 + 536));
  if ((v10 & 0x8000000000000000) == 0 && (v10 & 0x7FFFFFFF00000000) != 0 && v9 != 0) {
    return (char *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  float v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  int v3 = result;
  int v4 = 0;
  int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unsigned int v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unsigned int v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          double result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          double result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    float v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    double result = physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    double result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::getName() [T = p"
  }
         "hysx::Sq::IncrementalAABBTreeNodePair]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  double result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    double result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::~PoolBase(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 548)) {
    physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::disposeElements(a1);
  }
  uint64_t v2 = *(unsigned int *)(a1 + 536);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 528);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  int v5 = *(_DWORD *)(a1 + 540);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 528);
    if (v6 == a1 + 8)
    {
      *(unsigned char *)(a1 + 52physx::Sq::AABBTree::release(this, 0) = 0;
    }
    else if (v6)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

char *physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::disposeElements(uint64_t a1)
{
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 560);
  if (v2)
  {
    do
    {
      uint64_t v9 = v2;
      int v3 = v11;
      if ((HIDWORD(v11) & 0x7FFFFFFFu) <= v11)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::growAndPushBack((uint64_t)&v10, &v9);
      }
      else
      {
        *(void *)&v10[8 * v11] = v2;
        LODWORD(v11) = v3 + 1;
      }
      uint64_t v2 = **(void **)(a1 + 560);
      *(void *)(a1 + 56physx::Sq::AABBTree::release(this, 0) = v2;
    }
    while (v2);
    uint64_t v4 = v10;
    int v5 = v11;
    int v6 = HIDWORD(v11);
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
    uint64_t v4 = 0;
  }
  physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(v4, v5);
  double result = physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(*(char **)(a1 + 528), *(_DWORD *)(a1 + 536));
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && v4)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    return (char *)v8();
  }
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  float v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  int v3 = result;
  int v4 = 0;
  int v5 = result + 8;
  int v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unsigned int v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unsigned int v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          double result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          int v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          double result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          int v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    float v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    double result = physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v6 = (void *)result;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    double result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::getName() [T = physx::Sq::"
    }
           "AABBTreeIndices]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  double result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    double result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

void MainTreeOBBOverlapCompoundPrunerCallback::~MainTreeOBBOverlapCompoundPrunerCallback(MainTreeOBBOverlapCompoundPrunerCallback *this)
{
}

uint64_t MainTreeOBBOverlapCompoundPrunerCallback::invoke(MainTreeOBBOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0 || !*(void *)(*(void *)a3 + 1144)) {
    return 1;
  }
  uint64_t v12 = *((void *)this + 1);
  a7.i32[0] = *(_DWORD *)(v12 + 44);
  *(float *)&a4 = *(float *)(v12 + 48) - *((float *)a3 + 10);
  *(float *)&a5 = *(float *)(v12 + 52) - *((float *)a3 + 11);
  *(float *)&a6 = *(float *)(v12 + 56) - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  *(float *)&a5 = *(float *)&a5 + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a6;
  a10.i32[0] = *((_DWORD *)a3 + 8);
  LODWORD(a9) = *((_DWORD *)a3 + 9);
  *(float *)&a8 = (float)(*(float *)&a9 * *(float *)&a9) + -0.5;
  float v13 = *((float *)a3 + 6);
  float v14 = *((float *)a3 + 7);
  float v15 = (float)((float)(*(float *)&a5 * v14) + (float)(v13 * *(float *)&a4)) + (float)(a10.f32[0] * *(float *)&a6);
  v45[0] = (float)((float)(*(float *)&a4 * *(float *)&a8)
                 - (float)((float)((float)(v14 * *(float *)&a6) - (float)(a10.f32[0] * *(float *)&a5)) * *(float *)&a9))
         + (float)(v13 * v15);
  v45[1] = (float)((float)(*(float *)&a5 * *(float *)&a8)
                 - (float)((float)((float)(a10.f32[0] * *(float *)&a4) - (float)(v13 * *(float *)&a6)) * *(float *)&a9))
         + (float)(v14 * v15);
  v45[2] = (float)((float)(*(float *)&a6 * *(float *)&a8)
                 - (float)((float)((float)(v13 * *(float *)&a5) - (float)(v14 * *(float *)&a4)) * *(float *)&a9))
         + (float)(a10.f32[0] * v15);
  *(float *)&a4 = v13 + v13;
  *(float *)&a5 = v14 + v14;
  *(float *)&a6 = a10.f32[0] + a10.f32[0];
  *(float *)&a8 = v13 * (float)(v13 + v13);
  float v16 = v14 * (float)(v14 + v14);
  float v17 = a10.f32[0] * (float)(a10.f32[0] + a10.f32[0]);
  float v18 = *(float *)&a4 * v14;
  float v19 = *(float *)&a4 * a10.f32[0];
  *(float *)&a4 = *(float *)&a9 * *(float *)&a4;
  a10.f32[0] = *(float *)&a5 * a10.f32[0];
  *(float *)&a5 = *(float *)&a9 * *(float *)&a5;
  *(float *)&a6 = *(float *)&a9 * *(float *)&a6;
  float v20 = (float)(1.0 - v16) - v17;
  float v21 = v18 + *(float *)&a6;
  float v22 = v19 - *(float *)&a5;
  *(float *)&a6 = v18 - *(float *)&a6;
  *(float *)&a8 = 1.0 - *(float *)&a8;
  *(float *)&a9 = *(float *)&a8 - v17;
  float v23 = *(float *)&a4 + a10.f32[0];
  *(float *)&a5 = v19 + *(float *)&a5;
  *(float *)&a4 = a10.f32[0] - *(float *)&a4;
  *(float *)&a8 = *(float *)&a8 - v16;
  a10.i32[0] = *(_DWORD *)(v12 + 12);
  float v24 = *(float *)(v12 + 16);
  float v25 = (float)(v20 * a10.f32[0]) + (float)(v21 * v24);
  float v26 = (float)(*(float *)&a6 * a10.f32[0]) + (float)(*(float *)&a9 * v24);
  a10.f32[0] = (float)(*(float *)&a5 * a10.f32[0]) + (float)(*(float *)&a4 * v24);
  float v27 = *(float *)(v12 + 20);
  float v28 = *(float *)(v12 + 24);
  float v29 = v25 + (float)(v22 * v27);
  *(float *)&__int32 v30 = v26 + (float)(v23 * v27);
  a10.f32[0] = a10.f32[0] + (float)(*(float *)&a8 * v27);
  float v31 = *(float *)(v12 + 28);
  float v32 = *(float *)(v12 + 32);
  *(float *)&__int32 v33 = (float)((float)(v20 * v28) + (float)(v21 * v31)) + (float)(v22 * v32);
  *(float *)&unsigned int v34 = (float)((float)(*(float *)&a6 * v28) + (float)(*(float *)&a9 * v31)) + (float)(v23 * v32);
  *(float *)&unsigned int v35 = (float)((float)(*(float *)&a5 * v28) + (float)(*(float *)&a4 * v31)) + (float)(*(float *)&a8 * v32);
  float v36 = *(float *)(v12 + 36);
  float v37 = *(float *)(v12 + 40);
  *(float *)&a6 = (float)(*(float *)&a6 * v36) + (float)(*(float *)&a9 * v37);
  *(float *)&a4 = (float)(*(float *)&a5 * v36) + (float)(*(float *)&a4 * v37);
  *(float *)&a5 = v22 * a7.f32[0];
  *(float *)&a9 = v23 * a7.f32[0];
  a7.f32[0] = *(float *)&a8 * a7.f32[0];
  *(float *)&a5 = (float)((float)(v20 * v36) + (float)(v21 * v37)) + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a9;
  *(float *)float v40 = v29;
  v40[1] = v30;
  v40[2] = a10.i32[0];
  v40[3] = v33;
  unint64_t v41 = __PAIR64__(v35, v34);
  *(float *)&a4 = *(float *)&a4 + a7.f32[0];
  int v42 = LODWORD(a5);
  int v43 = LODWORD(a6);
  int v44 = LODWORD(a4);
  physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v39, (uint64_t)v45, v40, v12, a4, a5, a6, a7, a8, a9, a10);
  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*((void *)a3 + 1) + 16), *(void *)(*((void *)a3 + 1) + 8), *(void *)(*(void *)a3 + 1144), v39, *((unsigned int (****)(void, int *, uint64_t))this + 2));
}

void MainTreeAABBOverlapCompoundPrunerCallback::~MainTreeAABBOverlapCompoundPrunerCallback(MainTreeAABBOverlapCompoundPrunerCallback *this)
{
}

uint64_t MainTreeAABBOverlapCompoundPrunerCallback::invoke(MainTreeAABBOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0 || !*(void *)(*(void *)a3 + 1144)) {
    return 1;
  }
  uint64_t v12 = *((void *)this + 1);
  a7.i32[0] = *(_DWORD *)(v12 + 44);
  *(float *)&a4 = *(float *)(v12 + 48) - *((float *)a3 + 10);
  *(float *)&a5 = *(float *)(v12 + 52) - *((float *)a3 + 11);
  *(float *)&a6 = *(float *)(v12 + 56) - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  *(float *)&a5 = *(float *)&a5 + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a6;
  a10.i32[0] = *((_DWORD *)a3 + 8);
  LODWORD(a9) = *((_DWORD *)a3 + 9);
  *(float *)&a8 = (float)(*(float *)&a9 * *(float *)&a9) + -0.5;
  float v13 = *((float *)a3 + 6);
  float v14 = *((float *)a3 + 7);
  float v15 = (float)((float)(*(float *)&a5 * v14) + (float)(v13 * *(float *)&a4)) + (float)(a10.f32[0] * *(float *)&a6);
  v45[0] = (float)((float)(*(float *)&a4 * *(float *)&a8)
                 - (float)((float)((float)(v14 * *(float *)&a6) - (float)(a10.f32[0] * *(float *)&a5)) * *(float *)&a9))
         + (float)(v13 * v15);
  v45[1] = (float)((float)(*(float *)&a5 * *(float *)&a8)
                 - (float)((float)((float)(a10.f32[0] * *(float *)&a4) - (float)(v13 * *(float *)&a6)) * *(float *)&a9))
         + (float)(v14 * v15);
  v45[2] = (float)((float)(*(float *)&a6 * *(float *)&a8)
                 - (float)((float)((float)(v13 * *(float *)&a5) - (float)(v14 * *(float *)&a4)) * *(float *)&a9))
         + (float)(a10.f32[0] * v15);
  *(float *)&a4 = v13 + v13;
  *(float *)&a5 = v14 + v14;
  *(float *)&a6 = a10.f32[0] + a10.f32[0];
  *(float *)&a8 = v13 * (float)(v13 + v13);
  float v16 = v14 * (float)(v14 + v14);
  float v17 = a10.f32[0] * (float)(a10.f32[0] + a10.f32[0]);
  float v18 = *(float *)&a4 * v14;
  float v19 = *(float *)&a4 * a10.f32[0];
  *(float *)&a4 = *(float *)&a9 * *(float *)&a4;
  a10.f32[0] = *(float *)&a5 * a10.f32[0];
  *(float *)&a5 = *(float *)&a9 * *(float *)&a5;
  *(float *)&a6 = *(float *)&a9 * *(float *)&a6;
  float v20 = (float)(1.0 - v16) - v17;
  float v21 = v18 + *(float *)&a6;
  float v22 = v19 - *(float *)&a5;
  *(float *)&a6 = v18 - *(float *)&a6;
  *(float *)&a8 = 1.0 - *(float *)&a8;
  *(float *)&a9 = *(float *)&a8 - v17;
  float v23 = *(float *)&a4 + a10.f32[0];
  *(float *)&a5 = v19 + *(float *)&a5;
  *(float *)&a4 = a10.f32[0] - *(float *)&a4;
  *(float *)&a8 = *(float *)&a8 - v16;
  a10.i32[0] = *(_DWORD *)(v12 + 12);
  float v24 = *(float *)(v12 + 16);
  float v25 = (float)(v20 * a10.f32[0]) + (float)(v21 * v24);
  float v26 = (float)(*(float *)&a6 * a10.f32[0]) + (float)(*(float *)&a9 * v24);
  a10.f32[0] = (float)(*(float *)&a5 * a10.f32[0]) + (float)(*(float *)&a4 * v24);
  float v27 = *(float *)(v12 + 20);
  float v28 = *(float *)(v12 + 24);
  float v29 = v25 + (float)(v22 * v27);
  *(float *)&__int32 v30 = v26 + (float)(v23 * v27);
  a10.f32[0] = a10.f32[0] + (float)(*(float *)&a8 * v27);
  float v31 = *(float *)(v12 + 28);
  float v32 = *(float *)(v12 + 32);
  *(float *)&__int32 v33 = (float)((float)(v20 * v28) + (float)(v21 * v31)) + (float)(v22 * v32);
  *(float *)&unsigned int v34 = (float)((float)(*(float *)&a6 * v28) + (float)(*(float *)&a9 * v31)) + (float)(v23 * v32);
  *(float *)&unsigned int v35 = (float)((float)(*(float *)&a5 * v28) + (float)(*(float *)&a4 * v31)) + (float)(*(float *)&a8 * v32);
  float v36 = *(float *)(v12 + 36);
  float v37 = *(float *)(v12 + 40);
  *(float *)&a6 = (float)(*(float *)&a6 * v36) + (float)(*(float *)&a9 * v37);
  *(float *)&a4 = (float)(*(float *)&a5 * v36) + (float)(*(float *)&a4 * v37);
  *(float *)&a5 = v22 * a7.f32[0];
  *(float *)&a9 = v23 * a7.f32[0];
  a7.f32[0] = *(float *)&a8 * a7.f32[0];
  *(float *)&a5 = (float)((float)(v20 * v36) + (float)(v21 * v37)) + *(float *)&a5;
  *(float *)&a6 = *(float *)&a6 + *(float *)&a9;
  *(float *)float v40 = v29;
  v40[1] = v30;
  v40[2] = a10.i32[0];
  v40[3] = v33;
  unint64_t v41 = __PAIR64__(v35, v34);
  *(float *)&a4 = *(float *)&a4 + a7.f32[0];
  int v42 = LODWORD(a5);
  int v43 = LODWORD(a6);
  int v44 = LODWORD(a4);
  physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)v39, (uint64_t)v45, v40, v12, a4, a5, a6, a7, a8, a9, a10);
  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*((void *)a3 + 1) + 16), *(void *)(*((void *)a3 + 1) + 8), *(void *)(*(void *)a3 + 1144), v39, *((unsigned int (****)(void, int *, uint64_t))this + 2));
}

void MainTreeCapsuleOverlapCompoundPrunerCallback::~MainTreeCapsuleOverlapCompoundPrunerCallback(MainTreeCapsuleOverlapCompoundPrunerCallback *this)
{
}

uint64_t MainTreeCapsuleOverlapCompoundPrunerCallback::invoke(MainTreeCapsuleOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0) {
    return 1;
  }
  uint64_t v9 = *(void *)a3;
  if (!*(void *)(*(void *)a3 + 1144)) {
    return 1;
  }
  float v10 = *((float *)a3 + 6);
  float v11 = *((float *)a3 + 7);
  float v12 = *((float *)a3 + 8);
  float v13 = *((float *)a3 + 9);
  float v14 = v11 * (float)(v11 + v11);
  float v15 = v12 * (float)(v12 + v12);
  float v16 = (float)(v10 + v10) * v11;
  float v17 = (float)(v10 + v10) * v12;
  float v18 = (float)(v10 + v10) * v13;
  float v19 = (float)(v11 + v11) * v12;
  float v20 = (float)(v11 + v11) * v13;
  float v21 = (float)(v12 + v12) * v13;
  v54.f32[0] = (float)(1.0 - v14) - v15;
  *(float *)&a9 = v16 + v21;
  float v22 = v17 - v20;
  float v23 = v16 - v21;
  float v24 = 1.0 - (float)(v10 * (float)(v10 + v10));
  float v25 = v24 - v15;
  float v26 = v19 + v18;
  float v27 = v17 + v20;
  float v28 = v19 - v18;
  float v29 = v24 - v14;
  float v31 = (float *)*((void *)this + 1);
  __int32 v30 = (uint64_t (***)(void, int *, uint64_t))*((void *)this + 2);
  float v32 = v31[28] - *((float *)a3 + 10);
  float v33 = v31[29] - *((float *)a3 + 11);
  float v34 = v31[30] - *((float *)a3 + 12);
  float v35 = v32 + v32;
  float v36 = v33 + v33;
  float v37 = v34 + v34;
  float v38 = (float)(v13 * v13) + -0.5;
  float v39 = (float)((float)(v11 * v36) + (float)(v10 * v35)) + (float)(v12 * v37);
  float v40 = (float)(v35 * v38) - (float)((float)((float)(v11 * v37) - (float)(v12 * v36)) * v13);
  float v41 = (float)((float)(v36 * v38) - (float)((float)((float)(v12 * v35) - (float)(v10 * v37)) * v13))
      + (float)(v11 * v39);
  float v42 = -(float)(v11 * v35);
  float v43 = v40 + (float)(v10 * v39);
  float v44 = (float)((float)(v37 * v38) - (float)((float)(v42 + (float)(v10 * v36)) * v13)) + (float)(v12 * v39);
  float v45 = v31[3];
  float v46 = v31[4];
  float v47 = (float)(v54.f32[0] * v45) + (float)(*(float *)&a9 * v46);
  *(float *)&a9 = (float)(v23 * v45) + (float)(v25 * v46);
  float v48 = (float)(v27 * v45) + (float)(v28 * v46);
  float v49 = v31[5];
  *(float *)&unsigned int v50 = v47 + (float)(v22 * v49);
  float v51 = *(float *)&a9 + (float)(v26 * v49);
  float v52 = v48 + (float)(v29 * v49);
  float v53 = v31[15] + v31[15];
  *(float *)&a9 = v31[31] * 1.01;
  v54.i32[3] = 0;
  v55.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v43));
  v55.i64[1] = LODWORD(v44);
  float32x4_t v56 = (float32x4_t)v50;
  v56.f32[1] = v51;
  float32x4_t v57 = v56;
  v57.f32[2] = v52;
  *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
  v56.i64[1] = v50;
  v72[0] = v55;
  v72[1] = v57;
  int32x4_t v58 = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v58.i32[3] = 0;
  v72[2] = v56;
  v72[3] = (float32x4_t)v58;
  int8x16_t v59 = (int8x16_t)vabsq_f32(v57);
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), 4uLL);
  float v61 = v43 + (float)(*(float *)&v50 * v53);
  float v62 = (float)(v51 * v53) + v41;
  float v63 = v44 + (float)(v52 * v53);
  BOOL v64 = *(float *)&v50 == 0.0;
  BOOL v68 = *(float *)&v50 < 0.0;
  float v65 = -3.4028e38;
  if (v68) {
    float v66 = -3.4028e38;
  }
  else {
    float v66 = 3.4028e38;
  }
  if (!v64) {
    float v43 = v66;
  }
  if (v51 >= 0.0) {
    float v65 = 3.4028e38;
  }
  if (v51 == 0.0) {
    float v65 = v41;
  }
  float v67 = -3.4028e38;
  if (v52 >= 0.0) {
    float v67 = 3.4028e38;
  }
  if (v52 != 0.0) {
    float v44 = v67;
  }
  BOOL v68 = v53 < 3.4028e38;
  if (v53 >= 3.4028e38) {
    float v69 = v43;
  }
  else {
    float v69 = v61;
  }
  if (v53 >= 3.4028e38) {
    float v70 = v65;
  }
  else {
    float v70 = v62;
  }
  if (v68) {
    float v44 = v63;
  }
  v54.i64[0] = __PAIR64__(LODWORD(v70), LODWORD(v69));
  v54.f32[2] = v44;
  v72[4] = (float32x4_t)v59;
  v60.i64[1] = v59.u32[0];
  v72[5] = v60;
  v72[6] = vminq_f32(v55, v54);
  v72[7] = vmaxq_f32(v55, v54);
  return physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*((void *)a3 + 1) + 16), *(void *)(*((void *)a3 + 1) + 8), *(void *)(v9 + 1144), v72, v30);
}

void MainTreeSphereOverlapCompoundPrunerCallback::~MainTreeSphereOverlapCompoundPrunerCallback(MainTreeSphereOverlapCompoundPrunerCallback *this)
{
}

uint64_t MainTreeSphereOverlapCompoundPrunerCallback::invoke(MainTreeSphereOverlapCompoundPrunerCallback *this, float *a2, const physx::Sq::CompoundTree *a3, double a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((*((_DWORD *)a3 + 13) & *((unsigned __int16 *)this + 12)) == 0) {
    return 1;
  }
  uint64_t v4 = *(void *)(*(void *)a3 + 1144);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v5 = (uint64_t (***)(void, int *, uint64_t))*((void *)this + 2);
  *(float *)&a4 = v6[25] - *((float *)a3 + 10);
  float v7 = v6[26] - *((float *)a3 + 11);
  float v8 = v6[28];
  float v9 = v6[27] - *((float *)a3 + 12);
  *(float *)&a4 = *(float *)&a4 + *(float *)&a4;
  float v10 = v7 + v7;
  float v11 = v9 + v9;
  float v13 = *((float *)a3 + 8);
  float v12 = *((float *)a3 + 9);
  float v14 = (float)(v12 * v12) + -0.5;
  float v15 = *((float *)a3 + 6);
  float v16 = *((float *)a3 + 7);
  float v17 = (float)((float)(v10 * v16) + (float)(v15 * *(float *)&a4)) + (float)(v13 * v11);
  float v18 = (float)(*(float *)&a4 * v14) - (float)((float)((float)(v16 * v11) - (float)(v13 * v10)) * v12);
  float v19 = (float)((float)(v10 * v14) - (float)((float)((float)(v13 * *(float *)&a4) - (float)(v15 * v11)) * v12))
      + (float)(v16 * v17);
  *(float *)&a4 = (float)((float)(v11 * v14) - (float)((float)((float)(v15 * v10) - (float)(v16 * *(float *)&a4)) * v12))
                + (float)(v13 * v17);
  *(float *)&long long v20 = v18 + (float)(v15 * v17);
  *((float *)&v20 + 1) = v19;
  *((void *)&v20 + 1) = LODWORD(a4);
  long long v22 = v20;
  *(float *)&a4 = v8 * v8;
  int32x2_t v23 = vdup_lane_s32(*(int32x2_t *)&a4, 0);
  return physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()(*(void *)(*((void *)a3 + 1) + 16), *(void *)(*((void *)a3 + 1) + 8), v4, (uint64_t)&v22, v5);
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBPruner::NewTreeFixup,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner::NewTreeFixup>::getName() [T = ph"
    }
           "ysx::Sq::AABBPruner::NewTreeFixup]";
    else {
      float v7 = "<allocation names disabled>";
    }
    double result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    float v8 = (void *)result;
  }
  else
  {
    float v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    float v11 = *(uint64_t **)v3;
    float v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

float32x4_t physx::Gu::OBBAABBTests<true>::OBBAABBTests(uint64_t a1, uint64_t a2, __int32 *a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, float32x4_t a11)
{
  *(void *)&long long v11 = *(void *)a2;
  *((void *)&v11 + 1) = *(unsigned int *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = v11;
  v12.i64[0] = *(void *)a4;
  v12.i64[1] = *(unsigned int *)(a4 + 8);
  *(float32x4_t *)a1 = v12;
  v13.i32[0] = *a3;
  v13.i32[1] = a3[3];
  v13.i64[1] = a3[6];
  a8.i32[0] = a3[1];
  a8.i32[1] = a3[4];
  a8.i32[2] = a3[7];
  a11.i32[0] = a3[2];
  a11.i32[1] = a3[5];
  a11.i32[2] = a3[8];
  float32x4_t v14 = vaddq_f32(vabsq_f32(v13), (float32x4_t)xmmword_234421B30);
  float32x4_t v15 = vaddq_f32(vabsq_f32(a8), (float32x4_t)xmmword_234421B30);
  float32x4_t v16 = vaddq_f32(vabsq_f32(a11), (float32x4_t)xmmword_234421B30);
  float32x4_t v17 = vmulq_f32(v12, v14);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x4_t v18 = vmulq_f32(v12, v15);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x4_t v19 = vmulq_f32(v12, v16);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  *(int8x8_t *)&long long v20 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), 4uLL);
  *((void *)&v20 + 1) = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).u32[0];
  v18.i64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v18.f32, 4uLL);
  *(int32x2_t *)v19.f32 = vrev64_s32(*(int32x2_t *)v18.f32);
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v12.f32, 4uLL);
  v17.i64[1] = v12.u32[0];
  *(int8x8_t *)&v18.u32[2] = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v19.f32, 4uLL);
  v12.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  *(int32x2_t *)v19.f32 = vrev64_s32(*(int32x2_t *)v12.f32);
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v14.f32, 4uLL);
  *(int8x8_t *)&v21.u32[2] = vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v19.f32, 4uLL);
  *(float32x4_t *)(a1 + 64) = a11;
  *(float32x4_t *)(a1 + 8physx::Sq::AABBTree::release(this, 0) = v14;
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v12.f32, 4uLL);
  v12.i64[1] = v14.u32[0];
  *(float32x4_t *)(a1 + 32) = v13;
  *(float32x4_t *)(a1 + 48) = a8;
  float32x4_t v22 = vmlaq_f32(vmulq_f32(v18, v12), v21, v17);
  int32x2_t v23 = (int32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  *(int32x2_t *)v12.f32 = vrev64_s32(v23);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v12.f32, *(int8x8_t *)v15.f32, 4uLL);
  *(int8x8_t *)&v24.u32[2] = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v12.f32, 4uLL);
  *(float32x4_t *)(a1 + 96) = v15;
  *(float32x4_t *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 128) = v20;
  *(float32x4_t *)(a1 + 144) = v22;
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v23, 4uLL);
  v22.i64[1] = v15.u32[0];
  v15.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  int8x8_t v25 = (int8x8_t)vrev64_s32(*(int32x2_t *)v15.f32);
  *(int8x8_t *)v12.f32 = vext_s8(v25, *(int8x8_t *)v16.f32, 4uLL);
  *(int8x8_t *)&v12.u32[2] = vext_s8(*(int8x8_t *)v16.f32, v25, 4uLL);
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v16.f32, *(int8x8_t *)v15.f32, 4uLL);
  v15.i64[1] = v16.u32[0];
  float32x4_t result = vmlaq_f32(vmulq_f32(v18, v15), v12, v17);
  *(float32x4_t *)(a1 + 16physx::Sq::AABBTree::release(this, 0) = vmlaq_f32(vmulq_f32(v18, v22), v24, v17);
  *(float32x4_t *)(a1 + 176) = result;
  return result;
}

BOOL physx::Gu::OBBAABBTests<true>::operator()(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3 = a1[1];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v3, a2), vaddq_f32(a1[8], a3))), *(int8x8_t *)a2.f32).u32[0] & 0xFFFFFF) != 0) {
    return 0;
  }
  float32x4_t v4 = vsubq_f32(v3, a2);
  float32x4_t v6 = a1[2];
  float32x4_t v5 = a1[3];
  float32x4_t v8 = a1[4];
  float32x4_t v7 = a1[5];
  float32x4_t v9 = a1[6];
  float32x4_t v10 = a1[7];
  float32x4_t v11 = vmulq_n_f32(v6, v4.f32[0]);
  v11.i32[3] = 0;
  float32x4_t v12 = vmlaq_lane_f32(v11, v5, *(float32x2_t *)v4.f32, 1);
  v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
  float32x4_t v13 = vmlaq_laneq_f32(v12, v8, v4, 2);
  v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
  float32x4_t v14 = vmlaq_n_f32(*a1, v7, a3.f32[0]);
  v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  float32x4_t v15 = vmlaq_lane_f32(v14, v9, *(float32x2_t *)a3.f32, 1);
  v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  float32x4_t v16 = vmlaq_laneq_f32(v15, v10, a3, 2);
  v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v13), v16)), *(int8x8_t *)v7.f32).u32[0] & 0xFFFFFF) != 0) {
    return 0;
  }
  float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 1);
  float32x4_t v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2);
  float32x4_t v20 = vmulq_laneq_f32(v5, v4, 2);
  v20.i32[3] = 0;
  float32x4_t v21 = vmlsq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1), v8);
  v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
  float32x4_t v22 = vmlaq_f32(a1[9], v18, v10);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  float32x4_t v23 = vmlaq_f32(v22, v19, v9);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  float32x4_t v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
  float32x4_t v25 = vmulq_n_f32(v8, v4.f32[0]);
  v25.i32[3] = 0;
  float32x4_t v26 = vmlsq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), v6);
  v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
  int8x16_t v27 = (int8x16_t)vcgtq_f32(v21, v23);
  float32x4_t v28 = vnegq_f32(v23);
  v28.i32[3] = 0;
  float32x4_t v29 = vmlaq_f32(a1[10], v24, v10);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  float32x4_t v30 = vmlaq_f32(v29, v19, v7);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  float32x4_t v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  float32x4_t v32 = vmulq_lane_f32(v6, *(float32x2_t *)v4.f32, 1);
  v32.i32[3] = 0;
  float32x4_t v33 = vmlsq_lane_f32(v32, v5, *(float32x2_t *)v4.f32, 0);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  float32x4_t v34 = vmlaq_f32(a1[11], v24, v9);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  float32x4_t v35 = vmlaq_f32(v34, v18, v7);
  v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
  float32x4_t v36 = vnegq_f32(v35);
  v36.i32[3] = 0;
  int8x8_t v37 = (int8x8_t)vcltz_s16(vshl_n_s16((int16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v28, v21), vorrq_s8(v27, (int8x16_t)vcgtq_f32(v26, v30))), vorrq_s8((int8x16_t)vcgtq_f32(v31, v26), (int8x16_t)vcgtq_f32(v33, v35))), (int8x16_t)vcgtq_f32(v36, v33)))), 0xFuLL));
  return vuzp1_s8(v37, v37).u32[0] == -1;
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2) {
    float32x4_t result = physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sq::AABBTreeRuntimeNode *>::getName() [T = c"
  }
         "onst physx::Sq::AABBTreeRuntimeNode *]";
  else {
    float32x4_t v8 = "<allocation names disabled>";
  }
  float32x4_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sq::AABBTreeRuntimeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = (8 * a2);
    if (v4 > 0x800 || *(unsigned char *)(result + 2048))
    {
      float32x4_t result = physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode const*>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      float32x4_t v5 = (void *)result;
    }
    else
    {
      *(unsigned char *)(result + 2048) = 1;
      float32x4_t v5 = (void *)result;
    }
  }
  else
  {
    float32x4_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 2064);
  if (v6)
  {
    unint64_t v7 = (unint64_t)&v5[v6];
    float32x4_t v8 = *(uint64_t **)(v3 + 2056);
    float32x4_t v9 = v5;
    do
    {
      uint64_t v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v3 + 2056);
    if (v11 == v3)
    {
      *(unsigned char *)(v3 + 2048) = 0;
    }
    else if (v11)
    {
      float32x4_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 2056) = v5;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeRuntimeNode>::getName() [T = physx::Sq"
  }
         "::AABBTreeRuntimeNode]";
  else {
    float32x4_t v8 = "<allocation names disabled>";
  }
  float32x4_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    float32x4_t result = physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (void *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    float32x4_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    float32x4_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::getName() [T = phy"
  }
         "sx::Sq::IncrementalAABBTreeNode *]";
  else {
    float32x4_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2) {
    float32x4_t result = physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (8 * a2);
  if (v4 <= 0x800 && *(unsigned char *)(result + 2048) == 0)
  {
    *(unsigned char *)(result + 2048) = 1;
    float32x4_t v8 = (void *)result;
  }
  else if (v4)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Sq::IncrementalAABBTreeNode *>::getName() "
    }
           "[T = const physx::Sq::IncrementalAABBTreeNode *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    float32x4_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    float32x4_t v8 = (void *)result;
  }
  else
  {
    float32x4_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 2064);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    uint64_t v11 = *(uint64_t **)(v3 + 2056);
    float32x4_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 2056);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 2048) = 0;
    }
    else if (v14)
    {
      float32x4_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 2056) = v8;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  int v7 = *a2;
  unsigned int v8 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
  unsigned int v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  unsigned int v10 = (v9 ^ HIWORD(v9)) & (v6 - 1);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unsigned int v14 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
      unsigned int v10 = (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    uint64_t v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    int32x2_t v16 = a1[3];
    int32x2_t v17 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v15) = *(_DWORD *)(*(void *)&v16 + 4 * v10);
    *(_DWORD *)(*(void *)&v16 + 4 * v1physx::Sq::AABBTree::release(this, 0) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v17 + 16 * v15;
  }
  int32x2_t v12 = a1[1];
  while (*(_DWORD *)(*(void *)&v12 + 16 * v11) != v7)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 16 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,physx::Sq::IncrementalAABBTreeNode *>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  int v3 = *a2;
  unsigned int v4 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = (_DWORD *)(v5
                + 4
                * ((((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  uint64_t v7 = *v6;
  if (v7 == -1) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v9 + 16 * v7) != v3)
  {
    while (1)
    {
      uint64_t v10 = v7;
      uint64_t v7 = *(unsigned int *)(v8 + 4 * v7);
      if (v7 == -1) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 16 * v7) == v3)
      {
        unsigned int v6 = (_DWORD *)(v8 + 4 * v10);
        break;
      }
    }
  }
  *(_DWORD *)a3 = v3;
  *(void *)(a3 + 8) = *(void *)(v9 + 16 * v7 + 8);
  uint64_t v11 = *v6;
  *unsigned int v6 = *(_DWORD *)(v8 + 4 * v11);
  unsigned int v12 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v12;
  if (v11 != v12)
  {
    uint64_t v13 = v9 + 16 * v11;
    uint64_t v14 = v9 + 16 * v12;
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    *(_DWORD *)(v8 + 4 * v11) = *(_DWORD *)(v8 + 4 * v12);
    *(void *)(v13 + 8) = v15;
    unsigned int v16 = 9
        * ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) ^ ((*(_DWORD *)v13 + ~(*(_DWORD *)v13 << 15)) >> 10));
    int32x2_t v17 = (_DWORD *)(v5
                   + 4
                   * ((((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6))
                                                                            + ~((v16 ^ (v16 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
    uint64_t v18 = *(unsigned int *)(a1 + 52);
    uint64_t v19 = *v17;
    if (v19 != v18)
    {
      do
      {
        uint64_t v20 = v19;
        uint64_t v19 = *(unsigned int *)(v8 + 4 * v19);
      }
      while (v19 != v18);
      int32x2_t v17 = (_DWORD *)(v8 + 4 * v20);
    }
    _DWORD *v17 = v11;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::IncrementalAABBTreeNodePair,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 7) - 128);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 16;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 56physx::Sq::AABBTree::release(this, 0) = v7 + 16;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNodePair>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  uint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    unsigned int v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *uint64_t v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 52physx::Sq::AABBTree::release(this, 0) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sq::AABBTreeIndices,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::allocate(*(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 20 * *(unsigned int *)(a1 + 544) - 20;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 20 * *(unsigned int *)(a1 + 544) - 20);
    do
    {
      *uint64_t v7 = v6;
      uint64_t v7 = (unint64_t *)((char *)v7 - 20);
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 56physx::Sq::AABBTree::release(this, 0) = (char *)v7 + 20;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTreeIndices>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 52physx::Sq::AABBTree::release(this, 0) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (void *)(v6 + 8 * v7);
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 8 * v7;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    unsigned int v16 = *(_DWORD **)(a1 + 8);
    do
    {
      unsigned int v17 = *v16 + ~(*v16 << 15);
      unsigned int v18 = (9 * (v17 ^ (v17 >> 10))) ^ ((9 * (v17 ^ (v17 >> 10))) >> 6);
      unsigned int v19 = ((v18 + ~(v18 << 11)) ^ ((v18 + ~(v18 << 11)) >> 16)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      uint64_t v20 = *(void *)v16;
      v16 += 2;
      *(void *)&v13[8 * v15++] = v20;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  int v7 = *a2;
  unsigned int v8 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
  unsigned int v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  unsigned int v10 = (v9 ^ HIWORD(v9)) & (v6 - 1);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int const,unsigned int>,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::internal::HashMapBase<unsigned int,unsigned int,physx::shdfnd::Hash<unsigned int>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unsigned int v14 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
      unsigned int v10 = (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    uint64_t v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    int32x2_t v16 = a1[3];
    int32x2_t v17 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v15) = *(_DWORD *)(*(void *)&v16 + 4 * v10);
    *(_DWORD *)(*(void *)&v16 + 4 * v1physx::Sq::AABBTree::release(this, 0) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v17 + 8 * v15;
  }
  int32x2_t v12 = a1[1];
  while (*(_DWORD *)(*(void *)&v12 + 8 * v11) != v7)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void MainTreeRaycastCompoundPrunerCallback<false>::~MainTreeRaycastCompoundPrunerCallback()
{
}

uint64_t MainTreeRaycastCompoundPrunerCallback<false>::invoke(uint64_t a1, float *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 52) & *(unsigned __int16 *)(a1 + 40)) == 0) {
    return 1;
  }
  uint64_t v3 = *(void *)a3;
  if (!*(void *)(*(void *)a3 + 1144)) {
    return 1;
  }
  int v4 = *(float **)(a1 + 8);
  uint8x8_t v5 = *(float **)(a1 + 16);
  float v6 = v4[1] - *(float *)(a3 + 44);
  float v7 = v4[2] - *(float *)(a3 + 48);
  float v8 = (float)(*v4 - *(float *)(a3 + 40)) + (float)(*v4 - *(float *)(a3 + 40));
  float v9 = v6 + v6;
  float v10 = v7 + v7;
  float v12 = *(float *)(a3 + 32);
  float v11 = *(float *)(a3 + 36);
  float v13 = (float)(v11 * v11) + -0.5;
  float v14 = *(float *)(a3 + 24);
  float v15 = *(float *)(a3 + 28);
  float v16 = (float)((float)(v9 * v15) + (float)(v14 * v8)) + (float)(v12 * v10);
  v29.f32[0] = (float)((float)(v8 * v13) - (float)((float)((float)(v15 * v10) - (float)(v12 * v9)) * v11))
             + (float)(v14 * v16);
  v29.f32[1] = (float)((float)(v9 * v13) - (float)((float)((float)(v12 * v8) - (float)(v14 * v10)) * v11))
             + (float)(v15 * v16);
  float v30 = (float)((float)(v10 * v13) - (float)((float)((float)(v14 * v9) - (float)(v15 * v8)) * v11)) + (float)(v12 * v16);
  float v17 = *v5 + *v5;
  float v18 = v5[1] + v5[1];
  float v19 = v5[2] + v5[2];
  float v20 = (float)((float)(v15 * v18) + (float)(v14 * v17)) + (float)(v12 * v19);
  v27.f32[0] = (float)((float)(v17 * v13) - (float)((float)((float)(v15 * v19) - (float)(v12 * v18)) * v11))
             + (float)(v14 * v20);
  v27.f32[1] = (float)((float)(v18 * v13) - (float)((float)((float)(v12 * v17) - (float)(v14 * v19)) * v11))
             + (float)(v15 * v20);
  float v28 = (float)((float)(v19 * v13) - (float)((float)((float)(v14 * v18) - (float)(v15 * v17)) * v11))
      + (float)(v12 * v20);
  float32x4_t v21 = *(uint64_t **)(a1 + 24);
  float32x4_t v22 = *(unsigned int (****)(void, float *, uint64_t))(a1 + 32);
  uint64_t v25 = *v21;
  int v26 = *((_DWORD *)v21 + 2);
  return physx::Gu::AABBTreeRaycast<false,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v24, *(void *)(*(void *)(a3 + 8) + 16), *(void *)(*(void *)(a3 + 8) + 8), v3, &v29, &v27, a2, (uint64_t)&v25, v22);
}

void MainTreeRaycastCompoundPrunerCallback<true>::~MainTreeRaycastCompoundPrunerCallback()
{
}

uint64_t MainTreeRaycastCompoundPrunerCallback<true>::invoke(uint64_t a1, float *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 52) & *(unsigned __int16 *)(a1 + 40)) == 0) {
    return 1;
  }
  uint64_t v3 = *(void *)a3;
  if (!*(void *)(*(void *)a3 + 1144)) {
    return 1;
  }
  int v4 = *(float **)(a1 + 8);
  uint8x8_t v5 = *(float **)(a1 + 16);
  float v6 = v4[1];
  float v8 = *(float *)(a3 + 40);
  float v7 = *(float *)(a3 + 44);
  float v9 = v4[2];
  float v10 = *(float *)(a3 + 48);
  float v11 = (float)(*v4 - v8) + (float)(*v4 - v8);
  float v12 = (float)(v6 - v7) + (float)(v6 - v7);
  float v13 = (float)(v9 - v10) + (float)(v9 - v10);
  float v15 = *(float *)(a3 + 32);
  float v14 = *(float *)(a3 + 36);
  float v16 = (float)(v14 * v14) + -0.5;
  float v17 = *(float *)(a3 + 24);
  float v18 = *(float *)(a3 + 28);
  float v19 = (float)((float)(v12 * v18) + (float)(v17 * v11)) + (float)(v15 * v13);
  v76.f32[0] = (float)((float)(v11 * v16) - (float)((float)((float)(v18 * v13) - (float)(v15 * v12)) * v14))
             + (float)(v17 * v19);
  v76.f32[1] = (float)((float)(v12 * v16) - (float)((float)((float)(v15 * v11) - (float)(v17 * v13)) * v14))
             + (float)(v18 * v19);
  float v77 = (float)((float)(v13 * v16) - (float)((float)((float)(v17 * v12) - (float)(v18 * v11)) * v14))
      + (float)(v15 * v19);
  float v20 = *v5 + *v5;
  float v21 = v5[1] + v5[1];
  float v22 = v5[2] + v5[2];
  float v23 = (float)((float)(v18 * v21) + (float)(v17 * v20)) + (float)(v15 * v22);
  v74.f32[0] = (float)((float)(v20 * v16) - (float)((float)((float)(v18 * v22) - (float)(v15 * v21)) * v14))
             + (float)(v17 * v23);
  v74.f32[1] = (float)((float)(v21 * v16) - (float)((float)((float)(v15 * v20) - (float)(v17 * v22)) * v14))
             + (float)(v18 * v23);
  float v75 = (float)((float)(v22 * v16) - (float)((float)((float)(v17 * v21) - (float)(v18 * v20)) * v14))
      + (float)(v15 * v23);
  char v24 = *(float **)(a1 + 24);
  float v25 = v24[1];
  float v26 = v24[2];
  float v27 = *v4 - *v24;
  float v28 = v6 - v25;
  float v29 = v9 - v26;
  float v30 = *v24 + *v4;
  float v31 = v25 + v6;
  float v32 = v9 + v26;
  if (v27 <= v30)
  {
    float v33 = -v15;
    float v34 = -v18;
    float v35 = v10 * -2.0;
    float v36 = v8 * -2.0;
    float v37 = v7 * -2.0;
    float v38 = (float)((float)(v37 * v18) + (float)(v17 * v36)) + (float)(v15 * v35);
    float v39 = (float)((float)(v35 * v16) - (float)((float)((float)(v36 * (float)-v18) + (float)(v17 * v37)) * v14))
        + (float)(v15 * v38);
    float v40 = (float)((float)(v37 * v16) - (float)((float)((float)(v35 * (float)-v17) + (float)(v15 * v36)) * v14))
        + (float)(v18 * v38);
    float v41 = (float)((float)(v36 * v16) - (float)((float)((float)(v37 * (float)-v15) + (float)(v18 * v35)) * v14))
        + (float)(v17 * v38);
    float v42 = (float)((float)(v27 + v30) * 0.5) + (float)((float)(v27 + v30) * 0.5);
    float v43 = (float)((float)(v28 + v31) * 0.5) + (float)((float)(v28 + v31) * 0.5);
    float v44 = (float)((float)(v29 + v32) * 0.5) + (float)((float)(v29 + v32) * 0.5);
    float v45 = (float)((float)(v43 * (float)-v18) + (float)((float)-v17 * v42)) + (float)((float)-v15 * v44);
    float v46 = (float)((float)(v14 * (float)((float)(v15 * v43) + (float)((float)-v18 * v44))) + (float)(v42 * v16))
        + (float)((float)-v17 * v45);
    float v47 = (float)((float)(v14 * (float)((float)(v17 * v44) + (float)((float)-v15 * v42))) + (float)(v43 * v16))
        + (float)((float)-v18 * v45);
    float v48 = (float)((float)(v14 * (float)((float)(v18 * v42) + (float)((float)-v17 * v43))) + (float)(v44 * v16))
        + (float)((float)-v15 * v45);
    float v49 = v41 + v46;
    float v50 = v40 + v47;
    float v51 = v39 + v48;
    float v52 = (float)-v17 - v17;
    float v53 = (float)-v18 - v18;
    float v54 = (float)-v15 - v15;
    float v55 = v53 * v34;
    float v56 = v54 * v33;
    float v57 = v52 * v34;
    float v58 = v52 * v33;
    float v59 = v14 * v52;
    float v60 = v53 * v33;
    float v61 = v14 * v53;
    float v62 = v14 * v54;
    float v63 = (float)(v17 * v52) + 1.0;
    float v64 = (float)(v30 - v27) * 0.5;
    float v65 = (float)(v31 - v28) * 0.5;
    float v66 = (float)(v32 - v29) * 0.5;
    float v67 = fabsf((float)(v58 + v61) * v66)
        + (float)(fabsf((float)((float)(1.0 - v55) - v56) * v64) + fabsf((float)(v57 - v62) * v65));
    float v68 = fabsf((float)(v60 - v59) * v66) + (float)(fabsf((float)(v57 + v62) * v64) + fabsf((float)(v63 - v56) * v65));
    float v69 = fabsf((float)(v63 - v55) * v66) + (float)(fabsf((float)(v58 - v61) * v64) + fabsf((float)(v59 + v60) * v65));
    float v27 = v49 - v67;
    float v28 = v50 - v68;
    float v29 = v51 - v69;
    float v30 = v67 + v49;
    float v31 = v68 + v50;
    float v32 = v69 + v51;
  }
  v72.f32[0] = (float)(v30 - v27) * 0.5;
  v72.f32[1] = (float)(v31 - v28) * 0.5;
  float v73 = (float)(v32 - v29) * 0.5;
  return physx::Gu::AABBTreeRaycast<true,physx::Sq::IncrementalAABBTree,physx::Sq::IncrementalAABBTreeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v71, *(void *)(*(void *)(a3 + 8) + 16), *(void *)(*(void *)(a3 + 8) + 8), v3, &v76, &v74, a2, &v72, *(unsigned int (****)(void, float *, uint64_t))(a1 + 32));
}

uint64_t physx::Sq::CompoundTree::updateObjectAfterManualBoundsUpdates(physx::Sq::CompoundTree *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(unsigned int *)(*(void *)(v3 + 24) + 4 * a2);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)&v8, 8u);
  float v6 = physx::Sq::IncrementalAABBTree::update(*(void *)this, *(float32x4_t **)(**((void **)this + 2) + 8 * v5), v5, v4, (uint64_t)&v8);
  uint64_t result = physx::Sq::CompoundTree::updateMapping((uint64_t)this, v5, (uint64_t)v6, (uint64_t)&v8);
  if ((v9 & 0x8000000000000000) == 0 && (v9 & 0x7FFFFFFF00000000) != 0)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return result;
}

uint64_t physx::Sq::CompoundTree::updateMapping(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(v4) = *(_DWORD *)(a4 + 8);
  if (v4)
  {
    if (a3)
    {
      if (!*(void *)(a3 + 48))
      {
        uint64_t v5 = *(_DWORD **)(a3 + 40);
        if (*v5)
        {
          unint64_t v6 = 0;
          do
          {
            *(void *)(**(void **)(result + 16) + 8 * v5[++v6]) = a3;
            uint64_t v5 = *(_DWORD **)(a3 + 40);
          }
          while (v6 < *v5);
        }
      }
    }
    uint64_t v7 = 0;
    if (v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    do
    {
      uint64_t v8 = *(void *)(*(void *)a4 + 8 * v7);
      uint64_t v9 = *(_DWORD **)(v8 + 40);
      if (*v9)
      {
        unint64_t v10 = 0;
        do
        {
          *(void *)(**(void **)(result + 16) + 8 * v9[++v10]) = v8;
          uint64_t v9 = *(_DWORD **)(v8 + 40);
        }
        while (v10 < *v9);
      }
      ++v7;
    }
    while (v7 != v4);
  }
  else
  {
    *(void *)(**(void **)(result + 16) + 8 * a2) = a3;
  }
  return result;
}

uint64_t physx::Sq::CompoundTree::removeObject(physx::Sq::CompoundTree *this, unsigned int a2)
{
  uint64_t v3 = (physx::Sq::PruningPool *)*((void *)this + 1);
  uint64_t v4 = *(unsigned int *)(*((void *)v3 + 3) + 4 * a2);
  unsigned int v5 = physx::Sq::PruningPool::removeObject(v3, a2);
  uint64_t result = physx::Sq::IncrementalAABBTree::remove(*(void *)this, *(float32x4_t **)(**((void **)this + 2) + 8 * v4), v4, *(void *)(*((void *)this + 1) + 8));
  if (result)
  {
    if (!*(void *)(result + 48))
    {
      uint64_t v7 = *(_DWORD **)(result + 40);
      if (*v7)
      {
        unint64_t v8 = 0;
        do
        {
          *(void *)(**((void **)this + 2) + 8 * v7[++v8]) = result;
          uint64_t v7 = *(_DWORD **)(result + 40);
        }
        while (v8 < *v7);
      }
    }
  }
  *(void *)(**((void **)this + 2) + 8 * v4) = *(void *)(**((void **)this + 2) + 8 * v5);
  if (v5 != v4)
  {
    uint64_t v9 = *(unsigned int **)(*(void *)(**((void **)this + 2) + 8 * v4) + 40);
    uint64_t v10 = *v9;
    if (v10)
    {
      for (uint64_t i = v9 + 1; *i != v5; ++i)
      {
        if (!--v10) {
          return result;
        }
      }
      *uint64_t i = v4;
    }
  }
  return result;
}

uint64_t physx::Sq::PruningPool::removeObject(physx::Sq::PruningPool *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(unsigned int *)(v2 + 4 * a2);
  uint64_t v4 = (*(_DWORD *)this - 1);
  *(_DWORD *)this = v4;
  if (v4 != v3)
  {
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = v5 + 24 * v4;
    uint64_t v8 = v5 + 24 * v3;
    uint64_t v9 = *(unsigned int *)(*((void *)this + 4) + 4 * v4);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *(void *)(v7 + 16);
    *(_OWORD *)(v6 + 16 * v3) = *(_OWORD *)(v6 + 16 * v4);
    uint64_t v2 = *((void *)this + 3);
    *(_DWORD *)(*((void *)this + 4) + 4 * v3) = v9;
    *(_DWORD *)(v2 + 4 * v9) = v3;
  }
  *(_DWORD *)(v2 + 4 * a2) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 1physx::Sq::AABBTree::release(this, 0) = a2;
  return v4;
}

uint64_t physx::Sq::CompoundTree::addObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (unsigned int *)a2;
  *(void *)&long long v11 = a4;
  *((void *)&v11 + 1) = a5;
  physx::Sq::PruningPool::addObjects(*(physx::Sq::PruningPool **)(a1 + 8), a2, a3, &v11, 1u);
  LODWORD(v5) = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 24) + 4 * *v5);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::recreate((uint64_t)&v9, 8u);
  uint64_t v7 = physx::Sq::IncrementalAABBTree::insert(*(void *)a1, v5, *(void *)(*(void *)(a1 + 8) + 8), (uint64_t)&v9);
  physx::Sq::CompoundTree::updateMapping(a1, v5, (uint64_t)v7, (uint64_t)&v9);
  if ((v10 & 0x8000000000000000) == 0 && (v10 & 0x7FFFFFFF00000000) != 0 && v9) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return 1;
}

uint64_t physx::Sq::PruningPool::addObjects(physx::Sq::PruningPool *this, uint64_t a2, uint64_t a3, long long *a4, unsigned int a5)
{
  if (!a5)
  {
    LODWORD(v9) = 0;
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (uint64_t *)(a3 + 16);
  while (1)
  {
    unsigned int v11 = *(_DWORD *)this;
    if (*(_DWORD *)this == *((_DWORD *)this + 1)) {
      break;
    }
LABEL_9:
    *(_DWORD *)this = v11 + 1;
    uint64_t v14 = *((unsigned int *)this + 10);
    if (v14 == -1)
    {
      uint64_t v14 = v11;
      unsigned int v15 = v11;
    }
    else
    {
      *((_DWORD *)this + 1physx::Sq::AABBTree::release(this, 0) = *(_DWORD *)(*((void *)this + 3) + 4 * v14);
      unsigned int v15 = v14;
    }
    uint64_t v16 = *((void *)this + 2);
    float v17 = (void *)(*((void *)this + 1) + 24 * v11);
    void *v17 = *(v10 - 2);
    v17[1] = *(v10 - 1);
    uint64_t v18 = *v10;
    v10 += 3;
    v17[2] = v18;
    long long v19 = *a4++;
    *(_OWORD *)(v16 + 16 * v11) = v19;
    uint64_t v20 = *((void *)this + 3);
    *(_DWORD *)(*((void *)this + 4) + 4 * v11) = v15;
    *(_DWORD *)(v20 + 4 * v14) = v11;
    *(_DWORD *)(a2 + 4 * v9++) = v15;
    if (a5 == v9)
    {
      LODWORD(v9) = a5;
      goto LABEL_16;
    }
  }
  unsigned int v12 = 2 * v11;
  if (v12 <= 0x40) {
    unsigned int v13 = 64;
  }
  else {
    unsigned int v13 = v12;
  }
  if (physx::Sq::PruningPool::resize(this, v13))
  {
    unsigned int v11 = *(_DWORD *)this;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 4 * v9) = -1;
LABEL_16:
  if (v9 >= a5) {
    return a5;
  }
  else {
    return v9;
  }
}

void physx::Sq::CompoundTreePool::~CompoundTreePool(physx::Sq::CompoundTreePool *this)
{
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 1) = 0;
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2) = 0;
}

uint64_t physx::Sq::CompoundTreePool::resize(physx::Sq::CompoundTreePool *this, unsigned int a2)
{
  if (a2 == -1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0x37FFFFFFC8;
  }
  else
  {
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 152);
    uint64_t v5 = 56 * a2;
    if (!a2)
    {
      bzero(0, 56 * a2);
      uint64_t v6 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 153);
  bzero(v6, v5 & 0xFFFFFFF8);
  if (v4 && v6)
  {
    uint64_t v7 = (const void *)*((void *)this + 1);
    if (v7) {
      memcpy(v4, v7, (24 * *(_DWORD *)this));
    }
    uint64_t v8 = (const void *)*((void *)this + 2);
    if (v8) {
      memcpy(v6, v8, (56 * *(_DWORD *)this));
    }
    *((_DWORD *)this + 1) = a2;
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 1) = 0;
    if (*((void *)this + 2)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 1) = v4;
    *((void *)this + 2) = v6;
    return 1;
  }
LABEL_16:
  if (v4) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  if (v6) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  }
  return 0;
}

float physx::Sq::CompoundTreePool::shiftOrigin(unsigned int *a1, float32x2_t *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = (float *)(*((void *)a1 + 2) + 48);
    uint64_t v4 = (float32x2_t *)(*((void *)a1 + 1) + 12);
    do
    {
      *(float32x2_t *)((char *)v4 - 12) = vsub_f32(*(float32x2_t *)((char *)v4 - 12), *a2);
      v4[-1].f32[1] = v4[-1].f32[1] - a2[1].f32[0];
      float32x2_t *v4 = vsub_f32(*v4, *a2);
      v4[1].f32[0] = v4[1].f32[0] - a2[1].f32[0];
      *((float32x2_t *)v3 - 1) = vsub_f32(*(float32x2_t *)(v3 - 2), *a2);
      float result = *v3 - a2[1].f32[0];
      *uint64_t v3 = result;
      v3 += 14;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t physx::Sq::CompoundTreePool::addCompound(physx::Sq::CompoundTreePool *this, uint64_t a2, void *a3, void *a4, uint64_t a5, int a6, long long *a7)
{
  uint64_t v14 = *(unsigned int *)this;
  if (v14 == *((_DWORD *)this + 1))
  {
    if ((2 * v14) <= 0x20) {
      unsigned int v15 = 32;
    }
    else {
      unsigned int v15 = 2 * v14;
    }
    if (!physx::Sq::CompoundTreePool::resize(this, v15))
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 207, "CompoundTreePool::addCompound memory allocation in resize failed.", v16, v17, v18, v32);
      return 0xFFFFFFFFLL;
    }
    uint64_t v14 = *(unsigned int *)this;
  }
  *(_DWORD *)this = v14 + 1;
  long long v19 = (void *)(*((void *)this + 1) + 24 * v14);
  *long long v19 = *a4;
  v19[1] = a4[1];
  v19[2] = a4[2];
  unsigned int v20 = (*(uint64_t (**)(void *))(*a3 + 80))(a3);
  uint64_t v21 = *((void *)this + 2);
  uint64_t v22 = v21 + 56 * v14;
  *(_OWORD *)(v22 + 24) = *(_OWORD *)a5;
  *(void *)(v22 + 4physx::Sq::AABBTree::release(this, 0) = *(void *)(a5 + 16);
  *(_DWORD *)(v22 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(v22 + 52) = a6;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 48, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 228);
  char v24 = (physx::Sq::PruningPool *)v23;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(void *)(v23 + 32) = 0;
  *(_DWORD *)(v23 + 4physx::Sq::AABBTree::release(this, 0) = -1;
  if (v20) {
    physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)v23, v20);
  }
  uint64_t v25 = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
  physx::Sq::PruningPool::addObjects(v24, a2, v25, a7, v20);
  uint64_t v26 = v21 + 56 * v14;
  *(void *)(v26 + 8) = v24;
  float v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 234);
  void *v27 = 0;
  v27[1] = 0;
  physx::shdfnd::Array<physx::Sq::IncrementalAABBTreeNode *,physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTreeNode *>>::resizeUninitialized((uint64_t)v27, v20);
  *(void *)(v26 + 16) = v27;
  uint64_t v28 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::IncrementalAABBTree>::getName() [T = physx::S"
  }
          "q::IncrementalAABBTree]";
  else {
    float v29 = "<allocation names disabled>";
  }
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v28 + 24) + 16))(v28 + 24, 1184, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqCompoundPruningPool.cpp", 238);
  *(void *)(v30 + 544) = 0x4000000000;
  *(unsigned char *)(v30 + 528) = 1;
  *(void *)(v30 + 536) = v30 + 16;
  *(void *)(v30 + 552) = 256;
  *(_DWORD *)(v30 + 56physx::Sq::AABBTree::release(this, 0) = 5120;
  *(void *)(v30 + 568) = 0;
  *(void *)(v30 + 1112) = 0x4000000000;
  *(unsigned char *)(v30 + 1096) = 1;
  *(void *)(v30 + 1104) = v30 + 584;
  *(void *)(v30 + 112physx::Sq::AABBTree::release(this, 0) = 256;
  *(_DWORD *)(v30 + 1128) = 0x8000;
  *(_OWORD *)(v30 + 1136) = 0u;
  *(_OWORD *)(v30 + 1152) = 0u;
  *(_OWORD *)(v30 + 1168) = 0u;
  physx::Sq::IncrementalAABBTree::copy(v30, a3, v27);
  *(void *)uint64_t v22 = v30;
  return v14;
}

float physx::Sq::CompoundTreePool::removeCompound(physx::Sq::CompoundTreePool *this, unsigned int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(physx::Sq::IncrementalAABBTree **)(*((void *)this + 2) + 56 * a2);
  uint64_t v6 = (void *)*((void *)v5 + 143);
  if (v6)
  {
    physx::Sq::IncrementalAABBTree::releaseNode((uint64_t)v5, v6);
    *((void *)v5 + 143) = 0;
    uint64_t v5 = *(physx::Sq::IncrementalAABBTree **)(*((void *)this + 2) + 56 * v4);
  }
  physx::Sq::IncrementalAABBTree::~IncrementalAABBTree(v5);
  uint64_t v7 = *((void *)this + 2);
  if (*(void *)(v7 + 56 * v4))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v7 = *((void *)this + 2);
  }
  uint64_t v8 = (void *)(v7 + 56 * v4);
  *uint64_t v8 = 0;
  uint64_t v9 = v8[2];
  *(_DWORD *)(v9 + 8) = 0;
  int v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 0
    || ((v10 & 0x7FFFFFFF) != 0 ? (BOOL v11 = *(void *)v9 == 0) : (BOOL v11 = 1),
        v11
     || ((*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v9), uint64_t v12 = *((void *)this + 2), *(void *)(v12 + 56 * v4 + 16))))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v12 = *((void *)this + 2);
  }
  uint64_t v13 = v12 + 56 * v4;
  *(void *)(v13 + 16) = 0;
  physx::Sq::PruningPool::~PruningPool(*(physx::Sq::PruningPool **)(v13 + 8));
  uint64_t v15 = *((void *)this + 2);
  if (*(void *)(v15 + 56 * v4 + 8))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v15 = *((void *)this + 2);
  }
  *(void *)(v15 + 56 * v4 + 8) = 0;
  unsigned int v16 = *(_DWORD *)this - 1;
  *(_DWORD *)this = v16;
  if (v16 != a2)
  {
    uint64_t v17 = *((void *)this + 1);
    uint64_t v18 = v17 + 24 * v16;
    uint64_t v19 = v17 + 24 * v4;
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
    *(void *)(v19 + 16) = *(void *)(v18 + 16);
    uint64_t v20 = 56 * v16;
    uint64_t v21 = (long long *)(v15 + v20);
    uint64_t v22 = v15 + 56 * v4;
    long long v23 = *v21;
    *(void *)(v22 + 16) = *((void *)v21 + 2);
    *(_OWORD *)uint64_t v22 = v23;
    *(_OWORD *)(v22 + 24) = *(long long *)((char *)v21 + 24);
    *(void *)(v22 + 4physx::Sq::AABBTree::release(this, 0) = *((void *)v21 + 5);
    float result = *((float *)v21 + 12);
    *(float *)(v22 + 48) = result;
    *(_DWORD *)(v22 + 52) = *((_DWORD *)v21 + 13);
    char v24 = (void *)(*((void *)this + 2) + v20);
    *char v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
  }
  return result;
}

uint64_t physx::Sq::BucketPrunerNode::classifyBoxes(uint64_t result, unsigned int a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, int a7, int a8, float32_t a9, float a10)
{
  uint64_t v10 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)float result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  do
  {
    *(_OWORD *)&v38[v10 + 80] = xmmword_234421D10;
    *(_OWORD *)&v38[v10] = xmmword_234421D20;
    v10 += 16;
  }
  while (v10 != 80);
  uint64_t v11 = 2;
  if (a8 != 1) {
    uint64_t v11 = 1;
  }
  if (a7) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = a2;
  uint64_t v14 = (float32x4_t *)a3;
  uint64_t v15 = a2;
  do
  {
    float32x4_t v16 = v14[1];
    float32x4_t v17 = vsubq_f32(*v14, v16);
    float32x4_t v18 = vaddq_f32(*v14, v16);
    uint64_t v19 = gCodes[v12 | (v17.f32[0] > a9) | (2 * (v18.f32[0] < a9)) | (4
                                                                      * ((float)(v14->f32[v11] - v14[1].f32[v11]) > a10)) | (8 * ((float)(v14->f32[v11] + v14[1].f32[v11]) < a10))];
    float32x4_t v20 = vminq_f32(*(float32x4_t *)&v38[16 * v19 + 80], v17);
    float32x4_t v21 = *(float32x4_t *)&v38[16 * v19];
    *(float32x4_t *)&v38[16 * v19 + 80] = v20;
    *(float32x4_t *)&v38[16 * v19] = vmaxq_f32(v21, v18);
    v14->i32[3] = v19;
    ++*(_DWORD *)(result + 4 * v19);
    v14 += 2;
    --v15;
  }
  while (v15);
  uint64_t v22 = 0;
  int v23 = 0;
  *(_DWORD *)(result + 2physx::Sq::AABBTree::release(this, 0) = 0;
  do
  {
    v23 += *(_DWORD *)(result + v22);
    *(_DWORD *)(result + v22 + 24) = v23;
    v22 += 4;
  }
  while (v22 != 16);
  char v24 = (long long *)(a3 + 16);
  do
  {
    uint64_t v25 = result + 4 * *((unsigned int *)v24 - 1);
    uint64_t v26 = *(unsigned int *)(v25 + 20);
    *(_DWORD *)(v25 + 2physx::Sq::AABBTree::release(this, 0) = v26 + 1;
    float v27 = (_OWORD *)(a5 + 32 * v26);
    _OWORD *v27 = *(v24 - 1);
    long long v28 = *v24;
    v24 += 2;
    v27[1] = v28;
    long long v29 = *a4++;
    *(_OWORD *)(a6 + 16 * v26) = v29;
    --v13;
  }
  while (v13);
  int v30 = 0;
  *(_DWORD *)(result + 2physx::Sq::AABBTree::release(this, 0) = 0;
  do
  {
    v30 += *(_DWORD *)(result + v13);
    *(_DWORD *)(result + v13 + 24) = v30;
    v13 += 4;
  }
  while (v13 != 16);
  uint64_t v31 = 0;
  char v32 = (_DWORD *)(result + 72);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  do
  {
    float32x4_t v34 = *(float32x4_t *)&v38[v31 + 80];
    float32x4_t v35 = *(float32x4_t *)&v38[v31];
    float32x4_t v36 = vmulq_f32(vaddq_f32(v34, v35), v33);
    float32x4_t v37 = vmulq_f32(vsubq_f32(v35, v34), v33);
    *((void *)v32 - 3) = v36.i64[0];
    *(v32 - 4) = v36.i32[2];
    *((void *)v32 - 1) = v37.i64[0];
    *char v32 = v37.i32[2];
    v31 += 16;
    v32 += 8;
  }
  while (v31 != 80);
  return result;
}

void *processChildBuckets(void *result, const void *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = result;
  uint64_t v10 = 0;
  if (a7 == 1) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v12 = (float32_t *)(a3 + 12);
  uint64_t v13 = a3;
  do
  {
    unsigned int v15 = *v13++;
    unsigned int v14 = v15;
    if (v15)
    {
      uint64_t v16 = a3[5];
      float32x4_t v17 = (void *)(a5 + 32 * v16);
      float32x4_t v18 = (long long *)(a6 + 16 * v16);
      physx::Sq::BucketPrunerNode::classifyBoxes(a4 + v10, v14, (uint64_t)v17, v18, (uint64_t)v9, (uint64_t)a2, v10 == 896, a7, *v12, v12[v11]);
      memcpy(v17, v9, 32 * v14);
      float result = memcpy(v18, a2, 16 * v14);
    }
    else
    {
      uint64_t v19 = a4 + v10;
      *(void *)uint64_t v19 = 0;
      *(void *)(v19 + 8) = 0;
      *(_DWORD *)(v19 + 16) = 0;
      *(void *)(v19 + 28) = 0;
      *(void *)(v19 + 2physx::Sq::AABBTree::release(this, 0) = 0;
      *(_DWORD *)(v19 + 36) = 0;
    }
    v10 += 224;
    v12 += 8;
    a3 = v13;
  }
  while (v10 != 1120);
  return result;
}

uint64_t gPrecomputeSort(uint64_t result)
{
  if ((vaddvq_s32(*(int32x4_t *)result) + *(_DWORD *)(result + 16)) > 0xF)
  {
    v2.i32[0] = v92;
    v3.i32[0] = v93;
    v4.i32[0] = v94;
    v5.i32[0] = v95;
    v6.i32[0] = v96;
    v2.i32[1] = v92;
    v3.i32[1] = v93;
    v4.i32[1] = v94;
    v5.i32[1] = v95;
    v6.i32[1] = v96;
    v2.i32[2] = v92;
    v3.i32[2] = v93;
    v4.i32[2] = v94;
    v5.i32[2] = v95;
    v6.i32[2] = v96;
    v2.i32[3] = v92;
    int8x16_t v7 = (int8x16_t)vdupq_n_s32(0x7FFFFFF8u);
    v3.i32[3] = v93;
    uint32x4_t v8 = (uint32x4_t)vandq_s8(v2, v7);
    unsigned long long v9 = *(_OWORD *)&vandq_s8(v3, v7) | __PAIR128__(0x100000001, 0x100000001);
    v4.i32[3] = v94;
    unsigned long long v10 = *(_OWORD *)&vandq_s8(v4, v7) | __PAIR128__(0x200000002, 0x200000002);
    v5.i32[3] = v95;
    unsigned long long v11 = *(_OWORD *)&vandq_s8(v5, v7) | __PAIR128__(0x300000003, 0x300000003);
    uint32x4_t v12 = vmaxq_u32((uint32x4_t)v9, v8);
    uint32x4_t v13 = vmaxq_u32((uint32x4_t)v10, v12);
    uint32x4_t v14 = vminq_u32((uint32x4_t)v9, v8);
    uint32x4_t v15 = vminq_u32((uint32x4_t)v10, v12);
    uint32x4_t v16 = vminq_u32((uint32x4_t)v11, v13);
    v6.i32[3] = v96;
    unsigned long long v17 = *(_OWORD *)&vandq_s8(v6, v7) | __PAIR128__(0x400000004, 0x400000004);
    uint32x4_t v18 = vmaxq_u32((uint32x4_t)v11, v13);
    uint32x4_t v19 = vminq_u32((uint32x4_t)v17, v18);
    uint32x4_t v20 = vmaxq_u32(v15, v14);
    uint32x4_t v21 = vmaxq_u32(v16, v20);
    uint32x4_t v22 = vmaxq_u32((uint32x4_t)v17, v18);
    uint32x4_t v23 = vminq_u32(v15, v14);
    uint32x4_t v24 = vminq_u32(v16, v20);
    uint32x4_t v25 = vminq_u32(v19, v21);
    uint32x4_t v26 = vmaxq_u32(v19, v21);
    uint32x4_t v27 = vminq_u32(v22, v26);
    uint32x4_t v28 = vmaxq_u32(v22, v26);
    uint32x4_t v29 = vminq_u32(v24, v23);
    uint32x4_t v30 = vmaxq_u32(v24, v23);
    uint32x4_t v31 = vminq_u32(v25, v30);
    uint32x4_t v32 = vmaxq_u32(v25, v30);
    uint32x4_t v33 = vminq_u32(v27, v32);
    uint32x4_t v34 = vmaxq_u32(v27, v32);
    uint32x4_t v35 = vminq_u32(v28, v34);
    int8x16_t v36 = (int8x16_t)vmaxq_u32(v28, v34);
    int8x16_t v37 = (int8x16_t)vminq_u32(v31, v29);
    uint32x4_t v38 = vmaxq_u32(v31, v29);
    int32x4_t v39 = (int32x4_t)vminq_u32(v33, v38);
    uint32x4_t v40 = vmaxq_u32(v33, v38);
    int32x4_t v41 = (int32x4_t)vminq_u32(v35, v40);
    uint32x4_t v42 = vmaxq_u32(v35, v40);
    int32x4_t v43 = (int32x4_t)vminq_u32((uint32x4_t)v36, v42);
    int32x4_t v44 = (int32x4_t)vmaxq_u32((uint32x4_t)v36, v42);
    v36.i64[0] = 0x700000007;
    v36.i64[1] = 0x700000007;
    int8x16_t v45 = vandq_s8(v37, v36);
    int8x16_t v46 = (int8x16_t)vshlq_n_s32(v39, 3uLL);
    v39.i64[0] = 0x3800000038;
    v39.i64[1] = 0x3800000038;
    int8x16_t v47 = vorrq_s8(vandq_s8(v46, (int8x16_t)v39), v45);
    int8x16_t v48 = (int8x16_t)vdupq_n_s32(0x1C0u);
    v39.i64[0] = 0xE0000000E00;
    v39.i64[1] = 0xE0000000E00;
    int8x16_t v49 = vorrq_s8(vorrq_s8(v47, vandq_s8((int8x16_t)vshlq_n_s32(v41, 6uLL), v48)), vandq_s8((int8x16_t)vshlq_n_s32(v43, 9uLL), (int8x16_t)v39));
    v41.i64[0] = 0x700000007000;
    v41.i64[1] = 0x700000007000;
    *(int16x4_t *)(result + 208) = vmovn_s32((int32x4_t)vorrq_s8(v49, vandq_s8((int8x16_t)vshlq_n_s32(v44, 0xCuLL), (int8x16_t)v41)));
    v49.i32[0] = v92;
    v44.i32[0] = v93;
    v41.i32[0] = v94;
    v39.i32[0] = v95;
    v43.i32[0] = v96;
    v49.i32[1] = v92;
    *(int8x8_t *)v49.i8 = vand_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v7.i8);
    v44.i32[1] = v93;
    v41.i32[1] = v94;
    v44.i64[0] = *(void *)&vand_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v7.i8) | 0x100000001;
    v41.i64[0] = *(void *)&vand_s8(*(int8x8_t *)v41.i8, *(int8x8_t *)v7.i8) | 0x200000002;
    v39.i32[1] = v95;
    v39.i64[0] = *(void *)&vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v7.i8) | 0x300000003;
    *(uint32x2_t *)v20.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v21.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v21.i8);
    v43.i32[1] = v96;
    v7.i64[0] = *(void *)&vand_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v7.i8) | 0x400000004;
    *(uint32x2_t *)v39.i8 = vmax_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v20.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v21.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v20.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v39.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v21.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v39.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v44.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v43.i8 = vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v7.i8 = vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v49.i8);
    *(uint32x2_t *)v49.i8 = vmin_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v44.i8, *(uint32x2_t *)v39.i8);
    *(uint32x2_t *)v39.i8 = vmin_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v41.i8 = vmin_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v44.i8);
    *(uint32x2_t *)v44.i8 = vmax_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v44.i8);
    *(int8x8_t *)v7.i8 = vorr_s8(vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v39.i8, 3uLL), (int8x8_t)0x3800000038), vand_s8(*(int8x8_t *)v49.i8, (int8x8_t)0x700000007)), vand_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)v41.i8, 6uLL), *(int8x8_t *)v48.i8)), vand_s8((int8x8_t)vshl_n_s32((int32x2_t)vmin_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v44.i8), 9uLL), (int8x8_t)0xE0000000E00)), vand_s8((int8x8_t)vshl_n_s32((int32x2_t)vmax_u32(*(uint32x2_t *)v7.i8, *(uint32x2_t *)v44.i8), 0xCuLL), (int8x8_t)0x700000007000));
    *(_WORD *)(result + 218) = v7.i16[2];
    *(_WORD *)(result + 216) = v7.i16[0];
    unsigned int v50 = v92 & 0x7FFFFFF8;
    unsigned int v51 = v93 & 0x7FFFFFF8 | 1;
    unsigned int v52 = v94 & 0x7FFFFFF8 | 2;
    unsigned int v53 = v95 & 0x7FFFFFF8 | 3;
    unsigned int v54 = v96 & 0x7FFFFFF8 | 4;
    if (v51 >= (v92 & 0x7FFFFFF8u)) {
      unsigned int v55 = v92 & 0x7FFFFFF8;
    }
    else {
      unsigned int v55 = v93 & 0x7FFFFFF8 | 1;
    }
    if (v51 > v50) {
      unsigned int v50 = v93 & 0x7FFFFFF8 | 1;
    }
    if (v52 >= v50) {
      unsigned int v56 = v50;
    }
    else {
      unsigned int v56 = v94 & 0x7FFFFFF8 | 2;
    }
    if (v52 > v50) {
      unsigned int v50 = v94 & 0x7FFFFFF8 | 2;
    }
    if (v53 >= v50) {
      unsigned int v57 = v50;
    }
    else {
      unsigned int v57 = v95 & 0x7FFFFFF8 | 3;
    }
    if (v53 > v50) {
      unsigned int v50 = v95 & 0x7FFFFFF8 | 3;
    }
    if (v54 >= v50) {
      unsigned int v58 = v50;
    }
    else {
      unsigned int v58 = v96 & 0x7FFFFFF8 | 4;
    }
    if (v54 <= v50) {
      unsigned int v54 = v50;
    }
    if (v56 >= v55) {
      unsigned int v59 = v55;
    }
    else {
      unsigned int v59 = v56;
    }
    if (v56 <= v55) {
      unsigned int v56 = v55;
    }
    if (v57 >= v56) {
      unsigned int v60 = v56;
    }
    else {
      unsigned int v60 = v57;
    }
    if (v57 > v56) {
      unsigned int v56 = v57;
    }
    if (v58 >= v56) {
      unsigned int v61 = v56;
    }
    else {
      unsigned int v61 = v58;
    }
    if (v58 > v56) {
      unsigned int v56 = v58;
    }
    if (v54 >= v56) {
      unsigned int v62 = v56;
    }
    else {
      unsigned int v62 = v54;
    }
    if (v54 <= v56) {
      unsigned int v54 = v56;
    }
    if (v60 >= v59) {
      unsigned int v63 = v59;
    }
    else {
      unsigned int v63 = v60;
    }
    if (v60 > v59) {
      unsigned int v59 = v60;
    }
    if (v61 >= v59) {
      unsigned int v64 = v59;
    }
    else {
      unsigned int v64 = v61;
    }
    if (v61 > v59) {
      unsigned int v59 = v61;
    }
    if (v62 >= v59) {
      unsigned int v65 = v59;
    }
    else {
      unsigned int v65 = v62;
    }
    if (v62 > v59) {
      unsigned int v59 = v62;
    }
    if (v54 >= v59) {
      unsigned int v66 = v59;
    }
    else {
      unsigned int v66 = v54;
    }
    if (v54 <= v59) {
      unsigned int v54 = v59;
    }
    if (v64 >= v63) {
      char v67 = v63;
    }
    else {
      char v67 = v64;
    }
    if (v64 > v63) {
      unsigned int v63 = v64;
    }
    if (v65 >= v63) {
      char v68 = v63;
    }
    else {
      char v68 = v65;
    }
    if (v65 > v63) {
      unsigned int v63 = v65;
    }
    if (v66 >= v63) {
      char v69 = v63;
    }
    else {
      char v69 = v66;
    }
    if (v66 > v63) {
      unsigned int v63 = v66;
    }
    if (v54 >= v63) {
      char v70 = v63;
    }
    else {
      char v70 = v54;
    }
    if (v54 <= v63) {
      LOBYTE(v54) = v63;
    }
    *(_WORD *)(result + 22physx::Sq::AABBTree::release(this, 0) = v67 & 7 | (8 * (v68 & 7)) & 0x3F | ((v69 & 7) << 6) & 0x81FF | ((v70 & 7) << 9) & 0x8FFF | ((v54 & 7) << 12);
    unsigned int v71 = v92 & 0x7FFFFFF8;
    unsigned int v72 = v93 & 0x7FFFFFF8 | 1;
    unsigned int v73 = v94 & 0x7FFFFFF8 | 2;
    unsigned int v74 = v95 & 0x7FFFFFF8 | 3;
    unsigned int v75 = v96 & 0x7FFFFFF8 | 4;
    if (v72 >= (v92 & 0x7FFFFFF8u)) {
      unsigned int v76 = v92 & 0x7FFFFFF8;
    }
    else {
      unsigned int v76 = v93 & 0x7FFFFFF8 | 1;
    }
    if (v72 > v71) {
      unsigned int v71 = v93 & 0x7FFFFFF8 | 1;
    }
    if (v73 >= v71) {
      unsigned int v77 = v71;
    }
    else {
      unsigned int v77 = v94 & 0x7FFFFFF8 | 2;
    }
    if (v73 > v71) {
      unsigned int v71 = v94 & 0x7FFFFFF8 | 2;
    }
    if (v74 >= v71) {
      unsigned int v78 = v71;
    }
    else {
      unsigned int v78 = v95 & 0x7FFFFFF8 | 3;
    }
    if (v74 > v71) {
      unsigned int v71 = v95 & 0x7FFFFFF8 | 3;
    }
    if (v75 >= v71) {
      unsigned int v79 = v71;
    }
    else {
      unsigned int v79 = v96 & 0x7FFFFFF8 | 4;
    }
    if (v75 <= v71) {
      unsigned int v75 = v71;
    }
    if (v77 >= v76) {
      unsigned int v80 = v76;
    }
    else {
      unsigned int v80 = v77;
    }
    if (v77 <= v76) {
      unsigned int v77 = v76;
    }
    if (v78 >= v77) {
      unsigned int v81 = v77;
    }
    else {
      unsigned int v81 = v78;
    }
    if (v78 > v77) {
      unsigned int v77 = v78;
    }
    if (v79 >= v77) {
      unsigned int v82 = v77;
    }
    else {
      unsigned int v82 = v79;
    }
    if (v79 > v77) {
      unsigned int v77 = v79;
    }
    if (v75 >= v77) {
      unsigned int v83 = v77;
    }
    else {
      unsigned int v83 = v75;
    }
    if (v75 <= v77) {
      unsigned int v75 = v77;
    }
    if (v81 >= v80) {
      unsigned int v84 = v80;
    }
    else {
      unsigned int v84 = v81;
    }
    if (v81 > v80) {
      unsigned int v80 = v81;
    }
    if (v82 >= v80) {
      unsigned int v85 = v80;
    }
    else {
      unsigned int v85 = v82;
    }
    if (v82 > v80) {
      unsigned int v80 = v82;
    }
    if (v83 >= v80) {
      unsigned int v86 = v80;
    }
    else {
      unsigned int v86 = v83;
    }
    if (v83 > v80) {
      unsigned int v80 = v83;
    }
    if (v75 >= v80) {
      unsigned int v87 = v80;
    }
    else {
      unsigned int v87 = v75;
    }
    if (v75 <= v80) {
      unsigned int v75 = v80;
    }
    if (v85 >= v84) {
      char v88 = v84;
    }
    else {
      char v88 = v85;
    }
    if (v85 > v84) {
      unsigned int v84 = v85;
    }
    if (v86 >= v84) {
      char v89 = v84;
    }
    else {
      char v89 = v86;
    }
    if (v86 > v84) {
      unsigned int v84 = v86;
    }
    if (v87 >= v84) {
      char v90 = v84;
    }
    else {
      char v90 = v87;
    }
    if (v87 > v84) {
      unsigned int v84 = v87;
    }
    if (v75 >= v84) {
      char v91 = v84;
    }
    else {
      char v91 = v75;
    }
    if (v75 > v84) {
      LOBYTE(v84) = v75;
    }
    __int16 v1 = v88 & 7 | (8 * (v89 & 7)) & 0x3F | ((v90 & 7) << 6) & 0x81FF | ((v91 & 7) << 9) & 0x8FFF | ((v84 & 7) << 12);
  }
  else
  {
    __int16 v1 = 18056;
    *(int16x4_t *)(result + 208) = vdup_n_s16(0x4688u);
    *(_DWORD *)(result + 216) = 1183336072;
    *(_WORD *)(result + 22physx::Sq::AABBTree::release(this, 0) = 18056;
  }
  *(_WORD *)(result + 222) = v1;
  return result;
}

uint64_t BucketPrunerOverlapTraversal<OBBAABBTest_SIMD,false>::operator()(float32x4_t *a1, float32x4_t *a2, uint64_t (***a3)(void, int *, uint64_t), uint64_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  unsigned long long v11 = a1;
  unint64_t v12 = a1[3].u32[0];
  if (v12)
  {
    unint64_t v13 = 0;
    uint32x4_t v14 = &a1[3].i64[1];
    uint32x4_t v15 = &a1[20].f32[3];
    do
    {
      float v16 = *(v15 - 3);
      float32x2_t v17 = *(float32x2_t *)(v15 - 5);
      float32x2_t v18 = *(float32x2_t *)(v15 - 2);
      *(float32x2_t *)v24.f32 = vmul_f32(vadd_f32(v17, v18), (float32x2_t)0x3F0000003F000000);
      *(float *)&unsigned int v19 = (float)(v16 + *v15) * 0.5;
      float32x2_t v20 = vsub_f32(v18, v17);
      v17.f32[0] = vmuls_lane_f32(0.5, v20, 1);
      v18.f32[0] = (float)(*v15 - v16) * 0.5;
      a8.i32[1] = 0;
      a8.i64[1] = 0;
      *(float *)a8.i32 = 0.5 * v20.f32[0];
      float32x4_t v21 = (float32x4_t)a8.u32[0];
      v21.i32[1] = v17.i32[0];
      float32x4_t v22 = v21;
      v22.i32[2] = v18.i32[0];
      float32x4_t v23 = a2[1];
      v24.i64[1] = v19;
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v23, v24), vaddq_f32(a2[8], v22))), *(int8x8_t *)v21.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v25 = vsubq_f32(v23, v24);
        float32x4_t v26 = vmulq_n_f32(a2[2], v25.f32[0]);
        v26.i32[3] = 0;
        float32x4_t v27 = vmlaq_lane_f32(v26, a2[3], *(float32x2_t *)v25.f32, 1);
        v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
        float32x4_t v28 = vmlaq_laneq_f32(v27, a2[4], v25, 2);
        v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
        float32x4_t v29 = vmlaq_n_f32(*a2, a2[5], *(float *)a8.i32);
        a8 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
        a8.i32[1] = 0;
        v29.i64[1] = a8.u32[0];
        float32x4_t v30 = vmlaq_lane_f32(v29, a2[6], *(float32x2_t *)v21.f32, 1);
        v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
        float32x4_t v31 = vmlaq_laneq_f32(v30, a2[7], v22, 2);
        v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
        int8x8_t v32 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v28), v31));
        if ((vuzp1_s8(v32, v32).u32[0] & 0xFFFFFF) == 0)
        {
          int v121 = -1082130432;
          uint64_t result = (**a3)(a3, &v121, (uint64_t)v14);
          if (!result) {
            return result;
          }
          unint64_t v12 = v11[3].u32[0];
        }
      }
      ++v13;
      v14 += 2;
      v15 += 6;
    }
    while (v13 < v12);
  }
  if (!v11[50].i32[2]) {
    return 1;
  }
  a8.i32[0] = v11[53].i32[0];
  __n128 v34 = (__n128)a8;
  v34.n128_u32[1] = v11[53].u32[1];
  float32x4_t v35 = (float32x4_t)v34;
  v35.i32[2] = v11[53].i32[2];
  float32x4_t v36 = a2[1];
  float32x4_t v37 = v11[52];
  v37.i64[1] = v11[52].u32[2];
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v36, v37), vaddq_f32(v35, a2[8]))), (int8x8_t)v34.n128_u64[0]).u32[0] & 0xFFFFFF) != 0) {
    return 1;
  }
  float32x4_t v38 = vsubq_f32(v36, v37);
  float32x4_t v39 = vmulq_n_f32(a2[2], v38.f32[0]);
  v39.i32[3] = 0;
  float32x4_t v40 = vmlaq_lane_f32(v39, a2[3], *(float32x2_t *)v38.f32, 1);
  v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
  float32x4_t v41 = vmlaq_laneq_f32(v40, a2[4], v38, 2);
  v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
  float32x4_t v42 = vmlaq_n_f32(*a2, a2[5], *(float *)a8.i32);
  int8x16_t v43 = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
  v43.i32[1] = 0;
  v42.i64[1] = v43.u32[0];
  float32x4_t v44 = vmlaq_lane_f32(v42, a2[6], (float32x2_t)v34.n128_u64[0], 1);
  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  float32x4_t v45 = vmlaq_laneq_f32(v44, a2[7], v35, 2);
  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
  int8x8_t v46 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v41), v45));
  if ((vuzp1_s8(v46, v46).u32[0] & 0xFFFFFF) != 0) {
    return 1;
  }
  float32x4_t v117 = a3;
  uint64_t v47 = 0;
  int8x16_t v48 = (int *)(a4 + 4 * v11[51].u32[0]);
  int v49 = *v48;
  unsigned int v50 = *v48 | 0x80000000;
  int v51 = v48[3];
  if (v49 < 0) {
    unsigned int v52 = ~v49;
  }
  else {
    unsigned int v52 = v50;
  }
  if (v51 < 0) {
    uint64_t v53 = ~v51;
  }
  else {
    uint64_t v53 = v51 | 0x80000000;
  }
  float32x4_t v120 = v11 + 54;
  while (1)
  {
    if (v120->i32[v47])
    {
      unsigned int v54 = &v11[2 * v47];
      v43.i32[0] = v54[58].i32[0];
      float32x4_t v55 = (float32x4_t)v43;
      v55.i32[1] = v54[58].i32[1];
      float32x4_t v56 = v55;
      v56.i32[2] = v54[58].i32[2];
      float32x4_t v57 = a2[1];
      v58.i64[0] = v54[57].i64[0];
      v58.i64[1] = v54[57].u32[2];
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v57, v58), vaddq_f32(v56, a2[8]))), *(int8x8_t *)v55.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v59 = vsubq_f32(v57, v58);
        float32x4_t v60 = vmulq_n_f32(a2[2], v59.f32[0]);
        v60.i32[3] = 0;
        float32x4_t v61 = vmlaq_lane_f32(v60, a2[3], *(float32x2_t *)v59.f32, 1);
        v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
        float32x4_t v62 = vmlaq_laneq_f32(v61, a2[4], v59, 2);
        v62.i64[1] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u32[0];
        float32x4_t v63 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        int8x16_t v43 = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL);
        v43.i32[1] = 0;
        v63.i64[1] = v43.u32[0];
        float32x4_t v64 = vmlaq_lane_f32(v63, a2[6], *(float32x2_t *)v55.f32, 1);
        v64.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
        float32x4_t v65 = vmlaq_laneq_f32(v64, a2[7], v56, 2);
        v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
        int8x8_t v66 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v62), v65));
        if ((vuzp1_s8(v66, v66).u32[0] & 0xFFFFFF) == 0) {
          break;
        }
      }
    }
LABEL_38:
    if (++v47 == 5) {
      return 1;
    }
  }
  uint64_t v67 = 0;
  uint64_t v68 = (uint64_t)&v11[14 * v47 + 68];
  unsigned int v115 = &v11[55].i32[v47 + 1];
  uint64_t v118 = v47;
  while (1)
  {
    if (*(_DWORD *)(v68 + 4 * v67))
    {
      uint64_t v69 = (uint64_t)&v11[14 * v47 + 2 * v67];
      v43.i32[0] = *(_DWORD *)(v69 + 1152);
      float32x4_t v70 = (float32x4_t)v43;
      v70.i32[1] = *(_DWORD *)(v69 + 1156);
      float32x4_t v71 = v70;
      v71.i32[2] = *(_DWORD *)(v69 + 1160);
      float32x4_t v72 = a2[1];
      v73.i64[0] = *(void *)(v69 + 1136);
      v73.i64[1] = *(unsigned int *)(v69 + 1144);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v72, v73), vaddq_f32(v71, a2[8]))), *(int8x8_t *)v70.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v74 = vsubq_f32(v72, v73);
        float32x4_t v75 = vmulq_n_f32(a2[2], v74.f32[0]);
        v75.i32[3] = 0;
        float32x4_t v76 = vmlaq_lane_f32(v75, a2[3], *(float32x2_t *)v74.f32, 1);
        v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
        float32x4_t v77 = vmlaq_laneq_f32(v76, a2[4], v74, 2);
        v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
        float32x4_t v78 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        int8x16_t v43 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL);
        v43.i32[1] = 0;
        v78.i64[1] = v43.u32[0];
        float32x4_t v79 = vmlaq_lane_f32(v78, a2[6], *(float32x2_t *)v70.f32, 1);
        v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
        float32x4_t v80 = vmlaq_laneq_f32(v79, a2[7], v71, 2);
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        int8x8_t v81 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v77), v80));
        if ((vuzp1_s8(v81, v81).u32[0] & 0xFFFFFF) == 0) {
          break;
        }
      }
    }
LABEL_37:
    if (++v67 == 5) {
      goto LABEL_38;
    }
  }
  uint64_t v82 = 0;
  uint64_t v83 = (uint64_t)&v11[70 * v47 + 138 + 14 * v67];
  float v116 = &v11[14 * v47 + 69].i32[v67 + 1];
  uint64_t v119 = v83;
  while (1)
  {
    int v84 = *(_DWORD *)(v83 + 4 * v82);
    if (v84)
    {
      uint64_t v85 = (uint64_t)&v11[70 * v47 + 14 * v67 + 2 * v82];
      v43.i32[0] = *(_DWORD *)(v85 + 2272);
      float32x4_t v86 = (float32x4_t)v43;
      v86.i32[1] = *(_DWORD *)(v85 + 2276);
      float32x4_t v87 = v86;
      v87.i32[2] = *(_DWORD *)(v85 + 2280);
      float32x4_t v88 = a2[1];
      v89.i64[0] = *(void *)(v85 + 2256);
      v89.i64[1] = *(unsigned int *)(v85 + 2264);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v88, v89), vaddq_f32(v87, a2[8]))), *(int8x8_t *)v86.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v90 = vsubq_f32(v88, v89);
        float32x4_t v91 = vmulq_n_f32(a2[2], v90.f32[0]);
        v91.i32[3] = 0;
        float32x4_t v92 = vmlaq_lane_f32(v91, a2[3], *(float32x2_t *)v90.f32, 1);
        v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
        float32x4_t v93 = vmlaq_laneq_f32(v92, a2[4], v90, 2);
        v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
        float32x4_t v94 = vmlaq_n_f32(*a2, a2[5], *(float *)v43.i32);
        int8x16_t v43 = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL);
        v43.i32[1] = 0;
        v94.i64[1] = v43.u32[0];
        float32x4_t v95 = vmlaq_lane_f32(v94, a2[6], *(float32x2_t *)v86.f32, 1);
        v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
        float32x4_t v96 = vmlaq_laneq_f32(v95, a2[7], v87, 2);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        int8x8_t v97 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v93), v96));
        if ((vuzp1_s8(v97, v97).u32[0] & 0xFFFFFF) == 0) {
          break;
        }
      }
    }
LABEL_36:
    if (++v82 == 5) {
      goto LABEL_37;
    }
  }
  uint64_t v98 = (*v116 + *v115 + v11[70 * v47 + 139 + 14 * v67].i32[v82 + 1]);
  uint64_t v99 = v11[2].i64[1] + 16 * v98;
  float32x4_t v100 = (unsigned int *)(v11[2].i64[0] + 32 * v98 + 16);
  while (1)
  {
    if (v100[3] >= v52)
    {
      if (*(v100 - 1) > v53) {
        goto LABEL_36;
      }
      v43.i32[1] = 0;
      v43.i64[1] = 0;
      float32x4_t v101 = (float32x4_t)*v100;
      v101.i32[1] = v100[1];
      float32x4_t v102 = v101;
      v102.i32[2] = v100[2];
      float32x4_t v103 = a2[1];
      v104.i64[0] = *((void *)v100 - 2);
      v104.i64[1] = *(v100 - 2);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vabdq_f32(v103, v104), vaddq_f32(v102, a2[8]))), *(int8x8_t *)v101.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v105 = vsubq_f32(v103, v104);
        float32x4_t v106 = vmulq_n_f32(a2[2], v105.f32[0]);
        v106.i32[3] = 0;
        float32x4_t v107 = vmlaq_lane_f32(v106, a2[3], *(float32x2_t *)v105.f32, 1);
        v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
        float32x4_t v108 = vmlaq_laneq_f32(v107, a2[4], v105, 2);
        v108.i64[1] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u32[0];
        float32x4_t v109 = vmlaq_n_f32(*a2, a2[5], *(float *)v100);
        int8x16_t v43 = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL);
        v43.i32[1] = 0;
        v109.i64[1] = v43.u32[0];
        float32x4_t v110 = vmlaq_lane_f32(v109, a2[6], *(float32x2_t *)v101.f32, 1);
        v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
        float32x4_t v111 = vmlaq_laneq_f32(v110, a2[7], v102, 2);
        v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        int8x8_t v112 = (int8x8_t)vmovn_s32(vcgtq_f32(vabsq_f32(v108), v111));
        if ((vuzp1_s8(v112, v112).u32[0] & 0xFFFFFF) == 0)
        {
          int v122 = -1082130432;
          unsigned int v113 = v11;
          uint64_t v114 = v53;
          uint64_t result = (**v117)(v117, &v122, v99);
          uint64_t v47 = v118;
          uint64_t v83 = v119;
          uint64_t v53 = v114;
          unsigned long long v11 = v113;
          if (!result) {
            return result;
          }
        }
      }
    }
    v99 += 16;
    v100 += 8;
    if (!--v84) {
      goto LABEL_36;
    }
  }
}

uint64_t visualize(_DWORD *a1, void *a2, double a3, double a4, float32x4_t a5)
{
  float v5 = *((float *)a2 + 4);
  int32x2_t v6 = *(int32x2_t *)a2;
  float v7 = *((float *)a2 + 2);
  v8.i64[0] = *(void *)((char *)a2 + 20);
  float v13 = COERCE_FLOAT(*a2) - v5;
  a5.i32[0] = vdup_lane_s32(v6, 1).u32[0];
  float v9 = v7 + v8.f32[1];
  a5.f32[1] = v7;
  v10.i64[0] = a5.i64[0];
  v10.i64[1] = __PAIR64__(v8.u32[0], LODWORD(v5));
  *(int32x2_t *)&v8.u32[2] = v6;
  *(void *)&long long v11 = vsubq_f32(a5, v8).u64[0];
  *((void *)&v11 + 1) = vaddq_f32(v10, v8).i64[1];
  long long v14 = v11;
  float v15 = v9;
  char v16 = 1;
  return physx::Cm::operator<<(a1, (uint64_t *)&v13);
}

void physx::Sq::BucketPruner::~BucketPruner(physx::Sq::BucketPruner *this)
{
  int8x16_t v2 = (char *)this + 7824;
  *(void *)this = &unk_26E7280A0;
  physx::Sq::PruningPool::~PruningPool((physx::Sq::BucketPruner *)((char *)this + 7840));
  *int8x16_t v2 = 1;
  *((void *)this + 2) = 0;
  if (v2[1])
  {
    if (*((void *)this + 3)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 3) = 0;
    if (*((void *)this + 4)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 4) = 0;
    if (*((void *)this + 5)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 5) = 0;
  }
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 6) = 0;
  if (*((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 103) = 0;
  *((_DWORD *)this + 16) = 0;
  physx::Bp::PairManagerData::purge((uint64_t)this + 776);
  physx::Bp::PairManagerData::purge((uint64_t)this + 776);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sq::BucketPruner::~BucketPruner(this);
  if (v1)
  {
    int8x16_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

BOOL physx::Sq::BucketPruner::addObjects(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, unsigned int a5)
{
  uint64_t v5 = 1;
  if (a5)
  {
    uint64_t v8 = a1 + 7824;
    int v9 = physx::Sq::PruningPool::addObjects((physx::Sq::PruningPool *)(a1 + 7840), a2, a3, a4, a5);
    *(unsigned char *)uint64_t v8 = 1;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 7840);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v8 + 24);
    *(void *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = 0;
    return v9 == a5;
  }
  return v5;
}

__n128 physx::Sq::BucketPruner::removeObjects(physx::Sq::BucketPruner *this, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v5 = (char *)this + 7824;
    int32x2_t v6 = (physx::Sq::BucketPruner *)((char *)this + 7840);
    uint64_t v7 = a3;
    do
    {
      unsigned int v8 = *a2++;
      physx::Sq::PruningPool::removeObject(v6, v8);
      --v7;
    }
    while (v7);
    *((_DWORD *)this + 4) = *((_DWORD *)this + 1960);
    __n128 result = *(__n128 *)(v5 + 24);
    *(__n128 *)((char *)this + 24) = result;
    *((void *)this + 5) = 0;
    *uint64_t v5 = 1;
  }
  return result;
}

__n128 physx::Sq::BucketPruner::updateObjectsAfterManualBoundsUpdates(physx::Sq::BucketPruner *this, const unsigned int *a2, int a3)
{
  if (a3)
  {
    *((_DWORD *)this + 4) = *((_DWORD *)this + 1960);
    __n128 result = *(__n128 *)((char *)this + 7848);
    *(__n128 *)((char *)this + 24) = result;
    *((void *)this + 5) = 0;
    *((unsigned char *)this + 7824) = 1;
  }
  return result;
}

uint64_t physx::Sq::BucketPruner::updateObjectsAndInflateBounds(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t a4, unsigned int a5)
{
  if (a5)
  {
    uint64_t v5 = *(void *)(result + 7864);
    uint64_t v6 = *(void *)(result + 7848);
    uint64_t v7 = a5;
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    do
    {
      unsigned int v9 = *a2++;
      float32x4_t v10 = (float32x4_t *)(v6 + 24 * *(unsigned int *)(v5 + 4 * v9));
      unsigned int v11 = *a3++;
      uint64_t v12 = a4 + 24 * v11;
      float32x4_t v13 = *(float32x4_t *)(v12 + 12);
      float32x4_t v14 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v12), v8);
      float32x4_t v15 = vsubq_f32(*(float32x4_t *)v12, v14);
      int8x16_t v16 = (int8x16_t)vaddq_f32(v13, v14);
      v15.i32[3] = v16.i32[0];
      *float32x4_t v10 = v15;
      v10[1].i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
      --v7;
    }
    while (v7);
    uint64_t v17 = *(void *)(result + 7856);
    *(_DWORD *)(result + 16) = *(_DWORD *)(result + 7840);
    *(void *)(result + 24) = v6;
    *(void *)(result + 32) = v17;
    *(void *)(result + 4physx::Sq::AABBTree::release(this, 0) = 0;
    *(unsigned char *)(result + 7824) = 1;
  }
  return result;
}

void physx::Sq::BucketPruner::commit(physx::Sq::BucketPruner *this)
{
  double v2 = MEMORY[0x270FA5388](this);
  v86[512] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(v1 + 7824))
  {
    uint64_t v3 = v1;
    *(unsigned char *)(v1 + 7824) = 0;
    uint64_t v4 = *(unsigned int *)(v1 + 16);
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, double))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1093, v2);
      uint64_t v6 = v5;
      uint64_t v7 = 0;
      float32x4_t v8 = *(void **)(v3 + 32);
      unsigned int v9 = v8;
      do
      {
        *(void *)(v5 + 8 * v7) = *v9;
        *unsigned int v9 = v7;
        v9 += 2;
        ++v7;
      }
      while (v4 != v7);
      if (v4 <= 0x100)
      {
        float32x4_t v10 = (float *)v86;
        unsigned int v11 = &v85;
      }
      else
      {
        float32x4_t v10 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1108);
        unsigned int v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 1109);
        float32x4_t v8 = *(void **)(v3 + 32);
      }
      uint64_t v12 = *(void *)(v3 + 24);
      uint64_t v13 = (v4 - 1);
      float32x4_t v14 = (float32x4_t *)(v12 + 24 * v13);
      float32x4_t v15 = *v14;
      v16.i32[0] = HIDWORD(*(unsigned long long *)v14);
      v16.i32[1] = v14[1].i32[0];
      v16.i64[1] = v14[1].u32[1];
      if (v4 != 1)
      {
        uint64_t v17 = *(void *)(v3 + 24);
        do
        {
          float32x4_t v15 = vminq_f32(v15, *(float32x4_t *)v17);
          float32x4_t v16 = vmaxq_f32(v16, *(float32x4_t *)(v17 + 12));
          v17 += 24;
          --v13;
        }
        while (v13);
      }
      uint64_t v18 = 0;
      v19.i64[0] = 0x3F0000003F000000;
      v19.i64[1] = 0x3F0000003F000000;
      float32x4_t v20 = vmulq_f32(vaddq_f32(v16, v15), v19);
      float32x4_t v21 = vmulq_f32(vsubq_f32(v16, v15), v19);
      *(void *)(v3 + 848) = v20.i64[0];
      *(_DWORD *)(v3 + 856) = v20.i32[2];
      *(void *)(v3 + 864) = v21.i64[0];
      *(_DWORD *)(v3 + 872) = v21.i32[2];
      if (fabsf(v21.f32[1]) < fabsf(v21.f32[2])) {
        unsigned int v22 = 1;
      }
      else {
        unsigned int v22 = 2;
      }
      float32x4_t v23 = (float *)(v12 + 4 * v22);
      do
      {
        float v24 = *v23;
        v23 += 6;
        v10[v18++] = v24;
      }
      while (v4 != v18);
      *(void *)&long long v82 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      BYTE8(v82) = 1;
      DWORD2(v79) = 0x80000000;
      *(void *)&long long v79 = &unk_26E728438;
      physx::Cm::RadixSortBuffered::Sort((physx::Cm::RadixSortBuffered *)&v79, v10);
      uint64_t v25 = 0;
      float32x4_t v26 = (unsigned int *)v80;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      uint64_t v28 = v4;
      do
      {
        unsigned int v29 = *v26++;
        float32x4_t v30 = (float32x4_t *)(v12 + 24 * v29);
        v31.i32[0] = HIDWORD(*(unsigned long long *)v30);
        v31.i32[1] = v30[1].i32[0];
        v31.i64[1] = v30[1].u32[1];
        float32x4_t v32 = vmulq_f32(vaddq_f32(*v30, v31), v27);
        float32x4_t v33 = vmulq_f32(vsubq_f32(v31, *v30), v27);
        __n128 v34 = (float32x4_t *)&v11[16 * v25];
        float32x4_t *v34 = v32;
        v34[1] = v33;
        *(_OWORD *)&v10[2 * v25] = *(_OWORD *)&v8[2 * v29];
        v25 += 2;
        --v28;
      }
      while (v28);
      *(void *)&long long v79 = &unk_26E728438;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v79);
      *(_DWORD *)(v3 + 832) = v22;
      *(_DWORD *)(v3 + 824) = v4;
      unsigned int v35 = *(_DWORD *)(v3 + 828);
      if (v35 < v4 || v35 >> 1 > v4)
      {
        unsigned int v37 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
        unsigned int v38 = v37 | (v37 >> 4) | ((v37 | (v37 >> 4)) >> 8);
        int v39 = (v38 | HIWORD(v38)) + 1;
        *(_DWORD *)(v3 + 828) = v39;
        uint64_t v40 = (32 * v39);
        if (*(void *)(v3 + 56)) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        uint64_t v41 = (16 * v39);
        if (*(void *)(v3 + 48)) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        if (v40) {
          uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
        }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, v40, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 484);
        else {
          uint64_t v42 = 0;
        }
        *(void *)(v3 + 48) = v42;
        if (v41) {
          uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
        }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, v41, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqBucketPruner.cpp", 485);
        else {
          uint64_t v36 = 0;
        }
        *(void *)(v3 + 56) = v36;
        unsigned int v22 = *(_DWORD *)(v3 + 832);
      }
      else
      {
        uint64_t v36 = *(void *)(v3 + 56);
      }
      uint64_t v43 = 4;
      if (v22 == 1) {
        uint64_t v43 = 8;
      }
      physx::Sq::BucketPrunerNode::classifyBoxes(v3 + 880, v4, (uint64_t)v11, (long long *)v10, *(void *)(v3 + 48), v36, 0, v22, *(float32_t *)(v3 + 848), *(float *)(v3 + 848 + v43));
      float32x4_t v44 = (unsigned int *)(v3 + 1104);
      processChildBuckets(v11, v10, (unsigned int *)(v3 + 880), v3 + 1104, *(void *)(v3 + 48), *(void *)(v3 + 56), *(_DWORD *)(v3 + 832));
      uint64_t v45 = 0;
      uint64_t v46 = v3 + 2224;
      do
      {
        processChildBuckets(v11, v10, v44, v46, *(void *)(v3 + 48) + 32 * *(unsigned int *)(v3 + 900 + v45), *(void *)(v3 + 56) + 16 * *(unsigned int *)(v3 + 900 + v45), *(_DWORD *)(v3 + 832));
        v45 += 4;
        v46 += 1120;
        v44 += 56;
      }
      while (v45 != 20);
      uint64_t v47 = *(void *)(v3 + 48);
      if (v4 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v4;
      }
      uint64_t v49 = 4 * *(unsigned int *)(v3 + 832);
      uint64_t v50 = v48;
      do
      {
        float v51 = *(float *)(v47 + v49);
        float v52 = *(float *)(v47 + v49 + 16);
        float v53 = v51 - v52;
        float v54 = v51 + v52;
        if (v53 < 0.0) {
          unsigned int v55 = ~LODWORD(v53);
        }
        else {
          unsigned int v55 = LODWORD(v53) | 0x80000000;
        }
        *(_DWORD *)(v47 + 12) = v55;
        if (v54 < 0.0) {
          unsigned int v56 = ~LODWORD(v54);
        }
        else {
          unsigned int v56 = LODWORD(v54) | 0x80000000;
        }
        *(_DWORD *)(v47 + 28) = v56;
        v47 += 32;
        --v50;
      }
      while (v50);
      if (v4 > 0x100)
      {
        if (v11) {
          (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
        }
        if (v10) {
          (*(void (**)(uint64_t, float *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
        }
      }
      uint64_t v57 = 0;
      float32x4_t v58 = *(void **)(v3 + 56);
      uint64_t v59 = *(void *)(v3 + 32);
      uint64_t v60 = *(void *)(v3 + 40);
      do
      {
        uint64_t v61 = *(unsigned int *)v58;
        uint64_t v62 = *(void *)(v6 + 8 * v61);
        *float32x4_t v58 = v62;
        *(void *)(v59 + 16 * v61) = v62;
        if (v60) {
          *(_DWORD *)(v60 + 4 * v61) = v57;
        }
        ++v57;
        v58 += 2;
      }
      while (v48 != v57);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
      uint64_t v63 = 0;
      __asm { FMOV            V0.4S, #1.0 }
      long long v79 = _Q0;
      long long v80 = xmmword_2343A9E50;
      long long v81 = xmmword_23441FE50;
      long long v82 = xmmword_234421D30;
      long long v83 = xmmword_234421D40;
      long long v84 = xmmword_234421D40;
      do
      {
        uint64_t v69 = (float *)((char *)&v79 + v63);
        float v71 = *(float *)((char *)&v79 + v63);
        float v70 = *(float *)((char *)&v79 + v63 + 4);
        float v72 = *(float *)((char *)&v79 + v63 + 8);
        float v73 = sqrtf((float)((float)(v70 * v70) + (float)(v71 * v71)) + (float)(v72 * v72));
        if (v73 > 0.0)
        {
          float v74 = 1.0 / v73;
          *(float *)((char *)&v79 + v63) = v71 * v74;
          v69[1] = v70 * v74;
          v69[2] = v72 * v74;
        }
        v63 += 12;
      }
      while (v63 != 96);
      gPrecomputeSort(v3 + 880);
      for (uint64_t i = 0; i != 1120; i += 224)
        gPrecomputeSort(v3 + 1104 + i);
      uint64_t v76 = 0;
      uint64_t v77 = v3 + 2224;
      do
      {
        for (uint64_t j = 0; j != 1120; j += 224)
          gPrecomputeSort(v77 + j);
        ++v76;
        v77 += 1120;
      }
      while (v76 != 5);
    }
    else
    {
      *(_DWORD *)(v1 + 824) = 0;
    }
  }
}

float32x2_t *physx::Sq::BucketPruner::shiftOrigin(float32x2_t *result, float32x2_t *a2)
{
  uint64_t v2 = result[8].u32[0];
  if (v2)
  {
    uint64_t v3 = (float *)&result[43] + 1;
    do
    {
      *(float32x2_t *)(v3 - 5) = vsub_f32(*(float32x2_t *)(v3 - 5), *a2);
      *(v3 - 3) = *(v3 - 3) - a2[1].f32[0];
      *((float32x2_t *)v3 - 1) = vsub_f32(*(float32x2_t *)(v3 - 2), *a2);
      *uint64_t v3 = *v3 - a2[1].f32[0];
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  uint64_t v4 = result[2].u32[0];
  result[106] = vsub_f32(result[106], *a2);
  result[107].f32[0] = result[107].f32[0] - a2[1].f32[0];
  uint64_t v5 = result[104].u32[0];
  uint64_t v6 = (float *)&result[106] + v5;
  float v7 = v6[4];
  float v8 = *v6 + v7;
  float v9 = *v6 - v7;
  if (v9 < 0.0) {
    unsigned int v10 = ~LODWORD(v9);
  }
  else {
    unsigned int v10 = LODWORD(v9) | 0x80000000;
  }
  result[107].i32[1] = v10;
  if (v8 < 0.0) {
    unsigned int v11 = ~LODWORD(v8);
  }
  else {
    unsigned int v11 = LODWORD(v8) | 0x80000000;
  }
  result[109].i32[1] = v11;
  if (v4)
  {
    uint64_t v12 = (float32x2_t *)(*(void *)&result[3] + 12);
    do
    {
      *(float32x2_t *)((char *)v12 - 12) = vsub_f32(*(float32x2_t *)((char *)v12 - 12), *a2);
      v12[-1].f32[1] = v12[-1].f32[1] - a2[1].f32[0];
      *uint64_t v12 = vsub_f32(*v12, *a2);
      v12[1].f32[0] = v12[1].f32[0] - a2[1].f32[0];
      v12 += 3;
      --v4;
    }
    while (v4);
  }
  uint64_t v13 = result[103].u32[0];
  if (v13)
  {
    float32x4_t v14 = (float32x2_t *)result[6];
    uint64_t v15 = v5;
    do
    {
      *float32x4_t v14 = vsub_f32(*v14, *a2);
      v14[1].f32[0] = v14[1].f32[0] - a2[1].f32[0];
      float v16 = v14->f32[v15];
      float v17 = v14[2].f32[v15];
      float v18 = v16 - v17;
      float v19 = v16 + v17;
      if (v18 < 0.0) {
        unsigned int v20 = ~LODWORD(v18);
      }
      else {
        unsigned int v20 = LODWORD(v18) | 0x80000000;
      }
      v14[1].i32[1] = v20;
      if (v19 < 0.0) {
        unsigned int v21 = ~LODWORD(v19);
      }
      else {
        unsigned int v21 = LODWORD(v19) | 0x80000000;
      }
      v14[3].i32[1] = v21;
      v14 += 4;
      --v13;
    }
    while (v13);
  }
  for (uint64_t i = 0; i != 20; i += 4)
  {
    float32x4_t v23 = &result[i];
    v23[116] = vsub_f32(result[i + 116], *a2);
    v23[117].f32[0] = result[i + 117].f32[0] - a2[1].f32[0];
  }
  uint64_t v24 = 0;
  uint64_t v25 = result;
  do
  {
    for (uint64_t j = 0; j != 20; j += 4)
    {
      float32x4_t v27 = &v25[j];
      v27[144] = vsub_f32(v25[j + 144], *a2);
      v27[145].f32[0] = v25[j + 145].f32[0] - a2[1].f32[0];
    }
    ++v24;
    v25 += 28;
  }
  while (v24 != 5);
  for (uint64_t k = 0; k != 5; ++k)
  {
    uint64_t v29 = 0;
    float32x4_t v30 = result;
    do
    {
      for (uint64_t m = 0; m != 20; m += 4)
      {
        float32x4_t v32 = &v30[m];
        v32[284] = vsub_f32(v30[m + 284], *a2);
        v32[285].f32[0] = v30[m + 285].f32[0] - a2[1].f32[0];
      }
      ++v29;
      v30 += 28;
    }
    while (v29 != 5);
    result += 140;
  }
  return result;
}

uint64_t physx::Sq::BucketPruner::sweep(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float *a4, unsigned int (***a5)(void, float *, float32x2_t *))
{
  if (!a1[978].i8[0])
  {
    float v6 = *(float *)(a2 + 92);
    float v7 = *(float *)(a2 + 80);
    float v8 = (float)(v6 - v7) * 0.5;
    float v9 = v6 + v7;
    float32x2_t v10 = *(float32x2_t *)(a2 + 84);
    float32x2_t v11 = *(float32x2_t *)(a2 + 72);
    *(float32x2_t *)v12.f32 = vmul_f32(vsub_f32(v10, v11), (float32x2_t)0x3F0000003F000000);
    float32x2_t v13 = vmul_f32(vadd_f32(v10, v11), (float32x2_t)0x3F0000003F000000);
    float v14 = v9 * 0.5;
    float32x2_t v179 = v13;
    float v180 = v9 * 0.5;
    uint64_t v177 = v12.i64[0];
    float v178 = v8;
    __int32 v15 = a1[103].i32[0];
    uint64_t v16 = a1[8].u32[0];
    if (v15 | v16)
    {
      float v20 = *a4;
      if (*a4 == 3.4028e38)
      {
        float32x2_t v171 = v13;
        float v174 = v14;
        float v21 = a1[107].f32[0];
        float v22 = a1[109].f32[0];
        float32x2_t v23 = a1[106];
        float32x2_t v24 = a1[108];
        float32x2_t v25 = vsub_f32(vsub_f32(v23, v24), *(float32x2_t *)v12.f32);
        float v26 = (float)(v21 - v22) - v8;
        int8x8_t v183 = (int8x8_t)v25;
        float v184 = v26;
        float v27 = v21 + v22;
        float32x2_t v28 = vadd_f32(*(float32x2_t *)v12.f32, vadd_f32(v23, v24));
        float v29 = v8 + v27;
        int8x8_t v181 = (int8x8_t)v28;
        float v182 = v29;
        if (v16)
        {
          float32x2_t v30 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
          float32x2_t v31 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
          float32x4_t v32 = (float *)&a1[43] + 1;
          float v33 = 8.5071e37;
          float v34 = -8.5071e37;
          do
          {
            float32x2_t v31 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v32 - 5), v31), (int8x8_t)v31, *(int8x8_t *)(v32 - 5));
            if (v33 >= *(v32 - 3)) {
              float v33 = *(v32 - 3);
            }
            float32x2_t v30 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v30, *(float32x2_t *)(v32 - 2)), (int8x8_t)v30, *(int8x8_t *)(v32 - 2));
            float v35 = *v32;
            v32 += 6;
            float v36 = v35;
            if (v34 <= v35) {
              float v34 = v36;
            }
            --v16;
          }
          while (v16);
          float v37 = v33 - v8;
          float v38 = v8 + v34;
          if (v26 >= v37) {
            float v26 = v37;
          }
          float32x2_t v39 = vsub_f32(v31, *(float32x2_t *)v12.f32);
          int8x8_t v183 = vbsl_s8((int8x8_t)vcgt_f32(v39, v25), (int8x8_t)v25, (int8x8_t)v39);
          float v184 = v26;
          if (v29 <= v38) {
            float v40 = v38;
          }
          else {
            float v40 = v29;
          }
          float32x2_t v41 = vadd_f32(*(float32x2_t *)v12.f32, v30);
          int8x8_t v181 = vbsl_s8((int8x8_t)vcgt_f32(v28, v41), (int8x8_t)v28, (int8x8_t)v41);
          float v182 = v40;
        }
        float v167 = v8;
        uint64_t v169 = v12.i64[0];
        clipRay((float *)&v179, (float *)a3, a4, (float *)&v183, (float *)&v181);
        float v8 = v167;
        v12.i64[0] = v169;
        float v20 = *a4;
        float v14 = v174;
        float32x2_t v13 = v171;
      }
      *(float32x2_t *)v42.f32 = v13;
      v42.i64[1] = LODWORD(v14);
      float v43 = a3[1].f32[0];
      *(float32x2_t *)v44.f32 = *a3;
      v44.i64[1] = LODWORD(v43);
      *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)*a3, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), 4uLL);
      v45.i64[1] = a3->u32[0];
      v12.i64[1] = LODWORD(v8);
      float32x4_t v46 = vabsq_f32(v44);
      *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), 4uLL);
      v47.i64[1] = v46.u32[0];
      double v48 = COERCE_DOUBLE(vadd_f32(v13, vmul_n_f32(*a3, v20)));
      float v49 = v14 + (float)(v20 * v43);
      *(int8x8_t *)v50.f32 = vbsl_s8((int8x8_t)vceqz_f32(*a3), (int8x8_t)v13, vbsl_s8((int8x8_t)vcgez_f32(*a3), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000));
      float v51 = -3.4028e38;
      if (v43 >= 0.0) {
        float v51 = 3.4028e38;
      }
      if (v43 == 0.0) {
        float v52 = v14;
      }
      else {
        float v52 = v51;
      }
      BOOL v53 = v20 < 3.4028e38;
      if (v20 >= 3.4028e38) {
        float v54 = v52;
      }
      else {
        float v54 = v49;
      }
      if (v53) {
        *(double *)v50.i64 = v48;
      }
      v50.i64[1] = LODWORD(v54);
      float32x4_t v55 = vminq_f32(v42, v50);
      float32x4_t v56 = vmaxq_f32(v42, v50);
      unint64_t v57 = a1[8].u32[0];
      float32x4_t v58 = vnegq_f32(v45);
      float32x4_t v168 = v42;
      float32x4_t v170 = v12;
      float32x4_t v165 = v46;
      float32x4_t v166 = v44;
      float32x4_t v164 = v47;
      float32x4_t v161 = v45;
      float32x4_t v163 = v58;
      if (v57)
      {
        unint64_t v59 = 0;
        uint64_t v60 = a1 + 9;
        uint64_t v61 = (float *)&a1[43] + 1;
        float32x4_t v175 = v55;
        float32x4_t v172 = v56;
        do
        {
          float v62 = *(v61 - 3);
          float32x2_t v63 = *(float32x2_t *)(v61 - 5);
          float32x2_t v64 = *(float32x2_t *)(v61 - 2);
          *(float32x2_t *)v65.f32 = vmul_f32(vadd_f32(v63, v64), (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)v66.f32 = vmul_f32(vsub_f32(v64, v63), (float32x2_t)0x3F0000003F000000);
          v65.i64[1] = COERCE_UNSIGNED_INT((float)(v62 + *v61) * 0.5);
          v66.f32[2] = (float)(*v61 - v62) * 0.5;
          v66.i32[3] = 0;
          float32x4_t v67 = vaddq_f32(v12, v66);
          float32x4_t v68 = vaddq_f32(v65, v67);
          float32x4_t v69 = vsubq_f32(v65, v67);
          float32x4_t v70 = vsubq_f32(v42, v65);
          *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), 4uLL);
          v65.i64[1] = v70.u32[0];
          *(int8x8_t *)v71.f32 = vext_s8(*(int8x8_t *)v67.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), 4uLL);
          v71.i64[1] = v67.u32[0];
          *(int16x4_t *)v67.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v68, v55), (int8x16_t)vcgeq_f32(v56, v69)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v71), v47, v67), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v65), v70, v58)))));
          if (vuzp1_s8(*(int8x8_t *)v67.f32, *(int8x8_t *)v67.f32).u32[0] == -1)
          {
            if (!(**a5)(a5, a4, v60))
            {
              char v81 = 0;
              return v81 & 1;
            }
            unint64_t v57 = a1[8].u32[0];
            float32x4_t v42 = v168;
            float32x4_t v12 = v170;
            float32x4_t v46 = v165;
            float32x4_t v44 = v166;
            float32x4_t v58 = v163;
            float32x4_t v47 = v164;
            float32x4_t v55 = v175;
            float32x4_t v56 = v172;
          }
          ++v59;
          v60 += 2;
          v61 += 6;
        }
        while (v59 < v57);
      }
      if (v15)
      {
        *(float32x2_t *)v72.f32 = a1[106];
        v72.i64[1] = a1[107].u32[0];
        *(float32x2_t *)v73.f32 = a1[108];
        v73.i64[1] = a1[109].u32[0];
        float32x4_t v74 = vaddq_f32(v12, v73);
        float32x4_t v75 = vaddq_f32(v72, v74);
        float32x4_t v76 = vsubq_f32(v72, v74);
        float32x4_t v77 = vsubq_f32(v42, v72);
        *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v77.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), 4uLL);
        v78.i64[1] = v77.u32[0];
        *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), 4uLL);
        v79.i64[1] = v74.u32[0];
        *(int16x4_t *)v77.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v75, v55), (int8x16_t)vcgeq_f32(v56, v76)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v79), v47, v74), vabsq_f32(vmlsq_f32(vmulq_f32(v44, v78), v77, v161)))));
        int8x8_t v80 = vuzp1_s8(*(int8x8_t *)v77.f32, *(int8x8_t *)v77.f32);
        if (v80.i32[0] == -1)
        {
          BOOL v83 = 0;
          unsigned int v84 = 0;
          uint64_t v85 = a1[104].u32[0];
          __int16 v149 = a4;
          v80.i32[0] = *(__int32 *)a4;
          float v86 = *((float *)&v177 + v85);
          float v87 = v179.f32[v85];
          uint64_t v156 = v85;
          __int16 v157 = a3;
          float v88 = v87 + (float)(*a4 * a3->f32[v85]);
          if (v87 >= v88) {
            float v89 = v87 + (float)(*(float *)v80.i32 * a3->f32[v85]);
          }
          else {
            float v89 = v179.f32[v85];
          }
          float v90 = v89 - v86;
          if (v87 > v88) {
            float v88 = v179.f32[v85];
          }
          float v91 = v86 + v88;
          if (v90 < 0.0) {
            unsigned int v92 = ~LODWORD(v90);
          }
          else {
            unsigned int v92 = LODWORD(v90) | 0x80000000;
          }
          if (v91 < 0.0) {
            uint64_t v93 = ~LODWORD(v91);
          }
          else {
            uint64_t v93 = LODWORD(v91) | 0x80000000;
          }
          v183.i32[0] = v80.i32[0];
          uint64_t v151 = ((unsigned __int32)a3->i32[0] >> 29) & 4 | ((unsigned __int32)a3->i32[1] >> 30) & 0xFFFFFFFE | ((unsigned __int32)a3[1].i32[0] >> 31);
          unsigned int v94 = a1[136].u16[v151];
          uint64_t v160 = (unsigned int (***)(void, int8x8_t *, uint64_t))a5;
          do
          {
            uint64_t v95 = v94 & 7;
            unsigned int v152 = v94;
            unsigned int v153 = v84;
            if (a1[110].i32[v95])
            {
              float32x4_t v96 = &a1[4 * v95];
              *(float32x2_t *)v97.f32 = v96[116];
              v97.i64[1] = v96[117].u32[0];
              *(float32x2_t *)v98.f32 = v96[118];
              v98.i64[1] = v96[119].u32[0];
              float32x4_t v99 = vaddq_f32(v12, v98);
              float32x4_t v100 = vaddq_f32(v97, v99);
              float32x4_t v101 = vsubq_f32(v97, v99);
              float32x4_t v102 = vsubq_f32(v42, v97);
              *(int8x8_t *)v103.f32 = vext_s8(*(int8x8_t *)v102.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), 4uLL);
              v103.i64[1] = v102.u32[0];
              *(int8x8_t *)v104.f32 = vext_s8(*(int8x8_t *)v99.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), 4uLL);
              v104.i64[1] = v99.u32[0];
              if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v100, v55), (int8x16_t)vcgeq_f32(v56, v101)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v104), v47, v99), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v103), v102, v58))))), v80).u32[0] == -1)
              {
                char v150 = v83;
                int v105 = 0;
                uint64_t v154 = (uint64_t)&a1[28 * v95 + 138];
                unsigned int v106 = *(unsigned __int16 *)(v154 + 2 * v151 + 208);
                float v107 = *(float *)v80.i32;
                do
                {
                  uint64_t v108 = v106 & 7;
                  unsigned int v158 = v106;
                  int v159 = v105;
                  if (!*(_DWORD *)(v154 + 4 * v108)) {
                    goto LABEL_57;
                  }
                  uint64_t v109 = (uint64_t)&a1[28 * v95 + 4 * v108];
                  v110.i64[0] = *(void *)(v109 + 1152);
                  v110.i64[1] = *(unsigned int *)(v109 + 1160);
                  v111.i64[0] = *(void *)(v109 + 1168);
                  v111.i64[1] = *(unsigned int *)(v109 + 1176);
                  float32x4_t v112 = vaddq_f32(v12, v111);
                  float32x4_t v113 = vaddq_f32(v110, v112);
                  float32x4_t v114 = vsubq_f32(v110, v112);
                  float32x4_t v115 = vsubq_f32(v42, v110);
                  *(int8x8_t *)v116.f32 = vext_s8(*(int8x8_t *)v115.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL), 4uLL);
                  v116.i64[1] = v115.u32[0];
                  *(int8x8_t *)v117.f32 = vext_s8(*(int8x8_t *)v112.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL), 4uLL);
                  v117.i64[1] = v112.u32[0];
                  *(int16x4_t *)v115.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v113, v55), (int8x16_t)vcgeq_f32(v56, v114)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v117), v47, v112), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v116), v115, v58)))));
                  int8x8_t v80 = vuzp1_s8(*(int8x8_t *)v115.f32, *(int8x8_t *)v115.f32);
                  if (v80.i32[0] == -1)
                  {
                    int v118 = 0;
                    int v155 = a1[28 * v95 + 140].i32[v108 + 1] + a1[112].i32[v95 + 1];
                    uint64_t v162 = (uint64_t)&a1[140 * v95 + 278 + 28 * (v106 & 7)];
                    unsigned int v119 = *(unsigned __int16 *)(v162 + 2 * v151 + 208);
                    do
                    {
                      uint64_t v120 = v119 & 7;
                      uint64_t v121 = *(unsigned int *)(v162 + 4 * v120);
                      if (v121)
                      {
                        uint64_t v122 = (uint64_t)&a1[140 * v95 + 28 * v108 + 4 * v120];
                        v123.i64[0] = *(void *)(v122 + 2272);
                        v123.i64[1] = *(unsigned int *)(v122 + 2280);
                        v124.i64[0] = *(void *)(v122 + 2288);
                        v124.i64[1] = *(unsigned int *)(v122 + 2296);
                        float32x4_t v125 = vaddq_f32(v12, v124);
                        float32x4_t v126 = vaddq_f32(v123, v125);
                        float32x4_t v127 = vsubq_f32(v123, v125);
                        float32x4_t v128 = vsubq_f32(v42, v123);
                        *(int8x8_t *)v129.f32 = vext_s8(*(int8x8_t *)v128.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL), 4uLL);
                        v129.i64[1] = v128.u32[0];
                        *(int8x8_t *)v130.f32 = vext_s8(*(int8x8_t *)v125.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL), 4uLL);
                        v130.i64[1] = v125.u32[0];
                        *(int16x4_t *)v128.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v126, v55), (int8x16_t)vcgeq_f32(v56, v127)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v130), v47, v125), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v129), v128, v58)))));
                        int8x8_t v80 = vuzp1_s8(*(int8x8_t *)v128.f32, *(int8x8_t *)v128.f32);
                        if (v80.i32[0] == -1)
                        {
                          uint64_t v131 = (v155
                                              + a1[140 * v95 + 280 + 28 * v108].i32[v120 + 1]);
                          uint64_t v132 = *(void *)&a1[7] + 16 * v131;
                          uint64_t v133 = *(void *)&a1[6] + 32 * v131 + 16;
                          uint64_t v134 = 32 * v121;
                          while (1)
                          {
                            if (*(_DWORD *)(v133 + 12) < v92) {
                              goto LABEL_70;
                            }
                            if (*(_DWORD *)(v133 - 4) > v93) {
                              break;
                            }
                            v135.i64[0] = *(void *)(v133 - 16);
                            v135.i64[1] = *(unsigned int *)(v133 - 8);
                            v136.i64[0] = *(void *)v133;
                            v136.i64[1] = *(unsigned int *)(v133 + 8);
                            float32x4_t v137 = vaddq_f32(v12, v136);
                            float32x4_t v138 = vaddq_f32(v135, v137);
                            float32x4_t v139 = vsubq_f32(v135, v137);
                            float32x4_t v140 = vsubq_f32(v42, v135);
                            *(int8x8_t *)v141.f32 = vext_s8(*(int8x8_t *)v140.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), 4uLL);
                            v141.i64[1] = v140.u32[0];
                            *(int8x8_t *)v142.f32 = vext_s8(*(int8x8_t *)v137.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL), 4uLL);
                            v142.i64[1] = v137.u32[0];
                            *(int16x4_t *)v140.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v56, v139), (int8x16_t)vcgeq_f32(v138, v55)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v46, v142), v47, v137), vabsq_f32(vmlaq_f32(vmulq_f32(v44, v141), v140, v58)))));
                            int8x8_t v80 = vuzp1_s8(*(int8x8_t *)v140.f32, *(int8x8_t *)v140.f32);
                            if (v80.i32[0] == -1)
                            {
                              uint64_t v143 = v93;
                              float32x4_t v173 = v56;
                              float32x4_t v176 = v55;
                              if (!(**v160)(v160, &v183, v132))
                              {
                                char v81 = v150;
                                return v81 & 1;
                              }
                              v80.i32[0] = v183.i32[0];
                              if (*(float *)v183.i32 >= v107)
                              {
                                float32x4_t v42 = v168;
                                float32x4_t v12 = v170;
                                float32x4_t v46 = v165;
                                float32x4_t v44 = v166;
                                float32x4_t v58 = v163;
                                float32x4_t v47 = v164;
                                float32x4_t v55 = v176;
                                float32x4_t v56 = v173;
                                uint64_t v93 = v143;
                              }
                              else
                              {
                                float v144 = v87 + (float)(*(float *)v183.i32 * v157->f32[v156]);
                                if (v87 >= v144) {
                                  float v145 = v87 + (float)(*(float *)v183.i32 * v157->f32[v156]);
                                }
                                else {
                                  float v145 = v87;
                                }
                                float v146 = v145 - v86;
                                if (v87 > v144) {
                                  float v144 = v87;
                                }
                                float v147 = v86 + v144;
                                float32x4_t v44 = v166;
                                float32x4_t v42 = v168;
                                float32x4_t v148 = vmlaq_n_f32(v168, v166, *(float *)v183.i32);
                                v148.i64[1] = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u32[0];
                                float32x4_t v55 = vminq_f32(v168, v148);
                                float32x4_t v56 = vmaxq_f32(v168, v148);
                                if (v146 < 0.0) {
                                  unsigned int v92 = ~LODWORD(v146);
                                }
                                else {
                                  unsigned int v92 = LODWORD(v146) | 0x80000000;
                                }
                                if (v147 < 0.0) {
                                  uint64_t v93 = ~LODWORD(v147);
                                }
                                else {
                                  uint64_t v93 = LODWORD(v147) | 0x80000000;
                                }
                                float32x4_t v12 = v170;
                                float32x4_t v47 = v164;
                                float32x4_t v46 = v165;
                                float32x4_t v58 = v163;
                              }
                            }
                            else
                            {
LABEL_70:
                              *(float *)v80.i32 = v107;
                            }
                            v132 += 16;
                            v133 += 32;
                            float v107 = *(float *)v80.i32;
                            v134 -= 32;
                            if (!v134) {
                              goto LABEL_64;
                            }
                          }
                        }
                      }
                      *(float *)v80.i32 = v107;
LABEL_64:
                      v119 >>= 3;
                      ++v118;
                      float v107 = *(float *)v80.i32;
                    }
                    while (v118 != 5);
                  }
                  else
                  {
LABEL_57:
                    *(float *)v80.i32 = v107;
                  }
                  unsigned int v106 = v158 >> 3;
                  int v105 = v159 + 1;
                  float v107 = *(float *)v80.i32;
                }
                while (v159 != 4);
              }
            }
            unsigned int v94 = v152 >> 3;
            BOOL v83 = v153 > 3;
            unsigned int v84 = v153 + 1;
          }
          while (v153 != 4);
          *__int16 v149 = *(float *)v80.i32;
        }
      }
    }
  }
  char v81 = 1;
  return v81 & 1;
}

uint64_t physx::Sq::BucketPruner::overlap(float32x4_t *a1, uint64_t a2, uint64_t (***a3)(void, int *, uint64_t), double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  if (a1[489].i8[0]) {
    return 1;
  }
  uint64_t result = 1;
  uint64_t v11 = a2 + 72;
  switch(*(_WORD *)(a2 + 98))
  {
    case 0:
      float32x4_t v12 = *(float32x4_t *)(a2 + 100);
      v12.i64[1] = *(unsigned int *)(a2 + 108);
      *(float *)&a4 = *(float *)(a2 + 112) * *(float *)(a2 + 112);
      float32x2_t v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
      unint64_t v14 = a1[4].u32[0];
      float32x4_t v158 = v12;
      if (!v14) {
        goto LABEL_10;
      }
      unint64_t v15 = 0;
      uint64_t v16 = &a1[4].i8[8];
      float v17 = &a1[21].f32[3];
      do
      {
        float v18 = *(v17 - 3);
        float32x2_t v19 = *(float32x2_t *)(v17 - 5);
        float32x2_t v20 = *(float32x2_t *)(v17 - 2);
        *(float32x2_t *)v21.f32 = vmul_f32(vadd_f32(v19, v20), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v22.f32 = vmul_f32(vsub_f32(v20, v19), (float32x2_t)0x3F0000003F000000);
        v21.i64[1] = COERCE_UNSIGNED_INT((float)(v18 + *v17) * 0.5);
        v22.f32[2] = (float)(*v17 - v18) * 0.5;
        v22.i32[3] = 0;
        float32x4_t v23 = vsubq_f32(v12, v21);
        float32x4_t v24 = vnegq_f32(v22);
        v24.i32[3] = 0;
        float32x4_t v25 = vsubq_f32(v23, vmaxq_f32(vminq_f32(v23, v22), v24));
        float32x4_t v26 = vmulq_f32(v25, v25);
        v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
        *(int16x4_t *)v26.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)), 0);
        if (vuzp1_s8(*(int8x8_t *)v26.f32, *(int8x8_t *)v26.f32).u32[0] == -1)
        {
          v159[0].i32[0] = -1082130432;
          uint64_t result = (**a3)(a3, (int *)v159, (uint64_t)v16);
          if (!result) {
            return result;
          }
          unint64_t v14 = a1[4].u32[0];
          float32x4_t v12 = v158;
        }
        ++v15;
        v16 += 16;
        v17 += 6;
      }
      while (v15 < v14);
LABEL_10:
      if (!a1[51].i32[2]) {
        return 1;
      }
      v27.i64[0] = a1[53].i64[0];
      v27.i64[1] = a1[53].u32[2];
      v28.i64[0] = a1[54].i64[0];
      v28.i64[1] = a1[54].u32[2];
      float32x4_t v29 = vsubq_f32(v12, v27);
      float32x4_t v30 = vnegq_f32(v28);
      v30.i32[3] = 0;
      float32x4_t v31 = vsubq_f32(v29, vmaxq_f32(vminq_f32(v29, v28), v30));
      float32x4_t v32 = vmulq_f32(v31, v31);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      *(int16x4_t *)v32.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32)), 0);
      if (vuzp1_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v32.f32).u32[0] != -1) {
        return 1;
      }
      uint64_t v33 = 0;
      uint64_t v34 = a1[52].u32[0];
      int v35 = *(_DWORD *)(v11 + 4 * v34);
      int v36 = *(_DWORD *)(a2 + 4 * v34 + 84);
      if (v35 < 0) {
        unsigned int v37 = ~v35;
      }
      else {
        unsigned int v37 = v35 | 0x80000000;
      }
      if (v36 < 0) {
        unsigned int v38 = ~v36;
      }
      else {
        unsigned int v38 = v36 | 0x80000000;
      }
      while (1)
      {
        if (a1[55].i32[v33])
        {
          float32x2_t v39 = &a1[2 * v33];
          v40.i64[0] = v39[58].i64[0];
          v40.i64[1] = v39[58].u32[2];
          v41.i64[0] = v39[59].i64[0];
          v41.i64[1] = v39[59].u32[2];
          float32x4_t v42 = vsubq_f32(v12, v40);
          float32x4_t v43 = vnegq_f32(v41);
          v43.i32[3] = 0;
          float32x4_t v44 = vsubq_f32(v42, vmaxq_f32(vminq_f32(v42, v41), v43));
          float32x4_t v45 = vmulq_f32(v44, v44);
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32).u32[0] == -1) {
            break;
          }
        }
LABEL_20:
        ++v33;
        uint64_t result = 1;
        if (v33 == 5) {
          return result;
        }
      }
      uint64_t v46 = 0;
      while (1)
      {
        if (a1[14 * v33 + 69].i32[v46])
        {
          uint64_t v47 = (uint64_t)&a1[14 * v33 + 2 * v46];
          v48.i64[0] = *(void *)(v47 + 1152);
          v48.i64[1] = *(unsigned int *)(v47 + 1160);
          v49.i64[0] = *(void *)(v47 + 1168);
          v49.i64[1] = *(unsigned int *)(v47 + 1176);
          float32x4_t v50 = vsubq_f32(v12, v48);
          float32x4_t v51 = vnegq_f32(v49);
          v51.i32[3] = 0;
          float32x4_t v52 = vsubq_f32(v50, vmaxq_f32(vminq_f32(v50, v49), v51));
          float32x4_t v53 = vmulq_f32(v52, v52);
          v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
          *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32).u32[0] == -1) {
            break;
          }
        }
LABEL_35:
        if (++v46 == 5) {
          goto LABEL_20;
        }
      }
      uint64_t v54 = 0;
      while (1)
      {
        __int32 v55 = a1[70 * v33 + 139 + 14 * v46].i32[v54];
        if (v55)
        {
          uint64_t v56 = (uint64_t)&a1[70 * v33 + 14 * v46 + 2 * v54];
          v57.i64[0] = *(void *)(v56 + 2272);
          v57.i64[1] = *(unsigned int *)(v56 + 2280);
          v58.i64[0] = *(void *)(v56 + 2288);
          v58.i64[1] = *(unsigned int *)(v56 + 2296);
          float32x4_t v59 = vsubq_f32(v12, v57);
          float32x4_t v60 = vnegq_f32(v58);
          v60.i32[3] = 0;
          float32x4_t v61 = vsubq_f32(v59, vmaxq_f32(vminq_f32(v59, v58), v60));
          float32x4_t v62 = vmulq_f32(v61, v61);
          v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
          *(int16x4_t *)v62.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v62.f32).u32[0] == -1) {
            break;
          }
        }
LABEL_34:
        if (++v54 == 5) {
          goto LABEL_35;
        }
      }
      uint64_t v63 = (a1[14 * v33 + 70].i32[v46 + 1]
                         + a1[56].i32[v33 + 1]
                         + a1[70 * v33 + 140 + 14 * v46].i32[v54 + 1]);
      uint64_t v64 = a1[3].i64[1] + 16 * v63;
      uint64_t v65 = a1[3].i64[0] + 32 * v63 + 16;
      while (1)
      {
        if (*(_DWORD *)(v65 + 12) >= v37)
        {
          if (*(_DWORD *)(v65 - 4) > v38) {
            goto LABEL_34;
          }
          v66.i64[0] = *(void *)(v65 - 16);
          v66.i64[1] = *(unsigned int *)(v65 - 8);
          v67.i64[0] = *(void *)v65;
          v67.i64[1] = *(unsigned int *)(v65 + 8);
          float32x4_t v68 = vsubq_f32(v12, v66);
          float32x4_t v69 = vnegq_f32(v67);
          v69.i32[3] = 0;
          float32x4_t v70 = vsubq_f32(v68, vmaxq_f32(vminq_f32(v68, v67), v69));
          float32x4_t v71 = vmulq_f32(v70, v70);
          v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
          *(int16x4_t *)v71.f32 = vdup_lane_s16((int16x4_t)vcge_f32(v13, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0);
          if (vuzp1_s8(*(int8x8_t *)v71.f32, *(int8x8_t *)v71.f32).u32[0] == -1)
          {
            v159[0].i32[0] = -1082130432;
            uint64_t result = (**a3)(a3, (int *)v159, v64);
            float32x4_t v12 = v158;
            if (!result) {
              return result;
            }
          }
        }
        v64 += 16;
        v65 += 32;
        if (!--v55) {
          goto LABEL_34;
        }
      }
    case 2:
    case 4:
      goto LABEL_38;
    case 3:
      if (*(_WORD *)(a2 + 96))
      {
LABEL_38:
        *(float *)&double v72 = OBBAABBTest_SIMD::OBBAABBTest_SIMD(v159, (__int32 *)(a2 + 12), a2 + 48, a2, a4, a5, a6, a7);
        return BucketPrunerOverlapTraversal<OBBAABBTest_SIMD,false>::operator()(a1 + 1, v159, a3, v11, v72, v73, v74, v75);
      }
      uint64_t v76 = a2 + 84;
      float v77 = *(float *)(a2 + 84);
      float v78 = *(float *)(a2 + 72);
      float v79 = *(float *)(a2 + 76);
      float v80 = *(float *)(a2 + 80);
      float v81 = *(float *)(a2 + 88);
      float v82 = *(float *)(a2 + 92);
      unint64_t v83 = a1[4].u32[0];
      if (!v83) {
        goto LABEL_51;
      }
      unint64_t v84 = 0;
      uint64_t v85 = &a1[4].i8[8];
      float v86 = &a1[21].f32[3];
      break;
    default:
      return result;
  }
  do
  {
    if (v78 <= *(v86 - 2)
      && *(v86 - 5) <= v77
      && v79 <= *(v86 - 1)
      && *(v86 - 4) <= v81
      && v80 <= *v86
      && *(v86 - 3) <= v82)
    {
      v159[0].i32[0] = -1082130432;
      uint64_t result = (**a3)(a3, (int *)v159, (uint64_t)v85);
      if (!result) {
        return result;
      }
      unint64_t v83 = a1[4].u32[0];
    }
    ++v84;
    v85 += 16;
    v86 += 6;
  }
  while (v84 < v83);
  if (!a1[51].i32[2]) {
    return 1;
  }
LABEL_51:
  float v87 = a1[53].f32[0];
  float v88 = a1[54].f32[0];
  float v89 = a1[53].f32[1];
  float v90 = a1[54].f32[1];
  float v91 = a1[53].f32[2];
  float v92 = a1[54].f32[2];
  BOOL v93 = v78 <= (float)(v87 + v88) && (float)(v87 - v88) <= v77;
  BOOL v94 = v93 && v79 <= (float)(v89 + v90);
  BOOL v95 = v94 && (float)(v89 - v90) <= v81;
  BOOL v96 = v95 && v80 <= (float)(v91 + v92);
  if (!v96 || (float)(v91 - v92) > v82) {
    return 1;
  }
  uint64_t v98 = 0;
  uint64_t v99 = a1[52].u32[0];
  int v100 = *(_DWORD *)(v11 + 4 * v99);
  int v101 = *(_DWORD *)(v76 + 4 * v99);
  if (v100 < 0) {
    unsigned int v102 = ~v100;
  }
  else {
    unsigned int v102 = v100 | 0x80000000;
  }
  if (v101 < 0) {
    unsigned int v103 = ~v101;
  }
  else {
    unsigned int v103 = v101 | 0x80000000;
  }
  while (1)
  {
    if (a1[55].i32[v98])
    {
      f32 = a1[2 * v98].f32;
      float v105 = f32[232];
      float v106 = f32[236];
      float v107 = f32[233];
      float v108 = f32[237];
      float v109 = f32[234];
      float v110 = f32[238];
      BOOL v111 = v78 <= (float)(v105 + v106) && (float)(v105 - v106) <= v77;
      BOOL v112 = v111 && v79 <= (float)(v107 + v108);
      BOOL v113 = v112 && (float)(v107 - v108) <= v81;
      BOOL v114 = v113 && v80 <= (float)(v109 + v110);
      if (v114 && (float)(v109 - v110) <= v82) {
        break;
      }
    }
LABEL_92:
    ++v98;
    uint64_t result = 1;
    if (v98 == 5) {
      return result;
    }
  }
  uint64_t v116 = 0;
  while (1)
  {
    if (a1[14 * v98 + 69].i32[v116])
    {
      float32x4_t v117 = a1[14 * v98 + 2 * v116].f32;
      float v118 = v117[288];
      float v119 = v117[292];
      float v120 = v117[289];
      float v121 = v117[293];
      float v122 = v117[290];
      float v123 = v117[294];
      BOOL v124 = v78 <= (float)(v118 + v119) && (float)(v118 - v119) <= v77;
      BOOL v125 = v124 && v79 <= (float)(v120 + v121);
      BOOL v126 = v125 && (float)(v120 - v121) <= v81;
      BOOL v127 = v126 && v80 <= (float)(v122 + v123);
      if (v127 && (float)(v122 - v123) <= v82) {
        break;
      }
    }
LABEL_155:
    if (++v116 == 5) {
      goto LABEL_92;
    }
  }
  uint64_t v129 = 0;
  while (1)
  {
    __int32 v130 = a1[70 * v98 + 139 + 14 * v116].i32[v129];
    if (v130)
    {
      uint64_t v131 = a1[70 * v98 + 14 * v116 + 2 * v129].f32;
      float v132 = v131[568];
      float v133 = v131[572];
      float v134 = v131[569];
      float v135 = v131[573];
      float v136 = v131[570];
      float v137 = v131[574];
      BOOL v138 = v78 <= (float)(v132 + v133) && (float)(v132 - v133) <= v77;
      BOOL v139 = v138 && v79 <= (float)(v134 + v135);
      BOOL v140 = v139 && (float)(v134 - v135) <= v81;
      BOOL v141 = v140 && v80 <= (float)(v136 + v137);
      if (v141 && (float)(v136 - v137) <= v82) {
        break;
      }
    }
LABEL_154:
    if (++v129 == 5) {
      goto LABEL_155;
    }
  }
  uint64_t v143 = (a1[14 * v98 + 70].i32[v116 + 1]
                      + a1[56].i32[v98 + 1]
                      + a1[70 * v98 + 140 + 14 * v116].i32[v129 + 1]);
  uint64_t v144 = a1[3].i64[1] + 16 * v143;
  uint64_t v145 = a1[3].i64[0] + 32 * v143 + 16;
  while (1)
  {
    if (*(_DWORD *)(v145 + 12) >= v102)
    {
      if (*(_DWORD *)(v145 - 4) > v103) {
        goto LABEL_154;
      }
      float v146 = *(float *)(v145 - 16);
      float v147 = *(float *)(v145 - 12);
      float v148 = *(float *)(v145 + 4);
      float v149 = v147 - v148;
      float v150 = *(float *)(v145 - 8);
      float v151 = *(float *)(v145 + 8);
      float v152 = v147 + v148;
      BOOL v153 = v78 <= (float)(v146 + *(float *)v145) && (float)(v146 - *(float *)v145) <= v77;
      BOOL v154 = v153 && v79 <= v152;
      BOOL v155 = v154 && v149 <= v81;
      BOOL v156 = v155 && v80 <= (float)(v150 + v151);
      if (v156 && (float)(v150 - v151) <= v82)
      {
        v159[0].i32[0] = -1082130432;
        uint64_t result = (**a3)(a3, (int *)v159, v144);
        if (!result) {
          return result;
        }
      }
    }
    v144 += 16;
    v145 += 32;
    if (!--v130) {
      goto LABEL_154;
    }
  }
}

uint64_t physx::Sq::BucketPruner::raycast(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, unsigned int (***a5)(void, float *, float32x2_t *))
{
  if (!a1[978].i8[0])
  {
    __int32 v7 = a1[103].i32[0];
    uint64_t v8 = a1[8].u32[0];
    if (v7 | v8)
    {
      float v13 = *a4;
      if (*a4 == 3.4028e38)
      {
        float v14 = a1[107].f32[0];
        float v15 = a1[109].f32[0];
        float v16 = v14 - v15;
        float v169 = v14 - v15;
        float v17 = v14 + v15;
        float32x2_t v18 = a1[106];
        float32x2_t v19 = a1[108];
        float32x2_t v20 = vsub_f32(v18, v19);
        unint64_t v168 = (unint64_t)v20;
        float32x2_t v21 = vadd_f32(vadd_f32(v18, v19), 0);
        float v22 = v17 + 0.0;
        int8x8_t v166 = (int8x8_t)v21;
        float v167 = v22;
        if (v8)
        {
          float32x2_t v23 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
          float32x2_t v24 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
          float32x4_t v25 = (float *)&a1[43] + 1;
          float v26 = 8.5071e37;
          float v27 = -8.5071e37;
          do
          {
            float32x2_t v23 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v25 - 5), v23), (int8x8_t)v23, *(int8x8_t *)(v25 - 5));
            if (v26 >= *(v25 - 3)) {
              float v26 = *(v25 - 3);
            }
            float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v24, *(float32x2_t *)(v25 - 2)), (int8x8_t)v24, *(int8x8_t *)(v25 - 2));
            float v28 = *v25;
            v25 += 6;
            float v29 = v28;
            if (v27 <= v28) {
              float v27 = v29;
            }
            --v8;
          }
          while (v8);
          int32x2_t v30 = vcgt_f32(v23, v20);
          float32x2_t v31 = vadd_f32(v24, 0);
          float v32 = v27 + 0.0;
          if (v30.i8[0]) {
            float v33 = v20.f32[0];
          }
          else {
            float v33 = v23.f32[0];
          }
          float v34 = v20.f32[1];
          if ((v30.i8[4] & 1) == 0) {
            float v34 = v23.f32[1];
          }
          if (v16 >= v26) {
            float v16 = v26;
          }
          unint64_t v168 = __PAIR64__(LODWORD(v34), LODWORD(v33));
          float v169 = v16;
          if (v22 <= v32) {
            float v35 = v32;
          }
          else {
            float v35 = v22;
          }
          int8x8_t v166 = vbsl_s8((int8x8_t)vcgt_f32(v21, v31), (int8x8_t)v21, (int8x8_t)v31);
          float v167 = v35;
        }
        clipRay((float *)a2, (float *)a3, a4, (float *)&v168, (float *)&v166);
        float v13 = *a4;
      }
      float v36 = a2[1].f32[0];
      double v37 = COERCE_DOUBLE(vadd_f32(*a2, vmul_n_f32(*a3, v13)));
      double v38 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(*a3), (int8x8_t)*a2, vbsl_s8((int8x8_t)vcgez_f32(*a3), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
      *(float32x2_t *)v39.f32 = *a2;
      v39.i64[1] = LODWORD(v36);
      float v40 = a3[1].f32[0];
      *(float32x2_t *)v41.f32 = *a3;
      v41.i64[1] = LODWORD(v40);
      *(int8x8_t *)v42.f32 = vext_s8((int8x8_t)*a3, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
      v42.i64[1] = a3->u32[0];
      float32x4_t v43 = vabsq_f32(v41);
      *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v43.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), 4uLL);
      v44.i64[1] = v43.u32[0];
      float v45 = v36 + (float)(v13 * v40);
      float v46 = -3.4028e38;
      if (v40 >= 0.0) {
        float v46 = 3.4028e38;
      }
      if (v40 != 0.0) {
        float v36 = v46;
      }
      BOOL v47 = v13 < 3.4028e38;
      if (v13 >= 3.4028e38) {
        float v48 = v36;
      }
      else {
        float v48 = v45;
      }
      if (v47) {
        *(double *)v49.i64 = v37;
      }
      else {
        *(double *)v49.i64 = v38;
      }
      v49.i64[1] = LODWORD(v48);
      float32x4_t v50 = vminq_f32(v39, v49);
      float32x4_t v51 = vmaxq_f32(v39, v49);
      unint64_t v52 = a1[8].u32[0];
      float32x4_t v155 = v42;
      float32x4_t v53 = vnegq_f32(v42);
      float32x4_t v160 = v41;
      float32x4_t v161 = v39;
      float32x4_t v158 = v44;
      float32x4_t v159 = v43;
      float32x4_t v157 = v53;
      if (v52)
      {
        unint64_t v54 = 0;
        __int32 v55 = a1 + 9;
        uint64_t v56 = (float *)&a1[43] + 1;
        float32x4_t v162 = v51;
        float32x4_t v164 = v50;
        do
        {
          float v57 = *(v56 - 3);
          v49.i64[0] = *(void *)(v56 - 5);
          float32x2_t v58 = *(float32x2_t *)(v56 - 2);
          *(float32x2_t *)v59.f32 = vmul_f32(vadd_f32(*(float32x2_t *)v49.f32, v58), (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)v49.f32 = vmul_f32(vsub_f32(v58, *(float32x2_t *)v49.f32), (float32x2_t)0x3F0000003F000000);
          v59.i64[1] = COERCE_UNSIGNED_INT((float)(v57 + *v56) * 0.5);
          float32x4_t v60 = v49;
          v60.f32[2] = (float)(*v56 - v57) * 0.5;
          float32x4_t v61 = v60;
          v61.i32[3] = 0;
          float32x4_t v62 = vaddq_f32(v59, v61);
          float32x4_t v63 = vsubq_f32(v59, v61);
          float32x4_t v64 = vsubq_f32(v39, v59);
          *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), 4uLL);
          v65.i64[1] = v64.u32[0];
          *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), 4uLL);
          v60.i64[1] = v49.u32[0];
          float32x4_t v49 = (float32x4_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v43, v60), v44, v61), vabsq_f32(vmlaq_f32(vmulq_f32(v41, v65), v64, v53)));
          *(int16x4_t *)v61.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v62, v50), (int8x16_t)vcgeq_f32(v51, v63)), (int8x16_t)v49));
          if (vuzp1_s8(*(int8x8_t *)v61.f32, *(int8x8_t *)v61.f32).u32[0] == -1)
          {
            if (!(**a5)(a5, a4, v55))
            {
              char v79 = 0;
              return v79 & 1;
            }
            unint64_t v52 = a1[8].u32[0];
            float32x4_t v41 = v160;
            float32x4_t v39 = v161;
            float32x4_t v44 = v158;
            float32x4_t v43 = v159;
            float32x4_t v53 = v157;
            float32x4_t v51 = v162;
            float32x4_t v50 = v164;
          }
          ++v54;
          v55 += 2;
          v56 += 6;
        }
        while (v54 < v52);
      }
      if (v7)
      {
        *(float32x2_t *)v66.f32 = a1[106];
        v66.i64[1] = a1[107].u32[0];
        *(float32x2_t *)v49.f32 = a1[108];
        float32x4_t v67 = v49;
        v67.i32[2] = a1[109].i32[0];
        float32x4_t v68 = v67;
        v68.i32[3] = 0;
        float32x4_t v69 = vaddq_f32(v66, v68);
        float32x4_t v70 = vsubq_f32(v66, v68);
        float32x4_t v71 = vsubq_f32(v39, v66);
        *(int8x8_t *)v72.f32 = vext_s8(*(int8x8_t *)v71.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), 4uLL);
        v72.i64[1] = v71.u32[0];
        *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), 4uLL);
        v67.i64[1] = v49.u32[0];
        float32x4_t v73 = vmlsq_f32(vmulq_f32(v41, v72), v71, v155);
        float32x4_t v74 = vmlaq_f32(vmulq_f32(v43, v67), v44, v68);
        int8x16_t v75 = (int8x16_t)vcgeq_f32(v69, v50);
        int8x16_t v76 = (int8x16_t)vcgeq_f32(v74, vabsq_f32(v73));
        int8x16_t v77 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v70));
        *(int16x4_t *)v76.i8 = vmovn_s32((int32x4_t)vandq_s8(v77, v76));
        int8x8_t v78 = vuzp1_s8(*(int8x8_t *)v76.i8, *(int8x8_t *)v76.i8);
        if (v78.i32[0] == -1)
        {
          BOOL v81 = 0;
          unsigned int v82 = 0;
          uint64_t v83 = a1[104].u32[0];
          v77.i32[0] = a2->i32[v83];
          uint64_t v150 = v83;
          v78.i32[0] = *(__int32 *)a4;
          *(float *)v75.i32 = *(float *)v77.i32 + (float)(*a4 * a3->f32[v83]);
          int8x8_t v84 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 0);
          v77.i32[1] = v75.i32[0];
          int32x2_t v85 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v77.i8), *(float32x2_t *)v77.i8), v84, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 0));
          *(int8x8_t *)&long long v5 = vbsl_s8((int8x8_t)vcltz_s32(v85), vmvn_s8((int8x8_t)v85), (int8x8_t)(*(void *)&v85 | 0x8000000080000000));
          *(float *)&unint64_t v168 = *a4;
          uint64_t v144 = ((unsigned __int32)a3->i32[0] >> 29) & 4 | ((unsigned __int32)a3->i32[1] >> 30) & 0xFFFFFFFE | ((unsigned __int32)a3[1].i32[0] >> 31);
          uint64_t v145 = a4;
          unsigned int v86 = a1[136].u16[v144];
          float v151 = a2;
          float v152 = a3;
          do
          {
            uint64_t v87 = v86 & 7;
            unsigned int v146 = v86;
            unsigned int v147 = v82;
            if (a1[110].i32[v87])
            {
              float v88 = &a1[4 * v87];
              *(float32x2_t *)v89.f32 = v88[116];
              v89.i64[1] = v88[117].u32[0];
              *(float32x2_t *)v75.i8 = v88[118];
              float32x4_t v90 = (float32x4_t)v75;
              v90.i32[2] = v88[119].i32[0];
              float32x4_t v91 = v90;
              v91.i32[3] = 0;
              float32x4_t v92 = vaddq_f32(v89, v91);
              float32x4_t v93 = vsubq_f32(v89, v91);
              float32x4_t v94 = vsubq_f32(v39, v89);
              *(int8x8_t *)v95.f32 = vext_s8(*(int8x8_t *)v94.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), 4uLL);
              v95.i64[1] = v94.u32[0];
              *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v75.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), 4uLL);
              v90.i64[1] = v75.u32[0];
              int8x16_t v75 = vandq_s8((int8x16_t)vcgeq_f32(v92, v50), (int8x16_t)vcgeq_f32(v51, v93));
              int8x16_t v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v43, v90), v44, v91), vabsq_f32(vmlaq_f32(vmulq_f32(v41, v95), v94, v53))));
              if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v96), v78).u32[0] == -1)
              {
                char v143 = v81;
                int v97 = 0;
                uint64_t v148 = (uint64_t)&a1[28 * v87 + 138];
                unsigned int v98 = *(unsigned __int16 *)(v148 + 2 * v144 + 208);
                float v99 = *(float *)v78.i32;
                do
                {
                  uint64_t v100 = v98 & 7;
                  int v153 = v97;
                  if (!*(_DWORD *)(v148 + 4 * v100)) {
                    goto LABEL_51;
                  }
                  uint64_t v101 = (uint64_t)&a1[28 * v87 + 4 * v100];
                  v102.i64[0] = *(void *)(v101 + 1152);
                  v102.i64[1] = *(unsigned int *)(v101 + 1160);
                  v96.i64[0] = *(void *)(v101 + 1168);
                  float32x4_t v103 = (float32x4_t)v96;
                  v103.i32[2] = *(_DWORD *)(v101 + 1176);
                  float32x4_t v104 = v103;
                  v104.i32[3] = 0;
                  float32x4_t v105 = vaddq_f32(v102, v104);
                  float32x4_t v106 = vsubq_f32(v102, v104);
                  float32x4_t v107 = vsubq_f32(v39, v102);
                  *(int8x8_t *)v108.f32 = vext_s8(*(int8x8_t *)v107.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), 4uLL);
                  v108.i64[1] = v107.u32[0];
                  *(int8x8_t *)v103.f32 = vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL), 4uLL);
                  v103.i64[1] = v96.u32[0];
                  float32x4_t v109 = vmlaq_f32(vmulq_f32(v41, v108), v107, v53);
                  float32x4_t v110 = vmlaq_f32(vmulq_f32(v43, v103), v44, v104);
                  int8x16_t v75 = (int8x16_t)vcgeq_f32(v105, v50);
                  int8x16_t v111 = (int8x16_t)vcgeq_f32(v110, vabsq_f32(v109));
                  int8x16_t v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v106));
                  *(int16x4_t *)v111.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v111));
                  int8x8_t v78 = vuzp1_s8(*(int8x8_t *)v111.i8, *(int8x8_t *)v111.i8);
                  if (v78.i32[0] == -1)
                  {
                    int v112 = 0;
                    int v149 = a1[28 * v87 + 140].i32[v100 + 1] + a1[112].i32[v87 + 1];
                    uint64_t v154 = (uint64_t)&a1[140 * v87 + 278 + 28 * (v98 & 7)];
                    unsigned int v113 = *(unsigned __int16 *)(v154 + 2 * v144 + 208);
                    do
                    {
                      uint64_t v114 = v113 & 7;
                      uint64_t v115 = *(unsigned int *)(v154 + 4 * v114);
                      if (v115)
                      {
                        uint64_t v116 = (uint64_t)&a1[140 * v87 + 28 * v100 + 4 * v114];
                        v117.i64[0] = *(void *)(v116 + 2272);
                        v117.i64[1] = *(unsigned int *)(v116 + 2280);
                        v96.i64[0] = *(void *)(v116 + 2288);
                        float32x4_t v118 = (float32x4_t)v96;
                        v118.i32[2] = *(_DWORD *)(v116 + 2296);
                        float32x4_t v119 = v118;
                        v119.i32[3] = 0;
                        float32x4_t v120 = vaddq_f32(v117, v119);
                        float32x4_t v121 = vsubq_f32(v117, v119);
                        float32x4_t v122 = vsubq_f32(v39, v117);
                        *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v122.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL), 4uLL);
                        v123.i64[1] = v122.u32[0];
                        *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), 4uLL);
                        v118.i64[1] = v96.u32[0];
                        float32x4_t v124 = vmlaq_f32(vmulq_f32(v41, v123), v122, v53);
                        float32x4_t v125 = vmlaq_f32(vmulq_f32(v43, v118), v44, v119);
                        int8x16_t v75 = (int8x16_t)vcgeq_f32(v120, v50);
                        int8x16_t v126 = (int8x16_t)vcgeq_f32(v125, vabsq_f32(v124));
                        int8x16_t v96 = vandq_s8(v75, (int8x16_t)vcgeq_f32(v51, v121));
                        *(int16x4_t *)v126.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v126));
                        int8x8_t v78 = vuzp1_s8(*(int8x8_t *)v126.i8, *(int8x8_t *)v126.i8);
                        if (v78.i32[0] == -1)
                        {
                          uint64_t v127 = (v149
                                              + a1[140 * v87 + 280 + 28 * v100].i32[v114 + 1]);
                          uint64_t v128 = *(void *)&a1[7] + 16 * v127;
                          uint64_t v129 = (int8x8_t *)(*(void *)&a1[6] + 32 * v127 + 16);
                          uint64_t v130 = 32 * v115;
                          while (1)
                          {
                            if (v129[1].i32[1] < v5) {
                              goto LABEL_64;
                            }
                            if (v129[-1].i32[1] > DWORD1(v5)) {
                              break;
                            }
                            *(int8x8_t *)v131.f32 = v129[-2];
                            v131.i64[1] = v129[-1].u32[0];
                            *(int8x8_t *)v96.i8 = *v129;
                            float32x4_t v132 = (float32x4_t)v96;
                            v132.i32[2] = v129[1].i32[0];
                            float32x4_t v133 = v132;
                            v133.i32[3] = 0;
                            float32x4_t v134 = vaddq_f32(v131, v133);
                            float32x4_t v135 = vsubq_f32(v131, v133);
                            float32x4_t v136 = vsubq_f32(v39, v131);
                            *(int8x8_t *)v137.f32 = vext_s8(*(int8x8_t *)v136.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL), 4uLL);
                            v137.i64[1] = v136.u32[0];
                            *(int8x8_t *)v132.f32 = vext_s8(*v129, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL), 4uLL);
                            v132.i64[1] = v129->u32[0];
                            float32x4_t v138 = vmlaq_f32(vmulq_f32(v41, v137), v136, v53);
                            float32x4_t v139 = vmlaq_f32(vmulq_f32(v43, v132), v44, v133);
                            int8x16_t v75 = (int8x16_t)vcgeq_f32(v134, v50);
                            int8x16_t v140 = (int8x16_t)vcgeq_f32(v139, vabsq_f32(v138));
                            int8x16_t v96 = vandq_s8((int8x16_t)vcgeq_f32(v51, v135), v75);
                            *(int16x4_t *)v140.i8 = vmovn_s32((int32x4_t)vandq_s8(v96, v140));
                            int8x8_t v78 = vuzp1_s8(*(int8x8_t *)v140.i8, *(int8x8_t *)v140.i8);
                            if (v78.i32[0] == -1)
                            {
                              long long v156 = v5;
                              float32x4_t v163 = v51;
                              float32x4_t v165 = v50;
                              if (!(**a5)(a5, (float *)&v168, (float32x2_t *)v128))
                              {
                                char v79 = v143;
                                return v79 & 1;
                              }
                              v78.i32[0] = v168;
                              long long v5 = v156;
                              if (*(float *)&v168 >= v99)
                              {
                                float32x4_t v41 = v160;
                                float32x4_t v39 = v161;
                                float32x4_t v44 = v158;
                                float32x4_t v43 = v159;
                                float32x4_t v53 = v157;
                                float32x4_t v51 = v163;
                                float32x4_t v50 = v165;
                              }
                              else
                              {
                                v96.i32[0] = v151->i32[v150];
                                *(float *)v75.i32 = *(float *)v96.i32 + (float)(*(float *)&v168 * v152->f32[v150]);
                                float32x4_t v41 = v160;
                                float32x4_t v39 = v161;
                                float32x4_t v141 = vmlaq_n_f32(v161, v160, *(float *)&v168);
                                v141.i64[1] = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u32[0];
                                float32x4_t v50 = vminq_f32(v161, v141);
                                float32x4_t v51 = vmaxq_f32(v161, v141);
                                *(int32x2_t *)v141.f32 = vdup_lane_s32(*(int32x2_t *)v96.i8, 0);
                                v96.i32[1] = v75.i32[0];
                                int32x2_t v142 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v96.i8), *(float32x2_t *)v96.i8), *(int8x8_t *)v141.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 0));
                                *(int8x8_t *)&long long v5 = vbsl_s8((int8x8_t)vcltz_s32(v142), vmvn_s8((int8x8_t)v142), (int8x8_t)(*(void *)&v142 | 0x8000000080000000));
                                float32x4_t v44 = v158;
                                float32x4_t v43 = v159;
                                float32x4_t v53 = v157;
                              }
                            }
                            else
                            {
LABEL_64:
                              *(float *)v78.i32 = v99;
                            }
                            v128 += 16;
                            v129 += 4;
                            float v99 = *(float *)v78.i32;
                            v130 -= 32;
                            if (!v130) {
                              goto LABEL_58;
                            }
                          }
                        }
                      }
                      *(float *)v78.i32 = v99;
LABEL_58:
                      v113 >>= 3;
                      ++v112;
                      float v99 = *(float *)v78.i32;
                    }
                    while (v112 != 5);
                  }
                  else
                  {
LABEL_51:
                    *(float *)v78.i32 = v99;
                  }
                  v98 >>= 3;
                  int v97 = v153 + 1;
                  float v99 = *(float *)v78.i32;
                }
                while (v153 != 4);
              }
            }
            unsigned int v86 = v146 >> 3;
            BOOL v81 = v147 > 3;
            unsigned int v82 = v147 + 1;
          }
          while (v147 != 4);
          *uint64_t v145 = *(float *)v78.i32;
        }
      }
    }
  }
  char v79 = 1;
  return v79 & 1;
}

uint64_t physx::Sq::BucketPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  long long v22 = xmmword_23435FBB0;
  uint64_t v23 = 0;
  int v24 = 0;
  float v6 = (_DWORD *)physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v22);
  a2[1] = a3;
  uint64_t result = visualize(v6, (void *)(a1 + 848), v7, v8, v9);
  uint64_t v14 = 0;
  float32x2_t v21 = (void *)(a1 + 2272);
  uint64_t v20 = a1 + 2224;
  do
  {
    if (*(_DWORD *)(a1 + 880 + 4 * v14))
    {
      uint64_t result = visualize(a2, (void *)(a1 + 16 + 32 * v14 + 912), v11, v12, v13);
      uint64_t v15 = 0;
      uint64_t v17 = v20;
      float v16 = v21;
      do
      {
        if (*(_DWORD *)(a1 + 16 + 224 * v14 + 1088 + 4 * v15))
        {
          uint64_t result = visualize(a2, (void *)(a1 + 224 * v14 + 32 * v15 + 1152), v11, v12, v13);
          uint64_t v18 = 0;
          float32x2_t v19 = v16;
          do
          {
            if (*(_DWORD *)(v17 + v18)) {
              uint64_t result = visualize(a2, v19, v11, v12, v13);
            }
            v19 += 4;
            v18 += 4;
          }
          while (v18 != 20);
        }
        ++v15;
        v16 += 28;
        v17 += 224;
      }
      while (v15 != 5);
    }
    ++v14;
    v20 += 1120;
    v21 += 140;
  }
  while (v14 != 5);
  return result;
}

physx::Sq::ExtendedBucketPruner *physx::Sq::ExtendedBucketPruner::ExtendedBucketPruner(physx::Sq::ExtendedBucketPruner *this, const physx::Sq::PruningPool *a2)
{
  *(void *)this = &unk_26E728130;
  physx::Sq::IncrementalAABBPrunerCore::IncrementalAABBPrunerCore((physx::Sq::ExtendedBucketPruner *)((char *)this + 8), a2);
  *((void *)this + 23) = a2;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1061158912;
  *(void *)((char *)this + 236) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 61) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 192, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 312) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *((_DWORD *)this + 77) = 32;
  *((void *)this + 36) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 792, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 60);
  uint64_t v4 = *((unsigned int *)this + 77);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 61);
    unsigned int v7 = *((_DWORD *)this + 77);
    *((void *)this + 37) = v5;
    if (*((_DWORD *)this + 57) < v7) {
      physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 192, v7, v6);
    }
  }
  else
  {
    *((void *)this + 37) = 0;
  }
  uint64_t v8 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v9 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
  }
  else {
    float32x4_t v9 = "<allocation names disabled>";
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v8 + 24) + 16))(v8 + 24, 104, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 65);
  *(void *)uint64_t v10 = 0;
  *(_DWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 96) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 76) = 0u;
  *((void *)this + 31) = v10;
  if (*((_DWORD *)this + 77))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 37);
    do
    {
      *(void *)(v13 + v11 + 8) = 0;
      uint64_t v14 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        uint64_t v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
      }
      else {
        uint64_t v15 = "<allocation names disabled>";
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24)
                                                                                             + 16))(v14 + 24, 104, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 71);
      *(void *)uint64_t v16 = 0;
      *(_DWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 96) = 0;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 76) = 0u;
      uint64_t v13 = *((void *)this + 37);
      *(void *)(v13 + v11) = v16;
      ++v12;
      v11 += 16;
    }
    while (v12 < *((unsigned int *)this + 77));
  }
  return this;
}

void physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner(physx::Sq::ExtendedBucketPruner *this)
{
  *(void *)this = &unk_26E728130;
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    physx::Sq::AABBTree::~AABBTree(*((physx::Sq::AABBTree **)this + 31));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((void *)this + 31) = 0;
  }
  unint64_t v3 = *((unsigned int *)this + 77);
  if (v3)
  {
    uint64_t v4 = 0;
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v6 = *((void *)this + 37);
      uint64_t v7 = *(void *)(v6 + v4);
      if (v7)
      {
        physx::Sq::AABBTree::~AABBTree(*(physx::Sq::AABBTree **)(v6 + v4));
        (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
        unint64_t v3 = *((unsigned int *)this + 77);
      }
      v4 += 16;
    }
  }
  if (*((void *)this + 36)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 37)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this + 272);
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this + 256);
  if (*((void *)this + 24)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Sq::IncrementalAABBPrunerCore::~IncrementalAABBPrunerCore((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
}

{
  uint64_t vars8;

  physx::Sq::ExtendedBucketPruner::~ExtendedBucketPruner(this);
  JUMPOUT(0x237DBCBD0);
}

void physx::Sq::ExtendedBucketPruner::release(physx::Sq::ExtendedBucketPruner *this)
{
  physx::Sq::IncrementalAABBPrunerCore::release((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
  int v5 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 256, 0, &v5);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 256, *((_DWORD *)this + 66));
  int v6 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 272, 0, &v6);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 272, *((_DWORD *)this + 70));
  physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 192);
  if (*((_DWORD *)this + 77))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)this + 37) + v2;
      *(void *)(v4 + 8) = 0;
      physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)v4, 1);
      ++v3;
      v2 += 16;
    }
    while (v3 < *((unsigned int *)this + 77));
  }
  *((_DWORD *)this + 76) = 0;
}

void *physx::Sq::ExtendedBucketPruner::addTree(int32x2_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int32 v5 = a1[38].u32[0];
  uint64_t v54 = a2;
  if (v5 == a1[38].i32[1])
  {
    unsigned int v6 = 2 * v5;
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * ((2 * v5) | 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 201);
    memcpy(v7, *(const void **)&a1[36], (24 * a1[38].i32[1]));
    if (a1[36]) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    a1[36] = (int32x2_t)v7;
    if (v6) {
      uint64_t v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 208);
    }
    else {
      uint64_t v8 = 0;
    }
    memcpy(v8, *(const void **)&a1[37], (16 * a1[38].i32[1]));
    if (a1[37]) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    a1[37] = (int32x2_t)v8;
    uint64_t v9 = a1[38].u32[1];
    if (v9 < v6)
    {
      int v10 = v9 - v6;
      uint64_t v11 = 16 * v9;
      do
      {
        *(void *)&v8[v11 + 8] = 0;
        uint64_t v12 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
          uint64_t v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBTree>::getName() [T = physx::Sq::AABBTree]";
        }
        else {
          uint64_t v13 = "<allocation names disabled>";
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24)
                                                                                               + 16))(v12 + 24, 104, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 217);
        *(void *)uint64_t v14 = 0;
        *(_DWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 96) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 76) = 0u;
        uint64_t v8 = (char *)a1[37];
        *(void *)&v8[v11] = v14;
        v11 += 16;
      }
      while (!__CFADD__(v10++, 1));
    }
    a1[38].i32[1] = v6;
    unsigned __int32 v5 = a1[38].u32[0];
    a2 = v54;
  }
  else
  {
    uint64_t v8 = (char *)a1[37];
  }
  a1[38].i32[0] = v5 + 1;
  uint64_t v16 = *(void *)(*(void *)&a1[23] + 16);
  uint64_t v17 = *(unsigned int *)(a2 + 32);
  uint64_t v18 = (uint64_t *)&v8[16 * v5];
  uint64_t v55 = a3;
  v18[1] = a3;
  float32x2_t v19 = (unsigned int *)*v18;
  physx::Sq::AABBTree::initTree(*v18, (const void **)a2);
  uint64_t v20 = *(void **)(v54 + 8);
  float32x2_t v21 = (void *)(*(void *)&a1[36] + 24 * v5);
  void *v21 = *v20;
  v21[1] = v20[1];
  v21[2] = v20[2];
  physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::AABBTreeUpdateMap *)&a1[34], *(_DWORD *)(v54 + 16), (const physx::Sq::AABBTree *)v19);
  uint64_t result = physx::Sq::ExtendedBucketPruner::buildMainAABBTree((physx::Sq::ExtendedBucketPruner *)a1);
  uint64_t v24 = v54;
  unint64_t v25 = *(unsigned int *)(v54 + 16);
  if (v25)
  {
    unint64_t v26 = 0;
    uint64_t v27 = v16 + 16 * v17;
    do
    {
      if (v26 >= a1[35].u32[0]) {
        uint64_t v28 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v28 = *(unsigned int *)(*(void *)&a1[34] + 4 * v26);
      }
      float v29 = (uint64_t *)(v27 + 16 * v26);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      unsigned int v32 = a1[28].u32[1];
      uint64_t v33 = ~(v30 << 32);
      if (v32)
      {
        unint64_t v34 = (v33 + v30 + (v31 << 32)) ^ ((v33 + (unint64_t)v30 + (v31 << 32)) >> 22);
        unint64_t v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
        unint64_t v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
        unsigned int v37 = (v32 - 1) & ((v36 >> 31) ^ v36);
        for (uint64_t i = *(unsigned int *)(*(void *)&a1[27] + 4 * v37);
              i != -1;
              uint64_t i = *(unsigned int *)(*(void *)&a1[26] + 4 * i))
        {
          float32x4_t v39 = (uint64_t *)(*(void *)&a1[25] + 32 * i);
          uint64_t v41 = *v39;
          uint64_t v40 = v39[1];
          if (v41 == v30 && v40 == v31) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        unsigned int v37 = 0;
      }
      if (a1[30].i32[1] == a1[28].i32[0])
      {
        if (v32) {
          unsigned int v43 = 2 * v32;
        }
        else {
          unsigned int v43 = 16;
        }
        if (v32 < v43)
        {
          uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&a1[24], v43, v23);
          uint64_t v24 = v54;
          unsigned int v32 = a1[28].u32[1];
        }
        unint64_t v44 = (v33 + v30 + (v31 << 32)) ^ ((v33 + (unint64_t)v30 + (v31 << 32)) >> 22);
        unint64_t v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
        unint64_t v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
        unsigned int v37 = (v32 - 1) & ((v46 >> 31) ^ v46);
      }
      uint64_t v47 = a1[29].u32[1];
      a1[29].i32[1] = v47 + 1;
      int32x2_t v48 = a1[27];
      int32x2_t v49 = a1[25];
      *(_DWORD *)(*(void *)&a1[26] + 4 * v47) = *(_DWORD *)(*(void *)&v48 + 4 * v37);
      *(_DWORD *)(*(void *)&v48 + 4 * v37) = v47;
      int8x8_t v23 = (int8x8_t)vadd_s32(a1[30], (int32x2_t)0x100000001);
      a1[30] = (int32x2_t)v23;
      uint64_t v50 = *(void *)&v49 + 32 * v47;
      *(void *)uint64_t v50 = v30;
      *(void *)(v50 + 8) = v31;
      *(void *)(v50 + 16) = v55 | (v28 << 32);
      *(_DWORD *)(v50 + 24) = v5;
      unint64_t v25 = *(unsigned int *)(v24 + 16);
LABEL_40:
      ++v26;
    }
    while (v26 < v25);
  }
  if (v19[2])
  {
    unint64_t v51 = 0;
    int v52 = *(_DWORD *)(v24 + 32);
    uint64_t v53 = *(void *)v19;
    do
      *(_DWORD *)(v53 + 4 * v51++) += v52;
    while (v51 < v19[2]);
  }
  return result;
}

void *physx::Sq::ExtendedBucketPruner::buildMainAABBTree(physx::Sq::ExtendedBucketPruner *this)
{
  int v2 = *((_DWORD *)this + 76);
  uint64_t v5 = *((void *)this + 36);
  uint64_t v6 = 0;
  LODWORD(v4) = 4;
  HIDWORD(v4) = v2;
  physx::Sq::AABBTree::build(*((_DWORD **)this + 31), (uint64_t)&v4);
  uint64_t result = physx::Sq::AABBTreeUpdateMap::initMap((physx::Sq::ExtendedBucketPruner *)((char *)this + 256), *((_DWORD *)this + 76), *((const physx::Sq::AABBTree **)this + 31));
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (v6) {
    return (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::updateObject(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  if (!*(_DWORD *)(a1 + 244)
    || (uint64_t v5 = a3[1],
        unint64_t v6 = ~(*a3 << 32) + *a3 + (v5 << 32),
        unint64_t v7 = 9
           * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8)),
        unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27),
        uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 216)
                             + 4 * ((*(_DWORD *)(a1 + 228) - 1) & ((v8 >> 31) ^ v8))),
        v9 == -1))
  {
LABEL_8:
    uint64_t v12 = (int32x2_t *)(a1 + 8);
    return physx::Sq::IncrementalAABBPrunerCore::updateObject(v12, a4);
  }
  else
  {
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 200) + 32 * v9;
      if (*(void *)v10 == *a3 && *(void *)(v10 + 8) == v5) {
        break;
      }
      uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 208) + 4 * v9);
      if (v9 == -1) {
        goto LABEL_8;
      }
    }
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(*(void *)(a1 + 296) + 16 * *(unsigned int *)(v10 + 24)), *(_DWORD *)(v10 + 20));
    uint64_t v14 = *(unsigned int *)(v10 + 24);
    if (*(_DWORD *)(a1 + 264) <= v14) {
      unsigned int v15 = -1;
    }
    else {
      unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 256) + 4 * v14);
    }
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(a1 + 248), v15);
    *(unsigned char *)(a1 + 312) = 1;
    return 1;
  }
}

void physx::Sq::ExtendedBucketPruner::refitMarkedNodes(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 312)) {
    return;
  }
  int v3 = *(_DWORD *)(a1 + 304);
  if (!v3)
  {
    uint64_t v22 = *(void *)(a1 + 288);
    goto LABEL_77;
  }
  int v5 = 0;
  unsigned int v6 = v3 - 1;
  do
  {
    uint64_t v7 = v6;
    unint64_t v8 = *(uint64_t **)(*(void *)(a1 + 296) + 16 * v6);
    physx::Sq::AABBTree::refitMarkedNodes(v8, a2);
    uint64_t v9 = (float *)v8[2];
    float v10 = *v9;
    if ((~*(_DWORD *)v9 & 0x7F800000) == 0)
    {
      float v11 = v9[1];
      goto LABEL_36;
    }
    float v11 = v9[1];
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      float v12 = v9[2];
      if ((~LODWORD(v12) & 0x7F800000) != 0)
      {
        float v13 = v9[3];
        if ((~LODWORD(v13) & 0x7F800000) != 0)
        {
          float v14 = v9[4];
          if ((~LODWORD(v14) & 0x7F800000) != 0)
          {
            float v15 = v9[5];
            if ((~LODWORD(v15) & 0x7F800000) != 0)
            {
              if (v10 <= v13 && v11 <= v14 && v12 <= v15) {
                goto LABEL_35;
              }
              if (v10 == 8.5071e37 && v11 == 8.5071e37)
              {
                if (v12 != 8.5071e37 || v13 != -8.5071e37 || v14 != -8.5071e37 || v15 != -8.5071e37)
                {
                  float v11 = 8.5071e37;
                  goto LABEL_36;
                }
LABEL_35:
                ++v5;
              }
            }
          }
        }
      }
    }
LABEL_36:
    uint64_t v22 = *(void *)(a1 + 288);
    uint64_t v23 = v22 + 24 * v6;
    *(float *)uint64_t v23 = v10;
    *(float *)(v23 + 4) = v11;
    *(void *)(v23 + 8) = *((void *)v9 + 1);
    *(void *)(v23 + 16) = *((void *)v9 + 2);
    --v6;
  }
  while (v7);
  uint64_t v24 = *(unsigned int *)(a1 + 304);
  if (v5 == v24)
  {
LABEL_77:
    physx::Sq::AABBTree::refitMarkedNodes(*(uint64_t **)(a1 + 248), v22);
    goto LABEL_88;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, (4 * v24) | 1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqExtendedBucketPruner.cpp", 300);
  if (*(_DWORD *)(a1 + 304))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    unsigned int v29 = 0;
    uint64_t v30 = *(void *)(a1 + 296);
    do
    {
      uint64_t v31 = *(physx::Sq::AABBTree **)(v30 + v27);
      unsigned int v32 = (float *)*((void *)v31 + 2);
      float v33 = *v32;
      if ((~*(_DWORD *)v32 & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      float v34 = v32[1];
      if ((~LODWORD(v34) & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      float v35 = v32[2];
      if ((~LODWORD(v35) & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      float v36 = v32[3];
      if ((~LODWORD(v36) & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      float v37 = v32[4];
      if ((~LODWORD(v37) & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      float v38 = v32[5];
      if ((~LODWORD(v38) & 0x7F800000) == 0) {
        goto LABEL_70;
      }
      BOOL v39 = v33 > v36 || v34 > v37;
      BOOL v40 = v39 || v35 > v38;
      if (!v40
        || (v33 == 8.5071e37 ? (BOOL v41 = v34 == 8.5071e37) : (BOOL v41 = 0),
            v41 ? (BOOL v42 = v35 == 8.5071e37) : (BOOL v42 = 0),
            v42 ? (BOOL v43 = v36 == -8.5071e37) : (BOOL v43 = 0),
            v43 ? (BOOL v44 = v37 == -8.5071e37) : (BOOL v44 = 0),
            v44 ? (BOOL v45 = v38 == -8.5071e37) : (BOOL v45 = 0),
            v45))
      {
        if (v28 != v29)
        {
          uint64_t v46 = *(void *)(v30 + 16 * v29);
          *(_OWORD *)(v30 + 16 * v29) = *(_OWORD *)(v30 + v27);
          uint64_t v47 = *(void *)(a1 + 288);
          uint64_t v30 = *(void *)(a1 + 296);
          *(void *)(v30 + v27) = v46;
          uint64_t v48 = v47 + v26;
          uint64_t v49 = v47 + 24 * v29;
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v48;
          *(void *)(v49 + 16) = *(void *)(v48 + 16);
        }
        *(_DWORD *)(v25 + 4 * v28) = v29++;
      }
      else
      {
LABEL_70:
        physx::Sq::AABBTree::release(v31, 1);
        uint64_t v30 = *(void *)(a1 + 296);
        *(void *)(v30 + v27 + 8) = 0;
      }
      *(_DWORD *)(v25 + 4 * *(unsigned int *)(a1 + 304)) = v28++;
      v27 += 16;
      v26 += 24;
    }
    while (v28 < *(unsigned int *)(a1 + 304));
  }
  *(_DWORD *)(a1 + 304) = v5;
  if (v5)
  {
    physx::Sq::ExtendedBucketPruner::buildMainAABBTree((physx::Sq::ExtendedBucketPruner *)a1);
    if (*(_DWORD *)(a1 + 224))
    {
      uint64_t v50 = *(unsigned int **)(a1 + 216);
      uint64_t v51 = *v50;
      if (v51 == -1)
      {
        uint64_t v52 = 0;
        while (*(_DWORD *)(a1 + 228) - 1 != v52)
        {
          uint64_t v51 = v50[++v52];
          if (v51 != -1) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        LODWORD(v52) = 0;
LABEL_91:
        uint64_t v53 = *(void *)(a1 + 200);
        uint64_t v54 = *(void *)(a1 + 208);
        do
        {
LABEL_92:
          *(_DWORD *)(v53 + 32 * v51 + 24) = *(_DWORD *)(v25 + 4 * *(unsigned int *)(v53 + 32 * v51 + 24));
          uint64_t v51 = *(unsigned int *)(v54 + 4 * v51);
        }
        while (v51 != -1);
        while (*(_DWORD *)(a1 + 228) - 1 != v52)
        {
          LODWORD(v52) = v52 + 1;
          uint64_t v51 = v50[v52];
          if (v51 != -1) {
            goto LABEL_92;
          }
        }
      }
    }
  }
  else
  {
    physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(a1 + 248), 1);
  }
  if (v25) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25);
  }
LABEL_88:
  *(unsigned char *)(a1 + 312) = 0;
}

uint64_t physx::Sq::ExtendedBucketPruner::removeObject(uint64_t a1, uint64_t *a2, int a3, void *a4, int a5, unsigned int *a6)
{
  v13[0] = 0;
  v13[1] = 0;
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  if (physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 192, a2, (uint64_t)v13))
  {
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(*(void *)(a1 + 296) + 16 * v15), HIDWORD(v14));
    if (*(_DWORD *)(a1 + 264) <= v15) {
      unsigned int v11 = -1;
    }
    else {
      unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 256) + 4 * v15);
    }
    physx::Sq::AABBTree::markNodeForRefit(*(physx::Sq::AABBTree **)(a1 + 248), v11);
    physx::Sq::ExtendedBucketPruner::invalidateObject((int32x2_t *)a1, (uint64_t)&v14, a3, a4, a5);
    uint64_t result = 1;
    *(unsigned char *)(a1 + 312) = 1;
  }
  else
  {
    physx::Sq::ExtendedBucketPruner::swapIndex((int32x2_t *)a1, a3, a4, a5, 0);
    return physx::Sq::IncrementalAABBPrunerCore::removeObject((int32x2_t *)(a1 + 8), a3, a5, a6);
  }
  return result;
}

int32x2_t *physx::Sq::ExtendedBucketPruner::swapIndex(int32x2_t *result, int a2, void *a3, int a4, int a5)
{
  if (a2 != a4)
  {
    if (!result[30].i32[1]
      || (uint64_t v5 = a3[1],
          unint64_t v6 = ~(*a3 << 32) + *a3 + (v5 << 32),
          unint64_t v7 = 9
             * (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) ^ (((v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13)) >> 8)),
          unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27),
          uint64_t v9 = *(unsigned int *)(*(void *)&result[27]
                               + 4 * ((result[28].i32[1] - 1) & ((v8 >> 31) ^ v8))),
          v9 == -1))
    {
LABEL_9:
      if (a5) {
        return (int32x2_t *)physx::Sq::IncrementalAABBPrunerCore::swapIndex(result + 1, a2, a4);
      }
    }
    else
    {
      while (1)
      {
        uint64_t v10 = *(void *)&result[25] + 32 * v9;
        if (*(void *)v10 == *a3 && *(void *)(v10 + 8) == v5) {
          break;
        }
        uint64_t v9 = *(unsigned int *)(*(void *)&result[26] + 4 * v9);
        if (v9 == -1) {
          goto LABEL_9;
        }
      }
      float v12 = *(void **)(*(void *)&result[37] + 16 * *(unsigned int *)(v10 + 24));
      unint64_t v13 = *(unsigned int *)(v12[2] + 28 * *(unsigned int *)(v10 + 20) + 24);
      uint64_t v14 = (v13 >> 1) & 0xF;
      if (v14)
      {
        for (uint64_t i = (int *)(*v12 + ((v13 >> 3) & 0x1FFFFFFC)); *i != a4; ++i)
        {
          if (!--v14) {
            return result;
          }
        }
        *uint64_t i = a2;
      }
    }
  }
  return result;
}

int32x2_t *physx::Sq::ExtendedBucketPruner::invalidateObject(int32x2_t *a1, uint64_t a2, int a3, void *a4, int a5)
{
  uint64_t v5 = *(void **)(*(void *)&a1[37] + 16 * *(unsigned int *)(a2 + 8));
  uint64_t v6 = v5[2] + 28 * *(unsigned int *)(a2 + 4);
  unsigned int v9 = *(_DWORD *)(v6 + 24);
  unint64_t v7 = (_DWORD *)(v6 + 24);
  unint64_t v8 = v9;
  unint64_t v10 = ((unint64_t)v9 >> 1) & 0xF;
  if (v10)
  {
    uint64_t v11 = *v5 + ((v8 >> 3) & 0x1FFFFFFC);
    float v12 = (_DWORD *)v11;
    unint64_t v13 = v10;
    while (*v12 != a3)
    {
      ++v12;
      if (!--v13) {
        return physx::Sq::ExtendedBucketPruner::swapIndex(a1, a3, a4, a5, 1);
      }
    }
    unsigned int v14 = v10 - 1;
    *unint64_t v7 = v8 & 0xFFFFFFE1 | (2 * v14);
    *float v12 = -1;
    if (v13 != 1)
    {
      *float v12 = *(_DWORD *)(v11 + 4 * v14);
      *(_DWORD *)(v11 + 4 * v14) = -1;
    }
  }
  return physx::Sq::ExtendedBucketPruner::swapIndex(a1, a3, a4, a5, 1);
}

uint64_t physx::Sq::ExtendedBucketPruner::removeMarkedObjects(physx::Sq::ExtendedBucketPruner *this, int a2)
{
  uint64_t v4 = physx::Sq::IncrementalAABBPrunerCore::removeMarkedObjects((physx::Sq::ExtendedBucketPruner *)((char *)this + 8));
  unint64_t v5 = *((unsigned int *)this + 76);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 37);
    if (*(void *)(v6 + 16 * (v5 - 1) + 8) == a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      int v9 = *((_DWORD *)this + 61);
      do
      {
        physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(v6 + v7), 1);
        uint64_t v6 = *((void *)this + 37);
        *(void *)(v6 + v7 + 8) = 0;
        ++v8;
        v7 += 16;
      }
      while (v8 < *((unsigned int *)this + 76));
      uint64_t v4 = (v9 + v4);
      physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 192);
      *((_DWORD *)this + 76) = 0;
      physx::Sq::AABBTree::release(*((physx::Sq::AABBTree **)this + 31), 1);
      return v4;
    }
    if (*(void *)(v6 + 8) == a2)
    {
      uint64_t v10 = 0;
      int v11 = -1;
      while (16 * v5 - 16 != v10)
      {
        uint64_t v12 = *(void *)(v6 + v10 + 24);
        ++v11;
        v10 += 16;
        if (v12 != a2) {
          goto LABEL_12;
        }
      }
      int v11 = v5 - 1;
LABEL_12:
      if (v11 != -1)
      {
        unsigned int v13 = v11;
        int v14 = v11 + 1;
        LODWORD(v5) = v5 - (v11 + 1);
        *((_DWORD *)this + 76) = v5;
        if (!v5) {
          goto LABEL_17;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          unsigned int v18 = v13 + v17 + 1;
          float32x2_t v19 = (uint64_t *)(v6 + 16 * v18);
          uint64_t v21 = *v19;
          uint64_t v20 = v19[1];
          uint64_t v22 = *(void **)(v21 + 16);
          uint64_t v23 = (void *)(*((void *)this + 36) + v15);
          *uint64_t v23 = *v22;
          v23[1] = v22[1];
          v23[2] = v22[2];
          uint64_t v24 = v6 + v16;
          *(void *)(v24 + 8) = v20;
          uint64_t v25 = *(physx::Sq::AABBTree **)v24;
          physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)v24, 1);
          uint64_t v6 = *((void *)this + 37);
          uint64_t v26 = (physx::Sq::AABBTree **)(v6 + 16 * v18);
          *(void *)(v6 + v16) = *v26;
          *uint64_t v26 = v25;
          v26[1] = 0;
          ++v17;
          unint64_t v5 = *((unsigned int *)this + 76);
          v16 += 16;
          v15 += 24;
        }
        while (v17 < v5);
        if (v5 <= v13)
        {
LABEL_17:
          int v27 = v13 - v5 + 1;
          uint64_t v28 = 16 * v5;
          do
          {
            physx::Sq::AABBTree::release(*(physx::Sq::AABBTree **)(v6 + v28), 1);
            uint64_t v6 = *((void *)this + 37);
            *(void *)(v6 + v28 + 8) = 0;
            v28 += 16;
            --v27;
          }
          while (v27);
        }
        physx::Sq::ExtendedBucketPruner::buildMainAABBTree(this);
        uint64_t v29 = *((unsigned int *)this + 57);
        if (v29)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (_DWORD *)*((void *)this + 27);
          uint64_t i = v31;
          while (1)
          {
            uint64_t v33 = *i;
            if (v33 != -1) {
              break;
            }
            ++v30;
            ++i;
            if (v29 == v30) {
              goto LABEL_47;
            }
          }
          uint64_t v34 = *((void *)this + 25);
          if (v34)
          {
            LODWORD(v29) = 0;
            unsigned int v35 = v30 + 1;
            uint64_t v36 = v34 + 32 * v33;
            while (*(_DWORD *)(v36 + 16) != a2)
            {
              *(_DWORD *)(v36 + 24) -= v14;
              uint64_t i = (_DWORD *)(*((void *)this + 26) + 4 * *i);
              LODWORD(v33) = *i;
              if (*i == -1)
              {
                unsigned int v50 = *((_DWORD *)this + 57);
                if (v35 >= v50) {
                  return (v29 + v4);
                }
                for (uint64_t i = &v31[v35]; ; ++i)
                {
                  LODWORD(v33) = *i;
                  if (*i != -1) {
                    break;
                  }
                  if (v50 == ++v35) {
                    return (v29 + v4);
                  }
                }
LABEL_44:
                ++v35;
              }
LABEL_45:
              uint64_t v36 = v34 + 32 * v33;
              if (!v34) {
                return (v29 + v4);
              }
            }
            *uint64_t i = *(_DWORD *)(*((void *)this + 26) + 4 * v33);
            uint64_t v37 = (*((_DWORD *)this + 61) - 1);
            ++*((_DWORD *)this + 60);
            *((_DWORD *)this + 61) = v37;
            if (v33 != v37)
            {
              uint64_t v38 = v34 + 32 * v33;
              uint64_t v39 = v34 + 32 * v37;
              *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
              int v40 = *(_DWORD *)(v39 + 24);
              *(void *)(v38 + 16) = *(void *)(v39 + 16);
              *(_DWORD *)(v38 + 24) = v40;
              uint64_t v34 = *((void *)this + 25);
              uint64_t v41 = *((void *)this + 26);
              *(_DWORD *)(v41 + 4 * v33) = *(_DWORD *)(v41 + 4 * *((unsigned int *)this + 61));
              unint64_t v42 = ~(*(void *)(v34 + 32 * v33) << 32)
                  + *(void *)(v34 + 32 * v33)
                  + (*(void *)(v34 + 32 * v33 + 8) << 32);
              unint64_t v43 = (v42 ^ (v42 >> 22)) + ~((v42 ^ (v42 >> 22)) << 13);
              unint64_t v44 = (9 * (v43 ^ (v43 >> 8))) ^ ((9 * (v43 ^ (v43 >> 8))) >> 15);
              LODWORD(v38) = (*((_DWORD *)this + 57) - 1) & (((v44 + ~(v44 << 27)) >> 31) ^ (v44 + ~(v44 << 27)));
              uint64_t v31 = (_DWORD *)*((void *)this + 27);
              BOOL v45 = &v31[v38];
              uint64_t v46 = *((unsigned int *)this + 61);
              uint64_t v47 = *v45;
              if (v47 != v46)
              {
                do
                {
                  uint64_t v48 = v47;
                  uint64_t v47 = *(unsigned int *)(v41 + 4 * v47);
                }
                while (v47 != v46);
                BOOL v45 = (_DWORD *)(v41 + 4 * v48);
              }
              *BOOL v45 = v33;
            }
            LODWORD(v29) = v29 + 1;
            --*((_DWORD *)this + 59);
            LODWORD(v33) = *i;
            if (*i != -1) {
              goto LABEL_45;
            }
            unsigned int v49 = *((_DWORD *)this + 57);
            if (v35 >= v49) {
              return (v29 + v4);
            }
            for (uint64_t i = &v31[v35]; ; ++i)
            {
              LODWORD(v33) = *i;
              if (*i != -1) {
                break;
              }
              if (v49 == ++v35) {
                return (v29 + v4);
              }
            }
            goto LABEL_44;
          }
LABEL_47:
          LODWORD(v29) = 0;
        }
        return (v29 + v4);
      }
    }
  }
  return v4;
}

void physx::Sq::ExtendedBucketPruner::shiftOrigin(uint64_t a1, float32x2_t *a2)
{
  physx::Sq::AABBTree::shiftOrigin(*(void *)(a1 + 248), a2);
  if (*(_DWORD *)(a1 + 304))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      physx::Sq::AABBTree::shiftOrigin(*(void *)(*(void *)(a1 + 296) + v4), a2);
      ++v5;
      v4 += 16;
    }
    while (v5 < *(unsigned int *)(a1 + 304));
  }
  physx::Sq::IncrementalAABBPrunerCore::shiftOrigin(a1 + 8, (float32x4_t *)a2);
}

uint64_t physx::Sq::ExtendedBucketPruner::raycast(uint64_t a1, unsigned int (**a2)(void, float *, uint64_t), unsigned int (**a3)(void, float *, uint64_t), float *a4, unsigned int (**a5)(void, float *, uint64_t))
{
  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (uint64_t result = physx::Sq::IncrementalAABBPrunerCore::raycast(a1 + 8, (float32x2_t *)a2, (float32x2_t *)a3, a4, (unsigned int (***)(void, float *, uint64_t))a5), result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      int v15 = 0;
      int v11 = *(unsigned int (***)(void, float *, uint64_t))(a1 + 184);
      v13[0] = (unsigned int (**)(void, float *, uint64_t))&unk_26E728278;
      v13[1] = a2;
      void v13[2] = a3;
      v13[3] = (unsigned int (**)(void, float *, uint64_t))&v14;
      v13[4] = a5;
      v13[5] = v11;
      uint64_t v14 = 0;
      return physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v12, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), (float32x2_t *)a2, (float32x2_t *)a3, a4, (uint64_t)&v14, v13);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::overlap(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, int *, uint64_t), double a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (uint64_t result = physx::Sq::IncrementalAABBPrunerCore::overlap(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10),
        result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      uint64_t result = 1;
      switch(*(_WORD *)(a2 + 98))
      {
        case 0:
          float32x4_t v14 = *(float32x4_t *)(a2 + 100);
          v14.i64[1] = *(unsigned int *)(a2 + 108);
          float v15 = *(float *)(a2 + 112);
          float32x4_t v47 = v14;
          v14.f32[0] = v15 * v15;
          *(int32x2_t *)v48.i8 = vdup_lane_s32(*(int32x2_t *)v14.f32, 0);
          uint64_t v16 = *(void *)(a1 + 184);
          unint64_t v43 = (uint64_t (**)(void, int *, uint64_t))&unk_26E728388;
          unint64_t v44 = &v47;
          BOOL v45 = a3;
          uint64_t v46 = v16;
          uint64_t result = physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), (uint64_t)&v47, &v43);
          break;
        case 2:
          float v17 = *(float *)(a2 + 60) + *(float *)(a2 + 60);
          float v18 = *(float *)(a2 + 120);
          v22.i64[0] = *(void *)(a2 + 112);
          float32x2_t v19 = *(float32x2_t *)(a2 + 12);
          double v20 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v22.f32, vmul_n_f32(v19, v17)));
          double v21 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v19), *(int8x8_t *)v22.f32, vbsl_s8((int8x8_t)vcgez_f32(v19), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
          v22.i64[1] = LODWORD(v18);
          float v23 = *(float *)(a2 + 20);
          *(float32x2_t *)v24.i8 = v19;
          v24.i64[1] = LODWORD(v23);
          *(int8x8_t *)&long long v25 = vext_s8((int8x8_t)v19, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), 4uLL);
          *(float *)&a6 = *(float *)(a2 + 124) * 1.01;
          *((void *)&v25 + 1) = v19.u32[0];
          int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          float32x4_t v47 = v22;
          int8x16_t v48 = v24;
          v26.i32[3] = 0;
          int32x4_t v50 = v26;
          int8x16_t v51 = (int8x16_t)vabsq_f32((float32x4_t)v24);
          *(int8x8_t *)v24.i8 = vext_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), 4uLL);
          v24.i64[1] = v51.u32[0];
          long long v49 = v25;
          int8x16_t v52 = v24;
          float v27 = v18 + (float)(v17 * v23);
          float v28 = -3.4028e38;
          if (v23 >= 0.0) {
            float v28 = 3.4028e38;
          }
          if (v23 != 0.0) {
            float v18 = v28;
          }
          BOOL v29 = v17 < 3.4028e38;
          if (v17 >= 3.4028e38) {
            float v30 = v18;
          }
          else {
            float v30 = v27;
          }
          if (v29) {
            *(double *)v31.i64 = v20;
          }
          else {
            *(double *)v31.i64 = v21;
          }
          v31.i64[1] = LODWORD(v30);
          float32x4_t v53 = vminq_f32(v22, v31);
          float32x4_t v54 = vmaxq_f32(v22, v31);
          uint64_t v32 = *(void *)(a1 + 184);
          unint64_t v43 = (uint64_t (**)(void, int *, uint64_t))&unk_26E728348;
          unint64_t v44 = &v47;
          BOOL v45 = a3;
          uint64_t v46 = v32;
          uint64_t result = physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), &v47, &v43);
          break;
        case 3:
          if (*(_WORD *)(a2 + 96)) {
            goto LABEL_19;
          }
          float v34 = *(float *)(a2 + 80);
          float v35 = *(float *)(a2 + 92);
          float32x2_t v36 = *(float32x2_t *)(a2 + 72);
          float32x2_t v37 = *(float32x2_t *)(a2 + 84);
          *(float32x2_t *)v38.f32 = vmul_f32(vadd_f32(v36, v37), (float32x2_t)0x3F0000003F000000);
          v38.f32[2] = (float)(v34 + v35) * 0.5;
          v38.i32[3] = 0;
          float v39 = v35 - v34;
          *(float32x2_t *)v40.i8 = vmul_f32(vsub_f32(v37, v36), (float32x2_t)0x3F0000003F000000);
          v40.i64[1] = COERCE_UNSIGNED_INT(v39 * 0.5);
          float32x4_t v47 = v38;
          int8x16_t v48 = v40;
          uint64_t v41 = *(void *)(a1 + 184);
          unint64_t v43 = (uint64_t (**)(void, int *, uint64_t))&unk_26E728308;
          unint64_t v44 = &v47;
          BOOL v45 = a3;
          uint64_t v46 = v41;
          uint64_t result = physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), &v47, &v43);
          break;
        case 4:
LABEL_19:
          physx::Gu::OBBAABBTests<true>::OBBAABBTests((uint64_t)&v47, a2 + 48, (__int32 *)(a2 + 12), a2, a4, a5, a6, a7, a8, a9, a10);
          uint64_t v33 = *(void *)(a1 + 184);
          unint64_t v43 = (uint64_t (**)(void, int *, uint64_t))&unk_26E7282C8;
          unint64_t v44 = &v47;
          BOOL v45 = a3;
          uint64_t v46 = v33;
          uint64_t result = physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v42, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), &v47, (unsigned int (***)(void, int *, uint64_t))&v43);
          break;
        default:
          return result;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::sweep(uint64_t a1, float *a2, unsigned int (**a3)(void, float *, uint64_t), float *a4, unsigned int (**a5)(void, float *, uint64_t))
{
  if (!(*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 156))
    || (uint64_t result = physx::Sq::IncrementalAABBPrunerCore::sweep(a1 + 8, a2, (float32x2_t *)a3, a4, (unsigned int (***)(void, float *, uint64_t))a5), result))
  {
    if (*(_DWORD *)(a1 + 244))
    {
      float v11 = a2[18];
      float v12 = a2[19];
      float v14 = a2[20];
      float v13 = a2[21];
      float v15 = a2[22];
      float v16 = a2[23];
      v22.f32[0] = (float)(v13 - v11) * 0.5;
      v22.f32[1] = (float)(v15 - v12) * 0.5;
      float v23 = (float)(v16 - v14) * 0.5;
      v20.f32[0] = (float)(v13 + v11) * 0.5;
      v20.f32[1] = (float)(v15 + v12) * 0.5;
      float v21 = (float)(v16 + v14) * 0.5;
      float v17 = *(unsigned int (***)(void, float *, uint64_t))(a1 + 184);
      v19[0] = (unsigned int (**)(void, float *, uint64_t))&unk_26E7283C8;
      v19[1] = (unsigned int (**)(void, float *, uint64_t))&v20;
      v19[2] = a3;
      v19[3] = (unsigned int (**)(void, float *, uint64_t))&v22;
      v19[4] = a5;
      void v19[5] = v17;
      return physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v18, *(void *)(a1 + 296), *(void *)(a1 + 288), *(void **)(a1 + 248), &v20, (float32x2_t *)a3, a4, &v22, v19);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t physx::Sq::ExtendedBucketPruner::visualize(uint64_t a1, _DWORD *a2, int a3)
{
  visualizeTree((uint64_t)a2, a3, *(void *)(a1 + 248));
  if (*(_DWORD *)(a1 + 304))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      visualizeTree((uint64_t)a2, a3, *(void *)(*(void *)(a1 + 296) + v6));
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned int *)(a1 + 304));
  }
  return physx::Sq::IncrementalAABBPrunerCore::visualize(a1 + 8, a2, a3);
}

uint64_t visualizeTree(uint64_t result, int a2, uint64_t a3)
{
  if (a3)
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v4 = (_DWORD *)result;
      long long v5 = xmmword_23435FBB0;
      uint64_t v6 = 0;
      int v7 = 0;
      *(_DWORD *)(physx::Cm::RenderOutput::operator<<(result, (uint64_t)&v5) + 4) = a2;
      return physx::Sq::AABBPruner::visualize(physx::Cm::RenderOutput &,unsigned int)const::Local::_Draw(*(void *)(a3 + 16), *(long long **)(a3 + 16), v4);
    }
  }
  return result;
}

void physx::Sq::PruningPool::~PruningPool(physx::Sq::PruningPool *this)
{
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 1) = 0;
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2) = 0;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
}

uint64_t physx::Sq::PruningPool::resize(physx::Sq::PruningPool *this, unsigned int a2)
{
  if (a2 == -1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0xFFFFFFFFLL;
LABEL_5:
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 62);
    uint64_t v7 = 4 * v5;
    unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 63);
    int v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 64);
    goto LABEL_7;
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningPool.cpp", 61);
  if (a2)
  {
    uint64_t v5 = a2;
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  unint64_t v8 = 0;
  int v9 = 0;
LABEL_7:
  if (v4) {
    BOOL v10 = v6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v12 = v10 || v8 == 0 || v9 == 0;
  int v13 = v12;
  if (v12)
  {
    if (v4) {
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    }
    if (v6) {
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    }
    if (v8) {
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    }
    if (v9) {
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
    }
  }
  else
  {
    float v14 = (const void *)*((void *)this + 1);
    if (v14) {
      memcpy(v4, v14, (24 * *(_DWORD *)this));
    }
    float v15 = (const void *)*((void *)this + 2);
    if (v15) {
      memcpy(v6, v15, (16 * *(_DWORD *)this));
    }
    float v16 = (const void *)*((void *)this + 4);
    if (v16) {
      memcpy(v8, v16, (4 * *(_DWORD *)this));
    }
    float v17 = (const void *)*((void *)this + 3);
    if (v17) {
      memcpy(v9, v17, (4 * *((_DWORD *)this + 1)));
    }
    *((_DWORD *)this + 1) = a2;
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 1) = 0;
    if (*((void *)this + 2)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 2) = 0;
    if (*((void *)this + 3)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 3) = 0;
    if (*((void *)this + 4)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 1) = v4;
    *((void *)this + 2) = v6;
    *((void *)this + 3) = v9;
    *((void *)this + 4) = v8;
  }
  return v13 ^ 1u;
}

float32_t physx::Sq::PruningPool::shiftOrigin(unsigned int *a1, float32x2_t *a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    int v3 = (float32x2_t *)(*((void *)a1 + 1) + 12);
    do
    {
      *(float32x2_t *)((char *)v3 - 12) = vsub_f32(*(float32x2_t *)((char *)v3 - 12), *a2);
      v3[-1].f32[1] = v3[-1].f32[1] - a2[1].f32[0];
      *int v3 = vsub_f32(*v3, *a2);
      float32_t result = v3[1].f32[0] - a2[1].f32[0];
      v3[1].f32[0] = result;
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void physx::Sq::PruningStructure::~PruningStructure(physx::Sq::PruningStructure *this)
{
  *(void *)this = &unk_26E728150;
  if (*((_WORD *)this + 5))
  {
    uint64_t v2 = 0;
    char v3 = 1;
    do
    {
      char v4 = v3;
      uint64_t v5 = (char *)this + 8 * v2;
      if (*((void *)v5 + 6)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      if (*((void *)v5 + 3)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      char v3 = 0;
      uint64_t v2 = 1;
    }
    while ((v4 & 1) != 0);
    if (*((void *)this + 9)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sq::PruningStructure::~PruningStructure(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Sq::PruningStructure::release(physx::Sq::PruningStructure *this)
{
  uint64_t v1 = *((unsigned int *)this + 16);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 9);
    do
    {
      int v3 = *(unsigned __int16 *)(*(void *)v2 + 8);
      if (v3 == 5 || v3 == 6) {
        *(void *)(*(void *)v2 + 8physx::Sq::AABBTree::release(this, 0) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
  }
  uint64_t v4 = *(void *)this;
  if (*((_WORD *)this + 5)) {
    return (*(uint64_t (**)(void))(v4 + 32))();
  }
  else {
    return (*(uint64_t (**)(void))(v4 + 24))();
  }
}

uint64_t physx::Sq::PruningStructure::build(physx::Sq::PruningStructure *this, physx::PxRigidActor *const *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  v109[1] = *MEMORY[0x263EF8340];
  v109[0] = 0;
  if (!a3)
  {
    int v12 = 0;
LABEL_29:
    uint64_t v34 = 0;
    char v35 = 1;
    LODWORD(v109[0]) = v12;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    do
    {
      char v36 = v35;
      int v37 = *((_DWORD *)v109 + v34);
      if (v37)
      {
        _CF = __CFADD__(v37, 1);
        unsigned int v38 = v37 + 1;
        if (_CF) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
        }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v38, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 227);
        *(&v107 + v34) = v39;
      }
      char v35 = 0;
      uint64_t v34 = 1;
    }
    while ((v36 & 1) != 0);
    v109[0] = 0;
    if (v8)
    {
      uint64_t v40 = 0;
      uint64_t v41 = (void (*)(float32x2_t *, uint64_t, int32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))physx::Sq::gComputeBoundsTable[0];
      char v42 = (void (*)(float32x2_t *, float32x2_t *, uint64_t, float32x4_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_26E728070;
      do
      {
        unint64_t v43 = (int32x4_t *)a2[v40];
        int v44 = v43->u16[4];
        if (v44 == 5)
        {
          uint64_t v58 = v108;
          unsigned int v59 = HIDWORD(v109[0]);
          unsigned int v60 = (*(uint64_t (**)(physx::PxRigidActor *const))(v43->i64[0] + 184))(a2[v40]);
          if (v60)
          {
            uint64_t v61 = 0;
            float32x4_t v62 = (float32x2_t *)(v58 + 24 * v59);
            uint64_t v63 = 8 * v60;
            do
            {
              float32x4_t v64 = &v43[2].i8[8];
              if (v43[3].i16[0] != 1) {
                float32x4_t v64 = (__int8 *)v43[2].i64[1];
              }
              float32x4_t v65 = *(float32x2_t **)&v64[v61];
              (*(void (**)(void *__return_ptr, float32x2_t *))(*(void *)v65 + 312))(v106, v65);
              if ((v106[0] & 2) != 0)
              {
                v42(v62, v65 + 6, (uint64_t)v43[6].i64, v71, v66, v67, v68, v69, v70);
                v62 += 3;
                ++HIDWORD(v109[0]);
              }
              v61 += 8;
            }
            while (v63 != v61);
          }
        }
        else if (v44 == 6)
        {
          uint64_t v45 = v107;
          unsigned int v46 = v109[0];
          unsigned int v47 = (*(uint64_t (**)(physx::PxRigidActor *const))(v43->i64[0] + 184))(a2[v40]);
          if (v47)
          {
            uint64_t v48 = 0;
            long long v49 = (float32x2_t *)(v45 + 24 * v46);
            uint64_t v50 = 8 * v47;
            do
            {
              int8x16_t v51 = &v43[2].i8[8];
              if (v43[3].i16[0] != 1) {
                int8x16_t v51 = (__int8 *)v43[2].i64[1];
              }
              uint64_t v52 = *(void *)&v51[v48];
              (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v52 + 312))(v106, v52);
              if ((v106[0] & 2) != 0)
              {
                v41(v49, v52 + 48, v43 + 6, v53, v54, v55, v56, v57);
                v49 += 3;
                ++LODWORD(v109[0]);
              }
              v48 += 8;
            }
            while (v50 != v48);
          }
        }
        ++v40;
      }
      while (v40 != a3);
    }
    for (uint64_t i = 0; i != 26; i += 13)
    {
      float32x4_t v73 = &v106[i];
      *float32x4_t v73 = 0;
      *((_DWORD *)v73 + 2) = 0;
      *((_DWORD *)v73 + 24) = 0;
      *((_OWORD *)v73 + 1) = 0uLL;
      *((_OWORD *)v73 + 2) = 0uLL;
      *((_OWORD *)v73 + 3) = 0uLL;
      *((_OWORD *)v73 + 4) = 0uLL;
      *(_OWORD *)((char *)v73 + 76) = 0uLL;
    }
    uint64_t v74 = 0;
    char v75 = 1;
    int8x16_t v76 = this;
    do
    {
      char v77 = v75;
      int v78 = *((_DWORD *)v109 + v74);
      char v79 = (char *)v76 + 4 * v74;
      *((_DWORD *)v79 + 1physx::Sq::AABBTree::release(this, 0) = v78;
      float v80 = v79 + 40;
      if (v78)
      {
        uint64_t v81 = *(&v107 + v74);
        uint64_t v104 = v81;
        uint64_t v105 = 0;
        HIDWORD(v103) = v78;
        LODWORD(v103) = 4;
        unsigned int v82 = (const void **)&v106[13 * v74];
        physx::Sq::AABBTree::build(v82, (uint64_t)&v103);
        uint64_t v83 = *((unsigned int *)v82 + 16);
        *((_DWORD *)v79 + 3) = v83;
        int8x8_t v84 = v79 + 12;
        if (v83)
        {
          int32x2_t v85 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v83, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 267);
          LODWORD(v83) = *v84;
        }
        else
        {
          int32x2_t v85 = 0;
        }
        unsigned int v86 = (char *)this + 8 * v74;
        *((void *)v86 + 3) = v85;
        memcpy(v85, (const void *)v106[13 * v74 + 2], (28 * v83));
        uint64_t v87 = *v80;
        if (v87)
        {
          float v88 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v87, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 269);
          LODWORD(v87) = *v80;
        }
        else
        {
          float v88 = 0;
        }
        *((void *)v86 + 6) = v88;
        memcpy(v88, *v82, (4 * v87));
        if (v81) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v81);
        }
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        if (v105) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        int8x16_t v76 = this;
      }
      char v75 = 0;
      uint64_t v74 = 1;
    }
    while ((v77 & 1) != 0);
    *((_DWORD *)v76 + 16) = a3;
    if (a3)
    {
      float32x4_t v89 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 279);
      size_t v90 = (8 * *((_DWORD *)v76 + 16));
    }
    else
    {
      size_t v90 = 0;
      float32x4_t v89 = 0;
    }
    *((void *)v76 + 9) = v89;
    memcpy(v89, a2, v90);
    for (uint64_t j = 13; j != -13; j -= 13)
      physx::Sq::AABBTree::~AABBTree((physx::Sq::AABBTree *)&v106[j]);
    char v92 = 1;
    return v92 & 1;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  BOOL v11 = 0;
  int v12 = 0;
  unint64_t v13 = a3;
  unint64_t v99 = a3;
  while (1)
  {
    char v100 = v11;
    unint64_t v14 = v9 + 1;
    if (v9 + 1 < v13)
    {
      _X8 = (unint64_t)a2[v14];
      int v16 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v16++, 1);
      }
      while (!_CF);
    }
    float v21 = (unsigned __int16 *)a2[v9];
    int v22 = v21[4];
    int v23 = *(_DWORD *)((char *)v21 + *((void *)&physx::NpActor::sLazyInitOffsets + v21[4] + 18) + 8) >> 30;
    if (v23) {
      _ZF = v23 == 3;
    }
    else {
      _ZF = 1;
    }
    if (!_ZF)
    {
      uint64_t v93 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v94 = "PrunerStructure::build: Actor already assigned to a scene!";
      uint64_t v95 = 167;
      goto LABEL_81;
    }
    int v25 = (*(uint64_t (**)(physx::PxRigidActor *const))(*(void *)v21 + 184))(a2[v9]);
    if (!v25) {
      goto LABEL_74;
    }
    int v26 = v25;
    uint64_t v27 = 0;
    char v28 = 0;
    do
    {
      v106[0] = 0;
      (*(void (**)(unsigned __int16 *, void *, uint64_t, uint64_t))(*(void *)v21 + 192))(v21, v106, 1, v27);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v106[0] + 312))(&v103);
      if ((v103 & 2) != 0)
      {
        if (v22 == 6) {
          ++v12;
        }
        else {
          ++v10;
        }
        char v28 = 1;
      }
      uint64_t v27 = (v27 + 1);
    }
    while (v26 != v27);
    if ((v28 & 1) == 0)
    {
LABEL_74:
      uint64_t v93 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v94 = "PrunerStructure::build: Provided actor has no scene query shape!";
      uint64_t v95 = 190;
      goto LABEL_81;
    }
    if (v22 == 5) {
      break;
    }
    if (v22 != 6)
    {
      uint64_t v93 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v94 = "PrunerStructure::build: Provided actor is not a rigid actor!";
      uint64_t v95 = 216;
      goto LABEL_81;
    }
    BOOL v29 = a2[v9];
    uint64_t v31 = *((void *)v29 + 10);
    float v30 = (void *)((char *)v29 + 80);
    if (v31)
    {
      uint64_t v93 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v94 = "PrunerStructure::build: Provided actor has already a pruning structure!";
      uint64_t v95 = 199;
      goto LABEL_81;
    }
LABEL_26:
    *float v30 = this;
    ++v9;
    unint64_t v13 = v99;
    BOOL v11 = v14 >= v99;
    if (v14 == v99)
    {
      HIDWORD(v109[0]) = v10;
      unsigned int v8 = a3;
      goto LABEL_29;
    }
  }
  uint64_t v32 = a2[v9];
  uint64_t v33 = *((void *)v32 + 10);
  float v30 = (void *)((char *)v32 + 80);
  if (!v33) {
    goto LABEL_26;
  }
  uint64_t v93 = physx::shdfnd::Foundation::mInstance;
  float32x4_t v94 = "PrunerStructure::build: Provided actor has already a pruning structure!";
  uint64_t v95 = 209;
LABEL_81:
  physx::shdfnd::Foundation::error(v93, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", v95, v94, a6, a7, a8, v97);
  char v92 = v100;
  return v92 & 1;
}

uint64_t physx::Sq::PruningStructure::resolveReferences(uint64_t result, uint64_t (***a2)(void, uint64_t))
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = result;
    unint64_t v3 = *(unsigned int *)(result + 64);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(v2 + 72);
        if (*(void *)(v6 + 8 * i))
        {
          float32_t result = (**a2)(a2, 0x80000000);
          *(void *)(v6 + 8 * i) = result;
          unint64_t v3 = *(unsigned int *)(v2 + 64);
        }
      }
    }
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::requiresObjects(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v2 = result;
    if (*(_DWORD *)(result + 64))
    {
      unint64_t v4 = 0;
      do
        float32_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)(v2 + 72) + 8 * v4++));
      while (v4 < *(unsigned int *)(v2 + 64));
    }
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::getRigidActors(physx::Sq::PruningStructure *this, physx::PxRigidActor **a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 80))
  {
    unsigned int v9 = (*((_DWORD *)this + 16) - a4) & ~((int)(*((_DWORD *)this + 16) - a4) >> 31);
    if (v9 >= a3) {
      uint64_t result = a3;
    }
    else {
      uint64_t result = v9;
    }
    if (result)
    {
      BOOL v11 = (physx::PxRigidActor **)(*((void *)this + 9) + 8 * a4);
      uint64_t v12 = result;
      do
      {
        unint64_t v13 = *v11++;
        *a2++ = v13;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqPruningStructure.cpp", 392, "PrunerStructure::getRigidActors: Pruning structure is invalid!", a6, a7, a8, vars0);
    return 0;
  }
  return result;
}

uint64_t physx::Sq::PruningStructure::invalidate(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 64);
  if (v2)
  {
    unint64_t v3 = *(void **)(result + 72);
    uint64_t v4 = *(unsigned int *)(result + 64);
    uint64_t v5 = v3;
    while (*v5 != a2)
    {
      ++v5;
      if (!--v4) {
        goto LABEL_10;
      }
    }
    int v6 = *(unsigned __int16 *)(a2 + 8);
    if (v6 == 5 || v6 == 6) {
      *(void *)(a2 + 8physx::Sq::AABBTree::release(this, 0) = 0;
    }
    *(_DWORD *)(result + 64) = v2 - 1;
    *uint64_t v5 = v3[v2];
  }
LABEL_10:
  *(unsigned char *)(result + 8physx::Sq::AABBTree::release(this, 0) = 0;
  return result;
}

void physx::Sq::PrunerExt::~PrunerExt(physx::Sq::PrunerExt *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 112))(v2);
  }
  *(void *)this = 0;
  int v3 = *((_DWORD *)this + 9);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((void *)this + 3) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (*((void *)this + 1) && (*((_DWORD *)this + 4) & 0x80000000) == 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *((void *)this + 1) = 0;
}

physx::Sq::AABBPruner *physx::Sq::PrunerExt::init(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = a2;
  *(_DWORD *)(a1 + 44) = 0;
  if (a2 == 2)
  {
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      BOOL v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner>::getName() [T = physx::Sq::AABBPruner]";
    }
    else {
      BOOL v29 = "<allocation names disabled>";
    }
    float v30 = (physx::Sq::AABBPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v28 + 24) + 16))(v28 + 24, 544, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 85);
    char v31 = 0;
    goto LABEL_32;
  }
  if (a2 == 1)
  {
    uint64_t v32 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v33 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::AABBPruner>::getName() [T = physx::Sq::AABBPruner]";
    }
    else {
      uint64_t v33 = "<allocation names disabled>";
    }
    float v30 = (physx::Sq::AABBPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v32 + 24) + 16))(v32 + 24, 544, v33, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 84);
    char v31 = 1;
LABEL_32:
    uint64_t result = physx::Sq::AABBPruner::AABBPruner(v30, v31, a3);
    goto LABEL_34;
  }
  if (a2)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::BucketPruner>::getName() [T = physx::Sq::BucketPruner]";
    }
    else {
      int v6 = "<allocation names disabled>";
    }
    uint64_t result = (physx::Sq::AABBPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 7888, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 83);
    uint64_t v8 = 0;
    unsigned int v9 = (char *)result + 7824;
    *(void *)uint64_t result = &unk_26E7280A0;
    *((void *)result + 97) = 0;
    *((_DWORD *)result + 196) = 0;
    *((void *)result + 99) = 0;
    *((void *)result + 101) = 0;
    *((void *)result + 10physx::Sq::AABBTree::release(this, 0) = 0;
    *((_DWORD *)result + 204) = 0;
    *((void *)result + 103) = 0;
    *((_DWORD *)result + 208) = 0;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_DWORD *)result + 16) = 0;
    int32x2_t v10 = vdup_n_s32(0xFE7FFFFF);
    do
    {
      BOOL v11 = (int32x2_t *)((char *)result + v8);
      v11[116] = 0;
      v11[117].i32[0] = 0;
      v11[118] = v10;
      v11[119].i32[0] = -25165825;
      v8 += 32;
    }
    while (v8 != 160);
    uint64_t v12 = (char *)result + 1104;
    unint64_t v13 = (char *)result + 2224;
    int32x2_t v14 = vdup_n_s32(0xFE7FFFFF);
    float v15 = result;
    do
    {
      for (uint64_t i = 0; i != 160; i += 32)
      {
        float v17 = (int32x2_t *)((char *)v15 + i);
        v17[144] = 0;
        v17[145].i32[0] = 0;
        v17[146] = v14;
        v17[147].i32[0] = -25165825;
      }
      v12 += 224;
      float v15 = (physx::Sq::AABBPruner *)((char *)v15 + 224);
    }
    while (v12 != v13);
    int32x2_t v18 = vdup_n_s32(0xFE7FFFFF);
    float32x2_t v19 = result;
    do
    {
      for (uint64_t j = 0; j != 160; j += 32)
      {
        float v21 = (int32x2_t *)((char *)v19 + j);
        v21[284] = 0;
        v21[285].i32[0] = 0;
        v21[286] = v18;
        v21[287].i32[0] = -25165825;
      }
      v13 += 224;
      float32x2_t v19 = (physx::Sq::AABBPruner *)((char *)v19 + 224);
    }
    while (v13 != v9);
    uint64_t v22 = 0;
    *(_WORD *)unsigned int v9 = 1;
    *((void *)result + 106) = 0;
    *((_DWORD *)result + 214) = 0;
    *((int32x2_t *)result + 108) = vdup_n_s32(0xFE7FFFFF);
    *((_DWORD *)result + 218) = -25165825;
    *((_OWORD *)result + 55) = 0u;
    *((_OWORD *)result + 56) = 0u;
    *((void *)result + 114) = 0;
    do
    {
      int v23 = (char *)result + v22;
      *((_DWORD *)v23 + 28physx::Sq::AABBTree::release(this, 0) = 0;
      *((_OWORD *)v23 + 69) = 0uLL;
      *((_DWORD *)v23 + 285) = 0;
      *(_OWORD *)((char *)result + v22 + 1124) = 0uLL;
      v22 += 224;
    }
    while (v22 != 1120);
    uint64_t v24 = 0;
    int v25 = result;
    do
    {
      for (uint64_t k = 0; k != 1120; k += 224)
      {
        uint64_t v27 = (char *)v25 + k;
        *((_DWORD *)v27 + 56physx::Sq::AABBTree::release(this, 0) = 0;
        *((_OWORD *)v27 + 139) = 0uLL;
        *((_DWORD *)v27 + 565) = 0;
        *(_OWORD *)((char *)v25 + k + 2244) = 0uLL;
      }
      ++v24;
      int v25 = (physx::Sq::AABBPruner *)((char *)v25 + 1120);
    }
    while (v24 != 5);
    *((void *)result + 984) = 0;
    *((_OWORD *)result + 491) = 0u;
    *((_OWORD *)result + 49physx::Sq::AABBTree::release(this, 0) = 0u;
    *((_DWORD *)result + 197physx::Sq::AABBTree::release(this, 0) = -1;
  }
LABEL_34:
  *(void *)a1 = result;
  return result;
}

uint64_t physx::Sq::PrunerExt::preallocate(physx::Sq::PrunerExt *this, unsigned int a2)
{
  if (a2 > 32 * *((_DWORD *)this + 4)) {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 8, a2);
  }
  uint64_t result = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 88);
    return v4();
  }
  return result;
}

uint64_t physx::Sq::PrunerExt::flushMemory(uint64_t this)
{
  if (!*(_DWORD *)(this + 32))
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 24;
    int v3 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(this + 24, 0, &v3);
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v2, *(_DWORD *)(v1 + 32));
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::flushShapes(uint64_t this, int a2)
{
  uint64_t v2 = *(unsigned int *)(this + 32);
  if (v2)
  {
    int v3 = (void *)this;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(this + 24);
    int v6 = physx::Sq::gComputeBoundsTable[a2];
    do
    {
      uint64_t v7 = *v3;
      *(_DWORD *)(v3[1] + (((unint64_t)*(unsigned int *)(v5 + v4) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v5 + v4));
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 80))(v7);
      ((void (*)(void, void, void))v6)(0, *v8, v8[1]);
      v4 += 4;
    }
    while (4 * v2 != v4);
    this = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, v5, v2);
    *((_DWORD *)v3 + 11) += v2;
    *((_DWORD *)v3 + 8) = 0;
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::addToDirtyList(uint64_t this, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = a2 >> 5;
  int v4 = *(_DWORD *)(v2 + 4 * v3);
  if ((v4 & (1 << a2)) == 0)
  {
    uint64_t v5 = this;
    *(_DWORD *)(v2 + 4 * v3) = v4 | (1 << a2);
    uint64_t v6 = *(unsigned int *)(this + 32);
    if ((*(_DWORD *)(this + 36) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 24, &v7);
    }
    else
    {
      *(_DWORD *)(*(void *)(this + 24) + 4 * v6) = a2;
      ++*(_DWORD *)(this + 32);
    }
    ++*(_DWORD *)(v5 + 44);
  }
  return this;
}

uint64_t physx::Sq::PrunerExt::removeFromDirtyList(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = a2 >> 5;
  int v4 = *(_DWORD *)(v2 + 4 * v3);
  if ((v4 & (1 << a2)) != 0)
  {
    *(_DWORD *)(v2 + 4 * v3) = v4 & ~(1 << a2);
    uint64_t v5 = *(unsigned int *)(this + 32);
    if (v5)
    {
      uint64_t v6 = 0;
      while (*(_DWORD *)(*(void *)(this + 24) + 4 * v6) != a2)
      {
        if (v5 == ++v6) {
          return this;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v6 != v5)
    {
      uint64_t v7 = *(void *)(this + 24);
      unsigned int v8 = v5 - 1;
      *(_DWORD *)(this + 32) = v8;
      *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v7 + 4 * v8);
    }
  }
  return this;
}

void physx::Sq::CompoundPrunerExt::~CompoundPrunerExt(physx::Sq::CompoundPrunerExt *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  }
  *(void *)this = 0;
  if (*((void *)this + 1)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
}

void *physx::Sq::CompoundPrunerExt::flushShapes(void *this)
{
  uint64_t v1 = *((unsigned int *)this + 15);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = this + 1;
    int v4 = (unsigned int *)(this[2] + 4);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      int v25 = 0;
      uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t, float32x2_t **))(*(void *)*v2 + 80))(*v2, v5, v6, &v25);
      uint64_t v20 = *(void *)v7;
      int v21 = *(_DWORD *)(*(void *)v7 + 8);
      if ((v21 & 4) != 0) {
        uint64_t v22 = *(void *)(v20 + 16);
      }
      else {
        uint64_t v22 = v20 + 64;
      }
      if (v21) {
        uint64_t v23 = *(void *)(v20 + 16) + 64;
      }
      else {
        uint64_t v23 = v20 + 104;
      }
      v4 += 2;
      v12.i64[0] = 0;
      v13.i32[0] = 1065437102;
      physx::Gu::computeBounds(v25, v23, v22, 0, v12, v13, v14, v15, v16, v17, v18, v19, v8, v9, v10, v11, v24);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v2 + 24))(*v2, v6, v5);
      --v1;
    }
    while (v1);
    return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(v3);
  }
  return this;
}

BOOL physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::insert(int32x2_t *a1, int *a2, int8x8_t a3)
{
  unsigned __int8 v7 = 0;
  int v4 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1, a2, &v7, a3);
  int v5 = v7;
  if (!v7) {
    *(void *)int v4 = *(void *)a2;
  }
  return v5 == 0;
}

uint64_t physx::Sq::SceneQueryManager::SceneQueryManager(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 0; i != 96; i += 48)
  {
    uint64_t v13 = a1 + i;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = 0;
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 0;
    *(void *)(v13 + 4physx::Sq::AABBTree::release(this, 0) = 0xFFFFFFFF00000003;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 144) = 1061158912;
  *(void *)(a1 + 148) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 156) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 104, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(void *)(a1 + 168) = a2;
  uint64_t v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    double v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    double v15 = "<allocation names disabled>";
  }
  double v16 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 176) = v16;
  physx::shdfnd::MutexImpl::MutexImpl(v16);
  *(void *)(a1 + 184) = &unk_26E728228;
  physx::Sq::PrunerExt::init(a1, a3, *(void *)(a2 + 40));
  physx::Sq::PrunerExt::init(a1 + 48, a4, *(void *)(a2 + 40));
  physx::Sq::SceneQueryManager::setDynamicTreeRebuildRateHint((physx::Sq::SceneQueryManager *)a1, a5);
  unsigned int v17 = *(_DWORD *)(a6 + 8);
  unsigned int v18 = *(_DWORD *)(a6 + 12);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)a1, v17);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 48), v18);
  *(void *)(a1 + 192) = *(void *)(a1 + 48);
  *(void *)(a1 + 20physx::Sq::AABBTree::release(this, 0) = a1 + 92;
  uint64_t v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v20 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::BVHCompoundPruner>::getName() [T = physx::Sq:"
  }
          ":BVHCompoundPruner]";
  else {
    uint64_t v20 = "<allocation names disabled>";
  }
  int v21 = (physx::Sq::BVHCompoundPruner *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v19 + 24) + 16))(v19 + 24, 1320, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 268);
  *(void *)(a1 + 96) = physx::Sq::BVHCompoundPruner::BVHCompoundPruner(v21);
  if (*(_DWORD *)(a1 + 156) <= 0x1Fu && *(_DWORD *)(a1 + 140) <= 0x1Fu) {
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 104, 0x20u, v22);
  }
  *(unsigned char *)(a1 + 208) = 0;
  return a1;
}

uint64_t physx::Sq::SceneQueryManager::setDynamicTreeRebuildRateHint(physx::Sq::SceneQueryManager *this, uint64_t a2)
{
  uint64_t v4 = 0;
  *((_DWORD *)this + 4physx::Sq::AABBTree::release(this, 0) = a2;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t result = *((void *)this + 6 * v4);
    if (result)
    {
      if (*((_DWORD *)this + 12 * v4 + 10) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 136))(result, a2);
      }
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

void physx::Sq::SceneQueryManager::~SceneQueryManager(pthread_mutex_t **this)
{
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 22);
  physx::Sq::CompoundPrunerExt::~CompoundPrunerExt((physx::Sq::CompoundPrunerExt *)(this + 12));
  for (uint64_t i = 6; i != -6; i -= 6)
    physx::Sq::PrunerExt::~PrunerExt((physx::Sq::PrunerExt *)&this[i]);
}

void *physx::Sq::SceneQueryManager::flushMemory(physx::Sq::SceneQueryManager *this)
{
  physx::Sq::PrunerExt::flushMemory((uint64_t)this);
  uint64_t result = (void *)physx::Sq::PrunerExt::flushMemory((uint64_t)this + 48);
  if (!*((_DWORD *)this + 39))
  {
    return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear((char *)this + 104);
  }
  return result;
}

uint64_t physx::Sq::SceneQueryManager::markForUpdate(int32x2_t *this, int a2, unint64_t a3, int8x8_t a4)
{
  this[26].i8[0] = 1;
  if (a2 == -1)
  {
    char v5 = &this[6 * (a3 & 1)];
    return physx::Sq::PrunerExt::addToDirtyList((uint64_t)v5, a3 >> 1);
  }
  else
  {
    ++this[6 * (a3 & 1) + 5].i32[1];
    v6[0] = a2;
    v6[1] = a3 >> 1;
    return physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::insert(this + 13, v6, a4);
  }
}

uint64_t physx::Sq::SceneQueryManager::addPrunerShape(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  *(unsigned char *)(a1 + 208) = 1;
  v41[0] = a2;
  v41[1] = a3;
  unsigned int v40 = 0;
  uint64_t v20 = a1 + 48 * a4;
  ++*(_DWORD *)(v20 + 44);
  if (a5 == -1)
  {
    if (a6)
    {
      float32x4_t v27 = *(float32x4_t *)(a6 + 12);
      float32x4_t v28 = vmulq_f32(vsubq_f32(v27, *(float32x4_t *)a6), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
      float32x4_t v29 = vsubq_f32(*(float32x4_t *)a6, v28);
      int8x16_t v30 = (int8x16_t)vaddq_f32(v27, v28);
      v29.i32[3] = v30.i32[0];
      float32x4_t v38 = v29;
      unint64_t v39 = vextq_s8(v30, v30, 4uLL).u64[0];
    }
    else
    {
      ((void (*)(float32x4_t *, uint64_t, uint64_t))physx::Sq::gComputeBoundsTable[a4])(&v38, a2, a3);
    }
    (***(void (****)(void, unsigned int *, float32x4_t *, void *, uint64_t, uint64_t))v20)(*(void *)v20, &v40, &v38, v41, 1, a7);
    unint64_t v31 = v40;
    uint64_t v32 = a1 + 48 * a4;
    uint64_t v33 = (void *)(v32 + 8);
    int v34 = *(_DWORD *)(v32 + 16);
    if (v40 >= 32 * v34)
    {
      unsigned int v35 = v34 << 6;
      if (v35 <= 0x400) {
        int v36 = 1024;
      }
      else {
        int v36 = v35;
      }
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v33, v36);
    }
    *(_DWORD *)(*v33 + ((v31 >> 3) & 0x1FFFFFFC)) &= ~(1 << v31);
  }
  else
  {
    int v22 = *(_DWORD *)(a2 + 8);
    if ((v22 & 4) != 0) {
      uint64_t v23 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v23 = a2 + 64;
    }
    if (v22) {
      uint64_t v24 = *(void *)(a2 + 16) + 64;
    }
    else {
      uint64_t v24 = a2 + 104;
    }
    a10.i32[0] = 1065437102;
    a9.i64[0] = 0;
    physx::Gu::computeBounds((float32x2_t *)&v38, v24, v23, 0, a9, a10, a11, a12, a13, a14, a15, a16, a5, a6, a7, a8, v38.i8[0]);
    (*(void (**)(void, uint64_t, unsigned int *, float32x4_t *, uint64_t, uint64_t))(**(void **)(a1 + 96)
                                                                                             + 40))(*(void *)(a1 + 96), a5, &v40, &v38, a2, a3);
  }
  return a4 | (2 * v40);
}

uint64_t physx::Sq::SceneQueryManager::getPayload(physx::Sq::SceneQueryManager *this, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3 >> 1;
  if (a2 != -1) {
    return (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 12) + 72))(*((void *)this + 12), v4, a2);
  }
  uint64_t v6 = *((void *)this + 6 * (a3 & 1));
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v6 + 72))(v6, v4);
}

uint64_t physx::Sq::SceneQueryManager::removePrunerShape(physx::Sq::SceneQueryManager *this, uint64_t a2, unint64_t a3)
{
  *((unsigned char *)this + 208) = 1;
  unint64_t v4 = a3 >> 1;
  int v8 = a3 >> 1;
  ++*((_DWORD *)this + 12 * (a3 & 1) + 11);
  if (a2 == -1)
  {
    unsigned __int8 v7 = (void *)((char *)this + 48 * (a3 & 1));
    physx::Sq::PrunerExt::removeFromDirtyList((uint64_t)v7, a3 >> 1);
    return (*(uint64_t (**)(void, int *, uint64_t))(*(void *)*v7 + 8))(*v7, &v8, 1);
  }
  else
  {
    v9[0] = a2;
    v9[1] = a3 >> 1;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 104, v9);
    return (*(uint64_t (**)(void, uint64_t, unint64_t))(**((void **)this + 12) + 32))(*((void *)this + 12), a2, v4);
  }
}

physx::Sq::SceneQueryManager *physx::Sq::SceneQueryManager::afterSync(physx::Sq::SceneQueryManager *this, int a2)
{
  uint64_t v2 = this;
  if (a2 == 2)
  {
    BOOL v3 = 1;
  }
  else
  {
    physx::Sq::SceneQueryManager::flushShapes(this);
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      int v8 = (physx::Sq::SceneQueryManager **)((char *)v2 + 48 * v5);
      this = *v8;
      if (*v8 && *((_DWORD *)v2 + 12 * v5 + 10) == 1) {
        this = (physx::Sq::SceneQueryManager *)(*(uint64_t (**)(physx::Sq::SceneQueryManager *, uint64_t))(*(void *)this + 144))(this, 1);
      }
      if (!a2) {
        this = (physx::Sq::SceneQueryManager *)(*(uint64_t (**)(void))(*(void *)*v8 + 32))();
      }
      char v6 = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
    BOOL v3 = a2 != 0;
  }
  *((unsigned char *)v2 + 208) = v3;
  return this;
}

void *physx::Sq::SceneQueryManager::flushShapes(physx::Sq::SceneQueryManager *this)
{
  physx::Sq::PrunerExt::flushShapes((uint64_t)this, 0);
  physx::Sq::PrunerExt::flushShapes((uint64_t)this + 48, 1);
  return physx::Sq::CompoundPrunerExt::flushShapes((void *)this + 12);
}

uint64_t physx::Sq::SceneQueryManager::flushUpdates(uint64_t this)
{
  if (*(unsigned char *)(this + 208))
  {
    uint64_t v1 = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 176));
    }
    if (*(unsigned char *)(v1 + 208))
    {
      physx::Sq::SceneQueryManager::flushShapes((physx::Sq::SceneQueryManager *)v1);
      uint64_t v2 = 0;
      char v3 = 1;
      do
      {
        char v4 = v3;
        this = *(void *)(v1 + 48 * v2);
        if (this) {
          this = (*(uint64_t (**)(uint64_t))(*(void *)this + 32))(this);
        }
        char v3 = 0;
        uint64_t v2 = 1;
      }
      while ((v4 & 1) != 0);
      __dmb(0xBu);
      *(unsigned char *)(v1 + 208) = 0;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      uint64_t v5 = *(pthread_mutex_t **)(v1 + 176);
      return pthread_mutex_unlock(v5);
    }
  }
  return this;
}

uint64_t physx::Sq::SceneQueryManager::forceDynamicTreeRebuild(uint64_t this, char a2, char a3)
{
  uint64_t v3 = this;
  v9[0] = a2;
  v9[1] = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 176));
  }
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    if (v9[v4])
    {
      uint64_t v7 = v3 + 48 * v4;
      this = *(void *)v7;
      if (*(void *)v7)
      {
        if (*(_DWORD *)(v3 + 48 * v4 + 40) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)this + 128))(this);
          this = (*(uint64_t (**)(void))(**(void **)v7 + 32))();
        }
      }
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    int v8 = *(pthread_mutex_t **)(v3 + 176);
    return pthread_mutex_unlock(v8);
  }
  return this;
}

uint64_t physx::Sq::SceneQueryManager::shiftOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 48 * v4) + 96))(*(void *)(a1 + 48 * v4), a2);
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 88);
  return v7();
}

uint64_t physx::Sq::DynamicBoundsSync::sync(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(_DWORD *)(a6 + 8) & 0x7FFFFFFF;
    if (!v11) {
      goto LABEL_12;
    }
    int v12 = 0;
    uint64_t v13 = *(unsigned int **)a6;
    do
    {
      unsigned int v14 = *v13++;
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v15.i16[0] = vaddlv_u8(v15);
      v12 += v15.i32[0];
      --v11;
    }
    while (v11);
    if (v12)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = a5;
      a5 = 0;
      do
      {
        if ((*(_DWORD *)(*(void *)a6 + (((unint64_t)*(unsigned int *)(a3 + 4 * v16) >> 3) & 0x1FFFFFFC)) >> *(_DWORD *)(a3 + 4 * v16)))
        {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v10 + 8) + 24))(*(void *)(v10 + 8), a2 + 4 * v17, a3 + 4 * v17, a4, a5);
          a5 = 0;
          uint64_t v17 = ++v16;
        }
        else
        {
          a5 = (a5 + 1);
          ++v16;
        }
      }
      while (v16 != v18);
    }
    else
    {
LABEL_12:
      uint64_t v17 = 0;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v10 + 8) + 24))(*(void *)(v10 + 8), a2 + 4 * v17, a3 + 4 * v17, a4, a5);
    ++**(_DWORD **)(v10 + 16);
  }
  return result;
}

void *physx::Sq::SceneQueryManager::addPruningStructure(void *this, const physx::Sq::PruningStructure *a2, uint64_t a3, uint64_t a4)
{
  char v5 = this;
  uint64_t v6 = *((void *)a2 + 3);
  if (v6)
  {
    int v7 = *((_DWORD *)a2 + 10);
    uint64_t v8 = *((void *)a2 + 6);
    int v12 = *((_DWORD *)a2 + 3);
    uint64_t v13 = v6;
    int v14 = v7;
    uint64_t v15 = v8;
    this = (void *)(*(uint64_t (**)(void, int *, uint64_t, uint64_t))(*(void *)*this + 40))(*this, &v12, a3, a4);
  }
  uint64_t v9 = *((void *)a2 + 4);
  if (v9)
  {
    int v10 = *((_DWORD *)a2 + 11);
    uint64_t v11 = *((void *)a2 + 7);
    int v12 = *((_DWORD *)a2 + 4);
    uint64_t v13 = v9;
    int v14 = v10;
    uint64_t v15 = v11;
    return (void *)(*(uint64_t (**)(void, int *))(*(void *)v5[6] + 40))(v5[6], &v12);
  }
  return this;
}

void physx::Sq::SceneQueryManager::addCompoundShape(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v27 = a4;
  unsigned int v26 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
  unsigned int v13 = v12;
  size_t v14 = (4 * v12);
  if (v14 < 0x401)
  {
    MEMORY[0x270FA5388](v12);
    uint64_t v16 = &v25[-((v14 + 15) & 0x1FFFFFFF0)];
    bzero(v16, v14);
  }
  else
  {
    uint64_t v15 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v29, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 561);
    uint64_t v16 = v15;
  }
  uint64_t v17 = 16 * v13;
  if (v17 < 0x401)
  {
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = &v25[-((v17 + 15) & 0x1FFFFFFF0)];
    bzero(v18, 16 * v13);
    if (!v13) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v19 = v13;
    uint64_t v20 = v18 + 1;
    do
    {
      uint64_t v21 = *a6++;
      *(v20 - 1) = v21;
      *uint64_t v20 = a7;
      v20 += 2;
      --v19;
    }
    while (v19);
    goto LABEL_10;
  }
  uint64_t v18 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v28, 16 * v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/scenequery/src/SqSceneQueryManager.cpp", 562);
  if (v13) {
    goto LABEL_8;
  }
LABEL_10:
  if (*(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(a7 + 11) & 0xF) + 3) + a7 + 13) == 1) {
    uint64_t v22 = 2;
  }
  else {
    uint64_t v22 = 1;
  }
  (***(void (****)(void, unsigned char *, uint64_t, void, uint64_t, uint64_t, void *))(a1 + 96))(*(void *)(a1 + 96), v16, a2, v26, v27, v22, v18);
  uint64_t v23 = a1 + 48 * ((v22 & 1) == 0);
  ++*(_DWORD *)(v23 + 44);
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
      *(void *)(a5 + 8 * i) = ((v22 & 1) == 0) | (2 * *(_DWORD *)&v16[4 * i]);
    if (v17 >= 0x401) {
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v29, v18);
    }
    if (v14 >= 0x401) {
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v29, v16);
    }
  }
}

uint64_t physx::Sq::SceneQueryManager::updateCompoundActors(uint64_t this, physx::Sc::BodyCore *const *a2, unsigned int a3)
{
  uint64_t v3 = this;
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = (uint64_t)*a2++;
      this = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v3 + 96) + 16))(*(void *)(v3 + 96), *(unsigned int *)(*(void *)v6 + 88), v6 + 16);
      --v5;
    }
    while (v5);
  }
  ++*(_DWORD *)(v3 + 92);
  return this;
}

uint64_t physx::Sq::BucketPruner::getPayload(physx::Sq::BucketPruner *this, unsigned int a2)
{
  return *((void *)this + 982) + 16 * *(unsigned int *)(*((void *)this + 983) + 4 * a2);
}

uint64_t physx::Sq::BucketPruner::getPayload(void *a1, unsigned int a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a1[983] + 4 * a2);
  *a3 = a1[981] + 24 * v3;
  return a1[982] + 16 * v3;
}

uint64_t physx::Sq::BucketPruner::preallocate(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 7844) < a2) {
    return physx::Sq::PruningPool::resize((physx::Sq::PruningPool *)(this + 7840), a2);
  }
  return this;
}

const char *physx::PxPruningStructure::getConcreteTypeName(physx::PxPruningStructure *this)
{
  return "PxPruningStructure";
}

uint64_t physx::PxBase::isReleasable(physx::PxBase *this)
{
  return (*((unsigned __int16 *)this + 5) >> 1) & 1;
}

BOOL physx::PxPruningStructure::isKindOf(physx::PxPruningStructure *this, const char *a2)
{
  return !strcmp("PxPruningStructure", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Sq::PruningStructure::getNbRigidActors(physx::Sq::PruningStructure *this)
{
  return *((unsigned int *)this + 16);
}

void physx::Sq::DynamicBoundsSync::~DynamicBoundsSync(physx::Sq::DynamicBoundsSync *this)
{
}

float OBBAABBTest_SIMD::OBBAABBTest_SIMD(float32x4_t *a1, __int32 *a2, uint64_t a3, uint64_t a4, double a5, double a6, float32x4_t a7, float32x4_t a8)
{
  v8.i64[0] = *(void *)a3;
  v8.i64[1] = *(unsigned int *)(a3 + 8);
  a1[1] = v8;
  v8.i64[0] = *(void *)a4;
  v8.i64[1] = *(unsigned int *)(a4 + 8);
  *a1 = v8;
  v9.i32[0] = *a2;
  v9.i32[1] = a2[3];
  v9.i64[1] = a2[6];
  a7.i32[0] = a2[1];
  a7.i32[1] = a2[4];
  a7.i32[2] = a2[7];
  a8.i32[0] = a2[2];
  a8.i32[1] = a2[5];
  a8.i32[2] = a2[8];
  a1[2] = v9;
  a1[3] = a7;
  float32x4_t v10 = vaddq_f32(vabsq_f32(v9), (float32x4_t)xmmword_234421B30);
  float32x4_t v11 = vaddq_f32(vabsq_f32(a7), (float32x4_t)xmmword_234421B30);
  float32x4_t v12 = vaddq_f32(vabsq_f32(a8), (float32x4_t)xmmword_234421B30);
  a1[4] = a8;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v12;
  float32x4_t v13 = vmulq_f32(v8, v10);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  float32x4_t v14 = vmulq_f32(v8, v11);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  float32x4_t v15 = vmulq_f32(v8, v12);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  LODWORD(result) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)v13.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  v13.i64[1] = LODWORD(result);
  a1[8] = v13;
  return result;
}

float clipRay(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5 = a5[1];
  float v6 = a4[1];
  float v7 = a5[2];
  float v8 = a4[2];
  float v9 = (float)(v7 + v8) * 0.5;
  float v10 = (float)(v7 - v8) * 0.5;
  float v11 = a2[1];
  float v12 = a2[2];
  float v13 = (float)((float)((float)((float)(v5 + v6) * 0.5) * v11) + (float)((float)((float)(*a5 + *a4) * 0.5) * *a2))
      + (float)(v9 * v12);
  float v14 = sqrtf((float)((float)((float)((float)(v5 - v6) * 0.5) * (float)((float)(v5 - v6) * 0.5))+ (float)((float)((float)(*a5 - *a4) * 0.5) * (float)((float)(*a5 - *a4) * 0.5)))+ (float)(v10 * v10));
  float v15 = v13 - v14;
  float v16 = v14 + v13;
  float v17 = (float)((float)(v11 * a1[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v12);
  float v18 = v14 + v14;
  float v19 = vabds_f32(v15, v17);
  float v20 = vabds_f32(v16, v17);
  if (v19 >= v20) {
    float v19 = v20;
  }
  float result = v19 + (float)(v18 * 2.0);
  *a3 = result;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 32 * v9) {
    float v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 32 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    float v11 = 0;
  }
  float v12 = &v11[4 * v3];
  float v13 = &v11[v10];
  float result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)(a1 + 8) + v15;
      unint64_t v18 = ~(*(void *)v17 << 32) + *(void *)v17 + (*(void *)(v17 + 8) << 32);
      unint64_t v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
      unint64_t v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
      LODWORD(v2physx::Sq::AABBTree::release(this, 0) = (v3 - 1) & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~(v20 << 27)));
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v16;
      uint64_t v21 = &v13[v15];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v17;
      uint64_t v22 = *(void *)(v17 + 16);
      *((_DWORD *)v21 + 6) = *(_DWORD *)(v17 + 24);
      *((void *)v21 + 2) = v22;
      ++v16;
      v15 += 32;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    float result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sq::PrunerPayload const,physx::Sq::ExtendedBucketPrunerData>,physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::internal::HashMapBase<physx::Sq::PrunerPayload,physx::Sq::ExtendedBucketPrunerData,physx::Sq::ExtendedBucketPrunerHash,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = ~(*a2 << 32) + *a2 + (v4 << 32);
  unint64_t v6 = 9 * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  int v8 = (_DWORD *)(*(void *)(a1 + 24)
                + 4 * ((*(_DWORD *)(a1 + 36) - 1) & ((v7 >> 31) ^ v7)));
  uint64_t v9 = *v8;
  if (v9 == -1) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  float v11 = (void *)(v10 + 32 * v9);
  if (*v11 != v3 || v11[1] != v4)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v14 = v9;
      uint64_t v9 = *(unsigned int *)(v13 + 4 * v9);
      if (v9 == -1) {
        return 0;
      }
      float v11 = (void *)(v10 + 32 * v9);
      if (*v11 == v3 && v11[1] == v4)
      {
        int v8 = (_DWORD *)(v13 + 4 * v14);
        break;
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)v11;
  uint64_t v16 = v10 + 32 * v9;
  uint64_t v17 = *(void *)(v16 + 16);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v16 + 24);
  *(void *)(a3 + 16) = v17;
  uint64_t v18 = *v8;
  *int v8 = *(_DWORD *)(*(void *)(a1 + 16) + 4 * v18);
  uint64_t v19 = (*(_DWORD *)(a1 + 52) - 1);
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v19;
  if (v18 != v19)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = v20 + 32 * v18;
    uint64_t v22 = v20 + 32 * v19;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    LODWORD(v2physx::Sq::AABBTree::release(this, 0) = *(_DWORD *)(v22 + 24);
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
    *(_DWORD *)(v21 + 24) = v20;
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v23 = *(void *)(a1 + 16);
    *(_DWORD *)(v23 + 4 * v18) = *(_DWORD *)(v23 + 4 * *(unsigned int *)(a1 + 52));
    unint64_t v25 = ~(*(void *)(v24 + 32 * v18) << 32)
        + *(void *)(v24 + 32 * v18)
        + (*(void *)(v24 + 32 * v18 + 8) << 32);
    unint64_t v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
    unint64_t v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
    char v28 = (_DWORD *)(*(void *)(a1 + 24)
                   + 4
                   * ((*(_DWORD *)(a1 + 36) - 1) & (((v27 + ~(v27 << 27)) >> 31) ^ (v27
                                                                                                + ~(v27 << 27)))));
    uint64_t v29 = *(unsigned int *)(a1 + 52);
    uint64_t v30 = *v28;
    if (v30 != v29)
    {
      do
      {
        uint64_t v31 = v30;
        uint64_t v30 = *(unsigned int *)(v23 + 4 * v30);
      }
      while (v30 != v29);
      char v28 = (_DWORD *)(v23 + 4 * v31);
    }
    *char v28 = v18;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t MainTreeRaycastPrunerCallback<false>::invoke(uint64_t a1, float *a2, void **a3)
{
  return physx::Gu::AABBTreeRaycast<false,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 40) + 16), *(void *)(*(void *)(a1 + 40) + 8), *a3, *(float32x2_t **)(a1 + 8), *(float32x2_t **)(a1 + 16), a2, *(void *)(a1 + 24), *(unsigned int (****)(void, float *, uint64_t))(a1 + 32));
}

void MainTreeRaycastPrunerCallback<false>::~MainTreeRaycastPrunerCallback()
{
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::OBBAABBTests<true>>::invoke(uint64_t a1, uint64_t a2, void **a3)
{
  return physx::Gu::AABBTreeOverlap<physx::Gu::OBBAABBTests<true>,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 24) + 16), *(void *)(*(void *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(unsigned int (****)(void, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::OBBAABBTests<true>>::~MainTreeOverlapPrunerCallback()
{
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::AABBAABBTest>::invoke(uint64_t a1, uint64_t a2, void **a3)
{
  return physx::Gu::AABBTreeOverlap<physx::Gu::AABBAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 24) + 16), *(void *)(*(void *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(uint64_t (****)(void, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::AABBAABBTest>::~MainTreeOverlapPrunerCallback()
{
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::CapsuleAABBTest>::invoke(uint64_t a1, uint64_t a2, void **a3)
{
  return physx::Gu::AABBTreeOverlap<physx::Gu::CapsuleAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 24) + 16), *(void *)(*(void *)(a1 + 24) + 8), *a3, *(float32x4_t **)(a1 + 8), *(uint64_t (****)(void, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::CapsuleAABBTest>::~MainTreeOverlapPrunerCallback()
{
}

uint64_t MainTreeOverlapPrunerCallback<physx::Gu::SphereAABBTest>::invoke(uint64_t a1, uint64_t a2, void **a3)
{
  return physx::Gu::AABBTreeOverlap<physx::Gu::SphereAABBTest,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 24) + 16), *(void *)(*(void *)(a1 + 24) + 8), *a3, *(void *)(a1 + 8), *(uint64_t (****)(void, int *, uint64_t))(a1 + 16));
}

void MainTreeOverlapPrunerCallback<physx::Gu::SphereAABBTest>::~MainTreeOverlapPrunerCallback()
{
}

uint64_t MainTreeRaycastPrunerCallback<true>::invoke(uint64_t a1, float *a2, void **a3)
{
  return physx::Gu::AABBTreeRaycast<true,physx::Sq::AABBTree,physx::Sq::AABBTreeRuntimeNode,physx::Sq::PrunerPayload,physx::Sq::PrunerCallback>::operator()((uint64_t)&v4, *(void *)(*(void *)(a1 + 40) + 16), *(void *)(*(void *)(a1 + 40) + 8), *a3, *(float32x2_t **)(a1 + 8), *(float32x2_t **)(a1 + 16), a2, *(float32x2_t **)(a1 + 24), *(unsigned int (****)(void, float *, uint64_t))(a1 + 32));
}

void MainTreeRaycastPrunerCallback<true>::~MainTreeRaycastPrunerCallback()
{
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v18 = *(_DWORD *)(a1 + 32);
  unsigned int v8 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v9 = ((-4 * (v3 + v8)) & 0xC) + 4 * (v3 + v8);
  if (v9 + 8 * v8) {
    uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v9 + 8 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v10 = 0;
  }
  float v11 = &v10[4 * v3];
  float v12 = &v10[v9];
  uint64_t result = (uint64_t)memset(v10, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v14 = 0;
    unsigned int v15 = v3 - 1;
    uint64_t v16 = *(int **)(a1 + 8);
    do
    {
      uint64_t result = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*v16, v16[1]);
      *(_DWORD *)&v11[4 * v14] = *(_DWORD *)&v10[4 * (result & v15)];
      *(_DWORD *)&v10[4 * (result & v15)] = v14;
      uint64_t v17 = *(void *)v16;
      v16 += 2;
      *(void *)&v12[8 * v14++] = v17;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v10;
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v18;
  }
  return result;
}

uint64_t physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(int a1, int a2)
{
  unsigned int v2 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v3 = (v2 ^ (v2 >> 6)) + ~((v2 ^ (v2 >> 6)) << 11);
  unsigned int v4 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  return (1000007 * (v5 ^ HIWORD(v5) ^ 0xFC955B95)) ^ HIWORD(v3) ^ v3;
}

_DWORD *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, int *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v7 = a1[4].u32[1];
  if (!v7)
  {
    unsigned int v10 = 0;
    goto LABEL_10;
  }
  int v8 = *a2;
  int v9 = a2[1];
  unsigned int v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, v9) & (v7 - 1);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_10:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v7) {
        unsigned int v14 = 2 * v7;
      }
      else {
        unsigned int v14 = 16;
      }
      if (v7 < v14)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v14, a4);
        unsigned int v7 = a1[4].u32[1];
      }
      unsigned int v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, a2[1]) & (v7 - 1);
    }
    uint64_t v15 = a1[5].u32[1];
    a1[5].i32[1] = v15 + 1;
    int32x2_t v16 = a1[3];
    int32x2_t v17 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v15) = *(_DWORD *)(*(void *)&v16 + 4 * v10);
    *(_DWORD *)(*(void *)&v16 + 4 * v1physx::Sq::AABBTree::release(this, 0) = v15;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return (_DWORD *)(*(void *)&v17 + 8 * v15);
  }
  while (1)
  {
    uint64_t result = (_DWORD *)(*(void *)&a1[1] + 8 * v11);
    if (*result == v8 && result[1] == v9) {
      break;
    }
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_10;
    }
  }
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::internal::HashSetBase<physx::shdfnd::Pair<unsigned int,unsigned int>,physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 36);
  int v4 = *a2;
  int v5 = a2[1];
  int v6 = physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*a2, v5);
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = (_DWORD *)(v7 + 4 * (v6 & (v3 - 1)));
  uint64_t v9 = *v8;
  if (v9 == -1) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = v10 + 8 * v9;
  int v15 = *(_DWORD *)(v12 + 4);
  uint64_t v13 = (_DWORD *)(v12 + 4);
  int v14 = v15;
  if (*(_DWORD *)(v10 + 8 * v9) != v4 || v14 != v5)
  {
    while (1)
    {
      uint64_t v17 = v9;
      uint64_t v9 = *(unsigned int *)(v11 + 4 * v9);
      if (v9 == -1) {
        return 0;
      }
      uint64_t v18 = v10 + 8 * v9;
      int v20 = *(_DWORD *)(v18 + 4);
      uint64_t v13 = (_DWORD *)(v18 + 4);
      int v19 = v20;
      if (*(_DWORD *)(v10 + 8 * v9) == v4 && v19 == v5)
      {
        int v8 = (_DWORD *)(v11 + 4 * v17);
        break;
      }
    }
  }
  *int v8 = *(_DWORD *)(v11 + 4 * v9);
  unsigned int v22 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v22;
  if (v9 != v22)
  {
    uint64_t v23 = (int *)(v10 + 8 * v9);
    uint64_t v24 = (int *)(v10 + 8 * v22);
    int v25 = *v24;
    LODWORD(v24) = v24[1];
    *uint64_t v23 = v25;
    *uint64_t v13 = v24;
    *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(v11 + 4 * v22);
    int v26 = *(_DWORD *)(a1 + 36);
    unint64_t v27 = (_DWORD *)(v7
                   + 4
                   * (physx::shdfnd::Hash<physx::shdfnd::Pair<unsigned int,unsigned int>>::operator()(*v23, v23[1]) & (v26 - 1)));
    uint64_t v28 = *(unsigned int *)(a1 + 52);
    uint64_t v29 = *v27;
    if (v29 != v28)
    {
      do
      {
        uint64_t v30 = v29;
        uint64_t v29 = *(unsigned int *)(v11 + 4 * v29);
      }
      while (v29 != v28);
      unint64_t v27 = (_DWORD *)(v11 + 4 * v30);
    }
    _DWORD *v27 = v9;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

float physx::PxTransformFromPlaneEquation@<S0>(float *a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D2>)
{
  float v4 = a1[1];
  float v5 = a1[2];
  float v6 = a1[3];
  float v7 = 1.0 / sqrtf((float)((float)(v4 * v4) + (float)(*a1 * *a1)) + (float)(v5 * v5));
  float v9 = v4 * v7;
  v21[0] = *a1 * v7;
  float v8 = v21[0];
  v21[1] = v4 * v7;
  float v10 = v5 * v7;
  float v11 = v6 * v7;
  v21[2] = v5 * v7;
  v21[3] = v6 * v7;
  int v12 = (float)(v4 * v7) == 0.0;
  if (v21[0] == 0.0) {
    ++v12;
  }
  if (v10 == 0.0) {
    ++v12;
  }
  if (v12 == 2)
  {
    float v13 = 0.0;
    if (v21[0] > 0.0)
    {
      int32x2_t v14 = (int32x2_t)0x3F80000000000000;
LABEL_12:
      float v15 = 0.0;
      goto LABEL_13;
    }
    if (v21[0] < 0.0)
    {
      int32x2_t v14 = (int32x2_t)1065353216;
      goto LABEL_12;
    }
    float v15 = v10 * -0.70711;
    a3.i32[0] = 1060439283;
    int32x2_t v14 = vdup_lane_s32(a3, 0);
    *(float *)v14.i32 = v9 * 0.70711;
  }
  else
  {
    uint64_t v17 = 1065353216;
    int v18 = 0;
    physx::PxShortestRotation((float *)&v17, v21, v19);
    float v13 = v19[0];
    float v15 = v19[1];
    int32x2_t v14 = v20;
  }
LABEL_13:
  *(float *)a2 = v13;
  *(float *)(a2 + 4) = v15;
  float result = -(float)(v10 * v11);
  *(int32x2_t *)(a2 + 8) = v14;
  *(float *)(a2 + 16) = -(float)(v8 * v11);
  *(float *)(a2 + 2physx::Sq::AABBTree::release(this, 0) = -(float)(v9 * v11);
  *(float *)(a2 + 24) = result;
  return result;
}

float32x2_t physx::PxTransformFromSegment@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X1>, float *a3@<X2>, uint64_t a4@<X8>)
{
  float32x2_t v5 = *a2;
  float32x2_t v6 = *a1;
  float32x2_t v7 = vsub_f32(*a2, *a1);
  float v8 = a2[1].f32[0];
  float v9 = a1[1].f32[0];
  float v10 = v8 - v9;
  float v11 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v7, v7).i32[1]), v7.f32[0], v7.f32[0]) + (float)(v10 * v10));
  if (a3)
  {
    *a3 = v11 * 0.5;
    float32x2_t v5 = *a2;
    float32x2_t v6 = *a1;
    float v8 = a2[1].f32[0];
    float v9 = a1[1].f32[0];
  }
  if (v11 >= 0.000001)
  {
    uint64_t v17 = 1065353216;
    int v18 = 0;
    float v13 = 1.0 / v11;
    float32x2_t v15 = vmul_n_f32(v7, v13);
    float v16 = v10 * v13;
    physx::PxShortestRotation((float *)&v17, (float *)&v15, (float *)&v19);
    long long v12 = v19;
  }
  else
  {
    long long v12 = xmmword_23435FBB0;
  }
  *(_OWORD *)a4 = v12;
  float32x2_t result = vmul_f32(vadd_f32(v6, v5), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)(a4 + 16) = result;
  *(float *)(a4 + 24) = (float)(v9 + v8) * 0.5;
  return result;
}

uint64_t physx::Cm::PtrTable::clear(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 10))
  {
    unsigned int v3 = *(unsigned __int16 *)(result + 8);
    if (v3 >= 2)
    {
      unsigned int v4 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      float32x2_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)result, 8 * (v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8)) + 8);
    }
  }
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 1physx::Sq::AABBTree::release(this, 0) = 1;
  *(_WORD *)(v2 + 8) = 0;
  return result;
}

uint64_t physx::Cm::PtrTable::exportExtraData(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int16 *)(result + 8) >= 2u)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v4 = *(void *)v3;
    uint64_t v5 = 8 * *(unsigned __int16 *)(v3 + 8);
    float32x2_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
    return v6(a2, v4, v5);
  }
  return result;
}

uint64_t physx::Cm::PtrTable::realloc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = a3;
  int v6 = a2;
  if (!*((unsigned char *)a1 + 10)
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a2, a3),
        (result & 1) == 0))
  {
    float v9 = (void *)(**(uint64_t (***)(uint64_t, void))a4)(a4, (8 * v5));
    uint64_t result = (uint64_t)memcpy(v9, (const void *)*a1, 8 * *((unsigned __int16 *)a1 + 4));
    if (*((unsigned char *)a1 + 10)) {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a4 + 8))(a4, *a1, (8 * v6));
    }
    *a1 = v9;
    *((unsigned char *)a1 + 1physx::Sq::AABBTree::release(this, 0) = 1;
  }
  return result;
}

uint64_t physx::Cm::PtrTable::add(uint64_t result, uint64_t a2, uint64_t (***a3)(void, uint64_t))
{
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned __int16 *)(result + 8);
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)result;
    uint64_t result = (**a3)(a3, 16);
    *(void *)uint64_t v5 = result;
    *(void *)uint64_t result = v7;
    *(_WORD *)(v5 + 1physx::Sq::AABBTree::release(this, 0) = 1;
  }
  else
  {
    if (!*(_WORD *)(result + 8))
    {
      *(void *)uint64_t result = a2;
      *(_WORD *)(result + 8) = 1;
      *(unsigned char *)(result + 11) = 1;
      return result;
    }
    if (!*(unsigned char *)(result + 10))
    {
      unsigned int v9 = v6 | (v6 >> 1) | ((v6 | (v6 >> 1)) >> 2);
      uint64_t v8 = (v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8)) + 1;
      uint64_t v6 = 0;
      goto LABEL_9;
    }
    if ((v6 & (v6 - 1)) == 0)
    {
      uint64_t v8 = (2 * v6);
LABEL_9:
      uint64_t result = physx::Cm::PtrTable::realloc((void *)result, v6, v8, (uint64_t)a3);
    }
  }
  uint64_t v10 = *(void *)v5;
  uint64_t v11 = *(unsigned __int16 *)(v5 + 8);
  *(_WORD *)(v5 + 8) = v11 + 1;
  *(void *)(v10 + 8 * v11) = a2;
  return result;
}

void *physx::Cm::PtrTable::replaceWithLast(void *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *((unsigned __int16 *)result + 4);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(*result + 8 * (1 - a2));
    if (*((unsigned char *)result + 10)) {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 8))(a3, *result, 16);
    }
    void *v4 = v7;
    *((_DWORD *)v4 + 2) = 16842753;
  }
  else
  {
    int v6 = v5 - 1;
    if (!v6)
    {
      _DWORD *result = 0;
      *((_WORD *)result + 4) = 0;
      *((unsigned char *)result + 11) = 0;
      return result;
    }
    uint64_t v8 = *result;
    *((_WORD *)result + 4) = v6;
    *(void *)(v8 + 8 * a2) = *(void *)(v8 + 8 * (unsigned __int16)v6);
    uint64_t v9 = (unsigned __int16)v6;
    if (*((unsigned char *)result + 10))
    {
      if (((unsigned __int16)v6 & ((unsigned __int16)v6 - 1)) != 0) {
        return result;
      }
      uint64_t v10 = 2 * (unsigned __int16)v6;
    }
    else
    {
      unsigned int v11 = ((unsigned __int16)v6 - 1) | (((unsigned __int16)v6 - 1) >> 1) | ((((unsigned __int16)v6 - 1) | (((unsigned __int16)v6 - 1) >> 1)) >> 2);
      unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      uint64_t v9 = (v12 | HIWORD(v12)) + 1;
      uint64_t v10 = 0;
    }
    return (void *)physx::Cm::PtrTable::realloc(result, v10, v9, a3);
  }
  return result;
}

void physx::Cm::RadixSort::~RadixSort(physx::Cm::RadixSort *this)
{
}

uint64_t physx::Cm::RadixSort::Sort(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  if (!a2 || (int)a3 < 1) {
    return a1;
  }
  ++*(_DWORD *)(a1 + 48);
  bzero(*(void **)(a1 + 32), 0x1000uLL);
  uint64_t v8 = 4 * a3;
  uint64_t v9 = &a2[v8];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = v10 + 1024;
  uint64_t v12 = v10 + 2048;
  uint64_t v13 = v10 + 3072;
  int v14 = *(_DWORD *)(a1 + 8);
  if (a4 != 1)
  {
    if (v14 < 0)
    {
      if (!v8)
      {
LABEL_32:
        uint64_t v34 = 0;
        ++*(_DWORD *)(a1 + 52);
        uint64_t v35 = *(void *)(a1 + 16);
        if (a3 <= 1) {
          uint64_t v36 = 1;
        }
        else {
          uint64_t v36 = a3;
        }
        do
        {
          *(_DWORD *)(v35 + 4 * v34) = v34;
          ++v34;
        }
        while (v36 != v34);
        return a1;
      }
      int v31 = *(_DWORD *)a2;
      unsigned int v22 = a2;
      while (1)
      {
        int v32 = *(_DWORD *)v22;
        if (*(_DWORD *)v22 < v31) {
          break;
        }
        ++*(_DWORD *)(v10 + 4 * *(_DWORD *)v22);
        ++*(_DWORD *)(v11 + 4 * v22[1]);
        ++*(_DWORD *)(v12 + 4 * v22[2]);
        uint64_t v33 = v22[3];
        v22 += 4;
        ++*(_DWORD *)(v13 + 4 * v33);
        int v31 = v32;
        v8 -= 4;
        if (!v8) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_15;
      }
      int32x2_t v20 = *(unsigned int **)(a1 + 16);
      int v21 = *(_DWORD *)&a2[4 * *v20];
      unsigned int v22 = a2;
      while (1)
      {
        int v23 = *(_DWORD *)&a2[4 * *v20];
        if (v23 < v21) {
          break;
        }
        ++v20;
        ++*(_DWORD *)(v10 + 4 * *v22);
        ++*(_DWORD *)(v11 + 4 * v22[1]);
        ++*(_DWORD *)(v12 + 4 * v22[2]);
        uint64_t v24 = v22[3];
        v22 += 4;
        ++*(_DWORD *)(v13 + 4 * v24);
        int v21 = v23;
        v8 -= 4;
        if (!v8) {
          goto LABEL_15;
        }
      }
    }
    while (v22 != v9)
    {
      ++*(_DWORD *)(v10 + 4 * *v22);
      ++*(_DWORD *)(v11 + 4 * v22[1]);
      ++*(_DWORD *)(v12 + 4 * v22[2]);
      ++*(_DWORD *)(v13 + 4 * v22[3]);
      v22 += 4;
    }
    goto LABEL_39;
  }
  if (v14 < 0)
  {
    if (!v8)
    {
LABEL_20:
      uint64_t v28 = 0;
      ++*(_DWORD *)(a1 + 52);
      uint64_t v29 = *(void *)(a1 + 16);
      if (a3 <= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = a3;
      }
      do
      {
        *(_DWORD *)(v29 + 4 * v28) = v28;
        ++v28;
      }
      while (v30 != v28);
      return a1;
    }
    unsigned int v25 = *(_DWORD *)a2;
    uint64_t v17 = a2;
    while (1)
    {
      unsigned int v26 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 < v25) {
        goto LABEL_26;
      }
      ++*(_DWORD *)(v10 + 4 * *(_DWORD *)v17);
      ++*(_DWORD *)(v11 + 4 * v17[1]);
      ++*(_DWORD *)(v12 + 4 * v17[2]);
      uint64_t v27 = v17[3];
      v17 += 4;
      ++*(_DWORD *)(v13 + 4 * v27);
      unsigned int v25 = v26;
      v8 -= 4;
      if (!v8) {
        goto LABEL_20;
      }
    }
  }
  if (!v8)
  {
LABEL_15:
    ++*(_DWORD *)(a1 + 52);
    return a1;
  }
  float32x2_t v15 = *(unsigned int **)(a1 + 16);
  unsigned int v16 = *(_DWORD *)&a2[4 * *v15];
  uint64_t v17 = a2;
  while (1)
  {
    unsigned int v18 = *(_DWORD *)&a2[4 * *v15];
    if (v18 < v16) {
      break;
    }
    ++v15;
    ++*(_DWORD *)(v10 + 4 * *v17);
    ++*(_DWORD *)(v11 + 4 * v17[1]);
    ++*(_DWORD *)(v12 + 4 * v17[2]);
    uint64_t v19 = v17[3];
    v17 += 4;
    ++*(_DWORD *)(v13 + 4 * v19);
    unsigned int v16 = v18;
    v8 -= 4;
    if (!v8) {
      goto LABEL_15;
    }
  }
LABEL_26:
  while (v17 != v9)
  {
    ++*(_DWORD *)(v10 + 4 * *v17);
    ++*(_DWORD *)(v11 + 4 * v17[1]);
    ++*(_DWORD *)(v12 + 4 * v17[2]);
    ++*(_DWORD *)(v13 + 4 * v17[3]);
    v17 += 4;
  }
LABEL_39:
  if (a4)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = v10 + 3584;
    int32x4_t v40 = 0uLL;
    do
    {
      int32x4_t v40 = vaddq_s32(*(int32x4_t *)(v39 + v38), v40);
      v38 += 16;
    }
    while (v38 != 512);
    uint64_t v37 = vaddvq_s32(v40);
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (a3 <= 1) {
    uint64_t v43 = 1;
  }
  else {
    uint64_t v43 = a3;
  }
  uint64_t v44 = 512;
  do
  {
    uint64_t v45 = *(void *)(a1 + 32);
    unsigned int v46 = (char *)&a2[v42];
    if (v45) {
      BOOL v47 = *(_DWORD *)(v45 + (v42 << 10) + 4 * a2[v42]) == a3;
    }
    else {
      BOOL v47 = 1;
    }
    if (!v47)
    {
      uint64_t v48 = *(void **)(a1 + 40);
      uint64_t v49 = *(void *)(a1 + 24);
      if (a4 == 1 || v42 != 3)
      {
        uint64_t v55 = 0;
        *uint64_t v48 = v49;
        uint64_t v56 = v45 + v41;
        do
        {
          v49 += 4 * *(unsigned int *)(v56 + 4 * v55);
          v48[++v55] = v49;
        }
        while (v55 != 255);
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v51 = v49 + 4 * v37;
        *uint64_t v48 = v51;
        do
        {
          v51 += 4 * *(unsigned int *)(v45 + v41 + 4 * v50);
          v48[++v50] = v51;
        }
        while (v50 != 127);
        uint64_t v52 = 0;
        uint64_t v53 = *(void *)(a1 + 24);
        v48[128] = v53;
        uint64_t v54 = v45 + v44;
        do
        {
          v53 += 4 * *(unsigned int *)(v54 + 4 * v52);
          v48[v52++ + 129] = v53;
        }
        while (v52 != 127);
      }
      if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
      {
        uint64_t v62 = 0;
        for (uint64_t i = 0; i != v43; ++i)
        {
          uint64_t v64 = v46[v62 & 0xFFFFFFFC];
          float32x4_t v65 = (_DWORD *)v48[v64];
          *float32x4_t v65 = i;
          v48[v64] = v65 + 1;
          v62 += 4;
        }
        *(_DWORD *)(a1 + 8) &= ~0x80000000;
      }
      else
      {
        uint64_t v57 = *(int **)(a1 + 16);
        uint64_t v58 = 4 * a3;
        do
        {
          int v59 = *v57++;
          uint64_t v60 = v46[4 * v59];
          uint64_t v61 = (_DWORD *)v48[v60];
          _DWORD *v61 = v59;
          v48[v60] = v61 + 1;
          v58 -= 4;
        }
        while (v58);
      }
      *(int8x16_t *)(a1 + 16) = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
    }
    ++v42;
    v41 += 1024;
    v44 += 1024;
  }
  while (v42 != 4);
  return a1;
}

physx::Cm::RadixSort *physx::Cm::RadixSort::Sort(physx::Cm::RadixSort *this, float *a2, unsigned int a3)
{
  if (a2 && (int)a3 >= 1)
  {
    ++*((_DWORD *)this + 12);
    bzero(*((void **)this + 4), 0x1000uLL);
    unint64_t v6 = 4 * a3;
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = v7 + 1024;
    uint64_t v9 = v7 + 2048;
    uint64_t v10 = v7 + 3072;
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    {
      if (v6)
      {
        float v17 = *a2;
        uint64_t v18 = 4 * a3;
        int v14 = a2;
        do
        {
          float v19 = v17;
          float v17 = *v14;
          if (*v14 < v19) {
            goto LABEL_18;
          }
          ++*(_DWORD *)(v7 + 4 * LOBYTE(v17));
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          uint64_t v20 = *((unsigned __int8 *)v14++ + 3);
          ++*(_DWORD *)(v10 + 4 * v20);
          v18 -= 4;
        }
        while (v18);
      }
      uint64_t v21 = 0;
      ++*((_DWORD *)this + 13);
      uint64_t v22 = *((void *)this + 2);
      if (a3 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = a3;
      }
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = v21;
        ++v21;
      }
      while (v23 != v21);
    }
    else
    {
      if (v6)
      {
        uint64_t v11 = (unsigned int *)*((void *)this + 2);
        float v12 = a2[*v11];
        uint64_t v13 = 4 * a3;
        int v14 = a2;
        while (1)
        {
          float v15 = v12;
          float v12 = a2[*v11];
          if (v12 < v15) {
            break;
          }
          ++v11;
          ++*(_DWORD *)(v7 + 4 * *(unsigned __int8 *)v14);
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          uint64_t v16 = *((unsigned __int8 *)v14++ + 3);
          ++*(_DWORD *)(v10 + 4 * v16);
          v13 -= 4;
          if (!v13) {
            goto LABEL_8;
          }
        }
LABEL_18:
        unsigned int v25 = &a2[v6 / 4];
        while (v14 != v25)
        {
          ++*(_DWORD *)(v7 + 4 * *(unsigned __int8 *)v14);
          ++*(_DWORD *)(v8 + 4 * *((unsigned __int8 *)v14 + 1));
          ++*(_DWORD *)(v9 + 4 * *((unsigned __int8 *)v14 + 2));
          ++*(_DWORD *)(v10 + 4 * *((unsigned __int8 *)v14++ + 3));
        }
        uint64_t v26 = 0;
        uint64_t v27 = v7 + 3584;
        int32x4_t v28 = 0uLL;
        do
        {
          int32x4_t v28 = vaddq_s32(*(int32x4_t *)(v27 + v26), v28);
          v26 += 16;
        }
        while (v26 != 512);
        uint64_t v29 = 0;
        uint64_t v30 = vaddvq_s32(v28);
        if (a3 <= 1) {
          uint64_t v31 = 1;
        }
        else {
          uint64_t v31 = a3;
        }
        uint64x2_t v32 = (uint64x2_t)vdupq_n_s64(v31 - 1);
        int64x2_t v33 = vdupq_n_s64(2uLL);
        while (1)
        {
          uint64_t v34 = *((void *)this + 4) + (v29 << 10);
          uint64_t v35 = (char *)a2 + v29;
          uint64_t v36 = *((unsigned __int8 *)a2 + v29);
          int v37 = *(_DWORD *)(v34 + 4 * v36);
          if (v37 == a3) {
            uint64_t v34 = 0;
          }
          if (v29 == 3) {
            break;
          }
          if (v34)
          {
            uint64_t v42 = 0;
            uint64_t v43 = (void *)*((void *)this + 5);
            uint64_t v44 = *((void *)this + 3);
            *uint64_t v43 = v44;
            do
            {
              v44 += 4 * *(unsigned int *)(v34 + 4 * v42);
              v43[++v42] = v44;
            }
            while (v42 != 255);
            if ((*((_DWORD *)this + 2) & 0x80000000) == 0)
            {
              uint64_t v45 = (int *)*((void *)this + 2);
              uint64_t v46 = 4 * a3;
              do
              {
                int v47 = *v45++;
                uint64_t v48 = v35[4 * v47];
                uint64_t v49 = (_DWORD *)v43[v48];
                *uint64_t v49 = v47;
                v43[v48] = v49 + 1;
                v46 -= 4;
              }
              while (v46);
              goto LABEL_71;
            }
            uint64_t v71 = 0;
            for (uint64_t i = 0; i != v31; ++i)
            {
              uint64_t v73 = v35[v71 & 0xFFFFFFFC];
              uint64_t v74 = (_DWORD *)v43[v73];
              *uint64_t v74 = i;
              v43[v73] = v74 + 1;
              v71 += 4;
            }
LABEL_70:
            *((_DWORD *)this + 2) &= ~0x80000000;
            goto LABEL_71;
          }
LABEL_73:
          if (++v29 == 4) {
            return this;
          }
        }
        if (v37 == a3)
        {
          if (((char)v36 & 0x80000000) == 0) {
            return this;
          }
          if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
          {
            uint64_t v82 = 0;
            uint64_t v39 = *((void *)this + 3);
            unsigned int v83 = a3 - 1;
            int64x2_t v84 = (int64x2_t)xmmword_234361D20;
            do
            {
              int32x2_t v85 = vmovn_s64((int64x2_t)vcgeq_u64(v32, (uint64x2_t)v84));
              if (v85.i8[0]) {
                *(_DWORD *)(v39 + 4 * v82) = v83;
              }
              if (v85.i8[4]) {
                *(_DWORD *)(v39 + 4 * v82 + 4) = (v82 ^ 0xFFFFFFFE) + a3;
              }
              v82 += 2;
              int64x2_t v84 = vaddq_s64(v84, v33);
              v83 -= 2;
            }
            while (((v31 + 1) & 0x1FFFFFFFELL) != v82);
            *((_DWORD *)this + 2) &= ~0x80000000;
            uint64_t v40 = *((void *)this + 2);
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t v40 = *((void *)this + 2);
            uint64_t v39 = *((void *)this + 3);
            unsigned int v41 = a3 - 1;
            do
            {
              *(_DWORD *)(v39 + v38) = *(_DWORD *)(v40 + 4 * v41);
              v38 += 4;
              --v41;
            }
            while (4 * v31 != v38);
          }
        }
        else
        {
          uint64_t v50 = 0;
          uint64_t v51 = (int64x2_t *)*((void *)this + 5);
          uint64_t v52 = *((void *)this + 3) + 4 * v30;
          v51->i64[0] = v52;
          do
          {
            v52 += 4 * *(unsigned int *)(v34 + 4 * v50);
            v51->i64[++v50] = v52;
          }
          while (v50 != 127);
          uint64_t v53 = 0;
          uint64_t v54 = *((void *)this + 3);
          v51[127].i64[1] = v54;
          do
          {
            v54 += 4 * *(unsigned int *)(v34 + 1020 + 4 * v53);
            v51[127].i64[v53--] = v54;
          }
          while (v53 != -127);
          uint64_t v55 = 0;
          uint64_t v56 = v34 + 512;
          uint64_t v57 = v51 + 64;
          do
          {
            uint32x4_t v58 = *(uint32x4_t *)(v56 + v55);
            int64x2_t v59 = vaddq_s64(*v57, (int64x2_t)vshll_n_u32(*(uint32x2_t *)v58.i8, 2uLL));
            int64x2_t v60 = vaddq_s64(v57[1], (int64x2_t)vshll_high_n_u32(v58, 2uLL));
            *uint64_t v57 = v59;
            v57[1] = v60;
            v57 += 2;
            v55 += 16;
          }
          while (v55 != 512);
          if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
          {
            for (uint64_t j = 0; j != v31; ++j)
            {
              unint64_t v76 = LODWORD(a2[j]);
              uint64_t v77 = (v76 >> 21) & 0x7F8;
              uint64_t v78 = *(uint64_t *)((char *)v51->i64 + v77);
              BOOL v79 = (v76 & 0x80000000) != 0;
              if ((v76 & 0x80000000) != 0) {
                uint64_t v80 = v78 - 4;
              }
              else {
                uint64_t v80 = v78 + 4;
              }
              if (v79) {
                uint64_t v81 = -4;
              }
              else {
                uint64_t v81 = 0;
              }
              *(uint64_t *)((char *)v51->i64 + v77) = v80;
              *(_DWORD *)(v78 + v81) = j;
            }
            goto LABEL_70;
          }
          uint64_t v61 = (int *)*((void *)this + 2);
          uint64_t v62 = v31;
          do
          {
            int v64 = *v61++;
            int v63 = v64;
            unint64_t v65 = LODWORD(a2[v64]);
            uint64_t v66 = (v65 >> 21) & 0x7F8;
            uint64_t v67 = *(uint64_t *)((char *)v51->i64 + v66);
            BOOL v68 = (v65 & 0x80000000) != 0;
            if ((v65 & 0x80000000) != 0) {
              uint64_t v69 = v67 - 4;
            }
            else {
              uint64_t v69 = v67 + 4;
            }
            if (v68) {
              uint64_t v70 = -4;
            }
            else {
              uint64_t v70 = 0;
            }
            *(uint64_t *)((char *)v51->i64 + v66) = v69;
            *(_DWORD *)(v67 + v7physx::Sq::AABBTree::release(this, 0) = v63;
            --v62;
          }
          while (v62);
LABEL_71:
          uint64_t v40 = *((void *)this + 2);
          uint64_t v39 = *((void *)this + 3);
        }
        *((void *)this + 2) = v39;
        *((void *)this + 3) = v40;
        goto LABEL_73;
      }
LABEL_8:
      ++*((_DWORD *)this + 13);
    }
  }
  return this;
}

uint64_t physx::Cm::RadixSortBuffered::reset(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 56))
  {
    if (*(void *)(this + 24)) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v1 + 24) = 0;
    if (*(void *)(v1 + 16)) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v1 + 16) = 0;
  }
  *(_DWORD *)(v1 + 8) = 0x80000000;
  return this;
}

void physx::Cm::RadixSortBuffered::~RadixSortBuffered(physx::Cm::RadixSortBuffered *this)
{
  *(void *)this = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Cm::RadixSortBuffered::Resize(physx::Cm::RadixSortBuffered *this, unsigned int a2)
{
  if (*((unsigned char *)this + 56))
  {
    if (*((void *)this + 3)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 3) = 0;
    if (*((void *)this + 2)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 2) = 0;
    if (a2)
    {
      uint64_t v4 = 4 * a2;
      *((void *)this + 2) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmRadixSortBuffered.cpp", 76);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmRadixSortBuffered.cpp", 77);
    }
    else
    {
      uint64_t v5 = 0;
    }
    *((void *)this + 3) = v5;
  }
  return 1;
}

uint64_t physx::Cm::RadixSortBuffered::Sort(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (uint64_t)v1;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v2)
  {
    unsigned int v6 = v3;
    if (v3 >= 1)
    {
      int v7 = v4;
      uint64_t v8 = v2;
      unsigned int v9 = *((_DWORD *)v1 + 2) & 0x7FFFFFFF;
      if (v9 != v3)
      {
        if (v9 < v3) {
          physx::Cm::RadixSortBuffered::Resize(v1, v3);
        }
        *(_DWORD *)(v5 + 8) = v6 | 0x80000000;
      }
      memset(v11, 0, sizeof(v11));
      *(void *)(v5 + 32) = &v12;
      *(void *)(v5 + 4physx::Sq::AABBTree::release(this, 0) = v11;
      physx::Cm::RadixSort::Sort(v5, v8, v6, v7);
    }
  }
  return v5;
}

physx::Cm::RadixSortBuffered *physx::Cm::RadixSortBuffered::Sort(physx::Cm::RadixSortBuffered *this, const float *a2)
{
  MEMORY[0x270FA5388](this);
  uint64_t v5 = v2;
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (v3)
  {
    unsigned int v6 = v4;
    if (v4 >= 1)
    {
      int v7 = v3;
      unsigned int v8 = *((_DWORD *)v2 + 2) & 0x7FFFFFFF;
      if (v8 != v4)
      {
        if (v8 < v4) {
          physx::Cm::RadixSortBuffered::Resize(v2, v4);
        }
        *((_DWORD *)v5 + 2) = v6 | 0x80000000;
      }
      memset(v10, 0, sizeof(v10));
      *((void *)v5 + 4) = &v11;
      *((void *)v5 + 5) = v10;
      physx::Cm::RadixSort::Sort(v5, v7, v6);
    }
  }
  return v5;
}

__n128 physx::Cm::RenderOutput::operator<<(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 36) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 32);
  __n128 result = *(__n128 *)(a2 + 48);
  *(__n128 *)(a1 + 84) = result;
  return result;
}

uint64_t physx::Cm::RenderOutput::operator<<(uint64_t a1, uint64_t a2)
{
  physx::PxMat44::PxMat44((uint64_t)v6, a2);
  long long v3 = v6[1];
  *(_OWORD *)(a1 + 36) = v6[0];
  *(_OWORD *)(a1 + 52) = v3;
  long long v4 = v6[3];
  *(_OWORD *)(a1 + 68) = v6[2];
  *(_OWORD *)(a1 + 84) = v4;
  return a1;
}

uint64_t physx::Cm::RenderOutput::operator<<(uint64_t a1, float *a2)
{
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = (float)((float)(*a2 * *(float *)(a1 + 44)) + (float)(v4 * *(float *)(a1 + 60)))
     + (float)(v5 * *(float *)(a1 + 76));
  float v7 = *(float *)(a1 + 92);
  float32x2_t v8 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), *a2), vmul_n_f32(*(float32x2_t *)(a1 + 52), v4)), vmul_n_f32(*(float32x2_t *)(a1 + 68), v5)), *(float32x2_t *)(a1 + 84));
  float v9 = v6 + v7;
  *(float32x2_t *)a2 = v8;
  a2[2] = v6 + v7;
  unsigned int v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  switch(*(_DWORD *)a1)
  {
    case 0:
      uint64_t v11 = *(void *)(a1 + 104);
      unint64_t v56 = (unint64_t)v8;
      float v57 = v6 + v7;
      int v12 = *(_DWORD *)(a1 + 4);
      int v58 = v12;
      uint64_t v13 = *(unsigned int *)(v11 + 16);
      if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFFFu) <= v13)
      {
        physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack(v11 + 8, (uint64_t)&v56);
      }
      else
      {
        uint64_t v14 = *(void *)(v11 + 8) + 16 * v13;
        *(float32x2_t *)uint64_t v14 = v8;
        *(float *)(v14 + 8) = v9;
        *(_DWORD *)(v14 + 12) = v12;
        *(_DWORD *)(v11 + 16) = v13 + 1;
      }
      goto LABEL_31;
    case 1:
      if (v10 != 2) {
        goto LABEL_32;
      }
      uint64_t v15 = *(void *)(a1 + 104);
      unsigned int v16 = *(_DWORD *)(a1 + 8);
      unsigned int v17 = *(_DWORD *)(a1 + 12);
      unint64_t v56 = __PAIR64__(v17, v16);
      float v18 = *(float *)(a1 + 16);
      float v57 = v18;
      int v19 = *(_DWORD *)(a1 + 4);
      int v58 = v19;
      unint64_t v59 = (unint64_t)v8;
      float v60 = v9;
      int v61 = v19;
      uint64_t v20 = *(unsigned int *)(v15 + 32);
      if ((*(_DWORD *)(v15 + 36) & 0x7FFFFFFFu) <= v20)
      {
        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack(v15 + 24, (uint64_t)&v56);
      }
      else
      {
        uint64_t v21 = *(void *)(v15 + 24) + 32 * v20;
        *(_DWORD *)uint64_t v21 = v16;
        *(_DWORD *)(v21 + 4) = v17;
        *(float *)(v21 + 8) = v18;
        *(_DWORD *)(v21 + 12) = v19;
        *(float32x2_t *)(v21 + 16) = v8;
        *(float *)(v21 + 24) = v9;
        *(_DWORD *)(v21 + 28) = v19;
        *(_DWORD *)(v15 + 32) = v20 + 1;
      }
      goto LABEL_29;
    case 2:
      if (v10 < 2) {
        break;
      }
      uint64_t v22 = *(void *)(a1 + 104);
      unsigned int v23 = *(_DWORD *)(a1 + 8);
      unsigned int v24 = *(_DWORD *)(a1 + 12);
      unint64_t v56 = __PAIR64__(v24, v23);
      float v25 = *(float *)(a1 + 16);
      float v57 = v25;
      int v26 = *(_DWORD *)(a1 + 4);
      int v58 = v26;
      unint64_t v59 = (unint64_t)v8;
      float v60 = v9;
      int v61 = v26;
      uint64_t v27 = *(unsigned int *)(v22 + 32);
      if ((*(_DWORD *)(v22 + 36) & 0x7FFFFFFFu) <= v27)
      {
        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack(v22 + 24, (uint64_t)&v56);
      }
      else
      {
        uint64_t v28 = *(void *)(v22 + 24) + 32 * v27;
        *(_DWORD *)uint64_t v28 = v23;
        *(_DWORD *)(v28 + 4) = v24;
        *(float *)(v28 + 8) = v25;
        *(_DWORD *)(v28 + 12) = v26;
        *(float32x2_t *)(v28 + 16) = v8;
        *(float *)(v28 + 24) = v9;
        *(_DWORD *)(v28 + 28) = v26;
        *(_DWORD *)(v22 + 32) = v27 + 1;
      }
      goto LABEL_31;
    case 3:
      if (v10 != 3) {
        goto LABEL_32;
      }
      uint64_t v29 = *(void *)(a1 + 104);
      unsigned int v30 = *(_DWORD *)(a1 + 24);
      float v31 = *(float *)(a1 + 28);
      float v33 = *(float *)(a1 + 16);
      unsigned int v32 = *(_DWORD *)(a1 + 20);
      unint64_t v56 = __PAIR64__(v30, v32);
      float v57 = v31;
      int v34 = *(_DWORD *)(a1 + 4);
      int v58 = v34;
      unsigned int v36 = *(_DWORD *)(a1 + 8);
      unsigned int v35 = *(_DWORD *)(a1 + 12);
      unint64_t v59 = __PAIR64__(v35, v36);
      float v60 = v33;
      int v61 = v34;
      float32x2_t v62 = v8;
      float v63 = v9;
      unsigned int v37 = *(_DWORD *)(v29 + 48);
      unsigned int v38 = *(_DWORD *)(v29 + 52) & 0x7FFFFFFF;
      int v64 = v34;
      if (v38 <= v37)
      {
        physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack(v29 + 40, (uint64_t)&v56);
      }
      else
      {
        uint64_t v39 = *(void *)(v29 + 40) + 48 * v37;
        *(_DWORD *)uint64_t v39 = v32;
        *(_DWORD *)(v39 + 4) = v30;
        *(float *)(v39 + 8) = v31;
        *(_DWORD *)(v39 + 12) = v34;
        *(_DWORD *)(v39 + 16) = v36;
        *(_DWORD *)(v39 + 2physx::Sq::AABBTree::release(this, 0) = v35;
        *(float *)(v39 + 24) = v33;
        *(_DWORD *)(v39 + 28) = v34;
        *(float32x2_t *)(v39 + 32) = v8;
        *(float *)(v39 + 4physx::Sq::AABBTree::release(this, 0) = v9;
        *(_DWORD *)(v39 + 44) = v34;
        *(_DWORD *)(v29 + 48) = v37 + 1;
      }
LABEL_29:
      *(_DWORD *)(a1 + 32) = 0;
      break;
    case 4:
      if (v10 < 3) {
        goto LABEL_32;
      }
      uint64_t v40 = *(void *)(a1 + 104);
      uint64_t v41 = 20;
      if (v10) {
        uint64_t v42 = 8;
      }
      else {
        uint64_t v42 = 20;
      }
      unsigned int v43 = *(_DWORD *)(a1 + v42);
      uint64_t v44 = a1 + 8;
      if (v10) {
        uint64_t v45 = a1 + 8;
      }
      else {
        uint64_t v45 = a1 + 20;
      }
      unsigned int v46 = *(_DWORD *)(v45 + 4);
      float v47 = *(float *)(v45 + 8);
      if (v10) {
        uint64_t v44 = a1 + 20;
      }
      else {
        uint64_t v41 = 8;
      }
      unint64_t v56 = __PAIR64__(v46, v43);
      float v57 = v47;
      int v48 = *(_DWORD *)(a1 + 4);
      int v58 = v48;
      unsigned int v49 = *(_DWORD *)(a1 + v41);
      unsigned int v50 = *(_DWORD *)(v44 + 4);
      float v51 = *(float *)(v44 + 8);
      unint64_t v59 = __PAIR64__(v50, v49);
      float v60 = v51;
      int v61 = v48;
      float32x2_t v62 = v8;
      float v63 = v9;
      unsigned int v52 = *(_DWORD *)(v40 + 48);
      unsigned int v53 = *(_DWORD *)(v40 + 52) & 0x7FFFFFFF;
      int v64 = v48;
      if (v53 <= v52)
      {
        physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack(v40 + 40, (uint64_t)&v56);
      }
      else
      {
        uint64_t v54 = *(void *)(v40 + 40) + 48 * v52;
        *(_DWORD *)uint64_t v54 = v43;
        *(_DWORD *)(v54 + 4) = v46;
        *(float *)(v54 + 8) = v47;
        *(_DWORD *)(v54 + 12) = v48;
        *(_DWORD *)(v54 + 16) = v49;
        *(_DWORD *)(v54 + 2physx::Sq::AABBTree::release(this, 0) = v50;
        *(float *)(v54 + 24) = v51;
        *(_DWORD *)(v54 + 28) = v48;
        *(float32x2_t *)(v54 + 32) = v8;
        *(float *)(v54 + 4physx::Sq::AABBTree::release(this, 0) = v9;
        *(_DWORD *)(v54 + 44) = v48;
        *(_DWORD *)(v40 + 48) = v52 + 1;
      }
LABEL_31:
      unsigned int v10 = *(_DWORD *)(a1 + 32);
LABEL_32:
      if (v10 >= 2)
      {
        *(void *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 16);
      }
      break;
    default:
      goto LABEL_32;
  }
  *(void *)(a1 + 8) = *(void *)a2;
  *(float *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t physx::Cm::operator<<(_DWORD *a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    *a1 = 2;
    a1[8] = 0;
    int v3 = *((_DWORD *)a2 + 2);
    uint64_t v112 = *a2;
    int v113 = v3;
    uint64_t v4 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, (float *)&v112);
    int v110 = *((_DWORD *)a2 + 3);
    uint64_t v111 = *(uint64_t *)((char *)a2 + 4);
    uint64_t v5 = physx::Cm::RenderOutput::operator<<(v4, (float *)&v110);
    int v6 = *((_DWORD *)a2 + 2);
    uint64_t v108 = *(uint64_t *)((char *)a2 + 12);
    int v109 = v6;
    uint64_t v7 = physx::Cm::RenderOutput::operator<<(v5, (float *)&v108);
    float v8 = *((float *)a2 + 4);
    float v9 = *((float *)a2 + 2);
    v107[0] = *(float *)a2;
    v107[1] = v8;
    v107[2] = v9;
    uint64_t v10 = physx::Cm::RenderOutput::operator<<(v7, v107);
    int v11 = *((_DWORD *)a2 + 2);
    uint64_t v105 = *a2;
    int v106 = v11;
    uint64_t v12 = physx::Cm::RenderOutput::operator<<(v10, (float *)&v105);
    int v13 = *((_DWORD *)a2 + 5);
    uint64_t v103 = *a2;
    int v104 = v13;
    uint64_t v14 = physx::Cm::RenderOutput::operator<<(v12, (float *)&v103);
    float v15 = *((float *)a2 + 1);
    float v16 = *((float *)a2 + 5);
    v102[0] = *((float *)a2 + 3);
    v102[1] = v15;
    v102[2] = v16;
    uint64_t v17 = physx::Cm::RenderOutput::operator<<(v14, v102);
    int v18 = *((_DWORD *)a2 + 5);
    uint64_t v100 = *(uint64_t *)((char *)a2 + 12);
    int v101 = v18;
    uint64_t v19 = physx::Cm::RenderOutput::operator<<(v17, (float *)&v100);
    int v98 = *(_DWORD *)a2;
    uint64_t v99 = a2[2];
    uint64_t v20 = physx::Cm::RenderOutput::operator<<(v19, (float *)&v98);
    int v21 = *((_DWORD *)a2 + 5);
    uint64_t v96 = *a2;
    int v97 = v21;
    uint64_t v22 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v20, (float *)&v96);
    *uint64_t v22 = 1;
    v22[8] = 0;
    int v94 = *((_DWORD *)a2 + 3);
    uint64_t v95 = *(uint64_t *)((char *)a2 + 4);
    uint64_t v23 = physx::Cm::RenderOutput::operator<<((uint64_t)v22, (float *)&v94);
    float v24 = *((float *)a2 + 1);
    float v25 = *((float *)a2 + 5);
    v93[0] = *((float *)a2 + 3);
    v93[1] = v24;
    v93[2] = v25;
    uint64_t v26 = physx::Cm::RenderOutput::operator<<(v23, v93);
    int v27 = *((_DWORD *)a2 + 2);
    uint64_t v91 = *(uint64_t *)((char *)a2 + 12);
    int v92 = v27;
    uint64_t v28 = physx::Cm::RenderOutput::operator<<(v26, (float *)&v91);
    int v29 = *((_DWORD *)a2 + 5);
    uint64_t v89 = *(uint64_t *)((char *)a2 + 12);
    int v90 = v29;
    uint64_t v30 = physx::Cm::RenderOutput::operator<<(v28, (float *)&v89);
    float v31 = *((float *)a2 + 4);
    float v32 = *((float *)a2 + 2);
    v88[0] = *(float *)a2;
    v88[1] = v31;
    v88[2] = v32;
    uint64_t v33 = physx::Cm::RenderOutput::operator<<(v30, v88);
    int v34 = *((_DWORD *)a2 + 4);
    int v35 = *((_DWORD *)a2 + 5);
    int v87 = *(_DWORD *)a2;
    unsigned int v36 = (float *)&v87;
  }
  else
  {
    *a1 = 4;
    a1[8] = 0;
    int v37 = *((_DWORD *)a2 + 2);
    uint64_t v85 = *a2;
    int v86 = v37;
    uint64_t v38 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, (float *)&v85);
    float v39 = *((float *)a2 + 4);
    float v40 = *((float *)a2 + 2);
    v84[0] = *(float *)a2;
    v84[1] = v39;
    v84[2] = v40;
    uint64_t v41 = physx::Cm::RenderOutput::operator<<(v38, v84);
    int v82 = *((_DWORD *)a2 + 3);
    uint64_t v83 = *(uint64_t *)((char *)a2 + 4);
    uint64_t v42 = physx::Cm::RenderOutput::operator<<(v41, (float *)&v82);
    int v43 = *((_DWORD *)a2 + 2);
    uint64_t v80 = *(uint64_t *)((char *)a2 + 12);
    int v81 = v43;
    uint64_t v44 = physx::Cm::RenderOutput::operator<<(v42, (float *)&v80);
    int v45 = *((_DWORD *)a2 + 5);
    uint64_t v78 = *(uint64_t *)((char *)a2 + 12);
    int v79 = v45;
    uint64_t v46 = physx::Cm::RenderOutput::operator<<(v44, (float *)&v78);
    float v47 = *((float *)a2 + 4);
    float v48 = *((float *)a2 + 2);
    v77[0] = *(float *)a2;
    v77[1] = v47;
    v77[2] = v48;
    uint64_t v49 = physx::Cm::RenderOutput::operator<<(v46, v77);
    int v75 = *(_DWORD *)a2;
    uint64_t v76 = a2[2];
    uint64_t v50 = physx::Cm::RenderOutput::operator<<(v49, (float *)&v75);
    int v51 = *((_DWORD *)a2 + 2);
    uint64_t v73 = *a2;
    int v74 = v51;
    uint64_t v52 = physx::Cm::RenderOutput::operator<<(v50, (float *)&v73);
    int v53 = *((_DWORD *)a2 + 5);
    uint64_t v71 = *a2;
    int v72 = v53;
    uint64_t v54 = physx::Cm::RenderOutput::operator<<(v52, (float *)&v71);
    int v69 = *((_DWORD *)a2 + 3);
    uint64_t v70 = *(uint64_t *)((char *)a2 + 4);
    uint64_t v55 = physx::Cm::RenderOutput::operator<<(v54, (float *)&v69);
    float v56 = *((float *)a2 + 1);
    float v57 = *((float *)a2 + 5);
    v68[0] = *((float *)a2 + 3);
    v68[1] = v56;
    v68[2] = v57;
    uint64_t v58 = physx::Cm::RenderOutput::operator<<(v55, v68);
    int v59 = *((_DWORD *)a2 + 5);
    uint64_t v66 = *(uint64_t *)((char *)a2 + 12);
    int v67 = v59;
    uint64_t v60 = physx::Cm::RenderOutput::operator<<(v58, (float *)&v66);
    int v61 = *((_DWORD *)a2 + 5);
    uint64_t v64 = *a2;
    int v65 = v61;
    uint64_t v33 = physx::Cm::RenderOutput::operator<<(v60, (float *)&v64);
    int v34 = *((_DWORD *)a2 + 4);
    int v35 = *((_DWORD *)a2 + 5);
    int v63 = *(_DWORD *)a2;
    unsigned int v36 = (float *)&v63;
  }
  *((_DWORD *)v36 + 1) = v34;
  *((_DWORD *)v36 + 2) = v35;
  return physx::Cm::RenderOutput::operator<<(v33, v36);
}

uint64_t physx::Cm::operator<<(_DWORD *a1, float *a2)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = a2[3];
  float v7 = v6 - *a2;
  float v9 = a2[4];
  float v8 = a2[5];
  float v10 = v9 - v4;
  float v11 = v8 - v5;
  float v12 = sqrtf((float)((float)(v10 * v10) + (float)(v7 * v7)) + (float)(v11 * v11));
  if (v12 > 0.0)
  {
    float v13 = 1.0 / v12;
    float v7 = v7 * v13;
    float v10 = v10 * v13;
    float v11 = v11 * v13;
  }
  float v14 = fabsf(v7);
  BOOL v15 = v14 < 0.70711;
  float v16 = 0.0;
  if (v14 >= 0.70711) {
    float v17 = -v10;
  }
  else {
    float v17 = 0.0;
  }
  if (v15) {
    float v18 = -v11;
  }
  else {
    float v18 = v7;
  }
  if (v15) {
    float v16 = v10;
  }
  float v19 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v16 * v16));
  if (v19 > 0.0)
  {
    float v20 = 1.0 / v19;
    float v17 = v17 * v20;
    float v18 = v18 * v20;
    float v16 = v16 * v20;
  }
  float v21 = (float)(v11 * v17) - (float)(v7 * v16);
  float v22 = (float)(v17 * (float)-v10) + (float)(v7 * v18);
  float v23 = a2[6];
  float v24 = v17 * (float)(v23 * 0.25);
  float v25 = v18 * (float)(v23 * 0.25);
  float v26 = v16 * (float)(v23 * 0.25);
  float v27 = (float)(v23 * 0.25) * 1.7321;
  float v46 = v21 * v27;
  float v47 = (float)((float)(v18 * (float)-v11) + (float)(v10 * v16)) * v27;
  float v28 = v22 * v27;
  float v29 = v6 - (float)(v7 * v23);
  float v30 = v9 - (float)(v10 * v23);
  *a1 = 1;
  a1[8] = 0;
  float v31 = v8 - (float)(v11 * v23);
  v58[0] = v3;
  v58[1] = v4;
  v58[2] = v5;
  uint64_t v32 = physx::Cm::RenderOutput::operator<<((uint64_t)a1, v58);
  uint64_t v56 = *(void *)(a2 + 3);
  int v57 = *((_DWORD *)a2 + 5);
  uint64_t v33 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v32, (float *)&v56);
  *uint64_t v33 = 4;
  v33[8] = 0;
  uint64_t v54 = *(void *)(a2 + 3);
  int v55 = *((_DWORD *)a2 + 5);
  uint64_t v34 = physx::Cm::RenderOutput::operator<<((uint64_t)v33, (float *)&v54);
  float v44 = v25 + (float)(v30 + v25);
  float v45 = v24 + (float)(v29 + v24);
  float v35 = v26 + (float)(v31 + v26);
  v53[0] = v45;
  v53[1] = v44;
  v53[2] = v35;
  uint64_t v36 = physx::Cm::RenderOutput::operator<<(v34, v53);
  float v37 = v29 - v24;
  float v38 = v30 - v25;
  float v39 = v31 - v26;
  v52[0] = v37 - v47;
  v52[1] = v38 - v46;
  v52[2] = v39 - v28;
  uint64_t v40 = physx::Cm::RenderOutput::operator<<(v36, v52);
  v51[0] = v37 + v47;
  v51[1] = v38 + v46;
  v51[2] = v39 + v28;
  uint64_t v41 = physx::Cm::RenderOutput::operator<<(v40, v51);
  uint64_t v49 = *(void *)(a2 + 3);
  int v50 = *((_DWORD *)a2 + 5);
  uint64_t v42 = physx::Cm::RenderOutput::operator<<(v41, (float *)&v49);
  v48[0] = v45;
  v48[1] = v44;
  v48[2] = v35;
  return physx::Cm::RenderOutput::operator<<(v42, v48);
}

uint64_t physx::Cm::operator<<(_DWORD *a1, uint64_t a2)
{
  float v3 = *(float *)a2;
  float v4 = sqrtf((float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 4)) + (float)(v3 * v3))+ (float)(*(float *)(a2 + 8) * *(float *)(a2 + 8)));
  a1[1] = *(_DWORD *)(a2 + 12);
  *((float *)&v12 + 1) = v3 + 0.0;
  uint64_t v11 = 0;
  LODWORD(v12) = 0;
  float v5 = v4 * 0.15;
  uint64_t v13 = 0;
  float v14 = v4 * 0.15;
  float v6 = (_DWORD *)physx::Cm::operator<<(a1, (float *)&v11);
  v6[1] = *(_DWORD *)(a2 + 16);
  *(float *)&unsigned int v7 = *(float *)(a2 + 4) + 0.0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = v7;
  float v14 = v5;
  float v8 = (_DWORD *)physx::Cm::operator<<(v6, (float *)&v11);
  v8[1] = *(_DWORD *)(a2 + 20);
  float v9 = *(float *)(a2 + 8) + 0.0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  LODWORD(v13) = 0;
  *((float *)&v13 + 1) = v9;
  float v14 = v5;
  return physx::Cm::operator<<(v8, (float *)&v11);
}

{
  unsigned int v4;
  unsigned int v5;
  float v6;
  float v7;
  float v8;
  __float2 v9;
  float v10;
  float v12[3];
  float v13[3];

  float v4 = *(_DWORD *)a2;
  *a1 = 2;
  a1[8] = 0;
  if (v4)
  {
    float v5 = 0;
    float v6 = 6.2832 / (float)v4;
    unsigned int v7 = 0.0;
    do
    {
      float v8 = *(float *)(a2 + 4);
      float v9 = __sincosf_stret(v7);
      v13[0] = v9.__sinval * v8;
      v13[1] = v9.__cosval * v8;
      void v13[2] = 0.0;
      physx::Cm::RenderOutput::operator<<((uint64_t)a1, v13);
      ++v5;
      unsigned int v7 = v6 + v7;
    }
    while (v5 < *(_DWORD *)a2);
  }
  float v10 = *(float *)(a2 + 4);
  v12[0] = 0.0;
  v12[1] = v10;
  v12[2] = 0.0;
  return physx::Cm::RenderOutput::operator<<((uint64_t)a1, v12);
}

{
  float v4;
  float v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  float v9;
  __float2 v10;
  float v11;
  __float2 v12;
  float v14[3];
  float v15[3];

  float v5 = *(float *)(a2 + 8);
  float v4 = *(float *)(a2 + 12);
  float v6 = *(_DWORD *)a2;
  *a1 = 2;
  a1[8] = 0;
  if (v6)
  {
    unsigned int v7 = 0;
    float v8 = (float)(v4 - v5) / (float)v6;
    do
    {
      float v9 = *(float *)(a2 + 4);
      float v10 = __sincosf_stret(v5);
      v15[0] = v10.__sinval * v9;
      v15[1] = v10.__cosval * v9;
      v15[2] = 0.0;
      physx::Cm::RenderOutput::operator<<((uint64_t)a1, v15);
      ++v7;
      float v5 = v8 + v5;
    }
    while (v7 < *(_DWORD *)a2);
    float v4 = *(float *)(a2 + 12);
  }
  uint64_t v11 = *(float *)(a2 + 4);
  uint64_t v12 = __sincosf_stret(v4);
  v14[0] = v11 * v12.__sinval;
  v14[1] = v11 * v12.__cosval;
  v14[2] = 0.0;
  return physx::Cm::RenderOutput::operator<<((uint64_t)a1, v14);
}

uint64_t physx::Cm::RenderOutput::outputCapsule(uint64_t a1, float32x2_t *a2, float a3, float a4)
{
  float v6 = a2[1].f32[0];
  __int32 v117 = a2[1].i32[1];
  float v8 = a2[3].f32[0];
  float v7 = a2[3].f32[1];
  float v10 = a2[5].f32[0];
  float v9 = a2[5].f32[1];
  float v109 = a2[7].f32[1] + 0.0;
  float v111 = (float)((float)((float)(v8 * 0.0) - (float)(v6 * a4)) + (float)(v10 * 0.0)) + a2[7].f32[0];
  *(float *)(a1 + 44) = v6;
  *(_DWORD *)(a1 + 48) = v117;
  float v11 = v6;
  float v105 = v6;
  *(float *)(a1 + 6physx::Sq::AABBTree::release(this, 0) = v8;
  *(float *)(a1 + 64) = v7;
  *(float *)(a1 + 76) = v10;
  *(float *)(a1 + 8physx::Sq::AABBTree::release(this, 0) = v9;
  *(float *)(a1 + 92) = v111;
  *(float *)(a1 + 96) = v109;
  int v123 = 100;
  float v124 = a3;
  uint64_t v125 = 0x40C90FDB40490FDBLL;
  float v12 = -v10;
  float v103 = -v10;
  float v107 = -v9;
  float32x2_t v13 = *a2;
  float32x2_t v115 = a2[2];
  float32x2_t v102 = a2[4];
  float32x2_t v14 = vadd_f32(vadd_f32(vsub_f32(vmul_f32(v115, 0), vmul_n_f32(*a2, a4)), vmul_f32(v102, 0)), a2[6]);
  *(float32x2_t *)(a1 + 36) = *a2;
  *(float32x2_t *)(a1 + 52) = v115;
  *(float32x2_t *)(a1 + 68) = v102;
  *(float32x2_t *)(a1 + 84) = v14;
  uint64_t v15 = physx::Cm::operator<<((_DWORD *)a1, (uint64_t)&v123);
  *(float32x2_t *)(v15 + 36) = v13;
  *(float *)(v15 + 44) = v11;
  *(_DWORD *)(v15 + 48) = v117;
  *(float *)(v15 + 52) = -v102.f32[0];
  *(float *)(v15 + 56) = -v102.f32[1];
  *(float *)(v15 + 6physx::Sq::AABBTree::release(this, 0) = v12;
  *(float *)(v15 + 64) = v107;
  *(float32x2_t *)(v15 + 68) = v115;
  *(float *)(v15 + 76) = v8;
  *(float *)(v15 + 8physx::Sq::AABBTree::release(this, 0) = v7;
  *(float32x2_t *)(v15 + 84) = v14;
  *(float *)(v15 + 92) = v111;
  *(float *)(v15 + 96) = v109;
  int v123 = 100;
  float v124 = a3;
  uint64_t v125 = 0x40C90FDB40490FDBLL;
  uint64_t v16 = physx::Cm::operator<<((_DWORD *)v15, (uint64_t)&v123);
  *(float *)(v16 + 36) = -v115.f32[0];
  *(float *)(v16 + 4physx::Sq::AABBTree::release(this, 0) = -v115.f32[1];
  *(float *)(v16 + 44) = -v8;
  *(float *)(v16 + 48) = -v7;
  *(float *)(v16 + 52) = -v102.f32[0];
  *(float *)(v16 + 56) = -v102.f32[1];
  *(float *)(v16 + 6physx::Sq::AABBTree::release(this, 0) = v103;
  *(float *)(v16 + 64) = v107;
  *(float32x2_t *)(v16 + 68) = v13;
  *(float *)(v16 + 76) = v105;
  *(_DWORD *)(v16 + 8physx::Sq::AABBTree::release(this, 0) = v117;
  *(float32x2_t *)(v16 + 84) = v14;
  *(float *)(v16 + 92) = v111;
  *(float *)(v16 + 96) = v109;
  int v123 = 100;
  float v124 = a3;
  uint64_t v17 = physx::Cm::operator<<((_DWORD *)v16, (uint64_t)&v123);
  v115.i32[0] = a2[1].i32[0];
  __int32 v118 = a2[1].i32[1];
  v13.i32[0] = a2[3].i32[0];
  float v18 = a2[3].f32[1];
  float v19 = a2[5].f32[0];
  float v20 = a2[5].f32[1];
  float v110 = (float)((float)((float)(v115.f32[0] * a4) + (float)(v13.f32[0] * 0.0)) + (float)(v19 * 0.0)) + a2[7].f32[0];
  float v108 = a2[7].f32[1] + 0.0;
  *(_DWORD *)(v17 + 44) = v115.i32[0];
  *(_DWORD *)(v17 + 48) = v118;
  *(_DWORD *)(v17 + 6physx::Sq::AABBTree::release(this, 0) = v13.i32[0];
  *(float *)(v17 + 64) = v18;
  *(float *)(v17 + 76) = v19;
  *(float *)(v17 + 8physx::Sq::AABBTree::release(this, 0) = v20;
  *(float *)(v17 + 92) = v110;
  *(float *)(v17 + 96) = v108;
  int v123 = 100;
  float v124 = a3;
  uint64_t v125 = 0x40490FDB00000000;
  float v21 = -v19;
  float v22 = -v20;
  float v106 = -v20;
  float32x2_t v23 = *a2;
  float32x2_t v113 = a2[2];
  float32x2_t v104 = a2[4];
  float32x2_t v24 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*a2, a4), vmul_f32(v113, 0)), vmul_f32(v104, 0)), a2[6]);
  *(float32x2_t *)(v17 + 36) = *a2;
  *(float32x2_t *)(v17 + 52) = v113;
  *(float32x2_t *)(v17 + 68) = v104;
  *(float32x2_t *)(v17 + 84) = v24;
  uint64_t v25 = physx::Cm::operator<<((_DWORD *)v17, (uint64_t)&v123);
  *(float32x2_t *)(v25 + 36) = v23;
  *(_DWORD *)(v25 + 44) = v115.i32[0];
  *(_DWORD *)(v25 + 48) = v118;
  *(float *)(v25 + 52) = -v104.f32[0];
  *(float *)(v25 + 56) = -v104.f32[1];
  *(float *)(v25 + 6physx::Sq::AABBTree::release(this, 0) = v21;
  *(float *)(v25 + 64) = v22;
  *(float32x2_t *)(v25 + 68) = v113;
  *(_DWORD *)(v25 + 76) = v13.i32[0];
  *(float *)(v25 + 8physx::Sq::AABBTree::release(this, 0) = v18;
  *(float32x2_t *)(v25 + 84) = v24;
  *(float *)(v25 + 92) = v110;
  *(float *)(v25 + 96) = v108;
  int v123 = 100;
  float v124 = a3;
  uint64_t v125 = 0x40490FDB00000000;
  uint64_t v26 = physx::Cm::operator<<((_DWORD *)v25, (uint64_t)&v123);
  *(float *)(v26 + 36) = -v113.f32[0];
  *(float *)(v26 + 4physx::Sq::AABBTree::release(this, 0) = -v113.f32[1];
  *(float *)(v26 + 44) = -v13.f32[0];
  *(float *)(v26 + 48) = -v18;
  *(float *)(v26 + 52) = -v104.f32[0];
  *(float *)(v26 + 56) = -v104.f32[1];
  *(float *)(v26 + 6physx::Sq::AABBTree::release(this, 0) = v21;
  *(float *)(v26 + 64) = v106;
  *(float32x2_t *)(v26 + 68) = v23;
  *(_DWORD *)(v26 + 76) = v115.i32[0];
  *(_DWORD *)(v26 + 8physx::Sq::AABBTree::release(this, 0) = v118;
  *(float32x2_t *)(v26 + 84) = v24;
  *(float *)(v26 + 92) = v110;
  *(float *)(v26 + 96) = v108;
  int v123 = 100;
  float v124 = a3;
  uint64_t v27 = physx::Cm::operator<<((_DWORD *)v26, (uint64_t)&v123);
  physx::Cm::RenderOutput::operator<<(v27, (uint64_t)a2);
  float v29 = a4;
  float v30 = a2->f32[0];
  float v31 = a2->f32[1];
  float v32 = a2[1].f32[0];
  float v33 = a2[2].f32[0];
  float v34 = a2[2].f32[1];
  float v35 = a2[3].f32[0];
  float v36 = a2->f32[0] * a4;
  float v37 = v31 * a4;
  float v38 = v32 * a4;
  float v39 = a2[4].f32[0];
  float v40 = a2[4].f32[1];
  float v41 = v39 * 0.0;
  float v42 = v40 * 0.0;
  float v43 = a2[5].f32[0];
  float v44 = v43 * 0.0;
  float v45 = a2[6].f32[0];
  float v46 = a2[6].f32[1];
  float v47 = a2[7].f32[0];
  float v48 = (float)((float)((float)(v33 * a3) - v36) + (float)(v39 * 0.0)) + v45;
  float v49 = (float)((float)((float)(v34 * a3) - (float)(v31 * a4)) + (float)(v40 * 0.0)) + v46;
  float v50 = (float)((float)((float)(v35 * a3) - (float)(v32 * a4)) + (float)(v43 * 0.0)) + v47;
  float v51 = (float)((float)(v36 + (float)(v33 * a3)) + (float)(v39 * 0.0)) + v45;
  float v52 = (float)((float)((float)(v31 * a4) + (float)(v34 * a3)) + (float)(v40 * 0.0)) + v46;
  float v53 = (float)((float)((float)(v32 * a4) + (float)(v35 * a3)) + (float)(v43 * 0.0)) + v47;
  uint64_t v54 = *(void *)(v28 + 104);
  unsigned int v55 = *(_DWORD *)(v54 + 32);
  unsigned int v56 = *(_DWORD *)(v54 + 36) & 0x7FFFFFFF;
  unsigned int v57 = v55 + 1;
  if (v55 + 1 <= v56)
  {
    uint64_t v61 = *(void *)(v28 + 104);
  }
  else
  {
    if (v56) {
      unsigned int v58 = 2 * *(_DWORD *)(v54 + 36);
    }
    else {
      unsigned int v58 = 2;
    }
    if (v57 <= v58) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = v55 + 1;
    }
    float v60 = (float)((float)((float)(v32 * a4) + (float)(v35 * a3)) + (float)(v43 * 0.0)) + v47;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v54 + 24, v59);
    float v53 = v60;
    float v29 = a4;
    unsigned int v55 = *(_DWORD *)(v54 + 32);
    float v30 = a2->f32[0];
    float v31 = a2->f32[1];
    float v32 = a2[1].f32[0];
    float v33 = a2[2].f32[0];
    float v34 = a2[2].f32[1];
    float v35 = a2[3].f32[0];
    float v39 = a2[4].f32[0];
    float v40 = a2[4].f32[1];
    float v43 = a2[5].f32[0];
    float v45 = a2[6].f32[0];
    float v46 = a2[6].f32[1];
    float v47 = a2[7].f32[0];
    uint64_t v61 = *(void *)(a1 + 104);
    float v36 = a2->f32[0] * a4;
    float v37 = v31 * a4;
    float v38 = v32 * a4;
    float v41 = v39 * 0.0;
    float v42 = v40 * 0.0;
    float v44 = v43 * 0.0;
    unsigned int v56 = *(_DWORD *)(v61 + 36) & 0x7FFFFFFF;
  }
  uint64_t v62 = *(void *)(v54 + 24) + 32 * v55;
  *(_DWORD *)(v54 + 32) = v57;
  *(float *)uint64_t v62 = v48;
  *(float *)(v62 + 4) = v49;
  *(float *)(v62 + 8) = v50;
  *(float *)(v62 + 16) = v51;
  *(float *)(v62 + 2physx::Sq::AABBTree::release(this, 0) = v52;
  *(float *)(v62 + 24) = v53;
  int v63 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v62 + 28) = v63;
  *(_DWORD *)(v62 + 12) = v63;
  float v64 = v45 + (float)(v41 + (float)((float)-(float)(a3 * v33) - v36));
  float v65 = v46 + (float)(v42 + (float)((float)-(float)(a3 * v34) - v37));
  float v66 = v47 + (float)(v44 + (float)((float)-(float)(a3 * v35) - v38));
  float v67 = v45 + (float)(v41 + (float)(v36 - (float)(a3 * v33)));
  float v68 = v46 + (float)(v42 + (float)(v37 - (float)(a3 * v34)));
  float v69 = v47 + (float)(v44 + (float)(v38 - (float)(a3 * v35)));
  unsigned int v70 = *(_DWORD *)(v61 + 32);
  unsigned int v71 = v70 + 1;
  if (v70 + 1 <= v56)
  {
    uint64_t v74 = v61;
  }
  else
  {
    if (v56) {
      unsigned int v72 = 2 * v56;
    }
    else {
      unsigned int v72 = 2;
    }
    if (v71 <= v72) {
      unsigned int v73 = v72;
    }
    else {
      unsigned int v73 = v70 + 1;
    }
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v61 + 24, v73);
    float v29 = a4;
    unsigned int v70 = *(_DWORD *)(v61 + 32);
    int v63 = *(_DWORD *)(a1 + 4);
    float v30 = a2->f32[0];
    float v31 = a2->f32[1];
    float v32 = a2[1].f32[0];
    float v33 = a2[2].f32[0];
    float v34 = a2[2].f32[1];
    float v35 = a2[3].f32[0];
    float v39 = a2[4].f32[0];
    float v40 = a2[4].f32[1];
    float v43 = a2[5].f32[0];
    float v45 = a2[6].f32[0];
    float v46 = a2[6].f32[1];
    float v47 = a2[7].f32[0];
    uint64_t v74 = *(void *)(a1 + 104);
    float v36 = a2->f32[0] * a4;
    float v37 = v31 * a4;
    float v38 = v32 * a4;
    unsigned int v56 = *(_DWORD *)(v74 + 36) & 0x7FFFFFFF;
  }
  uint64_t v75 = *(void *)(v61 + 24) + 32 * v70;
  *(_DWORD *)(v61 + 32) = v71;
  *(float *)uint64_t v75 = v64;
  *(float *)(v75 + 4) = v65;
  *(float *)(v75 + 8) = v66;
  *(float *)(v75 + 16) = v67;
  *(float *)(v75 + 2physx::Sq::AABBTree::release(this, 0) = v68;
  *(float *)(v75 + 24) = v69;
  *(_DWORD *)(v75 + 28) = v63;
  *(_DWORD *)(v75 + 12) = v63;
  float v76 = v45 + (float)((float)(v39 * a3) + (float)((float)(v33 * 0.0) - v36));
  float v77 = v46 + (float)((float)(v40 * a3) + (float)((float)(v34 * 0.0) - v37));
  float v78 = v47 + (float)((float)(v43 * a3) + (float)((float)(v35 * 0.0) - v38));
  float v79 = v45 + (float)((float)(v39 * a3) + (float)(v36 + (float)(v33 * 0.0)));
  float v80 = v46 + (float)((float)(v40 * a3) + (float)(v37 + (float)(v34 * 0.0)));
  float v81 = v47 + (float)((float)(v43 * a3) + (float)(v38 + (float)(v35 * 0.0)));
  unsigned int v82 = *(_DWORD *)(v74 + 32);
  unsigned int v83 = v82 + 1;
  if (v82 + 1 <= v56)
  {
    uint64_t v86 = v74;
  }
  else
  {
    if (v56) {
      unsigned int v84 = 2 * v56;
    }
    else {
      unsigned int v84 = 2;
    }
    if (v83 <= v84) {
      unsigned int v85 = v84;
    }
    else {
      unsigned int v85 = v82 + 1;
    }
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v74 + 24, v85);
    float v29 = a4;
    unsigned int v82 = *(_DWORD *)(v74 + 32);
    int v63 = *(_DWORD *)(a1 + 4);
    float v30 = a2->f32[0];
    float v31 = a2->f32[1];
    float v32 = a2[1].f32[0];
    float v33 = a2[2].f32[0];
    float v34 = a2[2].f32[1];
    float v35 = a2[3].f32[0];
    float v39 = a2[4].f32[0];
    float v40 = a2[4].f32[1];
    float v43 = a2[5].f32[0];
    float v45 = a2[6].f32[0];
    float v46 = a2[6].f32[1];
    float v47 = a2[7].f32[0];
    uint64_t v86 = *(void *)(a1 + 104);
    unsigned int v56 = *(_DWORD *)(v86 + 36) & 0x7FFFFFFF;
  }
  float v87 = -a3;
  uint64_t v88 = *(void *)(v74 + 24) + 32 * v82;
  *(_DWORD *)(v74 + 32) = v83;
  *(float *)uint64_t v88 = v76;
  *(float *)(v88 + 4) = v77;
  *(float *)(v88 + 8) = v78;
  *(float *)(v88 + 16) = v79;
  *(float *)(v88 + 2physx::Sq::AABBTree::release(this, 0) = v80;
  *(float *)(v88 + 24) = v81;
  *(_DWORD *)(v88 + 28) = v63;
  *(_DWORD *)(v88 + 12) = v63;
  unsigned int v89 = *(_DWORD *)(v86 + 32);
  unsigned int v90 = v89 + 1;
  if (v89 + 1 > v56)
  {
    if (v56) {
      unsigned int v91 = 2 * v56;
    }
    else {
      unsigned int v91 = 2;
    }
    if (v90 <= v91) {
      unsigned int v92 = v91;
    }
    else {
      unsigned int v92 = v89 + 1;
    }
    float v93 = v30;
    float v112 = v43;
    float v114 = v31;
    float v94 = v33;
    float v95 = v32;
    float v96 = v34;
    float v119 = v39;
    float v97 = v35;
    float v122 = v47;
    float v98 = v45;
    float v116 = v40;
    float v99 = v46;
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v86 + 24, v92);
    float v46 = v99;
    float v40 = v116;
    float v45 = v98;
    float v47 = v122;
    float v35 = v97;
    float v39 = v119;
    float v34 = v96;
    float v43 = v112;
    float v31 = v114;
    float v32 = v95;
    float v33 = v94;
    float v30 = v93;
    float v29 = a4;
    unsigned int v89 = *(_DWORD *)(v86 + 32);
    int v63 = *(_DWORD *)(a1 + 4);
  }
  uint64_t v100 = *(void *)(v86 + 24) + 32 * v89;
  *(_DWORD *)(v86 + 32) = v90;
  *(float *)uint64_t v100 = v45 + (float)((float)(v39 * v87) + (float)((float)(v33 * 0.0) - (float)(v30 * v29)));
  *(float *)(v100 + 4) = v46 + (float)((float)(v40 * v87) + (float)((float)(v34 * 0.0) - (float)(v31 * v29)));
  *(float *)(v100 + 8) = v47 + (float)((float)(v43 * v87) + (float)((float)(v35 * 0.0) - (float)(v32 * v29)));
  *(float *)(v100 + 16) = v45 + (float)((float)(v39 * v87) + (float)((float)(v33 * 0.0) + (float)(v30 * v29)));
  *(float *)(v100 + 2physx::Sq::AABBTree::release(this, 0) = v46 + (float)((float)(v40 * v87) + (float)((float)(v34 * 0.0) + (float)(v31 * v29)));
  *(float *)(v100 + 24) = v47 + (float)((float)(v43 * v87) + (float)((float)(v35 * 0.0) + (float)(v32 * v29)));
  *(_DWORD *)(v100 + 28) = v63;
  *(_DWORD *)(v100 + 12) = v63;
  return a1;
}

uint64_t physx::Cm::visualizeJointFrames(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  if (a4 != 0.0)
  {
    uint64_t v18 = v7;
    uint64_t v19 = v6;
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    float v10 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    float v13 = a4 * 1.5;
    float v14 = a4 * 1.5;
    float v15 = a4 * 1.5;
    unint64_t v16 = 0x8800880088880000;
    int v17 = -2013265784;
    uint64_t v11 = physx::Cm::operator<<(v10, (uint64_t)&v13);
    float v12 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v11, a3);
    float v13 = a4;
    float v14 = a4;
    float v15 = a4;
    unint64_t v16 = 0xFF00FF00FFFF0000;
    int v17 = -16776961;
    return physx::Cm::operator<<(v12, (uint64_t)&v13);
  }
  return result;
}

uint64_t physx::Cm::visualizeLinearLimit(uint64_t result, uint64_t a2, float a3, float a4, double a5, double a6, double a7, float32x4_t _Q5, uint64_t a9, int a10)
{
  if (a3 != 0.0)
  {
    uint64_t v47 = v15;
    uint64_t v48 = v14;
    uint64_t v49 = v13;
    uint64_t v50 = v12;
    uint64_t v51 = v10;
    uint64_t v52 = v11;
    float v19 = *(float *)(a2 + 8);
    float v18 = *(float *)(a2 + 12);
    _S3 = v18 + v18;
    _Q5.i64[0] = *(void *)a2;
    __asm { FMLS            S6, S3, V5.S[1] }
    float v26 = *(float *)(a2 + 16)
        + (float)(vmlas_n_f32((float)(v18 * (float)(v18 + v18)) + -1.0, _Q5.f32[0] + _Q5.f32[0], _Q5.f32[0]) * a4);
    float v27 = *(float *)(a2 + 20)
        + (float)((float)(vmuls_lane_f32(_Q5.f32[0] + _Q5.f32[0], *(float32x2_t *)_Q5.f32, 1)
                        + (float)(v19 * (float)(v18 + v18)))
                * a4);
    float v28 = (float)(_S6 * a4) + *(float *)(a2 + 24);
    float32_t v29 = -v19;
    float32x4_t v30 = _Q5;
    v30.f32[2] = v19;
    float32x4_t v31 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL);
    v30.i32[3] = *(void *)a2;
    float32x4_t v32 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL), (int8x16_t)v31, 8uLL);
    v31.f32[3] = -COERCE_FLOAT(HIDWORD(*(void *)a2));
    v32.f32[3] = v29;
    float32x4_t v43 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_f32(v30, (float32x4_t)xmmword_234421FC0), (float32x4_t)xmmword_234421FD0, v18), (float32x4_t)xmmword_234421FE0, v31), (float32x4_t)xmmword_2343853F0, v32);
    float v44 = v26;
    float v45 = v27;
    float v46 = v28;
    if (a10) {
      int v33 = -65536;
    }
    else {
      int v33 = -8355712;
    }
    *(_DWORD *)(result + 4) = v33;
    long long v40 = xmmword_23435FBB0;
    uint64_t v41 = 0;
    float v42 = 0.0;
    float v34 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, (uint64_t)&v40);
    float v36 = *(float *)(a2 + 20);
    float v37 = *(float *)(a2 + 24);
    LODWORD(v4physx::Sq::AABBTree::release(this, 0) = *(_DWORD *)(a2 + 16);
    float v35 = *(float *)&v40;
    *(void *)((char *)&v40 + 4) = __PAIR64__(LODWORD(v37), LODWORD(v36));
    *((float *)&v40 + 3) = v35 + (float)(v26 - v35);
    *(float *)&uint64_t v41 = v36 + (float)(v27 - v36);
    *((float *)&v41 + 1) = v37 + (float)(v28 - v37);
    float v42 = sqrtf((float)((float)((float)(v27 - v36) * (float)(v27 - v36)) + (float)((float)(v26 - v35) * (float)(v26 - v35)))+ (float)((float)(v28 - v37) * (float)(v28 - v37)))* 0.15;
    uint64_t v38 = physx::Cm::operator<<(v34, (float *)&v40);
    float v39 = (_DWORD *)physx::Cm::RenderOutput::operator<<(v38, (uint64_t)&v43);
    LODWORD(v4physx::Sq::AABBTree::release(this, 0) = 20;
    *((float *)&v40 + 1) = a3 * 0.3;
    return physx::Cm::operator<<(v39, (uint64_t)&v40);
  }
  return result;
}

uint64_t physx::Cm::visualizeAngularLimit(uint64_t result, uint64_t a2, int a3, float a4, float a5, float a6)
{
  if (a4 != 0.0)
  {
    uint64_t v34 = v13;
    uint64_t v35 = v12;
    uint64_t v36 = v11;
    uint64_t v37 = v10;
    uint64_t v38 = v9;
    uint64_t v39 = v8;
    uint64_t v40 = v6;
    uint64_t v41 = v7;
    float v18 = (_DWORD *)result;
    float v19 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    if (a3) {
      int v20 = -65536;
    }
    else {
      int v20 = -8355712;
    }
    *float v19 = 1;
    v19[1] = v20;
    v19[8] = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    physx::Cm::RenderOutput::operator<<((uint64_t)v19, (float *)&v32);
    __float2 v21 = __sincosf_stret(a5);
    v31[0] = a4 * 0.0;
    v31[1] = v21.__cosval * a4;
    v31[2] = v21.__sinval * a4;
    uint64_t v22 = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v31);
    uint64_t v29 = 0;
    int v30 = 0;
    physx::Cm::RenderOutput::operator<<(v22, (float *)&v29);
    __float2 v23 = __sincosf_stret(a6);
    v28[0] = a4 * 0.0;
    v28[1] = v23.__cosval * a4;
    v28[2] = v23.__sinval * a4;
    physx::Cm::RenderOutput::operator<<((uint64_t)v18, v28);
    *float v18 = 2;
    v18[8] = 0;
    int v24 = 21;
    float v25 = (float)(a6 - a5) / 20.0;
    do
    {
      __float2 v26 = __sincosf_stret(a5);
      v27[0] = a4 * 0.0;
      v27[1] = v26.__cosval * a4;
      v27[2] = v26.__sinval * a4;
      __n128 result = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v27);
      a5 = v25 + a5;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t physx::Cm::visualizeLimitCone(uint64_t result, uint64_t a2, int a3, float a4, float a5, float a6)
{
  if (a4 != 0.0)
  {
    uint64_t v51 = v15;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    uint64_t v54 = v12;
    uint64_t v55 = v11;
    uint64_t v56 = v10;
    uint64_t v57 = v9;
    uint64_t v58 = v8;
    uint64_t v59 = v6;
    uint64_t v60 = v7;
    uint64_t v20 = result;
    __float2 v21 = (_DWORD *)physx::Cm::RenderOutput::operator<<(result, a2);
    unsigned int v22 = 0;
    if (a3) {
      int v23 = -65536;
    }
    else {
      int v23 = -8355712;
    }
    _DWORD *v21 = 1;
    v21[1] = v23;
    v21[8] = 0;
    float v45 = -a6;
    float v24 = 0.0;
    float v25 = 0.0;
    float v26 = 0.0;
    do
    {
      __float2 v27 = __sincosf_stret((float)v22 * 0.19635);
      float v28 = v27.__sinval * v45;
      float v29 = v27.__cosval * a5;
      float v30 = (float)(v28 * v28) + (float)(v29 * v29);
      float v31 = 1.0 - v30;
      float v32 = 1.0 / (float)(v30 + 1.0);
      float v33 = v32 * 0.0;
      float v34 = (float)(v28 + v28) * v32;
      float v35 = (float)(v29 + v29) * v32;
      float v36 = v31 * v32;
      float v37 = (float)(v36 * v36) + -0.5;
      float v38 = (float)((float)(v34 * 0.0) + (float)(v33 * 2.0)) + (float)(v35 * 0.0);
      float v39 = (float)((float)((float)(v36 * (float)((float)(v35 * -0.0) + (float)(v34 * 0.0))) + (float)(v37 * 2.0))
                  + (float)(v33 * v38))
          * a4;
      float v40 = (float)((float)((float)(v36 * (float)((float)(v33 * -0.0) + (float)(v35 * 2.0))) + (float)(v37 * 0.0))
                  + (float)(v34 * v38))
          * a4;
      float v41 = (float)((float)((float)(v36 * (float)((float)(v34 * -2.0) + (float)(v33 * 0.0))) + (float)(v37 * 0.0))
                  + (float)(v35 * v38))
          * a4;
      v50[0] = v26;
      v50[1] = v25;
      v50[2] = v24;
      uint64_t v42 = physx::Cm::RenderOutput::operator<<(v20, v50);
      v49[0] = v39;
      v49[1] = v40;
      v49[2] = v41;
      uint64_t v43 = physx::Cm::RenderOutput::operator<<(v42, v49);
      uint64_t v47 = 0;
      int v48 = 0;
      uint64_t v44 = physx::Cm::RenderOutput::operator<<(v43, (float *)&v47);
      v46[0] = v39;
      v46[1] = v40;
      v46[2] = v41;
      __n128 result = physx::Cm::RenderOutput::operator<<(v44, v46);
      ++v22;
      float v24 = v41;
      float v25 = v40;
      float v26 = v39;
    }
    while (v22 != 33);
  }
  return result;
}

uint64_t physx::Cm::visualizeDoubleCone(uint64_t result, uint64_t a2, int a3, float a4, float a5)
{
  if (a4 != 0.0)
  {
    uint64_t v40 = v14;
    uint64_t v41 = v13;
    uint64_t v42 = v12;
    uint64_t v43 = v11;
    uint64_t v44 = v10;
    uint64_t v45 = v9;
    uint64_t v46 = v8;
    uint64_t v47 = v7;
    uint64_t v48 = v5;
    uint64_t v49 = v6;
    float v18 = (_DWORD *)result;
    uint64_t v19 = physx::Cm::RenderOutput::operator<<(result, a2);
    if (a3) {
      int v20 = -65536;
    }
    else {
      int v20 = -8355712;
    }
    *(_DWORD *)(v19 + 4) = v20;
    float v21 = tanf(a5);
    unsigned int v22 = 0;
    *float v18 = 2;
    v18[8] = 0;
    float v23 = v21 * a4;
    do
    {
      __float2 v24 = __sincosf_stret((float)v22 * 0.19635);
      v39[0] = v21 * a4;
      v39[1] = v24.__cosval * a4;
      v39[2] = v24.__sinval * a4;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, v39);
      ++v22;
    }
    while (v22 != 33);
    unsigned int v25 = 0;
    *float v18 = 2;
    v18[8] = 0;
    float v26 = -(float)(v21 * a4);
    do
    {
      __float2 v27 = __sincosf_stret((float)v25 * 0.19635);
      v38[0] = v26;
      v38[1] = v27.__cosval * a4;
      v38[2] = v27.__sinval * a4;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, v38);
      ++v25;
    }
    while (v25 != 33);
    unsigned int v28 = 0;
    *float v18 = 1;
    v18[8] = 0;
    do
    {
      uint64_t v36 = 0;
      int v37 = 0;
      physx::Cm::RenderOutput::operator<<((uint64_t)v18, (float *)&v36);
      __float2 v29 = __sincosf_stret((float)v28 * 0.19635);
      v35[0] = v26;
      v35[1] = v29.__cosval * a4;
      v35[2] = v29.__sinval * a4;
      uint64_t v30 = physx::Cm::RenderOutput::operator<<((uint64_t)v18, v35);
      uint64_t v33 = 0;
      int v34 = 0;
      uint64_t v31 = physx::Cm::RenderOutput::operator<<(v30, (float *)&v33);
      v32[0] = v23;
      v32[1] = v29.__cosval * a4;
      v32[2] = v29.__sinval * a4;
      __n128 result = physx::Cm::RenderOutput::operator<<(v31, v32);
      ++v28;
    }
    while (v28 != 32);
  }
  return result;
}

BOOL physx::Gu::contactCapsuleMesh(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v12 = *a3;
  float v13 = a3[1];
  float v15 = a3[2];
  float v14 = a3[3];
  float v16 = v14 + v14;
  float v17 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  float v18 = (float)((float)(v12 + v12) * v13) + (float)(v15 * v16);
  float v19 = (float)((float)(v12 + v12) * v15) - (float)(v13 * v16);
  float v20 = *(float *)(a1 + 4);
  float v21 = *(float *)(a1 + 8);
  float v22 = a4[4] - a3[4];
  float v23 = a4[5] - a3[5];
  float v24 = a4[6] - a3[6];
  float v25 = (float)((float)(v17 * v21) - v22) + (float)((float)(v17 * v21) - v22);
  float v26 = (float)((float)(v21 * v18) - v23) + (float)((float)(v21 * v18) - v23);
  float v27 = (float)((float)(v19 * v21) - v24) + (float)((float)(v19 * v21) - v24);
  float v29 = a4[2];
  float v28 = a4[3];
  float v30 = (float)(v28 * v28) + -0.5;
  float v31 = a4[1];
  float v32 = (float)(v26 * v31) + (float)(*a4 * v25);
  float v33 = (float)(v25 * v30) - (float)((float)((float)(v31 * v27) - (float)(v29 * v26)) * v28);
  float v34 = (float)(v26 * v30) - (float)((float)((float)(v29 * v25) - (float)(*a4 * v27)) * v28);
  float v35 = (float)(*a4 * v26) - (float)(v31 * v25);
  float v36 = *a5;
  float v37 = v32 + (float)(v29 * v27);
  float v38 = (float)((float)(v27 * v30) - (float)(v35 * v28)) + (float)(v29 * v37);
  float v39 = -(float)(v21 * v18);
  float v40 = -(float)(v19 * v21);
  float v41 = (float)((float)-(float)(v17 * v21) - v22) + (float)((float)-(float)(v17 * v21) - v22);
  float v42 = (float)(v39 - v23) + (float)(v39 - v23);
  float v43 = (float)(v40 - v24) + (float)(v40 - v24);
  float v44 = (float)((float)(v42 * v31) + (float)(*a4 * v41)) + (float)(v29 * v43);
  float v45 = (float)((float)(v41 * v30) - (float)((float)((float)(v31 * v43) - (float)(v29 * v42)) * v28))
      + (float)(*a4 * v44);
  float v46 = (float)((float)(v42 * v30) - (float)((float)((float)(v29 * v41) - (float)(*a4 * v43)) * v28))
      + (float)(v31 * v44);
  float v47 = -(float)((float)((float)(*a4 * v42) - (float)(v31 * v41)) * v28);
  *(float *)&float v68 = v33 + (float)(*a4 * v37);
  *((float *)&v68 + 1) = v34 + (float)(v31 * v37);
  float v69 = v38;
  float v70 = v45;
  float v71 = v46;
  float v72 = (float)(v47 + (float)(v43 * v30)) + (float)(v29 * v44);
  uint64_t v48 = *(void *)(a2 + 48);
  uint64_t v58 = v68;
  int v59 = LODWORD(v38);
  float v60 = v45;
  float v49 = v20 + v36;
  *(float *)uint64_t v61 = v46;
  *(float *)&v61[1] = v72;
  *(float *)&v61[2] = v20 + v36;
  physx::Gu::Box::create((physx::Gu::Box *)v65, (const Capsule *)&v58);
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0)
  {
    float v51 = *a5;
    float v52 = *(float *)(a1 + 4);
    int v59 = 2;
    uint64_t v58 = &unk_26E728480;
    *(float *)&double v50 = v49;
    uint64_t v62 = v48;
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v64, (float *)(a2 + 4), (float *)(a2 + 16));
    float v54 = *a5;
    float v55 = *(float *)(a1 + 4);
    int v59 = 2;
    *(float *)&double v56 = v49;
    uint64_t v62 = v48;
    int v63 = v64;
    uint64_t v58 = &unk_26E7284D0;
    v53.n128_f32[0] = physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v64, &v66, &v67, v65);
  }
  ((void (*)(uint64_t, float *, void **, uint64_t, uint64_t, __n128))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v48 + 8) - 3])(v48, v65, &v58, 1, 1, v53);
  return *(_DWORD *)(a7 + 4096) != 0;
}

float physx::Cm::FastVertex2ShapeScaling::transformQueryBounds(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v5 = *a3 * *a4;
  float v6 = *a3 * a4[1];
  float v7 = a4[3];
  float v8 = *a3 * a4[2];
  float v9 = (float)((float)(v5 * *(float *)(a1 + 44)) + (float)(v6 * *(float *)(a1 + 56)))
     + (float)(v8 * *(float *)(a1 + 68));
  *(float32x2_t *)a4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v5), vmul_n_f32(*(float32x2_t *)(a1 + 48), v6)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v8));
  a4[2] = v9;
  float v10 = a3[1];
  float v11 = v10 * v7;
  float v12 = v10 * a4[4];
  float v13 = v10 * a4[5];
  float v14 = (float)((float)(v11 * *(float *)(a1 + 44)) + (float)(v12 * *(float *)(a1 + 56)))
      + (float)(v13 * *(float *)(a1 + 68));
  *(float32x2_t *)(a4 + 3) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v11), vmul_n_f32(*(float32x2_t *)(a1 + 48), v12)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v13));
  a4[5] = v14;
  float v15 = a3[2];
  float v16 = v15 * a4[6];
  float v17 = v15 * a4[7];
  float v18 = v15 * a4[8];
  float v19 = (float)((float)(v16 * *(float *)(a1 + 44)) + (float)(v17 * *(float *)(a1 + 56)))
      + (float)(v18 * *(float *)(a1 + 68));
  *((float32x2_t *)a4 + 3) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), v16), vmul_n_f32(*(float32x2_t *)(a1 + 48), v17)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v18));
  a4[8] = v19;
  float v20 = a2[1];
  float v21 = a2[2];
  float v22 = (float)((float)(*a2 * *(float *)(a1 + 44)) + (float)(v20 * *(float *)(a1 + 56)))
      + (float)(v21 * *(float *)(a1 + 68));
  *(float32x2_t *)a2 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 36), *a2), vmul_n_f32(*(float32x2_t *)(a1 + 48), v20)), vmul_n_f32(*(float32x2_t *)(a1 + 60), v21));
  a2[2] = v22;
  physx::shdfnd::optimizeBoundingBox(a4, (float *)&v24);
  *(void *)a3 = v24;
  float result = v25;
  a3[2] = v25;
  return result;
}

BOOL physx::Gu::contactCapsuleHeightfield(uint64_t a1, float32x2_t *a2, float *a3, float *a4, float *a5, double a6, uint64_t a7, uint64_t a8)
{
  float v12 = *a5;
  float v13 = *(float *)(a1 + 4);
  LODWORD(a6) = *(_DWORD *)(a1 + 8);
  float v14 = v13 + *a5;
  float v15 = *a3;
  float v16 = a3[1];
  float v17 = v15 + v15;
  float v19 = a3[2];
  float v18 = a3[3];
  float v20 = v18 + v18;
  float v21 = (float)((float)(v18 * (float)(v18 + v18)) + -1.0) + (float)(v15 * (float)(v15 + v15));
  float v22 = (float)(v17 * v16) + (float)(v19 * (float)(v18 + v18));
  float v23 = (float)(v17 * v19) - (float)(v16 * v20);
  float v24 = a4[4] - a3[4];
  float v25 = a4[5] - a3[5];
  float v26 = a4[6] - a3[6];
  float v27 = (float)((float)(v21 * *(float *)&a6) - v24) + (float)((float)(v21 * *(float *)&a6) - v24);
  float v28 = (float)((float)(*(float *)&a6 * v22) - v25) + (float)((float)(*(float *)&a6 * v22) - v25);
  float v29 = (float)((float)(v23 * *(float *)&a6) - v26) + (float)((float)(v23 * *(float *)&a6) - v26);
  float v31 = a4[2];
  float v30 = a4[3];
  float v32 = (float)(v30 * v30) + -0.5;
  float v33 = a4[1];
  float v34 = (float)((float)(v28 * v33) + (float)(*a4 * v27)) + (float)(v31 * v29);
  float v35 = (float)((float)(v27 * v32) - (float)((float)((float)(v33 * v29) - (float)(v31 * v28)) * v30))
      + (float)(*a4 * v34);
  float v36 = (float)((float)(v28 * v32) - (float)((float)((float)(v31 * v27) - (float)(*a4 * v29)) * v30))
      + (float)(v33 * v34);
  float v37 = (float)((float)(v29 * v32) - (float)((float)((float)(*a4 * v28) - (float)(v33 * v27)) * v30))
      + (float)(v31 * v34);
  float v38 = -(float)(v21 * *(float *)&a6);
  float v39 = -(float)(*(float *)&a6 * v22);
  *(float *)&a6 = -(float)(v23 * *(float *)&a6);
  float v40 = (float)(v38 - v24) + (float)(v38 - v24);
  float v41 = (float)(v39 - v25) + (float)(v39 - v25);
  *(float *)&a6 = (float)(*(float *)&a6 - v26) + (float)(*(float *)&a6 - v26);
  float v42 = (float)((float)(v41 * v33) + (float)(*a4 * v40)) + (float)(v31 * *(float *)&a6);
  float v43 = (float)((float)(v40 * v32) - (float)((float)((float)(v33 * *(float *)&a6) - (float)(v31 * v41)) * v30))
      + (float)(*a4 * v42);
  float v44 = (float)((float)(v41 * v32) - (float)((float)((float)(v31 * v40) - (float)(*a4 * *(float *)&a6)) * v30))
      + (float)(v33 * v42);
  *(float *)&a6 = (float)((float)(*(float *)&a6 * v32) - (float)((float)((float)(*a4 * v41) - (float)(v33 * v40)) * v30))
                + (float)(v31 * v42);
  *(float *)float v112 = v35;
  *(float *)&v112[1] = v36;
  *(float *)&v112[2] = v37;
  *(float *)&v112[3] = v43;
  *(float *)&v112[4] = v44;
  v112[5] = LODWORD(a6);
  float32x2_t v110 = a2[1];
  float v111 = a2;
  LODWORD(a6) = a2[3].i32[0];
  __asm { FMOV            V4.2S, #1.0 }
  int32x2_t v108 = vrev64_s32((int32x2_t)vdiv_f32(_D4, a2[2]));
  float v109 = 1.0 / *(float *)&a6;
  float v106 = &unk_26E728510;
  *(float *)&a6 = v14;
  v107[14] = &v108;
  v107[15] = a4;
  float v50 = v14 + *(float *)(a1 + 8);
  float v51 = a4[1];
  float v52 = a4[2];
  float v53 = a4[3];
  float v54 = a3[4] - a4[4];
  float v55 = a3[5] - a4[5];
  float v56 = a3[6] - a4[6];
  float v57 = v54 + v54;
  float v58 = v55 + v55;
  float v59 = v56 + v56;
  float v60 = (float)(v53 * v53) + -0.5;
  float v61 = (float)((float)-(float)(v51 * v58) - (float)(*a4 * v57)) - (float)(v52 * v59);
  float v62 = (float)((float)(v53 * (float)((float)(v52 * v58) - (float)(v51 * v59))) + (float)(v57 * v60))
      - (float)(*a4 * v61);
  float v63 = (float)((float)(v53 * (float)((float)(*a4 * v59) - (float)(v52 * v57))) + (float)(v58 * v60))
      - (float)(v51 * v61);
  float v64 = (float)((float)(v53 * (float)((float)(v51 * v57) - (float)(*a4 * v58))) + (float)(v59 * v60))
      - (float)(v52 * v61);
  float v66 = a3[2];
  float v65 = a3[3];
  float v67 = a3[1];
  float v68 = (float)((float)((float)(v53 * *a3) - (float)(*a4 * v65)) - (float)(v51 * v66)) + (float)(v67 * v52);
  float v69 = (float)((float)((float)(v53 * v67) - (float)(v51 * v65)) - (float)(v52 * *a3)) + (float)(v66 * *a4);
  float v70 = (float)((float)((float)(v53 * v66) - (float)(v52 * v65)) - (float)(*a4 * v67)) + (float)(*a3 * v51);
  float v71 = (float)((float)((float)(*a4 * *a3) + (float)(v53 * v65)) + (float)(v51 * v67)) + (float)(v52 * v66);
  float v72 = (float)((float)(v50 - v50) * 0.5) + (float)((float)(v50 - v50) * 0.5);
  float v73 = (float)((float)(v14 - v14) * 0.5) + (float)((float)(v14 - v14) * 0.5);
  float v74 = (float)(v71 * v71) + -0.5;
  float v75 = (float)((float)(v73 * v69) + (float)(v68 * v72)) + (float)(v70 * v73);
  float v76 = (float)((float)(v71 * (float)((float)(v69 * v73) - (float)(v70 * v73))) + (float)(v72 * v74))
      + (float)(v68 * v75);
  float v77 = (float)((float)(v71 * (float)((float)(v70 * v72) - (float)(v68 * v73))) + (float)(v73 * v74))
      + (float)(v69 * v75);
  float v78 = (float)((float)(v71 * (float)((float)(v68 * v73) - (float)(v69 * v72))) + (float)(v73 * v74))
      + (float)(v70 * v75);
  float v79 = v62 + v76;
  float v80 = v63 + v77;
  float v81 = v64 + v78;
  float v82 = v69 + v69;
  float v83 = v70 + v70;
  float v84 = v69 * (float)(v69 + v69);
  float v85 = v70 * (float)(v70 + v70);
  float v86 = (float)(v68 + v68) * v69;
  float v87 = v70 * (float)(v68 + v68);
  float v88 = v71 * (float)(v68 + v68);
  float v89 = v70 * v82;
  float v90 = v71 * v82;
  float v91 = v71 * v83;
  float v92 = (float)(1.0 - v84) - v85;
  float v93 = 1.0 - (float)(v68 * (float)(v68 + v68));
  float v94 = v93 - v85;
  float v95 = v93 - v84;
  float v96 = (float)(v50 + v50) * 0.5;
  float v97 = (float)(v14 + v14) * 0.5;
  float v98 = v96 * (float)(v86 + v91);
  float v99 = v97 * (float)(v86 - v91);
  float v100 = v97 * (float)(v88 + v89);
  float v101 = fabsf(v97 * (float)(v87 + v90)) + (float)(fabsf(v99) + fabsf(v96 * v92));
  float v102 = fabsf(v97 * (float)(v89 - v88)) + (float)(fabsf(v98) + fabsf(v97 * v94));
  float v103 = fabsf(v97 * v95) + (float)(fabsf(v96 * (float)(v87 - v90)) + fabsf(v100));
  v105[0] = v79 - v101;
  v105[1] = v80 - v102;
  v105[2] = v81 - v103;
  v105[3] = v79 + v101;
  v105[4] = v80 + v102;
  v105[5] = v81 + v103;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v108, a4, v105, 0, (uint64_t)&v106);
  return *(_DWORD *)(a8 + 4096) != 0;
}

double physx::PxMat44::PxMat44(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v4 = *(float *)(a2 + 8);
  float v5 = *(float *)(a2 + 12);
  float v6 = v3 + v3;
  float v7 = v4 + v4;
  float v8 = v3 * (float)(v3 + v3);
  float v9 = v4 * (float)(v4 + v4);
  float v10 = (float)(v2 + v2) * v3;
  float v11 = (float)(v2 + v2) * v4;
  float v12 = (float)(v2 + v2) * v5;
  float v13 = v6 * v4;
  float v14 = v6 * v5;
  float v15 = v7 * v5;
  float v16 = 1.0 - (float)(v2 * (float)(v2 + v2));
  float v17 = v13 + v12;
  float v18 = v13 - v12;
  int v19 = *(_DWORD *)(a2 + 24);
  *(float *)a1 = (float)(1.0 - v8) - v9;
  *(float *)(a1 + 4) = v10 + v15;
  *(float *)(a1 + 8) = v11 - v14;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v10 - v15;
  *(float *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = v16 - v9;
  *(float *)(a1 + 24) = v17;
  *(_DWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 32) = v11 + v14;
  *(float *)(a1 + 36) = v18;
  *(float *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = v16 - v8;
  *(_DWORD *)(a1 + 44) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 48) = result;
  *(_DWORD *)(a1 + 56) = v19;
  *(_DWORD *)(a1 + 6physx::Sq::AABBTree::release(this, 0) = 1065353216;
  return result;
}

float anonymous namespace'::CapsuleMeshContactGeneration::CapsuleMeshContactGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6, float a7)
{
  *(void *)a1 = a2;
  float v7 = *(float *)a3;
  float v8 = *(float *)(a3 + 4);
  float v9 = *(float *)(a3 + 8);
  float v10 = *(float *)(a3 + 12);
  float v11 = v8 + v8;
  float v12 = v9 + v9;
  float v13 = v8 * (float)(v8 + v8);
  float v14 = v9 * (float)(v9 + v9);
  float v15 = (float)(v7 + v7) * v8;
  float v16 = (float)(v7 + v7) * v9;
  float v17 = (float)(v7 + v7) * v10;
  float v18 = v11 * v9;
  float v19 = v11 * v10;
  float v20 = v12 * v10;
  *(float *)(a1 + 8) = (float)(1.0 - v13) - v14;
  *(float *)(a1 + 12) = v15 + v20;
  float v21 = 1.0 - (float)(v7 * (float)(v7 + v7));
  *(float *)(a1 + 16) = v16 - v19;
  *(float *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = v15 - v20;
  *(float *)(a1 + 24) = v21 - v14;
  *(float *)(a1 + 28) = v18 + v17;
  *(float *)(a1 + 32) = v16 + v19;
  *(float *)(a1 + 36) = v18 - v17;
  *(float *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = v21 - v13;
  *(void *)(a1 + 44) = *(void *)(a3 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 24);
  *(void *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 96) = LODWORD(a5);
  *(float *)(a1 + 10physx::Sq::AABBTree::release(this, 0) = a6;
  *(float *)(a1 + 104) = a7;
  float v22 = (float)(*(float *)(a4 + 8) + *(float *)(a4 + 20)) * 0.5;
  *(float32x2_t *)(a1 + 64) = vmul_f32(vadd_f32(*(float32x2_t *)a4, *(float32x2_t *)(a4 + 12)), (float32x2_t)0x3F0000003F000000);
  *(float *)(a1 + 72) = v22;
  float v23 = (float)(*(float *)(a4 + 8) - *(float *)(a4 + 20)) * 0.5;
  *(float32x2_t *)(a1 + 8physx::Sq::AABBTree::release(this, 0) = vadd_f32(vabs_f32(vmul_f32(vsub_f32(*(float32x2_t *)a4, *(float32x2_t *)(a4 + 12)), (float32x2_t)0x3F0000003F000000)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
  float result = fabsf(v23) + *(float *)&a5;
  *(float *)(a1 + 88) = result;
  return result;
}

uint64_t anonymous namespace'::CapsuleMeshContactGenerationCallback_NoScale::processHit(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5)
{
  int v10 = *a3;
  *(void *)&long long v5 = *(void *)(a3 + 1);
  *((void *)&v5 + 1) = *(void *)a4;
  long long v11 = v5;
  int v12 = *(_DWORD *)(a4 + 8);
  uint64_t v13 = *a5;
  int v14 = *((_DWORD *)a5 + 2);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = *(void *)(*(void *)(a1 + 128) + 80);
  if (v7) {
    uint64_t v8 = *(unsigned __int8 *)(v7 + v6);
  }
  else {
    uint64_t v8 = 56;
  }
  return 1;
}

void anonymous namespace'::CapsuleMeshContactGenerationCallback_NoScale::~CapsuleMeshContactGenerationCallback_NoScale(_anonymous_namespace_::CapsuleMeshContactGenerationCallback_NoScale *this)
{
}

void anonymous namespace'::CapsuleMeshContactGeneration::processTriangle(uint64_t a1, __int32 a2, uint64_t a3, physx::Gu *a4)
{
  if (physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 64), (float32x4_t *)(a1 + 80), (float32x4_t *)a3, (float32x4_t *)(a3 + 12), (float32x4_t *)(a3 + 24)))
  {
    uint64_t v172 = 0;
    float v171 = 0.0;
    float v8 = *(float *)(a3 + 8);
    float v9 = *(float *)(a3 + 20) - v8;
    float32x2_t v10 = *(float32x2_t *)a3;
    float32x2_t v169 = vsub_f32(*(float32x2_t *)(a3 + 12), *(float32x2_t *)a3);
    float v170 = v9;
    float v11 = *(float *)(a3 + 32) - v8;
    float32x2_t v167 = vsub_f32(*(float32x2_t *)(a3 + 24), v10);
    float v168 = v11;
    uint64_t v12 = *(void *)(a1 + 56);
    float v13 = *(float *)(v12 + 20) - *(float *)(v12 + 8);
    unint64_t v181 = (unint64_t)vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)v12);
    float v182 = v13;
    physx::Gu::distanceSegmentTriangleSquared((float32x2_t *)v12, (float32x2_t *)&v181, (float32x2_t *)a3, &v169, &v167, (_DWORD *)&v172 + 1, &v172, &v171);
    float v15 = *(float *)(a1 + 96);
    if (v14 < (float)(v15 * v15))
    {
      float v16 = (float)(v169.f32[1] * v168) - (float)(v170 * v167.f32[1]);
      float v17 = (float)(v170 * v167.f32[0]) - (float)(v169.f32[0] * v168);
      float v18 = (float)(v169.f32[0] * v167.f32[1]) - (float)(v169.f32[1] * v167.f32[0]);
      float v20 = *(float *)a3;
      float v19 = *(float *)(a3 + 4);
      float v164 = *(float *)(a3 + 8);
      if ((float)((float)((float)(v17 * *(float *)(a1 + 68)) + (float)(v16 * *(float *)(a1 + 64)))
                 + (float)(v18 * *(float *)(a1 + 72))) >= (float)((float)((float)(v17 * v19)
                                                                        + (float)(v16 * *(float *)a3))
                                                                + (float)(v18 * v164)))
      {
        if (v14 > 0.000001)
        {
          float v22 = v171;
          float v21 = *(float *)&v172;
          if (physx::Gu::selectNormal(a4, *(float *)&v172, v171))
          {
            float v23 = (float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18);
            float v24 = 0.0;
            float v25 = 0.0;
            float v26 = 0.0;
            if (v23 > 0.0)
            {
              float v27 = 1.0 / sqrtf(v23);
              float v24 = v16 * v27;
              float v25 = v17 * v27;
              float v26 = v18 * v27;
            }
            unint64_t v173 = __PAIR64__(LODWORD(v25), LODWORD(v24));
            float v174 = v26;
            float v28 = *(float **)(a1 + 56);
            float v29 = *v28;
            float v30 = v28[1];
            float v32 = v28[2];
            float v31 = v28[3];
            float v34 = v28[4];
            float v33 = v28[5];
            float v35 = v31 - *v28;
            float v36 = v34 - v30;
            float v37 = v33 - v32;
          }
          else
          {
            float v109 = (float)(1.0 - v21) - v22;
            float v110 = (float)((float)(v21 * *(float *)(a3 + 12)) + (float)(v109 * v20))
                 + (float)(v22 * *(float *)(a3 + 24));
            float v111 = (float)((float)(v21 * *(float *)(a3 + 16)) + (float)(v109 * v19))
                 + (float)(v22 * *(float *)(a3 + 28));
            float v112 = (float)((float)(v21 * *(float *)(a3 + 20)) + (float)(v109 * v164))
                 + (float)(v22 * *(float *)(a3 + 32));
            float32x2_t v113 = *(float **)(a1 + 56);
            float v29 = *v113;
            float v30 = v113[1];
            float v32 = v113[2];
            float v31 = v113[3];
            float v35 = v31 - *v113;
            float v34 = v113[4];
            float v33 = v113[5];
            float v36 = v34 - v30;
            float v37 = v33 - v32;
            float v114 = (float)(*v113 + (float)(*((float *)&v172 + 1) * v35)) - v110;
            float v115 = (float)(v30 + (float)(*((float *)&v172 + 1) * (float)(v34 - v30))) - v111;
            float v116 = (float)(v32 + (float)(*((float *)&v172 + 1) * (float)(v33 - v32))) - v112;
            float v117 = sqrtf((float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116));
            if (v117 == 0.0) {
              return;
            }
            *(float *)&unint64_t v173 = v114 * (float)(1.0 / v117);
            *((float *)&v173 + 1) = v115 * (float)(1.0 / v117);
            float v174 = v116 * (float)(1.0 / v117);
          }
          float v83 = (void *)(a1 + 8);
          uint64_t v118 = *(void *)a1;
          float v120 = *(float *)(a1 + 100);
          float v119 = *(float *)(a1 + 104);
          unint64_t v181 = __PAIR64__(LODWORD(v30), LODWORD(v29));
          float v182 = v32;
          float v178 = v31;
          float v179 = v34;
          float v180 = v33;
          float v121 = sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
          if (v121 > 0.0)
          {
            float v122 = 0.01 / v121;
            float v123 = v35 * v122;
            float v124 = v36 * v122;
            float v125 = v37 * v122;
            *(float *)&unint64_t v181 = v29 - v123;
            *((float *)&v181 + 1) = v30 - v124;
            float v182 = v32 - v125;
            float v178 = v31 + v123;
            float v179 = v34 + v124;
            float v180 = v33 + v125;
          }
          uint64_t v126 = 0;
          float v127 = v119 + v120;
          uint64_t v128 = (float *)a3;
          do
          {
            v166[0] = 0.0;
            if (physx::Gu::intersectEdgeEdge(v128, (float *)(a3 + 12 * (((_BYTE)v126 + (v126 >> 1) + 1) & 3)), (float32x2_t *)&v173, (float *)&v181, &v178, v166, &v175)&& v166[0] < v127)
            {
              uint64_t v129 = *(unsigned int *)(v118 + 4096);
              if (v129 <= 0x3F)
              {
                float v130 = *(float *)(a1 + 16);
                float32x2_t v131 = v175;
                float v132 = *(float *)(a1 + 28);
                float v133 = v176;
                float v134 = *(float *)(a1 + 40);
                float32_t v135 = *(float *)(a1 + 52)
                     + (float)((float)((float)(v175.f32[0] * v130) + (float)(v175.f32[1] * v132)) + (float)(v176 * v134));
                float32_t v136 = v166[0] - v119;
                float32x2_t v137 = (float32x2_t)v173;
                float v138 = (float)(v130 * *(float *)&v173) + (float)(v132 * *((float *)&v173 + 1));
                float v139 = v174;
                float32_t v140 = v138 + (float)(v134 * v174);
                *(_DWORD *)(v118 + 4096) = v129 + 1;
                float32x4_t v141 = (float32x2_t *)(v118 + (v129 << 6));
                v141[1].f32[0] = v140;
                float32x2_t v142 = *(float32x2_t *)(a1 + 8);
                float32x2_t v143 = *(float32x2_t *)(a1 + 20);
                float32x2_t v144 = *(float32x2_t *)(a1 + 32);
                float32x2_t v145 = *(float32x2_t *)(a1 + 44);
                v141->f32[0] = (float)((float)(v137.f32[0] * v142.f32[0]) + (float)(v137.f32[1] * v143.f32[0]))
                             + (float)(v139 * v144.f32[0]);
                v141->f32[1] = (float)(vmuls_lane_f32(v137.f32[0], v142, 1) + vmuls_lane_f32(v137.f32[1], v143, 1))
                             + vmuls_lane_f32(v139, v144, 1);
                v141[2] = vadd_f32(v145, vadd_f32(vadd_f32(vmul_n_f32(v142, v131.f32[0]), vmul_n_f32(v143, v131.f32[1])), vmul_n_f32(v144, v133)));
                v141[3].f32[0] = v135;
                v141[1].f32[1] = v136;
                v141[6].i32[1] = a2;
              }
            }
            ++v126;
            v128 += 3;
          }
          while (v126 != 3);
          uint64_t v104 = *(void *)a1;
          uint64_t v105 = *(void *)(a1 + 56);
          float v107 = *(float *)(a1 + 100);
          float v106 = *(float *)(a1 + 104);
          int32x2_t v108 = (float *)&v173;
          goto LABEL_56;
        }
        float v38 = *(float **)(a1 + 56);
        v175.i32[0] = 2139095039;
        float v40 = *(float *)(a3 + 12);
        float v39 = *(float *)(a3 + 16);
        float v41 = *(float *)(a3 + 24);
        float v160 = *(float *)(a3 + 20);
        float v42 = *(float *)(a3 + 28);
        float v159 = *(float *)(a3 + 32);
        float v43 = (float)((float)(v19 - v39) * (float)(v164 - v159)) - (float)((float)(v164 - v160) * (float)(v19 - v42));
        float v44 = (float)((float)(v164 - v160) * (float)(v20 - v41)) - (float)((float)(v20 - v40) * (float)(v164 - v159));
        float v45 = (float)((float)(v20 - v40) * (float)(v19 - v42)) - (float)((float)(v19 - v39) * (float)(v20 - v41));
        float v46 = (float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45);
        float v47 = 0.0;
        float v48 = 0.0;
        float v49 = 0.0;
        if (v46 > 0.0)
        {
          float v50 = 1.0 / sqrtf(v46);
          float v47 = v43 * v50;
          float v48 = v44 * v50;
          float v49 = v45 * v50;
        }
        float v161 = v48;
        float v162 = v47;
        unint64_t v181 = __PAIR64__(LODWORD(v48), LODWORD(v47));
        float v51 = v49;
        float v182 = v49;
        float v163 = v15;
        if (PxcTestAxis((float *)&v181, v38, (float *)a3, (float *)&v175, v15))
        {
          float v154 = v42;
          float v155 = v40;
          float v156 = v39;
          float v157 = v20;
          float v158 = v19;
          float v152 = v38[3];
          float v149 = v38[1];
          float v150 = *v38;
          float v52 = v152 - *v38;
          float v151 = v38[4];
          float v53 = v151 - v149;
          float v153 = v38[5];
          float v148 = v38[2];
          float v54 = v153 - v148;
          float v55 = (float)((float)(v53 * v53) + (float)(v52 * v52)) + (float)(v54 * v54);
          float v56 = 0.0;
          float v57 = sqrtf(v55);
          float v58 = 0.0;
          float v59 = 0.0;
          if (v55 > 0.0)
          {
            float v56 = v52 * (float)(1.0 / v57);
            float v58 = v53 * (float)(1.0 / v57);
            float v59 = v54 * (float)(1.0 / v57);
          }
          float v147 = v57;
          float v146 = v152 - *v38;
          uint64_t v60 = 0;
          float v165 = v175.f32[0];
          float v61 = -v59;
          float v62 = -v56;
          float v63 = -v58;
          float v64 = v51;
          do
          {
            if ((*(_DWORD *)&asc_234422068[4 * v60] & a4) != 0)
            {
              float v65 = (float *)(a3 + 12 * v60);
              uint64_t v66 = v60 + 1;
              float v67 = (float *)(a3 + 12 * (((_BYTE)v60 + 1 + (v60 >> 1)) & 3));
              float v68 = *v65 - *v67;
              float v69 = v65[1] - v67[1];
              float v70 = v65[2] - v67[2];
              float v71 = (float)(v69 * v61) + (float)(v58 * v70);
              float v72 = (float)(v70 * v62) + (float)(v59 * v68);
              float v73 = (float)(v68 * v63) + (float)(v56 * v69);
              if (fabsf(v71) > 0.000001 || fabsf(v72) > 0.000001 || fabsf(v73) > 0.000001)
              {
                float v74 = (float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73);
                float v75 = 0.0;
                float v76 = 0.0;
                float v77 = 0.0;
                if (v74 > 0.0)
                {
                  float v78 = 1.0 / sqrtf(v74);
                  float v75 = v71 * v78;
                  float v76 = v72 * v78;
                  float v77 = v73 * v78;
                }
                float v178 = v75;
                float v179 = v76;
                float v180 = v77;
                LODWORD(v173) = 0;
                if (!PxcTestAxis(&v178, v38, (float *)a3, (float *)&v173, v163)) {
                  return;
                }
                if (*(float *)&v173 < v165)
                {
                  float v64 = v77;
                  float v161 = v76;
                  float v162 = v75;
                  float v165 = *(float *)&v173;
                }
                float v62 = -v56;
                float v61 = -v59;
                float v63 = -v58;
              }
              uint64_t v60 = v66;
            }
            else
            {
              ++v60;
            }
          }
          while (v60 != 3);
          float v79 = (float)((float)((float)((float)((float)(v151 + v149) * 0.5)
                                      - (float)((float)((float)(v158 + v156) + v154) * 0.33333))
                              * v161)
                      + (float)(v162
                              * (float)((float)((float)(v152 + v150) * 0.5)
                                      - (float)((float)((float)(v157 + v155) + v41) * 0.33333))))
              + (float)(v64
                      * (float)((float)((float)(v153 + v148) * 0.5)
                              - (float)((float)((float)(v164 + v160) + v159) * 0.33333)));
          if (v79 >= 0.0) {
            float v80 = v162;
          }
          else {
            float v80 = -v162;
          }
          if (v79 >= 0.0) {
            float v81 = v161;
          }
          else {
            float v81 = -v161;
          }
          if (v79 >= 0.0) {
            float v82 = v64;
          }
          else {
            float v82 = -v64;
          }
          v166[0] = v80;
          v166[1] = v81;
          v166[2] = v82;
          float v83 = (void *)(a1 + 8);
          uint64_t v84 = *(void *)a1;
          float v85 = *(float *)(a1 + 104);
          unint64_t v181 = __PAIR64__(LODWORD(v149), LODWORD(v150));
          float v182 = v148;
          float v178 = v152;
          float v179 = v151;
          float v180 = v153;
          if (v147 > 0.0)
          {
            float v86 = v146 * (float)(0.01 / v147);
            float v87 = (float)(v151 - v149) * (float)(0.01 / v147);
            float v88 = (float)(v153 - v148) * (float)(0.01 / v147);
            *(float *)&unint64_t v181 = v150 - v86;
            *((float *)&v181 + 1) = v149 - v87;
            float v182 = v148 - v88;
            float v178 = v152 + v86;
            float v179 = v151 + v87;
            float v180 = v153 + v88;
          }
          uint64_t v89 = 0;
          float v90 = (float *)a3;
          do
          {
            float v177 = 0.0;
            *(float *)&unint64_t v173 = -v80;
            *((float *)&v173 + 1) = -v81;
            float v174 = -v82;
            if (physx::Gu::intersectEdgeEdge(v90, (float *)(a3 + 12 * (((_BYTE)v89 + (v89 >> 1) + 1) & 3)), (float32x2_t *)&v173, (float *)&v181, &v178, &v177, &v175))
            {
              uint64_t v91 = *(unsigned int *)(v84 + 4096);
              if (v91 <= 0x3F)
              {
                float v92 = *(float *)(a1 + 16);
                float32x2_t v93 = v175;
                float v94 = *(float *)(a1 + 28);
                float v95 = v176;
                float v96 = *(float *)(a1 + 40);
                float32_t v97 = *(float *)(a1 + 52)
                    + (float)((float)((float)(v175.f32[0] * v92) + (float)(v175.f32[1] * v94)) + (float)(v176 * v96));
                float v98 = v85 + v177;
                *(_DWORD *)(v84 + 4096) = v91 + 1;
                float v99 = (float32x2_t *)(v84 + (v91 << 6));
                v99[1].f32[0] = (float)((float)(v80 * v92) + (float)(v81 * v94)) + (float)(v82 * v96);
                float32x2_t v100 = *(float32x2_t *)(a1 + 8);
                float32x2_t v101 = *(float32x2_t *)(a1 + 20);
                float32x2_t v102 = *(float32x2_t *)(a1 + 32);
                float32x2_t v103 = vadd_f32(*(float32x2_t *)(a1 + 44), vadd_f32(vadd_f32(vmul_n_f32(v100, v93.f32[0]), vmul_n_f32(v101, v93.f32[1])), vmul_n_f32(v102, v95)));
                v99->f32[0] = (float)((float)(v80 * v100.f32[0]) + (float)(v81 * v101.f32[0]))
                            + (float)(v82 * v102.f32[0]);
                v99->f32[1] = (float)(vmuls_lane_f32(v80, v100, 1) + vmuls_lane_f32(v81, v101, 1))
                            + vmuls_lane_f32(v82, v102, 1);
                v99[2] = v103;
                v99[3].f32[0] = v97;
                v99[1].f32[1] = -v98;
                v99[6].i32[1] = a2;
              }
            }
            ++v89;
            v90 += 3;
          }
          while (v89 != 3);
          uint64_t v104 = *(void *)a1;
          uint64_t v105 = *(void *)(a1 + 56);
          float v107 = *(float *)(a1 + 100);
          float v106 = *(float *)(a1 + 104);
          int32x2_t v108 = v166;
LABEL_56:
          PxcGenerateVFContacts(v83, v104, v105, (float *)a3, v108, a2, v106, v107);
        }
      }
    }
  }
}

void *PxcGenerateVFContacts(void *result, uint64_t a2, uint64_t a3, float *a4, float *a5, __int32 a6, float a7, float a8)
{
  uint64_t v8 = 0;
  float v9 = a7 + a8;
  unint64_t v10 = *(unsigned int *)(a2 + 4096);
  float v11 = *a5;
  float v12 = *a4;
  char v13 = 1;
  do
  {
    char v14 = v13;
    float v16 = a5[1];
    float v15 = a5[2];
    float v17 = a4[3] - v12;
    float v18 = a4[1];
    float v19 = a4[2];
    float v20 = a4[4] - v18;
    float v21 = a4[5] - v19;
    float v22 = a4[6] - v12;
    float v23 = a4[7] - v18;
    float v24 = a4[8] - v19;
    float v25 = (float)(v15 * v23) - (float)(v16 * v24);
    float v26 = (float)(v11 * v24) - (float)(v15 * v22);
    float v27 = (float)(v16 * v22) - (float)(v11 * v23);
    float v28 = (float)((float)(v20 * v26) + (float)(v17 * v25)) + (float)(v21 * v27);
    if (v28 >= 1.4211e-14)
    {
      float v29 = (float *)(a3 + 12 * v8);
      float v30 = v29[1];
      float v31 = *v29 - v12;
      float v32 = v30 - v18;
      float v33 = v29[2];
      float v34 = v33 - v19;
      float v35 = (float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v34 * v27);
      float v36 = -(float)(v28 * 0.001);
      float v37 = v28 + (float)(v28 * 0.001);
      BOOL v38 = v35 >= v36 && v35 <= v37;
      float v39 = (float)(v32 * v21) - (float)(v34 * v20);
      float v40 = (float)(v34 * v17) - (float)(v31 * v21);
      float v41 = (float)(v31 * v20) - (float)(v32 * v17);
      float v42 = (float)((float)(v40 * (float)-v16) + (float)((float)-v11 * v39)) + (float)((float)-v15 * v41);
      BOOL v44 = v38 && v42 >= v36 && (float)(v35 + v42) <= v37;
      float v45 = (float)(1.0 / v28) * (float)((float)((float)(v23 * v40) + (float)(v22 * v39)) + (float)(v24 * v41));
      BOOL v46 = v44 && v45 < v9;
      if (v46 && v10 <= 0x3F)
      {
        float32_t v47 = v45 - a7;
        float v48 = *((float *)result + 2);
        float v49 = *((float *)result + 5);
        float v50 = *((float *)result + 8);
        float v51 = *v29 - (float)(v11 * v45);
        float v52 = v30 - (float)(v16 * v45);
        float v53 = v33 - (float)(v15 * v45);
        float32_t v54 = (float)((float)((float)(v51 * v48) + (float)(v52 * v49)) + (float)(v53 * v50)) + *((float *)result + 11);
        float v55 = (float32x2_t *)(a2 + (v10++ << 6));
        *(_DWORD *)(a2 + 4096) = v10;
        v55[1].f32[0] = (float)((float)(v11 * v48) + (float)(v16 * v49)) + (float)(v15 * v50);
        float32x2_t v56 = *(float32x2_t *)((char *)result + 12);
        float v57 = vmuls_lane_f32(v11, *(float32x2_t *)result, 1) + vmuls_lane_f32(v16, v56, 1);
        float32x2_t v58 = (float32x2_t)result[3];
        float v59 = vmuls_lane_f32(v15, v58, 1);
        float32_t v60 = (float)((float)(v11 * COERCE_FLOAT(*result)) + (float)(v16 * v56.f32[0])) + (float)(v15 * v58.f32[0]);
        float32x2_t v61 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)result, v51), vmul_n_f32(v56, v52)), vmul_n_f32(v58, v53)), *(float32x2_t *)((char *)result + 36));
        v55->f32[0] = v60;
        v55->f32[1] = v57 + v59;
        v55[2] = v61;
        v55[3].f32[0] = v54;
        v55[1].f32[1] = v47;
        v55[6].i32[1] = a6;
        float v11 = *a5;
        float v12 = *a4;
      }
    }
    char v13 = 0;
    uint64_t v8 = 1;
  }
  while ((v14 & 1) != 0);
  return result;
}

BOOL PxcTestAxis(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[2];
  float v8 = a2[3];
  float v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  float v10 = a2[5];
  float v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11) {
    float v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  }
  else {
    float v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  }
  if (v9 > v11) {
    float v11 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  }
  float v13 = v12 - a5;
  float v14 = v11 + a5;
  float v15 = a3[3];
  float v16 = (float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7);
  float v17 = a3[5];
  float v18 = (float)((float)(v6 * a3[4]) + (float)(v15 * v5)) + (float)(v17 * v7);
  if (v16 >= v18) {
    float v19 = (float)((float)(v6 * a3[4]) + (float)(v15 * v5)) + (float)(v17 * v7);
  }
  else {
    float v19 = (float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7);
  }
  if (v16 <= v18) {
    float v16 = v18;
  }
  float v20 = (float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7);
  if (v19 >= v20) {
    float v21 = v20;
  }
  else {
    float v21 = v19;
  }
  if (v16 > v20) {
    float v20 = v16;
  }
  BOOL result = v20 >= v13 && v14 >= v21;
  if (result)
  {
    float v23 = v14 - v21;
    float v24 = v20 - v13;
    if (v23 >= v24) {
      float v23 = v24;
    }
    *a4 = v23;
  }
  return result;
}

{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL result;
  float v20;
  float v21;

  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[2];
  float v8 = a2[3];
  float v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  float v10 = a2[5];
  float v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11) {
    float v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  }
  else {
    float v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  }
  if (v9 > v11) {
    float v9 = v11;
  }
  float v13 = v9 - a5;
  float v14 = v12 + a5;
  float v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * v5)) + (float)(a3[11] * v7);
  float v16 = (float)((float)(a3[13] * fabsf((float)((float)(v6 * a3[4]) + (float)(a3[3] * v5)) + (float)(a3[5] * v7)))
              + (float)(fabsf((float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7)) * a3[12]))
      + (float)(fabsf((float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7)) * a3[14]);
  float v17 = v15 - v16;
  float v18 = v15 + v16;
  BOOL result = v18 >= v13 && v14 >= v17;
  if (result)
  {
    float v20 = v14 - v17;
    float v21 = v18 - v13;
    if (v20 >= v21) {
      float v20 = v21;
    }
    *a4 = v20;
  }
  return result;
}

uint64_t physx::Gu::unsupportedBoxCBOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

{
  uint64_t result;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

uint64_t physx::Cm::FastVertex2ShapeScaling::init(uint64_t result, float *a2, float *a3)
{
  float v3 = *a3;
  float v4 = a3[1];
  float v5 = a3[2];
  float v6 = a3[3];
  float v7 = v4 + v4;
  float v8 = v3 * (float)(v3 + v3);
  float v9 = v4 * (float)(v4 + v4);
  float v10 = v5 * (float)(v5 + v5);
  float v11 = (float)(v3 + v3) * v4;
  float v12 = (float)(v3 + v3) * v5;
  float v13 = (float)(v3 + v3) * v6;
  float v14 = v7 * v5;
  float v15 = v7 * v6;
  float v16 = (float)(v5 + v5) * v6;
  float v17 = 1.0;
  float v18 = (float)(1.0 - v9) - v10;
  float v19 = v11 + v16;
  float v20 = v12 - v15;
  float v21 = v11 - v16;
  float v22 = (float)(1.0 - v8) - v10;
  float v23 = v14 + v13;
  float v24 = v12 + v15;
  float v25 = v14 - v13;
  float v26 = (float)(1.0 - v8) - v9;
  *(float *)uint64_t result = v18;
  *(float *)(result + 4) = v21;
  *(float *)(result + 8) = v24;
  *(float *)(result + 12) = v19;
  *(float *)(result + 16) = v22;
  *(float *)(result + 2physx::Sq::AABBTree::release(this, 0) = v14 - v13;
  *(float *)(result + 24) = v20;
  *(float *)(result + 28) = v14 + v13;
  *(float *)(result + 32) = v26;
  float v27 = a2[1];
  float v28 = a2[2];
  float v29 = 0.0;
  float v30 = (float)(v20 * 0.0) + (float)((float)(v19 * 0.0) + (float)(v18 * *a2));
  float v31 = (float)(v23 * 0.0) + (float)((float)(v22 * 0.0) + (float)(v21 * *a2));
  float v32 = (float)(v26 * 0.0) + (float)((float)(v25 * 0.0) + (float)(v24 * *a2));
  float v33 = (float)(v20 * 0.0) + (float)((float)(v18 * 0.0) + (float)(v19 * v27));
  float v34 = (float)(v23 * 0.0) + (float)((float)(v21 * 0.0) + (float)(v22 * v27));
  float v35 = (float)(v26 * 0.0) + (float)((float)(v24 * 0.0) + (float)(v25 * v27));
  float v36 = (float)((float)(v18 * 0.0) + (float)(v19 * 0.0)) + (float)(v20 * v28);
  float v37 = (float)((float)(v21 * 0.0) + (float)(v22 * 0.0)) + (float)(v23 * v28);
  float v38 = (float)((float)(v24 * 0.0) + (float)(v25 * 0.0)) + (float)(v26 * v28);
  float v39 = v20 * v37;
  float v40 = v20 * v38;
  float v41 = (float)(v20 * v36) + (float)((float)(v18 * v30) + (float)(v19 * v33));
  float v42 = v39 + (float)((float)(v18 * v31) + (float)(v19 * v34));
  float v43 = v40 + (float)((float)(v18 * v32) + (float)(v19 * v35));
  float v44 = (float)(v21 * v30) + (float)(v22 * v33);
  float v45 = (float)(v21 * v31) + (float)(v22 * v34);
  float v46 = (float)(v21 * v32) + (float)(v22 * v35);
  float v47 = v23 * v38;
  float v48 = (float)(v23 * v36) + v44;
  float v49 = (float)(v23 * v37) + v45;
  float v50 = v47 + v46;
  float v51 = v24 * v30;
  float v52 = v24 * v31;
  float v53 = (float)(v24 * v32) + (float)(v25 * v35);
  float v54 = v26 * v37;
  float v55 = v26 * v38;
  float v56 = (float)(v26 * v36) + (float)(v51 + (float)(v25 * v33));
  float v57 = v54 + (float)(v52 + (float)(v25 * v34));
  float v58 = v55 + v53;
  *(float *)uint64_t result = v41;
  *(float *)(result + 4) = v42;
  *(float *)(result + 8) = v43;
  *(float *)(result + 12) = v48;
  *(float *)(result + 16) = v49;
  *(float *)(result + 2physx::Sq::AABBTree::release(this, 0) = v50;
  *(float *)(result + 24) = v56;
  *(float *)(result + 28) = v57;
  *(float *)(result + 32) = v58;
  float v59 = (float)(v48 * v57) - (float)(v49 * v56);
  float v60 = (float)((float)(v42 * (float)((float)(v50 * v56) - (float)(v48 * v58)))
              + (float)(v41 * (float)((float)(v49 * v58) - (float)(v50 * v57))))
      + (float)(v43 * v59);
  float v61 = 0.0;
  float v62 = 0.0;
  float v63 = 1.0;
  float v64 = 0.0;
  float v65 = 0.0;
  float v66 = 0.0;
  float v67 = 1.0;
  if (v60 != 0.0)
  {
    float v68 = 1.0 / v60;
    float v17 = (float)((float)(v49 * v58) - (float)(v57 * v50)) * v68;
    float v29 = -(float)((float)((float)(v42 * v58) - (float)(v57 * v43)) * v68);
    float v61 = (float)((float)(v42 * v50) - (float)(v43 * v49)) * v68;
    float v62 = -(float)((float)((float)(v56 * (float)-v50) + (float)(v48 * v58)) * v68);
    float v63 = (float)((float)(v41 * v58) - (float)(v43 * v56)) * v68;
    float v64 = -(float)((float)((float)(v41 * v50) - (float)(v43 * v48)) * v68);
    float v65 = v59 * v68;
    float v66 = -(float)((float)((float)(v41 * v57) - (float)(v42 * v56)) * v68);
    float v67 = (float)((float)(v42 * (float)-v48) + (float)(v41 * v49)) * v68;
  }
  *(float *)(result + 36) = v17;
  *(float *)(result + 4physx::Sq::AABBTree::release(this, 0) = v29;
  *(float *)(result + 44) = v61;
  *(float *)(result + 48) = v62;
  *(float *)(result + 52) = v63;
  *(float *)(result + 56) = v64;
  *(float *)(result + 6physx::Sq::AABBTree::release(this, 0) = v65;
  *(float *)(result + 64) = v66;
  *(float *)(result + 68) = v67;
  *(unsigned char *)(result + 72) = (float)((float)(*a2 * a2[1]) * a2[2]) < 0.0;
  return result;
}

uint64_t anonymous namespace'::CapsuleMeshContactGenerationCallback_Scale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  int v7 = *(unsigned __int8 *)(v5 + 72);
  float v8 = *(float *)(v5 + 8);
  float v9 = *a3;
  float v10 = a3[1];
  float v11 = *(float *)(v5 + 20);
  float v12 = a3[2];
  float v13 = *(float *)(v5 + 32);
  float v34 = (float)((float)(*a3 * v8) + (float)(v10 * v11)) + (float)(v12 * v13);
  float v14 = *a4;
  float v15 = a4[1];
  float v16 = a4[2];
  BOOL v17 = v7 == 0;
  uint64_t v18 = 24;
  if (v17) {
    uint64_t v19 = 12;
  }
  else {
    uint64_t v19 = 24;
  }
  float v20 = *a5;
  float v21 = a5[1];
  float v22 = a5[2];
  float v23 = (float32x2_t *)((char *)&v33 + v19);
  v23[1].f32[0] = (float)((float)(v8 * *a4) + (float)(v11 * v15)) + (float)(v13 * v16);
  float v24 = (float)((float)(v8 * v20) + (float)(v11 * v21)) + (float)(v13 * v22);
  if (!v17) {
    uint64_t v18 = 12;
  }
  float v25 = (float32x2_t *)((char *)&v33 + v18);
  float32x2_t v26 = *(float32x2_t *)v5;
  float32x2_t v27 = *(float32x2_t *)(v5 + 12);
  float32x2_t v28 = *(float32x2_t *)(v5 + 24);
  float32x2_t v33 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v5, v9), vmul_n_f32(v27, v10)), vmul_n_f32(v28, v12));
  *float v23 = vadd_f32(vadd_f32(vmul_n_f32(v26, v14), vmul_n_f32(v27, v15)), vmul_n_f32(v28, v16));
  *float v25 = vadd_f32(vadd_f32(vmul_n_f32(v26, v20), vmul_n_f32(v27, v21)), vmul_n_f32(v28, v22));
  v25[1].f32[0] = v24;
  uint64_t v29 = *(unsigned int *)(a2 + 16);
  uint64_t v30 = *(void *)(v6 + 80);
  if (v30) {
    uint64_t v31 = *(unsigned __int8 *)(v30 + v29);
  }
  else {
    uint64_t v31 = 56;
  }
  return 1;
}

void anonymous namespace'::CapsuleMeshContactGenerationCallback_Scale::~CapsuleMeshContactGenerationCallback_Scale(_anonymous_namespace_::CapsuleMeshContactGenerationCallback_Scale *this)
{
}

void anonymous namespace'::CapsuleHeightfieldContactGenerationCallback::~CapsuleHeightfieldContactGenerationCallback(_anonymous_namespace_::CapsuleHeightfieldContactGenerationCallback *this)
{
}

uint64_t anonymous namespace'::CapsuleHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::CapsuleHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v24 = a2;
  if (a2)
  {
    float v22 = (char *)this + 8;
    do
    {
      __int32 v5 = *a3;
      physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 15), *((float **)this + 16), (uint64_t)&v34, (uint64_t)v44, (uint64_t)v43, *a3, 0, 0);
      float v6 = (float)((float)(v38 - v35) * (float)(v42 - v36)) - (float)((float)(v39 - v36) * (float)(v41 - v35));
      float v7 = (float)((float)(v39 - v36) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v42 - v36));
      float v8 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
      float v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
      float v23 = a3 + 1;
      if (v9 > 0.0)
      {
        float v10 = 1.0 / v9;
        float v6 = v6 * v10;
        float v7 = v7 * v10;
        float v8 = v8 * v10;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      --v24;
      do
      {
        unsigned int v13 = v43[v11];
        if (v13 == -1)
        {
          v12 |= 8 << v11;
        }
        else
        {
          physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 15), *((float **)this + 16), (uint64_t)&v25, 0, 0, v13, 0, 0);
          float v14 = (float)((float)(v29 - v26) * (float)(v33 - v27)) - (float)((float)(v30 - v27) * (float)(v32 - v26));
          float v15 = (float)((float)(v30 - v27) * (float)(v31 - v25)) - (float)((float)(v28 - v25) * (float)(v33 - v27));
          float v16 = (float)((float)(v28 - v25) * (float)(v32 - v26)) - (float)((float)(v29 - v26) * (float)(v31 - v25));
          BOOL v17 = &v34 + 3 * byte_2344220EF[v11];
          if ((float)((float)((float)(v15 * (float)(v17[1] - v26)) + (float)(v14 * (float)(*v17 - v25)))
                     + (float)(v16 * (float)(v17[2] - v27))) < 0.0)
          {
            float v18 = sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16));
            if (v18 > 0.0)
            {
              float v19 = 1.0 / v18;
              float v14 = v14 * v19;
              float v15 = v15 * v19;
              float v16 = v16 * v19;
            }
            int v20 = 8 << v11;
            if ((float)((float)((float)(v7 * v15) + (float)(v14 * v6)) + (float)(v16 * v8)) >= 0.999) {
              int v20 = 0;
            }
            v12 |= v20;
          }
        }
        ++v11;
      }
      while (v11 != 3);
      a3 = v23;
    }
    while (v24);
  }
  return 1;
}

void physx::Gu::computeBounds(float32x2_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, float32x4_t a5, int8x16_t a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  float v18 = *(float *)a6.i32;
  float v19 = a4;
  v17.i32[0] = a5.i32[0];
  switch(*(_DWORD *)a2)
  {
    case 0xFFFFFFFF:
    case 7:
      uint64_t v22 = physx::shdfnd::Foundation::mInstance;
      physx::shdfnd::Foundation::error(v22, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBounds.cpp", 364, "Gu::GeometryUnion::computeBounds: Unknown shape type.", a14, a15, a16, a17);
      return;
    case 0:
      a5.f32[0] = (float)(*(float *)(a2 + 4) + a5.f32[0]) * *(float *)a6.i32;
      float32_t v23 = *(float *)(a3 + 24) - a5.f32[0];
      float32x2_t v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 0);
      *a1 = vsub_f32(*(float32x2_t *)(a3 + 16), v24);
      a1[1].f32[0] = v23;
      a5.f32[0] = a5.f32[0] + *(float *)(a3 + 24);
      goto LABEL_14;
    case 1:
      float v25 = *(float *)a3;
      float v26 = *(float *)(a3 + 4);
      float v27 = v25 + v25;
      float v29 = *(float *)(a3 + 8);
      float v28 = *(float *)(a3 + 12);
      float v30 = v28 + v28;
      float v31 = (float)((float)(v28 * (float)(v28 + v28)) + -1.0) + (float)(v25 * (float)(v25 + v25));
      float v32 = (float)((float)(v25 + v25) * v26) + (float)(v29 * v30);
      float v33 = (float)(v27 * v29) - (float)(v26 * v30);
      float v34 = (float)((float)(*(float *)(a3 + 20) * v32) + (float)(*(float *)(a3 + 16) * v31))
          + (float)(*(float *)(a3 + 24) * v33);
      float v35 = -v34;
      float v36 = fabsf(v31);
      float v37 = fabsf(v32);
      float v38 = fabsf(v33);
      if (v36 > 1.0 && v37 < 0.000001 && v38 < 0.000001)
      {
        if (v31 <= 0.0)
        {
          float v40 = v35 - *(float *)v17.i32;
          float v114 = -8.5071e37;
          float v39 = 8.5071e37;
          float v41 = 8.5071e37;
          float v42 = 8.5071e37;
          float v115 = -8.5071e37;
          goto LABEL_54;
        }
        float v39 = v34 + *(float *)v17.i32;
        float v40 = -8.5071e37;
        float v41 = 8.5071e37;
        float v42 = 8.5071e37;
        goto LABEL_52;
      }
      if (v36 < 0.000001 && v37 > 1.0 && v38 < 0.000001)
      {
        if (v32 <= 0.0)
        {
          float v114 = v35 - *(float *)v17.i32;
          float v40 = -8.5071e37;
          float v39 = 8.5071e37;
          float v41 = 8.5071e37;
          float v42 = 8.5071e37;
LABEL_53:
          float v115 = -8.5071e37;
          goto LABEL_54;
        }
        float v41 = v34 + *(float *)v17.i32;
        float v40 = -8.5071e37;
        float v39 = 8.5071e37;
        goto LABEL_51;
      }
      float v40 = -8.5071e37;
      float v39 = 8.5071e37;
      if (v36 >= 0.000001 || v37 >= 0.000001)
      {
        float v41 = 8.5071e37;
LABEL_51:
        float v42 = 8.5071e37;
        goto LABEL_52;
      }
      BOOL v116 = v38 <= 1.0;
      float v41 = 8.5071e37;
      float v42 = 8.5071e37;
      float v114 = -8.5071e37;
      float v115 = -8.5071e37;
      if (v116) {
        goto LABEL_54;
      }
      if (v33 > 0.0)
      {
        float v42 = v34 + *(float *)v17.i32;
        float v40 = -8.5071e37;
        float v39 = 8.5071e37;
        float v41 = 8.5071e37;
LABEL_52:
        float v114 = -8.5071e37;
        goto LABEL_53;
      }
      float v115 = v35 - *(float *)v17.i32;
      float v40 = -8.5071e37;
      float v39 = 8.5071e37;
      float v41 = 8.5071e37;
      float v42 = 8.5071e37;
      float v114 = -8.5071e37;
LABEL_54:
      if (v18 != 1.0)
      {
        float v127 = (float)(v39 + v40) * 0.5;
        float v128 = (float)(v41 + v114) * 0.5;
        float v129 = (float)(v42 + v115) * 0.5;
        float v130 = v39 - v40;
        float v131 = v41 - v114;
        float v132 = (float)(v42 - v115) * 0.5;
        float v133 = (float)(v130 * 0.5) * v18;
        float v134 = (float)(v131 * 0.5) * v18;
        float v135 = v132 * v18;
        float v40 = v127 - v133;
        float v114 = v128 - v134;
        float v115 = v129 - (float)(v132 * v18);
        float v39 = v127 + v133;
        float v41 = v128 + v134;
        float v42 = v129 + v135;
      }
      a1->f32[0] = v40;
      a1->f32[1] = v114;
      a1[1].f32[0] = v115;
      a1[1].f32[1] = v39;
      a1[2].f32[0] = v41;
      a1[2].f32[1] = v42;
      return;
    case 2:
      uint64_t v43 = 0;
      float v45 = *(float *)(a3 + 8);
      float v44 = *(float *)(a3 + 12);
      float v46 = *(float *)a3;
      float v47 = *(float *)(a3 + 4);
      *(float *)float32x2_t v144 = (float)((float)(v44 * (float)(v44 + v44)) + -1.0) + (float)(v46 * (float)(v46 + v46));
      *(float *)&v144[4] = (float)((float)(v46 + v46) * v47) + (float)(v45 * (float)(v44 + v44));
      *(float *)&v144[8] = (float)((float)(v46 + v46) * v45) - (float)(v47 * (float)(v44 + v44));
      float v49 = *(float *)(a2 + 4);
      float v48 = *(float *)(a2 + 8);
      do
      {
        v143.f32[v43] = (float)((float)(v49 + (float)(fabsf(*(float *)&v144[v43 * 4]) * v48)) + *(float *)v17.i32) * v18;
        ++v43;
      }
      while (v43 != 3);
      float v50 = v143.f32[2];
      float32_t v51 = *(float *)(a3 + 24) - v143.f32[2];
      float32x2_t v24 = *(float32x2_t *)v143.f32;
      *a1 = vsub_f32(*(float32x2_t *)(a3 + 16), *(float32x2_t *)v143.f32);
      a1[1].f32[0] = v51;
      a5.f32[0] = v50 + *(float *)(a3 + 24);
LABEL_14:
      *(float32x2_t *)((char *)a1 + 12) = vadd_f32(v24, *(float32x2_t *)(a3 + 16));
      a1[2].i32[1] = a5.i32[0];
      return;
    case 3:
      a5.i64[0] = *(void *)(a3 + 16);
      a5.i32[2] = *(_DWORD *)(a3 + 24);
      float32x2_t v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
      float32x2_t v56 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      float32x2_t v57 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q5 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
      float32x2_t v59 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q5.f32), 0);
      float32x2_t v60 = vmul_lane_f32(v55, *(float32x2_t *)_Q5.f32, 1);
      float32x2_t v61 = vmul_laneq_f32(v56, _Q5, 2);
      float32x2_t v62 = vmul_n_f32(v55, _Q5.f32[0]);
      float32x2_t v63 = vmul_n_f32(v56, _Q5.f32[0]);
      float32x2_t v64 = vmul_n_f32(v57, _Q5.f32[0]);
      float32x2_t v65 = vmul_lane_f32(v56, *(float32x2_t *)_Q5.f32, 1);
      float32x2_t v66 = vmul_lane_f32(v57, *(float32x2_t *)_Q5.f32, 1);
      float32x2_t v67 = vmul_laneq_f32(v57, _Q5, 2);
      __asm { FMOV            V5.2S, #1.0 }
      float32x2_t v72 = vsub_f32(*(float32x2_t *)_Q5.f32, v59);
      LODWORD(v73) = vsub_f32(v63, v66).u32[0];
      int32x2_t v74 = (int32x2_t)vadd_f32(v65, v64);
      *(int8x8_t *)v75.f32 = vext_s8((int8x8_t)vadd_f32(v63, v66), (int8x8_t)vsub_f32(v65, v64), 4uLL);
      v75.i64[1] = vsub_f32(v72, v60).u32[0];
      *(float *)float32x2_t v144 = (float)(1.0 - v60.f32[1]) - v61.f32[1];
      *(_DWORD *)&v144[4] = vadd_f32(v62, v67).u32[0];
      HIDWORD(v73) = vsub_f32(v62, v67).i32[1];
      *(void *)&v144[8] = v73;
      *(int32x2_t *)&v144[16] = vzip1_s32((int32x2_t)vsub_f32(v72, v61), v74);
      *(float32x4_t *)&v144[24] = v75;
      float32x4_t v76 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v17, 0), vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(*(float32x4_t *)v144, *(float *)(a2 + 4))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)&v144[12], *(float *)(a2 + 8)))), vabsq_f32(vmulq_n_f32(v75, *(float *)(a2 + 12))))), v18);
      float32x4_t v77 = vsubq_f32(a5, v76);
      int8x16_t v78 = (int8x16_t)vaddq_f32(a5, v76);
      goto LABEL_28;
    case 4:
      uint64_t v79 = *(void *)(a2 + 32);
      if (*(unsigned char *)(a2 + 40))
      {
        int v85 = *(_DWORD *)(a2 + 4);
        int v86 = *(_DWORD *)(a2 + 8);
        uint64_t v84 = a2 + 4;
        int v87 = *(_DWORD *)(v84 + 8);
        float32x4_t v105 = *(float32x4_t *)a3;
        float32x2_t v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
        float32x2_t v89 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
        float32x2_t v90 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
        _Q4 = vaddq_f32(v105, v105);
        *(int32x2_t *)v105.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
        float32x2_t v104 = vmul_lane_f32(v88, *(float32x2_t *)_Q4.f32, 1);
        float32x2_t v92 = vmul_laneq_f32(v89, _Q4, 2);
        float32x2_t v93 = vmul_n_f32(v88, _Q4.f32[0]);
        float32x2_t v94 = vmul_n_f32(v89, _Q4.f32[0]);
        float32x2_t v95 = vmul_n_f32(v90, _Q4.f32[0]);
        float32x2_t v96 = vmul_lane_f32(v89, *(float32x2_t *)_Q4.f32, 1);
        float32x2_t v97 = vmul_lane_f32(v90, *(float32x2_t *)_Q4.f32, 1);
        float32x2_t v98 = vmul_laneq_f32(v90, _Q4, 2);
        __asm { FMOV            V4.2S, #1.0 }
        *(float32x2_t *)v105.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v105.f32);
        double v99 = COERCE_DOUBLE(vadd_f32(v93, v98));
        LODWORD(v10physx::Sq::AABBTree::release(this, 0) = vsub_f32(v94, v97).u32[0];
        *(float32x2_t *)a6.i8 = vsub_f32(v93, v98);
        int32x2_t v101 = (int32x2_t)vsub_f32(*(float32x2_t *)v105.f32, v92);
        int32x2_t v102 = (int32x2_t)vadd_f32(v96, v95);
        *(float32x2_t *)a12.i8 = vadd_f32(v94, v97);
        *(int8x8_t *)v103.i8 = vext_s8(*(int8x8_t *)a12.i8, (int8x8_t)vsub_f32(v96, v95), 4uLL);
        v103.i64[1] = vsub_f32(*(float32x2_t *)v105.f32, v104).u32[0];
        v104.i32[0] = v92.i32[1];
        *(float *)float32x2_t v144 = (float)(1.0 - v104.f32[1]) - v92.f32[1];
        *(_DWORD *)&v144[4] = LODWORD(v99);
        HIDWORD(v10physx::Sq::AABBTree::release(this, 0) = a6.i32[1];
        *(int32x2_t *)v105.f32 = vzip1_s32(v101, v102);
        *(void *)&v144[8] = v100;
        *(void *)&v144[16] = v105.i64[0];
        *(int8x16_t *)&v144[24] = v103;
        if ((v86 - 1065353216) | (v85 - 1065353216) | (v87 - 1065353216))
        {
          int32x2_t v138 = v17;
          float v141 = v18;
          computeScaledMatrix((uint64_t)v144, v84, (int8x16_t)v105, a6, v103, *(double *)&v101, v99, *(double *)&v104, *(double *)&v92, a12);
          int32x2_t v17 = v138;
          float v18 = v141;
        }
        uint64_t v106 = *(void *)(v79 + 72);
        uint64_t v107 = 20 * *(unsigned __int8 *)(v79 + 71);
        float32x4_t v108 = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)v144, COERCE_FLOAT(*(_OWORD *)(v106 + v107))), vmulq_lane_f32(*(float32x4_t *)&v144[12], *(float32x2_t *)(v106 + v107), 1)), vmulq_laneq_f32(*(float32x4_t *)&v144[24], *(float32x4_t *)(v106 + v107), 2));
        int v109 = *(unsigned __int8 *)(v79 + 70) - 1;
        if (*(unsigned char *)(v79 + 70) == 1)
        {
          float32x4_t v111 = v108;
        }
        else
        {
          float v110 = (_OWORD *)(v107 + v106 + 12);
          float32x4_t v111 = v108;
          do
          {
            float32x4_t v112 = *(float32x4_t *)v110;
            float v110 = (_OWORD *)((char *)v110 + 12);
            float32x4_t v113 = vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)&v144[24], v112, 2), vaddq_f32(vmulq_n_f32(*(float32x4_t *)v144, v112.f32[0]), vmulq_lane_f32(*(float32x4_t *)&v144[12], *(float32x2_t *)v112.f32, 1)));
            float32x4_t v108 = vminq_f32(v108, v113);
            float32x4_t v111 = vmaxq_f32(v111, v113);
            --v109;
          }
          while (v109);
        }
        float32x4_t v117 = (float32x4_t)vdupq_lane_s32(v17, 0);
        float32x4_t v118 = vsubq_f32(v108, v117);
        v119.i64[0] = *(void *)(a3 + 16);
        v119.i64[1] = *(unsigned int *)(a3 + 24);
        float32x4_t v120 = vaddq_f32(vaddq_f32(v117, v111), v119);
        float32x4_t v121 = vaddq_f32(v118, v119);
        v122.i64[0] = 0x3F0000003F000000;
        v122.i64[1] = 0x3F0000003F000000;
        float32x4_t v123 = vmulq_f32(vaddq_f32(v120, v121), v122);
        float32x4_t v124 = vmulq_n_f32(vsubq_f32(v120, v121), v18 * 0.5);
        int8x16_t v125 = (int8x16_t)vaddq_f32(v123, v124);
        float32x4_t v126 = vsubq_f32(v123, v124);
        v126.i32[3] = v125.i32[0];
        *(float32x4_t *)a1->f32 = v126;
        unint64_t v83 = vextq_s8(v125, v125, 4uLL).u64[0];
      }
      else
      {
        if (!a4) {
          float v19 = (_OWORD *)(v79 + 32);
        }
        float v52 = (_DWORD *)(a2 + 4);
        float v53 = (int32x2_t *)a3;
        float v54 = v19;
        int32x2_t v136 = v17;
        float v139 = *(float *)a6.i32;
LABEL_23:
        computeMeshBounds(v53, v54, v52, (float32x4_t *)v144, &v143, *(double *)a5.i64, a6, a7, a8, a9, a10, a11, a12);
        float32x4_t v80 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v136, 0), v143), v139);
        float32x4_t v81 = *(float32x4_t *)v144;
LABEL_27:
        float32x4_t v77 = vsubq_f32(v81, v80);
        int8x16_t v78 = (int8x16_t)vaddq_f32(v81, v80);
LABEL_28:
        v77.i32[3] = v78.i32[0];
        *(float32x4_t *)a1->f32 = v77;
        unint64_t v83 = vextq_s8(v78, v78, 4uLL).u64[0];
      }
      a1[2] = (float32x2_t)v83;
      return;
    case 5:
      int32x2_t v136 = v17;
      float v139 = *(float *)a6.i32;
      if (!a4) {
        float v19 = (_OWORD *)(*(void *)(a2 + 40) + 56);
      }
      float v52 = (_DWORD *)(a2 + 4);
      float v53 = (int32x2_t *)a3;
      float v54 = v19;
      goto LABEL_23;
    case 6:
      int32x2_t v137 = v17;
      float v140 = *(float *)a6.i32;
      int v82 = *(_DWORD *)(a2 + 24);
      *(int32x2_t *)a6.i8 = vrev64_s32(*(int32x2_t *)(a2 + 16));
      *(void *)float32x2_t v144 = a6.i64[0];
      *(_DWORD *)&v144[8] = v82;
      *(_OWORD *)&v144[12] = xmmword_23435FBB0;
      if (!a4) {
        float v19 = (_OWORD *)(*(void *)(a2 + 8) + 32);
      }
      computeMeshBounds((int32x2_t *)a3, v19, v144, &v143, &v142, 0.0, a6, a7, a8, a9, a10, a11, a12);
      float32x4_t v80 = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v137, 0), v142), v140);
      float32x4_t v81 = v143;
      goto LABEL_27;
    default:
      return;
  }
}

float32x2_t computeScaledMatrix(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, double a6, double a7, double a8, double a9, int32x4_t a10)
{
  a5.i32[0] = *(_DWORD *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 20);
  a3.i32[0] = *(_DWORD *)(a1 + 32);
  a10.i64[0] = *(void *)(a2 + 12);
  float32x2_t v15 = *(float32x2_t *)(a2 + 20);
  float32x2_t v16 = vadd_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8);
  *(float32x2_t *)v11.i8 = vadd_f32(*(float32x2_t *)a10.i8, (float32x2_t)__PAIR64__(v16.u32[1], a10.u32[0]));
  float32x2_t v17 = (float32x2_t)vext_s8((int8x8_t)vmul_f32(*(float32x2_t *)a10.i8, v16), *(int8x8_t *)v11.i8, 4uLL);
  *(float *)v12.i32 = vmul_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v11.i8).f32[0];
  float32x2_t v18 = vmul_n_f32(v15, *(float *)v11.i32);
  float32x2_t v19 = vmul_lane_f32(v15, v16, 1);
  *(int32x2_t *)v11.i8 = vrev64_s32((int32x2_t)v19);
  float32x2_t v20 = vmul_n_f32(v15, vadd_f32(v15, v15).f32[0]);
  a10.i32[0] = 1.0;
  v13.i32[0] = vsub_f32(*(float32x2_t *)a10.i8, v17).u32[0];
  *(float32x2_t *)a10.i8 = vmul_f32(*(float32x2_t *)a10.i8, v17);
  v13.i32[1] = a10.i32[1];
  *(int32x2_t *)a10.i8 = vdup_lane_s32(*(int32x2_t *)a10.i8, 1);
  *(float *)v10.i32 = 1.0 - *(float *)v12.i32;
  *(int32x2_t *)v12.i8 = vrev64_s32((int32x2_t)v20);
  v21.i32[0] = vadd_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v12.i8).u32[0];
  a10.i32[1] = v10.i32[0];
  float32x2_t v22 = vsub_f32(*(float32x2_t *)v13.i8, v20);
  v21.i32[1] = vsub_f32(*(float32x2_t *)&a10, *(float32x2_t *)&v12).i32[1];
  a10.i32[0] = vsub_f32(v18, *(float32x2_t *)v11.i8).u32[0];
  *(float32x2_t *)v11.i8 = vadd_f32(v18, *(float32x2_t *)v11.i8);
  v12.i64[0] = *(void *)(a2 + 4);
  *(float *)v13.i32 = vmuls_lane_f32(*(float *)a10.i32, *(float32x2_t *)v12.i8, 1);
  a10.i32[1] = v11.i32[1];
  float v23 = *(float *)a2 * v22.f32[0];
  float v24 = vmuls_lane_f32(*(float *)a2, v22, 1);
  float v25 = *(float *)a2 * *(float *)v11.i32;
  *(float32x2_t *)v14.i8 = vmul_n_f32(v22, v23);
  float32x2_t v26 = vmul_n_f32(v22, v24);
  float32x2_t v27 = vmul_n_f32(v22, v25);
  float v28 = v23 * *(float *)v11.i32;
  float v29 = v24 * *(float *)v11.i32;
  float v30 = v25 * *(float *)v11.i32;
  v19.i32[1] = v10.i32[0];
  float32x2_t v31 = vsub_f32(v19, (float32x2_t)vext_s8((int8x8_t)v18, (int8x8_t)v17, 4uLL));
  float32x2_t v32 = vmul_f32(v21, *(float32x2_t *)v12.i8);
  float32x2_t v33 = vmul_f32(v31, *(float32x2_t *)v12.i8);
  *(float32x2_t *)v10.i8 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v21, *(int32x2_t *)a10.i8), *(float32x2_t *)v12.i8);
  *(float *)v11.i32 = vmuls_lane_f32(v31.f32[1], *(float32x2_t *)v12.i8, 1);
  *(float32x2_t *)v12.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v14.i8, vmul_n_f32(v21, v32.f32[0])), vmul_n_f32(*(float32x2_t *)a10.i8, *(float *)v13.i32));
  *(float32x2_t *)v14.i8 = vadd_f32(vadd_f32(v26, vmul_n_f32(v21, *(float *)v10.i32)), vmul_lane_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)v10.i8, 1));
  *(float32x2_t *)a10.i8 = vadd_f32(vadd_f32(v27, vmul_n_f32(v21, v33.f32[0])), vmul_n_f32(*(float32x2_t *)a10.i8, *(float *)v11.i32));
  *(float32x2_t *)v10.i8 = vmul_f32(v31, *(float32x2_t *)v10.i8);
  float v34 = v30 + vmul_f32(v31, v33).f32[0];
  v32.f32[0] = (float)(v28 + vmul_f32(v31, v32).f32[0]) + vmuls_lane_f32(*(float *)v13.i32, v31, 1);
  v33.f32[0] = (float)(v29 + *(float *)v10.i32) + *(float *)&v10.i32[1];
  float v35 = v34 + vmuls_lane_f32(*(float *)v11.i32, v31, 1);
  v31.f32[0] = (float)((float)(*(float *)a5.i32 * v32.f32[0]) + (float)(v33.f32[0] * *(float *)a4.i32))
             + (float)(v35 * *(float *)a3.i32);
  v10.i64[0] = *(void *)a1;
  v11.i64[0] = *(void *)(a1 + 12);
  v13.i64[0] = *(void *)(a1 + 24);
  float32x4_t v36 = (float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), v10, 0xCuLL);
  v36.i32[3] = v36.i32[0];
  float32x4_t v37 = (float32x4_t)vextq_s8(vextq_s8(a4, a4, 4uLL), v11, 0xCuLL);
  v37.i32[3] = v37.i32[0];
  float32x4_t v38 = (float32x4_t)vextq_s8(vextq_s8(a3, a3, 4uLL), v13, 0xCuLL);
  v38.i32[3] = v38.i32[0];
  *(float32x2_t *)a1 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *(float *)v12.i32), vmul_n_f32(*(float32x2_t *)v11.i8, *(float *)v14.i32)), vmul_n_f32(*(float32x2_t *)v13.i8, *(float *)a10.i32));
  *(float32x4_t *)(a1 + 8) = vaddq_f32(vaddq_f32(vmulq_f32(v36, (float32x4_t)vzip1q_s32(v12, vdupq_lane_s32(*(int32x2_t *)v12.i8, 1))), vmulq_f32((float32x4_t)vzip1q_s32(v14, vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), v37)), vmulq_f32((float32x4_t)vzip1q_s32(a10, vdupq_lane_s32(*(int32x2_t *)a10.i8, 1)), v38));
  float32x2_t result = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v10.i8, v32.f32[0]), vmul_n_f32(*(float32x2_t *)v11.i8, v33.f32[0])), vmul_n_f32(*(float32x2_t *)v13.i8, v35));
  *(float32x2_t *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = v31.i32[0];
  return result;
}

float32x4_t computeMeshBounds(int32x2_t *a1, _OWORD *a2, _DWORD *a3, float32x4_t *a4, float32x4_t *a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, double a12, int32x4_t a13)
{
  float32x4_t v38 = *(float32x4_t *)a1->i8;
  float32x2_t v17 = (float32x2_t)vdup_lane_s32(*a1, 1);
  float32x2_t v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1->i8, 2);
  float32x2_t v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1->i8, 3);
  _Q4 = vaddq_f32(v38, v38);
  *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a1, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v37 = vmul_lane_f32(v17, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v21 = vmul_laneq_f32(v18, _Q4, 2);
  float32x2_t v22 = vmul_n_f32(v17, _Q4.f32[0]);
  float32x2_t v23 = vmul_n_f32(v18, _Q4.f32[0]);
  float32x2_t v24 = vmul_n_f32(v19, _Q4.f32[0]);
  float32x2_t v25 = vmul_lane_f32(v18, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v26 = vmul_lane_f32(v19, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v27 = vmul_laneq_f32(v19, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v38.f32);
  double v32 = COERCE_DOUBLE(vadd_f32(v22, v27));
  LODWORD(v33) = vsub_f32(v23, v26).u32[0];
  *(float32x2_t *)a7.i8 = vsub_f32(v22, v27);
  int32x2_t v34 = (int32x2_t)vsub_f32(*(float32x2_t *)v38.f32, v21);
  int32x2_t v35 = (int32x2_t)vadd_f32(v25, v24);
  *(float32x2_t *)a13.i8 = vadd_f32(v23, v26);
  *(int8x8_t *)v36.i8 = vext_s8(*(int8x8_t *)a13.i8, (int8x8_t)vsub_f32(v25, v24), 4uLL);
  v36.i64[1] = vsub_f32(*(float32x2_t *)v38.f32, v37).u32[0];
  v37.i32[0] = v21.i32[1];
  *(float *)float v44 = (float)(1.0 - v37.f32[1]) - v21.f32[1];
  *(_DWORD *)&v44[4] = LODWORD(v32);
  HIDWORD(v33) = a7.i32[1];
  *(int32x2_t *)v38.f32 = vzip1_s32(v34, v35);
  *(void *)&v44[8] = v33;
  *(void *)&v44[16] = v38.i64[0];
  *(int8x16_t *)&v44[24] = v36;
  if ((a3[1] - 1065353216) | (*a3 - 1065353216) | (a3[2] - 1065353216)) {
    computeScaledMatrix((uint64_t)v44, (uint64_t)a3, (int8x16_t)v38, a7, v36, *(double *)&v34, v32, *(double *)&v37, *(double *)&v21, a13);
  }
  *(int32x2_t *)v39.f32 = a1[2];
  v39.i64[1] = a1[3].u32[0];
  float32x4_t v40 = *(float32x4_t *)v44;
  float32x4_t v41 = *(float32x4_t *)&v44[12];
  float32x4_t v42 = *(float32x4_t *)&v44[24];
  *a4 = vaddq_f32(v39, vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)v44, COERCE_FLOAT(*a2)), vmulq_lane_f32(*(float32x4_t *)&v44[12], *(float32x2_t *)a2, 1)), vmulq_laneq_f32(*(float32x4_t *)&v44[24], *(float32x4_t *)a2, 2)));
  float32x4_t result = vaddq_f32(vabsq_f32(vmulq_laneq_f32(v42, *(float32x4_t *)((char *)a2 + 12), 2)), vaddq_f32(vabsq_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)((char *)a2 + 12)))), vabsq_f32(vmulq_lane_f32(v41, *(float32x2_t *)((char *)a2 + 12), 1))));
  *a5 = result;
  return result;
}

float physx::Gu::computeBoundsWithCCDThreshold(float *a1, float *a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  a9.i64[0] = 0;
  a10.i32[0] = 1.0;
  physx::Gu::computeBounds(&v36, a3, a4, a5, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)a5, a6, a7, a8, v34);
  float v23 = v36.f32[1];
  float v22 = v36.f32[0];
  float v25 = v37;
  float v24 = v38;
  float v26 = v39;
  float v27 = v40;
  float v28 = (float)(v36.f32[1] + v39) * 0.5;
  float v29 = (float)(v37 + v40) * 0.5;
  *a1 = (float)(v36.f32[0] + v38) * 0.5;
  a1[1] = v28;
  a1[2] = v29;
  *a2 = (float)(v24 - v22) * 0.5;
  a2[1] = (float)(v26 - v23) * 0.5;
  a2[2] = (float)(v27 - v25) * 0.5;
  float result = 3.4028e38;
  switch(*(_DWORD *)a3)
  {
    case 0xFFFFFFFF:
    case 7:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBounds.cpp", 440, "Gu::GeometryUnion::computeBounds: Unknown shape type.", v19, v20, v21, v35);
      return 3.4028e38;
    case 0:
    case 2:
      float v31 = *(float *)(a3 + 4);
      goto LABEL_15;
    case 3:
      float v31 = *(float *)(a3 + 4);
      if (v31 >= *(float *)(a3 + 8)) {
        float v31 = *(float *)(a3 + 8);
      }
      if (v31 >= *(float *)(a3 + 12)) {
        float v31 = *(float *)(a3 + 12);
      }
      goto LABEL_15;
    case 4:
      float v32 = *(float *)(a3 + 12);
      float v33 = *(float *)(a3 + 4);
      if (v33 >= *(float *)(a3 + 8)) {
        float v33 = *(float *)(a3 + 8);
      }
      if (v32 >= v33) {
        float v32 = v33;
      }
      float v31 = *(float *)(*(void *)(a3 + 32) + 88) * v32;
LABEL_15:
      float result = v31 * 0.75;
      break;
    case 5:
    case 6:
      float result = 0.0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Gu::ShapeData::ShapeData(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, double a6, float32x4_t _Q3, double a8, float32x4_t a9)
{
  float v12 = fabsf(*(float *)(a3 + 12));
  if (v12 >= 1.0)
  {
    float32x2_t v34 = (float32x2_t)0x3F80000000000000;
    float32x2_t v33 = (float32x2_t)1065353216;
    float32x2_t v31 = 0;
    float v32 = 1.0;
    _Q3.i32[0] = 0;
    float v30 = 0.0;
  }
  else
  {
    float32x2_t v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
    float32x2_t v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
    float32x2_t v15 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
    a9 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    float32x2_t v16 = vmul_lane_f32(v13, *(float32x2_t *)a9.f32, 1);
    float32x2_t v17 = vmul_laneq_f32(v14, a9, 2);
    float32x2_t v18 = vmul_n_f32(v13, a9.f32[0]);
    float32x2_t v19 = vmul_n_f32(v14, a9.f32[0]);
    float32x2_t v20 = vmul_n_f32(v15, a9.f32[0]);
    float32x2_t v21 = vmul_lane_f32(v14, *(float32x2_t *)a9.f32, 1);
    float32x2_t v22 = vmul_lane_f32(v15, *(float32x2_t *)a9.f32, 1);
    float32x2_t v23 = vmul_laneq_f32(v15, a9, 2);
    __asm { FMOV            V3.2S, #1.0 }
    *(float32x2_t *)a5.f32 = vsub_f32(*(float32x2_t *)_Q3.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)a9.f32), 0));
    *(float32x2_t *)a9.f32 = vadd_f32(v18, v23);
    _Q3.i32[0] = vsub_f32(v19, v22).u32[0];
    int8x8_t v28 = (int8x8_t)vsub_f32(v18, v23);
    int8x8_t v29 = (int8x8_t)vsub_f32(*(float32x2_t *)a5.f32, v17);
    LODWORD(v3physx::Sq::AABBTree::release(this, 0) = vadd_f32(v21, v20).u32[0];
    float32x2_t v31 = (float32x2_t)vext_s8((int8x8_t)vadd_f32(v19, v22), (int8x8_t)vsub_f32(v21, v20), 4uLL);
    a5.i64[1] = vsub_f32(*(float32x2_t *)a5.f32, v16).u32[0];
    v17.f32[0] = (float)(1.0 - v16.f32[1]) - v17.f32[1];
    *(_DWORD *)(a1 + 48) = 0;
    float v32 = a5.f32[2];
    float32x2_t v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.f32, 0);
    v33.i32[0] = v17.i32[0];
    float32x2_t v34 = (float32x2_t)vext_s8(v28, v29, 4uLL);
  }
  *(float32x2_t *)(a1 + 12) = v33;
  *(_DWORD *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = _Q3.i32[0];
  *(float32x2_t *)(a1 + 24) = v34;
  *(float *)(a1 + 32) = v30;
  *(float32x2_t *)(a1 + 36) = v31;
  *(float *)(a1 + 44) = v32;
  a5.i64[0] = *(void *)(a3 + 16);
  *(void *)(a1 + 48) = a5.i64[0];
  float v35 = *(float *)(a3 + 24);
  *(float *)(a1 + 56) = v35;
  switch(*(_DWORD *)a2)
  {
    case 0:
      a5.f32[2] = v35;
      *(float *)&a4 = *(float *)(a2 + 4) + *(float *)&a4;
      float32x4_t v36 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x3F8147AEu));
      float32x4_t v37 = vsubq_f32(a5, v36);
      int8x16_t v38 = (int8x16_t)vaddq_f32(a5, v36);
      v37.i32[3] = v38.i32[0];
      *(float32x4_t *)(a1 + 72) = v37;
      *(void *)(a1 + 88) = vextq_s8(v38, v38, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v38.i32[3];
      v38.i32[0] = *(_DWORD *)(a2 + 4);
      int v39 = *(_DWORD *)(a3 + 24);
      *(void *)(a1 + 10physx::Sq::AABBTree::release(this, 0) = *(void *)(a3 + 16);
      *(_DWORD *)(a1 + 108) = v39;
      *(_DWORD *)(a1 + 112) = v38.i32[0];
      break;
    case 2:
      float v40 = fabsf(_Q3.f32[0]);
      v33.i32[0] = *(_DWORD *)(a1 + 12);
      float v41 = *(float *)(a2 + 8);
      *(float32x2_t *)_Q3.f32 = vmul_n_f32(vabs_f32(v33), v41);
      _Q3.f32[2] = v40 * v41;
      a5.f32[2] = v35;
      *(float *)&a4 = *(float *)(a2 + 4) + *(float *)&a4;
      float32x4_t v42 = vmulq_f32(vaddq_f32(_Q3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), (float32x4_t)vdupq_n_s32(0x3F8147AEu));
      float32x4_t v43 = vsubq_f32(a5, v42);
      int8x16_t v44 = (int8x16_t)vaddq_f32(a5, v42);
      v43.i32[3] = v44.i32[0];
      *(float32x4_t *)(a1 + 72) = v43;
      *(void *)(a1 + 88) = vextq_s8(v44, v44, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v44.i32[3];
      v44.i32[0] = *(_DWORD *)a3;
      float v45 = *(float *)(a3 + 4);
      v43.f32[0] = *(float *)v44.i32 + *(float *)v44.i32;
      float v47 = *(float *)(a3 + 8);
      float v46 = *(float *)(a3 + 12);
      float v48 = v46 + v46;
      *(float *)v44.i32 = (float)((float)(v46 * (float)(v46 + v46)) + -1.0)
                        + (float)(*(float *)v44.i32 * (float)(*(float *)v44.i32 + *(float *)v44.i32));
      float v49 = (float)(v43.f32[0] * v45) + (float)(v47 * (float)(v46 + v46));
      float v50 = (float)(v43.f32[0] * v47) - (float)(v45 * v48);
      v43.i32[0] = *(_DWORD *)(a2 + 8);
      *(float *)v44.i32 = *(float *)v44.i32 * v43.f32[0];
      float v51 = v43.f32[0] * v49;
      float v52 = v50 * v43.f32[0];
      float v53 = *(float *)(a3 + 20) + v51;
      float v54 = v52 + *(float *)(a3 + 24);
      *(float *)(a1 + 10physx::Sq::AABBTree::release(this, 0) = *(float *)(a3 + 16) + *(float *)v44.i32;
      *(float *)(a1 + 104) = v53;
      *(float *)(a1 + 108) = v54;
      float v55 = *(float *)(a3 + 20) - v51;
      float v56 = *(float *)(a3 + 24);
      *(float *)(a1 + 112) = *(float *)(a3 + 16) - *(float *)v44.i32;
      *(float *)(a1 + 116) = v55;
      *(float *)(a1 + 12physx::Sq::AABBTree::release(this, 0) = v56 - v52;
      v44.i32[0] = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a1 + 124) = v44.i32[0];
      *(_DWORD *)(a1 + 6physx::Sq::AABBTree::release(this, 0) = v43.i32[0];
      float v57 = v43.f32[0] + *(float *)v44.i32;
      float v58 = *(float *)v44.i32 * 1.01;
      *(float *)a1 = v57 * 1.01;
      *(float *)(a1 + 4) = v58;
      goto LABEL_8;
    case 3:
      float32x4_t v59 = (float32x4_t)vdupq_n_s32(0x3F8147AEu);
      float32x4_t v60 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 12), *(float *)(a2 + 4))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 24), *(float *)(a2 + 8)))), vabsq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 36), *(float *)(a2 + 12))))), v59);
      float32x4_t v61 = *(float32x4_t *)(a1 + 48);
      float32x4_t v62 = vsubq_f32(v61, v60);
      int8x16_t v63 = (int8x16_t)vaddq_f32(v61, v60);
      v62.i32[3] = v63.i32[0];
      *(float32x4_t *)(a1 + 72) = v62;
      *(void *)(a1 + 88) = vextq_s8(v63, v63, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v63.i32[3];
      *(void *)(a1 + 6physx::Sq::AABBTree::release(this, 0) = *(void *)(a2 + 4);
      *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 12);
      float v58 = *(float *)(a2 + 12) * 1.01;
      *(float32x2_t *)a1 = vmul_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)v59.f32);
LABEL_8:
      *(float *)(a1 + 8) = v58;
      break;
    case 4:
      _X2 = *(float **)(a2 + 32);
      __asm { PRFM            #0, [X2,#0x20] }
      float v67 = *(float *)(a2 + 4);
      float v66 = *(float *)(a2 + 8);
      float v68 = *(float *)(a2 + 12);
      if (v67 == 1.0 && v66 == 1.0 && v68 == 1.0)
      {
        float v69 = _X2[8];
        float v70 = _X2[9];
        float v71 = _X2[10];
        float v72 = _X2[11];
        *(float32x2_t *)a5.f32 = vadd_f32(*(float32x2_t *)a5.f32, vadd_f32(vadd_f32(vmul_n_f32(v33, v69), vmul_n_f32(v34, v70)), vmul_n_f32(v31, v71)));
        a5.f32[2] = v35 + (float)((float)((float)(_Q3.f32[0] * v69) + (float)(v30 * v70)) + (float)(v32 * v71));
        *(float32x2_t *)a9.f32 = vmul_n_f32(v33, v72);
        float v73 = _Q3.f32[0] * v72;
        float v74 = _X2[12];
        float v75 = _X2[13];
        float32x2_t v76 = vmul_n_f32(v34, v74);
        float v77 = v30 * v74;
        float32x2_t v78 = vmul_n_f32(v31, v75);
        float v79 = v32 * v75;
      }
      else
      {
        float v80 = *(float *)(a2 + 16);
        float v81 = *(float *)(a2 + 20);
        float v82 = *(float *)(a2 + 24);
        float v83 = *(float *)(a2 + 28);
        float v84 = v81 + v81;
        float v85 = v82 + v82;
        float v86 = v81 * (float)(v81 + v81);
        float v87 = v82 * (float)(v82 + v82);
        float v88 = (float)(v80 + v80) * v81;
        float v89 = (float)(v80 + v80) * v82;
        float v90 = (float)(v80 + v80) * v83;
        float v91 = v84 * v82;
        float v92 = v84 * v83;
        float v93 = v85 * v83;
        *(float *)&unsigned int v94 = (float)(1.0 - v86) - v87;
        float v95 = v88 + v93;
        float v96 = v89 - v92;
        *(float *)v97.i32 = v88 - v93;
        float v98 = 1.0 - (float)(v80 * (float)(v80 + v80));
        v99.f32[0] = v98 - v87;
        float v100 = v91 + v90;
        float v101 = v89 + v92;
        float v102 = v91 - v90;
        float v103 = v98 - v86;
        float v104 = v66 * (float)(v91 - v90);
        float v105 = (float)(v96 * (float)(v68 * (float)(v98 - v86)))
             + (float)((float)(*(float *)&v94 * (float)(v67 * v101)) + (float)(v95 * v104));
        float v106 = (float)(v100 * (float)(v68 * (float)(v98 - v86)))
             + (float)((float)(*(float *)v97.i32 * (float)(v67 * v101)) + (float)(v99.f32[0] * v104));
        float v107 = (float)(v103 * (float)(v68 * v103)) + (float)((float)(v101 * (float)(v67 * v101)) + (float)(v102 * v104));
        float v108 = v32 * v106;
        float32x2_t v109 = vmul_n_f32((float32x2_t)__PAIR64__(v94, v97.u32[0]), v67);
        v97.i32[1] = v99.i32[0];
        v99.f32[1] = v95;
        float32x2_t v110 = vmul_n_f32(v99, v66);
        float32x2_t v111 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v96), LODWORD(v100)), v68);
        float32x2_t v112 = vadd_f32(vmul_lane_f32(v109, (float32x2_t)__PAIR64__(v94, v97.u32[0]), 1), vmul_n_f32(v110, v95));
        float32x2_t v113 = (float32x2_t)__PAIR64__(v109.u32[1], v110.u32[0]);
        float32x2_t v114 = vmul_n_f32(v109, v101);
        v109.i32[1] = v110.i32[1];
        float32x2_t v115 = vadd_f32(vmul_n_f32(v111, v96), v112);
        float32x2_t v116 = vadd_f32(vmul_n_f32(v111, v100), vadd_f32(vmul_f32((float32x2_t)vrev64_s32(v97), v113), vmul_f32((float32x2_t)v97, v109)));
        float32x2_t v117 = vadd_f32(vmul_n_f32(v111, v103), vadd_f32(v114, vmul_n_f32(v110, v102)));
        float32x2_t v118 = (float32x2_t)__PAIR64__(v33.u32[1], v34.u32[0]);
        v33.i32[1] = v34.i32[1];
        float32x2_t v119 = vadd_f32(vmul_n_f32(v31, v105), vadd_f32(vmul_f32(v118, v115), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v115))));
        v110.f32[0] = (float)(v32 * v105) + (float)(vmuls_lane_f32(_Q3.f32[0], v115, 1) + (float)(v30 * v115.f32[0]));
        float32x2_t v120 = vadd_f32(vmul_n_f32(v31, v106), vadd_f32(vmul_f32(v118, v116), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v116))));
        float v121 = v108 + (float)(vmuls_lane_f32(_Q3.f32[0], v116, 1) + (float)(v30 * v116.f32[0]));
        float32x2_t v122 = vadd_f32(vmul_n_f32(v31, v107), vadd_f32(vmul_f32(v118, v117), vmul_f32(v33, (float32x2_t)vrev64_s32((int32x2_t)v117))));
        float v123 = (float)(v32 * v107) + (float)(vmuls_lane_f32(_Q3.f32[0], v117, 1) + (float)(v30 * v117.f32[0]));
        float v124 = _X2[8];
        float v125 = _X2[9];
        float v126 = _X2[10];
        v117.f32[0] = _X2[11];
        *(float32x2_t *)a5.f32 = vadd_f32(*(float32x2_t *)a5.f32, vadd_f32(vmul_n_f32(v122, v126), vadd_f32(vmul_n_f32(v119, v124), vmul_n_f32(v120, v125))));
        a5.f32[2] = v35 + (float)((float)(v126 * v123) + (float)((float)(v124 * v110.f32[0]) + (float)(v125 * v121)));
        *(float32x2_t *)a9.f32 = vmul_n_f32(v119, v117.f32[0]);
        float v73 = v117.f32[0] * v110.f32[0];
        float v127 = _X2[12];
        float v128 = _X2[13];
        float32x2_t v76 = vmul_n_f32(v120, v127);
        float v77 = v127 * v121;
        float32x2_t v78 = vmul_n_f32(v122, v128);
        float v79 = v128 * v123;
      }
      *(float32x2_t *)a9.f32 = vadd_f32(vadd_f32(vabs_f32(*(float32x2_t *)a9.f32), vabs_f32(v76)), vabs_f32(v78));
      a9.f32[2] = (float)(fabsf(v73) + fabsf(v77)) + fabsf(v79);
      float32x4_t v135 = (float32x4_t)vdupq_n_s32(0x3F8147AEu);
      float32x4_t v129 = vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), a9), v135);
      float32x4_t v130 = vsubq_f32(a5, v129);
      int8x16_t v131 = (int8x16_t)vaddq_f32(a5, v129);
      v130.i32[3] = v131.i32[0];
      *(float32x4_t *)(a1 + 72) = v130;
      *(void *)(a1 + 88) = vextq_s8(v131, v131, 4uLL).u64[0];
      *(_DWORD *)(a1 + 96) = v131.i32[3];
      physx::Gu::computeOBBAroundConvex((float *)v136, (float *)a2, _X2, (float *)a3);
      long long v132 = v136[1];
      *(_OWORD *)(a1 + 12) = v136[0];
      *(_OWORD *)(a1 + 28) = v132;
      float v133 = v138 * 1.01;
      *(float32x2_t *)a1 = vmul_f32(v137, *(float32x2_t *)v135.f32);
      *(float *)(a1 + 8) = v133;
      *(_OWORD *)(a1 + 44) = v136[2];
      break;
    default:
      break;
  }
  *(_WORD *)(a1 + 96) = v12 < 1.0;
  *(_WORD *)(a1 + 98) = *(_DWORD *)a2;
  return a1;
}

float physx::Gu::Box::create(physx::Gu::Box *this, const Capsule *a2)
{
  float v2 = (float)(*((float *)a2 + 2) + *((float *)a2 + 5)) * 0.5;
  *(float32x2_t *)((char *)this + 36) = vmul_f32(vadd_f32(*(float32x2_t *)a2, *(float32x2_t *)((char *)a2 + 12)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 11) = v2;
  float v3 = *((float *)a2 + 3) - *(float *)a2;
  float v4 = *((float *)a2 + 4) - *((float *)a2 + 1);
  float v5 = *((float *)a2 + 5) - *((float *)a2 + 2);
  float v6 = sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
  if (v6 == 0.0)
  {
    *(_OWORD *)this = xmmword_23435FD50;
    *((_OWORD *)this + 1) = xmmword_23435FD50;
    *((_DWORD *)this + 8) = 1065353216;
  }
  else
  {
    float v7 = v3 * (float)(1.0 / v6);
    float v8 = v4 * (float)(1.0 / v6);
    float v9 = v5 * (float)(1.0 / v6);
    *(float *)this = v7;
    *((float *)this + 1) = v8;
    *((float *)this + 2) = v9;
    if (fabsf(v8) <= 0.9999)
    {
      float v13 = -v7;
      *((float *)this + 3) = v9;
      *((_DWORD *)this + 4) = 0;
      *((float *)this + 5) = -v7;
      float v14 = sqrtf((float)((float)(v9 * v9) + 0.0) + (float)(v7 * v7));
      v15.f32[0] = v9;
      float v16 = v13;
      if (v14 > 0.0)
      {
        float32x2_t v15 = vmul_n_f32((float32x2_t)LODWORD(v9), 1.0 / v14);
        *(float32x2_t *)((char *)this + 12) = v15;
        float v16 = (float)(1.0 / v14) * v13;
        *((float *)this + 5) = v16;
      }
      *((float *)this + 6) = v8 * v16;
      *((float *)this + 7) = (float)(v16 * v13) + (float)(v9 * v15.f32[0]);
      *((float *)this + 8) = -(float)(v8 * v15.f32[0]);
    }
    else
    {
      float v10 = -v8;
      *(_OWORD *)((char *)this + 12) = xmmword_23435FD50;
      *((float *)this + 7) = v9;
      *((float *)this + 8) = -v8;
      float v11 = sqrtf((float)(v9 * v9) + (float)(v8 * v8));
      if (v11 > 0.0)
      {
        float v12 = 1.0 / v11;
        *((float *)this + 6) = v12 * 0.0;
        *((float *)this + 7) = v9 * v12;
        *((float *)this + 8) = v12 * v10;
      }
    }
  }
  float v17 = *((float *)a2 + 6);
  float result = v17 + (float)(v6 * 0.5);
  *((float *)this + 12) = result;
  *((float *)this + 13) = v17;
  *((float *)this + 14) = v17;
  return result;
}

float physx::Gu::computeOBBPoints(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = a3[1];
  float v7 = *a3 * *a4;
  float v8 = *a3 * a4[1];
  float v9 = *a3 * a4[2];
  float v10 = v6 * *a5;
  float v11 = v6 * a5[1];
  float v12 = v6 * a5[2];
  float v13 = a3[2];
  float v14 = v13 * *a6;
  float v15 = v13 * a6[1];
  float v16 = v13 * a6[2];
  float v17 = *a2 - v7;
  float v18 = a2[1] - v8;
  float v19 = a2[2] - v9;
  a1[21] = v17;
  a1[22] = v18;
  a1[12] = v17;
  a1[13] = v18;
  a1[9] = v17;
  a1[10] = v18;
  *a1 = v17;
  a1[1] = v18;
  float v20 = *a2;
  float v21 = a2[1];
  float v22 = v11 + v15;
  float v23 = (float)(v11 + v15) + v18;
  a1[23] = v19;
  float v24 = v11 - v15;
  a1[14] = v19;
  a1[11] = v19;
  float v25 = v7 + v20;
  a1[2] = v19;
  float v26 = v8 + v21;
  float v27 = v9 + a2[2];
  *a1 = v17 - (float)(v10 + v14);
  a1[1] = v18 - v22;
  a1[2] = v19 - (float)(v12 + v16);
  a1[3] = v25 - (float)(v10 + v14);
  a1[4] = v26 - v22;
  a1[5] = v27 - (float)(v12 + v16);
  a1[18] = (float)(v10 + v14) + v25;
  a1[19] = v22 + v26;
  a1[20] = (float)(v12 + v16) + v27;
  a1[21] = (float)(v10 + v14) + v17;
  a1[22] = v23;
  a1[23] = (float)(v12 + v16) + v19;
  float v28 = v10 - v14;
  float v29 = v12 - v16;
  a1[6] = v28 + v25;
  a1[7] = v24 + v26;
  a1[8] = v29 + v27;
  a1[9] = v28 + v17;
  a1[10] = v24 + v18;
  a1[11] = v29 + v19;
  a1[12] = v17 - v28;
  a1[13] = v18 - v24;
  a1[14] = v19 - v29;
  a1[15] = v25 - v28;
  float result = v26 - v24;
  a1[16] = v26 - v24;
  a1[17] = v27 - v29;
  return result;
}

uint64_t physx::Gu::computeBoxAroundCapsule(uint64_t this, const Capsule *a2, physx::Gu::Box *a3)
{
  float v3 = (float)(*(float *)(this + 8) + *(float *)(this + 20)) * 0.5;
  *(float32x2_t *)((char *)a2 + 36) = vmul_f32(vadd_f32(*(float32x2_t *)this, *(float32x2_t *)(this + 12)), (float32x2_t)0x3F0000003F000000);
  *((float *)a2 + 11) = v3;
  float v4 = *(float *)(this + 4) - *(float *)(this + 16);
  float v5 = sqrtf((float)((float)(v4 * v4)+ (float)((float)(*(float *)this - *(float *)(this + 12))* (float)(*(float *)this - *(float *)(this + 12))))+ (float)((float)(*(float *)(this + 8) - *(float *)(this + 20))* (float)(*(float *)(this + 8) - *(float *)(this + 20))));
  float v6 = *(float *)(this + 24);
  *((float *)a2 + 12) = v6 + (float)(v5 * 0.5);
  *((float *)a2 + 13) = v6;
  *((float *)a2 + 14) = v6;
  float v7 = 0.0;
  if (v5 == 0.0)
  {
    float32x2_t v8 = (float32x2_t)0x3F80000000000000;
    float v9 = 1.0;
    float v10 = 0.0;
    float v11 = 0.0;
    float v12 = 0.0;
    float v13 = 0.0;
    float v14 = 1.0;
  }
  else
  {
    float v9 = *(float *)(this + 12) - *(float *)this;
    float v10 = *(float *)(this + 16) - *(float *)(this + 4);
    float v11 = *(float *)(this + 20) - *(float *)(this + 8);
    float v15 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
    if (v15 > 0.0)
    {
      float v16 = 1.0 / v15;
      float v9 = v9 * v16;
      float v10 = v10 * v16;
      float v11 = v11 * v16;
    }
    if (fabsf(v10) <= 0.9999)
    {
      float v19 = -v9;
      float v20 = sqrtf((float)((float)(v11 * v11) + 0.0) + (float)(v9 * v9));
      float32x2_t v8 = (float32x2_t)LODWORD(v11);
      if (v20 <= 0.0)
      {
        float v7 = -v9;
      }
      else
      {
        float v21 = 1.0 / v20;
        float32x2_t v8 = vmul_n_f32((float32x2_t)LODWORD(v11), v21);
        float v7 = v21 * v19;
      }
      float v12 = v10 * v7;
      float v13 = vmlas_n_f32(v7 * v19, v11, v8.f32[0]);
      float v14 = (float)-v10 * v8.f32[0];
    }
    else
    {
      float v14 = -v10;
      float v17 = sqrtf((float)(v11 * v11) + (float)(v10 * v10));
      float32x2_t v8 = (float32x2_t)1065353216;
      if (v17 <= 0.0)
      {
        float v12 = 0.0;
        float v13 = v11;
      }
      else
      {
        float v18 = 1.0 / v17;
        float v7 = 0.0;
        float v12 = (float)(1.0 / v17) * 0.0;
        float v13 = v11 * v18;
        float v14 = v18 * v14;
      }
    }
  }
  *(float *)a2 = v9;
  *((float *)a2 + 1) = v10;
  *((float *)a2 + 2) = v11;
  *(float32x2_t *)((char *)a2 + 12) = v8;
  *((float *)a2 + 5) = v7;
  *((float *)a2 + 6) = v12;
  *((float *)a2 + 7) = v13;
  *((float *)a2 + 8) = v14;
  return this;
}

uint64_t sweepCapsule_BoxGeom_Precise(uint64_t a1, uint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  float v11 = *(float *)a3.i32;
  if (a6->f32[0] == a6[1].f32[1] && a6->f32[1] == a6[2].f32[0] && a6[1].f32[0] == a6[2].f32[1])
  {
    float32x2_t v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
    float32x2_t v17 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
    float32x2_t v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
    _Q5 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
    float32x2_t v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q5.f32), 0);
    float32x2_t v21 = vmul_lane_f32(v16, *(float32x2_t *)_Q5.f32, 1);
    float32x2_t v22 = vmul_laneq_f32(v17, _Q5, 2);
    float32x2_t v23 = vmul_n_f32(v16, _Q5.f32[0]);
    float32x2_t v24 = vmul_n_f32(v17, _Q5.f32[0]);
    float32x2_t v25 = vmul_n_f32(v18, _Q5.f32[0]);
    float32x2_t v26 = vmul_lane_f32(v17, *(float32x2_t *)_Q5.f32, 1);
    float32x2_t v27 = vmul_lane_f32(v18, *(float32x2_t *)_Q5.f32, 1);
    float32x2_t v28 = vmul_laneq_f32(v18, _Q5, 2);
    __asm { FMOV            V5.2S, #1.0 }
    float32x2_t v33 = vsub_f32(*(float32x2_t *)_Q5.f32, v20);
    LODWORD(v34) = vsub_f32(v24, v27).u32[0];
    LODWORD(v35) = vadd_f32(v26, v25).u32[0];
    v81.f32[0] = (float)(1.0 - v21.f32[1]) - v22.f32[1];
    v81.i32[1] = vadd_f32(v23, v28).u32[0];
    HIDWORD(v34) = vsub_f32(v23, v28).i32[1];
    *(void *)float v82 = v34;
    *(_DWORD *)&v82[8] = vsub_f32(v33, v22).u32[0];
    HIDWORD(v35) = vadd_f32(v24, v27).i32[1];
    *(void *)&long long v83 = v35;
    *((int32x2_t *)&v83 + 1) = vzip1_s32((int32x2_t)vsub_f32(v26, v25), (int32x2_t)vsub_f32(v33, v21));
    *(_DWORD *)float v84 = *(_DWORD *)(a2 + 16);
    *(void *)&long long v36 = *(void *)(a2 + 20);
    *((void *)&v36 + 1) = *(void *)(a1 + 4);
    *(_OWORD *)&v84[4] = v36;
    int v85 = *(_DWORD *)(a1 + 12);
    LODWORD(v36) = a6[3].i32[0];
    float32x4_t v37 = (float *)(a8 + 48);
    __int16 v80 = *a9;
    uint64_t result = physx::Gu::sweepBoxSphere((Sphere *)&v81, a6, a7, (float *)(a8 + 48), (float *)(a8 + 36), &v80, *(float *)&v36, v11);
    if (!result) {
      return result;
    }
    float v39 = -*(float *)(a8 + 44);
    *(float32x2_t *)(a8 + 36) = vneg_f32(*(float32x2_t *)(a8 + 36));
    *(float *)(a8 + 44) = v39;
    *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    if ((*(unsigned char *)a9 & 1) == 0) {
      return 1;
    }
    float v40 = *v37;
    if (*v37 == 0.0) {
      return 1;
    }
    float v41 = (float)(v40 * a7[1].f32[0]) + a6[1].f32[0];
    float32x2_t v74 = vadd_f32(vmul_n_f32(*a7, v40), *a6);
    *(float *)float v75 = v41;
    physx::Gu::distancePointBoxSquared((float *)&v74, (float *)v84, (uint64_t)&v84[12], (float *)&v81, (uint64_t)&v78);
    float v42 = (float)((float)((float)(v78.f32[0] * *(float *)v82) + (float)(v78.f32[1] * *(float *)&v83))
                + (float)(v79 * *((float *)&v83 + 3)))
        + *(float *)&v84[8];
    *(float32x2_t *)(a8 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v81, v78.f32[0]), vmul_n_f32(*(float32x2_t *)&v82[4], v78.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v83 + 4), v79)), *(float32x2_t *)v84);
    *(float *)(a8 + 32) = v42;
    __int16 v43 = 3;
    goto LABEL_12;
  }
  int8x16_t v44 = (float *)(a8 + 48);
  __int16 v77 = *a9;
  uint64_t result = physx::Gu::sweepCapsuleBox((uint64_t)a6, a2, a1 + 4, a7, a8 + 24, (float *)(a8 + 48), a8 + 36, &v77, a3);
  if (!result) {
    return result;
  }
  *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 2;
  if (*a9)
  {
    float v45 = *v44;
    if (*v44 != 0.0)
    {
      __int32 v76 = a6[3].i32[0];
      *(float *)&unsigned int v46 = v45 * a7[1].f32[0];
      float32x2_t v47 = vmul_n_f32(*a7, v45);
      float32x2_t v48 = (float32x2_t)vrev64_s32((int32x2_t)v47);
      float32x2_t v49 = vadd_f32(a6[1], (float32x2_t)__PAIR64__(v48.u32[1], v46));
      float32x2_t v74 = vadd_f32(*a6, v47);
      v75[0] = v49;
      v48.i32[1] = v46;
      v75[1] = vadd_f32(a6[2], v48);
      float32x2_t v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
      float32x2_t v51 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
      float32x2_t v52 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
      _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
      float32x2_t v54 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
      float32x2_t v55 = vmul_lane_f32(v50, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v56 = vmul_laneq_f32(v51, _Q4, 2);
      float32x2_t v57 = vmul_n_f32(v50, _Q4.f32[0]);
      float32x2_t v58 = vmul_n_f32(v51, _Q4.f32[0]);
      float32x2_t v59 = vmul_n_f32(v52, _Q4.f32[0]);
      float32x2_t v60 = vmul_lane_f32(v51, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v61 = vmul_lane_f32(v52, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v62 = vmul_laneq_f32(v52, _Q4, 2);
      __asm { FMOV            V4.2S, #1.0 }
      float32x2_t v63 = vsub_f32(*(float32x2_t *)_Q4.f32, v54);
      LODWORD(v64) = vsub_f32(v58, v61).u32[0];
      LODWORD(v65) = vadd_f32(v60, v59).u32[0];
      v81.f32[0] = (float)(1.0 - v55.f32[1]) - v56.f32[1];
      v81.i32[1] = vadd_f32(v57, v62).u32[0];
      HIDWORD(v64) = vsub_f32(v57, v62).i32[1];
      *(void *)float v82 = v64;
      *(_DWORD *)&v82[8] = vsub_f32(v63, v56).u32[0];
      HIDWORD(v65) = vadd_f32(v58, v61).i32[1];
      *(void *)&long long v83 = v65;
      *((int32x2_t *)&v83 + 1) = vzip1_s32((int32x2_t)vsub_f32(v60, v59), (int32x2_t)vsub_f32(v63, v55));
      *(_DWORD *)float v84 = *(_DWORD *)(a2 + 16);
      *(void *)&long long v66 = *(void *)(a2 + 20);
      *((void *)&v66 + 1) = *(void *)(a1 + 4);
      *(_OWORD *)&v84[4] = v66;
      int v85 = *(_DWORD *)(a1 + 12);
      physx::Gu::distanceSegmentBoxSquared((float *)&v74, (float *)v75 + 1, (float *)v84, (float32x2_t *)&v84[12], (float *)&v81, 0, &v78);
      float v68 = *(float *)(a2 + 8);
      float v67 = *(float *)(a2 + 12);
      float v69 = (float)(v67 * v67) + -0.5;
      float v70 = *(float *)(a2 + 4);
      float v71 = (float)((float)((float)(v78.f32[1] + v78.f32[1]) * v70)
                  + (float)(*(float *)a2 * (float)(v78.f32[0] + v78.f32[0])))
          + (float)(v68 * (float)(v79 + v79));
      float v72 = *(float *)(a2 + 20)
          + (float)((float)((float)(v67
                                  * (float)((float)(v68 * (float)(v78.f32[0] + v78.f32[0]))
                                          - (float)(*(float *)a2 * (float)(v79 + v79))))
                          + (float)((float)(v78.f32[1] + v78.f32[1]) * v69))
                  + (float)(v70 * v71));
      float v73 = *(float *)(a2 + 24)
          + (float)((float)((float)(v67
                                  * (float)((float)(*(float *)a2 * (float)(v78.f32[1] + v78.f32[1]))
                                          - (float)(v70 * (float)(v78.f32[0] + v78.f32[0]))))
                          + (float)((float)(v79 + v79) * v69))
                  + (float)(v68 * v71));
      *(float *)(a8 + 24) = *(float *)(a2 + 16)
                          + (float)((float)((float)(v67
                                                  * (float)((float)(v70 * (float)(v79 + v79))
                                                          - (float)(v68 * (float)(v78.f32[1] + v78.f32[1]))))
                                          + (float)((float)(v78.f32[0] + v78.f32[0]) * v69))
                                  + (float)(*(float *)a2 * v71));
      *(float *)(a8 + 28) = v72;
      *(float *)(a8 + 32) = v73;
      __int16 v43 = *(_WORD *)(a8 + 20) | 1;
LABEL_12:
      *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = v43;
    }
  }
  return 1;
}

uint64_t sweepBox_SphereGeom_Precise(uint64_t a1, float32x2_t *a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x2_t *a8, float32x2_t *a9, __int16 *a10)
{
  float v15 = *(float *)(a7 + 44) - a2[3].f32[0];
  long long v16 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)float32x2_t v31 = *(_OWORD *)a7;
  *(_OWORD *)&v31[16] = v16;
  float v32 = *(float *)(a7 + 32);
  float32x2_t v33 = vsub_f32(*(float32x2_t *)(a7 + 36), a2[2]);
  float v34 = v15;
  uint64_t v35 = *(void *)(a7 + 48);
  int v36 = *(_DWORD *)(a7 + 56);
  float v17 = *(float *)(a1 + 4) + a4;
  float32x2_t v29 = 0;
  float v30 = 0.0;
  float v18 = -a8[1].f32[0];
  float32x2_t v27 = vneg_f32(*a8);
  float v28 = v18;
  float v19 = (float *)&a9[6];
  __int16 v26 = *a10;
  uint64_t v20 = physx::Gu::sweepBoxSphere((Sphere *)v31, &v29, &v27, (float *)&a9[6], (float *)&a9[4] + 1, &v26, v17, a3);
  if (v20)
  {
    a9[2].i16[2] = 2;
    if (*a10)
    {
      float v21 = *v19;
      if (*v19 != 0.0)
      {
        float v22 = v21 * a8[1].f32[0];
        float32x2_t v23 = vmul_n_f32(*a8, v21);
        float32x2_t v29 = vneg_f32(v23);
        float v30 = -v22;
        physx::Gu::distancePointBoxSquared((float *)&v29, (float *)&v33, (uint64_t)&v35, (float *)v31, (uint64_t)&v27);
        float32_t v24 = v22
            + (float)((float)((float)((float)(v27.f32[0] * *(float *)&v31[8]) + (float)(v27.f32[1] * *(float *)&v31[20]))
                            + (float)(v28 * v32))
                    + *(float *)(a7 + 44));
        a9[3] = vadd_f32(v23, vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v31, v27.f32[0]), vmul_n_f32(*(float32x2_t *)&v31[12], v27.f32[1])), vmul_n_f32(*(float32x2_t *)&v31[24], v28)), *(float32x2_t *)(a7 + 36)));
        a9[4].f32[0] = v24;
        a9[2].i16[2] = 3;
      }
    }
  }
  return v20;
}

uint64_t sweepBox_CapsuleGeom_Precise(uint64_t a1, float32x2_t *a2, int32x4_t a3, uint64_t a4, long long *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  float v13 = *(float *)(a6 + 44) - a2[3].f32[0];
  long long v14 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)float v42 = *(_OWORD *)a6;
  *(_OWORD *)&v42[16] = v14;
  float v43 = *(float *)(a6 + 32);
  float32x2_t v44 = vsub_f32(*(float32x2_t *)(a6 + 36), a2[2]);
  float v45 = v13;
  float32x2_t v46 = *(float32x2_t *)(a6 + 48);
  int v47 = *(_DWORD *)(a6 + 56);
  LODWORD(v14) = a2->i32[0];
  float v15 = a2->f32[1];
  float v16 = *(float *)&v14 + *(float *)&v14;
  float v18 = a2[1].f32[0];
  float v17 = a2[1].f32[1];
  float v19 = v17 + v17;
  *(float *)&long long v14 = (float)((float)(v17 * (float)(v17 + v17)) + -1.0)
                 + (float)(*(float *)&v14 * (float)(*(float *)&v14 + *(float *)&v14));
  float v20 = (float)(v16 * v15) + (float)(v18 * (float)(v17 + v17));
  float v21 = (float)(v16 * v18) - (float)(v15 * v19);
  float v23 = *(float *)(a1 + 4);
  float v22 = *(float *)(a1 + 8);
  v40[0] = *(float *)&v14 * v22;
  v40[1] = v22 * v20;
  v40[2] = v21 * v22;
  v41[0] = -(float)(*(float *)&v14 * v22);
  v41[1] = -(float)(v22 * v20);
  void v41[2] = -(float)(v21 * v22);
  v41[3] = v23;
  long long v37 = *a5;
  float32x2_t v38 = v44;
  float v39 = v13;
  float v24 = -a7[1].f32[0];
  float32x2_t v33 = vneg_f32(*a7);
  float v34 = v24;
  float32x2_t v25 = (float *)(a8 + 48);
  __int16 v32 = *a9;
  uint64_t v26 = physx::Gu::sweepCapsuleBox((uint64_t)v40, (uint64_t)&v37, (uint64_t)&v46, &v33, a8 + 24, (float *)(a8 + 48), (uint64_t)&v35, &v32, a3);
  if (v26)
  {
    float v27 = -v36;
    *(float32x2_t *)(a8 + 36) = vneg_f32(v35);
    *(float *)(a8 + 44) = v27;
    *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    if (*(unsigned char *)a9)
    {
      float v28 = *v25;
      if (*v25 != 0.0)
      {
        float v29 = v28 * a7[1].f32[0];
        float32x2_t v44 = vadd_f32(vmul_n_f32(*a7, v28), v44);
        float v45 = v29 + v45;
        physx::Gu::distanceSegmentBoxSquared(v40, v41, (float *)&v44, &v46, (float *)v42, 0, &v33);
        float v30 = (float)((float)((float)((float)(v33.f32[0] * *(float *)&v42[8]) + (float)(v33.f32[1] * *(float *)&v42[20]))
                            + (float)(v34 * v43))
                    + v45)
            + a2[3].f32[0];
        *(float32x2_t *)(a8 + 24) = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v42, v33.f32[0]), vmul_n_f32(*(float32x2_t *)&v42[12], v33.f32[1])), vmul_n_f32(*(float32x2_t *)&v42[24], v34)), v44), a2[2]);
        *(float *)(a8 + 32) = v30;
        *(_WORD *)(a8 + 20) |= 1u;
      }
    }
  }
  return v26;
}

float32_t sweepBox_BoxGeom_Precise(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8, __int16 *a9)
{
  float v11 = *(float *)(a6 + 44) - *(float *)(a2 + 24);
  long long v12 = *(_OWORD *)(a6 + 16);
  v41[0] = *(_OWORD *)a6;
  v41[1] = v12;
  int v42 = *(_DWORD *)(a6 + 32);
  float32x2_t v43 = vsub_f32(*(float32x2_t *)(a6 + 36), *(float32x2_t *)(a2 + 16));
  float v44 = v11;
  uint64_t v45 = *(void *)(a6 + 48);
  float32x4_t v13 = *(float32x4_t *)a2;
  *(int32x2_t *)&long long v12 = vdup_lane_s32(*(int32x2_t *)a2, 1);
  float32x2_t v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  float32x2_t v15 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  int v46 = *(_DWORD *)(a6 + 56);
  float32x4_t v16 = vaddq_f32(v13, v13);
  *(int32x2_t *)v13.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v16.f32), 0);
  float32x2_t v17 = vmul_lane_f32(*(float32x2_t *)&v12, *(float32x2_t *)v16.f32, 1);
  float32x2_t v18 = vmul_laneq_f32(v14, v16, 2);
  *(float32x2_t *)&long long v12 = vmul_n_f32(*(float32x2_t *)&v12, v16.f32[0]);
  float32x2_t v19 = vmul_n_f32(v14, v16.f32[0]);
  float32x2_t v20 = vmul_n_f32(v15, v16.f32[0]);
  float32x2_t v21 = vmul_lane_f32(v14, *(float32x2_t *)v16.f32, 1);
  float32x2_t v22 = vmul_lane_f32(v15, *(float32x2_t *)v16.f32, 1);
  *(float32x2_t *)v16.f32 = vmul_laneq_f32(v15, v16, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v13.f32 = vsub_f32(_D5, *(float32x2_t *)v13.f32);
  LODWORD(v28) = vsub_f32(v19, v22).u32[0];
  LODWORD(v29) = vadd_f32(v21, v20).u32[0];
  v32[0] = (float)(1.0 - v17.f32[1]) - v18.f32[1];
  LODWORD(v32[1]) = vadd_f32(*(float32x2_t *)&v12, *(float32x2_t *)v16.f32).u32[0];
  HIDWORD(v28) = vsub_f32(*(float32x2_t *)&v12, *(float32x2_t *)&v16).i32[1];
  uint64_t v33 = v28;
  unsigned __int32 v34 = vsub_f32(*(float32x2_t *)v13.f32, v18).u32[0];
  HIDWORD(v29) = vadd_f32(v19, v22).i32[1];
  uint64_t v35 = v29;
  int32x2_t v36 = vzip1_s32((int32x2_t)vsub_f32(v21, v20), (int32x2_t)vsub_f32(*(float32x2_t *)v13.f32, v17));
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v39 = *(void *)(a1 + 4);
  int v40 = *(_DWORD *)(a1 + 12);
  __int16 v31 = *a9;
  if (physx::Gu::sweepBoxBox((uint64_t)v41, (uint64_t)v32, a7, &v31, (uint64_t)a8, a3))
  {
    float32_t result = a8[6].f32[0];
    if (result != 0.0)
    {
      a8[3] = vadd_f32(*(float32x2_t *)(a2 + 16), a8[3]);
      float32_t result = *(float *)(a2 + 24) + a8[4].f32[0];
      a8[4].f32[0] = result;
    }
  }
  return result;
}

uint64_t sweepBox_HeightFieldGeom_Precise(float32x2_t *a1, float *a2, float a3, uint64_t a4, uint64_t a5, long long *a6, float32x2_t *a7, uint64_t a8, __int16 *a9)
{
  physx::Gu::computeSweptBox((uint64_t)&v73, (float *)a6 + 12, (float32x2_t *)((char *)a6 + 36), (float *)a6, a7, a3);
  if (v81 >= 0.0)
  {
    float v18 = v74 - v76;
    if (v73 >= (float)-v77)
    {
      float v27 = v81 + (float)((float)(v73 + 1.0) + v77);
      float v28 = 0.5 / sqrtf(v27);
      float v20 = v28 * (float)(v78 - v80);
      float v21 = v28 * (float)(v79 - v75);
      float v22 = v28 * v18;
      float v24 = v27 * v28;
      goto LABEL_9;
    }
    float v23 = v81 + (float)((float)(1.0 - v73) - v77);
    float v19 = 0.5 / sqrtf(v23);
    float v20 = v19 * (float)(v79 + v75);
    float v21 = v19 * (float)(v78 + v80);
    float v22 = v23 * v19;
  }
  else
  {
    float v16 = v74 + v76;
    if (v73 <= v77)
    {
      float v25 = (float)((float)(1.0 - v73) + v77) - v81;
      float v26 = 0.5 / sqrtf(v25);
      float v20 = v26 * v16;
      float v21 = v25 * v26;
      float v22 = v26 * (float)(v78 + v80);
      float v24 = v26 * (float)(v79 - v75);
      goto LABEL_9;
    }
    float v17 = (float)((float)(v73 + 1.0) - v77) - v81;
    float v18 = v78 - v80;
    float v19 = 0.5 / sqrtf(v17);
    float v20 = v17 * v19;
    float v21 = v19 * v16;
    float v22 = v19 * (float)(v79 + v75);
  }
  float v24 = v19 * v18;
LABEL_9:
  float v29 = v21 + v21;
  float v30 = v22 + v22;
  float v31 = v21 * (float)(v21 + v21);
  float v32 = v22 * (float)(v22 + v22);
  float v33 = (float)(v20 + v20) * v21;
  float v34 = (float)(v20 + v20) * v22;
  float v35 = (float)(v20 + v20) * v24;
  float v36 = v29 * v22;
  float v37 = v29 * v24;
  float v38 = v30 * v24;
  float v39 = (float)(1.0 - v31) - v32;
  float v40 = v33 + v38;
  float v41 = v33 - v38;
  float v42 = 1.0 - (float)(v20 * (float)(v20 + v20));
  float v43 = v42 - v32;
  float v44 = v36 + v35;
  float v45 = (float)(fabsf(v39 * v85) + fabsf(v41 * v86)) + fabsf((float)(v34 + v37) * v87);
  float v46 = (float)(fabsf(v40 * v85) + fabsf(v43 * v86)) + fabsf((float)(v36 - v35) * v87);
  float v47 = (float)(fabsf((float)(v34 - v37) * v85) + fabsf(v44 * v86)) + fabsf((float)(v42 - v31) * v87);
  v72[0] = v82 - v45;
  v72[1] = v83 - v46;
  v72[2] = v84 - v47;
  v72[3] = v82 + v45;
  v72[4] = v83 + v46;
  v72[5] = v84 + v47;
  *(_DWORD *)(a8 + 48) = 2139095039;
  float32x2_t v59 = a1[1];
  float32x2_t v60 = a1;
  float v48 = a1[3].f32[0];
  __asm { FMOV            V3.2S, #1.0 }
  int32x2_t v57 = vrev64_s32((int32x2_t)vdiv_f32(_D3, a1[2]));
  float v58 = 1.0 / v48;
  long long v54 = a6[1];
  long long v63 = *a6;
  long long v64 = v54;
  long long v65 = a6[2];
  int v66 = *((_DWORD *)a6 + 12);
  *(void *)&long long v55 = *(void *)((char *)a6 + 52);
  *((float32x2_t *)&v55 + 1) = *a7;
  long long v67 = v55;
  __int32 v68 = a7[1].i32[0];
  float v69 = a3;
  __int16 v70 = *a9;
  v61[0] = &unk_26E7285A8;
  v61[1] = &v57;
  unsigned __int8 v62 = 0;
  v61[2] = a2;
  float v61[3] = a8;
  BOOL v71 = (a1[3].i8[4] & 2 | v70 & 0x80) != 0;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v57, a2, v72, 1, (uint64_t)v61);
  return v62;
}

float32x2_t physx::Gu::computeSweptBox(uint64_t a1, float *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  float v7 = a5->f32[0];
  float v6 = a5->f32[1];
  float v8 = a5[1].f32[0];
  float v9 = fabsf((float)((float)(v6 * a4[1]) + (float)(*a4 * a5->f32[0])) + (float)(a4[2] * v8));
  float v10 = fabsf((float)((float)(v6 * a4[4]) + (float)(a4[3] * a5->f32[0])) + (float)(a4[5] * v8));
  *(float *)float v40 = v9;
  *(float *)&v40[1] = v10;
  float v11 = fabsf((float)((float)(v6 * a4[7]) + (float)(a4[6] * v7)) + (float)(a4[8] * v8));
  *(float *)&v40[2] = v11;
  BOOL v12 = v10 <= v9;
  if (v10 > v9) {
    float v9 = v10;
  }
  if (v11 > v9) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  if (v11 > v9) {
    BOOL v12 = 0;
  }
  if (*(float *)&v40[v13] < *(float *)&v40[v12]) {
    BOOL v12 = v13;
  }
  float32x2_t v14 = &a4[3 * v12];
  float v15 = v14[1];
  float v16 = v14[2];
  float v17 = (float)((float)(v6 * v15) + (float)(*v14 * v7)) + (float)(v16 * v8);
  float v18 = v8 * v17;
  float v19 = *v14 - (float)(v7 * v17);
  float v20 = v15 - (float)(v6 * v17);
  float v21 = v16 - v18;
  float v22 = sqrtf((float)((float)(v20 * v20) + (float)(v19 * v19)) + (float)(v21 * v21));
  if (v22 > 0.0)
  {
    float v23 = 1.0 / v22;
    float v19 = v19 * v23;
    float v20 = v20 * v23;
    float v21 = v21 * v23;
  }
  uint64_t v24 = 0;
  float v25 = (float)(v6 * v21) - (float)(v8 * v20);
  float v26 = (float)(v8 * v19) - (float)(v7 * v21);
  float v27 = (float)(v7 * v20) - (float)(v6 * v19);
  *(float *)a1 = v7;
  *(float *)(a1 + 4) = v6;
  *(float *)(a1 + 8) = v8;
  *(float *)(a1 + 12) = v19;
  *(float *)(a1 + 16) = v20;
  *(float *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = v21;
  *(float *)(a1 + 24) = v25;
  *(float *)(a1 + 28) = v26;
  *(float *)(a1 + 32) = v27;
  float v28 = a5->f32[0];
  float v29 = a5->f32[1];
  float v30 = (float)(v20 * v29) + (float)(a5->f32[0] * v19);
  float v31 = a5[1].f32[0];
  *(float *)float v39 = a6;
  *(float *)&v39[1] = (float)(v30 + (float)(v31 * v21)) * a6;
  *(float *)&v39[2] = (float)((float)((float)(v26 * v29) + (float)(v28 * v25)) + (float)(v31 * v27)) * a6;
  uint64_t v32 = a1 + 48;
  uint64_t v33 = -36;
  do
  {
    float v34 = *(float *)(v32 + v33 - 12);
    float v35 = *(float *)(v32 + v33 - 8);
    float v36 = *(float *)(v32 + v33 - 4);
    *(float *)(v32 + v24 * 4) = (float)((float)((float)(*a2
                                                      * fabsf((float)((float)(a4[1] * v35) + (float)(*a4 * v34))+ (float)(a4[2] * v36)))+ (float)(*(float *)&v39[v24] * 0.5))+ (float)(fabsf((float)((float)(v35 * a4[4]) + (float)(a4[3] * v34))+ (float)(a4[5] * v36))* a2[1]))+ (float)(fabsf((float)((float)(v35 * a4[7]) + (float)(a4[6] * v34)) + (float)(a4[8] * v36))* a2[2]);
    ++v24;
    v33 += 12;
  }
  while (v33);
  float v37 = (float)((float)(a5[1].f32[0] * a6) * 0.5) + a3[1].f32[0];
  float32x2_t result = vadd_f32(vmul_f32(vmul_n_f32(*a5, a6), (float32x2_t)0x3F0000003F000000), *a3);
  *(float32x2_t *)(a1 + 36) = result;
  *(float *)(a1 + 44) = v37;
  return result;
}

uint64_t physx::Gu::sweepBoxTriangles_Precise(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, unsigned int *a8, float a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16, __int16 *a17)
{
  float32x2_t v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 1);
  a12.n128_u64[0] = (unint64_t)vdup_laneq_s32(*(int32x4_t *)a5, 2);
  float32x2_t v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5, 3);
  _Q5 = vaddq_f32(*(float32x4_t *)a5, *(float32x4_t *)a5);
  float32x2_t v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a5, *(float32x2_t *)_Q5.f32), 0);
  float32x2_t v21 = vmul_lane_f32(v17, *(float32x2_t *)_Q5.f32, 1);
  a16.n128_u64[0] = (unint64_t)vmul_laneq_f32((float32x2_t)a12.n128_u64[0], _Q5, 2);
  float32x2_t v22 = vmul_n_f32(v17, _Q5.f32[0]);
  float32x2_t v23 = vmul_n_f32((float32x2_t)a12.n128_u64[0], _Q5.f32[0]);
  float32x2_t v24 = vmul_n_f32(v18, _Q5.f32[0]);
  a12.n128_u64[0] = (unint64_t)vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v25 = vmul_lane_f32(v18, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v26 = vmul_laneq_f32(v18, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v31 = vsub_f32(*(float32x2_t *)_Q5.f32, v20);
  *(float32x2_t *)_Q5.f32 = vadd_f32(v22, v26);
  LODWORD(v32) = vsub_f32(v23, v25).u32[0];
  float32x2_t v33 = vsub_f32(v22, v26);
  double v34 = COERCE_DOUBLE(vsub_f32(v31, (float32x2_t)a16.n128_u64[0]));
  LODWORD(v35) = vadd_f32((float32x2_t)a12.n128_u64[0], v24).u32[0];
  int32x2_t v36 = (int32x2_t)vsub_f32(v31, v21);
  a16.n128_u32[0] = a16.n128_u32[1];
  v21.f32[0] = (float)(1.0 - v21.f32[1]) - a16.n128_f32[1];
  v41[0] = v21.f32[0];
  v41[1] = _Q5.f32[0];
  HIDWORD(v32) = v33.i32[1];
  uint64_t v42 = v32;
  int v43 = LODWORD(v34);
  HIDWORD(v35) = vadd_f32(v23, v25).i32[1];
  double v37 = COERCE_DOUBLE(vzip1_s32((int32x2_t)vsub_f32((float32x2_t)a12.n128_u64[0], v24), v36));
  uint64_t v44 = v35;
  double v45 = v37;
  *(void *)&long long v38 = *(void *)(a5 + 20);
  a12.n128_u64[0] = *(void *)(a4 + 4);
  *((void *)&v38 + 1) = a12.n128_u64[0];
  int v46 = *(_DWORD *)(a5 + 16);
  long long v47 = v38;
  int v48 = *(_DWORD *)(a4 + 12);
  LODWORD(v37) = v48;
  __int16 v40 = *a17;
  return sweepBoxVsTriangles(a1, a2, (uint64_t)v41, a6, a7, &v40, a3, a8, a9, v37, *(double *)&v38, a12, v34, *(double *)_Q5.i64, *(double *)&v21, a16);
}

uint64_t sweepBoxVsTriangles(int a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, __int16 *a6, char a7, unsigned int *a8, float a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16)
{
  if (!a1)
  {
    char v47 = 0;
    return v47 & 1;
  }
  __int16 v100 = *a6;
  char v106 = ((*a6 & 0x80) == 0) & ~a7;
  float v21 = *(float *)(a3 + 4);
  float v22 = *(float *)(a3 + 12);
  float v23 = *(float *)(a3 + 16);
  float v24 = *(float *)(a3 + 24);
  float v25 = *(float *)(a3 + 28);
  float v26 = *(float *)(a3 + 36);
  float v28 = *(float *)(a3 + 40);
  float v27 = *(float *)(a3 + 44);
  float v29 = (float)-(float)(v28 * v21) - (float)(*(float *)a3 * v26);
  float v30 = (float)-(float)(v28 * v23) - (float)(v22 * v26);
  float v31 = (float)-(float)(v28 * v25) - (float)(v24 * v26);
  float v32 = a4->f32[0];
  float v33 = a4->f32[1];
  float v111 = v21;
  float v112 = *(float *)a3;
  float v109 = v23;
  float v110 = v22;
  float v107 = v24;
  float v108 = v25;
  float v34 = (float)(*(float *)a3 * a4->f32[0]) + (float)(v21 * v33);
  float v35 = a4[1].f32[0];
  float v114 = *(float *)(a3 + 20);
  float v115 = *(float *)(a3 + 8);
  float v113 = *(float *)(a3 + 32);
  float v36 = v34 + (float)(v115 * v35);
  float v37 = (float)((float)(v22 * a4->f32[0]) + (float)(v23 * v33)) + (float)(v114 * v35);
  float v38 = (float)((float)(v24 * a4->f32[0]) + (float)(v25 * v33)) + (float)(v113 * v35);
  unint64_t v128 = __PAIR64__(LODWORD(v37), LODWORD(v36));
  float v129 = v38;
  v127[0] = v36 * a9;
  v127[1] = v37 * a9;
  v127[2] = v38 * a9;
  *(float *)(a5 + 48) = a9;
  float v39 = 1.0;
  float v40 = 1.0 / (float)(v36 * a9);
  if (v36 == 0.0) {
    float v40 = 0.0;
  }
  float v41 = 1.0 / (float)(v37 * a9);
  if (v37 == 0.0) {
    float v41 = 0.0;
  }
  float v42 = 1.0 / (float)(v38 * a9);
  float v103 = 0.0;
  if (v38 == 0.0) {
    float v42 = 0.0;
  }
  v126[0] = v40;
  v126[1] = v41;
  v126[2] = v42;
  int v43 = (float *)(a3 + 48);
  float v44 = (float)((float)(fabsf(v37) * *(float *)(a3 + 52)) + (float)(fabsf(v36) * *(float *)(a3 + 48)))
      + (float)(fabsf(v38) * *(float *)(a3 + 56));
  float v45 = (float)((float)(v28 * v33) + (float)(v26 * v32)) + (float)(v27 * v35);
  if (a8) {
    unsigned int v46 = *a8;
  }
  else {
    unsigned int v46 = 0;
  }
  unsigned int v48 = 0;
  char v49 = 0;
  float v50 = v29 - (float)(v115 * v27);
  float v51 = v30 - (float)(v114 * v27);
  float v52 = v31 - (float)(v113 * v27);
  float v53 = v44 + 0.002;
  float v54 = v45 - (float)(v44 + 0.002);
  float v101 = 0.0;
  float v102 = 0.0;
  while (1)
  {
    if (v46 == v48) {
      unsigned int v55 = 0;
    }
    else {
      unsigned int v55 = v48;
    }
    if (v48) {
      unsigned int v56 = v55;
    }
    else {
      unsigned int v56 = v46;
    }
    int32x2_t v57 = (float *)(a2 + 36 * v56);
    float v58 = *v57;
    float v59 = v57[1];
    float v60 = a4->f32[1];
    float v61 = a4[1].f32[0];
    float v63 = v57[2];
    float v62 = v57[3];
    float v64 = (float)((float)(v59 * v60) + (float)(*v57 * a4->f32[0])) + (float)(v63 * v61);
    float v65 = v57[4];
    float v66 = v57[5];
    float v67 = (float)((float)(v60 * v65) + (float)(v62 * a4->f32[0])) + (float)(v66 * v61);
    float v68 = v57[6];
    float v69 = v57[7];
    float v70 = v57[8];
    float v71 = (float)((float)(v60 * v69) + (float)(v68 * a4->f32[0])) + (float)(v70 * v61);
    if (v64 >= v67) {
      float v72 = v67;
    }
    else {
      float v72 = v64;
    }
    if (v72 >= v71) {
      float v72 = v71;
    }
    if (v72 > (float)(v53 + (float)(v45 + (float)(v39 * a9)))) {
      goto LABEL_37;
    }
    BOOL v73 = v64 < v54 && v67 < v54;
    if (v73 && v71 < v54) {
      goto LABEL_37;
    }
    float v117 = v50 + (float)((float)((float)(v112 * v58) + (float)(v111 * v59)) + (float)(v115 * v63));
    float v118 = v51 + (float)((float)((float)(v110 * v58) + (float)(v109 * v59)) + (float)(v114 * v63));
    float v119 = v52 + (float)((float)((float)(v107 * v58) + (float)(v108 * v59)) + (float)(v113 * v63));
    float v120 = v50 + (float)((float)((float)(v112 * v62) + (float)(v111 * v65)) + (float)(v115 * v66));
    float v121 = v51 + (float)((float)((float)(v110 * v62) + (float)(v109 * v65)) + (float)(v114 * v66));
    float v122 = v52 + (float)((float)((float)(v107 * v62) + (float)(v108 * v65)) + (float)(v113 * v66));
    float v123 = v50 + (float)((float)((float)(v112 * v68) + (float)(v111 * v69)) + (float)(v115 * v70));
    float v124 = v51 + (float)((float)((float)(v110 * v68) + (float)(v109 * v69)) + (float)(v114 * v70));
    float v125 = v52 + (float)((float)((float)(v107 * v68) + (float)(v108 * v69)) + (float)(v113 * v70));
    float v116 = 3.4028e38;
    if (!physx::Gu::triBoxSweepTestBoxSpace(&v117, v43, v127, v126, &v116, v106, v39)) {
      goto LABEL_37;
    }
    float v75 = v116;
    if (v116 >= v39) {
      goto LABEL_37;
    }
    if (v116 == 0.0) {
      break;
    }
    *(float *)(a5 + 48) = v116 * a9;
    *(_DWORD *)(a5 + 16) = v56;
    float v101 = (float)((float)(v122 - v119) * (float)(v123 - v117)) - (float)((float)(v120 - v117) * (float)(v125 - v119));
    float v102 = (float)((float)(v121 - v118) * (float)(v125 - v119)) - (float)((float)(v122 - v119) * (float)(v124 - v118));
    float v103 = (float)((float)(v120 - v117) * (float)(v124 - v118)) - (float)((float)(v121 - v118) * (float)(v123 - v117));
    char v49 = 1;
    if ((*(unsigned char *)a6 & 0x40) != 0) {
      goto LABEL_38;
    }
    float v39 = v75;
LABEL_37:
    if (a1 == ++v48)
    {
LABEL_38:
      int v76 = 2;
      uint64_t v77 = a5;
      goto LABEL_39;
    }
  }
  uint64_t v77 = a5;
  *(_DWORD *)(a5 + 16) = v56;
  *(_WORD *)(a5 + 2physx::Sq::AABBTree::release(this, 0) = 1026;
  float v98 = -a4[1].f32[0];
  a10 = COERCE_DOUBLE(vneg_f32(*a4));
  *(double *)(a5 + 36) = a10;
  *(float *)(a5 + 44) = v98;
  *(_DWORD *)(a5 + 48) = 0;
  int v76 = 1;
LABEL_39:
  BOOL v78 = v76 == 2;
  char v47 = (v76 != 2) | v49;
  if (v78 && (v49 & 1) != 0)
  {
    *(_WORD *)(v77 + 2physx::Sq::AABBTree::release(this, 0) = 0;
    if ((*a6 & 3) != 0)
    {
      uint64_t v79 = a2 + 36 * *(unsigned int *)(v77 + 16);
      LODWORD(a1physx::Sq::AABBTree::release(this, 0) = *(_DWORD *)(v79 + 4);
      LODWORD(a13) = *(_DWORD *)(v79 + 8);
      LODWORD(a14) = *(_DWORD *)(v79 + 12);
      *(float *)&a11 = v51
                     + (float)((float)((float)(v110 * *(float *)v79) + (float)(v109 * *(float *)&a10))
                             + (float)(v114 * *(float *)&a13));
      float v80 = *(float *)(v79 + 16);
      float v81 = *(float *)(v79 + 20);
      *(float *)&a15 = v51
                     + (float)((float)((float)(v110 * *(float *)&a14) + (float)(v109 * v80)) + (float)(v114 * v81));
      float v82 = *(float *)(v79 + 24);
      float v83 = *(float *)(v79 + 28);
      float v84 = *(float *)(v79 + 32);
      float v85 = v50
          + (float)((float)((float)(v112 * *(float *)v79) + (float)(v111 * *(float *)&a10))
                  + (float)(v115 * *(float *)&a13));
      *(float *)&a10 = v52
                     + (float)((float)((float)(v107 * *(float *)v79) + (float)(v108 * *(float *)&a10))
                             + (float)(v113 * *(float *)&a13));
      a12.n128_f32[0] = v50
                      + (float)((float)((float)(v112 * *(float *)&a14) + (float)(v111 * v80)) + (float)(v115 * v81));
      *(float *)&a13 = v52
                     + (float)((float)((float)(v107 * *(float *)&a14) + (float)(v108 * v80)) + (float)(v113 * v81));
      a16.n128_f32[0] = v115 * v84;
      *(float *)&a14 = v50 + (float)((float)((float)(v112 * v82) + (float)(v111 * v83)) + (float)(v115 * v84));
      float v117 = v85;
      float v118 = *(float *)&a11;
      float v119 = *(float *)&a10;
      float v120 = a12.n128_f32[0];
      float v121 = *(float *)&a15;
      float v122 = *(float *)&a13;
      float v123 = *(float *)&a14;
      float v124 = v51 + (float)((float)((float)(v110 * v82) + (float)(v109 * v83)) + (float)(v114 * v84));
      float v125 = v52 + (float)((float)((float)(v107 * v82) + (float)(v108 * v83)) + (float)(v113 * v84));
      physx::Gu::computeBoxTriImpactData((float32x2_t *)(v77 + 24), (float32x2_t *)(v77 + 36), (uint64_t)v43, (float32x2_t *)&v128, (uint64_t)&v117, *(float *)(v77 + 48), a10, a11, a12, a13, a14, a15, a16);
      __int16 v86 = *a6;
      if ((*a6 & 2) != 0)
      {
        float v88 = *(float *)(v77 + 36);
        float v87 = *(float *)(v77 + 40);
        float v89 = *(float *)(v77 + 44);
        float v90 = sqrtf((float)((float)(v87 * v87) + (float)(v88 * v88)) + (float)(v89 * v89));
        if (v90 > 0.0)
        {
          float v91 = 1.0 / v90;
          float v88 = v88 * v91;
          float v87 = v87 * v91;
          float v89 = v89 * v91;
        }
        if ((v100 & 0x80) != 0
          && (a7 & 1) == 0
          && (float)((float)((float)(v101 * *((float *)&v128 + 1)) + (float)(v102 * *(float *)&v128))
                   + (float)(v103 * v129)) > 0.0)
        {
          float v88 = -v88;
          float v87 = -v87;
          float v89 = -v89;
        }
        float v92 = (float)((float)(v88 * *(float *)(a3 + 8)) + (float)(v87 * *(float *)(a3 + 20)))
            + (float)(v89 * *(float *)(a3 + 32));
        *(float32x2_t *)(v77 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v88), vmul_n_f32(*(float32x2_t *)(a3 + 12), v87)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v89));
        *(float *)(v77 + 44) = v92;
        *(_WORD *)(v77 + 20) |= 2u;
        __int16 v86 = *a6;
      }
      if (v86)
      {
        float v93 = *(float *)(v77 + 24);
        float v94 = *(float *)(v77 + 28);
        float v95 = *(float *)(v77 + 32);
        float v96 = (float)((float)((float)(v93 * *(float *)(a3 + 8)) + (float)(v94 * *(float *)(a3 + 20)))
                    + (float)(v95 * *(float *)(a3 + 32)))
            + *(float *)(a3 + 44);
        *(float32x2_t *)(v77 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v93), vmul_n_f32(*(float32x2_t *)(a3 + 12), v94)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v95)), *(float32x2_t *)(a3 + 36));
        *(float *)(v77 + 32) = v96;
        *(_WORD *)(v77 + 20) |= 1u;
      }
    }
    char v47 = v49;
  }
  return v47 & 1;
}

uint64_t physx::PxGeometryQuery::sweep(uint64_t a1, uint64_t a2, float32x4_t *a3, int *a4, uint64_t a5, uint64_t a6, __int16 *a7, double a8, double a9, double a10, int8x16_t a11, int8x16_t a12)
{
  uint64_t result = 0;
  switch(*(_DWORD *)a2)
  {
    case 0:
      int v15 = *(_DWORD *)(a2 + 4);
      v74[0] = 2;
      v74[1] = v15;
      v74[2] = 0;
      unint64_t v66 = a3[1].u64[0];
      a11.i64[0] = v66;
      a12.i32[0] = a3[1].i32[2];
      int8x16_t v16 = vextq_s8(vextq_s8(a12, a12, 4uLL), a11, 0xCuLL);
      v16.i32[3] = v16.i32[0];
      *(int8x16_t *)float v67 = v16;
      *(_DWORD *)&v67[16] = v15;
      float32x2_t v17 = &gGeomSweepFuncs[*a4];
      if ((*a7 & 0x100) != 0) {
        v17 += 7;
      }
      float32x2_t v18 = *v17;
      __int16 v73 = *a7;
      uint64_t result = ((uint64_t (*)(int *, uint64_t, _DWORD *, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v18)(a4, a5, v74, a3, &v66, a1, a6, &v73);
      break;
    case 2:
      float v19 = a3->f32[0];
      float v20 = a3->f32[1];
      float v21 = v19 + v19;
      float v23 = a3->f32[2];
      float v22 = a3->f32[3];
      float v24 = v22 + v22;
      float v25 = (float)((float)(v22 * (float)(v22 + v22)) + -1.0) + (float)(v19 * (float)(v19 + v19));
      float v26 = (float)(v21 * v20) + (float)(v23 * (float)(v22 + v22));
      float v27 = (float)(v21 * v23) - (float)(v20 * v24);
      int v29 = *(_DWORD *)(a2 + 4);
      float v28 = *(float *)(a2 + 8);
      float v30 = v25 * v28;
      float v31 = v28 * v26;
      float v32 = v27 * v28;
      float v33 = a3[1].f32[0];
      float v34 = a3[1].f32[1];
      float v35 = a3[1].f32[2];
      *(float *)&unint64_t v66 = v33 + v30;
      *((float *)&v66 + 1) = v34 + v31;
      *(float *)float v67 = v32 + v35;
      *(float *)&v67[4] = v33 - v30;
      *(float *)&v67[8] = v34 - v31;
      *(float *)&v67[12] = v35 - v32;
      *(_DWORD *)&v67[16] = v29;
      float v36 = &gGeomSweepFuncs[*a4];
      if ((*a7 & 0x100) != 0) {
        v36 += 7;
      }
      float v37 = *v36;
      __int16 v72 = *a7;
      uint64_t result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v37)(a4, a5, a2, a3, &v66, a1, a6, &v72);
      break;
    case 3:
      float32x2_t v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1);
      float32x2_t v39 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      float32x2_t v40 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q6 = vaddq_f32(*a3, *a3);
      float32x2_t v42 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3->f32, *(float32x2_t *)_Q6.f32), 0);
      float32x2_t v43 = vmul_lane_f32(v38, *(float32x2_t *)_Q6.f32, 1);
      float32x2_t v44 = vmul_laneq_f32(v39, _Q6, 2);
      float32x2_t v45 = vmul_n_f32(v38, _Q6.f32[0]);
      float32x2_t v46 = vmul_n_f32(v39, _Q6.f32[0]);
      float32x2_t v47 = vmul_n_f32(v40, _Q6.f32[0]);
      float32x2_t v48 = vmul_lane_f32(v39, *(float32x2_t *)_Q6.f32, 1);
      float32x2_t v49 = vmul_lane_f32(v40, *(float32x2_t *)_Q6.f32, 1);
      float32x2_t v50 = vmul_laneq_f32(v40, _Q6, 2);
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v55 = vsub_f32(*(float32x2_t *)_Q6.f32, v42);
      LODWORD(v56) = vsub_f32(v46, v49).u32[0];
      LODWORD(v57) = vadd_f32(v48, v47).u32[0];
      *(float *)&unint64_t v66 = (float)(1.0 - v43.f32[1]) - v44.f32[1];
      HIDWORD(v66) = vadd_f32(v45, v50).u32[0];
      HIDWORD(v56) = vsub_f32(v45, v50).i32[1];
      *(void *)float v67 = v56;
      HIDWORD(v57) = vadd_f32(v46, v49).i32[1];
      *(_DWORD *)&v67[8] = vsub_f32(v55, v44).u32[0];
      *(void *)&v67[12] = v57;
      int32x2_t v68 = vzip1_s32((int32x2_t)vsub_f32(v48, v47), (int32x2_t)vsub_f32(v55, v43));
      __int32 v69 = a3[1].i32[0];
      *(void *)&long long v58 = *(uint64_t *)((char *)a3[1].i64 + 4);
      *((void *)&v58 + 1) = *(void *)(a2 + 4);
      long long v70 = v58;
      int v71 = *(_DWORD *)(a2 + 12);
      float v59 = &gGeomSweepFuncs[*a4];
      float v60 = v59 + 21;
      float v61 = v59 + 14;
      if ((*a7 & 0x100) != 0) {
        float v61 = v60;
      }
      float v62 = *v61;
      __int16 v65 = *a7;
      uint64_t result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, unint64_t *, uint64_t, uint64_t, __int16 *))v62)(a4, a5, a2, a3, &v66, a1, a6, &v65);
      break;
    case 4:
      float v63 = gGeomSweepFuncs[*a4 + 28];
      __int16 v64 = *a7;
      uint64_t result = ((uint64_t (*)(int *, uint64_t, uint64_t, float32x4_t *, uint64_t, uint64_t, __int16 *))v63)(a4, a5, a2, a3, a1, a6, &v64);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::PxGeometryQuery::overlap(int *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  if ((int)v4 <= (int)v5) {
    return ((uint64_t (*)(int *, uint64_t))*(&gGeomOverlapMethodTable[7 * (int)v4] + v5))(a1, a2);
  }
  else {
    return ((uint64_t (*)(int *, uint64_t, int *, uint64_t, void))*(&gGeomOverlapMethodTable[7 * (int)v5] + v4))(a3, a4, a1, a2, 0);
  }
}

float32x2_t *physx::PxGeometryQuery::pointDistance(float32x2_t *result, uint64_t a2, uint64_t a3, float32x2_t *a4, double a5, double a6, double a7, int32x4_t a8)
{
  LODWORD(a5) = -1.0;
  switch(*(_DWORD *)a2)
  {
    case 0:
      float v9 = *(float *)(a2 + 4);
      float32x2_t v10 = *(float32x2_t *)(a3 + 16);
      float32x2_t v11 = vsub_f32(*result, v10);
      float v12 = *(float *)(a3 + 24);
      float v13 = result[1].f32[0] - v12;
      float v14 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v11, v11).i32[1]), v11.f32[0], v11.f32[0]) + (float)(v13 * v13));
      if (v14 > v9)
      {
        if (a4)
        {
          *a4 = vadd_f32(v10, vmul_n_f32(vmul_n_f32(v11, 1.0 / v14), v9));
          a4[1].f32[0] = v12 + (float)(v9 * (float)(v13 * (float)(1.0 / v14)));
        }
      }
      break;
    case 2:
      float v15 = *(float *)a3;
      float v16 = *(float *)(a3 + 4);
      float v17 = v15 + v15;
      float v19 = *(float *)(a3 + 8);
      float v18 = *(float *)(a3 + 12);
      float v20 = v18 + v18;
      float v21 = (float)((float)(v18 * (float)(v18 + v18)) + -1.0) + (float)(v15 * (float)(v15 + v15));
      float v22 = (float)(v17 * v16) + (float)(v19 * (float)(v18 + v18));
      float v23 = (float)(v17 * v19) - (float)(v16 * v20);
      float v24 = *(float *)(a2 + 4);
      float v25 = *(float *)(a2 + 8);
      float v26 = v21 * v25;
      float v27 = v25 * v22;
      float v28 = v23 * v25;
      float v29 = *(float *)(a3 + 16);
      float v30 = *(float *)(a3 + 20);
      float v31 = v29 + v26;
      float v32 = v30 + v27;
      float v33 = *(float *)(a3 + 24);
      float v34 = v28 + v33;
      float v35 = v33 - v28;
      float v36 = (float)(v29 - v26) - (float)(v29 + v26);
      float v37 = (float)(v30 - v27) - (float)(v30 + v27);
      float v38 = v35 - v34;
      float v39 = result->f32[1];
      float v40 = result->f32[0] - (float)(v29 + v26);
      float v41 = v39 - v32;
      float v42 = result[1].f32[0];
      float v43 = v42 - v34;
      float v44 = (float)((float)(v37 * (float)(v39 - v32)) + (float)(v40 * v36)) + (float)((float)(v42 - v34) * v38);
      if (v44 <= 0.0)
      {
        float v46 = 0.0;
      }
      else
      {
        float v45 = (float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38);
        if (v44 >= v45)
        {
          float v40 = v40 - v36;
          float v41 = v41 - v37;
          float v43 = v43 - v38;
          float v46 = 1.0;
        }
        else
        {
          float v46 = v44 / v45;
          float v40 = v40 - (float)(v36 * v46);
          float v41 = v41 - (float)(v37 * v46);
          float v43 = v43 - (float)(v38 * v46);
        }
      }
      if ((float)((float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v43 * v43)) > (float)(v24 * v24) && a4)
      {
        float v79 = v31 + (float)(v36 * v46);
        float v80 = v32 + (float)(v37 * v46);
        float v81 = v34 + (float)(v38 * v46);
        float v82 = result->f32[0] - v79;
        float v83 = v39 - v80;
        float v84 = v42 - v81;
        float v85 = sqrtf((float)((float)(v83 * v83) + (float)(v82 * v82)) + (float)(v84 * v84));
        if (v85 > 0.0)
        {
          float v86 = 1.0 / v85;
          float v82 = v82 * v86;
          float v83 = v83 * v86;
          float v84 = v84 * v86;
        }
        a4->f32[0] = v79 + (float)(v24 * v82);
        a4->f32[1] = v80 + (float)(v24 * v83);
        a4[1].f32[0] = v81 + (float)(v24 * v84);
      }
      break;
    case 3:
      float32x2_t v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3, 1);
      float32x2_t v48 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
      float32x2_t v49 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
      _Q4 = vaddq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
      float32x2_t v51 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
      float32x2_t v52 = vmul_lane_f32(v47, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v53 = vmul_laneq_f32(v48, _Q4, 2);
      float32x2_t v54 = vmul_n_f32(v47, _Q4.f32[0]);
      float32x2_t v55 = vmul_n_f32(v48, _Q4.f32[0]);
      float32x2_t v56 = vmul_n_f32(v49, _Q4.f32[0]);
      float32x2_t v57 = vmul_lane_f32(v48, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v58 = vmul_lane_f32(v49, *(float32x2_t *)_Q4.f32, 1);
      float32x2_t v59 = vmul_laneq_f32(v49, _Q4, 2);
      __asm { FMOV            V4.2S, #1.0 }
      float32x2_t v64 = vsub_f32(*(float32x2_t *)_Q4.f32, v51);
      float32x2_t v65 = vadd_f32(v54, v59);
      float32x2_t v66 = vsub_f32(v55, v58);
      float32x2_t v67 = vsub_f32(v54, v59);
      float32x2_t v68 = vadd_f32(v55, v58);
      float32x2_t v69 = vsub_f32(v64, v52);
      float v88 = (float)(1.0 - v52.f32[1]) - v53.f32[1];
      int8x8_t v89 = (int8x8_t)v67;
      float v99 = v88;
      int32x2_t v91 = (int32x2_t)vsub_f32(v64, v53);
      int8x8_t v92 = (int8x8_t)v65;
      *(float32x2_t *)v70.i8 = v65;
      float32x2_t v90 = v66;
      v70.u64[1] = (unint64_t)v66;
      *(float32x2_t *)v71.i8 = v67;
      v71.u64[1] = (unint64_t)v91;
      int32x4_t v72 = vuzp1q_s32(v70, v71);
      v72.i32[2] = v67.i32[1];
      int32x4_t v100 = v72;
      float32x2_t v93 = vadd_f32(v57, v56);
      int8x8_t v94 = (int8x8_t)vsub_f32(v57, v56);
      *(float32x2_t *)v72.i8 = v93;
      v72.u64[1] = (unint64_t)v68;
      *(int8x8_t *)v71.i8 = v94;
      float v87 = v69.f32[0];
      v71.u64[1] = (unint64_t)v69;
      int32x4_t v73 = vuzp1q_s32(v72, v71);
      int8x8_t v95 = (int8x8_t)v68;
      v73.i32[1] = v68.i32[1];
      int32x4_t v101 = v73;
      float32x2_t v74 = *(float32x2_t *)(a3 + 16);
      float32x2_t v102 = v74;
      float v75 = *(float *)(a3 + 24);
      float v103 = v75;
      uint64_t v104 = *(void *)(a2 + 4);
      int v105 = *(_DWORD *)(a2 + 12);
      uint64_t result = (float32x2_t *)physx::Gu::distancePointBoxSquared((float *)result, (float *)&v102, (uint64_t)&v104, &v99, (uint64_t)&v97);
      if (a4 && v76 != 0.0)
      {
        float32x2_t v77 = (float32x2_t)vdup_lane_s32(v91, 0);
        v77.f32[0] = v88;
        float32_t v78 = v75 + (float)(vadd_f32(vmul_f32(v90, v97), vmul_lane_f32(v93, v97, 1)).f32[0] + (float)(v87 * v98));
        *a4 = vadd_f32(v74, vadd_f32(vadd_f32(vmul_f32((float32x2_t)vext_s8(v89, v92, 4uLL), (float32x2_t)vrev64_s32((int32x2_t)v97)), vmul_f32(v77, v97)), vmul_n_f32((float32x2_t)vext_s8(v95, v94, 4uLL), v98)));
        a4[1].f32[0] = v78;
      }
      break;
    case 4:
      int v96 = 0;
      uint64_t result = (float32x2_t *)pointConvexDistance((uint64_t)&v99, (uint64_t)&v97, &v96, (uint64_t)result, *(void *)(a2 + 32), (_OWORD *)(a2 + 4), (float *)a3, a5, a6, a7, a8);
      if (a4 && (result & 1) == 0)
      {
        *a4 = v97;
        a4[1].f32[0] = v98;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL pointConvexDistance(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _OWORD *a6, float *a7, double a8, double a9, double a10, int32x4_t a11)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  float v16 = *(float *)a4;
  a11.i32[0] = *(_DWORD *)(a4 + 4);
  LODWORD(a9) = *(_DWORD *)(a4 + 8);
  float32x4_t v17 = *(float32x4_t *)a6;
  float32x4_t v18 = *(float32x4_t *)a6;
  v18.i32[3] = 0;
  float32x4_t v19 = *(float32x4_t *)((char *)a6 + 12);
  uint64_t v20 = *(void *)(a5 + 72) + 20 * *(unsigned __int8 *)(a5 + 71);
  BOOL v21 = COERCE_FLOAT(*((void *)a6 + 1)) == 1.0;
  if (COERCE_FLOAT(*a6) != 1.0 || COERCE_FLOAT(HIDWORD(*(void *)a6)) != 1.0) {
    BOOL v21 = 0;
  }
  char v156 = 0;
  float32x4_t v154 = 0u;
  long long v155 = 0u;
  uint64_t v163 = a5 + 32;
  uint64_t v165 = v20;
  v23.i64[0] = *(void *)(a5 + 92);
  v23.i64[1] = *(unsigned int *)(a5 + 100);
  int32x4_t v24 = (int32x4_t)vmulq_f32(v18, v23);
  char v166 = *(unsigned char *)(a5 + 70);
  *(float32x2_t *)v24.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v24, 2), *(float32x2_t *)v24.i8);
  *(float *)v24.i32 = vpmin_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8).f32[0];
  *(float32x2_t *)&long long v155 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v24.i32);
  *((float *)&v155 + 2) = 0.025 * *(float *)v24.i32;
  __asm { FMOV            V0.2S, #1.0 }
  if (v21)
  {
    long long v157 = xmmword_23435FD50;
    long long v158 = xmmword_23435FD60;
    long long v159 = xmmword_23435FD80;
    long long v160 = xmmword_23435FD50;
    long long v161 = xmmword_23435FD60;
    long long v162 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v29 = vrecpeq_f32(v18);
    int v30 = 4;
    do
    {
      float32x4_t v29 = vmulq_f32(v29, vrecpsq_f32(v29, v18));
      --v30;
    }
    while (v30);
    *(int32x2_t *)v31.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
    v31.i64[1] = v31.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v31, v18)), (int8x8_t)_D0).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
      float32x2_t v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
      float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      float32x4_t v41 = vaddq_f32(v19, v19);
      float32x2_t v42 = vmul_lane_f32(v38, *(float32x2_t *)v41.f32, 1);
      float32x2_t v43 = vmul_laneq_f32(v39, v41, 2);
      float32x2_t v44 = vmul_n_f32(v38, v41.f32[0]);
      float32x2_t v45 = vmul_n_f32(v39, v41.f32[0]);
      float32x2_t v46 = vmul_n_f32(v40, v41.f32[0]);
      float32x2_t v47 = vmul_lane_f32(v39, *(float32x2_t *)v41.f32, 1);
      float32x2_t v48 = vmul_lane_f32(v40, *(float32x2_t *)v41.f32, 1);
      float32x2_t v49 = vmul_laneq_f32(v40, v41, 2);
      *(float32x2_t *)v41.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v41.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v42), v43), (int8x8_t)vadd_f32(v44, v49), 4uLL);
      v50.i64[1] = vsub_f32(v45, v48).u32[0];
      int32x2_t v51 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v44, v49), (int8x8_t)vsub_f32(*(float32x2_t *)v41.f32, v43), 4uLL);
      int8x8_t v52 = (int8x8_t)vadd_f32(v45, v48);
      *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x8_t)v51, 4uLL);
      int8x8_t v54 = (int8x8_t)vdup_lane_s32(v51, 1);
      *(int32x2_t *)v55.f32 = v51;
      v55.i64[1] = vadd_f32(v47, v46).u32[0];
      *(int8x8_t *)v56.f32 = vext_s8(v52, (int8x8_t)vsub_f32(v47, v46), 4uLL);
      *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v50.f32, v54, 4uLL);
      v56.i64[1] = vsub_f32(*(float32x2_t *)v41.f32, v42).u32[0];
      v53.i64[1] = vdup_lane_s32(*(int32x2_t *)v56.f32, 0).u32[0];
      v57.i64[1] = vdup_lane_s32(*(int32x2_t *)v56.f32, 1).u32[0];
      *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v50.u32[2], 0), *(int8x8_t *)&v55.u32[2], 4uLL);
      v58.i64[1] = vdup_lane_s32(*(int32x2_t *)&v56.u32[2], 0).u32[0];
      float32x4_t v59 = vmulq_n_f32(v53, v17.f32[0]);
      v59.i32[3] = 0;
      float32x4_t v60 = vmulq_lane_f32(v57, *(float32x2_t *)v17.f32, 1);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_laneq_f32(v58, v17, 2);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_n_f32(v59, v50.f32[0]);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_lane_f32(v60, *(float32x2_t *)v50.f32, 1);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_laneq_f32(v61, v50, 2);
      v64.i32[3] = 0;
      float32x4_t v32 = vaddq_f32(v64, vaddq_f32(v62, v63));
      float32x4_t v65 = vmulq_n_f32(v59, v55.f32[0]);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_lane_f32(v60, *(float32x2_t *)v55.f32, 1);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_laneq_f32(v61, v55, 2);
      v67.i32[3] = 0;
      float32x4_t v68 = vaddq_f32(v65, v66);
      float32x4_t v69 = vmulq_n_f32(v59, v56.f32[0]);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_lane_f32(v60, *(float32x2_t *)v56.f32, 1);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_laneq_f32(v61, v56, 2);
      v71.i32[3] = 0;
      float32x4_t v33 = vaddq_f32(v67, v68);
      float32x4_t v34 = vaddq_f32(v71, vaddq_f32(v69, v70));
      long long v157 = (__int128)v32;
      long long v158 = (__int128)v33;
      long long v159 = (__int128)v34;
      float32x4_t v72 = vmulq_n_f32(v53, v29.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v57, *(float32x2_t *)v29.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_laneq_f32(v58, v29, 2);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_n_f32(v72, v50.f32[0]);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_lane_f32(v73, *(float32x2_t *)v50.f32, 1);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_laneq_f32(v74, v50, 2);
      v77.i32[3] = 0;
      float32x4_t v35 = vaddq_f32(v77, vaddq_f32(v75, v76));
      float32x4_t v78 = vmulq_n_f32(v72, v55.f32[0]);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_lane_f32(v73, *(float32x2_t *)v55.f32, 1);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_laneq_f32(v74, v55, 2);
      v80.i32[3] = 0;
      float32x4_t v11 = vmulq_n_f32(v72, v56.f32[0]);
      v11.i32[3] = 0;
      float32x4_t v81 = vmulq_lane_f32(v73, *(float32x2_t *)v56.f32, 1);
      v81.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(v80, vaddq_f32(v78, v79));
      float32x4_t v82 = vmulq_laneq_f32(v74, v56, 2);
      v82.i32[3] = 0;
      float32x4_t v37 = vaddq_f32(v82, vaddq_f32(v11, v81));
    }
    else
    {
      v29.i32[3] = 0;
      float32x4_t v32 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD50);
      float32x4_t v33 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD60);
      v11.i32[1] = 0;
      float32x4_t v34 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD80);
      long long v157 = (__int128)v32;
      long long v158 = (__int128)v33;
      long long v159 = (__int128)v34;
      float32x4_t v35 = vmulq_f32(v29, (float32x4_t)xmmword_23435FD50);
      float32x4_t v36 = vmulq_f32(v29, (float32x4_t)xmmword_23435FD60);
      float32x4_t v37 = vmulq_f32(v29, (float32x4_t)xmmword_23435FD80);
    }
    long long v160 = (__int128)v35;
    long long v161 = (__int128)v36;
    long long v162 = (__int128)v37;
    float32x4_t v83 = vmulq_f32(v32, (float32x4_t)0);
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_f32(v33, (float32x4_t)0);
    v84.i32[3] = 0;
    float32x4_t v85 = vmulq_f32(v34, (float32x4_t)0);
    v85.i32[3] = 0;
    float32x4_t v154 = vaddq_f32(v85, vaddq_f32(v84, v83));
  }
  int8x16_t v145 = 0u;
  int8x16_t v146 = 0u;
  float32x4_t v144 = 0u;
  float32x2_t v143 = 0;
  uint64_t v164 = *(void *)(a5 + 80);
  float v86 = a7[1];
  float v87 = a7[2];
  float v88 = a7[3];
  float v89 = (float)(v16 - a7[4]) + (float)(v16 - a7[4]);
  *(float *)a11.i32 = (float)(*(float *)a11.i32 - a7[5]) + (float)(*(float *)a11.i32 - a7[5]);
  *(float *)&a9 = (float)(*(float *)&a9 - a7[6]) + (float)(*(float *)&a9 - a7[6]);
  float v90 = (float)(v88 * v88) + -0.5;
  v11.f32[0] = (float)((float)-(float)(v86 * *(float *)a11.i32) - (float)(*a7 * v89)) - (float)(v87 * *(float *)&a9);
  *(float *)&unsigned int v91 = (float)((float)(v88 * (float)((float)(v87 * *(float *)a11.i32) - (float)(v86 * *(float *)&a9)))
                         + (float)(v89 * v90))
                 - (float)(*a7 * v11.f32[0]);
  *(float *)&unsigned int v92 = (float)((float)(v88 * (float)((float)(*a7 * *(float *)&a9) - (float)(v87 * v89)))
                         + (float)(*(float *)a11.i32 * v90))
                 - (float)(v86 * v11.f32[0]);
  *(float *)&a9 = (float)((float)(v88 * (float)((float)(v86 * v89) - (float)(*a7 * *(float *)a11.i32)))
                        + (float)(*(float *)&a9 * v90))
                - (float)(v87 * v11.f32[0]);
  v93.i32[1] = 0x80000000;
  *(float *)a11.i32 = (float)((float)(v86 * -0.0) - (float)(*a7 - (float)(v88 * 0.0))) + (float)(v87 * 0.0);
  v11.f32[0] = (float)((float)(v87 * -0.0) - (float)(v86 - (float)(v88 * 0.0))) + (float)(*a7 * 0.0);
  *(float *)v93.i32 = (float)((float)(*a7 * -0.0) - (float)(v87 - (float)(v88 * 0.0))) + (float)(v86 * 0.0);
  v94.i64[0] = __PAIR64__(v92, v91);
  v94.i64[1] = LODWORD(a9);
  *(float *)&a9 = (float)((float)((float)(*a7 * 0.0) + v88) + (float)(v86 * 0.0)) + (float)(v87 * 0.0);
  float32x2_t v95 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
  float32x2_t v96 = (float32x2_t)vdup_lane_s32(v93, 0);
  float32x2_t v97 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  float v98 = *(float *)a11.i32 + *(float *)a11.i32;
  float v99 = v11.f32[0] + v11.f32[0];
  float v100 = *(float *)v93.i32 + *(float *)v93.i32;
  *(float *)a11.i32 = *(float *)a11.i32 * (float)(*(float *)a11.i32 + *(float *)a11.i32);
  float32x2_t v101 = vmul_n_f32(v95, v11.f32[0] + v11.f32[0]);
  float32x2_t v102 = vmul_n_f32(v96, v100);
  float32x2_t v103 = vmul_n_f32(v95, v98);
  float32x2_t v104 = vmul_n_f32(v96, v98);
  float32x2_t v105 = vmul_n_f32(v97, v98);
  float32x2_t v106 = vmul_n_f32(v96, v99);
  float32x2_t v107 = vmul_n_f32(v97, v99);
  float32x2_t v108 = vmul_n_f32(v97, v100);
  *(float32x2_t *)a11.i8 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a11.i8, 0));
  *(int8x8_t *)&long long v109 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v101), v102), (int8x8_t)vadd_f32(v103, v108), 4uLL);
  *((void *)&v109 + 1) = vsub_f32(v104, v107).u32[0];
  *(int8x8_t *)&long long v110 = vext_s8((int8x8_t)vsub_f32(v103, v108), (int8x8_t)vsub_f32(*(float32x2_t *)a11.i8, v102), 4uLL);
  *((void *)&v110 + 1) = vadd_f32(v106, v105).u32[0];
  long long v139 = v109;
  long long v140 = v110;
  *(float32x2_t *)&long long v110 = vsub_f32(v106, v105);
  *(void *)&double v111 = vsub_f32(*(float32x2_t *)a11.i8, v101).u32[0];
  *(int8x8_t *)&long long v109 = vext_s8((int8x8_t)vadd_f32(v104, v107), *(int8x8_t *)&v110, 4uLL);
  *((void *)&v109 + 1) = LODWORD(v111);
  long long v141 = v109;
  float32x4_t v142 = v94;
  float32x4_t v147 = v94;
  uint64_t v153 = 0;
  float32x4_t v151 = v94;
  float32x4_t v152 = v94;
  uint64_t v148 = 0;
  uint64_t v149 = 0x400000000;
  char v150 = 1;
  v138[1] = &v147;
  v137[1] = &v154;
  v138[0] = &unk_26E7287F0;
  v137[0] = &unk_26E728850;
  double v136 = COERCE_DOUBLE(vdup_n_s32(0x7F7FFFFFu));
  int v112 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v138, (uint64_t)v137, &v142, &v136, &v146, &v145, &v144, &v143, v136, *(double *)&v110, v111, a11);
  if (v112 == 2)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v113 = v144.i64[0];
    *a3 = vmul_f32(v143, v143).u32[0];
    __int32 v114 = v144.i32[2];
    *(void *)a1 = v113;
    *(_DWORD *)(a1 + 8) = v114;
    __int32 v115 = v145.i32[2];
    *(void *)a2 = v145.i64[0];
    *(_DWORD *)(a2 + 8) = v115;
    float v116 = *(float *)a1 + *(float *)a1;
    *(float *)&uint64_t v113 = *(float *)(a1 + 4) + *(float *)(a1 + 4);
    float v117 = *(float *)(a1 + 8) + *(float *)(a1 + 8);
    float v119 = a7[2];
    float v118 = a7[3];
    float v120 = (float)(v118 * v118) + -0.5;
    float v121 = *a7;
    float v122 = a7[1];
    float v123 = (float)((float)(*(float *)&v113 * v122) + (float)(*a7 * v116)) + (float)(v119 * v117);
    float v124 = (float)((float)(v118 * (float)((float)(v122 * v117) - (float)(v119 * *(float *)&v113))) + (float)(v116 * v120))
         + (float)(*a7 * v123);
    float v125 = (float)((float)(v118 * (float)((float)(v119 * v116) - (float)(*a7 * v117))) + (float)(*(float *)&v113 * v120))
         + (float)(v122 * v123);
    float v126 = (float)((float)(v118 * (float)((float)(*a7 * *(float *)&v113) - (float)(v122 * v116))) + (float)(v117 * v120))
         + (float)(v119 * v123);
    *(float *)a1 = v124;
    *(float *)(a1 + 4) = v125;
    *(float *)(a1 + 8) = v126;
    float v127 = *(float *)a2 + *(float *)a2;
    *(float *)&uint64_t v113 = *(float *)(a2 + 4) + *(float *)(a2 + 4);
    float v128 = *(float *)(a2 + 8) + *(float *)(a2 + 8);
    float v129 = (float)((float)(v122 * *(float *)&v113) + (float)(v121 * v127)) + (float)(v119 * v128);
    float v130 = (float)((float)(v118 * (float)((float)(v122 * v128) - (float)(v119 * *(float *)&v113))) + (float)(v127 * v120))
         + (float)(v121 * v129);
    float v131 = (float)((float)(v118 * (float)((float)(v119 * v127) - (float)(v121 * v128))) + (float)(*(float *)&v113 * v120))
         + (float)(v122 * v129);
    float v132 = (float)((float)(v118 * (float)((float)(v121 * *(float *)&v113) - (float)(v122 * v127))) + (float)(v128 * v120))
         + (float)(v119 * v129);
    float v133 = a7[5] + v131;
    float v134 = a7[6] + v132;
    *(float *)a2 = a7[4] + v130;
    *(float *)(a2 + 4) = v133;
    *(float *)(a2 + 8) = v134;
  }
  return v112 == 2;
}

uint64_t physx::PxGeometryQuery::computePenetration(float32x2_t *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v7 = *a3;
  uint64_t v8 = *a5;
  if ((int)v7 <= (int)v8)
  {
    float32x4_t v11 = *(&gGeomMTDMethodTable[7 * (int)v7] + v8);
    return v11();
  }
  else
  {
    uint64_t result = ((uint64_t (*)(float32x2_t *, uint64_t, int *, uint64_t, int *, uint64_t))*(&gGeomMTDMethodTable[7 * (int)v8]
                                                                                              + v7))(a1, a2, a5, a6, a3, a4);
    if (result)
    {
      float32_t v10 = -a1[1].f32[0];
      *a1 = vneg_f32(*a1);
      a1[1].f32[0] = v10;
      return 1;
    }
  }
  return result;
}

__n128 physx::Gu::GeometryUnion::set(uint64_t a1, uint64_t *a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      *(void *)a1 = *a2;
      *(_DWORD *)(a1 + 8) = 0;
      break;
    case 1:
      *(_DWORD *)a1 = 1;
      break;
    case 2:
      uint64_t v3 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a1 = v3;
      break;
    case 3:
      *(_DWORD *)a1 = 3;
      result.n128_u64[0] = *(uint64_t *)((char *)a2 + 4);
      *(void *)(a1 + 4) = result.n128_u64[0];
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      *(_DWORD *)(a1 + 12) = result.n128_u32[0];
      break;
    case 4:
      *(_DWORD *)a1 = 4;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)((char *)a2 + 4);
      *(void *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = *(uint64_t *)((char *)a2 + 20);
      *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
      uint64_t v5 = (uint64_t *)a2[4];
      *(void *)(a1 + 32) = v5;
      *(unsigned char *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = *((unsigned char *)a2 + 40);
      __int16 v6 = *(_WORD *)((char *)a2 + 41);
      *(unsigned char *)(a1 + 43) = *((unsigned char *)a2 + 43);
      *(_WORD *)(a1 + 41) = v6;
      uint64_t v7 = *v5;
      *(void *)(a1 + 48) = v5 + 4;
      *(unsigned char *)(a1 + 56) = (*(uint64_t (**)(void))(v7 + 120))();
      break;
    case 5:
      *(_DWORD *)a1 = 5;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)((char *)a2 + 4);
      result.n128_u64[0] = *(uint64_t *)((char *)a2 + 20);
      *(void *)(a1 + 2physx::Sq::AABBTree::release(this, 0) = result.n128_u64[0];
      result.n128_u32[0] = *((_DWORD *)a2 + 7);
      *(_DWORD *)(a1 + 28) = result.n128_u32[0];
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v8 = *(uint64_t *)((char *)a2 + 33);
      *(void *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = a2[5];
      *(void *)(a1 + 33) = v8;
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(v9 + 96);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0xCDCDCDCDCDCD0000;
      break;
    case 6:
      *(_DWORD *)a1 = 6;
      __n128 result = *(__n128 *)(a2 + 1);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *(__n128 *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
      __int16 v11 = *(_WORD *)((char *)a2 + 29);
      *(unsigned char *)(a1 + 31) = *((unsigned char *)a2 + 31);
      *(_WORD *)(a1 + 29) = v11;
      *(void *)(a1 + 32) = *(void *)(a1 + 8) + 32;
      *(void *)(a1 + 4physx::Sq::AABBTree::release(this, 0) = 0;
      *(void *)(a1 + 48) = 0xCDCDCDCDCDCD0000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Gu::computeBoundsAroundVertices(uint64_t result, int a2, _OWORD *a3)
{
  if (a2)
  {
    int v3 = a2 - 1;
    uint64_t v4 = (char *)a3 + 12 * (a2 - 1);
    v5.i64[0] = *(void *)v4;
    v5.i64[1] = *((unsigned int *)v4 + 2);
    float32x4_t v6 = v5;
    if (a2 != 1)
    {
      do
      {
        float32x4_t v7 = *(float32x4_t *)a3;
        a3 = (_OWORD *)((char *)a3 + 12);
        float32x4_t v6 = vminq_f32(v6, v7);
        float32x4_t v5 = vmaxq_f32(v5, v7);
        --v3;
      }
      while (v3);
    }
    v6.i32[3] = v5.i32[0];
    *(float32x4_t *)__n128 result = v6;
    int32x2_t v8 = (int32x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL).u64[0];
  }
  else
  {
    *(_OWORD *)__n128 result = xmmword_23441FAD0;
    int32x2_t v8 = vdup_n_s32(0xFE7FFFFF);
  }
  *(int32x2_t *)(result + 16) = v8;
  return result;
}

physx::GuMeshFactory *physx::GuMeshFactory::GuMeshFactory(physx::GuMeshFactory *this)
{
  *(void *)this = &unk_26E728570;
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    int v3 = "<allocation names disabled>";
  }
  uint64_t v4 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 72, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *((void *)this + 1) = v4;
  physx::shdfnd::MutexImpl::MutexImpl(v4);
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 14) = 1061158912;
  *(void *)((char *)this + 6physx::Sq::AABBTree::release(this, 0) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 17) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 16, 0x40u, 0);
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 28) = 1061158912;
  *(void *)((char *)this + 116) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 31) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 72, 0x40u, 0);
  *((void *)this + 2physx::Sq::AABBTree::release(this, 0) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 42) = 1061158912;
  *(void *)((char *)this + 172) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 45) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 128, 0x40u, 0);
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 20physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 56) = 1061158912;
  *(void *)((char *)this + 228) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 59) = 0;
  physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 184, 0x40u, 0);
  *((void *)this + 3physx::Sq::AABBTree::release(this, 0) = 0;
  *((void *)this + 31) = 0;
  return this;
}

void physx::GuMeshFactory::~GuMeshFactory(physx::GuMeshFactory *this)
{
  *(void *)this = &unk_26E728570;
  int v2 = *((_DWORD *)this + 63);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 30) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 23)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 16)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 9)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 1);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::GuMeshFactory::~GuMeshFactory(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::GuMeshFactory::release(physx::GuMeshFactory *this)
{
  while (*((_DWORD *)this + 17))
    (****((void (*****)(void))this + 3))(**((void **)this + 3));
  while (*((_DWORD *)this + 31))
    (****((void (*****)(void))this + 10))(**((void **)this + 10));
  while (*((_DWORD *)this + 45))
    (****((void (*****)(void))this + 17))(**((void **)this + 17));
  while (*((_DWORD *)this + 59))
    (****((void (*****)(void))this + 24))(**((void **)this + 24));
  int v2 = *(uint64_t (**)(physx::GuMeshFactory *))(*(void *)this + 8);
  return v2(this);
}

uint64_t physx::GuMeshFactory::addTriangleMesh(uint64_t this, physx::Gu::TriangleMesh *a2, int a3, int8x8_t a4)
{
  float32x4_t v6 = a2;
  if (a2)
  {
    uint64_t v4 = this;
    float32x4_t v5 = (int32x2_t *)(this + 16);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7) {
        *(void *)this = v6;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
      }
    }
    else
    {
      char v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 16), &v6, &v8, a4);
      if (!v8) {
        *(void *)this = v6;
      }
    }
  }
  return this;
}

physx::Gu::BV4TriangleMesh *physx::GuMeshFactory::createTriangleMesh(physx::GuMeshFactory *this, physx::Gu::TriangleMeshData *a2)
{
  int v4 = *((_DWORD *)a2 + 2);
  if (v4 == 1)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      __int16 v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV4TriangleMesh>::getName() [T = physx::Gu:"
    }
            ":BV4TriangleMesh]";
    else {
      __int16 v11 = "<allocation names disabled>";
    }
    char v7 = (physx::Gu::BV4TriangleMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 280, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 119);
    if (!physx::Gu::BV4TriangleMesh::BV4TriangleMesh(v7, this, a2)) {
      return v7;
    }
LABEL_12:
    physx::GuMeshFactory::addTriangleMesh((uint64_t)this, v7, 1, v8);
    return v7;
  }
  if (v4) {
    return 0;
  }
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeTriangleMesh>::getName() [T = physx::Gu::"
  }
         "RTreeTriangleMesh]";
  else {
    float32x4_t v6 = "<allocation names disabled>";
  }
  char v7 = (physx::Gu::BV4TriangleMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 256, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 115);
  int8x8_t v8 = (int8x8_t)physx::Gu::RTreeTriangleMesh::RTreeTriangleMesh(v7, this, a2).n128_u64[0];
  if (v9) {
    goto LABEL_12;
  }
  return v7;
}

physx::Gu::BV4TriangleMesh *physx::GuMeshFactory::createTriangleMesh(physx::GuMeshFactory *a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  unsigned int v115 = 0;
  BOOL v114 = 0;
  if (!physx::readHeader(0x4Du, 0x45u, 0x53u, 0x48u, &v115, &v114, a2)) {
    return 0;
  }
  uint64_t v7 = v115;
  if (v115 <= 0xD)
  {
    if (v115 <= 9)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 152, "Loading triangle mesh failed: Deprecated mesh cooking format. Please recook your mesh in a new cooking format.", v4, v5, v6, v104);
      return 0;
    }
    int v8 = v114;
    int v9 = v114;
    char Dword = physx::readDword(v9, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    if (v7 <= 0xC) {
      v12.n128_f32[0] = physx::readFloat(v8 != 0, (void (***)(void, float *, uint64_t))a2);
    }
    goto LABEL_10;
  }
  int v8 = v114;
  int v9 = v114;
  int v10 = physx::readDword(v114, (void (***)(void, unsigned __int32 *, uint64_t))a2);
  char Dword = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
  if (v10 != 1)
  {
    if (v10) {
      return 0;
    }
LABEL_10:
    float32x2_t v106 = a1;
    uint64_t v13 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, v12))
    {
      float v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeTriangleData>::getName() [T = physx::G"
            "u::RTreeTriangleData]";
    }
    else
    {
      float v14 = "<allocation names disabled>";
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v13 + 24) + 16))(v13 + 24, 240, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 170);
    int v107 = 0;
    *(unsigned char *)(v15 + 12) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(_OWORD *)(v15 + 32) = xmmword_23441FAD0;
    *(int32x2_t *)(v15 + 48) = vdup_n_s32(0xFE7FFFFF);
    *(_DWORD *)(v15 + 56) = 0;
    *(_OWORD *)(v15 + 112) = 0u;
    *(_OWORD *)(v15 + 128) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_OWORD *)(v15 + 8physx::Sq::AABBTree::release(this, 0) = 0u;
    *(_OWORD *)(v15 + 92) = 0u;
    *(void *)uint64_t v15 = &unk_26E7285E8;
    *(_DWORD *)(v15 + 228) = 0;
    *(void *)(v15 + 232) = 0;
    *(void *)(v15 + 216) = 0;
    *(_DWORD *)(v15 + 208) = 4;
    *(_DWORD *)(v15 + 8) = 0;
    int v110 = 1;
    goto LABEL_18;
  }
  float32x2_t v106 = a1;
  uint64_t v16 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v17 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV4TriangleData>::getName() [T = physx::Gu::BV4TriangleData]";
  }
  else {
    float32x4_t v17 = "<allocation names disabled>";
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v16 + 24) + 16))(v16 + 24, 264, v17, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 172);
  int v110 = 0;
  *(unsigned char *)(v15 + 12) = 0;
  *(_DWORD *)(v15 + 16) = 0;
  *(_OWORD *)(v15 + 32) = xmmword_23441FAD0;
  *(void *)(v15 + 24) = 0;
  *(int32x2_t *)(v15 + 48) = vdup_n_s32(0xFE7FFFFF);
  *(_DWORD *)(v15 + 56) = 0;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 8physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)(v15 + 92) = 0u;
  *(void *)uint64_t v15 = &unk_26E728690;
  *(_DWORD *)(v15 + 144) = 0;
  *(void *)(v15 + 152) = 0;
  *(void *)(v15 + 16physx::Sq::AABBTree::release(this, 0) = 0;
  *(_DWORD *)(v15 + 168) = 0;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_OWORD *)(v15 + 24physx::Sq::AABBTree::release(this, 0) = 0u;
  *(void *)(v15 + 254) = 0;
  *(_OWORD *)(v15 + 204) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  int v107 = 1;
  *(_DWORD *)(v15 + 8) = 1;
LABEL_18:
  int v18 = physx::readDword(v9, (void (***)(void, unsigned __int32 *, uint64_t))a2);
  uint64_t Vertices = physx::Gu::MeshDataBase::allocateVertices((physx::Gu::MeshDataBase *)v15, v18);
  unsigned int v105 = physx::readDword(v9, (void (***)(void, unsigned __int32 *, uint64_t))a2);
  uint64_t Triangles = physx::Gu::TriangleMeshData::allocateTriangles((physx::Gu::TriangleMeshData *)v15, v105, (Dword & 0xC) == 0, Dword & 0x20);
  (**a2)(a2, Vertices, (12 * *(_DWORD *)(v15 + 16)));
  if (v8 && *(_DWORD *)(v15 + 16))
  {
    unint64_t v20 = 0;
    BOOL v21 = (uint8x8_t *)(Vertices + 8);
    do
    {
      uint8x8_t v22 = (uint8x8_t)vrev32_s8((int8x8_t)v21[-1]);
      v21[-1] = v22;
      v22.i32[0] = v21->i32[0];
      int16x8_t v23 = (int16x8_t)vmovl_u8(v22);
      *(int16x4_t *)v23.i8 = vrev64_s16(*(int16x4_t *)v23.i8);
      v21->i32[0] = vmovn_s16(v23).u32[0];
      BOOL v21 = (uint8x8_t *)((char *)v21 + 12);
      ++v20;
    }
    while (v20 < *(unsigned int *)(v15 + 16));
  }
  int v24 = *(_DWORD *)(v15 + 104);
  unsigned int v108 = 3 * v24;
  if ((Dword & 4) != 0)
  {
    LOBYTE(v113) = 0;
    if ((*(unsigned char *)(v15 + 12) & 2) != 0)
    {
      if (v24)
      {
        if (v108 <= 1) {
          int v35 = 1;
        }
        else {
          int v35 = 3 * v24;
        }
        float32x4_t v36 = (_WORD *)Triangles;
        do
        {
          (**a2)(a2, (uint64_t)&v113, 1);
          *v36++ = v113;
          --v35;
        }
        while (v35);
      }
    }
    else if (v24)
    {
      if (v108 <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = 3 * v24;
      }
      float32x4_t v31 = (_DWORD *)Triangles;
      do
      {
        (**a2)(a2, (uint64_t)&v113, 1);
        *v31++ = v113;
        --v30;
      }
      while (v30);
    }
  }
  else if ((Dword & 8) != 0)
  {
    if ((*(unsigned char *)(v15 + 12) & 2) != 0)
    {
      (**a2)(a2, Triangles, (6 * v24));
      if (v24) {
        int v41 = v9;
      }
      else {
        int v41 = 0;
      }
      if (v41 == 1)
      {
        if (v108 <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v108;
        }
        float32x2_t v43 = (unsigned char *)(Triangles + 1);
        do
        {
          char v44 = *(v43 - 1);
          *(v43 - 1) = *v43;
          *float32x2_t v43 = v44;
          v43 += 2;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      LOWORD(v113) = 0;
      if (v24)
      {
        if (v108 <= 1) {
          int v32 = 1;
        }
        else {
          int v32 = 3 * v24;
        }
        float32x4_t v33 = (_DWORD *)Triangles;
        do
        {
          (**a2)(a2, (uint64_t)&v113, 2);
          if (v8)
          {
            char v34 = v113;
            LOBYTE(v113) = BYTE1(v113);
            BYTE1(v113) = v34;
          }
          *v33++ = (unsigned __int16)v113;
          --v32;
        }
        while (v32);
      }
    }
  }
  else if ((*(unsigned char *)(v15 + 12) & 2) != 0)
  {
    unsigned __int32 v113 = 0;
    if (v24)
    {
      if (v108 <= 1) {
        int v37 = 1;
      }
      else {
        int v37 = 3 * v24;
      }
      float32x2_t v38 = (_WORD *)Triangles;
      do
      {
        (**a2)(a2, (uint64_t)&v113, 4);
        if (v8)
        {
          v39.i32[0] = v113;
          int16x8_t v40 = (int16x8_t)vmovl_u8(v39);
          *(int16x4_t *)v40.i8 = vrev64_s16(*(int16x4_t *)v40.i8);
          unsigned __int32 v113 = vmovn_s16(v40).u32[0];
        }
        *v38++ = v113;
        --v37;
      }
      while (v37);
    }
  }
  else
  {
    (**a2)(a2, Triangles, (12 * v24));
    if (v24) {
      int v26 = v9;
    }
    else {
      int v26 = 0;
    }
    if (v26 == 1)
    {
      if (v108 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v108;
      }
      float v28 = (__int32 *)Triangles;
      do
      {
        v25.i32[0] = *v28;
        int16x8_t v29 = (int16x8_t)vmovl_u8(v25);
        *(int16x4_t *)v29.i8 = vrev64_s16(*(int16x4_t *)v29.i8);
        uint8x8_t v25 = (uint8x8_t)vmovn_s16(v29);
        *v28++ = v25.i32[0];
        --v27;
      }
      while (v27);
    }
  }
  if (Dword)
  {
    uint64_t v45 = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v113, 2 * *(unsigned int *)(v15 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 239);
    *(void *)(v15 + 128) = v45;
    (**a2)(a2, v45, (2 * *(_DWORD *)(v15 + 104)));
    if (v8)
    {
      if (*(_DWORD *)(v15 + 104))
      {
        unint64_t v46 = 0;
        float32x2_t v47 = (unsigned char *)(v45 + 1);
        do
        {
          char v48 = *(v47 - 1);
          *(v47 - 1) = *v47;
          *float32x2_t v47 = v48;
          v47 += 2;
          ++v46;
        }
        while (v46 < *(unsigned int *)(v15 + 104));
      }
    }
  }
  if ((Dword & 2) != 0)
  {
    float32x2_t v49 = (__int32 *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v113, 4 * *(unsigned int *)(v15 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 215);
    *(void *)(v15 + 64) = v49;
    uint64_t v50 = physx::readDword(v8 != 0, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    physx::readIndices(v50, *(_DWORD *)(v15 + 104), v49, (uint64_t (***)(void, unsigned __int8 *, uint64_t))a2, v8 != 0);
  }
  if ((Dword & 0x10) != 0)
  {
    uint64_t v51 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v113, 4 * (3 * *(_DWORD *)(v15 + 104)), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 206);
    *(void *)(v15 + 72) = v51;
    *(unsigned char *)(v15 + 12) |= 4u;
    (**a2)(a2, v51, (12 * *(_DWORD *)(v15 + 104)));
    if (v8)
    {
      if (*(_DWORD *)(v15 + 104))
      {
        unint64_t v53 = 0;
        do
        {
          v52.i32[0] = *(_DWORD *)(v51 + 4 * v53);
          int16x8_t v54 = (int16x8_t)vmovl_u8(v52);
          *(int16x4_t *)v54.i8 = vrev64_s16(*(int16x4_t *)v54.i8);
          uint8x8_t v52 = (uint8x8_t)vmovn_s16(v54);
          *(_DWORD *)(v51 + 4 * v53++) = v52.i32[0];
        }
        while (v53 < (3 * *(_DWORD *)(v15 + 104)));
      }
    }
  }
  if (v110)
  {
    if ((physx::Gu::RTree::load(v15 + 144, (void (***)(uint64_t (***)(void, uint64_t, uint64_t), unsigned int *, uint64_t))a2, v7, v8 != 0) & 1) == 0)
    {
      uint64_t v58 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v59 = "RTree binary image load error.";
      uint64_t v60 = 303;
LABEL_176:
      physx::shdfnd::Foundation::error(v58, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", v60, v59, v55, v56, v57, v104);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      return 0;
    }
  }
  else if (v107)
  {
    if ((physx::Gu::BV4Tree::load(v15 + 192, a2, v8 != 0) & 1) == 0)
    {
      uint64_t v58 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v59 = "BV4 binary image load error.";
      uint64_t v60 = 313;
      goto LABEL_176;
    }
    *(_DWORD *)(v15 + 144) = *(_DWORD *)(v15 + 16);
    *(_DWORD *)(v15 + 168) = v105;
    uint64_t v61 = Triangles;
    if ((*(unsigned char *)(v15 + 12) & 2) != 0) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = Triangles;
    }
    if ((*(unsigned char *)(v15 + 12) & 2) == 0) {
      uint64_t v61 = 0;
    }
    *(void *)(v15 + 176) = v62;
    *(void *)(v15 + 184) = v61;
    *(void *)(v15 + 152) = Vertices;
    *(void *)(v15 + 192) = v15 + 144;
  }
  int v63 = v114;
  *(float *)(v15 + 56) = physx::readFloat(v114, (void (***)(void, float *, uint64_t))a2);
  physx::readFloatBuffer((__int32 *)(v15 + 32), 6u, v63, (void (***)(void, __int32 *, void))a2);
  BOOL v64 = v114;
  uint64_t v65 = physx::readDword(v114, (void (***)(void, unsigned __int32 *, uint64_t))a2);
  if (v65)
  {
    uint64_t v66 = v65;
    uint64_t v67 = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v113, *(unsigned int *)(v15 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 247);
    *(void *)(v15 + 12physx::Sq::AABBTree::release(this, 0) = v67;
    (**a2)(a2, v67, v66);
  }
  if ((Dword & 0x20) != 0)
  {
    unsigned int v68 = v115;
    if (v115 > 0xE)
    {
      int v69 = 0;
      if ((Dword & 4) != 0)
      {
LABEL_106:
        LOBYTE(v113) = 0;
        if ((*(unsigned char *)(v15 + 12) & 2) != 0)
        {
          if (v24)
          {
            float32x4_t v76 = *(_WORD **)(v15 + 80);
            if (v108 <= 1) {
              int v77 = 1;
            }
            else {
              int v77 = 3 * v24;
            }
            do
            {
              (**a2)(a2, (uint64_t)&v113, 1);
              *v76++ = v113;
              --v77;
            }
            while (v77);
          }
        }
        else if (v24)
        {
          float32x4_t v70 = *(_DWORD **)(v15 + 80);
          if (v108 <= 1) {
            int v71 = 1;
          }
          else {
            int v71 = 3 * v24;
          }
          do
          {
            (**a2)(a2, (uint64_t)&v113, 1);
            *v70++ = v113;
            --v71;
          }
          while (v71);
        }
        goto LABEL_154;
      }
    }
    else
    {
      int v69 = physx::readDword(v64, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      if ((Dword & 4) != 0) {
        goto LABEL_106;
      }
    }
    if ((Dword & 8) != 0)
    {
      float32x4_t v78 = *(_DWORD **)(v15 + 80);
      if ((*(unsigned char *)(v15 + 12) & 2) != 0)
      {
        (**a2)(a2, *(void *)(v15 + 80), (6 * v24));
        if (v64 && v24)
        {
          if (v108 <= 1) {
            uint64_t v85 = 1;
          }
          else {
            uint64_t v85 = v108;
          }
          float v86 = (char *)v78 + 1;
          do
          {
            char v87 = *(v86 - 1);
            *(v86 - 1) = *v86;
            *float v86 = v87;
            v86 += 2;
            --v85;
          }
          while (v85);
        }
      }
      else
      {
        LOWORD(v113) = 0;
        if (v24)
        {
          if (v108 <= 1) {
            int v79 = 1;
          }
          else {
            int v79 = 3 * v24;
          }
          do
          {
            (**a2)(a2, (uint64_t)&v113, 2);
            if (v64)
            {
              char v80 = v113;
              LOBYTE(v113) = BYTE1(v113);
              BYTE1(v113) = v80;
            }
            *v78++ = (unsigned __int16)v113;
            --v79;
          }
          while (v79);
        }
      }
    }
    else if ((*(unsigned char *)(v15 + 12) & 2) != 0)
    {
      unsigned __int32 v113 = 0;
      if (v24)
      {
        float32x4_t v81 = *(_WORD **)(v15 + 80);
        if (v108 <= 1) {
          int v82 = 1;
        }
        else {
          int v82 = 3 * v24;
        }
        do
        {
          (**a2)(a2, (uint64_t)&v113, 4);
          if (v64)
          {
            v83.i32[0] = v113;
            int16x8_t v84 = (int16x8_t)vmovl_u8(v83);
            *(int16x4_t *)v84.i8 = vrev64_s16(*(int16x4_t *)v84.i8);
            unsigned __int32 v113 = vmovn_s16(v84).u32[0];
          }
          *v81++ = v113;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      float32x4_t v72 = *(__int32 **)(v15 + 80);
      (**a2)(a2, (uint64_t)v72, (12 * v24));
      if (v64 && v24)
      {
        if (v108 <= 1) {
          uint64_t v74 = 1;
        }
        else {
          uint64_t v74 = v108;
        }
        do
        {
          v73.i32[0] = *v72;
          int16x8_t v75 = (int16x8_t)vmovl_u8(v73);
          *(int16x4_t *)v75.i8 = vrev64_s16(*(int16x4_t *)v75.i8);
          uint8x8_t v73 = (uint8x8_t)vmovn_s16(v75);
          *v72++ = v73.i32[0];
          --v74;
        }
        while (v74);
      }
    }
LABEL_154:
    *(void *)(v15 + 88) = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v112, 4 * (4 * *(_DWORD *)(v15 + 104)), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 427);
    *(void *)(v15 + 96) = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v111, 4 * *(unsigned int *)(v15 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 428);
    (**a2)(a2, *(void *)(v15 + 88), (16 * *(_DWORD *)(v15 + 104)));
    if (v68 <= 0xE)
    {
      if (*(_DWORD *)(v15 + 16))
      {
        unsigned int v88 = 0;
        do
        {
          physx::readDword(v64, (void (***)(void, unsigned __int32 *, uint64_t))a2);
          ++v88;
          unsigned int v89 = *(_DWORD *)(v15 + 16);
        }
        while (v88 < v89);
        if (v89)
        {
          unsigned int v90 = 0;
          do
          {
            physx::readDword(v64, (void (***)(void, unsigned __int32 *, uint64_t))a2);
            ++v90;
          }
          while (v90 < *(_DWORD *)(v15 + 16));
        }
      }
      for (; v69; --v69)
        physx::readDword(v64, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    }
    (**a2)(a2, *(void *)(v15 + 96), (4 * *(_DWORD *)(v15 + 104)));
    if (v64 && (*(_DWORD *)(v15 + 104) & 0x3FFFFFFF) != 0)
    {
      unint64_t v92 = 0;
      do
      {
        uint64_t v93 = *(void *)(v15 + 80);
        v91.i32[0] = *(_DWORD *)(v93 + 4 * v92);
        int16x8_t v94 = (int16x8_t)vmovl_u8(v91);
        *(int16x4_t *)v94.i8 = vrev64_s16(*(int16x4_t *)v94.i8);
        uint8x8_t v91 = (uint8x8_t)vmovn_s16(v94);
        *(_DWORD *)(v93 + 4 * v92++) = v91.i32[0];
        int v95 = *(_DWORD *)(v15 + 104);
      }
      while (v92 < (4 * v95));
      if ((v95 & 0x3FFFFFFF) != 0)
      {
        unint64_t v96 = 0;
        do
        {
          uint64_t v97 = *(void *)(v15 + 88);
          v91.i32[0] = *(_DWORD *)(v97 + 4 * v96);
          int16x8_t v98 = (int16x8_t)vmovl_u8(v91);
          *(int16x4_t *)v98.i8 = vrev64_s16(*(int16x4_t *)v98.i8);
          uint8x8_t v91 = (uint8x8_t)vmovn_s16(v98);
          *(_DWORD *)(v97 + 4 * v96++) = v91.i32[0];
        }
        while (v96 < (4 * *(_DWORD *)(v15 + 104)));
      }
    }
    uint64_t v99 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v100 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Tree>::getName() [T = physx::Gu::BV32Tree]";
    }
    else {
      float v100 = "<allocation names disabled>";
    }
    uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v99 + 24)
                                                                                            + 16))(v99 + 24, 64, v100, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 455);
    *(void *)(v101 + 4physx::Sq::AABBTree::release(this, 0) = 0;
    *(void *)(v101 + 48) = 0;
    *(void *)(v101 + 32) = 0;
    *(unsigned char *)(v101 + 56) = 0;
    *(void *)(v101 + 8) = 0;
    *(void *)(v101 + 16) = 0;
    *(void *)uint64_t v101 = 0;
    *(_DWORD *)(v101 + 24) = 0;
    *(void *)(v15 + 136) = v101;
    if ((physx::Gu::BV32Tree::load(v101, (void (***)(void, float *, uint64_t))a2, v64) & 1) == 0)
    {
      uint64_t v58 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v59 = "BV32 binary image load error.";
      uint64_t v60 = 459;
      goto LABEL_176;
    }
  }
  TriangleMesh = physx::GuMeshFactory::createTriangleMesh(v106, (physx::Gu::TriangleMeshData *)v15);
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  return TriangleMesh;
}

uint64_t physx::GuMeshFactory::removeTriangleMesh(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t v6 = a2;
  uint64_t v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 16, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v4;
}

uint64_t physx::GuMeshFactory::getNbTriangleMeshes(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *((unsigned int *)this + 17);
  }
  pthread_mutex_lock(this[1]);
  uint64_t v2 = *((unsigned int *)this + 17);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[1]);
  }
  return v2;
}

uint64_t physx::GuMeshFactory::getTriangleMeshes(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 68) - a4) & ~((int)(*(_DWORD *)(a1 + 68) - a4) >> 31);
  if (v8 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v5)
  {
    int v9 = (uint64_t *)(*(void *)(a1 + 24) + 8 * a4);
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v5;
}

uint64_t physx::GuMeshFactory::addConvexMesh(uint64_t this, physx::Gu::ConvexMesh *a2, int a3, int8x8_t a4)
{
  uint64_t v6 = a2;
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = (int32x2_t *)(this + 72);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7) {
        *(void *)this = v6;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
      }
    }
    else
    {
      char v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 72), &v6, &v8, a4);
      if (!v8) {
        *(void *)this = v6;
      }
    }
  }
  return this;
}

physx::Gu::ConvexMesh *physx::GuMeshFactory::createConvexMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::ConvexMesh>::getName() [T = physx::Gu::ConvexMesh]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (physx::Gu::ConvexMesh *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 168, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 514);
  int8x8_t v7 = (int8x8_t)physx::Gu::ConvexMesh::ConvexMesh((uint64_t)v6, a1, a2).n128_u64[0];
  if (v8) {
    physx::GuMeshFactory::addConvexMesh(a1, v6, 1, v7);
  }
  return v6;
}

uint64_t physx::GuMeshFactory::createConvexMesh(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::ConvexMesh>::getName() [T = physx::Gu::ConvexMesh]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 168, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 524);
  physx::Gu::ConvexMesh::ConvexMesh((physx::Gu::ConvexMesh *)v6);
  if (v7)
  {
    *(void *)(v6 + 16physx::Sq::AABBTree::release(this, 0) = a1;
    if (physx::Gu::ConvexMesh::load(v6, a2))
    {
      physx::GuMeshFactory::addConvexMesh(a1, (physx::Gu::ConvexMesh *)v6, 1, v8);
    }
    else
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v6 + 24), 0xFFFFFFFF) == 1) {
        (*(void (**)(uint64_t))(*(void *)(v6 + 16) + 16))(v6 + 16);
      }
      return 0;
    }
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeConvexMesh(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t v6 = a2;
  uint64_t v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 72, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v4;
}

uint64_t physx::GuMeshFactory::getNbConvexMeshes(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *((unsigned int *)this + 31);
  }
  pthread_mutex_lock(this[1]);
  uint64_t v2 = *((unsigned int *)this + 31);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[1]);
  }
  return v2;
}

uint64_t physx::GuMeshFactory::getConvexMeshes(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 124) - a4) & ~((int)(*(_DWORD *)(a1 + 124) - a4) >> 31);
  if (v8 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v5)
  {
    int v9 = (uint64_t *)(*(void *)(a1 + 80) + 8 * a4);
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v5;
}

uint64_t physx::GuMeshFactory::addHeightField(uint64_t this, physx::Gu::HeightField *a2, int a3, int8x8_t a4)
{
  uint64_t v6 = a2;
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = (int32x2_t *)(this + 128);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7) {
        *(void *)this = v6;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
      }
    }
    else
    {
      char v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 128), &v6, &v8, a4);
      if (!v8) {
        *(void *)this = v6;
      }
    }
  }
  return this;
}

physx::Gu::HeightField *physx::GuMeshFactory::createHeightField(physx::GuMeshFactory *this, uint64_t a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (physx::Gu::HeightField *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 136, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 570);
  int8x8_t v7 = (int8x8_t)physx::Gu::HeightField::HeightField((uint64_t)v6, (uint64_t)this, a2).n128_u64[0];
  if (v8) {
    physx::GuMeshFactory::addHeightField((uint64_t)this, v6, 1, v7);
  }
  return v6;
}

uint64_t physx::GuMeshFactory::createHeightField(uint64_t a1, void (***a2)(void, unsigned __int32 *, uint64_t))
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 136, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 580);
  *(_DWORD *)(v6 + 8) = 196609;
  *(_DWORD *)(v6 + 24) = 1;
  *(void *)uint64_t v6 = &unk_26E729030;
  *(void *)(v6 + 16) = &unk_26E729100;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 12physx::Sq::AABBTree::release(this, 0) = 0;
  *(void *)(v6 + 128) = a1;
  *(_DWORD *)(v6 + 96) = 1;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 88) = 0;
  *(_WORD *)(v6 + 92) = 0;
  *(void *)(v6 + 8physx::Sq::AABBTree::release(this, 0) = 0;
  if (physx::Gu::HeightField::load(v6, a2))
  {
    physx::GuMeshFactory::addHeightField(a1, (physx::Gu::HeightField *)v6, 1, v7);
  }
  else
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v6 + 24), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v6 + 16) + 16))(v6 + 16);
    }
    return 0;
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeHeightField(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t v6 = a2;
  uint64_t v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 128, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v4;
}

uint64_t physx::GuMeshFactory::getNbHeightFields(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *((unsigned int *)this + 45);
  }
  pthread_mutex_lock(this[1]);
  uint64_t v2 = *((unsigned int *)this + 45);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[1]);
  }
  return v2;
}

uint64_t physx::GuMeshFactory::getHeightFields(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 180) - a4) & ~((int)(*(_DWORD *)(a1 + 180) - a4) >> 31);
  if (v8 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v5)
  {
    int v9 = (uint64_t *)(*(void *)(a1 + 136) + 8 * a4);
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v5;
}

uint64_t physx::GuMeshFactory::addFactoryListener(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    __n128 result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
  }
  uint64_t v5 = a2;
  uint64_t v4 = *(unsigned int *)(v3 + 248);
  if ((*(_DWORD *)(v3 + 252) & 0x7FFFFFFFu) <= v4)
  {
    __n128 result = physx::shdfnd::Array<physx::GuMeshFactoryListener *,physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>>::growAndPushBack(v3 + 240, &v5);
  }
  else
  {
    *(void *)(*(void *)(v3 + 240) + 8 * v4) = a2;
    *(_DWORD *)(v3 + 248) = v4 + 1;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 8));
  }
  return result;
}

uint64_t physx::GuMeshFactory::addBVHStructure(uint64_t this, physx::Gu::BVHStructure *a2, int a3, int8x8_t a4)
{
  uint64_t v6 = a2;
  if (a2)
  {
    uint64_t v4 = this;
    uint64_t v5 = (int32x2_t *)(this + 184);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v7 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v5, &v6, &v7, a4);
      if (!v7) {
        *(void *)this = v6;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 8));
      }
    }
    else
    {
      char v8 = 0;
      this = physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(this + 184), &v6, &v8, a4);
      if (!v8) {
        *(void *)this = v6;
      }
    }
  }
  return this;
}

uint64_t physx::GuMeshFactory::createBVHStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVHStructure>::getName() [T = physx::Gu::BVHStructure]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 80, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 658);
  *(_DWORD *)(v6 + 8) = 196625;
  *(_DWORD *)(v6 + 24) = 1;
  *(void *)uint64_t v6 = &unk_26E7288B0;
  *(void *)(v6 + 16) = &unk_26E728920;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 4physx::Sq::AABBTree::release(this, 0) = *(void *)a2;
  long long v7 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v6 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = v8;
  physx::GuMeshFactory::addBVHStructure(a1, (physx::Gu::BVHStructure *)v6, 1, *(int8x8_t *)&v7);
  return v6;
}

uint64_t physx::GuMeshFactory::createBVHStructure(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVHStructure>::getName() [T = physx::Gu::BVHStructure]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 80, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuMeshFactory.cpp", 668);
  *(_DWORD *)(v6 + 8) = 196625;
  *(_DWORD *)(v6 + 24) = 1;
  *(void *)uint64_t v6 = &unk_26E7288B0;
  *(void *)(v6 + 16) = &unk_26E728920;
  *(void *)(v6 + 32) = a1;
  *(_OWORD *)(v6 + 4physx::Sq::AABBTree::release(this, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(void *)(v6 + 72) = 0;
  if (physx::Gu::BVHStructure::load(v6, a2))
  {
    physx::GuMeshFactory::addBVHStructure(a1, (physx::Gu::BVHStructure *)v6, 1, v7);
  }
  else
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v6 + 24), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)(v6 + 16) + 16))(v6 + 16);
    }
    return 0;
  }
  return v6;
}

uint64_t physx::GuMeshFactory::removeBVHStructure(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t v6 = a2;
  uint64_t v4 = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 184, &v6);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v4;
}

uint64_t physx::GuMeshFactory::getNbBVHStructures(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *((unsigned int *)this + 59);
  }
  pthread_mutex_lock(this[1]);
  uint64_t v2 = *((unsigned int *)this + 59);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[1]);
  }
  return v2;
}

uint64_t physx::GuMeshFactory::getBVHStructures(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 236) - a4) & ~((int)(*(_DWORD *)(a1 + 236) - a4) >> 31);
  if (v8 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v5)
  {
    int v9 = (uint64_t *)(*(void *)(a1 + 192) + 8 * a4);
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return v5;
}

uint64_t physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, void *a4, int8x16_t *a5, int8x16_t *a6, float32x4_t *a7, void *a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v214 = *MEMORY[0x263EF8340];
  unsigned int v202 = 0;
  float32x4_t v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v201 = v17;
  float32x4_t v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  float32x2_t v20 = vrsqrte_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D9, (int8x8_t)v20));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x4_t v30 = vmulq_n_f32(v17, v28.f32[0]);
  v30.i32[3] = 0;
  uint64_t v31 = *(void *)(a1 + 8);
  int v32 = (const float *)(v31 + 20);
  float32x2_t v33 = vld1_dup_f32(v32);
  uint64_t v34 = *(void *)(a2 + 8);
  int v35 = (const float *)(v34 + 20);
  *(float32x2_t *)a12.i8 = vld1_dup_f32(v35);
  float32x2_t v36 = vmul_f32(vmin_f32(v33, *(float32x2_t *)a12.i8), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(int32x2_t *)a12.i8 = vdup_n_s32(0x358637BDu);
  int32x4_t v37 = vdupq_n_s32(-*(char *)(v31 + 32));
  float32x2_t v38 = vmax_f32(v36, *(float32x2_t *)a12.i8);
  int32x4_t v39 = vdupq_n_s32(-*(char *)(v34 + 32));
  int8x16_t v190 = (int8x16_t)v37;
  int8x16_t v191 = (int8x16_t)v39;
  v39.i32[0] = *(_DWORD *)(v31 + 16);
  a12.i32[0] = -*(char *)(v31 + 32);
  *(int32x2_t *)v39.i8 = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)a12.i8), 0);
  a12.i32[0] = *(_DWORD *)(v34 + 16);
  v37.i32[0] = -*(char *)(v34 + 32);
  *(float32x2_t *)a12.i8 = vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)a12.i8, *(int8x8_t *)v37.i8), 0));
  float32x2_t v195 = *(float32x2_t *)a12.i8;
  float v40 = COERCE_FLOAT(*a4) + *(float *)a12.i32;
  float32x2_t v41 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v42 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  a12.i32[0] = -1;
  int32x4_t v189 = a12;
  while (1)
  {
    float32x4_t v197 = v30;
    float32x4_t v200 = v17;
    float32x2_t v43 = v41;
    float32x4_t v194 = v17;
    float32x4_t v44 = vnegq_f32(v17);
    v44.i32[3] = 0;
    uint64_t v45 = *(float32x4_t **)(a1 + 8);
    float32x4_t v46 = v45[3];
    float32x4_t v47 = v45[4];
    float32x4_t v48 = vmulq_f32(v44, v46);
    v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
    float32x4_t v49 = vmulq_f32(v44, v47);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    float32x4_t v196 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32)), 0), (int8x16_t)v46, (int8x16_t)v47);
    *(double *)v50.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v201);
    float32x4_t v51 = v50;
    float32x4_t v17 = vsubq_f32(v196, v50);
    float32x4_t v52 = vmulq_f32(v197, v17);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
    if (v53.f32[0] > v40) {
      return 0;
    }
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v53, v195), (int8x8_t)vcgt_f32(v53, vmul_f32(v43, v42))), 0), *(int8x8_t *)v17.f32).u32[0] == -1)break; {
    uint64_t v54 = v202;
    }
    *(&v208 + v202) = v196;
    *(&v205 + v54) = v51;
    unsigned int v202 = v54 + 1;
    *(&v211 + v54) = v17;
    switch(v54)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v211, &v208, &v205, (int *)&v202);
        goto LABEL_48;
      case 2:
        float32x4_t v17 = v211;
        float32x4_t v63 = vsubq_f32(v212, v211);
        float32x4_t v64 = vsubq_f32(v213[0], v211);
        int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v63.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL), *(float32x2_t *)v64.f32);
        *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)v63.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
        v66.i32[1] = 0;
        unsigned int v202 = 3;
        float32x2_t v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
        float32x2_t v68 = vpadd_f32(v67, v67);
        if (v68.f32[0] > 0.00000011921)
        {
          if (v68.f32[0] == 0.0)
          {
            float32x4_t v17 = 0uLL;
          }
          else
          {
            *(int8x8_t *)&v65.u32[2] = v66;
            float32x2_t v69 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u64[0];
            float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 8uLL).u64[0];
            float32x2_t v71 = (float32x2_t)vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 4uLL).u64[0];
            float32x2_t v72 = (float32x2_t)vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL).u64[0];
            int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v212.f32, v71), v72, *(float32x2_t *)v213[0].f32);
            *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v213[0].f32), *(float32x2_t *)v212.f32, v70), 4uLL);
            v74.i64[1] = v73.u32[0];
            float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL).u64[0];
            float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL).u64[0];
            int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v213[0].f32), v71, *(float32x2_t *)v211.f32);
            *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v211.f32, v70), *(float32x2_t *)v213[0].f32, v75), 4uLL);
            v78.i64[1] = v77.u32[0];
            int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v211.f32, v72), v76, *(float32x2_t *)v212.f32);
            *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v212.f32), *(float32x2_t *)v211.f32, v69), 4uLL);
            v80.i64[1] = v79.u32[0];
            float32x4_t v81 = vmulq_f32(v74, v65);
            v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
            float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
            float32x4_t v83 = vmulq_f32(v78, v65);
            v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
            float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
            float32x4_t v85 = vmulq_f32(v80, v65);
            v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
            float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
            {
              int8x16_t v112 = (int8x16_t)vmulq_f32(v211, v65);
              float32x2_t v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
              float32x2_t v114 = vrecpe_f32(v68);
              int v115 = 4;
              do
              {
                float32x2_t v114 = vmul_f32(v114, vrecps_f32(v68, v114));
                --v115;
              }
              while (v115);
              float32x2_t v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
              float32x4_t v17 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
              v17.i32[3] = 0;
            }
            else
            {
              float32x4_t v87 = vnegq_f32(v211);
              v87.i32[3] = 0;
              float32x4_t v88 = vnegq_f32(v212);
              v88.i32[3] = 0;
              float32x4_t v89 = vmulq_f32(v87, v63);
              v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
              float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
              float32x4_t v91 = vmulq_f32(v63, v88);
              v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
              float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
              {
                float32x2_t v117 = vsub_f32(v90, v92);
                float32x2_t v118 = vrecpe_f32(v117);
                int v119 = 4;
                do
                {
                  float32x2_t v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                  --v119;
                }
                while (v119);
                uint64_t v104 = 0;
                float32x4_t v17 = vmlaq_n_f32(v211, v63, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
                v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
                unsigned int v120 = 2;
                uint64_t v103 = 1;
              }
              else
              {
                float32x4_t v93 = vnegq_f32(v213[0]);
                v93.i32[3] = 0;
                float32x4_t v94 = vmulq_f32(v88, v64);
                v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
                float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
                float32x4_t v96 = vmulq_f32(v63, v93);
                v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
                float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
                float32x4_t v98 = vmulq_f32(v64, v93);
                v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
                float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                {
                  float32x2_t v121 = vsub_f32(v95, v92);
                  float32x2_t v122 = vadd_f32(v121, vsub_f32(v97, v99));
                  float32x2_t v123 = vrecpe_f32(v122);
                  int v124 = 4;
                  do
                  {
                    float32x2_t v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                    --v124;
                  }
                  while (v124);
                  int8x16_t v125 = (int8x16_t)vmlaq_n_f32(v212, vsubq_f32(v213[0], v212), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                  v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                  unsigned int v120 = 2;
                  uint64_t v103 = 2;
                  uint64_t v104 = 1;
                  float32x4_t v17 = (float32x4_t)v125;
                }
                else
                {
                  float32x4_t v100 = vmulq_f32(v87, v64);
                  v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
                  float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                  {
                    float32x2_t v126 = vsub_f32(v101, v99);
                    float32x2_t v127 = vrecpe_f32(v126);
                    int v128 = 4;
                    do
                    {
                      float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                      --v128;
                    }
                    while (v128);
                    uint64_t v104 = 0;
                    float32x4_t v17 = vmlaq_n_f32(v211, v64, vmul_f32(v101, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
                    uint64_t v103 = 2;
                  }
                  else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v101), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v211.f32).u32[0] == -1)
                  {
                    uint64_t v104 = 0;
                    uint64_t v103 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v17.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v92, v95), (int8x8_t)vcgez_f32(v92)), 0);
                    *(int8x8_t *)v17.f32 = vuzp1_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v17.f32);
                    __int32 v102 = v17.i32[0];
                    float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v17, v189), 0), (int8x16_t)v212, (int8x16_t)v213[0]);
                    uint64_t v103 = 1;
                    if (v102 == -1) {
                      uint64_t v104 = 1;
                    }
                    else {
                      uint64_t v104 = 2;
                    }
                  }
                  unsigned int v120 = v103;
                }
              }
              float32x4_t v129 = *(&v211 + v103);
              float32x4_t v130 = *(&v208 + v104);
              float32x4_t v131 = *(&v208 + v103);
              float32x4_t v132 = *(&v205 + v104);
              float32x4_t v133 = *(&v205 + v103);
              float32x4_t v211 = *(&v211 + v104);
              float32x4_t v212 = v129;
              float32x4_t v208 = v130;
              float32x4_t v209 = v131;
              float32x4_t v205 = v132;
              float32x4_t v206 = v133;
              unsigned int v202 = v120;
            }
          }
          goto LABEL_48;
        }
        unsigned int v202 = 2;
        float32x4_t v105 = vmulq_f32(v63, v63);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v211.f32).u32[0] != -1)
        {
          float32x4_t v107 = vnegq_f32(v211);
          v107.i32[3] = 0;
          float32x4_t v108 = vmulq_f32(v107, v63);
          v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
          float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
          float32x2_t v110 = vrecpe_f32(v106);
          int v111 = 4;
          do
          {
            float32x2_t v110 = vmul_f32(v110, vrecps_f32(v106, v110));
            --v111;
          }
          while (v111);
          float32x4_t v17 = vmlaq_n_f32(v211, v63, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D9), 0).f32[0]);
          goto LABEL_30;
        }
        break;
      case 1:
        float32x4_t v17 = v211;
        float32x4_t v55 = vsubq_f32(v212, v211);
        float32x4_t v56 = vmulq_f32(v55, v55);
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        float32x2_t v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v57), 0), *(int8x8_t *)v211.f32).u32[0] != -1)
        {
          float32x4_t v58 = vnegq_f32(v211);
          v58.i32[3] = 0;
          float32x4_t v59 = vmulq_f32(v58, v55);
          v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
          float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
          float32x2_t v61 = vrecpe_f32(v57);
          int v62 = 4;
          do
          {
            float32x2_t v61 = vmul_f32(v61, vrecps_f32(v57, v61));
            --v62;
          }
          while (v62);
          float32x4_t v17 = vmlaq_n_f32(v211, v55, vmax_f32(vmin_f32(vmul_f32(v60, v61), _D9), 0).f32[0]);
LABEL_30:
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          goto LABEL_48;
        }
        break;
      default:
        goto LABEL_48;
    }
    unsigned int v202 = 1;
LABEL_48:
    float32x4_t v201 = v17;
    float32x4_t v134 = vmulq_f32(v17, v17);
    v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
    float32x2_t v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
    float32x2_t v136 = vrsqrte_f32(v135);
    int v137 = 4;
    do
    {
      float32x2_t v136 = vmul_f32(v136, vrsqrts_f32(vmul_f32(v136, v136), v135));
      --v137;
    }
    while (v137);
    float32x2_t v41 = vmul_f32(v135, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v135), 0), (int8x8_t)_D9, (int8x8_t)v136));
    float32x2_t v138 = vrecpe_f32(v41);
    int v139 = 4;
    do
    {
      float32x2_t v138 = vmul_f32(v138, vrecps_f32(v41, v138));
      --v139;
    }
    while (v139);
    float32x4_t v30 = vmulq_n_f32(v17, v138.f32[0]);
    v30.i32[3] = 0;
    int16x4_t v140 = (int16x4_t)vcgt_f32(v43, v41);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v41, v38), (int8x8_t)v140), 0), *(int8x8_t *)v17.f32).u32[0] != -1)
    {
      int8x8_t v141 = (int8x8_t)vdup_lane_s16(v140, 0);
      *(int8x8_t *)v142.f32 = vuzp1_s8(v141, v141);
      if (v142.i32[0] == -1)
      {
        *a8 = 0;
        return 2;
      }
      else
      {
        v142.i32[0] = *(_DWORD *)(*(void *)(a1 + 8) + 16);
        float32x2_t v143 = (const float *)(*(void *)(a2 + 8) + 16);
        float32x2_t v144 = vld1_dup_f32(v143);
        float32x2_t v145 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v195), 0), (int8x8_t)v195, (int8x8_t)vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.f32, 0), v144), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
        float32x4_t v146 = vnegq_f32(v197);
        v146.i32[3] = 0;
        if (v202 == 3)
        {
          float32x2_t v203 = 0;
          float32x2_t v204 = 0;
          float32x4_t v199 = v146;
          physx::Gu::barycentricCoordinates(&v200, &v211, &v212, v213, &v204, &v203);
          float32x4_t v175 = vmulq_n_f32(vsubq_f32(v209, v208), v204.f32[0]);
          v175.i32[3] = 0;
          float32x4_t v176 = vmulq_n_f32(vsubq_f32(v210, v208), v203.f32[0]);
          v176.i32[3] = 0;
          float32x4_t v147 = vaddq_f32(v208, vaddq_f32(v175, v176));
          float32x4_t v142 = vmulq_n_f32(vsubq_f32(v206, v205), v204.f32[0]);
          float32x4_t v146 = v199;
          v142.i32[3] = 0;
          float32x4_t v177 = vmulq_n_f32(vsubq_f32(v207, v205), v203.f32[0]);
          v177.i32[3] = 0;
          float32x4_t v150 = vaddq_f32(v205, vaddq_f32(v142, v177));
          v142.i32[0] = *(_DWORD *)(*(void *)(a1 + 8) + 16);
          uint64_t v148 = a5;
          uint64_t v149 = a6;
        }
        else if (v202 == 2)
        {
          float32x4_t v178 = vsubq_f32(v211, v194);
          float32x4_t v179 = vsubq_f32(vsubq_f32(v212, v194), v178);
          float32x4_t v180 = vmulq_f32(v179, v179);
          v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
          float32x2_t v181 = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32);
          float32x2_t v182 = vrecpe_f32(v181);
          int v183 = 4;
          uint64_t v148 = a5;
          uint64_t v149 = a6;
          do
          {
            float32x2_t v182 = vmul_f32(v182, vrecps_f32(v181, v182));
            --v183;
          }
          while (v183);
          float32x4_t v184 = vnegq_f32(v178);
          v184.i32[3] = 0;
          float32x4_t v185 = vmulq_f32(v184, v179);
          v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
          v184.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v181), (int8x8_t)v182, 0), vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32)).u32[0];
          float32x4_t v147 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), v184.f32[0]);
          v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
          float32x4_t v150 = vmlaq_n_f32(v205, vsubq_f32(v206, v205), v184.f32[0]);
          v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v147 = 0uLL;
          uint64_t v148 = a5;
          uint64_t v149 = a6;
          if (v202 == 1)
          {
            float32x4_t v147 = v208;
            float32x4_t v150 = v205;
          }
          else
          {
            float32x4_t v150 = 0uLL;
          }
        }
        int8x16_t v186 = (int8x16_t)vmlaq_n_f32(v147, v146, v142.f32[0]);
        v186.i64[1] = vextq_s8(v186, v186, 8uLL).u32[0];
        int8x16_t v187 = vbslq_s8(v190, v186, (int8x16_t)v147);
        *uint64_t v148 = v187;
        v187.i32[0] = *(_DWORD *)(*(void *)(a2 + 8) + 16);
        int8x16_t v188 = (int8x16_t)vmlsq_lane_f32(v150, v146, *(float32x2_t *)v187.i8, 0);
        v188.i64[1] = vextq_s8(v188, v188, 8uLL).u32[0];
        *uint64_t v149 = vbslq_s8(v191, v188, (int8x16_t)v150);
        *a7 = v146;
        *(float32x2_t *)v187.i8 = vmax_f32(vsub_f32(v43, v195), 0);
        *a8 = v187.i64[0];
        if (vcgt_f32(*(float32x2_t *)v187.i8, v145).u8[0]) {
          return 1;
        }
        else {
          return 2;
        }
      }
    }
  }
  float32x4_t v152 = vnegq_f32(v197);
  v152.i32[3] = 0;
  if (v202 == 3)
  {
    float32x2_t v203 = 0;
    float32x2_t v204 = 0;
    float32x4_t v198 = v152;
    physx::Gu::barycentricCoordinates(&v201, &v211, &v212, v213, &v204, &v203);
    float32x4_t v159 = vmulq_n_f32(vsubq_f32(v209, v208), v204.f32[0]);
    v159.i32[3] = 0;
    float32x4_t v160 = vmulq_n_f32(vsubq_f32(v210, v208), v203.f32[0]);
    v160.i32[3] = 0;
    float32x4_t v161 = vaddq_f32(v159, v160);
    float32x4_t v162 = vmulq_n_f32(vsubq_f32(v206, v205), v204.f32[0]);
    v162.i32[3] = 0;
    float32x4_t v153 = vaddq_f32(v208, v161);
    float32x4_t v163 = vmulq_n_f32(vsubq_f32(v207, v205), v203.f32[0]);
    float32x4_t v152 = v198;
    v163.i32[3] = 0;
    float32x4_t v154 = vaddq_f32(v205, vaddq_f32(v162, v163));
    long long v155 = a5;
    char v156 = a6;
    int8x16_t v158 = v190;
    int8x16_t v157 = v191;
  }
  else if (v202 == 2)
  {
    float32x4_t v164 = vsubq_f32(v211, v201);
    float32x4_t v165 = vsubq_f32(vsubq_f32(v212, v201), v164);
    float32x4_t v166 = vmulq_f32(v165, v165);
    v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
    float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
    float32x2_t v168 = vrecpe_f32(v167);
    int v169 = 4;
    long long v155 = a5;
    char v156 = a6;
    int8x16_t v158 = v190;
    int8x16_t v157 = v191;
    do
    {
      float32x2_t v168 = vmul_f32(v168, vrecps_f32(v167, v168));
      --v169;
    }
    while (v169);
    float32x4_t v170 = vnegq_f32(v164);
    v170.i32[3] = 0;
    float32x4_t v171 = vmulq_f32(v170, v165);
    v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
    v170.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v167), (int8x8_t)v168, 0), vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32)).u32[0];
    float32x4_t v153 = vmlaq_n_f32(v208, vsubq_f32(v209, v208), v170.f32[0]);
    v153.i64[1] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u32[0];
    float32x4_t v154 = vmlaq_n_f32(v205, vsubq_f32(v206, v205), v170.f32[0]);
    v154.i64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v153 = 0uLL;
    float32x4_t v154 = 0uLL;
    long long v155 = a5;
    char v156 = a6;
    int8x16_t v158 = v190;
    int8x16_t v157 = v191;
    if (v202 == 1)
    {
      float32x4_t v153 = v208;
      float32x4_t v154 = v205;
    }
  }
  int8x16_t v172 = (int8x16_t)vmlaq_n_f32(v153, v152, *(float *)(*(void *)(a1 + 8) + 16));
  v172.i64[1] = vextq_s8(v172, v172, 8uLL).u32[0];
  int8x16_t v173 = vbslq_s8(v158, v172, (int8x16_t)v153);
  int8x16_t *v155 = v173;
  v173.i32[0] = *(_DWORD *)(*(void *)(a2 + 8) + 16);
  int8x16_t v174 = (int8x16_t)vmlsq_lane_f32(v154, v152, *(float32x2_t *)v173.i8, 0);
  v174.i64[1] = vextq_s8(v174, v174, 8uLL).u32[0];
  int8x16_t *v156 = vbslq_s8(v157, v174, (int8x16_t)v154);
  *a8 = vmax_f32(vsub_f32(v43, v195), 0);
  *a7 = v152;
  return 1;
}

BOOL GeomMTDCallback_SphereSphere(float32x2_t *a1, float *a2, uint64_t a3, float32x2_t *a4, uint64_t a5, float32x2_t *a6)
{
  float32x2_t v6 = vsub_f32(a4[2], a6[2]);
  float v7 = a4[3].f32[0] - a6[3].f32[0];
  float v8 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v6, v6).i32[1]), v6.f32[0], v6.f32[0]) + (float)(v7 * v7);
  float v9 = *(float *)(a3 + 4) + *(float *)(a5 + 4);
  if (v8 <= (float)(v9 * v9))
  {
    float v10 = sqrtf(v8);
    if (v8 >= 0.000001)
    {
      float32x2_t v11 = vmul_n_f32(v6, 1.0 / v10);
      float v12 = v7 * (float)(1.0 / v10);
    }
    else
    {
      float32x2_t v11 = (float32x2_t)1065353216;
      float v12 = 0.0;
    }
    *a1 = v11;
    a1[1].f32[0] = v12;
    *a2 = fmaxf(v9 - v10, 0.0);
  }
  return v8 <= (float)(v9 * v9);
}

BOOL GeomMTDCallback_SpherePlane(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *(float *)(a3 + 4);
  float v8 = a6[2];
  float v7 = a6[3];
  float v9 = v7 + v7;
  float v10 = *a6;
  float v11 = a6[1];
  float v12 = v10 + v10;
  float v13 = (float)((float)(v7 * (float)(v7 + v7)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  float v14 = (float)((float)(v10 + v10) * v11) + (float)(v8 * v9);
  float v15 = (float)(v12 * v8) - (float)(v11 * v9);
  float v16 = (float)((float)((float)(a4[5] * v14) + (float)(a4[4] * v13)) + (float)(a4[6] * v15))
      - (float)((float)((float)(a6[5] * v14) + (float)(a6[4] * v13)) + (float)(a6[6] * v15));
  if (v16 <= v6)
  {
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v15;
    *a2 = fmaxf(v6 - v16, 0.0);
  }
  return v16 <= v6;
}

BOOL GeomMTDCallback_SphereCapsule(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a6;
  float v7 = a6[1];
  float v8 = v6 + v6;
  float v10 = a6[2];
  float v9 = a6[3];
  float v11 = v9 + v9;
  float v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  float v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  float v14 = (float)(v8 * v10) - (float)(v7 * v11);
  float v15 = *(float *)(a5 + 8);
  float v16 = v12 * v15;
  float v17 = v15 * v13;
  float v18 = v14 * v15;
  float v19 = a6[4];
  float v20 = a6[5];
  float v21 = v19 + v16;
  float v22 = v20 + v17;
  float v23 = a6[6];
  float v24 = v18 + v23;
  float v25 = v19 - v16;
  float v26 = v20 - v17;
  float v27 = v23 - v18;
  float v29 = a4[4];
  float v28 = a4[5];
  float v30 = a4[6];
  float v31 = *(float *)(a5 + 4) + *(float *)(a3 + 4);
  float v32 = v25 - v21;
  float v33 = v26 - v22;
  float v34 = v27 - v24;
  float v35 = v29 - v21;
  float v36 = v28 - v22;
  float v37 = v30 - v24;
  float v38 = (float)((float)(v33 * (float)(v28 - v22)) + (float)((float)(v29 - v21) * v32))
      + (float)((float)(v30 - v24) * v34);
  float v39 = 0.0;
  if (v38 > 0.0)
  {
    float v40 = (float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34);
    if (v38 >= v40)
    {
      float v35 = v35 - v32;
      float v36 = v36 - v33;
      float v37 = v37 - v34;
      float v39 = 1.0;
    }
    else
    {
      float v39 = v38 / v40;
      float v35 = v35 - (float)(v32 * v39);
      float v36 = v36 - (float)(v33 * v39);
      float v37 = v37 - (float)(v34 * v39);
    }
  }
  float v41 = (float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37);
  if (v41 <= (float)(v31 * v31))
  {
    float v42 = v29 - (float)(v21 + (float)(v32 * v39));
    float v43 = v28 - (float)(v22 + (float)(v33 * v39));
    float v44 = v30 - (float)(v24 + (float)(v34 * v39));
    float v45 = (float)((float)(v43 * v43) + (float)(v42 * v42)) + (float)(v44 * v44);
    float v46 = sqrtf(v45);
    float v47 = 1.0;
    BOOL v48 = v45 < 0.000001;
    float v49 = 0.0;
    float v50 = 0.0;
    if (!v48)
    {
      float v47 = v42 * (float)(1.0 / v46);
      float v49 = v43 * (float)(1.0 / v46);
      float v50 = v44 * (float)(1.0 / v46);
    }
    *a1 = v47;
    a1[1] = v49;
    a1[2] = v50;
    *a2 = fmaxf(v31 - v46, 0.0);
  }
  return v41 <= (float)(v31 * v31);
}

uint64_t GeomMTDCallback_SphereBox(float32x2_t *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  float32x2_t v6 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  float32x2_t v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  float32x2_t v8 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  float32x2_t v10 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v11 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v12 = vmul_laneq_f32(v7, _Q4, 2);
  float32x2_t v13 = vmul_n_f32(v6, _Q4.f32[0]);
  float32x2_t v14 = vmul_n_f32(v7, _Q4.f32[0]);
  float32x2_t v15 = vmul_n_f32(v8, _Q4.f32[0]);
  float32x2_t v16 = vmul_lane_f32(v7, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v17 = vmul_lane_f32(v8, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v18 = vmul_laneq_f32(v8, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)_Q4.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, v10);
  LODWORD(v22) = vadd_f32(v13, v18).u32[0];
  LODWORD(v23) = vsub_f32(v14, v17).u32[0];
  float32x2_t v24 = vsub_f32(v13, v18);
  LODWORD(v25) = vsub_f32(*(float32x2_t *)_Q4.f32, v12).u32[0];
  float32x2_t v26 = vadd_f32(v16, v15);
  float32x2_t v27 = vadd_f32(v14, v17);
  float32x2_t v28 = vsub_f32(v16, v15);
  float v29 = vsub_f32(*(float32x2_t *)_Q4.f32, v11).f32[0];
  float v30 = (float)(1.0 - v11.f32[1]) - v12.f32[1];
  float v31 = a5[1];
  if (v29 >= 0.0)
  {
    float v47 = v22 - v24.f32[1];
    _NF = v30 < (float)-v25;
    float v49 = v29 + (float)(v25 + (float)(v30 + 1.0));
    float v50 = 0.5 / sqrtf(v49);
    float v51 = v50 * vsub_f32(v26, v28).f32[0];
    float v52 = (float)(v27.f32[1] - v23) * v50;
    float v53 = v49 * v50;
    float v54 = v29 + (float)((float)(1.0 - v30) - v25);
    float v55 = vadd_f32(v26, v28).f32[0];
    float v56 = 0.5 / sqrtf(v54);
    float v57 = (float)(v27.f32[1] + v23) * v56;
    float v58 = v56 * v55;
    float v44 = v54 * v56;
    float v45 = v47 * v56;
    if (_NF)
    {
      float v43 = v58;
    }
    else
    {
      float v44 = v47 * v50;
      float v43 = v52;
    }
    if (_NF) {
      float v46 = v57;
    }
    else {
      float v46 = v51;
    }
    if (!_NF) {
      float v45 = v53;
    }
  }
  else
  {
    float v32 = v22 + v24.f32[1];
    BOOL v33 = v30 <= v25;
    float v34 = (float)(v25 + (float)(1.0 - v30)) - v29;
    float v35 = 0.5 / sqrtf(v34);
    float v36 = v34 * v35;
    float v37 = v35 * vadd_f32(v26, v28).f32[0];
    float v38 = (float)(v27.f32[1] - v23) * v35;
    float v39 = (float)((float)(v30 + 1.0) - v25) - v29;
    float v40 = vsub_f32(v26, v28).f32[0];
    float v41 = 0.5 / sqrtf(v39);
    float v42 = v39 * v41;
    float v43 = v32 * v41;
    float v44 = (float)(v27.f32[1] + v23) * v41;
    float v45 = v41 * v40;
    if (v33)
    {
      float v44 = v37;
      float v43 = v36;
      float v46 = v32 * v35;
    }
    else
    {
      float v46 = v42;
    }
    if (v33) {
      float v45 = v38;
    }
  }
  float v59 = a5[2];
  float v60 = a4[4] - *(float *)(a6 + 16);
  float v61 = a4[5] - *(float *)(a6 + 20);
  float v62 = a4[6] - *(float *)(a6 + 24);
  float v63 = (float)(v45 * v45) + -0.5;
  float v64 = (float)((float)((float)(v61 + v61) * v43) + (float)(v46 * (float)(v60 + v60)))
      + (float)(v44 * (float)(v62 + v62));
  float v65 = (float)((float)((float)(v60 + v60) * v63)
              - (float)((float)((float)(v43 * (float)(v62 + v62)) - (float)(v44 * (float)(v61 + v61))) * v45))
      + (float)(v46 * v64);
  float v66 = (float)((float)((float)(v61 + v61) * v63)
              - (float)((float)((float)(v44 * (float)(v60 + v60)) - (float)(v46 * (float)(v62 + v62))) * v45))
      + (float)(v43 * v64);
  float v67 = -v31;
  if (v65 >= (float)-v31)
  {
    if (v65 <= v31)
    {
      int v68 = 0;
      float v67 = (float)((float)((float)(v60 + v60) * v63)
                  - (float)((float)((float)(v43 * (float)(v62 + v62)) - (float)(v44 * (float)(v61 + v61))) * v45))
          + (float)(v46 * v64);
    }
    else
    {
      int v68 = 1;
      float v67 = a5[1];
    }
  }
  else
  {
    int v68 = 1;
  }
  float v69 = a5[3];
  float v70 = (float)((float)((float)(v62 + v62) * v63)
              - (float)((float)((float)(v46 * (float)(v61 + v61)) - (float)(v43 * (float)(v60 + v60))) * v45))
      + (float)(v44 * v64);
  if (v66 >= (float)-v59)
  {
    if (v66 > v59)
    {
      int v68 = 1;
      float v66 = a5[2];
    }
  }
  else
  {
    int v68 = 1;
    float v66 = -v59;
  }
  float v71 = *(float *)(a3 + 4);
  float v72 = -v44;
  float v73 = -v46;
  float v74 = -v43;
  float v75 = -v69;
  if (v70 >= (float)-v69)
  {
    if (v70 <= v69)
    {
      float v75 = v70;
    }
    else
    {
      int v68 = 1;
      float v75 = a5[3];
    }
    if (v68 != 1)
    {
      float v85 = v31 - fabsf(v67);
      float v86 = v59 - fabsf(v66);
      float v87 = v69 - fabsf(v70);
      if (v86 >= v85)
      {
        if (v85 < v87)
        {
          *a2 = -v85;
          float v89 = -2.0;
          if (v67 > 0.0) {
            float v89 = 2.0;
          }
          float v88 = 0.0;
          goto LABEL_42;
        }
      }
      else if (v86 < v87)
      {
        *a2 = -v86;
        float v88 = 2.0;
        if (v66 <= 0.0) {
          float v88 = -2.0;
        }
        float v89 = 0.0;
LABEL_42:
        float v90 = 0.0;
LABEL_46:
        float v91 = v90 + v90;
        float v92 = (float)((float)(v43 * v88) + (float)(v46 * v89)) + (float)(v44 * v91);
        a1->f32[0] = (float)((float)(v45 * (float)((float)(v88 * v72) + (float)(v43 * v91))) + (float)(v89 * v63))
                   + (float)(v46 * v92);
        a1->f32[1] = (float)((float)(v45 * (float)((float)(v91 * v73) + (float)(v44 * v89))) + (float)(v88 * v63))
                   + (float)(v43 * v92);
        a1[1].f32[0] = (float)((float)(v45 * (float)((float)(v89 * v74) + (float)(v46 * v88))) + (float)(v91 * v63))
                     + (float)(v44 * v92);
        float v83 = *a2;
        goto LABEL_47;
      }
      float v90 = 1.0;
      if (v70 <= 0.0) {
        float v90 = -1.0;
      }
      *a2 = -v87;
      float v89 = 0.0;
      float v88 = 0.0;
      goto LABEL_46;
    }
  }
  float v76 = v67 + v67;
  float v77 = (float)((float)(v43 * (float)(v66 + v66)) + (float)(v46 * (float)(v67 + v67)))
      + (float)(v44 * (float)(v75 + v75));
  float v78 = (float)((float)(v45 * (float)((float)((float)(v66 + v66) * v72) + (float)(v43 * (float)(v75 + v75))))
              + (float)(v76 * v63))
      + (float)(v46 * v77);
  float v79 = (float)((float)(v45 * (float)((float)((float)(v75 + v75) * v73) + (float)(v44 * v76)))
              + (float)((float)(v66 + v66) * v63))
      + (float)(v43 * v77);
  float32_t v80 = v62
      - (float)((float)((float)(v45 * (float)((float)(v76 * v74) + (float)(v46 * (float)(v66 + v66))))
                      + (float)((float)(v75 + v75) * v63))
              + (float)(v44 * v77));
  a1->f32[0] = v60 - v78;
  a1->f32[1] = v61 - v79;
  a1[1].f32[0] = v80;
  float v81 = (float)((float)((float)(v61 - v79) * (float)(v61 - v79)) + (float)((float)(v60 - v78) * (float)(v60 - v78)))
      + (float)(v80 * v80);
  if (v81 > (float)((float)(v71 + 0.0) * (float)(v71 + 0.0))) {
    return 0;
  }
  float v82 = 1.0 / sqrtf(v81);
  *a2 = v82;
  *a1 = vmul_n_f32(*a1, v82);
  a1[1].f32[0] = v82 * a1[1].f32[0];
  float v83 = v81 * *a2;
LABEL_47:
  *a2 = fmaxf(-(float)(v83 - v71), 0.0);
  return 1;
}

uint64_t GeomMTDCallback_SphereConvex(float32x2_t *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, double a7, double a8, double a9, int32x4_t a10)
{
  float v13 = *(float *)(a3 + 4);
  float v14 = a4[4];
  float v15 = a4[5];
  *(float *)float v43 = v14;
  *(float *)&v43[1] = v15;
  float v16 = a4[6];
  *(float *)&v43[2] = v16;
  *(float *)&_DWORD v43[3] = v13;
  float v45 = 0.0;
  uint64_t v17 = *(void *)(a5 + 32);
  if (pointConvexDistance((uint64_t)a1, (uint64_t)v44, &v45, (uint64_t)v43, v17, (_OWORD *)(a5 + 4), a6, a7, a8, a9, a10))
  {
    int v18 = *(unsigned __int8 *)(v17 + 71);
    if (*(unsigned char *)(v17 + 71))
    {
      float v19 = (float)(v14 - a6[4]) + (float)(v14 - a6[4]);
      float v20 = (float)(v15 - a6[5]) + (float)(v15 - a6[5]);
      float v21 = (float)(v16 - a6[6]) + (float)(v16 - a6[6]);
      float v23 = a6[2];
      float v22 = a6[3];
      float v24 = (float)(v22 * v22) + -0.5;
      float v25 = *a6;
      float v26 = a6[1];
      float v27 = (float)((float)(v20 * v26) + (float)(*a6 * v19)) + (float)(v23 * v21);
      float v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(*a6 * v27);
      float v29 = -*a6;
      float v30 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(*a6 * v21)) * v22))
          + (float)(v26 * v27);
      float v31 = (float)((float)(v21 * v24) - (float)((float)((float)(*a6 * v20) - (float)(v26 * v19)) * v22))
          + (float)(v23 * v27);
      float v32 = *(float **)(v17 + 72);
      float v33 = -3.4028e38;
      do
      {
        float v34 = v32[1];
        float v35 = v32[2];
        float v36 = v32[3] + (float)((float)((float)(v30 * v34) + (float)(v28 * *v32)) + (float)(v31 * v35));
        if (v36 > v33)
        {
          float v37 = *v32 + *v32;
          float v38 = v34 + v34;
          float v39 = v35 + v35;
          float v40 = (float)((float)(v26 * v38) + (float)(v25 * v37)) + (float)(v23 * (float)(v35 + v35));
          a1->f32[0] = (float)((float)(v22 * (float)((float)(v38 * (float)-v23) + (float)(v26 * v39)))
                             + (float)(v37 * v24))
                     + (float)(v25 * v40);
          a1->f32[1] = (float)((float)(v22 * (float)((float)(v39 * v29) + (float)(v23 * v37))) + (float)(v38 * v24))
                     + (float)(v26 * v40);
          a1[1].f32[0] = (float)((float)(v22 * (float)((float)(v37 * (float)-v26) + (float)(v25 * v38)))
                               + (float)(v39 * v24))
                       + (float)(v23 * v40);
          float v33 = v36;
        }
        v32 += 5;
        --v18;
      }
      while (v18);
    }
    else
    {
      float v33 = -3.4028e38;
    }
    *a2 = fmaxf(v13 - v33, 0.0);
  }
  else
  {
    if (v45 > (float)(v13 * v13)) {
      return 0;
    }
    *a2 = fmaxf(v13 - sqrtf(v45), 0.0);
    float32_t v42 = -a1[1].f32[0];
    *a1 = vneg_f32(*a1);
    a1[1].f32[0] = v42;
  }
  return 1;
}

uint64_t GeomMTDCallback_SphereMesh(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float32x2_t v6 = v5;
  float32x2_t v8 = v7;
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(v9 + 4);
  int v12 = *(_DWORD *)(v11 + 24);
  v27[0] = -1;
  LODWORD(v24[0]) = 0;
  HIDWORD(v24[0]) = v10;
  uint64_t v13 = *(void *)(v11 + 16);
  physx::Gu::GeometryUnion::set((uint64_t)v27, v24);
  v26[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v26, v4);
  int v23 = 0;
  uint64_t v22 = 0;
  unsigned int v25 = 0;
  long long v19 = xmmword_23435FBB0;
  uint64_t v20 = v13;
  int v21 = v12;
  uint64_t v17 = 0;
  int v18 = 1065353216;
  BOOL v14 = physx::Gu::contactSphereMesh((uint64_t)v27, (uint64_t)v26, (float *)&v19, v2, (float *)&v17, (uint64_t)&v22, (uint64_t)v24, 0);
  uint64_t result = 0;
  if (v14)
  {
    unsigned int v16 = v25;
    LODWORD(result) = processContacts(v8, v6, v25, (uint64_t)v24);
    if (v16) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GeomMTDCallback_SphereHeightField(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float32x2_t v6 = v5;
  float32x2_t v8 = v7;
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(v9 + 4);
  int v12 = *(_DWORD *)(v11 + 24);
  v27[0] = -1;
  LODWORD(v24[0]) = 0;
  HIDWORD(v24[0]) = v10;
  uint64_t v13 = *(void *)(v11 + 16);
  physx::Gu::GeometryUnion::set((uint64_t)v27, v24);
  v26[0].i32[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v26, v4);
  int v23 = 0;
  uint64_t v22 = 0;
  unsigned int v25 = 0;
  long long v19 = xmmword_23435FBB0;
  uint64_t v20 = v13;
  int v21 = v12;
  uint64_t v17 = 0;
  int v18 = 1065353216;
  BOOL v14 = physx::Gu::contactSphereHeightfield((uint64_t)v27, v26, (float *)&v19, v2, (float *)&v17, (uint64_t)&v22, (uint64_t)v24, 0);
  uint64_t result = 0;
  if (v14)
  {
    unsigned int v16 = v25;
    LODWORD(result) = processContacts(v8, v6, v25, (uint64_t)v24);
    if (v16) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GeomMTDCallback_NotSupported()
{
  return 0;
}

BOOL GeomMTDCallback_PlaneCapsule(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a6;
  float v7 = a6[1];
  float v8 = v6 + v6;
  float v10 = a6[2];
  float v9 = a6[3];
  float v11 = v9 + v9;
  float v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  float v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  float v14 = (float)(v8 * v10) - (float)(v7 * v11);
  float v15 = *(float *)(a5 + 8);
  float v16 = v12 * v15;
  float v17 = v15 * v13;
  float v18 = v14 * v15;
  float v19 = a6[4];
  float v20 = a6[5];
  float v21 = v19 + v16;
  float v22 = v20 + v17;
  float v23 = a6[6];
  float v24 = v18 + v23;
  float v25 = v19 - v16;
  float v26 = v20 - v17;
  float v27 = v23 - v18;
  float v29 = a4[2];
  float v28 = a4[3];
  float v30 = v28 + v28;
  float v31 = *a4;
  float v32 = a4[1];
  float v33 = v31 + v31;
  float v34 = (float)((float)(v28 * (float)(v28 + v28)) + -1.0) + (float)(v31 * (float)(v31 + v31));
  float v35 = (float)((float)(v31 + v31) * v32) + (float)(v29 * v30);
  float v36 = (float)(v33 * v29) - (float)(v32 * v30);
  float v37 = (float)((float)(a4[5] * v35) + (float)(a4[4] * v34)) + (float)(a4[6] * v36);
  float v38 = (float)((float)((float)(v22 * v35) + (float)(v21 * v34)) + (float)(v24 * v36)) - v37;
  float v39 = (float)((float)((float)(v26 * v35) + (float)(v25 * v34)) + (float)(v27 * v36)) - v37;
  if (v38 < v39) {
    float v39 = v38;
  }
  float v40 = v39 - *(float *)(a5 + 4);
  if (v40 <= 0.0)
  {
    *a1 = -v34;
    a1[1] = -v35;
    a1[2] = -v36;
    *a2 = fmaxf(-v40, 0.0);
  }
  return v40 <= 0.0;
}

BOOL GeomMTDCallback_PlaneBox(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  float32x2_t v9 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  float32x2_t v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  float32x2_t v12 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v13 = vmul_lane_f32(v8, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v14 = vmul_laneq_f32(v9, _Q4, 2);
  float32x2_t v15 = vmul_n_f32(v8, _Q4.f32[0]);
  float32x2_t v16 = vmul_n_f32(v9, _Q4.f32[0]);
  float32x2_t v17 = vmul_n_f32(v10, _Q4.f32[0]);
  float32x2_t v18 = vmul_lane_f32(v9, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v19 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v20 = vmul_laneq_f32(v10, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v25 = vsub_f32(*(float32x2_t *)_Q4.f32, v12);
  LODWORD(v26) = vsub_f32(v16, v19).u32[0];
  LODWORD(v27) = vadd_f32(v18, v17).u32[0];
  v36[0] = (float)(1.0 - v13.f32[1]) - v14.f32[1];
  LODWORD(v36[1]) = vadd_f32(v15, v20).u32[0];
  HIDWORD(v26) = vsub_f32(v15, v20).i32[1];
  uint64_t v37 = v26;
  unsigned __int32 v38 = vsub_f32(v25, v14).u32[0];
  HIDWORD(v27) = vadd_f32(v16, v19).i32[1];
  v39[0] = v27;
  v39[1] = vzip1_s32((int32x2_t)vsub_f32(v18, v17), (int32x2_t)vsub_f32(v25, v13));
  int v40 = *(_DWORD *)(a6 + 16);
  *(void *)&long long v28 = *(void *)(a6 + 20);
  *((void *)&v28 + 1) = *(void *)(a5 + 4);
  long long v41 = v28;
  int v42 = *(_DWORD *)(a5 + 12);
  LODWORD(v28) = *(_DWORD *)a4;
  v15.i32[0] = *(_DWORD *)(a4 + 4);
  _Q4.i32[0] = *(_DWORD *)(a4 + 8);
  v20.i32[0] = *(_DWORD *)(a4 + 12);
  float v29 = (float)((float)(v20.f32[0] * (float)(v20.f32[0] + v20.f32[0])) + -1.0)
      + (float)(*(float *)&v28 * (float)(*(float *)&v28 + *(float *)&v28));
  float v30 = (float)((float)(*(float *)&v28 + *(float *)&v28) * v15.f32[0])
      + (float)(_Q4.f32[0] * (float)(v20.f32[0] + v20.f32[0]));
  float v31 = (float)((float)(*(float *)&v28 + *(float *)&v28) * _Q4.f32[0])
      - (float)(v15.f32[0] * (float)(v20.f32[0] + v20.f32[0]));
  float v32 = (float)((float)(*(float *)(a4 + 20) * v30) + (float)(*(float *)(a4 + 16) * v29))
      + (float)(*(float *)(a4 + 24) * v31);
  physx::Gu::computeOBBPoints(v43, (float *)&v40, (float *)&v41 + 2, v36, (float *)&v37 + 1, (float *)v39 + 1);
  uint64_t v33 = 0;
  float v34 = (float)((float)((float)(v30 * v43[1]) + (float)(v43[0] * v29)) + (float)(v43[2] * v31)) - v32;
  do
  {
    if (v34 >= (float)((float)((float)((float)(v30 * v43[v33 + 4]) + (float)(v43[v33 + 3] * v29))
                              + (float)(v43[v33 + 5] * v31))
                      - v32))
      float v34 = (float)((float)((float)(v30 * v43[v33 + 4]) + (float)(v43[v33 + 3] * v29)) + (float)(v43[v33 + 5] * v31))
          - v32;
    v33 += 3;
  }
  while (v33 != 21);
  if (v34 <= 0.0)
  {
    *a1 = -v29;
    a1[1] = -v30;
    a1[2] = -v31;
    *a2 = fmaxf(-v34, 0.0);
  }
  return v34 <= 0.0;
}

BOOL GeomMTDCallback_PlaneConvex(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a4;
  float v7 = a4[1];
  float v8 = v6 + v6;
  float v10 = a4[2];
  float v9 = a4[3];
  float v11 = v9 + v9;
  float v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  float v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  float v14 = (float)(v8 * v10) - (float)(v7 * v11);
  float v15 = (float)((float)(a4[5] * v13) + (float)(a4[4] * v12)) + (float)(a4[6] * v14);
  uint64_t v16 = *(void *)(a5 + 32);
  unint64_t v17 = *(unsigned __int8 *)(v16 + 70);
  uint64_t v18 = *(void *)(v16 + 72);
  uint64_t v19 = 5 * *(unsigned __int8 *)(v16 + 71);
  float32x2_t v20 = (float *)(v18 + 4 * v19);
  float v21 = *v20 + *v20;
  float v22 = v20[1] + v20[1];
  float v23 = v20[2] + v20[2];
  float v25 = a6[2];
  float v24 = a6[3];
  float v26 = (float)(v24 * v24) + -0.5;
  float v27 = *a6;
  float v28 = a6[1];
  float v29 = (float)((float)(v22 * v28) + (float)(*a6 * v21)) + (float)(v25 * v23);
  float v30 = (float)((float)(v24 * (float)((float)(v28 * v23) - (float)(v25 * v22))) + (float)(v21 * v26))
      + (float)(*a6 * v29);
  float v31 = (float)((float)(v24 * (float)((float)(v25 * v21) - (float)(*a6 * v23))) + (float)(v22 * v26))
      + (float)(v28 * v29);
  float v32 = (float)((float)(v24 * (float)((float)(*a6 * v22) - (float)(v28 * v21))) + (float)(v23 * v26))
      + (float)(v25 * v29);
  float v33 = a6[4];
  float v34 = a6[5];
  float v35 = a6[6];
  float v36 = (float)((float)((float)(v13 * (float)(v34 + v31)) + (float)((float)(v33 + v30) * v12))
              + (float)((float)(v35 + v32) * v14))
      - v15;
  if (v17 >= 2)
  {
    unint64_t v37 = v17 - 1;
    unsigned __int32 v38 = (float *)(4 * v19 + v18 + 20);
    do
    {
      float v39 = *(v38 - 1);
      float v40 = *(v38 - 2) + *(v38 - 2);
      float v41 = *v38;
      v38 += 3;
      float v42 = v39 + v39;
      float v43 = (float)((float)(v28 * v42) + (float)(v27 * v40)) + (float)(v25 * (float)(v41 + v41));
      float v44 = (float)((float)((float)(v13
                                  * (float)(v34
                                          + (float)((float)((float)(v24
                                                                  * (float)((float)((float)(v41 + v41) * (float)-v27)
                                                                          + (float)(v25 * v40)))
                                                          + (float)(v42 * v26))
                                                  + (float)(v28 * v43))))
                          + (float)((float)(v33
                                          + (float)((float)((float)(v24
                                                                  * (float)((float)(v42 * (float)-v25)
                                                                          + (float)(v28 * (float)(v41 + v41))))
                                                          + (float)(v40 * v26))
                                                  + (float)(v27 * v43)))
                                  * v12))
                  + (float)((float)(v35
                                  + (float)((float)((float)(v24
                                                          * (float)((float)(v40 * (float)-v28) + (float)(v27 * v42)))
                                                  + (float)((float)(v41 + v41) * v26))
                                          + (float)(v25 * v43)))
                          * v14))
          - v15;
      if (v36 >= v44) {
        float v36 = v44;
      }
      --v37;
    }
    while (v37);
  }
  if (v36 <= 0.0)
  {
    *a1 = -v12;
    a1[1] = -v13;
    a1[2] = -v14;
    *a2 = fmaxf(-v36, 0.0);
  }
  return v36 <= 0.0;
}

BOOL GeomMTDCallback_CapsuleCapsule(float32x2_t *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v8 = *a4;
  float v9 = a4[1];
  float v10 = v8 + v8;
  float v12 = a4[2];
  float v11 = a4[3];
  float v13 = v11 + v11;
  float v14 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  float v15 = (float)(v10 * v9) + (float)(v12 * (float)(v11 + v11));
  float v16 = (float)(v10 * v12) - (float)(v9 * v13);
  float v18 = *(float *)(a3 + 4);
  float v17 = *(float *)(a3 + 8);
  float v19 = v14 * v17;
  float v20 = v17 * v15;
  float v21 = v16 * v17;
  float v22 = a4[4];
  float v23 = a4[5];
  float v24 = v22 + v19;
  float v25 = v23 + v20;
  float v26 = a4[6];
  v59.f32[0] = v22 + v19;
  v59.f32[1] = v23 + v20;
  float32_t v27 = v22 - v19;
  float v28 = v23 - v20;
  float v60 = v21 + v26;
  v61.f32[0] = v27;
  v61.f32[1] = v23 - v20;
  float v62 = v26 - v21;
  float v63 = v18;
  float v29 = *a6;
  float v30 = a6[1];
  float v31 = v29 + v29;
  float v33 = a6[2];
  float v32 = a6[3];
  float v34 = (float)((float)(v32 * (float)(v32 + v32)) + -1.0) + (float)(v29 * (float)(v29 + v29));
  float v35 = (float)(v31 * v30) + (float)(v33 * (float)(v32 + v32));
  float v36 = (float)(v31 * v33) - (float)(v30 * (float)(v32 + v32));
  float v38 = *(float *)(a5 + 4);
  float v37 = *(float *)(a5 + 8);
  float v39 = v34 * v37;
  float v40 = v37 * v35;
  float v41 = v36 * v37;
  float v42 = a6[4];
  float v43 = a6[5];
  float v44 = a6[6];
  v54.f32[0] = v42 + v39;
  v54.f32[1] = v43 + v40;
  float v55 = v41 + v44;
  v56.f32[0] = v42 - v39;
  v56.f32[1] = v43 - v40;
  float v57 = v44 - v41;
  float v58 = v38;
  uint64_t v64 = 0;
  v66[0] = v27 - v24;
  v66[1] = v28 - v25;
  v66[2] = v62 - v60;
  v65[0] = (float)(v42 - v39) - (float)(v42 + v39);
  v65[1] = (float)(v43 - v40) - (float)(v43 + v40);
  v65[2] = (float)(v44 - v41) - (float)(v41 + v44);
  float v45 = physx::Gu::distanceSegmentSegmentSquared((float *)&v59, v66, (float *)&v54, v65, (float *)&v64 + 1, (float *)&v64);
  float v46 = v63 + v58;
  if (v45 <= (float)(v46 * v46))
  {
    float32x2_t v47 = vsub_f32(vadd_f32(v59, vmul_n_f32(vsub_f32(v61, v59), *((float *)&v64 + 1))), vadd_f32(v54, vmul_n_f32(vsub_f32(v56, v54), *(float *)&v64)));
    float v48 = (float)(v60 + (float)(*((float *)&v64 + 1) * (float)(v62 - v60)))
        - (float)(v55 + (float)(*(float *)&v64 * (float)(v57 - v55)));
    float v49 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v47, v47).i32[1]), v47.f32[0], v47.f32[0]) + (float)(v48 * v48);
    float v50 = sqrtf(v49);
    if (v49 >= 0.000001)
    {
      float32x2_t v51 = vmul_n_f32(v47, 1.0 / v50);
      float v52 = v48 * (float)(1.0 / v50);
    }
    else
    {
      float32x2_t v51 = (float32x2_t)1065353216;
      float v52 = 0.0;
    }
    *a1 = v51;
    a1[1].f32[0] = v52;
    *a2 = fmaxf(v46 - v50, 0.0);
  }
  return v45 <= (float)(v46 * v46);
}

BOOL GeomMTDCallback_CapsuleBox(float *a1, float *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v8 = *a4;
  float v9 = a4[1];
  float v10 = v8 + v8;
  float v12 = a4[2];
  float v11 = a4[3];
  float v13 = v11 + v11;
  float v14 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  float v15 = (float)(v10 * v9) + (float)(v12 * (float)(v11 + v11));
  float v16 = (float)(v10 * v12) - (float)(v9 * v13);
  float v18 = *(float *)(a3 + 4);
  float v17 = *(float *)(a3 + 8);
  float v19 = v14 * v17;
  float v20 = v17 * v15;
  float v21 = v16 * v17;
  float v22 = a4[4];
  float v23 = a4[5];
  float v24 = a4[6];
  v100.f32[0] = v22 + v19;
  v100.f32[1] = v23 + v20;
  float v101 = v21 + v24;
  v102.f32[0] = v22 - v19;
  v102.f32[1] = v23 - v20;
  float v103 = v24 - v21;
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6, 1);
  float32x2_t v26 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  float32x2_t v27 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  _Q5 = vaddq_f32(*(float32x4_t *)a6, *(float32x4_t *)a6);
  float32x2_t v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a6, *(float32x2_t *)_Q5.f32), 0);
  float v104 = v18;
  float32x2_t v30 = vmul_lane_f32(v25, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v31 = vmul_laneq_f32(v26, _Q5, 2);
  float32x2_t v32 = vmul_n_f32(v25, _Q5.f32[0]);
  float32x2_t v33 = vmul_n_f32(v26, _Q5.f32[0]);
  float32x2_t v34 = vmul_n_f32(v27, _Q5.f32[0]);
  float32x2_t v35 = vmul_lane_f32(v26, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v36 = vmul_lane_f32(v27, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v37 = vmul_laneq_f32(v27, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v41 = vsub_f32(*(float32x2_t *)_Q5.f32, v29);
  LODWORD(v42) = vsub_f32(v33, v36).u32[0];
  LODWORD(v43) = vadd_f32(v35, v34).u32[0];
  v95.f32[0] = (float)(1.0 - v30.f32[1]) - v31.f32[1];
  v95.i32[1] = vadd_f32(v32, v37).u32[0];
  HIDWORD(v42) = vsub_f32(v32, v37).i32[1];
  *(void *)float32x4_t v96 = v42;
  *(_DWORD *)&v96[8] = vsub_f32(v41, v31).u32[0];
  HIDWORD(v43) = vadd_f32(v33, v36).i32[1];
  *(void *)&long long v97 = v43;
  *((int32x2_t *)&v97 + 1) = vzip1_s32((int32x2_t)vsub_f32(v35, v34), (int32x2_t)vsub_f32(v41, v30));
  *(_DWORD *)float32x4_t v98 = *(_DWORD *)(a6 + 16);
  *(void *)&long long v44 = *(void *)(a6 + 20);
  *((void *)&v44 + 1) = *(void *)(a5 + 4);
  *(_OWORD *)&v98[4] = v44;
  int v99 = *(_DWORD *)(a5 + 12);
  float v107 = 0.0;
  physx::Gu::distanceSegmentBoxSquared((float *)&v100, (float *)&v102, (float *)v98, (float32x2_t *)&v98[12], (float *)&v95, &v107, &v105);
  BOOL result = 0;
  float v47 = v104;
  if (v45 <= (float)(v47 * v47))
  {
    if (v45 == 0.0
      || (v48 = vsub_f32(vadd_f32(v100, vmul_n_f32(vsub_f32(v102, v100), v107)), vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v95, v105.f32[0]), vmul_n_f32(*(float32x2_t *)&v96[4], v105.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v97 + 4), v106)), *(float32x2_t *)v98)), float v49 = (float)(v101 + (float)(v107 * (float)(v103 - v101)))- (float)((float)((float)((float)(v105.f32[0] * *(float *)v96) + (float)(v105.f32[1] * *(float *)&v97))+ (float)(v106 * *((float *)&v97 + 3)))+ *(float *)&v98[8]), v50 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v48, v48).i32[1]), v48.f32[0], v48.f32[0]) + (float)(v49 * v49)), v50 == 0.0))
    {
      uint64_t v51 = 0;
      float v52 = 0.0;
      float v53 = 3.4028e38;
      *(float *)&__int32 v54 = 0.0;
      *(float *)&__int32 v55 = 0.0;
      while (1)
      {
        v109[0] = 0.0;
        BOOL result = PxcTestAxis((float *)((char *)&v95 + v51 * 4), (float *)&v100, (float *)&v95, v109, v47);
        if (!result) {
          break;
        }
        if (v109[0] < v53)
        {
          __int32 v55 = v95.i32[v51];
          __int32 v54 = v95.i32[v51 + 1];
          float v52 = *(float *)((char *)&v95 + v51 * 4 + 8);
          float v53 = v109[0];
        }
        v51 += 3;
        if (v51 == 9)
        {
          float v94 = v47;
          float v91 = *(float *)&v55;
          float v92 = *(float *)&v54;
          float v93 = v52;
          float v89 = v100.f32[1];
          float v90 = v100.f32[0];
          float v87 = v101;
          float v88 = v102.f32[0];
          float v56 = v102.f32[0] - v100.f32[0];
          float v85 = v102.f32[1];
          float v86 = v103;
          float v57 = v102.f32[1] - v100.f32[1];
          float v58 = v103 - v101;
          float v59 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
          float v60 = 0.0;
          float v61 = 0.0;
          float v62 = 0.0;
          if (v59 > 0.0)
          {
            float v63 = 1.0 / sqrtf(v59);
            float v62 = v56 * v63;
            float v61 = v57 * v63;
            float v60 = v58 * v63;
          }
          uint64_t v64 = 0;
          float v65 = -v60;
          float v66 = -v62;
          float v67 = -v61;
          do
          {
            float v69 = v95.f32[v64 + 1];
            float v68 = *(float *)((char *)&v95 + v64 * 4 + 8);
            float v70 = v95.f32[v64];
            float v71 = (float)(v69 * v65) + (float)(v61 * v68);
            float v72 = (float)(v68 * v66) + (float)(v60 * v70);
            float v73 = (float)(v70 * v67) + (float)(v62 * v69);
            if (fabsf(v71) > 0.000001 || fabsf(v72) > 0.000001 || fabsf(v73) > 0.000001)
            {
              float v74 = (float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73);
              float v75 = 0.0;
              float v76 = 0.0;
              float v77 = 0.0;
              if (v74 > 0.0)
              {
                float v78 = 1.0 / sqrtf(v74);
                float v77 = v71 * v78;
                float v76 = v72 * v78;
                float v75 = v73 * v78;
              }
              v109[0] = v77;
              v109[1] = v76;
              v109[2] = v75;
              float v108 = 0.0;
              BOOL result = PxcTestAxis(v109, (float *)&v100, (float *)&v95, &v108, v94);
              if (!result) {
                return result;
              }
              if (v108 < v53)
              {
                float v91 = v77;
                float v92 = v76;
                float v93 = v75;
                float v53 = v108;
              }
              float v66 = -v62;
              float v65 = -v60;
              float v67 = -v61;
            }
            v64 += 3;
          }
          while (v64 != 9);
          float v79 = (float)((float)(v92 * (float)((float)((float)(v85 + v89) * 0.5) - *(float *)&v98[4]))
                      + (float)(v91 * (float)((float)((float)(v88 + v90) * 0.5) - *(float *)v98)))
              + (float)(v93 * (float)((float)((float)(v86 + v87) * 0.5) - *(float *)&v98[8]));
          _NF = v79 < 0.0;
          if (v79 >= 0.0) {
            float v81 = v91;
          }
          else {
            float v81 = -v91;
          }
          if (_NF) {
            float v82 = -v92;
          }
          else {
            float v82 = v92;
          }
          *a2 = fmaxf(v53, 0.0);
          if (_NF) {
            float v83 = -v93;
          }
          else {
            float v83 = v93;
          }
          *a1 = v81;
          a1[1] = v82;
          a1[2] = v83;
          return 1;
        }
      }
    }
    else
    {
      float v84 = 1.0 / v50;
      *(float32x2_t *)a1 = vmul_n_f32(v48, v84);
      a1[2] = v49 * v84;
      *a2 = fmaxf(v47 - sqrtf(v45), 0.0);
      return 1;
    }
  }
  return result;
}

float GeomMTDCallback_CapsuleConvex(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, double a7)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  LODWORD(a7) = a4->i32[0];
  float v9 = a4->f32[1];
  float v11 = a4->f32[2];
  float v10 = a4->f32[3];
  float v12 = v10 + v10;
  float v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0)
      + (float)(*(float *)&a7 * (float)(*(float *)&a7 + *(float *)&a7));
  float v14 = (float)((float)(*(float *)&a7 + *(float *)&a7) * v9) + (float)(v11 * v12);
  float v15 = (float)((float)(*(float *)&a7 + *(float *)&a7) * v11) - (float)(v9 * v12);
  LODWORD(a7) = *(_DWORD *)(a3 + 4);
  float v16 = *(float *)(a3 + 8);
  float v17 = v16 * v14;
  float v18 = v15 * v16;
  float v20 = a4[1].f32[0];
  float v19 = a4[1].f32[1];
  float v21 = a4[1].f32[2];
  float v22 = (float)(v20 - (float)(v13 * v16)) - (float)(v20 + (float)(v13 * v16));
  float v23 = sqrtf((float)((float)((float)((float)(v19 - v17) - (float)(v19 + v17))* (float)((float)(v19 - v17) - (float)(v19 + v17)))+ (float)(v22 * v22))+ (float)((float)((float)(v21 - v18) - (float)(v18 + v21)) * (float)((float)(v21 - v18) - (float)(v18 + v21))))* 0.5;
  int32x2_t v24 = vdup_lane_s32(*(int32x2_t *)&a7, 0);
  uint64_t v25 = *(void *)(a5 + 32);
  float32x4_t v26 = *(float32x4_t *)(a5 + 4);
  float32x4_t v27 = v26;
  v27.i32[3] = 0;
  float32x4_t v28 = *(float32x4_t *)(a5 + 16);
  BOOL v29 = COERCE_FLOAT(*(void *)(a5 + 12)) == 1.0;
  if (COERCE_FLOAT(HIDWORD(*(void *)(a5 + 4))) != 1.0) {
    BOOL v29 = 0;
  }
  if (v26.f32[0] != 1.0) {
    BOOL v29 = 0;
  }
  char v148 = 0;
  uint64_t v155 = v25 + 32;
  uint64_t v157 = *(void *)(v25 + 72) + 20 * *(unsigned __int8 *)(v25 + 71);
  char v158 = *(unsigned char *)(v25 + 70);
  v30.i64[0] = *(void *)(v25 + 92);
  v30.i64[1] = *(unsigned int *)(v25 + 100);
  int32x4_t v31 = (int32x4_t)vmulq_f32(v27, v30);
  float32x4_t v146 = 0u;
  long long v147 = 0u;
  float32x2_t v32 = vpmin_f32((float32x2_t)vdup_laneq_s32(v31, 2), *(float32x2_t *)v31.i8);
  v32.f32[0] = vpmin_f32(v32, v32).f32[0];
  *(float32x2_t *)&long long v147 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v32.f32[0]);
  *((float *)&v147 + 2) = 0.025 * v32.f32[0];
  __asm { FMOV            V4.2S, #1.0 }
  if (v29)
  {
    long long v149 = xmmword_23435FD50;
    long long v150 = xmmword_23435FD60;
    long long v151 = xmmword_23435FD80;
    long long v152 = xmmword_23435FD50;
    long long v153 = xmmword_23435FD60;
    long long v154 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v38 = vrecpeq_f32(v27);
    int v39 = 4;
    do
    {
      float32x4_t v38 = vmulq_f32(v38, vrecpsq_f32(v38, v27));
      --v39;
    }
    while (v39);
    *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v26.f32, 0);
    v40.i64[1] = v40.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v40, v27)), *(int8x8_t *)&a7).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 1);
      float32x2_t v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 2);
      float32x2_t v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 3);
      float32x4_t v50 = vaddq_f32(v28, v28);
      float32x2_t v51 = vmul_lane_f32(v47, *(float32x2_t *)v50.f32, 1);
      float32x2_t v52 = vmul_laneq_f32(v48, v50, 2);
      float32x2_t v53 = vmul_n_f32(v47, v50.f32[0]);
      float32x2_t v54 = vmul_n_f32(v48, v50.f32[0]);
      float32x2_t v55 = vmul_n_f32(v49, v50.f32[0]);
      float32x2_t v56 = vmul_lane_f32(v48, *(float32x2_t *)v50.f32, 1);
      float32x2_t v57 = vmul_lane_f32(v49, *(float32x2_t *)v50.f32, 1);
      float32x2_t v58 = vmul_laneq_f32(v49, v50, 2);
      float32x2_t v59 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v50.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v51), v52), (int8x8_t)vadd_f32(v53, v58), 4uLL);
      v50.i64[1] = vsub_f32(v54, v57).u32[0];
      *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vsub_f32(v53, v58), (int8x8_t)vsub_f32(v59, v52), 4uLL);
      *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), *(int8x8_t *)v60.f32, 4uLL);
      v60.i64[1] = vadd_f32(v56, v55).u32[0];
      int32x2_t v62 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v54, v57), (int8x8_t)vsub_f32(v56, v55), 4uLL);
      *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v60.f32, 1), 4uLL);
      *(int32x2_t *)v64.f32 = v62;
      v64.i64[1] = vsub_f32(v59, v51).u32[0];
      v61.i64[1] = vdup_lane_s32(v62, 0).u32[0];
      v63.i64[1] = vdup_lane_s32(v62, 1).u32[0];
      *(int8x8_t *)v65.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v50.u32[2], 0), *(int8x8_t *)&v60.u32[2], 4uLL);
      v65.i64[1] = vdup_lane_s32(*(int32x2_t *)&v64.u32[2], 0).u32[0];
      float32x4_t v66 = vmulq_n_f32(v61, v26.f32[0]);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_lane_f32(v63, *(float32x2_t *)v26.f32, 1);
      v67.i32[3] = 0;
      float32x4_t v68 = vmulq_laneq_f32(v65, v26, 2);
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_n_f32(v66, v50.f32[0]);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_lane_f32(v67, *(float32x2_t *)v50.f32, 1);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_laneq_f32(v68, v50, 2);
      v71.i32[3] = 0;
      float32x4_t v41 = vaddq_f32(v71, vaddq_f32(v69, v70));
      float32x4_t v72 = vmulq_n_f32(v66, v60.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v67, *(float32x2_t *)v60.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_laneq_f32(v68, v60, 2);
      v74.i32[3] = 0;
      float32x4_t v42 = vaddq_f32(v74, vaddq_f32(v72, v73));
      float32x4_t v75 = vmulq_n_f32(v66, v64.f32[0]);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_lane_f32(v67, *(float32x2_t *)v64.f32, 1);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_laneq_f32(v68, v64, 2);
      v77.i32[3] = 0;
      float32x4_t v43 = vaddq_f32(v77, vaddq_f32(v75, v76));
      long long v149 = (__int128)v41;
      long long v150 = (__int128)v42;
      float32x4_t v78 = vmulq_n_f32(v61, v38.f32[0]);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_lane_f32(v63, *(float32x2_t *)v38.f32, 1);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_laneq_f32(v65, v38, 2);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_n_f32(v78, v50.f32[0]);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_lane_f32(v79, *(float32x2_t *)v50.f32, 1);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_laneq_f32(v80, v50, 2);
      v83.i32[3] = 0;
      float32x4_t v44 = vaddq_f32(v83, vaddq_f32(v81, v82));
      float32x4_t v84 = vmulq_n_f32(v78, v60.f32[0]);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_lane_f32(v79, *(float32x2_t *)v60.f32, 1);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_laneq_f32(v80, v60, 2);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_n_f32(v78, v64.f32[0]);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_lane_f32(v79, *(float32x2_t *)v64.f32, 1);
      v88.i32[3] = 0;
      float32x4_t v45 = vaddq_f32(v86, vaddq_f32(v84, v85));
      float32x4_t v89 = vmulq_laneq_f32(v80, v64, 2);
      v89.i32[3] = 0;
      float32x4_t v46 = vaddq_f32(v89, vaddq_f32(v87, v88));
    }
    else
    {
      v38.i32[3] = 0;
      float32x4_t v41 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD50);
      float32x4_t v42 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD60);
      float32x4_t v43 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD80);
      long long v149 = (__int128)v41;
      long long v150 = (__int128)v42;
      float32x4_t v44 = vmulq_f32(v38, (float32x4_t)xmmword_23435FD50);
      float32x4_t v45 = vmulq_f32(v38, (float32x4_t)xmmword_23435FD60);
      float32x4_t v46 = vmulq_f32(v38, (float32x4_t)xmmword_23435FD80);
    }
    long long v151 = (__int128)v43;
    long long v152 = (__int128)v44;
    long long v153 = (__int128)v45;
    long long v154 = (__int128)v46;
    float32x4_t v90 = vmulq_f32(v41, (float32x4_t)0);
    v90.i32[3] = 0;
    float32x4_t v91 = vmulq_f32(v42, (float32x4_t)0);
    v91.i32[3] = 0;
    float32x4_t v92 = vmulq_f32(v43, (float32x4_t)0);
    v92.i32[3] = 0;
    float32x4_t v146 = vaddq_f32(v92, vaddq_f32(v91, v90));
  }
  BOOL v93 = 0;
  v94.i64[0] = __PAIR64__(LODWORD(v19), LODWORD(v20));
  v94.i64[1] = LODWORD(v21);
  int8x16_t v95 = *(int8x16_t *)a6;
  v96.i64[0] = a6[1].i64[0];
  v96.i64[1] = a6[1].u32[2];
  float32x4_t v97 = vnegq_f32(*a6);
  float32x4_t v98 = v97;
  v98.i32[3] = 0;
  float32x4_t v99 = vsubq_f32(v94, v96);
  float32x2_t v100 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a6, 3).u64[0];
  float32x4_t v101 = vmulq_n_f32(v99, vmla_f32((float32x2_t)0xBF000000BF000000, v100, v100).f32[0]);
  v101.i32[3] = 0;
  float32x2_t v102 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
  float32x2_t v103 = (float32x2_t)vext_s8(*(int8x8_t *)v97.f32, (int8x8_t)v102, 4uLL);
  int8x8_t v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL)), v103, *(float32x2_t *)v99.f32);
  *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v99.f32), *(float32x2_t *)v97.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL)), 4uLL);
  v105.i64[1] = v104.u32[0];
  float32x4_t v106 = vmlaq_laneq_f32(v101, v105, *a6, 3);
  v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
  float32x4_t v107 = vmulq_f32(v98, v99);
  v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
  float32x4_t v108 = vmlaq_n_f32(v106, v98, vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32).f32[0]);
  float32x4_t v109 = *a4;
  v109.i32[3] = 0;
  float32x4_t v110 = vmulq_f32(v109, v98);
  v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
  float32x4_t v111 = vmulq_laneq_f32(v109, *a6, 3);
  v109.i64[0] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
  int8x8_t v112 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, *(int8x8_t *)v109.f32, 4uLL)), v103, *(float32x2_t *)a4->f32);
  *(int8x8_t *)v113.f32 = vext_s8(v112, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, v102), *(float32x2_t *)v97.f32, *(float32x2_t *)v109.f32), 4uLL);
  *(int8x8_t *)&v113.u32[2] = v112;
  float32x4_t v114 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v98, *a4, 3), v111), v113);
  *(int32x2_t *)v97.f32 = vdup_lane_s32(*(int32x2_t *)v114.f32, 1);
  *(int32x2_t *)v109.f32 = vdup_laneq_s32((int32x4_t)v114, 2);
  float32x4_t v115 = vaddq_f32(v114, v114);
  *(float32x2_t *)v98.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)), vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32));
  float32x2_t v116 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
  *(int32x2_t *)v111.f32 = vdup_laneq_s32((int32x4_t)v115, 2);
  *(int32x2_t *)v114.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v115.f32), 0);
  float32x2_t v117 = vmul_lane_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v115.f32, 1);
  float32x2_t v118 = vmul_laneq_f32(*(float32x2_t *)v109.f32, v115, 2);
  *(float32x2_t *)v97.f32 = vmul_n_f32(*(float32x2_t *)v97.f32, v115.f32[0]);
  float32x2_t v119 = vmul_n_f32(*(float32x2_t *)v109.f32, v115.f32[0]);
  *(float32x2_t *)v109.f32 = vmul_lane_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32, 1);
  *(float32x2_t *)v115.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 0), *(float32x2_t *)v98.f32, 1);
  float32x2_t v120 = vmul_lane_f32(v116, *(float32x2_t *)v98.f32, 1);
  *(float32x2_t *)v98.f32 = vmul_lane_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v98.f32, 1);
  *(float32x2_t *)v114.f32 = vsub_f32(_D4, *(float32x2_t *)v114.f32);
  *(int8x8_t *)v121.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v117), v118), (int8x8_t)vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v98.f32), 4uLL);
  *(float32x2_t *)&v121.u32[2] = vsub_f32(v119, v120);
  uint64_t v156 = *(void *)(v25 + 80);
  float32x4_t v122 = vaddq_f32(v108, v108);
  v122.i32[3] = 0;
  *(int8x8_t *)v97.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v98.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v114.f32, v118), 4uLL);
  *(float32x2_t *)&v97.u32[2] = vadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32);
  *(int8x8_t *)v98.f32 = vext_s8((int8x8_t)vadd_f32(v119, v120), (int8x8_t)vsub_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v115.f32), 4uLL);
  *(float32x2_t *)&v98.u32[2] = vsub_f32(*(float32x2_t *)v114.f32, v117);
  v135[0] = v95;
  v135[1] = v96;
  float32x4_t v134 = 0uLL;
  float32x4_t v123 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v23);
  float32x4_t v124 = vmulq_n_f32(v121, v123.f32[0]);
  v124.i32[3] = 0;
  float32x4_t v125 = vmulq_lane_f32(v97, *(float32x2_t *)v123.f32, 1);
  v125.i32[3] = 0;
  float32x4_t v126 = vmulq_laneq_f32(v98, v123, 2);
  v126.i32[3] = 0;
  float32x2_t v133 = 0;
  float32x4_t v127 = vaddq_f32(v126, vaddq_f32(v124, v125));
  int v141 = 4;
  float32x4_t v137 = v122;
  int32x2_t v145 = v24;
  float32x4_t v143 = vaddq_f32(v122, v127);
  float32x4_t v144 = vsubq_f32(v122, v127);
  int v138 = LODWORD(a7);
  int v139 = LODWORD(a7);
  int v140 = LODWORD(a7);
  char v142 = 1;
  if (v26.f32[0] == 1.0 && *(float *)(a5 + 8) == 1.0) {
    BOOL v93 = *(float *)(a5 + 12) == 1.0;
  }
  physx::Gu::getPCMConvexData(&v146, v93, (uint64_t)v136);
  v159[4] = v135;
  v159[5] = &v149;
  v159[6] = &v152;
  if (v93)
  {
    char v128 = 1;
    float32x4_t v129 = &unk_26E728728;
  }
  else
  {
    char v128 = 0;
    float32x4_t v129 = &unk_26E728778;
  }
  char v160 = v128;
  v159[0] = v129;
  float32x4_t v161 = &v146;
  double v130 = physx::Gu::computeMTD(&v137, (uint64_t)v136, v159, &v133, &v134);
  if (v131)
  {
    *a2 = fmaxf(v133.f32[0], 0.0);
    LODWORD(v13physx::Sq::AABBTree::release(this, 0) = v134.i32[2];
    *(void *)a1 = v134.i64[0];
    *(_DWORD *)(a1 + 8) = LODWORD(v130);
  }
  return *(float *)&v130;
}

uint64_t GeomMTDCallback_CapsuleMesh(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float v6 = v5;
  float v8 = v7;
  uint64_t v47 = *MEMORY[0x263EF8340];
  float v10 = *v9;
  float v11 = v9[1];
  float v12 = v10 + v10;
  float v14 = v9[2];
  float v13 = v9[3];
  float v15 = v13 + v13;
  float v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  float v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  float v18 = (float)(v12 * v14) - (float)(v11 * v15);
  int v21 = *(_DWORD *)(v19 + 4);
  float v20 = *(float *)(v19 + 8);
  float v22 = v16 * v20;
  float v23 = v20 * v17;
  float v24 = v18 * v20;
  float v25 = v9[4];
  float v26 = v9[5];
  float v27 = v9[6];
  v31.f32[0] = v25 + v22;
  v31.f32[1] = v26 + v23;
  float v32 = v24 + v27;
  v33.f32[0] = v25 - v22;
  v33.f32[1] = v26 - v23;
  float v34 = v27 - v24;
  int v35 = v21;
  int v41 = 0;
  physx::PxTransformFromSegment(&v31, &v33, (float *)&v41, (uint64_t)v40);
  v46[0] = -1;
  LODWORD(v42) = 2;
  HIDWORD(v42) = v21;
  int v43 = v41;
  physx::Gu::GeometryUnion::set((uint64_t)v46, &v42);
  v45[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v45, v4);
  int v39 = 0;
  uint64_t v38 = 0;
  unsigned int v44 = 0;
  uint64_t v36 = 0;
  int v37 = 1065353216;
  BOOL v28 = physx::Gu::contactCapsuleMesh((uint64_t)v46, (uint64_t)v45, v40, v2, (float *)&v36, (uint64_t)&v38, (uint64_t)&v42);
  uint64_t result = 0;
  if (v28)
  {
    unsigned int v30 = v44;
    LODWORD(result) = processContacts(v8, v6, v44, (uint64_t)&v42);
    if (v30) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GeomMTDCallback_CapsuleHeightField(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float v6 = v5;
  float v8 = v7;
  uint64_t v48 = *MEMORY[0x263EF8340];
  float v10 = *v9;
  float v11 = v9[1];
  float v12 = v10 + v10;
  float v14 = v9[2];
  float v13 = v9[3];
  float v15 = v13 + v13;
  float v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  float v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  float v18 = (float)(v12 * v14) - (float)(v11 * v15);
  int v21 = *(_DWORD *)(v19 + 4);
  float v20 = *(float *)(v19 + 8);
  float v22 = v16 * v20;
  float v23 = v20 * v17;
  float v24 = v18 * v20;
  float v25 = v9[4];
  float v26 = v9[5];
  float v27 = v9[6];
  v32.f32[0] = v25 + v22;
  v32.f32[1] = v26 + v23;
  float v33 = v24 + v27;
  v34.f32[0] = v25 - v22;
  v34.f32[1] = v26 - v23;
  float v35 = v27 - v24;
  int v36 = v21;
  int v42 = 0;
  physx::PxTransformFromSegment(&v32, &v34, (float *)&v42, (uint64_t)v41);
  v47[0] = -1;
  LODWORD(v43) = 2;
  HIDWORD(v43) = v21;
  int v44 = v42;
  physx::Gu::GeometryUnion::set((uint64_t)v47, &v43);
  v46[0].i32[0] = -1;
  *(void *)&double v28 = physx::Gu::GeometryUnion::set((uint64_t)v46, v4).n128_u64[0];
  int v40 = 0;
  uint64_t v39 = 0;
  unsigned int v45 = 0;
  uint64_t v37 = 0;
  int v38 = 1065353216;
  BOOL v29 = physx::Gu::contactCapsuleHeightfield((uint64_t)v47, v46, v41, v2, (float *)&v37, v28, (uint64_t)&v39, (uint64_t)&v43);
  uint64_t result = 0;
  if (v29)
  {
    unsigned int v31 = v45;
    LODWORD(result) = processContacts(v8, v6, v45, (uint64_t)&v43);
    if (v31) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL GeomMTDCallback_BoxBox(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  float32x2_t v9 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  float32x2_t v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  float32x4_t v11 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  float32x2_t v12 = vmul_lane_f32(v8, *(float32x2_t *)v11.f32, 1);
  float32x2_t v13 = vmul_laneq_f32(v9, v11, 2);
  float32x2_t v14 = vmul_n_f32(v8, v11.f32[0]);
  float32x2_t v15 = vmul_n_f32(v9, v11.f32[0]);
  float32x2_t v16 = vmul_n_f32(v10, v11.f32[0]);
  float32x2_t v17 = vmul_lane_f32(v9, *(float32x2_t *)v11.f32, 1);
  float32x2_t v18 = vmul_lane_f32(v10, *(float32x2_t *)v11.f32, 1);
  float32x2_t v19 = vmul_laneq_f32(v10, v11, 2);
  __asm { FMOV            V0.2S, #1.0 }
  *(float32x2_t *)v11.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v11.f32), 0));
  float32x2_t v24 = vadd_f32(v14, v19);
  float32x2_t v25 = vsub_f32(v15, v18);
  float32x2_t v26 = vsub_f32(*(float32x2_t *)v11.f32, v13);
  float32x2_t v27 = vadd_f32(v17, v16);
  float32x2_t v28 = vadd_f32(v15, v18);
  float32x2_t v29 = vsub_f32(v17, v16);
  float32x2_t v30 = vsub_f32(*(float32x2_t *)v11.f32, v12);
  float v31 = (float)(1.0 - v12.f32[1]) - v13.f32[1];
  float v122 = v31;
  float v112 = v25.f32[0];
  float v114 = v24.f32[0];
  *(float32x2_t *)v32.i8 = v24;
  v32.u64[1] = (unint64_t)v25;
  *(float32x2_t *)v33.i8 = vsub_f32(v14, v19);
  float v108 = v27.f32[0];
  float v110 = v26.f32[0];
  v33.u64[1] = (unint64_t)v26;
  int32x4_t v34 = vuzp1q_s32(v32, v33);
  __int32 v106 = v33.i32[1];
  float v107 = v28.f32[1];
  v34.i32[2] = v33.i32[1];
  *(float32x2_t *)v33.i8 = v27;
  v33.u64[1] = (unint64_t)v28;
  float v102 = v30.f32[0];
  float v103 = v29.f32[0];
  *(float32x2_t *)v11.f32 = v29;
  *(float32x2_t *)&v11.u32[2] = v30;
  int32x4_t v35 = vuzp1q_s32(v33, (int32x4_t)v11);
  v35.i32[1] = v28.i32[1];
  int32x4_t v123 = v34;
  int32x4_t v124 = v35;
  int v125 = *(_DWORD *)(a4 + 16);
  v35.i64[0] = *(void *)(a4 + 20);
  float32x2_t v95 = *(float32x2_t *)v35.i8;
  v35.i64[1] = *(void *)(a3 + 4);
  int32x4_t v126 = v35;
  float32x4_t v36 = *(float32x4_t *)a6;
  *(int32x2_t *)v11.f32 = vdup_lane_s32(*(int32x2_t *)a6, 1);
  float32x2_t v37 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 2);
  float32x2_t v38 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a6, 3);
  int v127 = *(_DWORD *)(a3 + 12);
  float32x4_t v39 = vaddq_f32(v36, v36);
  *(int32x2_t *)v36.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v39.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32, 1);
  float32x2_t v41 = vmul_laneq_f32(v37, v39, 2);
  *(float32x2_t *)v11.f32 = vmul_n_f32(*(float32x2_t *)v11.f32, v39.f32[0]);
  float32x2_t v42 = vmul_n_f32(v37, v39.f32[0]);
  float32x2_t v43 = vmul_n_f32(v38, v39.f32[0]);
  float32x2_t v44 = vmul_lane_f32(v37, *(float32x2_t *)v39.f32, 1);
  float32x2_t v45 = vmul_lane_f32(v38, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_laneq_f32(v38, v39, 2);
  float32x2_t v46 = vsub_f32(_D0, *(float32x2_t *)v36.f32);
  float32x2_t v47 = vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32);
  float32x2_t v48 = vsub_f32(v42, v45);
  float32x2_t v49 = vsub_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v39.f32);
  *(float32x2_t *)v11.f32 = vsub_f32(v46, v41);
  float32x2_t v50 = vadd_f32(v44, v43);
  float32x2_t v51 = vadd_f32(v42, v45);
  *(float32x2_t *)v39.f32 = vsub_f32(v44, v43);
  *(float32x2_t *)v36.f32 = vsub_f32(v46, v40);
  float v52 = (float)(1.0 - v40.f32[1]) - v41.f32[1];
  float v116 = v52;
  float v100 = v48.f32[0];
  float v101 = v47.f32[0];
  *(float32x2_t *)v53.i8 = v47;
  v53.u64[1] = (unint64_t)v48;
  *(float32x2_t *)v54.i8 = v49;
  float v98 = v50.f32[0];
  float v99 = v11.f32[0];
  v54.i64[1] = v11.i64[0];
  int32x4_t v55 = vuzp1q_s32(v53, v54);
  float v104 = v49.f32[1];
  float v105 = v51.f32[1];
  v55.i32[2] = v49.i32[1];
  *(float32x2_t *)v54.i8 = v50;
  v54.u64[1] = (unint64_t)v51;
  float v96 = v36.f32[0];
  float v97 = v39.f32[0];
  v39.i64[1] = v36.i64[0];
  int32x4_t v117 = v55;
  int32x4_t v56 = vuzp1q_s32(v54, (int32x4_t)v39);
  v56.i32[1] = v51.i32[1];
  int32x4_t v118 = v56;
  int v119 = *(_DWORD *)(a6 + 16);
  v54.i64[0] = *(void *)(a6 + 20);
  float32x2_t v94 = *(float32x2_t *)v54.i8;
  v54.i64[1] = *(void *)(a5 + 4);
  int32x4_t v120 = v54;
  int v121 = *(_DWORD *)(a5 + 12);
  v128[0] = 0.0;
  BOOL result = PxcTestAxis(&v122, &v122, &v116, v128);
  if (!result) {
    return result;
  }
  float v58 = v128[0];
  v128[0] = 0.0;
  if (!PxcTestAxis((float *)&v123.i32[2], &v122, &v116, v128)) {
    return 0;
  }
  float v59 = fminf(v58, 3.4028e38);
  if (v128[0] < v59) {
    float v60 = v128[0];
  }
  else {
    float v60 = v59;
  }
  if (v128[0] >= v59)
  {
    float v61 = v114;
  }
  else
  {
    float v31 = *(float *)&v106;
    float v61 = v110;
  }
  if (v128[0] < v59) {
    float v62 = v108;
  }
  else {
    float v62 = v112;
  }
  v128[0] = 0.0;
  BOOL result = PxcTestAxis((float *)&v124.i32[1], &v122, &v116, v128);
  if (!result) {
    return result;
  }
  if (v128[0] < v60)
  {
    float v60 = v128[0];
    float v31 = v107;
    float v61 = v103;
    float v62 = v102;
  }
  v128[0] = 0.0;
  BOOL result = PxcTestAxis(&v116, &v122, &v116, v128);
  if (!result) {
    return result;
  }
  _NF = v128[0] < v60;
  if (v128[0] >= v60)
  {
    float v64 = v61;
  }
  else
  {
    float v60 = v128[0];
    float v31 = v52;
    float v64 = v101;
  }
  if (_NF) {
    float v62 = v100;
  }
  v128[0] = 0.0;
  BOOL result = PxcTestAxis((float *)&v117.i32[2], &v122, &v116, v128);
  if (!result) {
    return result;
  }
  float v65 = v128[0];
  BOOL v66 = v128[0] < v60;
  if (v128[0] >= v60) {
    float v65 = v60;
  }
  float v115 = v65;
  float v67 = v128[0] < v60 ? v104 : v31;
  float v68 = v66 ? v99 : v64;
  float v69 = v66 ? v98 : v62;
  v128[0] = 0.0;
  if (!PxcTestAxis((float *)&v118.i32[1], &v122, &v116, v128)) {
    return 0;
  }
  if (v128[0] < v115)
  {
    float v115 = v128[0];
    float v67 = v105;
    float v68 = v97;
    float v69 = v96;
  }
  float v109 = v69;
  float v111 = v68;
  float v113 = v67;
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v71 = 0;
    float32x4_t v72 = &v116 + 3 * i;
    float v73 = v72[1];
    float v74 = v72[2];
    float v75 = *v72;
    do
    {
      float v77 = *(float *)((char *)&v122 + v71 * 4 + 4);
      float v76 = *(float *)&v123.i32[v71 + 1];
      float v78 = *(float *)((char *)&v122 + v71 * 4);
      float v79 = (float)(v77 * v74) - (float)(v76 * v73);
      float v80 = (float)(v76 * v75) - (float)(v78 * v74);
      float v81 = (float)(v78 * v73) - (float)(v77 * v75);
      if (fabsf(v79) > 0.000001 || fabsf(v80) > 0.000001 || fabsf(v81) > 0.000001)
      {
        float v82 = (float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81);
        float v83 = 0.0;
        float v84 = 0.0;
        float v85 = 0.0;
        if (v82 > 0.0)
        {
          float v86 = 1.0 / sqrtf(v82);
          float v85 = v79 * v86;
          float v84 = v80 * v86;
          float v83 = v81 * v86;
        }
        v128[0] = v85;
        v128[1] = v84;
        v128[2] = v83;
        float v129 = 0.0;
        BOOL result = PxcTestAxis(v128, &v122, &v116, &v129);
        if (!result) {
          return result;
        }
        if (v129 < v115)
        {
          float v115 = v129;
          float v113 = v85;
          float v111 = v84;
          float v109 = v83;
        }
      }
      v71 += 3;
    }
    while (v71 != 9);
  }
  _D1 = vsub_f32(v94, v95);
  _S5 = v109;
  __asm { FMLA            S0, S5, V1.S[1] }
  BOOL v90 = _S0 < 0.0;
  if (_S0 >= 0.0) {
    float v91 = -v113;
  }
  else {
    float v91 = v113;
  }
  float v92 = -v111;
  if (v90) {
    float v92 = v111;
  }
  float v93 = -v109;
  if (v90) {
    float v93 = v109;
  }
  *a1 = v91;
  a1[1] = v92;
  a1[2] = v93;
  *a2 = fmaxf(v115, 0.0);
  return 1;
}

float GeomMTDCallback_BoxConvex(uint64_t a1, float *a2, uint64_t a3, int32x2_t *a4, uint64_t a5, long long *a6, double a7, int32x4_t a8)
{
  uint64_t v182 = *MEMORY[0x263EF8340];
  float32x4_t v33 = *(float32x4_t *)a4->i8;
  float32x2_t v9 = (float32x2_t)vdup_lane_s32(*a4, 1);
  float32x2_t v10 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4->i8, 2);
  float32x2_t v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4->i8, 3);
  float32x4_t v12 = vaddq_f32(v33, v33);
  float32x2_t v13 = vmul_lane_f32(v9, *(float32x2_t *)v12.f32, 1);
  float32x2_t v14 = vmul_laneq_f32(v10, v12, 2);
  float32x2_t v15 = vmul_n_f32(v9, v12.f32[0]);
  float32x2_t v16 = vmul_n_f32(v10, v12.f32[0]);
  float32x2_t v17 = vmul_n_f32(v11, v12.f32[0]);
  float32x2_t v18 = vmul_lane_f32(v10, *(float32x2_t *)v12.f32, 1);
  float32x2_t v19 = vmul_lane_f32(v11, *(float32x2_t *)v12.f32, 1);
  float32x2_t v20 = vmul_laneq_f32(v11, v12, 2);
  __asm { FMOV            V6.2S, #1.0 }
  *(float32x2_t *)v33.f32 = vsub_f32(_D6, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a4, *(float32x2_t *)v12.f32), 0));
  LODWORD(v25) = vadd_f32(v15, v20).u32[0];
  LODWORD(v26) = vsub_f32(v16, v19).u32[0];
  *(float32x2_t *)a8.i8 = vsub_f32(v15, v20);
  LODWORD(v27) = vsub_f32(*(float32x2_t *)v33.f32, v14).u32[0];
  float32x2_t v28 = vadd_f32(v18, v17);
  float32x2_t v29 = vadd_f32(v16, v19);
  float32x2_t v30 = vsub_f32(v18, v17);
  float v31 = vsub_f32(*(float32x2_t *)v33.f32, v13).f32[0];
  float v32 = (float)(1.0 - v13.f32[1]) - v14.f32[1];
  v33.i64[0] = *(void *)(a3 + 4);
  a8.i32[0] = *(_DWORD *)(a3 + 12);
  if (v31 >= 0.0)
  {
    float v50 = v25 - *(float *)&a8.i32[1];
    _NF = v32 < (float)-v27;
    float v52 = v31 + (float)(v27 + (float)(v32 + 1.0));
    float v53 = 0.5 / sqrtf(v52);
    v29.f32[0] = v53 * vsub_f32(v28, v30).f32[0];
    float v54 = (float)(v29.f32[1] - v26) * v53;
    float v55 = v52 * v53;
    float v56 = v31 + (float)((float)(1.0 - v32) - v27);
    float v57 = vadd_f32(v28, v30).f32[0];
    float v58 = 0.5 / sqrtf(v56);
    *(float *)&long long v46 = (float)(v29.f32[1] + v26) * v58;
    float v59 = v58 * v57;
    float v48 = v56 * v58;
    float v60 = v50 * v58;
    if (_NF)
    {
      float v47 = v59;
    }
    else
    {
      *(float *)&long long v46 = v29.f32[0];
      float v47 = v54;
    }
    if (_NF)
    {
      float v49 = v60;
    }
    else
    {
      float v48 = v50 * v53;
      float v49 = v55;
    }
  }
  else
  {
    float v34 = v25 + *(float *)&a8.i32[1];
    BOOL v35 = v32 <= v27;
    float v36 = (float)(v27 + (float)(1.0 - v32)) - v31;
    float v37 = 0.5 / sqrtf(v36);
    float v38 = v36 * v37;
    v29.f32[0] = v37 * vadd_f32(v28, v30).f32[0];
    float v39 = (float)(v29.f32[1] - v26) * v37;
    float v40 = (float)((float)(v32 + 1.0) - v27) - v31;
    float v41 = vsub_f32(v28, v30).f32[0];
    float v42 = 0.5 / sqrtf(v40);
    float v43 = v40 * v42;
    float v44 = (float)(v29.f32[1] + v26) * v42;
    float v45 = v42 * v41;
    if (v35) {
      *(float *)&long long v46 = v34 * v37;
    }
    else {
      *(float *)&long long v46 = v43;
    }
    if (v35) {
      float v47 = v38;
    }
    else {
      float v47 = v34 * v42;
    }
    if (v35) {
      float v48 = v29.f32[0];
    }
    else {
      float v48 = v44;
    }
    if (v35) {
      float v49 = v39;
    }
    else {
      float v49 = v45;
    }
  }
  BOOL v61 = 0;
  *(int32x2_t *)&long long v62 = a4[2];
  *((float *)&v46 + 1) = v47;
  unsigned __int32 v63 = a4[3].u32[0];
  *((float *)&v46 + 2) = v48;
  int32x4_t v64 = (int32x4_t)v33;
  v64.i32[2] = *(_DWORD *)(a3 + 12);
  float32x2_t v65 = (float32x2_t)vdup_laneq_s32(v64, 2);
  v64.i32[3] = 0;
  int v146 = 3;
  char v147 = 0;
  v142[0] = 0;
  v142[1] = 0;
  int32x4_t v148 = v64;
  *(float32x2_t *)v64.i8 = vpmin_f32(v65, *(float32x2_t *)v33.f32);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  float v143 = 0.15 * *(float *)v64.i32;
  float v144 = 0.05 * *(float *)v64.i32;
  float v145 = 0.05 * *(float *)v64.i32;
  uint64_t v66 = *(void *)(a5 + 32);
  float32x4_t v67 = *(float32x4_t *)(a5 + 4);
  float32x4_t v68 = v67;
  v68.i32[3] = 0;
  LODWORD(v69) = HIDWORD(*(void *)(a5 + 4));
  if (v67.f32[0] == 1.0 && v69 == 1.0) {
    BOOL v61 = v67.f32[2] == 1.0;
  }
  *((float *)&v46 + 3) = v49;
  float32x4_t v70 = *(float32x4_t *)(a5 + 16);
  long long v164 = 0u;
  char v165 = 0;
  float32x4_t v163 = 0u;
  uint64_t v172 = v66 + 32;
  uint64_t v174 = *(void *)(v66 + 72) + 20 * *(unsigned __int8 *)(v66 + 71);
  char v175 = *(unsigned char *)(v66 + 70);
  v71.i64[0] = *(void *)(v66 + 92);
  v71.i64[1] = *(unsigned int *)(v66 + 100);
  int32x4_t v72 = (int32x4_t)vmulq_f32(v68, v71);
  *(float32x2_t *)v72.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v72, 2), *(float32x2_t *)v72.i8);
  *(float *)v72.i32 = vpmin_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8).f32[0];
  *(float32x2_t *)&long long v164 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v72.i32);
  *((float *)&v164 + 2) = 0.025 * *(float *)v72.i32;
  if (v61)
  {
    long long v166 = xmmword_23435FD50;
    long long v167 = xmmword_23435FD60;
    long long v168 = xmmword_23435FD80;
    long long v169 = xmmword_23435FD50;
    long long v170 = xmmword_23435FD60;
    long long v171 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v73 = vrecpeq_f32(v68);
    int v74 = 4;
    do
    {
      float32x4_t v73 = vmulq_f32(v73, vrecpsq_f32(v73, v68));
      --v74;
    }
    while (v74);
    *(int32x2_t *)v75.f32 = vdup_lane_s32(*(int32x2_t *)v67.f32, 0);
    v75.i64[1] = v75.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v75, v68)), *(int8x8_t *)v33.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 1);
      float32x2_t v83 = (float32x2_t)vdup_laneq_s32((int32x4_t)v70, 2);
      float32x2_t v84 = (float32x2_t)vdup_laneq_s32((int32x4_t)v70, 3);
      float32x4_t v85 = vaddq_f32(v70, v70);
      float32x2_t v86 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v85.f32), 0);
      float32x2_t v87 = vmul_lane_f32(v82, *(float32x2_t *)v85.f32, 1);
      float32x2_t v88 = vmul_laneq_f32(v83, v85, 2);
      float32x2_t v89 = vmul_n_f32(v82, v85.f32[0]);
      float32x2_t v90 = vmul_n_f32(v83, v85.f32[0]);
      float32x2_t v91 = vmul_n_f32(v84, v85.f32[0]);
      float32x2_t v92 = vmul_lane_f32(v83, *(float32x2_t *)v85.f32, 1);
      float32x2_t v93 = vmul_lane_f32(v84, *(float32x2_t *)v85.f32, 1);
      float32x2_t v94 = vmul_laneq_f32(v84, v85, 2);
      *(float32x2_t *)v85.f32 = vsub_f32(_D6, v86);
      *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v87), v88), (int8x8_t)vadd_f32(v89, v94), 4uLL);
      v95.i64[1] = vsub_f32(v90, v93).u32[0];
      *(int8x8_t *)v96.f32 = vext_s8((int8x8_t)vsub_f32(v89, v94), (int8x8_t)vsub_f32(*(float32x2_t *)v85.f32, v88), 4uLL);
      *(int8x8_t *)v97.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v95.f32, 0), *(int8x8_t *)v96.f32, 4uLL);
      v96.i64[1] = vadd_f32(v92, v91).u32[0];
      *(int8x8_t *)v98.f32 = vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v96.f32, 1), 4uLL);
      v85.i32[0] = vsub_f32(*(float32x2_t *)v85.f32, v87).u32[0];
      *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vadd_f32(v90, v93), (int8x8_t)vsub_f32(v92, v91), 4uLL);
      v99.i64[1] = v85.u32[0];
      v97.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 0).u32[0];
      v98.i64[1] = vdup_lane_s32(*(int32x2_t *)v99.f32, 1).u32[0];
      v90.i32[0] = vdup_lane_s32((int32x2_t)v85.u32[0], 0).u32[0];
      *(int8x8_t *)v85.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v95.u32[2], 0), *(int8x8_t *)&v96.u32[2], 4uLL);
      v85.i64[1] = v90.u32[0];
      float32x4_t v100 = vmulq_n_f32(v97, v67.f32[0]);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_lane_f32(v98, *(float32x2_t *)v67.f32, 1);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_laneq_f32(v85, v67, 2);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_n_f32(v100, v95.f32[0]);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_lane_f32(v101, *(float32x2_t *)v95.f32, 1);
      v104.i32[3] = 0;
      float32x4_t v105 = vmulq_laneq_f32(v102, v95, 2);
      v105.i32[3] = 0;
      float32x4_t v106 = vaddq_f32(v103, v104);
      float32x4_t v107 = vmulq_n_f32(v100, v96.f32[0]);
      v107.i32[3] = 0;
      float32x4_t v108 = vmulq_lane_f32(v101, *(float32x2_t *)v96.f32, 1);
      v108.i32[3] = 0;
      float32x4_t v109 = vmulq_laneq_f32(v102, v96, 2);
      v109.i32[3] = 0;
      float32x4_t v76 = vaddq_f32(v105, v106);
      float32x4_t v77 = vaddq_f32(v109, vaddq_f32(v107, v108));
      float32x4_t v110 = vmulq_n_f32(v100, v99.f32[0]);
      v110.i32[3] = 0;
      float32x4_t v111 = vmulq_lane_f32(v101, *(float32x2_t *)v99.f32, 1);
      v111.i32[3] = 0;
      float32x4_t v112 = vmulq_laneq_f32(v102, v99, 2);
      v112.i32[3] = 0;
      float32x4_t v78 = vaddq_f32(v112, vaddq_f32(v110, v111));
      long long v166 = (__int128)v76;
      long long v167 = (__int128)v77;
      long long v168 = (__int128)v78;
      float32x4_t v113 = vmulq_n_f32(v97, v73.f32[0]);
      v113.i32[3] = 0;
      float32x4_t v114 = vmulq_lane_f32(v98, *(float32x2_t *)v73.f32, 1);
      v114.i32[3] = 0;
      float32x4_t v115 = vmulq_laneq_f32(v85, v73, 2);
      v115.i32[3] = 0;
      float32x4_t v116 = vmulq_n_f32(v113, v95.f32[0]);
      v116.i32[3] = 0;
      float32x4_t v117 = vmulq_lane_f32(v114, *(float32x2_t *)v95.f32, 1);
      v117.i32[3] = 0;
      float32x4_t v118 = vmulq_laneq_f32(v115, v95, 2);
      v118.i32[3] = 0;
      float32x4_t v119 = vaddq_f32(v116, v117);
      float32x4_t v120 = vmulq_n_f32(v113, v96.f32[0]);
      v120.i32[3] = 0;
      float32x4_t v121 = vmulq_lane_f32(v114, *(float32x2_t *)v96.f32, 1);
      v121.i32[3] = 0;
      float32x4_t v79 = vaddq_f32(v118, v119);
      float32x4_t v122 = vmulq_laneq_f32(v115, v96, 2);
      v122.i32[3] = 0;
      float32x4_t v80 = vaddq_f32(v122, vaddq_f32(v120, v121));
      float32x4_t v123 = vmulq_n_f32(v113, v99.f32[0]);
      v123.i32[3] = 0;
      float32x4_t v124 = vmulq_lane_f32(v114, *(float32x2_t *)v99.f32, 1);
      v124.i32[3] = 0;
      float32x4_t v125 = vmulq_laneq_f32(v115, v99, 2);
      v125.i32[3] = 0;
      float32x4_t v81 = vaddq_f32(v125, vaddq_f32(v123, v124));
      float v69 = *(float *)(a5 + 8);
    }
    else
    {
      v73.i32[3] = 0;
      float32x4_t v76 = vmulq_f32(v68, (float32x4_t)xmmword_23435FD50);
      float32x4_t v77 = vmulq_f32(v68, (float32x4_t)xmmword_23435FD60);
      float32x4_t v78 = vmulq_f32(v68, (float32x4_t)xmmword_23435FD80);
      long long v166 = (__int128)v76;
      long long v167 = (__int128)v77;
      long long v168 = (__int128)v78;
      float32x4_t v79 = vmulq_f32(v73, (float32x4_t)xmmword_23435FD50);
      float32x4_t v80 = vmulq_f32(v73, (float32x4_t)xmmword_23435FD60);
      float32x4_t v81 = vmulq_f32(v73, (float32x4_t)xmmword_23435FD80);
    }
    long long v169 = (__int128)v79;
    long long v170 = (__int128)v80;
    long long v171 = (__int128)v81;
    float32x4_t v126 = vmulq_f32(v76, (float32x4_t)0);
    v126.i32[3] = 0;
    float32x4_t v127 = vmulq_f32(v77, (float32x4_t)0);
    v127.i32[3] = 0;
    float32x4_t v128 = vmulq_f32(v78, (float32x4_t)0);
    v128.i32[3] = 0;
    float32x4_t v163 = vaddq_f32(v128, vaddq_f32(v127, v126));
  }
  BOOL v129 = 0;
  uint64_t v173 = *(void *)(v66 + 80);
  *((void *)&v62 + 1) = v63;
  long long v130 = *a6;
  *(void *)&long long v131 = *((void *)a6 + 2);
  *((void *)&v131 + 1) = *((unsigned int *)a6 + 6);
  v141[0] = v46;
  v141[1] = v62;
  v140[0] = v130;
  v140[1] = v131;
  float32x4_t v139 = 0uLL;
  int32x2_t v138 = 0;
  if (v67.f32[0] == 1.0 && v69 == 1.0) {
    BOOL v129 = *(float *)(a5 + 12) == 1.0;
  }
  uint64_t v136 = v33.i64[0];
  unsigned __int32 v137 = a8.i32[0];
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v151, (uint64_t)&v136, *(double *)v33.i64, a8);
  uint64_t v154 = 0;
  uint64_t v156 = 0x600000008;
  int v155 = 0;
  int v157 = 0;
  char v158 = &v153;
  float32x4_t v159 = &v152;
  long long v161 = 0u;
  long long v162 = 0u;
  char v160 = &physx::Gu::gPCMBoxPolygonData;
  physx::Gu::getPCMConvexData(&v163, v129, (uint64_t)v150);
  v149[0] = xmmword_23435FD50;
  v149[1] = xmmword_23435FD60;
  v149[2] = xmmword_23435FD80;
  v179[4] = v141;
  v179[5] = v149;
  v179[6] = v149;
  char v180 = 1;
  v179[0] = &unk_26E7286C8;
  float32x2_t v181 = v142;
  v176[4] = v140;
  v176[5] = &v166;
  v176[6] = &v169;
  if (v129)
  {
    char v132 = 1;
    float32x2_t v133 = &unk_26E728728;
  }
  else
  {
    char v132 = 0;
    float32x2_t v133 = &unk_26E728778;
  }
  char v177 = v132;
  v176[0] = v133;
  float32x4_t v178 = &v163;
  if (physx::Gu::computeMTD((uint64_t)&v154, (uint64_t)v150, (uint64_t)v179, (uint64_t)v176, &v138, &v139))
  {
    *a2 = fmaxf(*(float *)v138.i32, 0.0);
    float result = v139.f32[2];
    *(void *)a1 = v139.i64[0];
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t GeomMTDCallback_BoxMesh(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float v6 = v5;
  float32x2_t v8 = v7;
  uint64_t v86 = *MEMORY[0x263EF8340];
  float32x2_t v10 = (float32x2_t)vdup_lane_s32(*v9, 1);
  float32x2_t v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 2);
  float32x2_t v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)v9->i8, *(float32x4_t *)v9->i8);
  float32x2_t v14 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*v9, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v15 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v16 = vmul_laneq_f32(v11, _Q4, 2);
  float32x2_t v17 = vmul_n_f32(v10, _Q4.f32[0]);
  float32x2_t v18 = vmul_n_f32(v11, _Q4.f32[0]);
  float32x2_t v19 = vmul_n_f32(v12, _Q4.f32[0]);
  float32x2_t v20 = vmul_lane_f32(v11, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v22 = vmul_laneq_f32(v12, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v26 = vsub_f32(*(float32x2_t *)_Q4.f32, v14);
  LODWORD(v27) = vadd_f32(v17, v22).u32[0];
  LODWORD(v28) = vsub_f32(v18, v21).u32[0];
  float32x2_t v38 = vsub_f32(v17, v22);
  LODWORD(v29) = vsub_f32(v26, v16).u32[0];
  float32x2_t v30 = vadd_f32(v20, v19);
  float32x2_t v35 = vadd_f32(v18, v21);
  float32x2_t v31 = vsub_f32(v20, v19);
  float v32 = vsub_f32(v26, v15).f32[0];
  float v33 = (float)(1.0 - v15.f32[1]) - v16.f32[1];
  int32x2_t v34 = v9[2];
  v35.i32[0] = v9[3].i32[0];
  uint64_t v37 = *(void *)(v36 + 4);
  v38.i32[0] = *(_DWORD *)(v36 + 12);
  if (v32 >= 0.0)
  {
    float v56 = v27 - v38.f32[1];
    _NF = v33 < (float)-v29;
    float v58 = v32 + (float)(v29 + (float)(v33 + 1.0));
    float v59 = 0.5 / sqrtf(v58);
    float v60 = v59 * vsub_f32(v30, v31).f32[0];
    float v61 = (float)(v35.f32[1] - v28) * v59;
    float v62 = v58 * v59;
    float v63 = v32 + (float)((float)(1.0 - v33) - v29);
    float v64 = vadd_f32(v30, v31).f32[0];
    float v65 = 0.5 / sqrtf(v63);
    float v52 = (float)(v35.f32[1] + v28) * v65;
    float v53 = v65 * v64;
    float v66 = v63 * v65;
    float v67 = v56 * v65;
    if (_NF)
    {
      float v54 = v66;
    }
    else
    {
      float v52 = v60;
      float v53 = v61;
      float v54 = v56 * v59;
    }
    if (_NF) {
      float v55 = v67;
    }
    else {
      float v55 = v62;
    }
  }
  else
  {
    float v39 = v27 + v38.f32[1];
    BOOL v40 = v33 <= v29;
    float v41 = (float)(v29 + (float)(1.0 - v33)) - v32;
    float v42 = 0.5 / sqrtf(v41);
    float v43 = v41 * v42;
    float v44 = v42 * vadd_f32(v30, v31).f32[0];
    float v45 = (float)(v35.f32[1] - v28) * v42;
    float v46 = (float)((float)(v33 + 1.0) - v29) - v32;
    float v47 = vsub_f32(v30, v31).f32[0];
    float v48 = 0.5 / sqrtf(v46);
    float v49 = v46 * v48;
    float v50 = (float)(v35.f32[1] + v28) * v48;
    float v51 = v48 * v47;
    if (v40) {
      float v52 = v39 * v42;
    }
    else {
      float v52 = v49;
    }
    if (v40) {
      float v53 = v43;
    }
    else {
      float v53 = v39 * v48;
    }
    if (v40) {
      float v54 = v44;
    }
    else {
      float v54 = v50;
    }
    if (v40) {
      float v55 = v45;
    }
    else {
      float v55 = v51;
    }
  }
  *(float *)float32x4_t v77 = v52;
  *(float *)&v77[1] = v53;
  *(float *)&v77[2] = v54;
  *(float *)&float v77[3] = v55;
  int32x2_t v78 = v34;
  __int32 v79 = v35.i32[0];
  v85[0] = NAN;
  int v80 = 3;
  uint64_t v81 = v37;
  __int32 v82 = v38.i32[0];
  physx::Gu::GeometryUnion::set((uint64_t)v85, (uint64_t *)&v80);
  v84[0] = NAN;
  *(void *)&double v68 = physx::Gu::GeometryUnion::set((uint64_t)v84, v4).n128_u64[0];
  int v76 = 0;
  uint64_t v75 = 0;
  unsigned int v83 = 0;
  uint64_t v73 = 0;
  int v74 = 1065353216;
  BOOL v70 = physx::Gu::contactBoxMesh(v85, v84, (uint64_t)v77, v2, (uint64_t)&v73, v68, v69, (uint64_t)&v75, (uint64_t)&v80);
  uint64_t result = 0;
  if (v70)
  {
    unsigned int v72 = v83;
    LODWORD(result) = processContacts(v8, v6, v83, (uint64_t)&v80);
    if (v72) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GeomMTDCallback_BoxHeightField(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float v6 = v5;
  float32x2_t v8 = v7;
  uint64_t v85 = *MEMORY[0x263EF8340];
  float32x2_t v10 = (float32x2_t)vdup_lane_s32(*v9, 1);
  float32x2_t v11 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 2);
  float32x2_t v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v9->i8, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)v9->i8, *(float32x4_t *)v9->i8);
  float32x2_t v14 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*v9, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v15 = vmul_lane_f32(v10, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v16 = vmul_laneq_f32(v11, _Q4, 2);
  float32x2_t v17 = vmul_n_f32(v10, _Q4.f32[0]);
  float32x2_t v18 = vmul_n_f32(v11, _Q4.f32[0]);
  float32x2_t v19 = vmul_n_f32(v12, _Q4.f32[0]);
  float32x2_t v20 = vmul_lane_f32(v11, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v22 = vmul_laneq_f32(v12, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v26 = vsub_f32(*(float32x2_t *)_Q4.f32, v14);
  LODWORD(v27) = vadd_f32(v17, v22).u32[0];
  LODWORD(v28) = vsub_f32(v18, v21).u32[0];
  float32x2_t v38 = vsub_f32(v17, v22);
  LODWORD(v29) = vsub_f32(v26, v16).u32[0];
  float32x2_t v30 = vadd_f32(v20, v19);
  float32x2_t v35 = vadd_f32(v18, v21);
  float32x2_t v31 = vsub_f32(v20, v19);
  float v32 = vsub_f32(v26, v15).f32[0];
  float v33 = (float)(1.0 - v15.f32[1]) - v16.f32[1];
  int32x2_t v34 = v9[2];
  v35.i32[0] = v9[3].i32[0];
  uint64_t v37 = *(void *)(v36 + 4);
  v38.i32[0] = *(_DWORD *)(v36 + 12);
  if (v32 >= 0.0)
  {
    float v56 = v27 - v38.f32[1];
    _NF = v33 < (float)-v29;
    float v58 = v32 + (float)(v29 + (float)(v33 + 1.0));
    float v59 = 0.5 / sqrtf(v58);
    float v60 = v59 * vsub_f32(v30, v31).f32[0];
    float v61 = (float)(v35.f32[1] - v28) * v59;
    float v62 = v58 * v59;
    float v63 = v32 + (float)((float)(1.0 - v33) - v29);
    float v64 = vadd_f32(v30, v31).f32[0];
    float v65 = 0.5 / sqrtf(v63);
    float v52 = (float)(v35.f32[1] + v28) * v65;
    float v53 = v65 * v64;
    float v66 = v63 * v65;
    float v67 = v56 * v65;
    if (_NF)
    {
      float v54 = v66;
    }
    else
    {
      float v52 = v60;
      float v53 = v61;
      float v54 = v56 * v59;
    }
    if (_NF) {
      float v55 = v67;
    }
    else {
      float v55 = v62;
    }
  }
  else
  {
    float v39 = v27 + v38.f32[1];
    BOOL v40 = v33 <= v29;
    float v41 = (float)(v29 + (float)(1.0 - v33)) - v32;
    float v42 = 0.5 / sqrtf(v41);
    float v43 = v41 * v42;
    float v44 = v42 * vadd_f32(v30, v31).f32[0];
    float v45 = (float)(v35.f32[1] - v28) * v42;
    float v46 = (float)((float)(v33 + 1.0) - v29) - v32;
    float v47 = vsub_f32(v30, v31).f32[0];
    float v48 = 0.5 / sqrtf(v46);
    float v49 = v46 * v48;
    float v50 = (float)(v35.f32[1] + v28) * v48;
    float v51 = v48 * v47;
    if (v40) {
      float v52 = v39 * v42;
    }
    else {
      float v52 = v49;
    }
    if (v40) {
      float v53 = v43;
    }
    else {
      float v53 = v39 * v48;
    }
    if (v40) {
      float v54 = v44;
    }
    else {
      float v54 = v50;
    }
    if (v40) {
      float v55 = v45;
    }
    else {
      float v55 = v51;
    }
  }
  *(float *)int v76 = v52;
  *(float *)&v76[1] = v53;
  *(float *)&v76[2] = v54;
  *(float *)&v76[3] = v55;
  int32x2_t v77 = v34;
  __int32 v78 = v35.i32[0];
  v84[0] = NAN;
  int v79 = 3;
  uint64_t v80 = v37;
  __int32 v81 = v38.i32[0];
  physx::Gu::GeometryUnion::set((uint64_t)v84, (uint64_t *)&v79);
  v83[0] = -1;
  *(void *)&double v68 = physx::Gu::GeometryUnion::set((uint64_t)v83, v4).n128_u64[0];
  unsigned int v82 = 0;
  uint64_t v73 = 0;
  int v74 = 1065353216;
  BOOL v70 = physx::Gu::contactBoxHeightfield(v84, (uint64_t)v83, (uint64_t)v76, v2, (float *)&v73, v68, v69, (uint64_t)v75, (uint64_t)&v79);
  uint64_t result = 0;
  if (v70)
  {
    unsigned int v72 = v82;
    LODWORD(result) = processContacts(v8, v6, v82, (uint64_t)&v79);
    if (v72) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

float GeomMTDCallback_ConvexConvex(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a3 + 32);
  float32x4_t v9 = *(float32x4_t *)(a3 + 4);
  float32x4_t v10 = v9;
  v10.i32[3] = 0;
  float32x4_t v11 = *(float32x4_t *)(a3 + 16);
  BOOL v12 = COERCE_FLOAT(*(void *)(a3 + 12)) == 1.0;
  if (v9.f32[0] != 1.0 || COERCE_FLOAT(HIDWORD(*(void *)(a3 + 4))) != 1.0) {
    BOOL v12 = 0;
  }
  char v173 = 0;
  float32x4_t v171 = 0u;
  long long v172 = 0u;
  uint64_t v180 = v8 + 32;
  uint64_t v182 = *(void *)(v8 + 72) + 20 * *(unsigned __int8 *)(v8 + 71);
  char v183 = *(unsigned char *)(v8 + 70);
  v14.i64[0] = *(void *)(v8 + 92);
  v14.i64[1] = *(unsigned int *)(v8 + 100);
  int32x4_t v15 = (int32x4_t)vmulq_f32(v10, v14);
  *(float32x2_t *)v15.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v15, 2), *(float32x2_t *)v15.i8);
  *(float *)v15.i32 = vpmin_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).f32[0];
  *(float32x2_t *)&long long v172 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v15.i32);
  *((float *)&v172 + 2) = 0.025 * *(float *)v15.i32;
  if (v12)
  {
    long long v174 = xmmword_23435FD50;
    long long v175 = xmmword_23435FD60;
    long long v176 = xmmword_23435FD80;
    long long v177 = xmmword_23435FD50;
    long long v178 = xmmword_23435FD60;
    long long v179 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v16 = vrecpeq_f32(v10);
    int v17 = 4;
    do
    {
      float32x4_t v16 = vmulq_f32(v16, vrecpsq_f32(v16, v10));
      --v17;
    }
    while (v17);
    *(int32x2_t *)v18.f32 = vdup_lane_s32(*(int32x2_t *)v9.f32, 0);
    v18.i64[1] = v18.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v18, v10)), *(int8x8_t *)v16.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 1);
      float32x2_t v26 = (float32x2_t)vdup_laneq_s32((int32x4_t)v11, 2);
      float32x2_t v27 = (float32x2_t)vdup_laneq_s32((int32x4_t)v11, 3);
      _Q17 = vaddq_f32(v11, v11);
      float32x2_t v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)_Q17.f32), 0);
      float32x2_t v30 = vmul_lane_f32(v25, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v31 = vmul_laneq_f32(v26, _Q17, 2);
      float32x2_t v32 = vmul_n_f32(v25, _Q17.f32[0]);
      float32x2_t v33 = vmul_n_f32(v26, _Q17.f32[0]);
      float32x2_t v34 = vmul_n_f32(v27, _Q17.f32[0]);
      float32x2_t v35 = vmul_lane_f32(v26, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v36 = vmul_lane_f32(v27, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v37 = vmul_laneq_f32(v27, _Q17, 2);
      __asm { FMOV            V17.2S, #1.0 }
      float32x2_t v41 = vsub_f32(*(float32x2_t *)_Q17.f32, v29);
      float32x2_t v42 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q17.f32, v30), v31), (int8x8_t)vadd_f32(v32, v37), 4uLL);
      int8x8_t v43 = (int8x8_t)vsub_f32(v32, v37);
      *(float32x2_t *)v44.f32 = v42;
      v44.i64[1] = vsub_f32(v33, v36).u32[0];
      int32x2_t v45 = (int32x2_t)vext_s8(v43, (int8x8_t)vsub_f32(v41, v31), 4uLL);
      int8x8_t v46 = (int8x8_t)vadd_f32(v33, v36);
      *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v42, 0), (int8x8_t)v45, 4uLL);
      *(int32x2_t *)v47.f32 = v45;
      v47.i64[1] = vadd_f32(v35, v34).u32[0];
      v41.i32[0] = vsub_f32(v41, v30).u32[0];
      *(int8x8_t *)v48.f32 = vext_s8(v46, (int8x8_t)vsub_f32(v35, v34), 4uLL);
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)v42, (int8x8_t)vdup_lane_s32(v45, 1), 4uLL);
      v48.i64[1] = v41.u32[0];
      _Q17.i64[1] = vdup_lane_s32(*(int32x2_t *)v48.f32, 0).u32[0];
      v49.i64[1] = vdup_lane_s32(*(int32x2_t *)v48.f32, 1).u32[0];
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v44.u32[2], 0), *(int8x8_t *)&v47.u32[2], 4uLL);
      v50.i64[1] = vdup_lane_s32((int32x2_t)v41.u32[0], 0).u32[0];
      float32x4_t v51 = vmulq_n_f32(_Q17, v9.f32[0]);
      v51.i32[3] = 0;
      float32x4_t v52 = vmulq_lane_f32(v49, *(float32x2_t *)v9.f32, 1);
      v52.i32[3] = 0;
      float32x4_t v53 = vmulq_laneq_f32(v50, v9, 2);
      v53.i32[3] = 0;
      float32x4_t v54 = vmulq_n_f32(v51, v42.f32[0]);
      v54.i32[3] = 0;
      float32x4_t v55 = vmulq_lane_f32(v52, v42, 1);
      v55.i32[3] = 0;
      float32x4_t v56 = vmulq_laneq_f32(v53, v44, 2);
      v56.i32[3] = 0;
      float32x4_t v19 = vaddq_f32(v56, vaddq_f32(v54, v55));
      float32x4_t v57 = vmulq_n_f32(v51, v47.f32[0]);
      v57.i32[3] = 0;
      float32x4_t v58 = vmulq_lane_f32(v52, *(float32x2_t *)v47.f32, 1);
      v58.i32[3] = 0;
      float32x4_t v59 = vmulq_laneq_f32(v53, v47, 2);
      v59.i32[3] = 0;
      float32x4_t v20 = vaddq_f32(v59, vaddq_f32(v57, v58));
      float32x4_t v60 = vmulq_n_f32(v51, v48.f32[0]);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_lane_f32(v52, *(float32x2_t *)v48.f32, 1);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_laneq_f32(v53, v48, 2);
      v62.i32[3] = 0;
      float32x4_t v21 = vaddq_f32(v62, vaddq_f32(v60, v61));
      long long v174 = (__int128)v19;
      long long v175 = (__int128)v20;
      float32x4_t v63 = vmulq_n_f32(_Q17, v16.f32[0]);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_lane_f32(v49, *(float32x2_t *)v16.f32, 1);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_laneq_f32(v50, v16, 2);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_n_f32(v63, v44.f32[0]);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_lane_f32(v64, *(float32x2_t *)v44.f32, 1);
      v67.i32[3] = 0;
      float32x4_t v68 = vmulq_laneq_f32(v65, v44, 2);
      v68.i32[3] = 0;
      float32x4_t v22 = vaddq_f32(v68, vaddq_f32(v66, v67));
      float32x4_t v69 = vmulq_n_f32(v63, v47.f32[0]);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_lane_f32(v64, *(float32x2_t *)v47.f32, 1);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_laneq_f32(v65, v47, 2);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_n_f32(v63, v48.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v64, *(float32x2_t *)v48.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v23 = vaddq_f32(v71, vaddq_f32(v69, v70));
      float32x4_t v74 = vmulq_laneq_f32(v65, v48, 2);
      v74.i32[3] = 0;
      float32x4_t v24 = vaddq_f32(v74, vaddq_f32(v72, v73));
    }
    else
    {
      v16.i32[3] = 0;
      float32x4_t v19 = vmulq_f32(v10, (float32x4_t)xmmword_23435FD50);
      float32x4_t v20 = vmulq_f32(v10, (float32x4_t)xmmword_23435FD60);
      float32x4_t v21 = vmulq_f32(v10, (float32x4_t)xmmword_23435FD80);
      long long v174 = (__int128)v19;
      long long v175 = (__int128)v20;
      float32x4_t v22 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD50);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD60);
      float32x4_t v24 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD80);
    }
    long long v176 = (__int128)v21;
    long long v177 = (__int128)v22;
    long long v178 = (__int128)v23;
    long long v179 = (__int128)v24;
    float32x4_t v75 = vmulq_f32(v19, (float32x4_t)0);
    v75.i32[3] = 0;
    float32x4_t v76 = vmulq_f32(v20, (float32x4_t)0);
    v76.i32[3] = 0;
    float32x4_t v77 = vmulq_f32(v21, (float32x4_t)0);
    v77.i32[3] = 0;
    float32x4_t v171 = vaddq_f32(v77, vaddq_f32(v76, v75));
  }
  BOOL v78 = 0;
  uint64_t v181 = *(void *)(v8 + 80);
  uint64_t v79 = *(void *)(a5 + 32);
  float32x4_t v80 = *(float32x4_t *)(a5 + 4);
  float32x4_t v81 = v80;
  v81.i32[3] = 0;
  if (v80.f32[0] == 1.0 && v80.f32[1] == 1.0) {
    BOOL v78 = v80.f32[2] == 1.0;
  }
  float32x4_t v82 = *(float32x4_t *)(a5 + 16);
  char v160 = 0;
  uint64_t v167 = v79 + 32;
  uint64_t v169 = *(void *)(v79 + 72) + 20 * *(unsigned __int8 *)(v79 + 71);
  char v170 = *(unsigned char *)(v79 + 70);
  v83.i64[0] = *(void *)(v79 + 92);
  v83.i32[2] = *(_DWORD *)(v79 + 100);
  float32x4_t v158 = 0u;
  long long v159 = 0u;
  v83.i64[1] = v83.u32[2];
  int32x4_t v84 = (int32x4_t)vmulq_f32(v81, v83);
  *(float32x2_t *)v84.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v84, 2), *(float32x2_t *)v84.i8);
  *(float *)v84.i32 = vpmin_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8).f32[0];
  *(float32x2_t *)&long long v159 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v84.i32);
  *((float *)&v159 + 2) = 0.025 * *(float *)v84.i32;
  if (v78)
  {
    long long v161 = xmmword_23435FD50;
    long long v162 = xmmword_23435FD60;
    long long v163 = xmmword_23435FD80;
    long long v164 = xmmword_23435FD50;
    long long v165 = xmmword_23435FD60;
    long long v166 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v85 = vrecpeq_f32(v81);
    int v86 = 4;
    do
    {
      float32x4_t v85 = vmulq_f32(v85, vrecpsq_f32(v85, v81));
      --v86;
    }
    while (v86);
    *(int32x2_t *)v87.f32 = vdup_lane_s32(*(int32x2_t *)v80.f32, 0);
    v87.i64[1] = v87.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v87, v81)), *(int8x8_t *)v80.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.f32, 1);
      float32x2_t v95 = (float32x2_t)vdup_laneq_s32((int32x4_t)v82, 2);
      float32x2_t v96 = (float32x2_t)vdup_laneq_s32((int32x4_t)v82, 3);
      float32x4_t v97 = vaddq_f32(v82, v82);
      float32x2_t v98 = vmul_lane_f32(v94, *(float32x2_t *)v97.f32, 1);
      float32x2_t v99 = vmul_laneq_f32(v95, v97, 2);
      float32x2_t v100 = vmul_n_f32(v94, v97.f32[0]);
      float32x2_t v101 = vmul_n_f32(v95, v97.f32[0]);
      float32x2_t v102 = vmul_n_f32(v96, v97.f32[0]);
      float32x2_t v103 = vmul_lane_f32(v95, *(float32x2_t *)v97.f32, 1);
      float32x2_t v104 = vmul_lane_f32(v96, *(float32x2_t *)v97.f32, 1);
      float32x2_t v105 = vmul_laneq_f32(v96, v97, 2);
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v107 = vsub_f32(_D6, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v97.f32), 0));
      *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v98), v99), (int8x8_t)vadd_f32(v100, v105), 4uLL);
      v108.i64[1] = vsub_f32(v101, v104).u32[0];
      *(int8x8_t *)v109.f32 = vext_s8((int8x8_t)vsub_f32(v100, v105), (int8x8_t)vsub_f32(v107, v99), 4uLL);
      *(int8x8_t *)v110.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v108.f32, 0), *(int8x8_t *)v109.f32, 4uLL);
      v109.i64[1] = vadd_f32(v103, v102).u32[0];
      v98.i32[0] = vsub_f32(v107, v98).u32[0];
      int32x2_t v111 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v101, v104), (int8x8_t)vsub_f32(v103, v102), 4uLL);
      *(int8x8_t *)v112.f32 = vext_s8(*(int8x8_t *)v108.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 1), 4uLL);
      *(int32x2_t *)v113.f32 = v111;
      v113.i64[1] = v98.u32[0];
      v110.i64[1] = vdup_lane_s32(v111, 0).u32[0];
      v112.i64[1] = vdup_lane_s32(v111, 1).u32[0];
      *(int8x8_t *)v114.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v108.u32[2], 0), *(int8x8_t *)&v109.u32[2], 4uLL);
      v114.i64[1] = vdup_lane_s32((int32x2_t)v98.u32[0], 0).u32[0];
      float32x4_t v115 = vmulq_n_f32(v110, v80.f32[0]);
      v115.i32[3] = 0;
      float32x4_t v116 = vmulq_lane_f32(v112, *(float32x2_t *)v80.f32, 1);
      v116.i32[3] = 0;
      float32x4_t v117 = vmulq_laneq_f32(v114, v80, 2);
      v117.i32[3] = 0;
      float32x4_t v118 = vmulq_n_f32(v115, v108.f32[0]);
      v118.i32[3] = 0;
      float32x4_t v119 = vmulq_lane_f32(v116, *(float32x2_t *)v108.f32, 1);
      v119.i32[3] = 0;
      float32x4_t v120 = vmulq_laneq_f32(v117, v108, 2);
      v120.i32[3] = 0;
      float32x4_t v88 = vaddq_f32(v120, vaddq_f32(v118, v119));
      float32x4_t v121 = vmulq_n_f32(v115, v109.f32[0]);
      v121.i32[3] = 0;
      float32x4_t v122 = vmulq_lane_f32(v116, *(float32x2_t *)v109.f32, 1);
      v122.i32[3] = 0;
      float32x4_t v123 = vmulq_laneq_f32(v117, v109, 2);
      v123.i32[3] = 0;
      float32x4_t v89 = vaddq_f32(v123, vaddq_f32(v121, v122));
      float32x4_t v124 = vmulq_n_f32(v115, v113.f32[0]);
      v124.i32[3] = 0;
      float32x4_t v125 = vmulq_lane_f32(v116, *(float32x2_t *)v113.f32, 1);
      v125.i32[3] = 0;
      float32x4_t v126 = vmulq_laneq_f32(v117, v113, 2);
      v126.i32[3] = 0;
      float32x4_t v90 = vaddq_f32(v126, vaddq_f32(v124, v125));
      long long v161 = (__int128)v88;
      long long v162 = (__int128)v89;
      float32x4_t v127 = vmulq_n_f32(v110, v85.f32[0]);
      v127.i32[3] = 0;
      float32x4_t v128 = vmulq_lane_f32(v112, *(float32x2_t *)v85.f32, 1);
      v128.i32[3] = 0;
      float32x4_t v129 = vmulq_laneq_f32(v114, v85, 2);
      v129.i32[3] = 0;
      float32x4_t v130 = vmulq_n_f32(v127, v108.f32[0]);
      v130.i32[3] = 0;
      float32x4_t v131 = vmulq_lane_f32(v128, *(float32x2_t *)v108.f32, 1);
      v131.i32[3] = 0;
      float32x4_t v132 = vmulq_laneq_f32(v129, v108, 2);
      v132.i32[3] = 0;
      float32x4_t v91 = vaddq_f32(v132, vaddq_f32(v130, v131));
      float32x4_t v133 = vmulq_n_f32(v127, v109.f32[0]);
      v133.i32[3] = 0;
      float32x4_t v134 = vmulq_lane_f32(v128, *(float32x2_t *)v109.f32, 1);
      v134.i32[3] = 0;
      float32x4_t v135 = vmulq_laneq_f32(v129, v109, 2);
      v135.i32[3] = 0;
      float32x4_t v136 = vmulq_n_f32(v127, v113.f32[0]);
      v136.i32[3] = 0;
      float32x4_t v137 = vmulq_lane_f32(v128, *(float32x2_t *)v113.f32, 1);
      v137.i32[3] = 0;
      float32x4_t v92 = vaddq_f32(v135, vaddq_f32(v133, v134));
      float32x4_t v138 = vmulq_laneq_f32(v129, v113, 2);
      v138.i32[3] = 0;
      float32x4_t v93 = vaddq_f32(v138, vaddq_f32(v136, v137));
    }
    else
    {
      v85.i32[3] = 0;
      float32x4_t v88 = vmulq_f32(v81, (float32x4_t)xmmword_23435FD50);
      float32x4_t v89 = vmulq_f32(v81, (float32x4_t)xmmword_23435FD60);
      float32x4_t v90 = vmulq_f32(v81, (float32x4_t)xmmword_23435FD80);
      long long v161 = (__int128)v88;
      long long v162 = (__int128)v89;
      float32x4_t v91 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD50);
      float32x4_t v92 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD60);
      float32x4_t v93 = vmulq_f32(v85, (float32x4_t)xmmword_23435FD80);
    }
    long long v163 = (__int128)v90;
    long long v164 = (__int128)v91;
    long long v165 = (__int128)v92;
    long long v166 = (__int128)v93;
    float32x4_t v139 = vmulq_f32(v88, (float32x4_t)0);
    v139.i32[3] = 0;
    float32x4_t v140 = vmulq_f32(v89, (float32x4_t)0);
    v140.i32[3] = 0;
    float32x4_t v141 = vmulq_f32(v90, (float32x4_t)0);
    v141.i32[3] = 0;
    float32x4_t v158 = vaddq_f32(v141, vaddq_f32(v140, v139));
  }
  BOOL v142 = 0;
  uint64_t v168 = *(void *)(v79 + 80);
  *(void *)&long long v143 = *(void *)(a4 + 16);
  *((void *)&v143 + 1) = *(unsigned int *)(a4 + 24);
  long long v144 = *a6;
  *(void *)&long long v145 = *((void *)a6 + 2);
  *((void *)&v145 + 1) = *((unsigned int *)a6 + 6);
  v155[0] = *(_OWORD *)a4;
  v155[1] = v143;
  v154[0] = v144;
  v154[1] = v145;
  float32x4_t v153 = 0uLL;
  int32x2_t v152 = 0;
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0) {
    BOOL v142 = *(float *)(a3 + 12) == 1.0;
  }
  BOOL v146 = 0;
  if (v80.f32[0] == 1.0 && *(float *)(a5 + 8) == 1.0) {
    BOOL v146 = *(float *)(a5 + 12) == 1.0;
  }
  physx::Gu::getPCMConvexData(&v171, v142, (uint64_t)v157);
  physx::Gu::getPCMConvexData(&v158, v146, (uint64_t)v156);
  v187[4] = v155;
  v187[5] = &v174;
  v187[6] = &v177;
  if (v142)
  {
    char v147 = 1;
    int32x4_t v148 = &unk_26E728728;
  }
  else
  {
    char v147 = 0;
    int32x4_t v148 = &unk_26E728778;
  }
  char v188 = v147;
  v187[0] = v148;
  int32x4_t v189 = &v171;
  v184[4] = v154;
  v184[5] = &v161;
  v184[6] = &v164;
  if (v146)
  {
    char v149 = 1;
    long long v150 = &unk_26E728728;
  }
  else
  {
    char v149 = 0;
    long long v150 = &unk_26E728778;
  }
  char v185 = v149;
  v184[0] = v150;
  int8x16_t v186 = &v158;
  if (physx::Gu::computeMTD((uint64_t)v157, (uint64_t)v156, (uint64_t)v187, (uint64_t)v184, &v152, &v153))
  {
    *a2 = fmaxf(*(float *)v152.i32, 0.0);
    float result = v153.f32[2];
    *(void *)a1 = v153.i64[0];
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t GeomMTDCallback_ConvexMesh(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  float32x4_t v10 = v9;
  uint64_t v23 = *MEMORY[0x263EF8340];
  v22[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v22, v11);
  v21[0] = NAN;
  physx::Gu::GeometryUnion::set((uint64_t)v21, v4);
  int v18 = 0;
  uint64_t v17 = 0;
  unsigned int v20 = 0;
  uint64_t v15 = 0;
  int v16 = 1065353216;
  BOOL v12 = physx::Gu::contactConvexMesh((uint64_t)v22, v21, v6, v2, (uint64_t)&v15, (uint64_t)&v17, (uint64_t)v19);
  uint64_t result = 0;
  if (v12)
  {
    unsigned int v14 = v20;
    LODWORD(result) = processContacts(v10, v8, v20, (uint64_t)v19);
    if (v14) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GeomMTDCallback_ConvexHeightField(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  float32x4_t v10 = v9;
  uint64_t v22 = *MEMORY[0x263EF8340];
  v21[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v21, v11);
  v20[0] = -1;
  physx::Gu::GeometryUnion::set((uint64_t)v20, v4);
  unsigned int v19 = 0;
  uint64_t v15 = 0;
  int v16 = 1065353216;
  BOOL v12 = physx::Gu::contactConvexHeightfield((uint64_t)v21, (uint64_t)v20, v6, v2, (const float *)&v15, (uint64_t)v17, (uint64_t)v18);
  uint64_t result = 0;
  if (v12)
  {
    unsigned int v14 = v19;
    LODWORD(result) = processContacts(v10, v8, v19, (uint64_t)v18);
    if (v14) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sweepBox_HeightFieldGeom_Precise(physx::PxGeometry const&,physx::PxTransform const&,physx::PxBoxGeometry const&,physx::PxTransform const&,physx::Gu::Box const&,physx::PxVec3 const&,float,physx::PxSweepHit &,physx::PxFlags<physx::PxHitFlag::Enum,unsigned short>,float)::LocalReport::~LocalReport()
{
}

uint64_t sweepBox_HeightFieldGeom_Precise(physx::PxGeometry const&,physx::PxTransform const&,physx::PxBoxGeometry const&,physx::PxTransform const&,physx::Gu::Box const&,physx::PxVec3 const&,float,physx::PxSweepHit &,physx::PxFlags<physx::PxHitFlag::Enum,unsigned short>,float)::LocalReport::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  if (a2)
  {
    uint64_t v5 = a1 + 36;
    uint64_t v6 = (float32x2_t *)(a1 + 96);
    uint64_t v7 = a2;
    do
    {
      unsigned int v9 = *a3++;
      unsigned int v8 = v9;
      physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)v28, 0, 0, v9, 1, 1);
      long long v22 = 0uLL;
      int v23 = -1;
      __int16 v24 = 0;
      *(void *)float32x2_t v26 = 0;
      *(void *)&v26[8] = 0;
      uint64_t v25 = 0;
      *(_DWORD *)&v26[16] = 2139095039;
      float v10 = *(float *)(a1 + 108);
      __int16 v21 = *(_WORD *)(a1 + 112);
      if (sweepBoxVsTriangles(1, (uint64_t)v28, v5, v6, (uint64_t)&v22, &v21, *(unsigned char *)(a1 + 114), 0, v10, v11, v12, v13, v14, v15, v16, v17))
      {
        uint64_t v18 = *(void *)(a1 + 24);
        if (*(float *)&v26[16] < *(float *)(v18 + 48))
        {
          long long v19 = v22;
          *(_DWORD *)(v18 + 16) = v23;
          *(_OWORD *)uint64_t v18 = v19;
          *(_WORD *)(v18 + 2physx::Sq::AABBTree::release(this, 0) = v24;
          *(void *)(v18 + 24) = v25;
          *(_DWORD *)(v18 + 32) = *(_DWORD *)v26;
          *(_OWORD *)(v18 + 36) = *(_OWORD *)&v26[4];
          *(_DWORD *)(v18 + 52) = v27;
          *(_DWORD *)(*(void *)(a1 + 24) + 16) = v8;
          *(unsigned char *)(a1 + 32) = 1;
        }
      }
      --v7;
    }
    while (v7);
  }
  return 1;
}

uint64_t physx::Gu::MeshDataBase::allocateVertices(physx::Gu::MeshDataBase *this, int a2)
{
  if (a2 == -1) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 148);
  *((void *)this + 3) = result;
  *((_DWORD *)this + 4) = a2;
  return result;
}

uint64_t physx::Gu::TriangleMeshData::allocateTriangles(physx::Gu::TriangleMeshData *this, unsigned int a2, char a3, int a4)
{
  unsigned int v7 = 4;
  if (!*((_WORD *)this + 9) && (a3 & 1) == 0)
  {
    *((unsigned char *)this + 12) |= 2u;
    unsigned int v7 = 2;
  }
  if (a2)
  {
    unint64_t v8 = 3 * v7 * (unint64_t)a2;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 228);
    *((void *)this + 14) = result;
    if (a4)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 230);
      uint64_t v11 = *((void *)this + 14);
LABEL_8:
      *((void *)this + 1physx::Sq::AABBTree::release(this, 0) = v10;
      uint64_t result = v11;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t result = 0;
    *((void *)this + 14) = 0;
    if (a4) {
      goto LABEL_8;
    }
  }
  *((_DWORD *)this + 26) = a2;
  return result;
}

void physx::Gu::RTreeTriangleData::~RTreeTriangleData(physx::Gu::RTreeTriangleData *this)
{
  *(void *)this = &unk_26E7285E8;
  physx::Gu::RTree::~RTree((physx::Gu::RTreeTriangleData *)((char *)this + 144));
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
}

{
  void (*v2)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E7285E8;
  physx::Gu::RTree::~RTree((physx::Gu::RTreeTriangleData *)((char *)this + 144));
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
  uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v2();
}

void physx::Gu::TriangleMeshData::~TriangleMeshData(physx::Gu::TriangleMeshData *this)
{
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E728650;
  if (*((void *)this + 14)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 16))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 16) = 0;
  }
  if (*((void *)this + 15))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 15) = 0;
  }
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    physx::Gu::BV32Tree::release(*((void *)this + 17));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((void *)this + 17) = 0;
  }
  physx::Gu::MeshDataBase::~MeshDataBase(this);
}

void physx::Gu::MeshDataBase::~MeshDataBase(physx::Gu::MeshDataBase *this)
{
  physx::Gu::MeshDataBase::~MeshDataBase(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  *(void *)this = &unk_26E728670;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 8))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 8) = 0;
  }
  if (*((void *)this + 9))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 9) = 0;
  }
  if (*((void *)this + 10)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 11))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 11) = 0;
  }
  if (*((void *)this + 12))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 12) = 0;
  }
}

void physx::Gu::RTree::~RTree(physx::Gu::RTree *this)
{
  if ((*((unsigned char *)this + 84) & 1) == 0)
  {
    uint64_t v2 = *((void *)this + 11);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2 - *(void *)(v2 - 8));
      *((void *)this + 11) = 0;
    }
  }
}

void physx::Gu::BV4TriangleData::~BV4TriangleData(physx::Gu::BV4TriangleData *this)
{
  physx::Gu::BV4TriangleData::~BV4TriangleData(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  double v2;
  uint64_t vars8;

  *(void *)this = &unk_26E728690;
  uint64_t v2 = physx::Gu::BV4Tree::release((physx::Gu::BV4TriangleData *)((char *)this + 192));
  if (*((void *)this + 20)) {
    (*(void (**)(double))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v2);
  }
  *((void *)this + 2physx::Sq::AABBTree::release(this, 0) = 0;
  physx::Gu::TriangleMeshData::~TriangleMeshData(this);
}

uint64_t physx::shdfnd::ReflectionAllocator<unsigned char>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char>::getName() [T = unsigned char]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t processContacts(float32x2_t *a1, float *a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a3;
    uint64_t v5 = a4 + 8;
    float32x2_t v6 = 0;
    float v7 = 0.0;
    float v8 = 0.0;
    float32x2_t v9 = 0;
    do
    {
      v14.i32[0] = *(_DWORD *)(v5 - 8);
      uint64_t v10 = (__int32 *)(v5 - 4);
      float v12 = *(float *)v5;
      v11.i32[0] = *(_DWORD *)(v5 + 4);
      v5 += 64;
      float v13 = v11.f32[0] * v12;
      v14.i32[1] = v11.i32[0];
      if (v7 >= v13) {
        float v7 = v13;
      }
      v11.i32[1] = *v10;
      float32x2_t v15 = vmul_f32(v14, v11);
      float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v15, v9), (int8x8_t)v9, (int8x8_t)v15);
      float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v15), (int8x8_t)v6, (int8x8_t)v15);
      if (v8 <= v13) {
        float v8 = v13;
      }
      --v4;
    }
    while (v4);
    int8x8_t v16 = (int8x8_t)vceqz_f32(v9);
    if (v7 == 0.0) {
      float v17 = v8;
    }
    else {
      float v17 = v7;
    }
    int8x8_t v18 = (int8x8_t)vceqz_f32(v6);
    if (v8 != 0.0) {
      float v7 = v8;
    }
    float32x2_t v19 = vmul_f32(vadd_f32((float32x2_t)vbsl_s8(v18, (int8x8_t)v9, (int8x8_t)v6), (float32x2_t)vbsl_s8(v16, (int8x8_t)v6, (int8x8_t)v9)), (float32x2_t)0x3F0000003F000000);
    float v20 = (float)(v7 + v17) * 0.5;
    float v21 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v19, v19).i32[1]), v19.f32[0], v19.f32[0]) + (float)(v20 * v20);
    if (v21 < 1.0e-10) {
      return 0;
    }
    BOOL v23 = v21 <= 0.0;
    float v24 = sqrtf(v21);
    if (v23)
    {
      float32x2_t v25 = 0;
      float v26 = 0.0;
    }
    else
    {
      float32x2_t v25 = vmul_n_f32(v19, 1.0 / v24);
      float v26 = v20 * (float)(1.0 / v24);
    }
    *a1 = vneg_f32(v25);
    a1[1].f32[0] = -v26;
    *a2 = v24;
  }
  return 1;
}

void physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::~SupportLocalImpl()
{
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  return *(__n128 *)(*(void *)(v2 + 160) + 12 * physx::Gu::ConvexHullV::supportVertexIndex(v2, a2));
}

uint64_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::doSupport(uint64_t result, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v7 = *(void *)(result + 64);
  if (*(void *)(v7 + 152))
  {
    unsigned int v8 = physx::Gu::ConvexHullV::hillClimbing(*(void *)(result + 64), a2);
    float32x4_t v9 = vnegq_f32(*a2);
    v9.i32[3] = 0;
    float32x4_t v30 = v9;
    uint64_t result = physx::Gu::ConvexHullV::hillClimbing(v7, &v30);
    uint64_t v10 = *(void *)(v7 + 160);
    float32x4_t v11 = *(float32x4_t *)(v10 + 12 * v8);
    v11.i32[3] = 0;
    float32x4_t v12 = *(float32x4_t *)(v10 + 12 * result);
    v12.i32[3] = 0;
    float32x4_t v13 = vmulq_f32(*a2, v12);
    v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
    *a3 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
    float32x4_t v14 = vmulq_f32(v11, *a2);
    v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
    float32x2_t v15 = vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32);
  }
  else
  {
    int8x8_t v16 = *(float32x4_t **)(v7 + 160);
    float32x4_t v17 = *v16;
    v17.i32[3] = 0;
    float32x4_t v18 = vmulq_f32(v17, *a2);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    float32x2_t v15 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
    unint64_t v19 = *(unsigned __int8 *)(v7 + 168);
    if (v19 < 2)
    {
      float32x2_t v22 = v15;
    }
    else
    {
      unint64_t v20 = v19 - 1;
      _X9 = (float32x4_t *)((char *)v16 + 140);
      float32x2_t v22 = v15;
      do
      {
        __asm { PRFM            #0, [X9] }
        float32x4_t v28 = _X9[-8];
        v28.i32[3] = 0;
        float32x4_t v29 = vmulq_f32(*a2, v28);
        v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
        *(float32x2_t *)v29.f32 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
        float32x2_t v15 = vmax_f32(*(float32x2_t *)v29.f32, v15);
        float32x2_t v22 = vmin_f32(*(float32x2_t *)v29.f32, v22);
        _X9 = (float32x4_t *)((char *)_X9 + 12);
        --v20;
      }
      while (v20);
    }
    *a3 = v22;
  }
  *a4 = v15;
  return result;
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullNoScaleV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      unsigned int v6 = *a2++;
      __n128 result = *(__n128 *)(a4 + 12 * v6);
      result.n128_u32[3] = 0;
      *a5++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Gu::ConvexHullV::supportVertexIndex(uint64_t a1, float32x4_t *a2)
{
  if (*(void *)(a1 + 152)) {
    return physx::Gu::ConvexHullV::hillClimbing(a1, a2);
  }
  unint64_t v4 = *(unsigned __int8 *)(a1 + 168);
  if (v4 < 2) {
    return 0;
  }
  LODWORD(result) = 0;
  float v5 = a2->f32[1];
  float v6 = a2->f32[2];
  uint64_t v7 = *(float **)(a1 + 160);
  float v9 = v7[1];
  float v8 = v7[2];
  float v11 = *v7;
  uint64_t v10 = v7 + 5;
  float v12 = (float)((float)(v5 * v9) + (float)(v11 * a2->f32[0])) + (float)(v8 * v6);
  for (uint64_t i = 1; i != v4; ++i)
  {
    float v14 = (float)(v5 * *(v10 - 1)) + (float)(*(v10 - 2) * a2->f32[0]);
    float v15 = *v10;
    v10 += 3;
    float v16 = v14 + (float)(v15 * v6);
    if (v16 <= v12)
    {
      uint64_t result = result;
    }
    else
    {
      float v12 = v16;
      uint64_t result = i;
    }
  }
  return result;
}

uint64_t physx::Gu::ConvexHullV::hillClimbing(uint64_t a1, float32x4_t *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 152);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  memset(v34, 0, sizeof(v34));
  float32x4_t v5 = *a2;
  int v6 = a2->i64[1];
  uint64_t v32 = a2->i64[0];
  __int32 v33 = v5.i32[2];
  unsigned int v8 = v6 & 0x7FFFFFFF;
  if ((v5.i32[1] & 0x7FFFFFFFu) > (v5.i32[0] & 0x7FFFFFFFu) && (v5.i32[1] & 0x7FFFFFFFu) > v8)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 1;
    uint64_t v10 = 2;
  }
  else
  {
    uint64_t v10 = 1;
    BOOL v11 = v8 > (v5.i32[0] & 0x7FFFFFFFu);
    uint64_t v12 = 1;
    if (v11) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = 0;
    }
    if (v11) {
      uint64_t v10 = 0;
    }
    if (!v11) {
      uint64_t v12 = 2;
    }
  }
  float v14 = 1.0 / fabsf(*((float *)&v32 + v13));
  HIDWORD(v15) = v13;
  LODWORD(v15) = *((_DWORD *)&v32 + v13);
  int v7 = *(unsigned __int16 *)v2;
  unint64_t v16 = *(unsigned __int8 *)(v2[1]
                           + (float)((float)((float)((float)(v7 - 1) * 0.5)
                                                         * (float)((float)(v14 * *((float *)&v32 + v12)) + 1.0))
                                                 + 0.5)
                           + ((float)((float)((float)((float)(v7 - 1) * 0.5)
                                                          * (float)((float)(*((float *)&v32 + v10) * v14) + 1.0))
                                                  + 0.5)
                            + (v15 >> 31) * v7)
                           * v7);
  uint64_t v17 = *(void *)(a1 + 160);
  float32x4_t v18 = *(float32x4_t *)(v17 + 12 * v16);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_f32(v5, v18);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  float32x2_t v20 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32);
  do
  {
    uint64_t result = v16;
    uint64_t v22 = 4 * v16;
    uint64_t v23 = *(unsigned __int16 *)(v3 + v22);
    if (!*(_WORD *)(v3 + v22)) {
      break;
    }
    float v24 = (unsigned __int8 *)(v4 + *(unsigned __int16 *)(v3 + 4 * result + 2));
    unint64_t v16 = result;
    do
    {
      unsigned int v26 = *v24++;
      unint64_t v25 = v26;
      float32x4_t v27 = *(float32x4_t *)(v17 + 12 * v26);
      v27.i32[3] = 0;
      float32x4_t v28 = vmulq_f32(v5, v27);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      float32x2_t v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
      if (vcgt_f32(v29, v20).u8[0])
      {
        uint64_t v30 = 1 << (v25 & 0x1F);
        uint64_t v31 = *((unsigned int *)v34 + (v25 >> 5));
        if ((v31 & v30) == 0)
        {
          *((_DWORD *)v34 + (v25 >> 5)) = v31 | v30;
          unint64_t v16 = v25;
          float32x2_t v20 = v29;
        }
      }
      --v23;
    }
    while (v23);
  }
  while (v16 != result);
  return result;
}

void physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::~SupportLocalImpl()
{
}

double physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 64);
  float32x4_t v3 = vmulq_f32(*a2, v2[3]);
  v3.i64[0] = vpaddq_f32(v3, v3).u64[0];
  float32x4_t v4 = vmulq_f32(*a2, v2[4]);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  float32x4_t v5 = vmulq_f32(*a2, v2[5]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v3.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), 4uLL);
  v3.i64[1] = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32).u32[0];
  float32x4_t v11 = v3;
  float32x4_t v6 = *(float32x4_t *)(v2[10].i64[0]
                      + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v11));
  float32x4_t v7 = vmulq_n_f32(v2[3], v6.f32[0]);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_lane_f32(v2[4], *(float32x2_t *)v6.f32, 1);
  v8.i32[3] = 0;
  float32x4_t v9 = vmulq_laneq_f32(v2[5], v6, 2);
  v9.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vaddq_f32(v7, v8), v9).u64[0];
  return result;
}

uint64_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::doSupport(uint64_t result, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x4_t v11 = *(float32x4_t **)(result + 64);
  float32x4_t v12 = vmulq_f32(*a2, v11[3]);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  _D1 = (int32x2_t)vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  float32x4_t v14 = vmulq_f32(*a2, v11[4]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  float32x4_t v15 = vmulq_f32(*a2, v11[5]);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  LODWORD(v16) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)_Q0.f32 = vext_s8((int8x8_t)_D1, (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  _Q0.i64[1] = LODWORD(v16);
  float32x4_t v50 = _Q0;
  if (v11[9].i64[1])
  {
    unsigned int v19 = physx::Gu::ConvexHullV::hillClimbing((uint64_t)v11, &v50);
    float32x4_t v20 = vnegq_f32(v50);
    v20.i32[3] = 0;
    float32x4_t v49 = v20;
    double result = physx::Gu::ConvexHullV::hillClimbing((uint64_t)v11, &v49);
    uint64_t v21 = v11[10].i64[0];
    float32x4_t v22 = *(float32x4_t *)(v21 + 12 * v19);
    float32x4_t v23 = v11[3];
    float32x4_t v24 = v11[4];
    float32x4_t v25 = vmulq_n_f32(v23, v22.f32[0]);
    v25.i32[3] = 0;
    float32x4_t v26 = vmulq_lane_f32(v24, *(float32x2_t *)v22.f32, 1);
    v26.i32[3] = 0;
    float32x4_t v27 = v11[5];
    float32x4_t v28 = vmulq_laneq_f32(v27, v22, 2);
    v28.i32[3] = 0;
    float32x4_t v29 = vaddq_f32(v25, v26);
    float32x4_t v30 = *(float32x4_t *)(v21 + 12 * result);
    float32x4_t v31 = vmulq_n_f32(v23, v30.f32[0]);
    v31.i32[3] = 0;
    float32x4_t v32 = vmulq_lane_f32(v24, *(float32x2_t *)v30.f32, 1);
    v32.i32[3] = 0;
    float32x4_t v33 = vmulq_laneq_f32(v27, v30, 2);
    v33.i32[3] = 0;
    float32x4_t v34 = vmulq_f32(*a2, vaddq_f32(v33, vaddq_f32(v31, v32)));
    v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
    *a3 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
    float32x4_t v35 = vmulq_f32(vaddq_f32(v29, v28), *a2);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    float32x2_t v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
  }
  else
  {
    uint64_t v37 = v11[10].i64[0];
    _S2 = *(_DWORD *)(v37 + 8);
    __asm { FMLA            S1, S2, V0.S[2] }
    unint64_t v43 = v11[10].u8[8];
    if (v43 < 2)
    {
      LODWORD(a9) = _D1.i32[0];
    }
    else
    {
      unint64_t v44 = v43 - 1;
      int32x2_t v45 = (float *)(v37 + 20);
      LODWORD(a9) = _D1.i32[0];
      do
      {
        float v46 = (float)(_Q0.f32[1] * *(v45 - 1)) + (float)(*(v45 - 2) * _Q0.f32[0]);
        float v47 = *v45;
        v45 += 3;
        float v48 = v46 + (float)(v47 * v16);
        if (v48 > *(float *)_D1.i32) {
          *(float *)_D1.i32 = v48;
        }
        if (v48 < *(float *)&a9) {
          *(float *)&a9 = v48;
        }
        --v44;
      }
      while (v44);
    }
    *a3 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    float32x2_t v36 = (float32x2_t)vdup_lane_s32(_D1, 0);
  }
  *a4 = v36;
  return result;
}

float32x4_t physx::Gu::SupportLocalImpl<physx::Gu::ConvexHullV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, float32x4_t *a5)
{
  if (a3)
  {
    float32x4_t v5 = *(float32x4_t **)(a1 + 64);
    uint64_t v6 = a3;
    do
    {
      unsigned int v7 = *a2++;
      float32x4_t v8 = *(float32x4_t *)(a4 + 12 * v7);
      float32x4_t v9 = vmulq_n_f32(v5[3], v8.f32[0]);
      v9.i32[3] = 0;
      float32x4_t v10 = vmulq_lane_f32(v5[4], *(float32x2_t *)v8.f32, 1);
      v10.i32[3] = 0;
      float32x4_t v11 = vmulq_laneq_f32(v5[5], v8, 2);
      v11.i32[3] = 0;
      float32x4_t result = vaddq_f32(vaddq_f32(v9, v10), v11);
      *a5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

BOOL PxcTestAxis(float *a1, float *a2, float *a3, float *a4)
{
  float v4 = a1[1];
  float v5 = a1[2];
  float v6 = (float)((float)(a2[10] * v4) + (float)(a2[9] * *a1)) + (float)(a2[11] * v5);
  float v7 = (float)((float)(a2[13] * fabsf((float)((float)(v4 * a2[4]) + (float)(a2[3] * *a1)) + (float)(a2[5] * v5)))
             + (float)(fabsf((float)((float)(v4 * a2[1]) + (float)(*a2 * *a1)) + (float)(a2[2] * v5)) * a2[12]))
     + (float)(fabsf((float)((float)(v4 * a2[7]) + (float)(a2[6] * *a1)) + (float)(a2[8] * v5)) * a2[14]);
  float v8 = v6 - v7;
  float v9 = v6 + v7;
  float v10 = (float)((float)(v4 * a3[10]) + (float)(a3[9] * *a1)) + (float)(a3[11] * v5);
  float v11 = (float)((float)(a3[13] * fabsf((float)((float)(v4 * a3[4]) + (float)(a3[3] * *a1)) + (float)(a3[5] * v5)))
              + (float)(fabsf((float)((float)(v4 * a3[1]) + (float)(*a3 * *a1)) + (float)(a3[2] * v5)) * a3[12]))
      + (float)(fabsf((float)((float)(v4 * a3[7]) + (float)(a3[6] * *a1)) + (float)(a3[8] * v5)) * a3[14]);
  float v12 = v10 - v11;
  float v13 = v10 + v11;
  BOOL result = v13 >= v8 && v9 >= v12;
  if (result)
  {
    float v15 = v9 - v12;
    float v16 = v13 - v8;
    if (v15 >= v16) {
      float v15 = v16;
    }
    *a4 = v15;
  }
  return result;
}

void physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::~SupportLocalImpl()
{
}

double physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2 = *(float32x4_t *)(*(void *)(a1 + 64) + 48);
  int8x16_t v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(void *)&double result = vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v2, v3).u64[0];
  return result;
}

float32x2_t physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::doSupport(uint64_t a1, float32x4_t *a2, float32x2_t *a3, void *a4)
{
  float32x4_t v4 = *(float32x4_t *)(*(void *)(a1 + 64) + 48);
  int8x16_t v5 = (int8x16_t)vnegq_f32(v4);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_f32(*a2, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v4, v5));
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  *a4 = v6.i64[0];
  float32x2_t result = vneg_f32(*(float32x2_t *)v6.f32);
  *a3 = result;
  return result;
}

__n128 physx::Gu::SupportLocalImpl<physx::Gu::BoxV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      unsigned int v6 = *a2++;
      __n128 result = *(__n128 *)(a4 + 12 * v6);
      result.n128_u32[3] = 0;
      *a5++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    float v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    float v11 = 0;
  }
  float v12 = &v11[4 * v3];
  float v13 = &v11[v10];
  __n128 result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v15);
      unint64_t v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(void *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    __n128 result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Gu::TriangleMesh *,physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::internal::HashSetBase<physx::Gu::TriangleMesh *,physx::shdfnd::Hash<physx::Gu::TriangleMesh *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v1physx::Sq::AABBTree::release(this, 0) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 8 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::GuMeshFactoryListener *,physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::GuMeshFactoryListener *>::getName() [T = physx::"
    }
           "GuMeshFactoryListener *]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)a1;
    int32x2_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

__n128 physx::Gu::LocalConvex<physx::Gu::CapsuleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(void *)(a1 + 8) + 16 * (1 - a2) + 48);
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2 = *(float32x4_t **)(a1 + 8);
  float32x4_t v3 = v2[3];
  float32x4_t v4 = v2[4];
  float32x4_t v5 = vmulq_f32(v3, *a2);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  float32x4_t v6 = vmulq_f32(*a2, v4);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(void *)&double result = vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)), 0), (int8x16_t)v3, (int8x16_t)v4).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  float32x4_t v3 = *(float32x4_t **)(a1 + 8);
  float32x4_t v4 = vmulq_f32(v3[3], *a2);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  float32x4_t v5 = vmulq_f32(*a2, v3[4]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v5.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32)), (int8x8_t)0x100000001);
  *a3 = v5.i32[0];
  *(void *)&double result = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v5.f32, 0), 0x1FuLL)), (int8x16_t)v3[3], (int8x16_t)v3[4]).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::CapsuleV>::getSweepMargin()
{
  return 0.0;
}

__n128 physx::Gu::LocalConvex<physx::Gu::CapsuleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(void *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::CapsuleV>::~LocalConvex()
{
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t **)(a1 + 8);
  float32x4_t v3 = *(float32x4_t *)(v2[10].i64[0] + 12 * a2);
  float32x4_t v4 = vmulq_n_f32(v2[3], v3.f32[0]);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(v2[4], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(v2[5], v3, 2);
  v6.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vaddq_f32(v4, v5), v6).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2 = *(float32x4_t **)(a1 + 8);
  float32x4_t v3 = vmulq_f32(*a2, v2[3]);
  v3.i64[0] = vpaddq_f32(v3, v3).u64[0];
  float32x4_t v4 = vmulq_f32(*a2, v2[4]);
  v4.i64[0] = vpaddq_f32(v4, v4).u64[0];
  float32x4_t v5 = vmulq_f32(*a2, v2[5]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(int8x8_t *)v3.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), 4uLL);
  v3.i64[1] = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32).u32[0];
  float32x4_t v11 = v3;
  float32x4_t v6 = *(float32x4_t *)(v2[10].i64[0]
                      + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v11));
  float32x4_t v7 = vmulq_n_f32(v2[3], v6.f32[0]);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_lane_f32(v2[4], *(float32x2_t *)v6.f32, 1);
  v8.i32[3] = 0;
  float32x4_t v9 = vmulq_laneq_f32(v2[5], v6, 2);
  v9.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vaddq_f32(v7, v8), v9).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  float32x4_t v4 = *(float32x4_t **)(a1 + 8);
  float32x4_t v5 = vmulq_f32(*a2, v4[3]);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  float32x4_t v6 = vmulq_f32(*a2, v4[4]);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  float32x4_t v7 = vmulq_f32(*a2, v4[5]);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(int8x8_t *)v5.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), 4uLL);
  v5.i64[1] = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  float32x4_t v14 = v5;
  int v8 = physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v4, &v14);
  *a3 = v8;
  float32x4_t v9 = *(float32x4_t *)(v4[10].i64[0] + 12 * v8);
  float32x4_t v10 = vmulq_n_f32(v4[3], v9.f32[0]);
  v10.i32[3] = 0;
  float32x4_t v11 = vmulq_lane_f32(v4[4], *(float32x2_t *)v9.f32, 1);
  v11.i32[3] = 0;
  float32x4_t v12 = vmulq_laneq_f32(v4[5], v9, 2);
  v12.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vaddq_f32(v10, v11), v12).u64[0];
  return result;
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::getSweepMargin(uint64_t a1)
{
  uint64_t v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(void *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::~LocalConvex()
{
}

BOOL GeomOverlapCallback_SphereSphere(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4 = a4[4] - a2[4];
  float v5 = a4[5] - a2[5];
  float v6 = a4[6] - a2[6];
  float v7 = *(float *)(a1 + 4) + *(float *)(a3 + 4);
  return (float)((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6)) <= (float)(v7 * v7);
}

BOOL GeomOverlapCallback_SpherePlane(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v5 = a4[2];
  float v4 = a4[3];
  float v6 = v4 + v4;
  float v7 = *a4;
  float v8 = a4[1];
  float v9 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  return (float)((float)((float)((float)((float)((float)((float)(v7 + v7) * v8) + (float)(v5 * v6)) * a2[5])
                               + (float)(a2[4] * v9))
                       + (float)(a2[6] * (float)((float)((float)(v7 + v7) * v5) - (float)(v8 * v6))))
               - (float)((float)((float)(a4[5] * (float)((float)((float)(v7 + v7) * v8) + (float)(v5 * v6)))
                               + (float)(a4[4] * v9))
                       + (float)(a4[6] * (float)((float)((float)(v7 + v7) * v5) - (float)(v8 * v6))))) <= *(float *)(a1 + 4);
}

BOOL GeomOverlapCallback_SphereCapsule(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4 = *a4;
  float v5 = a4[1];
  float v7 = a4[2];
  float v6 = a4[3];
  float v8 = v6 + v6;
  float v9 = (float)((float)(v6 * (float)(v6 + v6)) + -1.0) + (float)(v4 * (float)(v4 + v4));
  float v10 = (float)((float)(v4 + v4) * v5) + (float)(v7 * v8);
  float v11 = (float)((float)(v4 + v4) * v7) - (float)(v5 * v8);
  float v12 = *(float *)(a3 + 8);
  float v13 = v12 * v10;
  float v14 = v11 * v12;
  float v15 = (float)-(float)(v9 * v12) - (float)(v9 * v12);
  float v16 = (float)-(float)(v12 * v10) - (float)(v12 * v10);
  float v17 = (float)-(float)(v11 * v12) - (float)(v11 * v12);
  float v18 = (float)(a2[4] - a4[4]) - (float)(v9 * v12);
  float v19 = (float)(a2[5] - a4[5]) - v13;
  float v20 = (float)(a2[6] - a4[6]) - v14;
  float v21 = (float)((float)(v16 * v19) + (float)(v18 * v15)) + (float)(v20 * v17);
  if (v21 > 0.0)
  {
    float v22 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
    if (v21 < v22)
    {
      float v23 = v21 / v22;
      float v15 = v15 * v23;
      float v16 = v16 * v23;
      float v17 = v17 * v23;
    }
    float v18 = v18 - v15;
    float v19 = v19 - v16;
    float v20 = v20 - v17;
  }
  float v24 = *(float *)(a1 + 4) + *(float *)(a3 + 4);
  return (float)((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20)) <= (float)(v24 * v24);
}

BOOL GeomOverlapCallback_SphereBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v4 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  float32x2_t v5 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  float32x2_t v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  float32x2_t v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  float32x2_t v8 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v4.f32), 0);
  float32x2_t v9 = vmul_lane_f32(v5, *(float32x2_t *)v4.f32, 1);
  float32x2_t v10 = vmul_laneq_f32(v6, v4, 2);
  float32x2_t v11 = vmul_n_f32(v5, v4.f32[0]);
  float32x2_t v12 = vmul_n_f32(v6, v4.f32[0]);
  float32x2_t v13 = vmul_n_f32(v7, v4.f32[0]);
  float32x2_t v14 = vmul_lane_f32(v6, *(float32x2_t *)v4.f32, 1);
  float32x2_t v15 = vmul_lane_f32(v7, *(float32x2_t *)v4.f32, 1);
  *(float32x2_t *)v4.f32 = vmul_laneq_f32(v7, v4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v21 = vsub_f32(_D4, v8);
  LODWORD(v22) = vsub_f32(v12, v15).u32[0];
  LODWORD(v23) = vadd_f32(v14, v13).u32[0];
  v29[0] = (float)(1.0 - v9.f32[1]) - v10.f32[1];
  LODWORD(v29[1]) = vadd_f32(v11, *(float32x2_t *)v4.f32).u32[0];
  HIDWORD(v22) = vsub_f32(v11, *(float32x2_t *)&v4).i32[1];
  uint64_t v30 = v22;
  unsigned __int32 v31 = vsub_f32(v21, v10).u32[0];
  HIDWORD(v23) = vadd_f32(v12, v15).i32[1];
  uint64_t v32 = v23;
  int32x2_t v33 = vzip1_s32((int32x2_t)vsub_f32(v14, v13), (int32x2_t)vsub_f32(v21, v9));
  int v34 = *(_DWORD *)(a4 + 16);
  *(void *)&long long v24 = *(void *)(a4 + 20);
  *((void *)&v24 + 1) = *(void *)(a3 + 4);
  long long v35 = v24;
  int v36 = *(_DWORD *)(a3 + 12);
  LODWORD(v24) = *(_DWORD *)(a1 + 4);
  uint64_t v26 = *(void *)(a2 + 16);
  int v27 = *(_DWORD *)(a2 + 24);
  int v28 = v24;
  return physx::Gu::intersectSphereBox((physx::Gu *)&v26, (const Sphere *)v29, (const physx::Gu::Box *)a3);
}

BOOL GeomOverlapCallback_SphereConvex(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float *a5, int8x8_t a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = 0;
  if (a5)
  {
    float v12 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      uint64_t v11 = *(void *)a5;
      float v12 = a5[2];
    }
  }
  else
  {
    float v12 = 1.0;
  }
  a6.i32[0] = *(_DWORD *)(a1 + 4);
  float32x4_t v13 = *(float32x4_t *)(a3 + 4);
  float32x4_t v14 = v13;
  v14.i32[3] = 0;
  float32x4_t v15 = *(float32x4_t *)(a3 + 16);
  float v16 = *(float *)a4;
  float v17 = *(float *)(a4 + 4);
  float v18 = *(float *)(a4 + 8);
  a9.i32[0] = *(_DWORD *)(a4 + 12);
  float v19 = a2[4];
  float v20 = a2[5];
  float v22 = *(float *)(a4 + 16);
  float v21 = *(float *)(a4 + 20);
  float v23 = a2[6];
  float v24 = *(float *)(a4 + 24);
  BOOL v25 = COERCE_FLOAT(*(void *)(a3 + 12)) == 1.0;
  if (v13.f32[0] != 1.0 || COERCE_FLOAT(HIDWORD(*(void *)(a3 + 4))) != 1.0) {
    BOOL v25 = 0;
  }
  float32x4_t v27 = 0uLL;
  char v122 = 0;
  float32x4_t v120 = 0u;
  long long v121 = 0u;
  uint64_t v129 = v10 + 32;
  uint64_t v131 = *(void *)(v10 + 72) + 20 * *(unsigned __int8 *)(v10 + 71);
  char v132 = *(unsigned char *)(v10 + 70);
  v28.i64[0] = *(void *)(v10 + 92);
  v28.i64[1] = *(unsigned int *)(v10 + 100);
  int32x4_t v29 = (int32x4_t)vmulq_f32(v14, v28);
  *(float32x2_t *)v29.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v29, 2), *(float32x2_t *)v29.i8);
  *(float *)v29.i32 = vpmin_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8).f32[0];
  *(float32x2_t *)&long long v121 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v29.i32);
  *((float *)&v121 + 2) = 0.025 * *(float *)v29.i32;
  if (v25)
  {
    long long v123 = xmmword_23435FD50;
    long long v124 = xmmword_23435FD60;
    long long v125 = xmmword_23435FD80;
    long long v126 = xmmword_23435FD50;
    long long v127 = xmmword_23435FD60;
    long long v128 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v30 = vrecpeq_f32(v14);
    int v31 = 4;
    do
    {
      float32x4_t v30 = vmulq_f32(v30, vrecpsq_f32(v30, v14));
      --v31;
    }
    while (v31);
    *(int32x2_t *)v32.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v32.i64[1] = v32.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v32, v14)), a6).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      float32x2_t v41 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      _Q26 = vaddq_f32(v15, v15);
      float32x2_t v43 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q26.f32), 0);
      float32x2_t v44 = vmul_lane_f32(v39, *(float32x2_t *)_Q26.f32, 1);
      float32x2_t v45 = vmul_laneq_f32(v40, _Q26, 2);
      float32x2_t v46 = vmul_n_f32(v39, _Q26.f32[0]);
      float32x2_t v47 = vmul_n_f32(v40, _Q26.f32[0]);
      float32x2_t v48 = vmul_n_f32(v41, _Q26.f32[0]);
      float32x2_t v49 = vmul_lane_f32(v40, *(float32x2_t *)_Q26.f32, 1);
      float32x2_t v50 = vmul_lane_f32(v41, *(float32x2_t *)_Q26.f32, 1);
      float32x2_t v51 = vmul_laneq_f32(v41, _Q26, 2);
      __asm { FMOV            V26.2S, #1.0 }
      float32x2_t v55 = vsub_f32(*(float32x2_t *)_Q26.f32, v43);
      float32x2_t v56 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q26.f32, v44), v45), (int8x8_t)vadd_f32(v46, v51), 4uLL);
      int8x8_t v57 = (int8x8_t)vsub_f32(v46, v51);
      *(float32x2_t *)v58.f32 = v56;
      v58.i64[1] = vsub_f32(v47, v50).u32[0];
      int32x2_t v59 = (int32x2_t)vext_s8(v57, (int8x8_t)vsub_f32(v55, v45), 4uLL);
      int8x8_t v60 = (int8x8_t)vadd_f32(v47, v50);
      *(int8x8_t *)_Q26.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v56, 0), (int8x8_t)v59, 4uLL);
      *(int32x2_t *)v61.f32 = v59;
      v61.i64[1] = vadd_f32(v49, v48).u32[0];
      v55.i32[0] = vsub_f32(v55, v44).u32[0];
      *(int8x8_t *)v62.f32 = vext_s8(v60, (int8x8_t)vsub_f32(v49, v48), 4uLL);
      *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)v56, (int8x8_t)vdup_lane_s32(v59, 1), 4uLL);
      v62.i64[1] = v55.u32[0];
      _Q26.i64[1] = vdup_lane_s32(*(int32x2_t *)v62.f32, 0).u32[0];
      v63.i64[1] = vdup_lane_s32(*(int32x2_t *)v62.f32, 1).u32[0];
      *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v58.u32[2], 0), *(int8x8_t *)&v61.u32[2], 4uLL);
      v64.i64[1] = vdup_lane_s32((int32x2_t)v55.u32[0], 0).u32[0];
      float32x4_t v65 = vmulq_n_f32(_Q26, v13.f32[0]);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_lane_f32(v63, *(float32x2_t *)v13.f32, 1);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_laneq_f32(v64, v13, 2);
      v67.i32[3] = 0;
      float32x4_t v68 = vmulq_n_f32(v65, v56.f32[0]);
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_lane_f32(v66, v56, 1);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_laneq_f32(v67, v58, 2);
      v70.i32[3] = 0;
      float32x4_t v33 = vaddq_f32(v70, vaddq_f32(v68, v69));
      float32x4_t v71 = vmulq_n_f32(v65, v61.f32[0]);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_lane_f32(v66, *(float32x2_t *)v61.f32, 1);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_laneq_f32(v67, v61, 2);
      v73.i32[3] = 0;
      float32x4_t v34 = vaddq_f32(v73, vaddq_f32(v71, v72));
      float32x4_t v74 = vmulq_n_f32(v65, v62.f32[0]);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_lane_f32(v66, *(float32x2_t *)v62.f32, 1);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_laneq_f32(v67, v62, 2);
      v76.i32[3] = 0;
      float32x4_t v35 = vaddq_f32(v76, vaddq_f32(v74, v75));
      long long v123 = (__int128)v33;
      long long v124 = (__int128)v34;
      float32x4_t v77 = vmulq_n_f32(_Q26, v30.f32[0]);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_lane_f32(v63, *(float32x2_t *)v30.f32, 1);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_laneq_f32(v64, v30, 2);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_n_f32(v77, v58.f32[0]);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_lane_f32(v78, *(float32x2_t *)v58.f32, 1);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_laneq_f32(v79, v58, 2);
      v82.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(v82, vaddq_f32(v80, v81));
      float32x4_t v83 = vmulq_n_f32(v77, v61.f32[0]);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_lane_f32(v78, *(float32x2_t *)v61.f32, 1);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_laneq_f32(v79, v61, 2);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_n_f32(v77, v62.f32[0]);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_lane_f32(v78, *(float32x2_t *)v62.f32, 1);
      v87.i32[3] = 0;
      float32x4_t v37 = vaddq_f32(v85, vaddq_f32(v83, v84));
      float32x4_t v88 = vmulq_laneq_f32(v79, v62, 2);
      v88.i32[3] = 0;
      float32x4_t v38 = vaddq_f32(v88, vaddq_f32(v86, v87));
    }
    else
    {
      v30.i32[3] = 0;
      float32x4_t v33 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD50);
      float32x4_t v34 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD60);
      float32x4_t v35 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD80);
      long long v123 = (__int128)v33;
      long long v124 = (__int128)v34;
      float32x4_t v36 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD50);
      float32x4_t v37 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD60);
      float32x4_t v38 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD80);
    }
    long long v125 = (__int128)v35;
    long long v126 = (__int128)v36;
    long long v127 = (__int128)v37;
    long long v128 = (__int128)v38;
    float32x4_t v89 = vmulq_f32(v33, (float32x4_t)0);
    v89.i32[3] = 0;
    float32x4_t v90 = vmulq_f32(v34, (float32x4_t)0);
    v90.i32[3] = 0;
    float32x4_t v91 = vmulq_f32(v35, (float32x4_t)0);
    v91.i32[3] = 0;
    float32x4_t v27 = vaddq_f32(v91, vaddq_f32(v90, v89));
    float32x4_t v120 = v27;
  }
  float v92 = (float)(v23 - v24) + (float)(v23 - v24);
  float v93 = (float)(v19 - v22) + (float)(v19 - v22);
  float v94 = (float)(v20 - v21) + (float)(v20 - v21);
  float v95 = (float)((float)-(float)(v17 * v94) - (float)(v16 * v93)) - (float)(v18 * v92);
  float v96 = (float)(*(float *)a9.i32 * *(float *)a9.i32) + -0.5;
  *(float *)&unsigned int v97 = (float)((float)(*(float *)a9.i32 * (float)((float)(v17 * v93) - (float)(v16 * v94)))
                         + (float)(v92 * v96))
                 - (float)(v18 * v95);
  float32_t v98 = (float)((float)(*(float *)a9.i32 * (float)((float)(v16 * v92) - (float)(v18 * v93))) + (float)(v94 * v96))
      - (float)(v17 * v95);
  v99.f32[0] = (float)((float)(*(float *)a9.i32 * (float)((float)(v18 * v94) - (float)(v17 * v92))) + (float)(v93 * v96))
             - (float)(v16 * v95);
  v99.f32[1] = v98;
  v99.i64[1] = v97;
  uint64_t v130 = *(void *)(v10 + 80);
  int v115 = 4;
  int32x2_t v119 = vdup_lane_s32((int32x2_t)a6, 0);
  float32x4_t v117 = v99;
  float32x4_t v118 = v99;
  __int32 v112 = a6.i32[0];
  __int32 v113 = a6.i32[0];
  __int32 v114 = a6.i32[0];
  char v116 = 1;
  int8x16_t v110 = 0u;
  float32x4_t v111 = v99;
  float32x4_t v108 = 0u;
  int8x16_t v109 = 0u;
  uint64_t v107 = 0;
  v106[1] = &v111;
  v105[1] = &v120;
  v106[0] = &unk_26E7287F0;
  v105[0] = &unk_26E728850;
  float32x4_t v104 = vsubq_f32(v99, v27);
  uint64_t v103 = 0;
  int v100 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v106, (uint64_t)v105, &v104, &v103, &v110, &v109, &v108, &v107, 0.0, *(double *)v104.i64, *(double *)v99.i64, a9);
  if (a5 && v100 == 2)
  {
    *(void *)a5 = v11;
    a5[2] = v12;
    __int16 v101 = 2;
LABEL_23:
    *((_WORD *)a5 + 6) = v101;
    return v100 == 2;
  }
  if (a5)
  {
    __int16 v101 = 2 * (v100 == 2);
    goto LABEL_23;
  }
  return v100 == 2;
}

uint64_t GeomOverlapCallback_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuOverlapTests.cpp", 586, "Height Field Overlap test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t GeomOverlapCallback_NotSupported()
{
  return 0;
}

BOOL GeomOverlapCallback_PlaneCapsule(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4 = *a4;
  float v5 = a4[1];
  float v7 = a4[2];
  float v6 = a4[3];
  float v8 = v6 + v6;
  float v9 = (float)((float)(v6 * (float)(v6 + v6)) + -1.0) + (float)(v4 * (float)(v4 + v4));
  float v10 = (float)((float)(v4 + v4) * v5) + (float)(v7 * v8);
  float v11 = (float)((float)(v4 + v4) * v7) - (float)(v5 * v8);
  float v12 = *(float *)(a3 + 4);
  float v13 = *(float *)(a3 + 8);
  float v14 = v9 * v13;
  float v15 = v13 * v10;
  float v16 = v11 * v13;
  float v17 = a4[4];
  float v18 = a4[5];
  float v19 = a4[6];
  float v21 = a2[2];
  float v20 = a2[3];
  float v22 = v20 + v20;
  float v23 = (float)(v20 * (float)(v20 + v20)) + -1.0;
  float v24 = *a2;
  float v25 = a2[1];
  float v26 = v23 + (float)(v24 * (float)(v24 + v24));
  float v27 = (float)((float)(v24 + v24) * v25) + (float)(v21 * v22);
  float v28 = (float)((float)(v24 + v24) * v21) - (float)(v25 * v22);
  float v29 = (float)((float)(a2[5] * v27) + (float)(a2[4] * v26)) + (float)(a2[6] * v28);
  return (float)((float)((float)((float)((float)(v18 + v15) * v27) + (float)((float)(v17 + v14) * v26))
                       + (float)((float)(v16 + v19) * v28))
               - v29) <= v12
      || (float)((float)((float)((float)((float)(v18 - v15) * v27) + (float)((float)(v17 - v14) * v26))
                       + (float)((float)(v19 - v16) * v28))
               - v29) <= v12;
}

BOOL GeomOverlapCallback_PlaneBox(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4 = *a4;
  float v5 = a4[1];
  float v6 = a4[2];
  float v7 = a4[3];
  float v8 = v4 * (float)(v4 + v4);
  float v9 = v5 * (float)(v5 + v5);
  float v10 = v6 * (float)(v6 + v6);
  float v11 = (float)(v4 + v4) * v5;
  float v12 = (float)(v4 + v4) * v6;
  float v13 = (float)(v4 + v4) * v7;
  float v14 = (float)(v5 + v5) * v6;
  float v15 = (float)(v5 + v5) * v7;
  float v16 = (float)(v6 + v6) * v7;
  float v17 = (float)(1.0 - v9) - v10;
  float v18 = v11 + v16;
  float v19 = v12 - v15;
  float v20 = v11 - v16;
  float v21 = 1.0 - v8;
  float v22 = (float)(1.0 - v8) - v10;
  float v23 = v14 + v13;
  float v24 = v12 + v15;
  float v25 = v14 - v13;
  float v26 = v21 - v9;
  float v27 = *a2;
  float v28 = a2[1];
  float v29 = v27 + v27;
  float v31 = a2[2];
  float v30 = a2[3];
  float v32 = v30 + v30;
  float v33 = (float)((float)(v30 * (float)(v30 + v30)) + -1.0) + (float)(v27 * (float)(v27 + v27));
  float v34 = (float)(v29 * v28) + (float)(v31 * (float)(v30 + v30));
  float v35 = (float)(v29 * v31) - (float)(v28 * v32);
  int v36 = -1;
LABEL_2:
  int v37 = v36;
  float v38 = a3[1] * (float)v36;
  float v39 = v17 * v38;
  float v40 = v18 * v38;
  float v41 = v19 * v38;
  int v42 = -1;
LABEL_3:
  int v43 = v42;
  float v44 = a3[2] * (float)v42;
  float v45 = v22 * v44;
  float v46 = v23 * v44;
  float v47 = v39 + (float)(v20 * v44);
  float v48 = v40 + v45;
  float v49 = v41 + v46;
  int v50 = -1;
  while (1)
  {
    float v51 = (float)((float)((float)(v34 * (float)(a4[5] + (float)(v48 + (float)(v25 * (float)(a3[3] * (float)v50)))))
                        + (float)((float)(a4[4] + (float)(v47 + (float)(v24 * (float)(a3[3] * (float)v50)))) * v33))
                + (float)((float)(a4[6] + (float)(v49 + (float)(v26 * (float)(a3[3] * (float)v50)))) * v35))
        - (float)((float)((float)(a2[5] * v34) + (float)(a2[4] * v33)) + (float)(a2[6] * v35));
    if (v51 <= 0.0) {
      return v51 <= 0.0;
    }
    int v52 = v50;
    v50 += 2;
    if ((v52 & 0x80000000) == 0)
    {
      int v42 = v43 + 2;
      if (v43 < 0) {
        goto LABEL_3;
      }
      int v36 = v37 + 2;
      if (v37 < 0) {
        goto LABEL_2;
      }
      return v51 <= 0.0;
    }
  }
}

BOOL GeomOverlapCallback_PlaneConvex(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float v4 = *a4;
  float v5 = a4[1];
  float v7 = a4[2];
  float v6 = a4[3];
  float v9 = a2[2];
  float v8 = a2[3];
  float v10 = a2[1];
  float v11 = (float)((float)((float)(v6 * *a2) - (float)(*a4 * v8)) - (float)(v5 * v9)) + (float)(v10 * v7);
  float v12 = (float)((float)((float)(v6 * v10) - (float)(v5 * v8)) - (float)(v7 * *a2)) + (float)(v9 * *a4);
  float v13 = (float)((float)((float)(v6 * v9) - (float)(v7 * v8)) - (float)(*a4 * v10)) + (float)(*a2 * v5);
  float v14 = (float)((float)((float)(*a4 * *a2) + (float)(v6 * v8)) + (float)(v5 * v10)) + (float)(v7 * v9);
  float v15 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v11 * (float)(v11 + v11));
  float v16 = (float)((float)(v11 + v11) * v12) + (float)(v13 * (float)(v14 + v14));
  float v17 = (float)(v13 * (float)(v11 + v11)) - (float)(v12 * (float)(v14 + v14));
  float v18 = *(float *)(a3 + 20);
  float v19 = *(float *)(a3 + 24);
  float v20 = *(float *)(a3 + 28);
  float v22 = *(float *)(a3 + 12);
  float v21 = *(float *)(a3 + 16);
  float v23 = v18 + v18;
  float v24 = v19 + v19;
  float v25 = v18 * (float)(v18 + v18);
  float v26 = v19 * (float)(v19 + v19);
  float v27 = (float)(v21 + v21) * v18;
  float v28 = (float)(v21 + v21) * v19;
  float v29 = (float)(v21 + v21) * v20;
  float v30 = v23 * v19;
  float v31 = v23 * v20;
  float v32 = v24 * v20;
  float v33 = (float)(1.0 - v25) - v26;
  float v34 = v27 + v32;
  float v35 = v28 - v31;
  float v36 = v27 - v32;
  float v37 = 1.0 - (float)(v21 * (float)(v21 + v21));
  float v38 = v37 - v26;
  float v39 = v30 + v29;
  float v40 = v28 + v31;
  float v41 = v30 - v29;
  float v42 = v37 - v25;
  float v43 = *(float *)(a3 + 4);
  float v44 = *(float *)(a3 + 8);
  float v45 = v43 * v33;
  float v46 = v43 * v36;
  float v47 = v43 * v40;
  float v48 = v34 * v44;
  float v49 = v38 * v44;
  float v50 = v41 * v44;
  float v51 = v35 * v22;
  float v52 = v39 * v22;
  float v53 = v42 * v22;
  float v54 = (float)(v33 * v45) + (float)(v34 * v48);
  float v55 = (float)(v33 * v46) + (float)(v34 * v49);
  float v56 = (float)(v33 * v47) + (float)(v34 * v50);
  float v57 = v54 + (float)(v35 * v51);
  float v58 = v55 + (float)(v35 * v52);
  float v59 = v56 + (float)(v35 * v53);
  float v60 = (float)(v36 * v45) + (float)(v38 * v48);
  float v61 = (float)(v36 * v46) + (float)(v38 * v49);
  float v62 = (float)(v36 * v47) + (float)(v38 * v50);
  float v63 = v60 + (float)(v39 * v51);
  float v64 = v61 + (float)(v39 * v52);
  float v65 = v62 + (float)(v39 * v53);
  float v66 = v40 * v45;
  float v67 = v40 * v46;
  float v68 = v40 * v47;
  float v69 = v41 * v49;
  float v70 = v66 + (float)(v41 * v48);
  float v71 = v68 + (float)(v41 * v50);
  float v72 = v42 * v51;
  float v73 = v42 * v52;
  float v74 = v42 * v53;
  uint64_t v75 = *(void *)(a3 + 32);
  float32x4_t v76 = *(unsigned __int16 **)(v75 + 80);
  float32x4_t v77 = (float *)(*(void *)(v75 + 72) + 20 * *(unsigned __int8 *)(v75 + 71));
  float v78 = v70 + v72;
  float v79 = (float)(v67 + v69) + v73;
  float v81 = a4[4];
  float v80 = a4[5];
  float v82 = v71 + v74;
  float v83 = a4[6];
  float v84 = -v7;
  float v85 = -*a4;
  float v86 = (float)(v17 * v78) + (float)((float)(v15 * v57) + (float)(v16 * v63));
  float v87 = a2[4];
  float v88 = a2[5];
  float v89 = (float)(v17 * v79) + (float)((float)(v15 * v58) + (float)(v16 * v64));
  float v90 = a2[6];
  float v91 = (float)(v17 * v82) + (float)((float)(v15 * v59) + (float)(v16 * v65));
  float v92 = -v5;
  v127[0] = v86;
  v127[1] = v89;
  v127[2] = v91;
  if (v76)
  {
    unsigned int v94 = fabs((float)(v17 * v78) + (float)((float)(v15 * v57) + (float)(v16 * v63)));
    unsigned int v95 = fabs((float)(v17 * v82) + (float)((float)(v15 * v59) + (float)(v16 * v65)));
    BOOL v96 = (LODWORD(v89) & 0x7FFFFFFFu) > v94 && (LODWORD(v89) & 0x7FFFFFFFu) > v95;
    float v122 = v16;
    float v123 = v15;
    float v121 = v17;
    float v120 = v88;
    float v118 = v90;
    float v119 = v87;
    float v116 = v81;
    float v117 = v80;
    float v115 = v83;
    if (v96)
    {
      uint64_t v99 = 0;
      int v98 = 1;
      uint64_t v97 = 2;
    }
    else if (v95 <= v94)
    {
      int v98 = 0;
      uint64_t v99 = 2;
      uint64_t v97 = 1;
    }
    else
    {
      uint64_t v97 = 0;
      int v98 = 2;
      uint64_t v99 = 1;
    }
    float v102 = 1.0 / fabsf(v127[v98]);
    HIDWORD(v103) = v98;
    *(float *)&unint64_t v103 = v127[v98];
    int v93 = *v76;
    float32x4_t v104 = (unsigned __int8 *)(*((void *)v76 + 1)
                             + (float)((float)((float)((float)(v93 - 1) * 0.5)
                                                           * (float)((float)(v102 * v127[v99]) + 1.0))
                                                   + 0.5)
                             + ((float)((float)((float)((float)(v93 - 1) * 0.5)
                                                            * (float)((float)(v127[v97] * v102) + 1.0))
                                                    + 0.5)
                              + (v103 >> 31) * v93)
                             * v93);
    int v105 = *v104;
    int v125 = v104[v76[1]];
    int v126 = v105;
    v124[0] = -v86;
    v124[1] = -v89;
    v124[2] = -v91;
    physx::localSearch(&v126, v124, (uint64_t)v77, (uint64_t)v76);
    physx::localSearch(&v125, v127, (uint64_t)v77, (uint64_t)v76);
    float v101 = (float)((float)(v89 * v77[3 * v126 + 1]) + (float)(v77[3 * v126] * v86)) + (float)(v77[3 * v126 + 2] * v91);
    float v16 = v122;
    float v15 = v123;
    float v84 = -v7;
    float v17 = v121;
    float v88 = v120;
    float v92 = -v5;
    float v90 = v118;
    float v87 = v119;
    float v81 = v116;
    float v80 = v117;
    float v83 = v115;
  }
  else
  {
    int v100 = *(unsigned __int8 *)(v75 + 70);
    float v101 = 3.4028e38;
    do
    {
      if (v101 >= (float)((float)((float)(v89 * v77[1]) + (float)(*v77 * v86)) + (float)(v77[2] * v91))) {
        float v101 = (float)((float)(v89 * v77[1]) + (float)(*v77 * v86)) + (float)(v77[2] * v91);
      }
      v77 += 3;
      --v100;
    }
    while (v100);
  }
  float v106 = v80 * -2.0;
  float v107 = (float)((float)((float)(v80 * -2.0) * v5) + (float)(v4 * (float)(v81 * -2.0)))
       + (float)(v7 * (float)(v83 * -2.0));
  float v108 = (float)(v6 * v6) + -0.5;
  float v109 = (float)((float)((float)(v83 * -2.0) * v108)
               - (float)((float)((float)((float)(v81 * -2.0) * v92) + (float)(v4 * (float)(v80 * -2.0))) * v6))
       + (float)(v7 * v107);
  float v110 = v90 + v90;
  float v111 = v87 + v87;
  float v112 = v88 + v88;
  float v113 = (float)((float)(v112 * v92) + (float)(v85 * v111)) + (float)(v84 * v110);
  return v101 <= (float)((float)((float)((float)((float)((float)((float)(v106 * v108)
                                                               - (float)((float)((float)((float)(v83 * -2.0) * v85)
                                                                               + (float)(v7 * (float)(v81 * -2.0)))
                                                                       * v6))
                                                       + (float)(v5 * v107))
                                               + (float)((float)((float)(v6
                                                                       * (float)((float)(v4 * v110) + (float)(v84 * v111)))
                                                               + (float)(v112 * v108))
                                                       + (float)(v92 * v113)))
                                       * v16)
                               + (float)((float)((float)((float)((float)((float)(v81 * -2.0) * v108)
                                                               - (float)((float)((float)(v106 * v84)
                                                                               + (float)(v5 * (float)(v83 * -2.0)))
                                                                       * v6))
                                                       + (float)(v4 * v107))
                                               + (float)((float)((float)(v6
                                                                       * (float)((float)(v7 * v112) + (float)(v92 * v110)))
                                                               + (float)(v111 * v108))
                                                       + (float)(v85 * v113)))
                                       * v15))
                       + (float)((float)(v109
                                       + (float)((float)((float)(v6 * (float)((float)(v5 * v111) + (float)(v85 * v112)))
                                                       + (float)(v110 * v108))
                                               + (float)(v84 * v113)))
                               * v17));
}

BOOL GeomOverlapCallback_CapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4 = *(float *)(a2 + 12);
  float v5 = *(float *)(a4 + 12);
  float v6 = *(float *)(a4 + 16) - *(float *)(a2 + 16);
  float v7 = *(float *)a2;
  float v8 = *(float *)(a2 + 4);
  float v9 = v7 + v7;
  float v10 = *(float *)(a2 + 8);
  float v11 = v4 + v4;
  float v12 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  float v13 = (float)(v9 * v8) + (float)(v10 * (float)(v4 + v4));
  float v14 = (float)(v9 * v10) - (float)(v8 * v11);
  float v15 = *(float *)(a1 + 8);
  float v16 = *(float *)a4;
  float v17 = v5 + v5;
  float v18 = *(float *)(a3 + 8);
  float32_t v19 = (float)((float)((float)(v5 * (float)(v5 + v5)) + -1.0) + (float)(v16 * (float)(v16 + v16))) * v18;
  v32[0] = -(float)(v12 * v15);
  v32[1] = -(float)(v15 * v13);
  float v32[2] = -(float)(v14 * v15);
  v31[0] = (float)(v12 * v15) + (float)(v12 * v15);
  v31[1] = (float)(v15 * v13) + (float)(v15 * v13);
  v31[2] = (float)(v14 * v15) + (float)(v14 * v15);
  float v29 = v6 - v19;
  float32x2_t v20 = *(float32x2_t *)(a4 + 4);
  float32_t v21 = -v20.f32[0];
  float32x2_t v22 = vmul_n_f32(v20, v16 + v16);
  v20.i32[0] = vdup_lane_s32((int32x2_t)v20, 1).u32[0];
  v20.f32[1] = v21;
  float32x2_t v23 = vmul_n_f32(vmla_n_f32(v22, v20, v17), v18);
  float32x2_t v30 = vsub_f32(vsub_f32(*(float32x2_t *)(a4 + 20), *(float32x2_t *)(a2 + 20)), v23);
  float v24 = v23.f32[1];
  float32x2_t v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v23, 0);
  v25.f32[0] = v19;
  float32x2_t v27 = vadd_f32(v25, v25);
  float v28 = v24 + v24;
  return physx::Gu::distanceSegmentSegmentSquared(v32, v31, &v29, (float *)&v27, 0, 0) <= (float)((float)(*(float *)(a1 + 4) + *(float *)(a3 + 4)) * (float)(*(float *)(a1 + 4) + *(float *)(a3 + 4)));
}

BOOL GeomOverlapCallback_CapsuleBox(uint64_t a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4)
{
  float v5 = a4[3].f32[0] - a2[3].f32[0];
  float32x2_t v36 = vsub_f32(a4[2], a2[2]);
  float v37 = v5;
  float v6 = a2->f32[0];
  float v7 = a2->f32[1];
  float v8 = v6 + v6;
  float v10 = a2[1].f32[0];
  float v9 = a2[1].f32[1];
  float v11 = v9 + v9;
  float v12 = (float)((float)(v9 * (float)(v9 + v9)) + -1.0) + (float)(v6 * (float)(v6 + v6));
  float v13 = (float)(v8 * v7) + (float)(v10 * (float)(v9 + v9));
  float v14 = (float)(v8 * v10) - (float)(v7 * v11);
  float v15 = *(float *)(a1 + 8);
  v35[0] = v12 * v15;
  v35[1] = v15 * v13;
  v35[2] = v14 * v15;
  float v16 = a4->f32[0];
  float v17 = a4->f32[1];
  float v18 = a4[1].f32[0];
  float v19 = a4[1].f32[1];
  float v20 = v17 + v17;
  float v21 = v18 + v18;
  float v22 = v17 * (float)(v17 + v17);
  float v23 = v18 * (float)(v18 + v18);
  float v24 = (float)(v16 + v16) * v17;
  float v25 = (float)(v16 + v16) * v18;
  float v26 = (float)(v16 + v16) * v19;
  float v27 = v20 * v18;
  float v28 = v20 * v19;
  float v29 = v21 * v19;
  v34[0] = (float)(1.0 - v22) - v23;
  v34[1] = v24 + v29;
  float v30 = 1.0 - (float)(v16 * (float)(v16 + v16));
  _OWORD v34[2] = v25 - v28;
  v34[3] = v24 - v29;
  unsigned char v34[4] = v30 - v23;
  v34[5] = v27 + v26;
  v34[6] = v25 + v28;
  v34[7] = v27 - v26;
  v34[8] = v30 - v22;
  v33[0] = -(float)(v12 * v15);
  v33[1] = -(float)(v15 * v13);
  v33[2] = -(float)(v14 * v15);
  physx::Gu::distanceSegmentBoxSquared(v35, v33, (float *)&v36, (float32x2_t *)(a3 + 4), v34, 0, 0);
  return v31 <= (float)(*(float *)(a1 + 4) * *(float *)(a1 + 4));
}

BOOL GeomOverlapCallback_CapsuleConvex(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, int8x8_t a6)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = 0;
  if (a5)
  {
    float v11 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      uint64_t v10 = *(void *)a5;
      float v11 = a5[2];
    }
  }
  else
  {
    float v11 = 1.0;
  }
  a6.i32[0] = *(_DWORD *)(a1 + 4);
  float v12 = *(float *)(a1 + 8);
  float32x4_t v13 = *(float32x4_t *)(a3 + 4);
  float32x4_t v14 = v13;
  v14.i32[3] = 0;
  float32x4_t v15 = *(float32x4_t *)(a3 + 16);
  float v16 = *a4;
  float v17 = a4[1];
  float v19 = a4[2];
  float v18 = a4[3];
  float v20 = *(float *)(a2 + 16);
  float v21 = *(float *)(a2 + 20);
  float v23 = a4[4];
  float v22 = a4[5];
  float v24 = *(float *)(a2 + 24);
  float v25 = a4[6];
  v6.i32[0] = *(_DWORD *)(a2 + 8);
  float v26 = *(float *)(a2 + 12);
  float v28 = *(float *)a2;
  float v27 = *(float *)(a2 + 4);
  BOOL v29 = COERCE_FLOAT(*(void *)(a3 + 12)) == 1.0;
  if (COERCE_FLOAT(HIDWORD(*(void *)(a3 + 4))) != 1.0) {
    BOOL v29 = 0;
  }
  if (v13.f32[0] != 1.0) {
    BOOL v29 = 0;
  }
  char v148 = 0;
  uint64_t v155 = v9 + 32;
  uint64_t v157 = *(void *)(v9 + 72) + 20 * *(unsigned __int8 *)(v9 + 71);
  char v158 = *(unsigned char *)(v9 + 70);
  v30.i64[0] = *(void *)(v9 + 92);
  v30.i64[1] = *(unsigned int *)(v9 + 100);
  int32x4_t v31 = (int32x4_t)vmulq_f32(v14, v30);
  float32x4_t v146 = 0u;
  long long v147 = 0u;
  float32x2_t v32 = vpmin_f32((float32x2_t)vdup_laneq_s32(v31, 2), *(float32x2_t *)v31.i8);
  v32.f32[0] = vpmin_f32(v32, v32).f32[0];
  *(float32x2_t *)&long long v147 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v32.f32[0]);
  *((float *)&v147 + 2) = 0.025 * v32.f32[0];
  __asm { FMOV            V24.2S, #1.0 }
  if (v29)
  {
    v38.i32[1] = 0;
    v39.i32[1] = 1065353216;
    long long v149 = xmmword_23435FD50;
    long long v150 = xmmword_23435FD60;
    long long v151 = xmmword_23435FD80;
    long long v152 = xmmword_23435FD50;
    long long v153 = xmmword_23435FD60;
    long long v154 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v40 = vrecpeq_f32(v14);
    int v41 = 4;
    do
    {
      float32x4_t v40 = vmulq_f32(v40, vrecpsq_f32(v40, v14));
      --v41;
    }
    while (v41);
    *(int32x2_t *)v42.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v42.i64[1] = v42.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v42, v14)), a6).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      float32x2_t v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      float32x2_t v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      float32x4_t v50 = vaddq_f32(v15, v15);
      uint64_t v128 = v10;
      float32x2_t v51 = vmul_lane_f32(v47, *(float32x2_t *)v50.f32, 1);
      float32x2_t v52 = vmul_laneq_f32(v48, v50, 2);
      float32x2_t v53 = vmul_n_f32(v47, v50.f32[0]);
      float v127 = v11;
      float32x2_t v54 = vmul_n_f32(v48, v50.f32[0]);
      float32x2_t v55 = vmul_n_f32(v49, v50.f32[0]);
      float32x2_t v56 = vmul_lane_f32(v48, *(float32x2_t *)v50.f32, 1);
      float32x2_t v57 = vmul_lane_f32(v49, *(float32x2_t *)v50.f32, 1);
      float32x2_t v58 = vmul_laneq_f32(v49, v50, 2);
      float32x2_t v59 = vsub_f32(_D24, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v50.f32), 0));
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v51), v52), (int8x8_t)vadd_f32(v53, v58), 4uLL);
      int8x8_t v60 = (int8x8_t)vsub_f32(v53, v58);
      v61.i64[0] = v50.i64[0];
      v61.i64[1] = vsub_f32(v54, v57).u32[0];
      int32x2_t v62 = (int32x2_t)vext_s8(v60, (int8x8_t)vsub_f32(v59, v52), 4uLL);
      int8x8_t v63 = (int8x8_t)vadd_f32(v54, v57);
      *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), (int8x8_t)v62, 4uLL);
      int8x8_t v65 = (int8x8_t)vdup_lane_s32(v62, 1);
      *(int32x2_t *)v66.f32 = v62;
      v66.i64[1] = vadd_f32(v56, v55).u32[0];
      *(int8x8_t *)v67.f32 = vext_s8(v63, (int8x8_t)vsub_f32(v56, v55), 4uLL);
      *(int8x8_t *)v68.f32 = vext_s8(*(int8x8_t *)v50.f32, v65, 4uLL);
      v67.i64[1] = vsub_f32(v59, v51).u32[0];
      v64.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 0).u32[0];
      v68.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 1).u32[0];
      *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v61.u32[2], 0), *(int8x8_t *)&v66.u32[2], 4uLL);
      v69.i64[1] = vdup_lane_s32(*(int32x2_t *)&v67.u32[2], 0).u32[0];
      float32x4_t v70 = vmulq_n_f32(v64, v13.f32[0]);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_lane_f32(v68, *(float32x2_t *)v13.f32, 1);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_laneq_f32(v69, v13, 2);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_n_f32(v70, v61.f32[0]);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_lane_f32(v71, *(float32x2_t *)v61.f32, 1);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_laneq_f32(v72, v61, 2);
      v75.i32[3] = 0;
      float32x4_t v43 = vaddq_f32(v75, vaddq_f32(v73, v74));
      float32x4_t v76 = vmulq_n_f32(v70, v66.f32[0]);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_lane_f32(v71, *(float32x2_t *)v66.f32, 1);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_laneq_f32(v72, v66, 2);
      v78.i32[3] = 0;
      float32x4_t v79 = vaddq_f32(v76, v77);
      float v11 = v127;
      float32x4_t v15 = vaddq_f32(v78, v79);
      float32x4_t v80 = vmulq_n_f32(v70, v67.f32[0]);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_lane_f32(v71, *(float32x2_t *)v67.f32, 1);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_laneq_f32(v72, v67, 2);
      v82.i32[3] = 0;
      float32x4_t v7 = vaddq_f32(v82, vaddq_f32(v80, v81));
      long long v149 = (__int128)v43;
      long long v150 = (__int128)v15;
      float32x4_t v83 = vmulq_n_f32(v64, v40.f32[0]);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_lane_f32(v68, *(float32x2_t *)v40.f32, 1);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_laneq_f32(v69, v40, 2);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_n_f32(v83, v61.f32[0]);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_lane_f32(v84, *(float32x2_t *)v61.f32, 1);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_laneq_f32(v85, v61, 2);
      v88.i32[3] = 0;
      float32x4_t v44 = vaddq_f32(v88, vaddq_f32(v86, v87));
      float32x4_t v89 = vmulq_n_f32(v83, v66.f32[0]);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_lane_f32(v84, *(float32x2_t *)v66.f32, 1);
      v90.i32[3] = 0;
      float32x4_t v91 = vmulq_laneq_f32(v85, v66, 2);
      v91.i32[3] = 0;
      float32x4_t v92 = vaddq_f32(v89, v90);
      uint64_t v10 = v128;
      float32x4_t v93 = vmulq_n_f32(v83, v67.f32[0]);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_lane_f32(v84, *(float32x2_t *)v67.f32, 1);
      v94.i32[3] = 0;
      float32x4_t v45 = vaddq_f32(v91, v92);
      float32x4_t v95 = vmulq_laneq_f32(v85, v67, 2);
      v95.i32[3] = 0;
      float32x4_t v46 = vaddq_f32(v95, vaddq_f32(v93, v94));
    }
    else
    {
      v40.i32[3] = 0;
      float32x4_t v43 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD50);
      float32x4_t v15 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD60);
      float32x4_t v7 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD80);
      long long v149 = (__int128)v43;
      long long v150 = (__int128)v15;
      float32x4_t v44 = vmulq_f32(v40, (float32x4_t)xmmword_23435FD50);
      float32x4_t v45 = vmulq_f32(v40, (float32x4_t)xmmword_23435FD60);
      float32x4_t v46 = vmulq_f32(v40, (float32x4_t)xmmword_23435FD80);
    }
    long long v151 = (__int128)v7;
    long long v152 = (__int128)v44;
    long long v153 = (__int128)v45;
    long long v154 = (__int128)v46;
    float32x4_t v96 = vmulq_f32(v43, (float32x4_t)0);
    v96.i32[3] = 0;
    float32x4_t v97 = vmulq_f32(v15, (float32x4_t)0);
    v97.i32[3] = 0;
    float32x4_t v39 = vmulq_f32(v7, (float32x4_t)0);
    v39.i32[3] = 0;
    float32x4_t v38 = vaddq_f32(v39, vaddq_f32(v97, v96));
    float32x4_t v146 = v38;
  }
  v38.f32[0] = (float)((float)((float)(v18 * v28) - (float)(v16 * v26)) - (float)(v17 * *(float *)v6.i32))
             + (float)(v27 * v19);
  v39.f32[0] = v38.f32[0] + v38.f32[0];
  v15.f32[0] = (float)((float)((float)(v18 * *(float *)v6.i32) - (float)(v19 * v26)) - (float)(v16 * v27))
             + (float)(v28 * v17);
  float32x2_t v98 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
  float32x2_t v99 = vmul_n_f32(v98, v38.f32[0] + v38.f32[0]);
  v7.f32[0] = (float)((float)((float)(v18 * v27) - (float)(v17 * v26)) - (float)(v19 * v28))
            + (float)(*(float *)v6.i32 * v16);
  *(float *)v6.i32 = (float)((float)((float)(v16 * v28) + (float)(v18 * v26)) + (float)(v17 * v27))
                   + (float)(v19 * *(float *)v6.i32);
  float32x2_t v100 = (float32x2_t)vdup_lane_s32(v6, 0);
  float32x2_t v101 = vmul_n_f32(v100, v7.f32[0] + v7.f32[0]);
  float32x2_t v102 = vmul_n_f32(v98, v7.f32[0] + v7.f32[0]);
  float32x2_t v103 = vmul_n_f32(v100, v38.f32[0] + v38.f32[0]);
  *(int8x8_t *)v104.f32 = vext_s8((int8x8_t)vadd_f32(v99, v101), (int8x8_t)vsub_f32(v102, v103), 4uLL);
  v38.f32[0] = v38.f32[0] * (float)(v38.f32[0] + v38.f32[0]);
  float32x2_t v105 = vsub_f32(_D24, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0));
  float32x2_t v106 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v7.f32[0] + v7.f32[0]);
  *(float32x2_t *)&v104.u32[2] = vsub_f32(v105, v106);
  float32x2_t v107 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), v7.f32[0]);
  float32x2_t v108 = vmul_n_f32(v100, v15.f32[0] + v15.f32[0]);
  float32x2_t v109 = vmul_n_f32(v98, v15.f32[0] + v15.f32[0]);
  *(int8x8_t *)v110.f32 = vext_s8((int8x8_t)vsub_f32(v107, v108), (int8x8_t)vsub_f32(v105, v109), 4uLL);
  *(float32x2_t *)&v110.u32[2] = vadd_f32(v103, v102);
  *(int8x8_t *)v111.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v106), v109), (int8x8_t)vadd_f32(v107, v108), 4uLL);
  *(float32x2_t *)&v111.u32[2] = vsub_f32(v99, v101);
  float v112 = (float)(v24 - v25) + (float)(v24 - v25);
  float v113 = (float)(v20 - v23) + (float)(v20 - v23);
  float v114 = (float)(v21 - v22) + (float)(v21 - v22);
  float v115 = (float)((float)-(float)(v17 * v114) - (float)(v16 * v113)) - (float)(v19 * v112);
  float v116 = (float)(v18 * v18) + -0.5;
  *(float *)&unsigned int v117 = (float)((float)(v18 * (float)((float)(v17 * v113) - (float)(v16 * v114))) + (float)(v112 * v116))
                  - (float)(v19 * v115);
  v106.f32[0] = (float)((float)(v18 * (float)((float)(v16 * v112) - (float)(v19 * v113))) + (float)(v114 * v116))
              - (float)(v17 * v115);
  v118.f32[0] = (float)((float)(v18 * (float)((float)(v19 * v114) - (float)(v17 * v112))) + (float)(v113 * v116))
              - (float)(v16 * v115);
  v118.i32[1] = v106.i32[0];
  v118.i64[1] = v117;
  uint64_t v156 = *(void *)(v9 + 80);
  float32x4_t v119 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v12);
  float32x4_t v120 = vmulq_n_f32(v111, v119.f32[0]);
  v120.i32[3] = 0;
  float32x4_t v121 = vmulq_lane_f32(v110, *(float32x2_t *)v119.f32, 1);
  v121.i32[3] = 0;
  float32x4_t v122 = vmulq_laneq_f32(v104, v119, 2);
  v122.i32[3] = 0;
  float32x4_t v123 = vaddq_f32(v122, vaddq_f32(v121, v120));
  int v141 = 4;
  int8x16_t v136 = 0u;
  float32x4_t v137 = v118;
  int32x2_t v145 = vdup_lane_s32((int32x2_t)a6, 0);
  float32x4_t v143 = vaddq_f32(v118, v123);
  float32x4_t v144 = vsubq_f32(v118, v123);
  __int32 v138 = a6.i32[0];
  __int32 v139 = a6.i32[0];
  __int32 v140 = a6.i32[0];
  char v142 = 1;
  float32x4_t v134 = 0u;
  int8x16_t v135 = 0u;
  uint64_t v133 = 0;
  v132[1] = &v137;
  v131[1] = &v146;
  v132[0] = &unk_26E7287F0;
  v131[0] = &unk_26E728850;
  float32x4_t v130 = vsubq_f32(v118, v146);
  uint64_t v129 = 0;
  int v124 = physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v132, (uint64_t)v131, &v130, &v129, &v136, &v135, &v134, &v133, 0.0, *(double *)v130.i64, *(double *)v143.i64, (int32x4_t)0);
  if (a5 && v124 == 2)
  {
    *(void *)a5 = v10;
    a5[2] = v11;
    __int16 v125 = 2;
LABEL_22:
    *((_WORD *)a5 + 6) = v125;
    return v124 == 2;
  }
  if (a5)
  {
    __int16 v125 = 2 * (v124 == 2);
    goto LABEL_22;
  }
  return v124 == 2;
}

uint64_t GeomOverlapCallback_BoxBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x2_t v4 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  float32x2_t v5 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  float32x2_t v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  float32x2_t v8 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v9 = vmul_lane_f32(v4, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v10 = vmul_laneq_f32(v5, _Q4, 2);
  float32x2_t v11 = vmul_n_f32(v4, _Q4.f32[0]);
  float32x2_t v12 = vmul_n_f32(v5, _Q4.f32[0]);
  float32x2_t v13 = vmul_n_f32(v6, _Q4.f32[0]);
  float32x2_t v14 = vmul_lane_f32(v5, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v15 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v16 = vmul_laneq_f32(v6, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v21 = vsub_f32(*(float32x2_t *)_Q4.f32, v8);
  LODWORD(v22) = vsub_f32(v12, v15).u32[0];
  int32x2_t v23 = (int32x2_t)vadd_f32(v14, v13);
  *(int8x8_t *)&long long v24 = vext_s8((int8x8_t)vadd_f32(v12, v15), (int8x8_t)vsub_f32(v14, v13), 4uLL);
  *((void *)&v24 + 1) = vsub_f32(v21, v9).u32[0];
  v42[0] = (float)(1.0 - v9.f32[1]) - v10.f32[1];
  LODWORD(v42[1]) = vadd_f32(v11, v16).u32[0];
  HIDWORD(v22) = vsub_f32(v11, v16).i32[1];
  uint64_t v43 = v22;
  int32x2_t v44 = vzip1_s32((int32x2_t)vsub_f32(v21, v10), v23);
  long long v45 = v24;
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  *(int32x2_t *)&long long v24 = vdup_laneq_s32(*(int32x4_t *)a4, 2);
  float32x2_t v26 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  float32x4_t v27 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  float32x2_t v28 = vmul_lane_f32(v25, *(float32x2_t *)v27.f32, 1);
  float32x2_t v29 = vmul_laneq_f32(*(float32x2_t *)&v24, v27, 2);
  float32x2_t v30 = vmul_n_f32(v25, v27.f32[0]);
  float32x2_t v31 = vmul_n_f32(*(float32x2_t *)&v24, v27.f32[0]);
  float32x2_t v32 = vmul_n_f32(v26, v27.f32[0]);
  *(float32x2_t *)&long long v24 = vmul_lane_f32(*(float32x2_t *)&v24, *(float32x2_t *)v27.f32, 1);
  float32x2_t v33 = vmul_lane_f32(v26, *(float32x2_t *)v27.f32, 1);
  float32x2_t v34 = vmul_laneq_f32(v26, v27, 2);
  float32x2_t v35 = vsub_f32(*(float32x2_t *)_Q4.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)v27.f32), 0));
  v27.i32[0] = vsub_f32(v31, v33).u32[0];
  int32x2_t v36 = (int32x2_t)vadd_f32(*(float32x2_t *)&v24, v32);
  *(int8x8_t *)&long long v24 = vext_s8((int8x8_t)vadd_f32(v31, v33), (int8x8_t)vsub_f32(*(float32x2_t *)&v24, v32), 4uLL);
  *((void *)&v24 + 1) = vsub_f32(v35, v28).u32[0];
  v38[0] = (float)(1.0 - v28.f32[1]) - v29.f32[1];
  LODWORD(v38[1]) = vadd_f32(v30, v34).u32[0];
  v27.i32[1] = vsub_f32(v30, v34).i32[1];
  uint64_t v39 = v27.i64[0];
  int32x2_t v40 = vzip1_s32((int32x2_t)vsub_f32(v35, v29), v36);
  long long v41 = v24;
  return physx::Gu::intersectOBBOBB((float *)(a1 + 4), (float *)(a2 + 16), v42, (float *)(a3 + 4), (float *)(a4 + 16), (uint64_t)v38, 1);
}

uint64_t GeomOverlapCallback_BoxConvex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, double a6, int32x4_t a7)
{
  uint64_t v298 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(void *)(a3 + 32);
  uint64_t v14 = 0;
  if (a5)
  {
    float v15 = 1.0;
    if (*((_WORD *)a5 + 6) == 2)
    {
      uint64_t v14 = *(void *)a5;
      float v15 = a5[2];
    }
  }
  else
  {
    float v15 = 1.0;
  }
  uint64_t v251 = v14;
  BOOL v16 = 0;
  a7.i64[0] = *(void *)(a1 + 4);
  __int32 v17 = *(_DWORD *)(a1 + 12);
  float32x4_t v18 = *(float32x4_t *)(a3 + 4);
  float32x4_t v19 = v18;
  v19.i32[3] = 0;
  float32x4_t v20 = *(float32x4_t *)(a3 + 16);
  float v21 = *(float *)(a4 + 4);
  v7.i32[0] = *(_DWORD *)(a4 + 8);
  float v22 = *(float *)(a4 + 12);
  float v23 = *(float *)(a2 + 16) - *(float *)(a4 + 16);
  *(float *)v8.i32 = *(float *)(a2 + 20) - *(float *)(a4 + 20);
  float v24 = *(float *)(a2 + 24) - *(float *)(a4 + 24);
  float v25 = v23 + v23;
  *(float *)v8.i32 = *(float *)v8.i32 + *(float *)v8.i32;
  float v26 = v24 + v24;
  *(float *)v9.i32 = (float)(v22 * v22) + -0.5;
  float v27 = (float)((float)-(float)(v21 * *(float *)v8.i32) - (float)(*(float *)a4 * v25)) - (float)(*(float *)v7.i32 * v26);
  *(float *)&unsigned int v28 = (float)((float)(v22 * (float)((float)(*(float *)v7.i32 * *(float *)v8.i32) - (float)(v21 * v26)))
                         + (float)(v25 * *(float *)v9.i32))
                 - (float)(*(float *)a4 * v27);
  *(float *)&unsigned int v29 = (float)((float)(v22 * (float)((float)(*(float *)a4 * v26) - (float)(*(float *)v7.i32 * v25)))
                         + (float)(*(float *)v8.i32 * *(float *)v9.i32))
                 - (float)(v21 * v27);
  *(float *)&unsigned int v30 = (float)((float)(v22 * (float)((float)(v21 * v25) - (float)(*(float *)a4 * *(float *)v8.i32)))
                         + (float)(v26 * *(float *)v9.i32))
                 - (float)(*(float *)v7.i32 * v27);
  float v31 = *(float *)(a2 + 8);
  v8.i32[0] = *(_DWORD *)(a2 + 12);
  float v32 = *(float *)(a2 + 4);
  *(float *)v9.i32 = (float)((float)((float)(v22 * *(float *)a2) - (float)(*(float *)a4 * *(float *)v8.i32))
                           - (float)(v21 * v31))
                   + (float)(v32 * *(float *)v7.i32);
  *(float *)v10.i32 = (float)((float)((float)(v22 * v32) - (float)(v21 * *(float *)v8.i32))
                            - (float)(*(float *)v7.i32 * *(float *)a2))
                    + (float)(v31 * *(float *)a4);
  *(float *)v11.i32 = (float)((float)((float)(v22 * v31) - (float)(*(float *)v7.i32 * *(float *)v8.i32))
                            - (float)(*(float *)a4 * v32))
                    + (float)(*(float *)a2 * v21);
  *(float *)v7.i32 = (float)((float)((float)(*(float *)a4 * *(float *)a2) + (float)(v22 * *(float *)v8.i32))
                           + (float)(v21 * v32))
                   + (float)(*(float *)v7.i32 * v31);
  v33.i64[0] = __PAIR64__(v29, v28);
  v33.i64[1] = v30;
  float32x2_t v34 = (float32x2_t)vdup_lane_s32(v11, 0);
  float32x2_t v35 = (float32x2_t)vdup_lane_s32(v7, 0);
  *(float *)v8.i32 = *(float *)v9.i32 + *(float *)v9.i32;
  *(float *)v9.i32 = *(float *)v9.i32 * (float)(*(float *)v9.i32 + *(float *)v9.i32);
  float32x2_t v36 = vmul_n_f32((float32x2_t)vdup_lane_s32(v10, 0), *(float *)v10.i32 + *(float *)v10.i32);
  float32x2_t v37 = vmul_n_f32(v34, *(float *)v11.i32 + *(float *)v11.i32);
  float32x2_t v38 = vmul_n_f32((float32x2_t)vdup_lane_s32(v8, 0), *(float *)v10.i32);
  float32x2_t v39 = vmul_n_f32(v34, *(float *)v8.i32);
  float32x2_t v40 = vmul_n_f32(v35, *(float *)v8.i32);
  float32x2_t v41 = vmul_n_f32(v34, *(float *)v10.i32 + *(float *)v10.i32);
  float32x2_t v42 = vmul_n_f32(v35, *(float *)v10.i32 + *(float *)v10.i32);
  float32x2_t v43 = vmul_n_f32(v35, *(float *)v11.i32 + *(float *)v11.i32);
  __asm { FMOV            V10.2S, #1.0 }
  float32x2_t v49 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32(v9, 0));
  *(int8x8_t *)v50.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v36), v37), (int8x8_t)vadd_f32(v38, v43), 4uLL);
  v50.i64[1] = vsub_f32(v39, v42).u32[0];
  *(int8x8_t *)v51.i8 = vext_s8((int8x8_t)vsub_f32(v38, v43), (int8x8_t)vsub_f32(v49, v37), 4uLL);
  v51.i64[1] = vadd_f32(v40, v41).u32[0];
  float32x4_t v269 = (float32x4_t)v50;
  int32x4_t v270 = v51;
  *(int8x8_t *)v51.i8 = vext_s8((int8x8_t)vadd_f32(v39, v42), (int8x8_t)vsub_f32(v41, v40), 4uLL);
  v51.i64[1] = vsub_f32(v49, v36).u32[0];
  float32x4_t v271 = (float32x4_t)v51;
  float32x4_t v272 = v33;
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0) {
    BOOL v16 = *(float *)(a3 + 12) == 1.0;
  }
  char v282 = 0;
  uint64_t v289 = v13 + 32;
  uint64_t v291 = *(void *)(v13 + 72) + 20 * *(unsigned __int8 *)(v13 + 71);
  char v292 = *(unsigned char *)(v13 + 70);
  v52.i64[0] = *(void *)(v13 + 92);
  v52.i64[1] = *(unsigned int *)(v13 + 100);
  int32x4_t v53 = (int32x4_t)vmulq_f32(v19, v52);
  float32x4_t v278 = 0uLL;
  int v281 = 0;
  *(float32x2_t *)v53.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v53, 2), *(float32x2_t *)v53.i8);
  float v54 = vpmin_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8).f32[0];
  int32x2_t v55 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v54);
  int32x2_t v279 = v55;
  float v280 = 0.025 * v54;
  if (v16)
  {
    long long v283 = xmmword_23435FD50;
    long long v284 = xmmword_23435FD60;
    long long v285 = xmmword_23435FD80;
    long long v286 = xmmword_23435FD50;
    long long v287 = xmmword_23435FD60;
    long long v288 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v56 = vrecpeq_f32(v19);
    int v57 = 4;
    do
    {
      float32x4_t v56 = vmulq_f32(v56, vrecpsq_f32(v56, v19));
      --v57;
    }
    while (v57);
    *(int32x2_t *)v58.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
    v58.i64[1] = v58.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v58, v19)), *(int8x8_t *)v33.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v65 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
      float32x2_t v66 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
      float32x2_t v67 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 3);
      float32x4_t v68 = vaddq_f32(v20, v20);
      float32x2_t v69 = vmul_lane_f32(v65, *(float32x2_t *)v68.f32, 1);
      float32x2_t v70 = vmul_laneq_f32(v66, v68, 2);
      float32x2_t v71 = vmul_n_f32(v65, v68.f32[0]);
      float32x2_t v72 = vmul_n_f32(v66, v68.f32[0]);
      float32x2_t v73 = vmul_n_f32(v67, v68.f32[0]);
      float32x2_t v74 = vmul_lane_f32(v66, *(float32x2_t *)v68.f32, 1);
      float32x2_t v75 = vmul_lane_f32(v67, *(float32x2_t *)v68.f32, 1);
      float32x2_t v76 = vmul_laneq_f32(v67, v68, 2);
      float32x2_t v77 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v68.f32), 0));
      *(int8x8_t *)v68.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v69), v70), (int8x8_t)vadd_f32(v71, v76), 4uLL);
      int8x8_t v78 = (int8x8_t)vsub_f32(v71, v76);
      v79.i64[0] = v68.i64[0];
      v79.i64[1] = vsub_f32(v72, v75).u32[0];
      int32x2_t v80 = (int32x2_t)vext_s8(v78, (int8x8_t)vsub_f32(v77, v70), 4uLL);
      int8x8_t v81 = (int8x8_t)vadd_f32(v72, v75);
      *(int8x8_t *)v82.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 0), (int8x8_t)v80, 4uLL);
      int8x8_t v83 = (int8x8_t)vdup_lane_s32(v80, 1);
      *(int32x2_t *)v84.f32 = v80;
      v84.i64[1] = vadd_f32(v74, v73).u32[0];
      *(int8x8_t *)v85.f32 = vext_s8(v81, (int8x8_t)vsub_f32(v74, v73), 4uLL);
      *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v68.f32, v83, 4uLL);
      v85.i64[1] = vsub_f32(v77, v69).u32[0];
      v82.i64[1] = vdup_lane_s32(*(int32x2_t *)v85.f32, 0).u32[0];
      v86.i64[1] = vdup_lane_s32(*(int32x2_t *)v85.f32, 1).u32[0];
      *(int8x8_t *)v87.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v79.u32[2], 0), (int8x8_t)v84.u32[2], 4uLL);
      v87.i64[1] = vdup_lane_s32(*(int32x2_t *)&v85.u32[2], 0).u32[0];
      float32x4_t v88 = vmulq_n_f32(v82, v18.f32[0]);
      v88.i32[3] = 0;
      float32x4_t v89 = vmulq_lane_f32(v86, *(float32x2_t *)v18.f32, 1);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_laneq_f32(v87, v18, 2);
      v90.i32[3] = 0;
      float32x4_t v91 = vmulq_n_f32(v88, v79.f32[0]);
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_lane_f32(v89, *(float32x2_t *)v79.f32, 1);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_laneq_f32(v90, v79, 2);
      v93.i32[3] = 0;
      float32x4_t v59 = vaddq_f32(v93, vaddq_f32(v91, v92));
      float32x4_t v94 = vmulq_n_f32(v88, v84.f32[0]);
      v94.i32[3] = 0;
      float32x4_t v95 = vmulq_lane_f32(v89, *(float32x2_t *)v84.f32, 1);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_laneq_f32(v90, v84, 2);
      v96.i32[3] = 0;
      float32x4_t v60 = vaddq_f32(v96, vaddq_f32(v94, v95));
      float32x4_t v97 = vmulq_n_f32(v88, v85.f32[0]);
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_lane_f32(v89, *(float32x2_t *)v85.f32, 1);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_laneq_f32(v90, v85, 2);
      v99.i32[3] = 0;
      float32x4_t v61 = vaddq_f32(v99, vaddq_f32(v97, v98));
      long long v283 = (__int128)v59;
      long long v284 = (__int128)v60;
      float32x4_t v100 = vmulq_n_f32(v82, v56.f32[0]);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_lane_f32(v86, *(float32x2_t *)v56.f32, 1);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_laneq_f32(v87, v56, 2);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_n_f32(v100, v79.f32[0]);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_lane_f32(v101, *(float32x2_t *)v79.f32, 1);
      v104.i32[3] = 0;
      float32x4_t v105 = vmulq_laneq_f32(v102, v79, 2);
      v105.i32[3] = 0;
      float32x4_t v62 = vaddq_f32(v105, vaddq_f32(v103, v104));
      float32x4_t v106 = vmulq_n_f32(v100, v84.f32[0]);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_lane_f32(v101, *(float32x2_t *)v84.f32, 1);
      v107.i32[3] = 0;
      float32x4_t v108 = vmulq_laneq_f32(v102, v84, 2);
      v108.i32[3] = 0;
      float32x4_t v109 = vmulq_n_f32(v100, v85.f32[0]);
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_lane_f32(v101, *(float32x2_t *)v85.f32, 1);
      v110.i32[3] = 0;
      float32x4_t v63 = vaddq_f32(v108, vaddq_f32(v106, v107));
      float32x4_t v111 = vmulq_laneq_f32(v102, v85, 2);
      v111.i32[3] = 0;
      float32x4_t v64 = vaddq_f32(v111, vaddq_f32(v109, v110));
    }
    else
    {
      v56.i32[3] = 0;
      float32x4_t v59 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD50);
      float32x4_t v60 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD60);
      float32x4_t v61 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD80);
      long long v283 = (__int128)v59;
      long long v284 = (__int128)v60;
      float32x4_t v62 = vmulq_f32(v56, (float32x4_t)xmmword_23435FD50);
      float32x4_t v63 = vmulq_f32(v56, (float32x4_t)xmmword_23435FD60);
      float32x4_t v64 = vmulq_f32(v56, (float32x4_t)xmmword_23435FD80);
    }
    long long v286 = (__int128)v62;
    long long v287 = (__int128)v63;
    long long v288 = (__int128)v64;
    float32x4_t v112 = vmulq_f32(v59, (float32x4_t)0);
    v112.i32[3] = 0;
    float32x4_t v113 = vmulq_f32(v60, (float32x4_t)0);
    v113.i32[3] = 0;
    float32x4_t v114 = vmulq_f32(v61, (float32x4_t)0);
    v114.i32[3] = 0;
    long long v285 = (__int128)v61;
    float32x4_t v278 = vaddq_f32(v114, vaddq_f32(v113, v112));
  }
  int32x4_t v115 = a7;
  v115.i32[2] = v17;
  float32x2_t v116 = (float32x2_t)vdup_laneq_s32(v115, 2);
  v115.i32[3] = 0;
  uint64_t v290 = *(void *)(v13 + 80);
  int v266 = 3;
  char v267 = 0;
  v262[0] = 0;
  v262[1] = 0;
  int32x4_t v268 = v115;
  float32x2_t v117 = vpmin_f32(v116, *(float32x2_t *)a7.i8);
  int32x2_t v118 = (int32x2_t)vpmin_f32(v117, v117);
  v116.f32[0] = 0.15 * *(float *)v118.i32;
  *(float *)v118.i32 = 0.05 * *(float *)v118.i32;
  __int32 v263 = v116.i32[0];
  __int32 v264 = v118.i32[0];
  __int32 v265 = v118.i32[0];
  v257 = (float32x4_t *)v262;
  float32x4_t v119 = v272;
  float32x4_t v259 = v269;
  v261[0] = v271;
  float32x2x2_t v120 = (float32x2x2_t)vzip1q_s32((int32x4_t)v269, (int32x4_t)v271);
  v299.val[0] = (float32x2_t)vzip2q_s32((int32x4_t)v269, (int32x4_t)v271).u64[0];
  int32x4_t v121 = vzip1q_s32(v270, (int32x4_t)0);
  v299.val[1] = (float32x2_t)vzip2q_s32(v270, (int32x4_t)0).u64[0];
  v258 = &v269;
  float32x4_t v122 = &v259;
  float32x4_t v123 = v261;
  vst2_f32(v122->f32, v120);
  v261[1] = v119;
  float32x4_t v260 = (float32x4_t)vzip2q_s32((int32x4_t)v120, v121);
  vst2_f32(v123->f32, v299);
  float v255 = &v278;
  v256 = &unk_26E728B18;
  float v254 = &unk_26E728850;
  unsigned int v275 = 0;
  float32x4_t v124 = vmulq_f32(v33, v33);
  v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
  float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32)), 0), (int8x16_t)v33, (int8x16_t)xmmword_23435FD50);
  float32x4_t v274 = v125;
  float32x4_t v126 = vmulq_f32(v125, v125);
  float32x4_t v127 = vpaddq_f32(v126, v126);
  *(float32x2_t *)v127.f32 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
  float32x2_t v128 = vrsqrte_f32(*(float32x2_t *)v127.f32);
  int v129 = 4;
  do
  {
    float32x2_t v128 = vmul_f32(v128, vrsqrts_f32(vmul_f32(v128, v128), *(float32x2_t *)v127.f32));
    --v129;
  }
  while (v129);
  float32x2_t v130 = vmul_f32(*(float32x2_t *)v127.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v127.f32), 0), (int8x8_t)_D10, (int8x8_t)v128));
  *(float32x2_t *)v127.f32 = vrecpe_f32(v130);
  int v131 = 4;
  do
  {
    *(float32x2_t *)v127.f32 = vmul_f32(*(float32x2_t *)v127.f32, vrecps_f32(v130, *(float32x2_t *)v127.f32));
    --v131;
  }
  while (v131);
  float32x4_t v132 = vmulq_n_f32(v125, v127.f32[0]);
  v132.i32[3] = 0;
  float32x2_t v133 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v118, 0), (float32x2_t)vdup_lane_s32(v55, 1)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(int32x2_t *)v127.f32 = vdup_n_s32(0x358637BDu);
  float32x2_t v134 = vmax_f32(v133, *(float32x2_t *)v127.f32);
  v133.i32[0] = -v282;
  float32x2_t v135 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v133, (int8x8_t)v55), 0), 0);
  float32x2_t v136 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v137 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  v127.i32[0] = -1;
  int32x4_t v250 = (int32x4_t)v127;
  do
  {
    float32x4_t v253 = v132;
    float32x4_t v273 = v125;
    float32x4_t v138 = vnegq_f32(v125);
    float32x4_t v139 = vmulq_n_f32(v259, v138.f32[0]);
    v139.i32[3] = 0;
    float32x4_t v140 = vmulq_lane_f32(v260, *(float32x2_t *)v138.f32, 1);
    v140.i32[3] = 0;
    float32x4_t v141 = vmulq_laneq_f32(v261[0], v138, 2);
    v141.i32[3] = 0;
    int8x16_t v142 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v139, v140), v141));
    float32x4_t v143 = v257[3];
    int8x16_t v144 = (int8x16_t)vnegq_f32(v143);
    v144.i32[3] = 0;
    float32x4_t v145 = (float32x4_t)vbslq_s8(v142, (int8x16_t)v143, v144);
    float32x4_t v146 = vmulq_n_f32(*v258, v145.f32[0]);
    v146.i32[3] = 0;
    float32x2_t v147 = v136;
    float32x4_t v148 = vmulq_lane_f32(v258[1], *(float32x2_t *)v145.f32, 1);
    v148.i32[3] = 0;
    float32x4_t v149 = vmulq_laneq_f32(v258[2], v145, 2);
    v149.i32[3] = 0;
    float32x4_t v252 = vaddq_f32(v258[3], vaddq_f32(v149, vaddq_f32(v146, v148)));
    *(double *)v150.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v254, &v274);
    float32x4_t v151 = v150;
    float32x4_t v125 = vsubq_f32(v252, v150);
    float32x4_t v152 = vmulq_f32(v253, v125);
    v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
    float32x2_t v153 = vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32);
    int8x8_t v154 = (int8x8_t)vcgt_f32(v153, v135);
    if ((vmvn_s8(v154).u8[0] & 1) == 0) {
      goto LABEL_74;
    }
    uint64_t v155 = v275;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(v154, (int8x8_t)vcgt_f32(v153, vmul_f32(v147, v137))), 0), *(int8x8_t *)v125.f32).u32[0] == -1)
    {
      if (v275 == 3)
      {
        float32x2_t v276 = 0;
        float32x2_t v277 = 0;
        physx::Gu::barycentricCoordinates(&v274, &v295, &v296, v297, &v277, &v276);
      }
LABEL_74:
      char v247 = 0;
      goto LABEL_75;
    }
    v294[v275] = v252;
    v293[v155] = v151;
    unsigned int v275 = v155 + 1;
    *(&v295 + v155) = v125;
    switch(v155)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v295, v294, v293, (int *)&v275);
        break;
      case 2:
        float32x4_t v125 = v295;
        float32x4_t v164 = vsubq_f32(v296, v295);
        float32x4_t v165 = vsubq_f32(v297[0], v295);
        int8x8_t v167 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v164.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v165, (int8x16_t)v165, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v164, (int8x16_t)v164, 4uLL), *(float32x2_t *)v165.f32);
        *(int8x8_t *)v166.f32 = vext_s8(v167, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL), *(float32x2_t *)v165.f32), *(float32x2_t *)v164.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL)), 4uLL);
        v167.i32[1] = 0;
        unsigned int v275 = 3;
        float32x2_t v168 = vpadd_f32(vmul_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32), vmul_f32((float32x2_t)v167.u32[0], (float32x2_t)v167.u32[0]));
        float32x2_t v169 = vpadd_f32(v168, v168);
        if (v169.f32[0] <= 0.00000011921)
        {
          unsigned int v275 = 2;
          float32x4_t v206 = vmulq_f32(v164, v164);
          v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
          float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v207), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
          {
LABEL_46:
            unsigned int v275 = 1;
            break;
          }
          float32x4_t v208 = vnegq_f32(v295);
          v208.i32[3] = 0;
          float32x4_t v209 = vmulq_f32(v208, v164);
          v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
          float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
          float32x2_t v211 = vrecpe_f32(v207);
          int v212 = 4;
          do
          {
            float32x2_t v211 = vmul_f32(v211, vrecps_f32(v207, v211));
            --v212;
          }
          while (v212);
          float32x4_t v125 = vmlaq_n_f32(v295, v164, vmax_f32(vmin_f32(vmul_f32(v210, v211), _D10), 0).f32[0]);
          goto LABEL_45;
        }
        if (v169.f32[0] == 0.0)
        {
          float32x4_t v125 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v166.u32[2] = v167;
          float32x2_t v170 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
          float32x2_t v171 = (float32x2_t)vextq_s8((int8x16_t)v297[0], (int8x16_t)v297[0], 8uLL).u64[0];
          float32x2_t v172 = (float32x2_t)vextq_s8((int8x16_t)v297[0], (int8x16_t)v297[0], 4uLL).u64[0];
          float32x2_t v173 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 4uLL).u64[0];
          int8x8_t v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v172), v173, *(float32x2_t *)v297[0].f32);
          *(int8x8_t *)v175.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32(v170, *(float32x2_t *)v297[0].f32), *(float32x2_t *)v296.f32, v171), 4uLL);
          v175.i64[1] = v174.u32[0];
          float32x2_t v176 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
          float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 4uLL).u64[0];
          int8x8_t v178 = (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v297[0].f32), v172, *(float32x2_t *)v295.f32);
          *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v171), *(float32x2_t *)v297[0].f32, v176), 4uLL);
          v179.i64[1] = v178.u32[0];
          int8x8_t v180 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v173), v177, *(float32x2_t *)v296.f32);
          *(int8x8_t *)v181.f32 = vext_s8(v180, (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v296.f32), *(float32x2_t *)v295.f32, v170), 4uLL);
          v181.i64[1] = v180.u32[0];
          float32x4_t v182 = vmulq_f32(v175, v166);
          v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
          float32x2_t v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
          float32x4_t v184 = vmulq_f32(v179, v166);
          v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
          float32x2_t v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
          float32x4_t v186 = vmulq_f32(v181, v166);
          v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
          float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v185), (int8x8_t)vcgez_f32(v183)), (int8x8_t)vcgez_f32(v187)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
          {
            float32x4_t v213 = vmulq_f32(v295, v166);
            float32x2_t v214 = vrecpe_f32(v169);
            int v215 = 4;
            do
            {
              float32x2_t v214 = vmul_f32(v214, vrecps_f32(v169, v214));
              --v215;
            }
            while (v215);
            float32x2_t v216 = (float32x2_t)vpaddq_f32(v213, v213).u64[0];
            float32x4_t v125 = vmulq_n_f32(v166, vmul_f32(v214, vpadd_f32(v216, v216)).f32[0]);
            v125.i32[3] = 0;
          }
          else
          {
            float32x4_t v188 = vnegq_f32(v295);
            v188.i32[3] = 0;
            float32x4_t v189 = vnegq_f32(v296);
            v189.i32[3] = 0;
            float32x4_t v190 = vmulq_f32(v188, v164);
            v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
            float32x2_t v191 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
            float32x4_t v192 = vmulq_f32(v164, v189);
            v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
            float32x2_t v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v191), (int8x8_t)vclez_f32(v193)), (int8x8_t)vclez_f32(v187)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
            {
              float32x2_t v217 = vsub_f32(v191, v193);
              float32x2_t v218 = vrecpe_f32(v217);
              int v219 = 4;
              do
              {
                float32x2_t v218 = vmul_f32(v218, vrecps_f32(v217, v218));
                --v219;
              }
              while (v219);
              uint64_t v205 = 0;
              float32x4_t v125 = vmlaq_n_f32(v295, v164, vmul_f32(v191, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v217), (float32x2_t)0x3400000034000000), (int8x8_t)v218, 0)).f32[0]);
              v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
              unsigned int v220 = 2;
              uint64_t v204 = 1;
            }
            else
            {
              float32x4_t v194 = vnegq_f32(v297[0]);
              v194.i32[3] = 0;
              float32x4_t v195 = vmulq_f32(v189, v165);
              v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
              float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
              float32x4_t v197 = vmulq_f32(v164, v194);
              v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
              float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
              float32x4_t v199 = vmulq_f32(v165, v194);
              v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
              float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v196, v193), (int8x8_t)vcge_f32(v198, v200)), (int8x8_t)vclez_f32(v183)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
              {
                float32x2_t v221 = vsub_f32(v196, v193);
                float32x2_t v222 = vadd_f32(v221, vsub_f32(v198, v200));
                float32x2_t v223 = vrecpe_f32(v222);
                int v224 = 4;
                do
                {
                  float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
                  --v224;
                }
                while (v224);
                int8x16_t v225 = (int8x16_t)vmlaq_n_f32(v296, vsubq_f32(v297[0], v296), vmul_f32(v221, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v222), (float32x2_t)0x3400000034000000), (int8x8_t)v223, 0)).f32[0]);
                v225.i64[1] = vextq_s8(v225, v225, 8uLL).u32[0];
                unsigned int v220 = 2;
                uint64_t v204 = 2;
                uint64_t v205 = 1;
                float32x4_t v125 = (float32x4_t)v225;
              }
              else
              {
                float32x4_t v201 = vmulq_f32(v188, v165);
                v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
                float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v202), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v185)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
                {
                  float32x2_t v226 = vsub_f32(v202, v200);
                  float32x2_t v227 = vrecpe_f32(v226);
                  int v228 = 4;
                  do
                  {
                    float32x2_t v227 = vmul_f32(v227, vrecps_f32(v226, v227));
                    --v228;
                  }
                  while (v228);
                  uint64_t v205 = 0;
                  float32x4_t v125 = vmlaq_n_f32(v295, v165, vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v226), (float32x2_t)0x3400000034000000), (int8x8_t)v227, 0)).f32[0]);
                  v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
                  uint64_t v204 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v202), (int8x8_t)vclez_f32(v191)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
                {
                  uint64_t v205 = 0;
                  uint64_t v204 = 1;
                }
                else
                {
                  *(int16x4_t *)v125.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v193, v196), (int8x8_t)vcgez_f32(v193)), 0);
                  *(int8x8_t *)v125.f32 = vuzp1_s8(*(int8x8_t *)v125.f32, *(int8x8_t *)v125.f32);
                  __int32 v203 = v125.i32[0];
                  float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v125, v250), 0), (int8x16_t)v296, (int8x16_t)v297[0]);
                  uint64_t v204 = 1;
                  if (v203 == -1) {
                    uint64_t v205 = 1;
                  }
                  else {
                    uint64_t v205 = 2;
                  }
                }
                unsigned int v220 = v204;
              }
            }
            float32x4_t v229 = *(&v295 + v204);
            long long v230 = v294[v205];
            long long v231 = v294[v204];
            long long v232 = v293[v205];
            long long v233 = v293[v204];
            float32x4_t v295 = *(&v295 + v205);
            float32x4_t v296 = v229;
            v294[0] = v230;
            v294[1] = v231;
            v293[0] = v232;
            v293[1] = v233;
            unsigned int v275 = v220;
          }
        }
        break;
      case 1:
        float32x4_t v125 = v295;
        float32x4_t v156 = vsubq_f32(v296, v295);
        float32x4_t v157 = vmulq_f32(v156, v156);
        v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
        float32x2_t v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v158), 0), *(int8x8_t *)v295.f32).u32[0] == -1)goto LABEL_46; {
        float32x4_t v159 = vnegq_f32(v295);
        }
        v159.i32[3] = 0;
        float32x4_t v160 = vmulq_f32(v159, v156);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        float32x2_t v162 = vrecpe_f32(v158);
        int v163 = 4;
        do
        {
          float32x2_t v162 = vmul_f32(v162, vrecps_f32(v158, v162));
          --v163;
        }
        while (v163);
        float32x4_t v125 = vmlaq_n_f32(v295, v156, vmax_f32(vmin_f32(vmul_f32(v161, v162), _D10), 0).f32[0]);
LABEL_45:
        v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
        break;
    }
    float32x4_t v274 = v125;
    float32x4_t v234 = vmulq_f32(v125, v125);
    v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
    float32x2_t v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
    float32x2_t v236 = vrsqrte_f32(v235);
    int v237 = 4;
    do
    {
      float32x2_t v236 = vmul_f32(v236, vrsqrts_f32(vmul_f32(v236, v236), v235));
      --v237;
    }
    while (v237);
    float32x2_t v136 = vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v235), 0), (int8x8_t)_D10, (int8x8_t)v236));
    float32x2_t v238 = vrecpe_f32(v136);
    int v239 = 4;
    do
    {
      float32x2_t v238 = vmul_f32(v238, vrecps_f32(v136, v238));
      --v239;
    }
    while (v239);
    float32x4_t v132 = vmulq_n_f32(v125, v238.f32[0]);
    v132.i32[3] = 0;
    int16x4_t v240 = (int16x4_t)vcgt_f32(v147, v136);
  }
  while (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v136, v134), (int8x8_t)v240), 0), *(int8x8_t *)v125.f32).u32[0] == -1);
  int8x8_t v241 = (int8x8_t)vdup_lane_s16(v240, 0);
  if (vuzp1_s8(v241, v241).u32[0] == -1)
  {
    char v247 = 1;
  }
  else
  {
    f32 = v257[1].f32;
    float32x2_t v243 = vld1_dup_f32(f32);
    uint64_t v244 = v255[1].f32;
    float32x2_t v245 = vld1_dup_f32(v244);
    float32x2_t v246 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v135), 0), (int8x8_t)v135, (int8x8_t)vmul_f32(vmin_f32(v243, v245), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
    if (v275 == 3)
    {
      float32x2_t v276 = 0;
      float32x2_t v277 = 0;
      physx::Gu::barycentricCoordinates(&v273, &v295, &v296, v297, &v277, &v276);
    }
    char v247 = vcgt_f32(vmax_f32(vsub_f32(v147, v135), 0), v246).u8[0] ^ 1;
  }
  if (a5 && (v247 & 1) != 0)
  {
    *(void *)a5 = v251;
    a5[2] = v15;
    __int16 v248 = 2;
    char v247 = 1;
    goto LABEL_83;
  }
LABEL_75:
  if (!a5) {
    return v247 & 1;
  }
  if (v247) {
    __int16 v248 = 2;
  }
  else {
    __int16 v248 = 0;
  }
LABEL_83:
  *((_WORD *)a5 + 6) = v248;
  return v247 & 1;
}

uint64_t GeomOverlapCallback_ConvexConvex(uint64_t a1, int8x8_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v349 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a3 + 32);
  float32x4_t v8 = *(float32x4_t *)(a1 + 4);
  float32x4_t v9 = v8;
  v9.i32[3] = 0;
  float32x4_t v10 = *(float32x4_t *)(a1 + 16);
  float32x4_t v11 = *(float32x4_t *)(a3 + 4);
  float32x4_t v12 = *(float32x4_t *)(a3 + 16);
  *(int8x8_t *)v13.f32 = a2[2];
  v13.i64[1] = a2[3].u32[0];
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  float32x4_t v15 = vnegq_f32(*a4);
  float32x4_t v16 = vsubq_f32(v13, v14);
  float32x4_t v17 = v15;
  v17.i32[3] = 0;
  float32x2_t v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  float32x4_t v19 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
  v19.i32[3] = 0;
  float32x2_t v20 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  float32x2_t v21 = (float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v20, 4uLL);
  int8x8_t v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL)), v21, *(float32x2_t *)v16.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v16.f32), *(float32x2_t *)v15.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), 4uLL);
  v23.i64[1] = v22.u32[0];
  float32x4_t v24 = vmlaq_laneq_f32(v19, v23, *a4, 3);
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  float32x4_t v25 = vmulq_f32(v17, v16);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  float32x4_t v26 = vmlaq_n_f32(v24, v17, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
  float32x4_t v27 = vaddq_f32(v26, v26);
  v27.i32[3] = 0;
  float32x4_t v28 = *(float32x4_t *)a2->i8;
  v28.i32[3] = 0;
  float32x4_t v29 = vmulq_f32(v28, v17);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x4_t v30 = vmulq_laneq_f32(v28, *a4, 3);
  v28.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  int8x8_t v31 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a2, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v15.f32), v21, (float32x2_t)*a2);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a2, v20), *(float32x2_t *)v15.f32, *(float32x2_t *)v28.f32), 4uLL);
  *(int8x8_t *)&v32.u32[2] = v31;
  float32x4_t v33 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v17, *(float32x4_t *)a2->i8, 3), v30), v32);
  *(int32x2_t *)v15.f32 = vdup_lane_s32(*(int32x2_t *)v33.f32, 1);
  *(int32x2_t *)v30.f32 = vdup_laneq_s32((int32x4_t)v33, 2);
  float32x4_t v34 = vaddq_f32(v33, v33);
  *(float32x2_t *)v17.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32));
  float32x2_t v35 = (float32x2_t)vdup_laneq_s32((int32x4_t)v34, 2);
  *(int32x2_t *)v33.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.f32), 0);
  float32x2_t v36 = vmul_lane_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v34.f32, 1);
  float32x2_t v37 = vmul_laneq_f32(*(float32x2_t *)v30.f32, v34, 2);
  *(float32x2_t *)v15.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, v34.f32[0]);
  float32x2_t v38 = vmul_n_f32(*(float32x2_t *)v30.f32, v34.f32[0]);
  float32x2_t v39 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 0), *(float32x2_t *)v17.f32, 1);
  *(float32x2_t *)v30.f32 = vmul_lane_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v34.f32, 1);
  *(float32x2_t *)v34.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 1), *(float32x2_t *)v17.f32, 1);
  *(float32x2_t *)v17.f32 = vmul_lane_f32(v35, *(float32x2_t *)v17.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v45.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v36), v37), (int8x8_t)vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v17.f32), 4uLL);
  v45.i64[1] = vsub_f32(v38, *(float32x2_t *)v34.f32).u32[0];
  *(float32x2_t *)v33.f32 = vsub_f32(_D8, *(float32x2_t *)v33.f32);
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v17.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v33.f32, v37), 4uLL);
  v15.i64[1] = vadd_f32(*(float32x2_t *)v30.f32, v39).u32[0];
  *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vadd_f32(v38, *(float32x2_t *)v34.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v30.f32, v39), 4uLL);
  v30.i64[1] = vsub_f32(*(float32x2_t *)v33.f32, v36).u32[0];
  int32x4_t v306 = v45;
  int32x4_t v307 = (int32x4_t)v15;
  int32x4_t v308 = (int32x4_t)v30;
  float32x4_t v309 = v27;
  BOOL v46 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  char v333 = 0;
  uint64_t v340 = v6 + 32;
  uint64_t v342 = *(void *)(v6 + 72) + 20 * *(unsigned __int8 *)(v6 + 71);
  char v343 = *(unsigned char *)(v6 + 70);
  v47.i64[0] = *(void *)(v6 + 92);
  v47.i64[1] = *(unsigned int *)(v6 + 100);
  int32x4_t v48 = (int32x4_t)vmulq_f32(v9, v47);
  float32x4_t v330 = 0u;
  float32x2_t v49 = vpmin_f32((float32x2_t)vdup_laneq_s32(v48, 2), *(float32x2_t *)v48.i8);
  float v50 = vpmin_f32(v49, v49).f32[0];
  int32x2_t v51 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v50);
  int32x2_t v331 = v51;
  uint64_t v332 = COERCE_UNSIGNED_INT(0.025 * v50);
  if (v46)
  {
    long long v334 = xmmword_23435FD50;
    long long v335 = xmmword_23435FD60;
    long long v336 = xmmword_23435FD80;
    long long v337 = xmmword_23435FD50;
    long long v338 = xmmword_23435FD60;
    long long v339 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v52 = vrecpeq_f32(v9);
    int v53 = 4;
    do
    {
      float32x4_t v52 = vmulq_f32(v52, vrecpsq_f32(v52, v9));
      --v53;
    }
    while (v53);
    *(int32x2_t *)v54.f32 = vdup_lane_s32(*(int32x2_t *)v8.f32, 0);
    v54.i64[1] = v54.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v54, v9)), *(int8x8_t *)v11.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 1);
      float32x2_t v62 = (float32x2_t)vdup_laneq_s32((int32x4_t)v10, 2);
      float32x2_t v63 = (float32x2_t)vdup_laneq_s32((int32x4_t)v10, 3);
      float32x4_t v64 = vaddq_f32(v10, v10);
      float32x2_t v65 = vmul_lane_f32(v61, *(float32x2_t *)v64.f32, 1);
      float32x2_t v66 = vmul_laneq_f32(v62, v64, 2);
      float32x2_t v67 = vmul_n_f32(v61, v64.f32[0]);
      float32x2_t v68 = vmul_n_f32(v62, v64.f32[0]);
      float32x2_t v69 = vmul_n_f32(v63, v64.f32[0]);
      float32x2_t v70 = vmul_lane_f32(v62, *(float32x2_t *)v64.f32, 1);
      float32x2_t v71 = vmul_lane_f32(v63, *(float32x2_t *)v64.f32, 1);
      float32x2_t v72 = vmul_laneq_f32(v63, v64, 2);
      *(float32x2_t *)v64.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v64.f32), 0));
      *(int8x8_t *)v73.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v65), v66), (int8x8_t)vadd_f32(v67, v72), 4uLL);
      v73.i64[1] = vsub_f32(v68, v71).u32[0];
      int32x2_t v74 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v67, v72), (int8x8_t)vsub_f32(*(float32x2_t *)v64.f32, v66), 4uLL);
      int8x8_t v75 = (int8x8_t)vadd_f32(v68, v71);
      *(int8x8_t *)v76.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v73.f32, 0), (int8x8_t)v74, 4uLL);
      int8x8_t v77 = (int8x8_t)vdup_lane_s32(v74, 1);
      *(int32x2_t *)v78.f32 = v74;
      v78.i64[1] = vadd_f32(v70, v69).u32[0];
      *(int8x8_t *)v79.f32 = vext_s8(v75, (int8x8_t)vsub_f32(v70, v69), 4uLL);
      *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v73.f32, v77, 4uLL);
      v79.i64[1] = vsub_f32(*(float32x2_t *)v64.f32, v65).u32[0];
      v76.i64[1] = vdup_lane_s32(*(int32x2_t *)v79.f32, 0).u32[0];
      v80.i64[1] = vdup_lane_s32(*(int32x2_t *)v79.f32, 1).u32[0];
      *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v73.u32[2], 0), (int8x8_t)v78.u32[2], 4uLL);
      v81.i64[1] = vdup_lane_s32(*(int32x2_t *)&v79.u32[2], 0).u32[0];
      float32x4_t v82 = vmulq_n_f32(v76, v8.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v80, *(float32x2_t *)v8.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_laneq_f32(v81, v8, 2);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_n_f32(v82, v73.f32[0]);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_lane_f32(v83, *(float32x2_t *)v73.f32, 1);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_laneq_f32(v84, v73, 2);
      v87.i32[3] = 0;
      float32x4_t v55 = vaddq_f32(v87, vaddq_f32(v85, v86));
      float32x4_t v88 = vmulq_n_f32(v82, v78.f32[0]);
      v88.i32[3] = 0;
      float32x4_t v89 = vmulq_lane_f32(v83, *(float32x2_t *)v78.f32, 1);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_laneq_f32(v84, v78, 2);
      v90.i32[3] = 0;
      float32x4_t v91 = vaddq_f32(v88, v89);
      float32x4_t v92 = vmulq_n_f32(v82, v79.f32[0]);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_lane_f32(v83, *(float32x2_t *)v79.f32, 1);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_laneq_f32(v84, v79, 2);
      v94.i32[3] = 0;
      float32x4_t v56 = vaddq_f32(v90, v91);
      float32x4_t v57 = vaddq_f32(v94, vaddq_f32(v92, v93));
      long long v334 = (__int128)v55;
      long long v335 = (__int128)v56;
      long long v336 = (__int128)v57;
      float32x4_t v95 = vmulq_n_f32(v76, v52.f32[0]);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_lane_f32(v80, *(float32x2_t *)v52.f32, 1);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_laneq_f32(v81, v52, 2);
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_n_f32(v95, v73.f32[0]);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_lane_f32(v96, *(float32x2_t *)v73.f32, 1);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_laneq_f32(v97, v73, 2);
      v100.i32[3] = 0;
      float32x4_t v58 = vaddq_f32(v100, vaddq_f32(v98, v99));
      float32x4_t v101 = vmulq_n_f32(v95, v78.f32[0]);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_lane_f32(v96, *(float32x2_t *)v78.f32, 1);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_laneq_f32(v97, v78, 2);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_n_f32(v95, v79.f32[0]);
      v104.i32[3] = 0;
      float32x4_t v105 = vmulq_lane_f32(v96, *(float32x2_t *)v79.f32, 1);
      v105.i32[3] = 0;
      float32x4_t v59 = vaddq_f32(v103, vaddq_f32(v101, v102));
      float32x4_t v106 = vmulq_laneq_f32(v97, v79, 2);
      v106.i32[3] = 0;
      float32x4_t v60 = vaddq_f32(v106, vaddq_f32(v104, v105));
    }
    else
    {
      v52.i32[3] = 0;
      float32x4_t v55 = vmulq_f32(v9, (float32x4_t)xmmword_23435FD50);
      float32x4_t v56 = vmulq_f32(v9, (float32x4_t)xmmword_23435FD60);
      float32x4_t v57 = vmulq_f32(v9, (float32x4_t)xmmword_23435FD80);
      long long v334 = (__int128)v55;
      long long v335 = (__int128)v56;
      long long v336 = (__int128)v57;
      float32x4_t v58 = vmulq_f32(v52, (float32x4_t)xmmword_23435FD50);
      float32x4_t v59 = vmulq_f32(v52, (float32x4_t)xmmword_23435FD60);
      float32x4_t v60 = vmulq_f32(v52, (float32x4_t)xmmword_23435FD80);
    }
    long long v338 = (__int128)v59;
    long long v339 = (__int128)v60;
    float32x4_t v107 = vmulq_f32(v55, (float32x4_t)0);
    v107.i32[3] = 0;
    float32x4_t v108 = vmulq_f32(v56, (float32x4_t)0);
    v108.i32[3] = 0;
    float32x4_t v109 = vmulq_f32(v57, (float32x4_t)0);
    v109.i32[3] = 0;
    long long v337 = (__int128)v58;
    float32x4_t v330 = vaddq_f32(v109, vaddq_f32(v108, v107));
  }
  float32x4_t v110 = v11;
  v110.i32[3] = 0;
  uint64_t v341 = *(void *)(v6 + 80);
  BOOL v111 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  char v319 = 0;
  uint64_t v326 = v7 + 32;
  uint64_t v328 = *(void *)(v7 + 72) + 20 * *(unsigned __int8 *)(v7 + 71);
  char v329 = *(unsigned char *)(v7 + 70);
  v112.i64[0] = *(void *)(v7 + 92);
  v112.i32[2] = *(_DWORD *)(v7 + 100);
  float32x4_t v315 = 0u;
  int v318 = 0;
  v112.i64[1] = v112.u32[2];
  int32x4_t v113 = (int32x4_t)vmulq_f32(v110, v112);
  *(float32x2_t *)v113.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v113, 2), *(float32x2_t *)v113.i8);
  v112.f32[0] = vpmin_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8).f32[0];
  int32x2_t v114 = (int32x2_t)vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v112.f32[0]);
  int32x2_t v316 = v114;
  float v317 = 0.025 * v112.f32[0];
  if (v111)
  {
    long long v320 = xmmword_23435FD50;
    long long v321 = xmmword_23435FD60;
    long long v322 = xmmword_23435FD80;
    long long v323 = xmmword_23435FD50;
    long long v324 = xmmword_23435FD60;
    long long v325 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v115 = vrecpeq_f32(v110);
    int v116 = 4;
    do
    {
      float32x4_t v115 = vmulq_f32(v115, vrecpsq_f32(v115, v110));
      --v116;
    }
    while (v116);
    *(int32x2_t *)v117.f32 = vdup_lane_s32(*(int32x2_t *)v11.f32, 0);
    v117.i64[1] = v117.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v117, v110)), *(int8x8_t *)v11.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v124 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1);
      float32x2_t v125 = (float32x2_t)vdup_laneq_s32((int32x4_t)v12, 2);
      float32x2_t v126 = (float32x2_t)vdup_laneq_s32((int32x4_t)v12, 3);
      float32x4_t v127 = vaddq_f32(v12, v12);
      float32x2_t v128 = vmul_lane_f32(v124, *(float32x2_t *)v127.f32, 1);
      float32x2_t v129 = vmul_laneq_f32(v125, v127, 2);
      float32x2_t v130 = vmul_n_f32(v124, v127.f32[0]);
      float32x2_t v131 = vmul_n_f32(v125, v127.f32[0]);
      float32x2_t v132 = vmul_n_f32(v126, v127.f32[0]);
      float32x2_t v133 = vmul_lane_f32(v125, *(float32x2_t *)v127.f32, 1);
      float32x2_t v134 = vmul_lane_f32(v126, *(float32x2_t *)v127.f32, 1);
      float32x2_t v135 = vmul_laneq_f32(v126, v127, 2);
      float32x2_t v136 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v127.f32), 0));
      *(int8x8_t *)v127.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v128), v129), (int8x8_t)vadd_f32(v130, v135), 4uLL);
      int8x8_t v137 = (int8x8_t)vsub_f32(v130, v135);
      v138.i64[0] = v127.i64[0];
      v138.i64[1] = vsub_f32(v131, v134).u32[0];
      int32x2_t v139 = (int32x2_t)vext_s8(v137, (int8x8_t)vsub_f32(v136, v129), 4uLL);
      int8x8_t v140 = (int8x8_t)vadd_f32(v131, v134);
      *(int8x8_t *)v141.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v127.f32, 0), (int8x8_t)v139, 4uLL);
      int8x8_t v142 = (int8x8_t)vdup_lane_s32(v139, 1);
      *(int32x2_t *)v143.f32 = v139;
      v143.i64[1] = vadd_f32(v133, v132).u32[0];
      v139.i32[0] = vsub_f32(v136, v128).u32[0];
      *(int8x8_t *)v144.f32 = vext_s8(v140, (int8x8_t)vsub_f32(v133, v132), 4uLL);
      *(int8x8_t *)v145.f32 = vext_s8(*(int8x8_t *)v127.f32, v142, 4uLL);
      v144.i64[1] = v139.u32[0];
      v141.i64[1] = vdup_lane_s32(*(int32x2_t *)v144.f32, 0).u32[0];
      v145.i64[1] = vdup_lane_s32(*(int32x2_t *)v144.f32, 1).u32[0];
      *(int8x8_t *)v146.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v138.u32[2], 0), (int8x8_t)v143.u32[2], 4uLL);
      v146.i64[1] = vdup_lane_s32((int32x2_t)v139.u32[0], 0).u32[0];
      float32x4_t v147 = vmulq_n_f32(v141, v11.f32[0]);
      v147.i32[3] = 0;
      float32x4_t v148 = vmulq_lane_f32(v145, *(float32x2_t *)v11.f32, 1);
      v148.i32[3] = 0;
      float32x4_t v149 = vmulq_laneq_f32(v146, v11, 2);
      v149.i32[3] = 0;
      float32x4_t v150 = vmulq_n_f32(v147, v138.f32[0]);
      v150.i32[3] = 0;
      float32x4_t v151 = vmulq_lane_f32(v148, *(float32x2_t *)v138.f32, 1);
      v151.i32[3] = 0;
      float32x4_t v152 = vmulq_laneq_f32(v149, v138, 2);
      v152.i32[3] = 0;
      float32x4_t v118 = vaddq_f32(v152, vaddq_f32(v150, v151));
      float32x4_t v153 = vmulq_n_f32(v147, v143.f32[0]);
      v153.i32[3] = 0;
      float32x4_t v154 = vmulq_lane_f32(v148, *(float32x2_t *)v143.f32, 1);
      v154.i32[3] = 0;
      float32x4_t v155 = vmulq_laneq_f32(v149, v143, 2);
      v155.i32[3] = 0;
      float32x4_t v156 = vaddq_f32(v153, v154);
      float32x4_t v157 = vmulq_n_f32(v147, v144.f32[0]);
      v157.i32[3] = 0;
      float32x4_t v158 = vmulq_lane_f32(v148, *(float32x2_t *)v144.f32, 1);
      v158.i32[3] = 0;
      float32x4_t v159 = vmulq_laneq_f32(v149, v144, 2);
      v159.i32[3] = 0;
      float32x4_t v119 = vaddq_f32(v155, v156);
      float32x4_t v120 = vaddq_f32(v159, vaddq_f32(v157, v158));
      long long v320 = (__int128)v118;
      long long v321 = (__int128)v119;
      long long v322 = (__int128)v120;
      float32x4_t v160 = vmulq_n_f32(v141, v115.f32[0]);
      v160.i32[3] = 0;
      float32x4_t v161 = vmulq_lane_f32(v145, *(float32x2_t *)v115.f32, 1);
      v161.i32[3] = 0;
      float32x4_t v162 = vmulq_laneq_f32(v146, v115, 2);
      v162.i32[3] = 0;
      float32x4_t v163 = vmulq_n_f32(v160, v138.f32[0]);
      v163.i32[3] = 0;
      float32x4_t v164 = vmulq_lane_f32(v161, *(float32x2_t *)v138.f32, 1);
      v164.i32[3] = 0;
      float32x4_t v165 = vmulq_laneq_f32(v162, v138, 2);
      v165.i32[3] = 0;
      float32x4_t v121 = vaddq_f32(v165, vaddq_f32(v163, v164));
      float32x4_t v166 = vmulq_n_f32(v160, v143.f32[0]);
      v166.i32[3] = 0;
      float32x4_t v167 = vmulq_lane_f32(v161, *(float32x2_t *)v143.f32, 1);
      v167.i32[3] = 0;
      float32x4_t v168 = vmulq_laneq_f32(v162, v143, 2);
      v168.i32[3] = 0;
      float32x4_t v169 = vmulq_n_f32(v160, v144.f32[0]);
      v169.i32[3] = 0;
      float32x4_t v170 = vmulq_lane_f32(v161, *(float32x2_t *)v144.f32, 1);
      v170.i32[3] = 0;
      float32x4_t v122 = vaddq_f32(v168, vaddq_f32(v166, v167));
      float32x4_t v171 = vmulq_laneq_f32(v162, v144, 2);
      v171.i32[3] = 0;
      float32x4_t v123 = vaddq_f32(v171, vaddq_f32(v169, v170));
    }
    else
    {
      v115.i32[3] = 0;
      float32x4_t v118 = vmulq_f32(v110, (float32x4_t)xmmword_23435FD50);
      float32x4_t v119 = vmulq_f32(v110, (float32x4_t)xmmword_23435FD60);
      float32x4_t v120 = vmulq_f32(v110, (float32x4_t)xmmword_23435FD80);
      long long v320 = (__int128)v118;
      long long v321 = (__int128)v119;
      long long v322 = (__int128)v120;
      float32x4_t v121 = vmulq_f32(v115, (float32x4_t)xmmword_23435FD50);
      float32x4_t v122 = vmulq_f32(v115, (float32x4_t)xmmword_23435FD60);
      float32x4_t v123 = vmulq_f32(v115, (float32x4_t)xmmword_23435FD80);
    }
    long long v324 = (__int128)v122;
    long long v325 = (__int128)v123;
    float32x4_t v172 = vmulq_f32(v118, (float32x4_t)0);
    v172.i32[3] = 0;
    float32x4_t v173 = vmulq_f32(v119, (float32x4_t)0);
    v173.i32[3] = 0;
    float32x4_t v174 = vmulq_f32(v120, (float32x4_t)0);
    v174.i32[3] = 0;
    long long v323 = (__int128)v121;
    float32x4_t v315 = vaddq_f32(v174, vaddq_f32(v173, v172));
  }
  uint64_t v327 = *(void *)(v7 + 80);
  v302.i64[1] = (uint64_t)&v330;
  float32x4_t v175 = v309;
  v304[0] = v306;
  v305[0] = v308;
  float32x2x2_t v176 = (float32x2x2_t)vzip1q_s32(v306, v308);
  v350.val[0] = (float32x2_t)vzip2q_s32(v306, v308).u64[0];
  int32x4_t v177 = vzip1q_s32(v307, (int32x4_t)0);
  v350.val[1] = (float32x2_t)vzip2q_s32(v307, (int32x4_t)0).u64[0];
  v303 = &v306;
  int8x8_t v178 = (float *)v304;
  float32x4_t v179 = (float *)v305;
  vst2_f32(v178, v176);
  v305[1] = v175;
  v304[1] = vzip2q_s32((int32x4_t)v176, v177);
  vst2_f32(v179, v350);
  v301 = &v315;
  v302.i64[0] = (uint64_t)&unk_26E728B78;
  v300 = &unk_26E728850;
  unsigned int v313 = 0;
  float32x4_t v180 = vmulq_f32(v309, v309);
  v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
  float32x4_t v181 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)), 0), (int8x16_t)v309, (int8x16_t)xmmword_23435FD50);
  float32x4_t v312 = v181;
  float32x4_t v182 = vmulq_f32(v181, v181);
  float32x4_t v183 = vpaddq_f32(v182, v182);
  *(float32x2_t *)v183.f32 = vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32);
  float32x2_t v184 = vrsqrte_f32(*(float32x2_t *)v183.f32);
  int v185 = 4;
  do
  {
    float32x2_t v184 = vmul_f32(v184, vrsqrts_f32(vmul_f32(v184, v184), *(float32x2_t *)v183.f32));
    --v185;
  }
  while (v185);
  float32x2_t v186 = vmul_f32(*(float32x2_t *)v183.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v183.f32), 0), (int8x8_t)_D8, (int8x8_t)v184));
  *(float32x2_t *)v183.f32 = vrecpe_f32(v186);
  int v187 = 4;
  do
  {
    *(float32x2_t *)v183.f32 = vmul_f32(*(float32x2_t *)v183.f32, vrecps_f32(v186, *(float32x2_t *)v183.f32));
    --v187;
  }
  while (v187);
  float32x4_t v188 = vmulq_n_f32(v181, v183.f32[0]);
  v188.i32[3] = 0;
  *(float32x2_t *)v183.f32 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v51, 1), (float32x2_t)vdup_lane_s32(v114, 1)), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v189 = vmax_f32(*(float32x2_t *)v183.f32, (float32x2_t)vdup_n_s32(0x358637BDu));
  v183.i32[0] = -v333;
  float32x2_t v190 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v183.f32, (int8x8_t)v51), 0);
  v183.i32[0] = -v319;
  *(float32x2_t *)v183.f32 = vadd_f32(v190, (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v183.f32, (int8x8_t)v114), 0));
  float32x2_t v297 = *(float32x2_t *)v183.f32;
  float v191 = v183.f32[0] + 0.0;
  float32x2_t v192 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v193 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
  v183.i32[0] = -1;
  int32x4_t v296 = (int32x4_t)v183;
  do
  {
    float32x4_t v299 = v188;
    float32x2_t v194 = v192;
    float32x4_t v311 = v181;
    float32x4_t v195 = vnegq_f32(v181);
    v195.i32[3] = 0;
    float32x4_t v310 = v195;
    *(double *)v196.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(&v302, (float32x2_t *)&v310);
    float32x4_t v298 = v196;
    *(double *)v197.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v300, &v312);
    float32x4_t v198 = v197;
    float32x4_t v181 = vsubq_f32(v298, v197);
    float32x4_t v199 = vmulq_f32(v299, v181);
    v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
    float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
    if (v200.f32[0] > v191) {
      goto LABEL_84;
    }
    uint64_t v201 = v313;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v200, v297), (int8x8_t)vcgt_f32(v200, vmul_f32(v194, v193))), 0), *(int8x8_t *)v181.f32).u32[0] == -1)
    {
      if (v313 == 3)
      {
        v310.i64[0] = 0;
        float32x2_t v314 = 0;
        physx::Gu::barycentricCoordinates(&v312, &v346, &v347, v348, (float32x2_t *)&v310, &v314);
      }
LABEL_84:
      char v293 = 0;
      if (!a5) {
        return v293 & 1;
      }
      goto LABEL_85;
    }
    v345[v313] = v298;
    v344[v201] = v198;
    unsigned int v313 = v201 + 1;
    *(&v346 + v201) = v181;
    switch(v201)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v346, v345, v344, (int *)&v313);
        break;
      case 2:
        float32x4_t v181 = v346;
        float32x4_t v210 = vsubq_f32(v347, v346);
        float32x4_t v211 = vsubq_f32(v348[0], v346);
        int8x8_t v213 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v210.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 4uLL), *(float32x2_t *)v211.f32);
        *(int8x8_t *)v212.f32 = vext_s8(v213, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL), *(float32x2_t *)v211.f32), *(float32x2_t *)v210.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL)), 4uLL);
        v213.i32[1] = 0;
        unsigned int v313 = 3;
        float32x2_t v214 = vpadd_f32(vmul_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32), vmul_f32((float32x2_t)v213.u32[0], (float32x2_t)v213.u32[0]));
        float32x2_t v215 = vpadd_f32(v214, v214);
        if (v215.f32[0] <= 0.00000011921)
        {
          unsigned int v313 = 2;
          float32x4_t v252 = vmulq_f32(v210, v210);
          v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
          float32x2_t v253 = vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v253), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
          {
LABEL_55:
            unsigned int v313 = 1;
            break;
          }
          float32x4_t v254 = vnegq_f32(v346);
          v254.i32[3] = 0;
          float32x4_t v255 = vmulq_f32(v254, v210);
          v255.i64[0] = vpaddq_f32(v255, v255).u64[0];
          float32x2_t v256 = vpadd_f32(*(float32x2_t *)v255.f32, *(float32x2_t *)v255.f32);
          float32x2_t v257 = vrecpe_f32(v253);
          int v258 = 4;
          do
          {
            float32x2_t v257 = vmul_f32(v257, vrecps_f32(v253, v257));
            --v258;
          }
          while (v258);
          float32x4_t v181 = vmlaq_n_f32(v346, v210, vmax_f32(vmin_f32(vmul_f32(v256, v257), _D8), 0).f32[0]);
          goto LABEL_54;
        }
        if (v215.f32[0] == 0.0)
        {
          float32x4_t v181 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v212.u32[2] = v213;
          float32x2_t v216 = (float32x2_t)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
          float32x2_t v217 = (float32x2_t)vextq_s8((int8x16_t)v348[0], (int8x16_t)v348[0], 8uLL).u64[0];
          float32x2_t v218 = (float32x2_t)vextq_s8((int8x16_t)v348[0], (int8x16_t)v348[0], 4uLL).u64[0];
          float32x2_t v219 = (float32x2_t)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 4uLL).u64[0];
          int8x8_t v220 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v347.f32, v218), v219, *(float32x2_t *)v348[0].f32);
          *(int8x8_t *)v221.f32 = vext_s8(v220, (int8x8_t)vmls_f32(vmul_f32(v216, *(float32x2_t *)v348[0].f32), *(float32x2_t *)v347.f32, v217), 4uLL);
          v221.i64[1] = v220.u32[0];
          float32x2_t v222 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).u64[0];
          float32x2_t v223 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 4uLL).u64[0];
          int8x8_t v224 = (int8x8_t)vmls_f32(vmul_f32(v223, *(float32x2_t *)v348[0].f32), v218, *(float32x2_t *)v346.f32);
          *(int8x8_t *)v225.f32 = vext_s8(v224, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v217), *(float32x2_t *)v348[0].f32, v222), 4uLL);
          v225.i64[1] = v224.u32[0];
          int8x8_t v226 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v219), v223, *(float32x2_t *)v347.f32);
          *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(v222, *(float32x2_t *)v347.f32), *(float32x2_t *)v346.f32, v216), 4uLL);
          v227.i64[1] = v226.u32[0];
          float32x4_t v228 = vmulq_f32(v221, v212);
          v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
          float32x2_t v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
          float32x4_t v230 = vmulq_f32(v225, v212);
          v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
          float32x2_t v231 = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32);
          float32x4_t v232 = vmulq_f32(v227, v212);
          v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
          float32x2_t v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v231), (int8x8_t)vcgez_f32(v229)), (int8x8_t)vcgez_f32(v233)), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
          {
            float32x4_t v259 = vmulq_f32(v346, v212);
            float32x2_t v260 = vrecpe_f32(v215);
            int v261 = 4;
            do
            {
              float32x2_t v260 = vmul_f32(v260, vrecps_f32(v215, v260));
              --v261;
            }
            while (v261);
            float32x2_t v262 = (float32x2_t)vpaddq_f32(v259, v259).u64[0];
            float32x4_t v181 = vmulq_n_f32(v212, vmul_f32(v260, vpadd_f32(v262, v262)).f32[0]);
            v181.i32[3] = 0;
          }
          else
          {
            float32x4_t v234 = vnegq_f32(v346);
            v234.i32[3] = 0;
            float32x4_t v235 = vnegq_f32(v347);
            v235.i32[3] = 0;
            float32x4_t v236 = vmulq_f32(v234, v210);
            v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
            float32x2_t v237 = vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32);
            float32x4_t v238 = vmulq_f32(v210, v235);
            v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
            float32x2_t v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v237), (int8x8_t)vclez_f32(v239)), (int8x8_t)vclez_f32(v233)), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
            {
              float32x2_t v263 = vsub_f32(v237, v239);
              float32x2_t v264 = vrecpe_f32(v263);
              int v265 = 4;
              do
              {
                float32x2_t v264 = vmul_f32(v264, vrecps_f32(v263, v264));
                --v265;
              }
              while (v265);
              uint64_t v251 = 0;
              float32x4_t v181 = vmlaq_n_f32(v346, v210, vmul_f32(v237, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v263), (float32x2_t)0x3400000034000000), (int8x8_t)v264, 0)).f32[0]);
              v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
              unsigned int v266 = 2;
              uint64_t v250 = 1;
            }
            else
            {
              float32x4_t v240 = vnegq_f32(v348[0]);
              v240.i32[3] = 0;
              float32x4_t v241 = vmulq_f32(v235, v211);
              v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
              float32x2_t v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
              float32x4_t v243 = vmulq_f32(v210, v240);
              v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
              float32x2_t v244 = vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32);
              float32x4_t v245 = vmulq_f32(v211, v240);
              v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
              float32x2_t v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v242, v239), (int8x8_t)vcge_f32(v244, v246)), (int8x8_t)vclez_f32(v229)), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
              {
                float32x2_t v267 = vsub_f32(v242, v239);
                float32x2_t v268 = vadd_f32(v267, vsub_f32(v244, v246));
                float32x2_t v269 = vrecpe_f32(v268);
                int v270 = 4;
                do
                {
                  float32x2_t v269 = vmul_f32(v269, vrecps_f32(v268, v269));
                  --v270;
                }
                while (v270);
                int8x16_t v271 = (int8x16_t)vmlaq_n_f32(v347, vsubq_f32(v348[0], v347), vmul_f32(v267, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v268), (float32x2_t)0x3400000034000000), (int8x8_t)v269, 0)).f32[0]);
                v271.i64[1] = vextq_s8(v271, v271, 8uLL).u32[0];
                unsigned int v266 = 2;
                uint64_t v250 = 2;
                uint64_t v251 = 1;
                float32x4_t v181 = (float32x4_t)v271;
              }
              else
              {
                float32x4_t v247 = vmulq_f32(v234, v211);
                v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
                float32x2_t v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v248), (int8x8_t)vclez_f32(v246)), (int8x8_t)vclez_f32(v231)), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
                {
                  float32x2_t v272 = vsub_f32(v248, v246);
                  float32x2_t v273 = vrecpe_f32(v272);
                  int v274 = 4;
                  do
                  {
                    float32x2_t v273 = vmul_f32(v273, vrecps_f32(v272, v273));
                    --v274;
                  }
                  while (v274);
                  uint64_t v251 = 0;
                  float32x4_t v181 = vmlaq_n_f32(v346, v211, vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v272), (float32x2_t)0x3400000034000000), (int8x8_t)v273, 0)).f32[0]);
                  v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
                  uint64_t v250 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v248), (int8x8_t)vclez_f32(v237)), 0), *(int8x8_t *)v346.f32).u32[0] == -1)
                {
                  uint64_t v251 = 0;
                  uint64_t v250 = 1;
                }
                else
                {
                  *(int16x4_t *)v181.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v239, v242), (int8x8_t)vcgez_f32(v239)), 0);
                  *(int8x8_t *)v181.f32 = vuzp1_s8(*(int8x8_t *)v181.f32, *(int8x8_t *)v181.f32);
                  __int32 v249 = v181.i32[0];
                  float32x4_t v181 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v181, v296), 0), (int8x16_t)v347, (int8x16_t)v348[0]);
                  uint64_t v250 = 1;
                  if (v249 == -1) {
                    uint64_t v251 = 1;
                  }
                  else {
                    uint64_t v251 = 2;
                  }
                }
                unsigned int v266 = v250;
              }
            }
            float32x4_t v275 = *(&v346 + v250);
            long long v276 = v345[v251];
            long long v277 = v345[v250];
            long long v278 = v344[v251];
            long long v279 = v344[v250];
            float32x4_t v346 = *(&v346 + v251);
            float32x4_t v347 = v275;
            v345[0] = v276;
            v345[1] = v277;
            v344[0] = v278;
            v344[1] = v279;
            unsigned int v313 = v266;
          }
        }
        break;
      case 1:
        float32x4_t v181 = v346;
        float32x4_t v202 = vsubq_f32(v347, v346);
        float32x4_t v203 = vmulq_f32(v202, v202);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v204), 0), *(int8x8_t *)v346.f32).u32[0] == -1)goto LABEL_55; {
        float32x4_t v205 = vnegq_f32(v346);
        }
        v205.i32[3] = 0;
        float32x4_t v206 = vmulq_f32(v205, v202);
        v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
        float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
        float32x2_t v208 = vrecpe_f32(v204);
        int v209 = 4;
        do
        {
          float32x2_t v208 = vmul_f32(v208, vrecps_f32(v204, v208));
          --v209;
        }
        while (v209);
        float32x4_t v181 = vmlaq_n_f32(v346, v202, vmax_f32(vmin_f32(vmul_f32(v207, v208), _D8), 0).f32[0]);
LABEL_54:
        v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
        break;
    }
    float32x4_t v312 = v181;
    float32x4_t v280 = vmulq_f32(v181, v181);
    v280.i64[0] = vpaddq_f32(v280, v280).u64[0];
    float32x2_t v281 = vpadd_f32(*(float32x2_t *)v280.f32, *(float32x2_t *)v280.f32);
    float32x2_t v282 = vrsqrte_f32(v281);
    int v283 = 4;
    do
    {
      float32x2_t v282 = vmul_f32(v282, vrsqrts_f32(vmul_f32(v282, v282), v281));
      --v283;
    }
    while (v283);
    float32x2_t v192 = vmul_f32(v281, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v281), 0), (int8x8_t)_D8, (int8x8_t)v282));
    float32x2_t v284 = vrecpe_f32(v192);
    int v285 = 4;
    do
    {
      float32x2_t v284 = vmul_f32(v284, vrecps_f32(v192, v284));
      --v285;
    }
    while (v285);
    float32x4_t v188 = vmulq_n_f32(v181, v284.f32[0]);
    v188.i32[3] = 0;
    int16x4_t v286 = (int16x4_t)vcgt_f32(v194, v192);
  }
  while (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v192, v189), (int8x8_t)v286), 0), *(int8x8_t *)v181.f32).u32[0] == -1);
  int8x8_t v287 = (int8x8_t)vdup_lane_s16(v286, 0);
  if (vuzp1_s8(v287, v287).u32[0] == -1)
  {
    char v293 = 1;
    if (!a5) {
      return v293 & 1;
    }
    goto LABEL_85;
  }
  long long v288 = (const float *)(v302.i64[1] + 16);
  float32x2_t v289 = vld1_dup_f32(v288);
  f32 = v301[1].f32;
  float32x2_t v291 = vld1_dup_f32(f32);
  float32x2_t v292 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v297), 0), (int8x8_t)v297, (int8x8_t)vmul_f32(vmin_f32(v289, v291), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
  if (v313 == 3)
  {
    v310.i64[0] = 0;
    float32x2_t v314 = 0;
    physx::Gu::barycentricCoordinates(&v311, &v346, &v347, v348, (float32x2_t *)&v310, &v314);
  }
  char v293 = vcgt_f32(vmax_f32(vsub_f32(v194, v297), 0), v292).u8[0] ^ 1;
  if (a5)
  {
LABEL_85:
    if (v293) {
      __int16 v294 = 2;
    }
    else {
      __int16 v294 = 0;
    }
    *(_WORD *)(a5 + 12) = v294;
  }
  return v293 & 1;
}

void physx::Gu::registerHeightFields(physx::Gu *this)
{
  qword_26B7B4E08 = (uint64_t)raycast_heightField;
  off_26B7B4B68[0] = (uint64_t (*)())sweepCapsule_HeightFieldGeom;
  off_26B7B4BA0[0] = (uint64_t (*)())sweepCapsule_HeightFieldGeom;
  off_26B7B4BD8[0] = (uint64_t (*)())sweepBox_HeightFieldGeom;
  off_26B7B4C10[0] = (uint64_t (*)())sweepBox_HeightFieldGeom_Precise;
  off_26B7B4C48[0] = (uint64_t (*)())sweepConvex_HeightFieldGeom;
  off_26B7B4C80 = (uint64_t (*)())GeomOverlapCallback_SphereHeightfield;
  off_26B7B4CF0 = (uint64_t (*)())GeomOverlapCallback_CapsuleHeightfield;
  off_26B7B4D28 = (uint64_t (*)())GeomOverlapCallback_BoxHeightfield;
  off_26B7B4D60 = (uint64_t (*)())GeomOverlapCallback_ConvexHeightfield;
}

uint64_t raycast_box(uint64_t a1, float *a2, float *a3, float32x2_t *a4, __int16 *a5, float a6, uint64_t a7, uint64_t a8)
{
  float v14 = a3[1] - a2[5];
  float v15 = a3[2] - a2[6];
  float v16 = (float)(*a3 - a2[4]) + (float)(*a3 - a2[4]);
  float v17 = v14 + v14;
  float v18 = v15 + v15;
  float v20 = a2[2];
  float v19 = a2[3];
  float v21 = (float)(v19 * v19) + -0.5;
  float v22 = *a2;
  float v23 = a2[1];
  float v24 = (float)((float)(v17 * v23) + (float)(*a2 * v16)) + (float)(v20 * v18);
  float v25 = (float)((float)(v16 * v21) - (float)((float)((float)(v23 * v18) - (float)(v20 * v17)) * v19))
      + (float)(*a2 * v24);
  float v26 = (float)((float)(v17 * v21) - (float)((float)((float)(v20 * v16) - (float)(*a2 * v18)) * v19))
      + (float)(v23 * v24);
  float v27 = (float)((float)(v18 * v21) - (float)((float)((float)(*a2 * v17) - (float)(v23 * v16)) * v19))
      + (float)(v20 * v24);
  *(float *)float32x2_t v61 = v25;
  *(float *)&v61[1] = v26;
  *(float *)&v61[2] = v27;
  float v28 = a4->f32[0] + a4->f32[0];
  float v29 = a4->f32[1] + a4->f32[1];
  float v30 = a4[1].f32[0] + a4[1].f32[0];
  float v31 = (float)((float)(v23 * v29) + (float)(v22 * v28)) + (float)(v20 * v30);
  v60[0] = (float)((float)(v28 * v21) - (float)((float)((float)(v23 * v30) - (float)(v20 * v29)) * v19))
         + (float)(v22 * v31);
  v60[1] = (float)((float)(v29 * v21) - (float)((float)((float)(v20 * v28) - (float)(v22 * v30)) * v19))
         + (float)(v23 * v31);
  v60[2] = (float)((float)(v30 * v21) - (float)((float)((float)(v22 * v29) - (float)(v23 * v28)) * v19))
         + (float)(v20 * v31);
  float32x2_t v32 = *(float32x2_t *)(a1 + 4);
  float v56 = 0.0;
  float v33 = -*(float *)(a1 + 12);
  float32x2_t v54 = vneg_f32(v32);
  float v55 = v33;
  uint64_t result = physx::Gu::rayAABBIntersect2((uint64_t)&v54, a1 + 4, (uint64_t)v61, (uint64_t)v60, (uint64_t)&v57, &v56);
  if (result)
  {
    float v35 = v56;
    if (v56 <= a6)
    {
      __int16 v36 = 0;
      *(float *)(a8 + 48) = v56;
      *(_DWORD *)(a8 + 16) = -1;
      *(_DWORD *)(a8 + 52) = 0;
      *(_DWORD *)(a8 + 56) = 0;
      __int16 v37 = *a5;
      if (*a5)
      {
        if (v35 == 0.0)
        {
          float v43 = *a3;
          float v44 = a3[1];
          float v45 = a3[2];
        }
        else
        {
          float v39 = a2[2];
          float v38 = a2[3];
          float v40 = (float)(v38 * v38) + -0.5;
          float v41 = a2[1];
          float v42 = (float)((float)((float)(v58 + v58) * v41) + (float)(*a2 * (float)(v57 + v57)))
              + (float)(v39 * (float)(v59 + v59));
          float v43 = a2[4]
              + (float)((float)((float)(v38
                                      * (float)((float)(v41 * (float)(v59 + v59)) - (float)(v39 * (float)(v58 + v58))))
                              + (float)((float)(v57 + v57) * v40))
                      + (float)(*a2 * v42));
          float v44 = a2[5]
              + (float)((float)((float)(v38
                                      * (float)((float)(v39 * (float)(v57 + v57)) - (float)(*a2 * (float)(v59 + v59))))
                              + (float)((float)(v58 + v58) * v40))
                      + (float)(v41 * v42));
          float v45 = a2[6]
              + (float)((float)((float)(v38
                                      * (float)((float)(*a2 * (float)(v58 + v58)) - (float)(v41 * (float)(v57 + v57))))
                              + (float)((float)(v59 + v59) * v40))
                      + (float)(v39 * v42));
        }
        *(float *)(a8 + 24) = v43;
        *(float *)(a8 + 28) = v44;
        __int16 v36 = 1;
        *(float *)(a8 + 32) = v45;
      }
      if ((v37 & 2) != 0)
      {
        v36 |= 2u;
        if (v35 == 0.0)
        {
          float v46 = -a4[1].f32[0];
          *(float32x2_t *)(a8 + 36) = vneg_f32(*a4);
        }
        else
        {
          float32x2_t v54 = 0;
          float v55 = 0.0;
          float v47 = -1.0;
          if (*(&v57 + (result - 1)) > 0.0) {
            float v47 = 1.0;
          }
          v54.f32[(result - 1)] = v47;
          float v49 = a2[2];
          float v48 = a2[3];
          float v50 = (float)(v48 * v48) + -0.5;
          float v51 = a2[1];
          float v52 = (float)((float)((float)(v54.f32[1] + v54.f32[1]) * v51) + (float)(*a2 * (float)(v54.f32[0] + v54.f32[0])))
              + (float)(v49 * (float)(v55 + v55));
          float v53 = (float)((float)(v48
                              * (float)((float)(v49 * (float)(v54.f32[0] + v54.f32[0]))
                                      - (float)(*a2 * (float)(v55 + v55))))
                      + (float)((float)(v54.f32[1] + v54.f32[1]) * v50))
              + (float)(v51 * v52);
          float v46 = (float)((float)(v48
                              * (float)((float)(*a2 * (float)(v54.f32[1] + v54.f32[1]))
                                      - (float)(v51 * (float)(v54.f32[0] + v54.f32[0]))))
                      + (float)((float)(v55 + v55) * v50))
              + (float)(v49 * v52);
          *(float *)(a8 + 36) = (float)((float)(v48
                                              * (float)((float)(v51 * (float)(v55 + v55))
                                                      - (float)(v49 * (float)(v54.f32[1] + v54.f32[1]))))
                                      + (float)((float)(v54.f32[0] + v54.f32[0]) * v50))
                              + (float)(*a2 * v52);
          *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v53;
        }
        *(float *)(a8 + 44) = v46;
      }
      else
      {
        *(void *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = 0;
        *(_DWORD *)(a8 + 36) = 0;
      }
      *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = v36;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void raycast_sphere(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, unsigned char *a5, float a6, uint64_t a7, float32x2_t *a8)
{
  float32x4_t v12 = (float *)&a8[6];
  physx::Gu::intersectRaySphere(a3, a4, (float *)&a2[2], (float *)&a8[6], (uint64_t)&a8[3], a6, *(float *)(a1 + 4));
  if (v13)
  {
    a8[2].i32[0] = -1;
    a8[6].i32[1] = 0;
    a8[7].i32[0] = 0;
    if ((*a5 & 2) == 0)
    {
      a8[5] = 0;
      a8[4].i32[1] = 0;
      __int16 v14 = 1;
LABEL_10:
      a8[2].i16[2] = v14;
      return;
    }
    if (*v12 == 0.0)
    {
      float v15 = -a4[1].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = vneg_f32(*a4);
    }
    else
    {
      float32x2_t v16 = vsub_f32(a8[3], a2[2]);
      float v17 = a8[4].f32[0] - a2[3].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = v16;
      a8[5].f32[1] = v17;
      float v18 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v16, v16).i32[1]), v16.f32[0], v16.f32[0]) + (float)(v17 * v17));
      if (v18 <= 0.0)
      {
LABEL_9:
        __int16 v14 = 3;
        goto LABEL_10;
      }
      float v19 = 1.0 / v18;
      *(float32x2_t *)((char *)a8 + 36) = vmul_n_f32(v16, v19);
      float v15 = v17 * v19;
    }
    a8[5].f32[1] = v15;
    goto LABEL_9;
  }
}

void raycast_capsule(uint64_t a1, float *a2, float32x2_t *a3, float32x2_t *a4, unsigned char *a5, float a6, uint64_t a7, float32x2_t *a8)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  float v13 = *a2;
  float v14 = a2[1];
  float v16 = a2[2];
  float v15 = a2[3];
  float v17 = v15 + v15;
  float v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v13 * (float)(v13 + v13));
  float v19 = (float)((float)(v13 + v13) * v14) + (float)(v16 * v17);
  float v20 = (float)((float)(v13 + v13) * v16) - (float)(v14 * v17);
  float v21 = *(float *)(a1 + 4);
  float v22 = *(float *)(a1 + 8);
  float v23 = v18 * v22;
  float v24 = v22 * v19;
  float v25 = v20 * v22;
  float v26 = a2[4];
  float v27 = a2[5];
  float v28 = a2[6];
  float v63 = v26 + v23;
  float v64 = v27 + v24;
  float v65 = v25 + v28;
  float v66 = v26 - v23;
  float v67 = v27 - v24;
  float v68 = v28 - v25;
  float v69 = v21;
  float v29 = (float)(v26 - v23) - (float)(v26 + v23);
  float v30 = (float)(v27 - v24) - (float)(v27 + v24);
  float v31 = (float)(v28 - v25) - (float)(v25 + v28);
  float v32 = COERCE_FLOAT(*a3) - (float)(v26 + v23);
  float v33 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a3)) - (float)(v27 + v24);
  float v34 = a3[1].f32[0];
  float v35 = v34 - v65;
  float v36 = (float)((float)(v30 * v33) + (float)(v32 * v29)) + (float)((float)(v34 - v65) * v31);
  if (v36 > 0.0)
  {
    float v37 = (float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31);
    if (v36 < v37)
    {
      float v38 = v36 / v37;
      float v29 = v29 * v38;
      float v30 = v30 * v38;
      float v31 = v31 * v38;
    }
    float v32 = v32 - v29;
    float v33 = v33 - v30;
    float v35 = v35 - v31;
  }
  float v39 = sqrtf((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v35 * v35)) - v21;
  float v40 = 0.0;
  if (v39 > 0.0)
  {
    float v41 = v39 + -10.0;
    BOOL v42 = v39 <= 10.0;
    float v43 = 0.0;
    if (!v42) {
      float v43 = v41;
    }
    float v44 = v34 + (float)(v43 * a4[1].f32[0]);
    float v62 = v43;
    float32x2_t v70 = vadd_f32(*a3, vmul_n_f32(*a4, v43));
    float v71 = v44;
    physx::Gu::intersectRayCapsuleInternal(&v70, a4, &v63, &v66, &v72, v21);
    if (!v45) {
      return;
    }
    if (v45 == 1)
    {
      float v46 = v72;
    }
    else
    {
      float v46 = v72;
      if (v72 >= v73) {
        float v46 = v73;
      }
    }
    float v40 = v62 + v46;
  }
  if (v40 >= 0.0 && v40 <= a6)
  {
    float v47 = (float)(v40 * a4[1].f32[0]) + a3[1].f32[0];
    float32x2_t v48 = vadd_f32(vmul_n_f32(*a4, v40), *a3);
    a8[3] = v48;
    a8[4].f32[0] = v47;
    a8[6].f32[0] = v40;
    a8[2].i32[0] = -1;
    a8[6].i32[1] = 0;
    a8[7].i32[0] = 0;
    if ((*a5 & 2) == 0)
    {
      a8[5] = 0;
      a8[4].i32[1] = 0;
      __int16 v49 = 1;
LABEL_27:
      a8[2].i16[2] = v49;
      return;
    }
    if (v40 == 0.0)
    {
      float v50 = -a4[1].f32[0];
      *(float32x2_t *)((char *)a8 + 36) = vneg_f32(*a4);
    }
    else
    {
      float v51 = v66 - v63;
      float v52 = v67 - v64;
      float v53 = v68 - v65;
      float v54 = (float)((float)((float)(v67 - v64) * (float)(v48.f32[1] - v64))
                  + (float)((float)(v48.f32[0] - v63) * (float)(v66 - v63)))
          + (float)((float)(v47 - v65) * (float)(v68 - v65));
      float v55 = 0.0;
      if (v54 > 0.0)
      {
        float v56 = (float)((float)(v52 * v52) + (float)(v51 * v51)) + (float)(v53 * v53);
        float v55 = 1.0;
        if (v54 < v56) {
          float v55 = v54 / v56;
        }
      }
      float v57 = v48.f32[0] - (float)(v63 + (float)(v51 * v55));
      float v58 = v48.f32[1] - (float)(v64 + (float)(v52 * v55));
      float v59 = v47 - (float)(v65 + (float)(v53 * v55));
      a8[4].f32[1] = v57;
      a8[5].f32[0] = v58;
      a8[5].f32[1] = v59;
      float v60 = sqrtf((float)((float)(v58 * v58) + (float)(v57 * v57)) + (float)(v59 * v59));
      if (v60 <= 0.0) {
        goto LABEL_26;
      }
      float v61 = 1.0 / v60;
      a8[4].f32[1] = v57 * v61;
      a8[5].f32[0] = v58 * v61;
      float v50 = v59 * v61;
    }
    a8[5].f32[1] = v50;
LABEL_26:
    __int16 v49 = 3;
    goto LABEL_27;
  }
}

uint64_t raycast_plane(float a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v8 = *a3;
  float v9 = a3[1];
  float v11 = a3[2];
  float v10 = a3[3];
  float v12 = v10 + v10;
  float v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v8 * (float)(v8 + v8));
  float v14 = (float)((float)(v8 + v8) * v9) + (float)(v11 * v12);
  float v15 = (float)((float)(v8 + v8) * v11) - (float)(v9 * v12);
  float v16 = a5[1];
  float v17 = a5[2];
  float v18 = (float)((float)(v14 * v16) + (float)(*a5 * v13)) + (float)(v17 * v15);
  if (v18 >= 0.0 || v18 > -0.0000001 && v18 < 0.0000001) {
    return 0;
  }
  float v19 = a4[1];
  float v20 = a4[2];
  float v21 = (float)-(float)((float)((float)((float)(v14 * v19) + (float)(*a4 * v13)) + (float)(v20 * v15))
                      - (float)((float)((float)(a3[5] * v14) + (float)(a3[4] * v13)) + (float)(a3[6] * v15)))
      / v18;
  *(float *)(a8 + 24) = *a4 + (float)(*a5 * v21);
  *(float *)(a8 + 28) = v19 + (float)(v16 * v21);
  *(float *)(a8 + 32) = v20 + (float)(v17 * v21);
  if (v21 < 0.0 || v21 > a1) {
    return 0;
  }
  *(_DWORD *)(a8 + 16) = -1;
  *(_DWORD *)(a8 + 52) = 0;
  *(_DWORD *)(a8 + 56) = 0;
  *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 3;
  *(float *)(a8 + 36) = v13;
  *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v14;
  uint64_t result = 1;
  *(float *)(a8 + 44) = v15;
  *(float *)(a8 + 48) = v21;
  return result;
}

uint64_t raycast_convexMesh(uint64_t a1, float *a2, float *a3, float32x2_t *a4, __int16 *a5, float a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a1 + 32);
  float v16 = 1.0 / *(float *)(a1 + 12);
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v133 = vdiv_f32(_D2, *(float32x2_t *)(a1 + 4));
  float v134 = v16;
  long long v135 = *(_OWORD *)(a1 + 16);
  float v22 = a2[4] * -2.0;
  float v23 = a2[5] * -2.0;
  _D2.f32[0] = a2[6] * -2.0;
  float v25 = a2[2];
  float v24 = a2[3];
  float v26 = (float)(v24 * v24) + -0.5;
  float v27 = a2[1];
  float v28 = (float)((float)(v23 * v27) + (float)(*a2 * v22)) + (float)(v25 * _D2.f32[0]);
  float v29 = (float)((float)(v22 * v26) - (float)((float)((float)(v27 * _D2.f32[0]) - (float)(v25 * v23)) * v24))
      + (float)(*a2 * v28);
  float v30 = (float)((float)(v23 * v26) - (float)((float)((float)(v25 * v22) - (float)(*a2 * _D2.f32[0])) * v24))
      + (float)(v27 * v28);
  float v31 = (float)(_D2.f32[0] * v26) - (float)((float)((float)(*a2 * v23) - (float)(v27 * v22)) * v24);
  v132[0] = -*a2;
  v132[1] = -v27;
  void v132[2] = -v25;
  v132[3] = v24;
  v132[4] = v29;
  v132[5] = v30;
  v132[6] = v31 + (float)(v25 * v28);
  physx::operator*((float *)&v133, v132, v136);
  uint64_t v32 = *(unsigned __int8 *)(v15 + 71);
  uint64_t v33 = *(void *)(v15 + 72);
  float v34 = v136[0];
  float v35 = v136[1];
  float v36 = *a3;
  float v37 = a3[1];
  float v39 = v136[2];
  float v38 = v136[3];
  float v41 = v136[4];
  float v40 = v136[5];
  float v42 = a3[2];
  float v43 = v136[6];
  float v44 = v136[7];
  float v45 = v136[8];
  float v46 = v136[9];
  float v47 = v136[10];
  float v48 = v136[11];
  float v50 = a4->f32[0];
  float v49 = a4->f32[1];
  float v51 = a4[1].f32[0];
  *(_DWORD *)(a8 + 16) = -1;
  if (!v32)
  {
LABEL_13:
    *(_DWORD *)(a8 + 16) = -1;
    *(void *)(a8 + 48) = 0;
    *(_DWORD *)(a8 + 56) = 0;
    *(float *)(a8 + 24) = v36;
    *(float *)(a8 + 28) = v37;
    *(float *)(a8 + 32) = v42;
    float v70 = -a4[1].f32[0];
    *(float32x2_t *)(a8 + 36) = vneg_f32(*a4);
    *(float *)(a8 + 44) = v70;
    __int16 v71 = 3;
LABEL_14:
    *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = v71;
    return 1;
  }
  uint64_t v52 = 0;
  float v53 = (float)((float)((float)(v36 * v34) + (float)(v37 * v38)) + (float)(v42 * v43)) + v46;
  float v54 = (float)((float)((float)(v36 * v35) + (float)(v37 * v41)) + (float)(v42 * v44)) + v47;
  float v55 = (float)((float)((float)(v36 * v39) + (float)(v37 * v40)) + (float)(v42 * v45)) + v48;
  float v56 = v41 * v49;
  float v57 = (float)(v39 * v50) + (float)(v40 * v49);
  float v58 = (float)((float)(v34 * v50) + (float)(v38 * v49)) + (float)(v43 * v51);
  float v59 = (float)((float)(v35 * v50) + v56) + (float)(v44 * v51);
  float v60 = v57 + (float)(v45 * v51);
  float v61 = (float *)(v33 + 8);
  LOBYTE(v62) = 1;
  float v63 = -3.4028e38;
  float v64 = 3.4028e38;
  do
  {
    float v65 = *(v61 - 2);
    float v66 = *(v61 - 1);
    float v67 = v61[1] + (float)((float)((float)(v54 * v66) + (float)(v53 * v65)) + (float)(v55 * *v61));
    float v68 = (float)((float)(v59 * v66) + (float)(v65 * v58)) + (float)(*v61 * v60);
    float v69 = (float)-v67 / v68;
    if (v68 <= 0.0000001)
    {
      if (v68 >= -0.0000001)
      {
        if (v67 > 0.0) {
          return 0;
        }
      }
      else if (v69 > v63)
      {
        *(_DWORD *)(a8 + 16) = v52;
        float v63 = (float)-v67 / v68;
      }
    }
    else if (v64 >= v69)
    {
      float v64 = (float)-v67 / v68;
    }
    int v62 = (v67 <= 0.0) & v62;
    ++v52;
    v61 += 5;
  }
  while (v32 != v52);
  if (v62) {
    goto LABEL_13;
  }
  uint64_t result = 0;
  if (v63 < (float)(a6 + -0.00001) && v63 > 0.0 && v63 < v64)
  {
    __int16 v73 = *a5;
    if (*a5)
    {
      float v129 = v53 + (float)(v58 * v63);
      float v130 = v54 + (float)(v59 * v63);
      float v131 = v55 + (float)(v60 * v63);
      float v74 = *(float *)(a1 + 20);
      float v75 = *(float *)(a1 + 24);
      float v76 = *(float *)(a1 + 28);
      float v78 = *(float *)(a1 + 12);
      float v77 = *(float *)(a1 + 16);
      float v79 = v74 + v74;
      float v80 = v75 + v75;
      float v81 = v74 * (float)(v74 + v74);
      float v82 = v75 * (float)(v75 + v75);
      float v83 = (float)(v77 + v77) * v74;
      float v84 = (float)(v77 + v77) * v75;
      float v85 = (float)(v77 + v77) * v76;
      float v86 = v79 * v75;
      float v87 = v79 * v76;
      float v88 = v80 * v76;
      float v89 = (float)(1.0 - v81) - v82;
      float v90 = v83 + v88;
      float v91 = v84 - v87;
      float v92 = v83 - v88;
      float v93 = 1.0 - (float)(v77 * (float)(v77 + v77));
      float v94 = v93 - v82;
      float v95 = v86 + v85;
      float v96 = v84 + v87;
      float v97 = v86 - v85;
      float v98 = v93 - v81;
      float v99 = *(float *)(a1 + 4);
      float v100 = *(float *)(a1 + 8);
      float v101 = v99 * v89;
      float v102 = v90 * v100;
      float v103 = v91 * v78;
      float v104 = (float)((float)(v89 * (float)(v99 * v89)) + (float)(v90 * (float)(v90 * v100)))
           + (float)(v91 * (float)(v91 * v78));
      float v105 = (float)(v131
                   * (float)((float)((float)(v96 * (float)(v99 * v92)) + (float)(v97 * (float)(v94 * v100)))
                           + (float)(v98 * (float)(v95 * v78))))
           + (float)((float)(v129
                           * (float)((float)((float)(v89 * (float)(v99 * v92)) + (float)(v90 * (float)(v94 * v100)))
                                   + (float)(v91 * (float)(v95 * v78))))
                   + (float)(v130
                           * (float)((float)((float)(v92 * (float)(v99 * v92)) + (float)(v94 * (float)(v94 * v100)))
                                   + (float)(v95 * (float)(v95 * v78)))));
      float v106 = (float)(v131
                   * (float)((float)((float)(v96 * (float)(v99 * v96)) + (float)(v97 * (float)(v97 * v100)))
                           + (float)(v98 * (float)(v98 * v78))))
           + (float)((float)(v129
                           * (float)((float)((float)(v89 * (float)(v99 * v96)) + (float)(v90 * (float)(v97 * v100)))
                                   + (float)(v91 * (float)(v98 * v78))))
                   + (float)(v130
                           * (float)((float)((float)(v92 * (float)(v99 * v96)) + (float)(v94 * (float)(v97 * v100)))
                                   + (float)(v95 * (float)(v98 * v78)))));
      float v107 = (float)((float)(v131 * (float)((float)((float)(v96 * v101) + (float)(v97 * v102)) + (float)(v98 * v103)))
                   + (float)((float)(v129 * v104)
                           + (float)(v130
                                   * (float)((float)((float)(v92 * v101) + (float)(v94 * v102)) + (float)(v95 * v103)))))
           + (float)((float)(v131 * (float)((float)((float)(v96 * v101) + (float)(v97 * v102)) + (float)(v98 * v103)))
                   + (float)((float)(v129 * v104)
                           + (float)(v130
                                   * (float)((float)((float)(v92 * v101) + (float)(v94 * v102)) + (float)(v95 * v103)))));
      float v108 = v105 + v105;
      float v109 = v106 + v106;
      float v111 = a2[2];
      float v110 = a2[3];
      float v112 = (float)(v110 * v110) + -0.5;
      float v113 = a2[1];
      float v114 = (float)((float)(v113 * v108) + (float)(*a2 * v107)) + (float)(v111 * v109);
      float v115 = (float)((float)(v110 * (float)((float)(v113 * v109) - (float)(v111 * v108))) + (float)(v107 * v112))
           + (float)(*a2 * v114);
      float v116 = (float)((float)(v110 * (float)((float)(v111 * v107) - (float)(*a2 * v109))) + (float)(v108 * v112))
           + (float)(v113 * v114);
      float v117 = (float)((float)(v110 * (float)((float)(*a2 * v108) - (float)(v113 * v107))) + (float)(v109 * v112))
           + (float)(v111 * v114);
      float v118 = a2[5] + v116;
      float v119 = a2[6] + v117;
      *(float *)(a8 + 24) = a2[4] + v115;
      *(float *)(a8 + 28) = v118;
      *(float *)(a8 + 32) = v119;
      __int16 v71 = 1025;
    }
    else
    {
      __int16 v71 = 1024;
    }
    *(float *)(a8 + 48) = v63;
    *(void *)(a8 + 52) = 0;
    *(void *)(a8 + 36) = 0;
    *(_DWORD *)(a8 + 44) = 0;
    if ((v73 & 2) != 0)
    {
      v71 |= 2u;
      float32x4_t v120 = (float *)(v33 + 20 * *(unsigned int *)(a8 + 16));
      float v121 = v120[1];
      float v122 = (float)(v35 * v121) + (float)(v34 * *v120);
      float v123 = v120[2];
      float v124 = v122 + (float)(v39 * v123);
      float v125 = (float)((float)(v41 * v121) + (float)(v38 * *v120)) + (float)(v40 * v123);
      float v126 = (float)((float)(v44 * v121) + (float)(v43 * *v120)) + (float)(v45 * v123);
      *(float *)(a8 + 36) = v124;
      *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v125;
      *(float *)(a8 + 44) = v126;
      float v127 = sqrtf((float)((float)(v125 * v125) + (float)(v124 * v124)) + (float)(v126 * v126));
      if (v127 > 0.0)
      {
        float v128 = 1.0 / v127;
        *(float *)(a8 + 36) = v124 * v128;
        *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v125 * v128;
        *(float *)(a8 + 44) = v126 * v128;
      }
    }
    goto LABEL_14;
  }
  return result;
}

float physx::operator*@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v4 = a1[2];
  float v3 = a1[3];
  float v5 = a1[4];
  float v6 = a1[5];
  float v7 = v5 + v5;
  float v8 = v6 + v6;
  float v9 = v5 * (float)(v5 + v5);
  float v10 = v6 * (float)(v6 + v6);
  float v11 = (float)(v3 + v3) * v5;
  float v12 = (float)(v3 + v3) * v6;
  float v13 = a1[6];
  float v14 = (float)(v3 + v3) * v13;
  float v15 = v7 * v6;
  float v16 = v7 * v13;
  float v17 = v8 * v13;
  float v18 = (float)(1.0 - v9) - v10;
  float v19 = v11 + v17;
  float v20 = v12 - v16;
  float v21 = v11 - v17;
  float v22 = 1.0 - (float)(v3 * (float)(v3 + v3));
  float v23 = v22 - v10;
  float v24 = v15 + v14;
  float v25 = v12 + v16;
  float v26 = v15 - v14;
  float v27 = v22 - v9;
  float v28 = a1[1];
  float v29 = *a1 * v18;
  float v30 = *a1 * v21;
  float v31 = *a1 * v25;
  float v32 = v19 * v28;
  float v33 = v23 * v28;
  float v34 = v26 * v28;
  float v35 = v20 * v4;
  float v36 = v24 * v4;
  float v37 = (float)(v22 - v9) * v4;
  float v38 = (float)(v18 * v31) + (float)(v19 * (float)(v26 * v28));
  float v39 = (float)((float)(v18 * v29) + (float)(v19 * (float)(v19 * v28))) + (float)(v20 * (float)(v20 * v4));
  float v40 = (float)((float)(v18 * v30) + (float)(v19 * v33)) + (float)(v20 * (float)(v24 * v4));
  float v41 = v38 + (float)(v20 * v37);
  float v42 = (float)(v21 * v29) + (float)(v23 * v32);
  float v43 = (float)(v21 * v30) + (float)(v23 * v33);
  float v44 = (float)(v21 * v31) + (float)(v23 * v34);
  float v45 = v42 + (float)(v24 * v35);
  float v46 = v43 + (float)(v24 * v36);
  float v47 = v44 + (float)(v24 * v37);
  float v48 = (float)(v25 * v29) + (float)(v26 * v32);
  float v49 = (float)(v25 * v30) + (float)(v26 * v33);
  float v50 = (float)(v25 * v31) + (float)(v26 * v34);
  float v51 = v27 * v36;
  float v52 = v27 * v37;
  float v53 = v48 + (float)(v27 * v35);
  float v54 = v49 + v51;
  float v55 = v50 + v52;
  float v56 = *a2;
  float v57 = a2[1];
  float v58 = a2[2];
  float v59 = a2[3];
  float v60 = v57 + v57;
  float v61 = v58 + v58;
  float v62 = v57 * (float)(v57 + v57);
  float v63 = v58 * (float)(v58 + v58);
  float v64 = (float)(v56 + v56) * v57;
  float v65 = (float)(v56 + v56) * v58;
  float v66 = (float)(v56 + v56) * v59;
  float v67 = v60 * v58;
  float v68 = v60 * v59;
  float v69 = v61 * v59;
  float v70 = (float)(1.0 - v62) - v63;
  float v71 = v64 + v69;
  float v72 = v65 - v68;
  float v73 = v64 - v69;
  float v74 = 1.0 - (float)(v56 * (float)(v56 + v56));
  float v75 = v74 - v63;
  float v76 = v67 + v66;
  float v77 = v65 + v68;
  float v78 = v67 - v66;
  float v79 = v74 - v62;
  float v80 = (float)(v53 * v72) + (float)((float)(v39 * v70) + (float)(v45 * v71));
  float v81 = (float)(v54 * v72) + (float)((float)(v40 * v70) + (float)(v46 * v71));
  float v82 = (float)(v55 * v72) + (float)((float)(v41 * v70) + (float)(v47 * v71));
  float v83 = v40 * v73;
  float v84 = v46 * v75;
  float v85 = (float)(v39 * v73) + (float)(v45 * v75);
  float v86 = (float)(v41 * v73) + (float)(v47 * v75);
  float v87 = (float)(v53 * v76) + v85;
  float v88 = (float)(v54 * v76) + (float)(v83 + v84);
  float v89 = (float)(v55 * v76) + v86;
  float v90 = v46 * v78;
  float v91 = (float)(v39 * v77) + (float)(v45 * v78);
  float v92 = (float)(v41 * v77) + (float)(v47 * v78);
  float v93 = (float)(v53 * v79) + v91;
  float v94 = (float)(v54 * v79) + (float)((float)(v40 * v77) + v90);
  float v95 = (float)(v55 * v79) + v92;
  float v96 = a2[4];
  float v97 = a2[5];
  float v98 = v39 * v96;
  float v99 = v40 * v96;
  float v100 = v41 * v96;
  float v101 = a2[6];
  *a3 = v80;
  a3[1] = v81;
  a3[2] = v82;
  a3[3] = v87;
  a3[4] = v88;
  a3[5] = v89;
  a3[6] = v93;
  a3[7] = v94;
  a3[8] = v95;
  a3[9] = (float)(v98 + (float)(v45 * v97)) + (float)(v53 * v101);
  float result = (float)(v100 + (float)(v47 * v97)) + (float)(v55 * v101);
  a3[10] = (float)(v99 + (float)(v46 * v97)) + (float)(v54 * v101);
  a3[11] = result;
  return result;
}

uint64_t raycast_triangleMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  float v5 = physx::Gu::gMidphaseRaycastTable[*(unsigned __int16 *)(*(void *)(a1 + 40) + 8) - 3];
  __int16 v7 = *a5;
  return v5();
}

uint64_t raycast_heightField(float32x2_t *a1, float *a2, float *a3, float *a4, __int16 *a5, int a6, uint64_t a7, float a8)
{
  uint64_t v302 = *MEMORY[0x263EF8340];
  float v14 = a2[4] * -2.0;
  float v15 = a2[5] * -2.0;
  float v16 = a2[6] * -2.0;
  float v18 = a2[2];
  float v17 = a2[3];
  float v19 = (float)(v17 * v17) + -0.5;
  float v20 = *a2;
  float v21 = a2[1];
  float v22 = (float)((float)(v15 * v21) + (float)(*a2 * v14)) + (float)(v18 * v16);
  float v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
      + (float)(*a2 * v22);
  float v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(*a2 * v16)) * v17))
      + (float)(v21 * v22);
  float v25 = (float)((float)(v16 * v19) - (float)((float)((float)(*a2 * v15) - (float)(v21 * v14)) * v17))
      + (float)(v18 * v22);
  float v26 = *a3 + *a3;
  float v27 = a3[1] + a3[1];
  float v28 = a3[2] + a3[2];
  float v29 = (float)((float)-(float)(v21 * v27) - (float)(*a2 * v26)) - (float)(v18 * v28);
  float v30 = (float)((float)(v17 * (float)((float)(v18 * v27) - (float)(v21 * v28))) + (float)(v26 * v19))
      - (float)(*a2 * v29);
  float v31 = (float)((float)(v17 * (float)((float)(*a2 * v28) - (float)(v18 * v26))) + (float)(v27 * v19))
      - (float)(v21 * v29);
  float v32 = (float)((float)(v17 * (float)((float)(v21 * v26) - (float)(*a2 * v27))) + (float)(v28 * v19))
      - (float)(v18 * v29);
  v290.f32[0] = v23 + v30;
  v290.f32[1] = v24 + v31;
  float v291 = v25 + v32;
  float v33 = *a4 + *a4;
  float v34 = a4[1] + a4[1];
  float v35 = a4[2] + a4[2];
  float v36 = (float)((float)-(float)(v21 * v34) - (float)(v20 * v33)) - (float)(v18 * v35);
  float v37 = (float)((float)(v17 * (float)((float)(v18 * v34) - (float)(v21 * v35))) + (float)(v33 * v19))
      - (float)(v20 * v36);
  float v38 = (float)((float)(v17 * (float)((float)(v20 * v35) - (float)(v18 * v33))) + (float)(v34 * v19))
      - (float)(v21 * v36);
  float v39 = (float)((float)(v17 * (float)((float)(v21 * v33) - (float)(v20 * v34))) + (float)(v35 * v19))
      - (float)(v18 * v36);
  v289[0] = v37;
  v289[1] = v38;
  v289[2] = v39;
  __int8 v40 = a1[3].i8[4];
  BOOL v41 = (v40 & 2) == 0 && (*a5 & 0x80) == 0;
  BOOL v252 = v41;
  float32x2_t v287 = a1[1];
  long long v288 = (float *)a1;
  float v42 = a1[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v285 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a1[2]));
  float v286 = 1.0 / v42;
  unint64_t v283 = __PAIR64__(LODWORD(v38), LODWORD(v37));
  float v284 = v39;
  float v47 = sqrtf((float)((float)(v38 * v38) + (float)(v37 * v37)) + (float)(v39 * v39));
  if (v47 >= 1.0e-20)
  {
    float v37 = v37 * (float)(1.0 / v47);
    float v38 = v38 * (float)(1.0 / v47);
    unint64_t v283 = __PAIR64__(LODWORD(v38), LODWORD(v37));
    float v39 = v39 * (float)(1.0 / v47);
    float v284 = v39;
  }
  physx::Gu::HeightFieldUtil::computeLocalBounds((uint64_t)&v285, (float *)&v279);
  float v48 = (float)(v280 + v282) * 0.5;
  float v49 = (float)((float)(v282 - v280) * 0.5) * 1.01;
  float32x2_t v50 = vmul_f32(vadd_f32(v279, v281), (float32x2_t)0x3F0000003F000000);
  float32x2_t v51 = vmul_f32(vmul_f32(vsub_f32(v281, v279), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3F8147AEu));
  float32x2_t v279 = vsub_f32(v50, v51);
  float v280 = v48 - v49;
  float32x2_t v281 = vadd_f32(v50, v51);
  float v282 = v48 + v49;
  float v277 = 0.0;
  int v52 = physx::Gu::rayAABBIntersect2((uint64_t)&v279, (uint64_t)&v281, (uint64_t)&v290, (uint64_t)v289, (uint64_t)v278, &v277);
  uint64_t result = 0;
  if (v52 && v277 <= a8)
  {
    __int16 v54 = *a5;
    if ((*a5 & 0x20) != 0) {
      int v55 = a6;
    }
    else {
      int v55 = 1;
    }
    uint64_t v267 = a7;
    int v268 = v55;
    unsigned int v269 = 0;
    int v270 = &v285;
    int8x16_t v271 = a2;
    float32x2_t v272 = a4;
    float32x2_t v273 = v289;
    int v274 = &v290;
    __int16 v275 = v54;
    char v276 = (v40 & 2) >> 1;
    float v56 = v290.f32[0];
    float v57 = 0.0;
    float32x2_t v265 = v290;
    float v58 = v291;
    float v266 = v291;
    if (v277 <= 0.0)
    {
      float v253 = v290.f32[1];
    }
    else
    {
      float v57 = v277 + -10.0;
      float v56 = v290.f32[0] + (float)((float)(v277 + -10.0) * v37);
      float v58 = v291 + (float)((float)(v277 + -10.0) * v39);
      v265.f32[0] = v56;
      v265.f32[1] = v290.f32[1] + (float)((float)(v277 + -10.0) * v38);
      float v253 = v265.f32[1];
      float v266 = v58;
    }
    float v59 = a8 - v57;
    float v60 = v281.f32[0] - v279.f32[0];
    float v61 = v281.f32[1] - v279.f32[1];
    if ((float)(v281.f32[1] - v279.f32[1]) <= (float)(v282 - v280)) {
      float v61 = v282 - v280;
    }
    if (v60 <= v61) {
      float v60 = v61;
    }
    float v62 = (float)(v60 * 2.0) + 10.0;
    if (v59 >= v62) {
      float v63 = v62;
    }
    else {
      float v63 = v59;
    }
    uint64_t v300 = 0;
    BOOL v64 = physx::Gu::intersectRayAABB2(&v279, &v281, &v265, (float32x2_t *)&v283, (float *)&v300 + 1, (float *)&v300, v63);
    BOOL v65 = v252;
    float v66 = v253;
    if (v64)
    {
      float v67 = (float)(*((float *)&v300 + 1) * v38) + v253;
      float v68 = (float)(*((float *)&v300 + 1) * v39) + v58;
      float v69 = v56;
      float32x2_t v70 = v287;
      int v71 = *(_DWORD *)(*(void *)&v287 + 56);
      int v72 = *(_DWORD *)(*(void *)&v287 + 60);
      float v73 = (float)((float)(*((float *)&v300 + 1) * v37) + v56) * *(float *)v285.i32;
      float v74 = fmaxf(v73, 0.0000001);
      float v75 = (float)((float)(v71 - 1) * 1.0) + 0.0;
      if (v74 < v75) {
        float v75 = v74;
      }
      float v76 = v68 * v286;
      float v77 = fmaxf(v68 * v286, 0.0000001);
      float v78 = (float)((float)(v72 - 1) * 1.0) + 0.0;
      if (v77 < v78) {
        float v78 = v77;
      }
      float v79 = (float)(v56 + (float)(v37 * *(float *)&v300)) * *(float *)v285.i32;
      float v80 = (float)(v58 + (float)(v39 * *(float *)&v300)) * v286;
      if ((float)(v79 - v73) < 0.0) {
        float v81 = -1.0;
      }
      else {
        float v81 = 1.0;
      }
      if ((float)(v80 - v76) < 0.0) {
        float v82 = -1.0;
      }
      else {
        float v82 = 1.0;
      }
      float v258 = v82;
      float v259 = v81;
      float v83 = v81 * 1.0e-10;
      if (vabds_f32(v79, v73) >= 1.0e-10) {
        float v84 = v79 - v73;
      }
      else {
        float v84 = v83;
      }
      if (vabds_f32(v80, v76) >= 1.0e-10) {
        float v85 = v80 - v76;
      }
      else {
        float v85 = v82 * 1.0e-10;
      }
      float v86 = (float)(v63 * v37) * *(float *)v285.i32;
      float v87 = v63 * v38;
      float v88 = (float)(v63 * v39) * v286;
      float v89 = sqrtf((float)((float)(v87 * v87) + (float)(v86 * v86)) + (float)(v88 * v88));
      BOOL v90 = v89 <= 1.0e-20;
      float v236 = v89;
      float v91 = 1.0 / v89;
      float v92 = v86 * v91;
      float v93 = (float)(v63 * v38) * v91;
      float v94 = v88 * v91;
      if (v90) {
        float v95 = (float)(v63 * v39) * v286;
      }
      else {
        float v95 = v94;
      }
      if (!v90)
      {
        float v87 = v93;
        float v86 = v92;
      }
      float v263 = v86;
      float v264 = v87;
      float v96 = floorf(v75);
      float v97 = ceilf(v75);
      float v98 = floorf(v78);
      float v99 = ceilf(v78);
      if (v85 <= 0.0) {
        float v100 = v99;
      }
      else {
        float v100 = v98;
      }
      float v101 = v96 + -1.0;
      if (v96 != v75) {
        float v101 = v96;
      }
      float v102 = v97 + 1.0;
      if (v97 != v75) {
        float v102 = v97;
      }
      if (v84 <= 0.0) {
        float v103 = v97;
      }
      else {
        float v103 = v96;
      }
      if (v84 > 0.0) {
        float v104 = v102;
      }
      else {
        float v104 = v101;
      }
      float v105 = v98 + -1.0;
      if (v98 != v78) {
        float v105 = v98;
      }
      if (v99 == v78) {
        float v106 = v99 + 1.0;
      }
      else {
        float v106 = v99;
      }
      if (v85 <= 0.0) {
        float v106 = v105;
      }
      float v107 = (float)(v104 - v73) / v84;
      float v108 = (float)(v106 - v76) / v85;
      if (v107 < 0.0) {
        float v107 = fabsf(0.0000001 / v84);
      }
      int v109 = (int)v103;
      int v110 = (int)v100;
      float v111 = (float)(v253 + (float)(v38 * *(float *)&v300)) - v67;
      int v112 = (int)v259;
      int v113 = (int)v258;
      if (v108 < 0.0) {
        float v108 = fabsf(0.0000001 / v85);
      }
      float v114 = v288[4];
      float v250 = v288[5];
      float v251 = v288[6];
      float v260 = v58 * v286;
      float v261 = v69 * *(float *)v285.i32;
      float v242 = 1.0 / fabsf(v84);
      float v115 = fabsf(v85);
      float v116 = (float)v109;
      float v117 = (float)v110;
      int v118 = 1 - v113;
      if (v113 > 1) {
        int v118 = 2 - v113;
      }
      float v119 = v67 + (float)(v111 * 0.0);
      uint64_t v249 = (v118 >> 1) - v112 + 1;
      int v120 = v112 + (v118 >> 1);
      uint64_t v248 = 2 - v120;
      uint64_t v246 = v112 - (v118 >> 1) + 2;
      uint64_t v247 = v120 + 1;
      float v121 = -v95;
      float v122 = -v263;
      float v257 = -v264;
      float v245 = (float)v71;
      float v123 = "NSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_35CoreIKFootPlacementSolverNodeHelperENS2_9Al"
             "locatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EEE"
           + 59;
      float v240 = v67;
      float v241 = 1.0 / v115;
      float32x2_t v239 = v287;
      float v256 = v95;
      float v243 = -v95;
      float v244 = v111;
      float v237 = v288[4];
      do
      {
        float v124 = v119;
        if (v107 >= v108) {
          float v125 = v108;
        }
        else {
          float v125 = v107;
        }
        float v119 = v67 + (float)(v125 * v111);
        int v126 = v109 + v112;
        uint64_t v127 = *(void *)(*(void *)&v70 + 80);
        float v128 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + v109 * v72));
        float v129 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + v109 * v72 + v113));
        int v130 = *(__int16 *)(v127 + 4 * (v110 + (v109 + v112) * v72));
        v301[0] = v128;
        v301[1] = v129;
        float v131 = v114 * (float)v130;
        float v132 = v114 * (float)*(__int16 *)(v127 + 4 * (v110 + (v109 + v112) * v72 + v113));
        v301[2] = v131;
        v301[3] = v132;
        if (v131 >= v132) {
          float v133 = v132;
        }
        else {
          float v133 = v114 * (float)v130;
        }
        if (v131 <= v132) {
          float v131 = v132;
        }
        if (v128 >= v129) {
          float v134 = v129;
        }
        else {
          float v134 = v128;
        }
        if (v128 <= v129) {
          float v128 = v129;
        }
        if (v134 >= v133) {
          float v135 = v133;
        }
        else {
          float v135 = v134;
        }
        if (v128 <= v131) {
          float v128 = v131;
        }
        if (v124 >= v119) {
          float v136 = v67 + (float)(v125 * v111);
        }
        else {
          float v136 = v124;
        }
        if (v124 <= v119) {
          float v124 = v67 + (float)(v125 * v111);
        }
        float v137 = v124 + 0.0001;
        if ((float)(v136 + -0.0001) > v128 || v137 < v135) {
          goto LABEL_161;
        }
        float v139 = v301[v249];
        float v140 = v301[v248];
        float v141 = v301[v247];
        float v142 = v301[v246];
        float v143 = v259 + v116;
        if (v116 >= (float)(v259 + v116)) {
          float v144 = v259 + v116;
        }
        else {
          float v144 = v116;
        }
        if (v116 > (float)(v259 + v116)) {
          float v143 = v116;
        }
        float v145 = v258 + v117;
        if (v117 >= (float)(v258 + v117)) {
          float v146 = v258 + v117;
        }
        else {
          float v146 = v117;
        }
        if (v117 > v145) {
          float v145 = v117;
        }
        *(float *)float32x4_t v299 = v144;
        *(float *)&v299[1] = v140;
        *(float *)&v299[2] = v145;
        *(float *)float32x4_t v298 = v143;
        *(float *)&v298[1] = v142;
        *(float *)&v298[2] = v145;
        if (v126 >= v109) {
          int v147 = v109;
        }
        else {
          int v147 = v109 + v112;
        }
        int v148 = v110 + v113;
        if (v110 + v113 >= v110) {
          int v148 = v110;
        }
        uint64_t v149 = (v148 + v147 * v72);
        int v150 = *(unsigned __int8 *)(v127 + 4 * v149 + 2);
        float v262 = v125;
        if ((v150 & 0x80) != 0)
        {
          float32x4_t v151 = (float *)v299;
          float v152 = v145;
          float v145 = v146;
          float v153 = v143;
        }
        else
        {
          float32x4_t v151 = (float *)v298;
          float v152 = v146;
          float v142 = v141;
          float v141 = v139;
          float v139 = v140;
          float v153 = v144;
        }
        float v154 = v144 - v153;
        float v155 = v139 - v141;
        float v156 = v145 - v146;
        float v157 = v143 - v153;
        float v158 = v142 - v141;
        float v159 = v152 - v146;
        float v160 = (float)((float)(v142 - v141) * v121) + (float)(v264 * (float)(v152 - v146));
        float v161 = (float)((float)(v152 - v146) * v122) + (float)(v95 * (float)(v143 - v153));
        float v162 = (float)((float)(v143 - v153) * v257) + (float)(v263 * (float)(v142 - v141));
        float v163 = (float)((float)((float)(v139 - v141) * v161) + (float)((float)(v144 - v153) * v160))
             + (float)((float)(v145 - v146) * v162);
        float v255 = v116;
        if (v65)
        {
          float v164 = 0.0;
          if (v163 < 1.4211e-14) {
            goto LABEL_117;
          }
          float v176 = v261 - v153;
          float v177 = v66 - v141;
          float v178 = v260 - v146;
          float v179 = (float)((float)((float)(v66 - v141) * v161) + (float)(v176 * v160))
               + (float)((float)(v260 - v146) * v162);
          float v180 = -(float)(v163 * 0.0001);
          float v181 = v163 + (float)(v163 * 0.0001);
          if (v179 < v180 || v179 > v181)
          {
LABEL_128:
            float v165 = 0.0;
            float v95 = v256;
            goto LABEL_129;
          }
          float v230 = (float)(v177 * v156) - (float)(v178 * v155);
          float v231 = (float)(v178 * v154) - (float)(v176 * v156);
          float v232 = (float)(v176 * v155) - (float)(v177 * v154);
          float v95 = v256;
          float v233 = (float)((float)(v264 * v231) + (float)(v263 * v230)) + (float)(v256 * v232);
          BOOL v234 = v233 >= v180 && (float)(v179 + v233) <= v181;
          float v165 = 0.0;
          if (!v234) {
            goto LABEL_129;
          }
          float v175 = (float)(1.0 / v163)
               * (float)((float)((float)(v158 * v231) + (float)(v157 * v230)) + (float)(v159 * v232));
          float v170 = v179 * (float)(1.0 / v163);
          float v174 = (float)(1.0 / v163) * v233;
        }
        else
        {
          float v164 = 0.0;
          if (fabsf(v163) < 1.4211e-14) {
            goto LABEL_128;
          }
          float v166 = 1.0 / v163;
          float v167 = v261 - v153;
          float v168 = v66 - v141;
          float v169 = v260 - v146;
          float v170 = (float)((float)((float)((float)(v66 - v141) * v161) + (float)(v167 * v160))
                       + (float)((float)(v260 - v146) * v162))
               * v166;
          if (v170 < -0.0001 || v170 > 1.0001) {
            goto LABEL_128;
          }
          float v171 = (float)(v168 * v156) - (float)(v169 * v155);
          float v172 = (float)(v169 * v154) - (float)(v167 * v156);
          float v173 = (float)(v167 * v155) - (float)(v168 * v154);
          float v95 = v256;
          float v174 = v166 * (float)((float)((float)(v264 * v172) + (float)(v263 * v171)) + (float)(v256 * v173));
          if (v174 < -0.0001)
          {
LABEL_117:
            float v165 = 0.0;
LABEL_129:
            int v183 = 0;
            float v175 = 3.4028e38;
            float v174 = v164;
            float v170 = v165;
            goto LABEL_130;
          }
          float v165 = 0.0;
          if ((float)(v170 + v174) > 1.0001) {
            goto LABEL_129;
          }
          float v175 = v166 * (float)((float)((float)(v158 * v172) + (float)(v157 * v171)) + (float)(v159 * v173));
        }
        if ((~v150 & 0x7F) == 0 || (v175 >= 0.0 ? (BOOL v235 = v175 > v236) : (BOOL v235 = 1), v235))
        {
          float v164 = v174;
          float v165 = v170;
          goto LABEL_129;
        }
        int v183 = 1;
LABEL_130:
        float v184 = *v151;
        float v185 = v151[1];
        float v186 = v143 - *v151;
        float v187 = v142 - v185;
        float v188 = v151[2];
        float v189 = v152 - v188;
        float v190 = v144 - *v151;
        float v191 = v139 - v185;
        float v192 = v145 - v188;
        float v193 = (float)((float)(v139 - v185) * v121) + (float)(v264 * (float)(v145 - v188));
        float v194 = (float)((float)(v145 - v188) * v122) + (float)(v95 * v190);
        float v195 = (float)(v190 * v257) + (float)(v263 * (float)(v139 - v185));
        float v196 = (float)((float)(v187 * v194) + (float)(v186 * v193)) + (float)(v189 * v195);
        float v254 = v117;
        if (v65)
        {
          float v197 = 0.0;
          if (v196 < 1.4211e-14
            || ((float v198 = v261 - v184,
                 float v199 = v66 - v185,
                 float v200 = v260 - v188,
                 float v201 = (float)((float)((float)(v66 - v185) * v194) + (float)((float)(v261 - v184) * v193))
                      + (float)((float)(v260 - v188) * v195),
                 float v202 = -(float)(v196 * 0.0001),
                 float v203 = v196 + (float)(v196 * 0.0001),
                 v201 >= v202)
              ? (BOOL v204 = v201 <= v203)
              : (BOOL v204 = 0),
                !v204))
          {
LABEL_144:
            float v210 = 0.0;
            float v125 = v262;
            goto LABEL_145;
          }
          float v205 = (float)(v199 * v189) - (float)(v200 * v187);
          float v206 = (float)(v200 * v186) - (float)(v198 * v189);
          float v207 = (float)(v198 * v187) - (float)(v199 * v186);
          float v208 = (float)((float)(v264 * v206) + (float)(v263 * v205)) + (float)(v95 * v207);
          BOOL v209 = v208 >= v202 && (float)(v208 + v201) <= v203;
          float v210 = 0.0;
          float v125 = v262;
          if (!v209) {
            goto LABEL_145;
          }
          float v211 = (float)((float)((float)(v191 * v206) + (float)(v190 * v205)) + (float)(v192 * v207))
               * (float)(1.0 / v196);
          float v212 = v201 * (float)(1.0 / v196);
          float v213 = v208 * (float)(1.0 / v196);
        }
        else
        {
          float v197 = 0.0;
          if (fabsf(v196) < 1.4211e-14) {
            goto LABEL_144;
          }
          float v222 = 1.0 / v196;
          float v223 = v261 - v184;
          float v224 = v66 - v185;
          float v225 = v260 - v188;
          float v212 = (float)((float)((float)((float)(v66 - v185) * v194) + (float)((float)(v261 - v184) * v193))
                       + (float)(v225 * v195))
               * v222;
          if (v212 < -0.0001) {
            goto LABEL_144;
          }
          if (v212 > 1.0001) {
            goto LABEL_144;
          }
          float v226 = (float)(v224 * v189) - (float)(v225 * v187);
          float v227 = (float)(v225 * v186) - (float)(v223 * v189);
          float v228 = (float)(v223 * v187) - (float)(v224 * v186);
          float v213 = (float)((float)((float)(v264 * v227) + (float)(v263 * v226)) + (float)(v95 * v228)) * v222;
          if (v213 < -0.0001) {
            goto LABEL_144;
          }
          float v210 = 0.0;
          float v125 = v262;
          if ((float)(v212 + v213) > 1.0001) {
            goto LABEL_145;
          }
          float v211 = (float)((float)((float)(v191 * v227) + (float)(v190 * v226)) + (float)(v192 * v228)) * v222;
        }
        BOOL v229 = v211 < 0.0 || v211 > v236;
        if (!v229 && (~*(unsigned __int8 *)(v127 + 4 * v149 + 3) & 0x7F) != 0)
        {
          int v214 = 1;
          goto LABEL_146;
        }
        float v197 = v213;
        float v210 = v212;
LABEL_145:
        int v214 = 0;
        float v211 = 3.4028e38;
        float v213 = v197;
        float v212 = v210;
LABEL_146:
        char v215 = v183 ^ 1;
        if (v175 > v211) {
          char v215 = 1;
        }
        if (v215)
        {
          char v217 = v214 ^ 1;
          if (v211 > v175) {
            char v217 = 1;
          }
          if ((v217 & 1) == 0)
          {
            float v218 = v107;
            float v219 = v174;
            float v238 = v108;
            float v220 = v218;
            float v221 = v170;
            float v295 = v250 * (float)(v261 + (float)(v263 * v211));
            float v296 = v66 + (float)(v264 * v211);
            float v297 = v251 * (float)(v260 + (float)(v95 * v211));
              return v269;
            if (v183)
            {
              float v292 = v250 * (float)(v261 + (float)(v263 * v175));
              float v293 = v253 + (float)(v264 * v175);
              float v294 = v251 * (float)(v260 + (float)(v256 * v175));
                return v269;
            }
            BOOL v65 = v252;
            float v66 = v253;
            float v67 = v240;
            float32x2_t v70 = v239;
            float v95 = v256;
            float v123 = "S3_35CoreIKFootPlacementSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EEE";
            float v125 = v262;
            float v107 = v220;
            float v114 = v237;
            float v108 = v238;
          }
        }
        else
        {
          float v295 = v250 * (float)(v261 + (float)(v263 * v175));
          float v296 = v66 + (float)(v264 * v175);
          float v297 = v251 * (float)(v260 + (float)(v95 * v175));
          int v216 = 2 * v149;
            return v269;
          if (v214)
          {
            float v292 = v250 * (float)(v261 + (float)(v263 * v211));
            float v293 = v253 + (float)(v264 * v211);
            float v294 = v251 * (float)(v260 + (float)(v256 * v211));
              return v269;
          }
          BOOL v65 = v252;
          float v66 = v253;
          float v67 = v240;
          float32x2_t v70 = v239;
          float v95 = v256;
          float v123 = "NSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_35CoreIKFootPlacementSolverNodeHelperENS2"
                 "_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocat"
                 "orISJ_EEFvSI_EEE"
               + 59;
          float v125 = v262;
        }
        float v121 = v243;
        float v111 = v244;
        float v117 = v254;
        float v116 = v255;
        float v122 = -v263;
LABEL_161:
        if (v107 >= v108)
        {
          v110 += v113;
          if (v110 + v113 < 0 || (float)(v110 + v113) >= (float)v72) {
            return v269;
          }
          float v117 = v258 + v117;
          float v108 = v241 + v108;
        }
        else
        {
          if (v126 + v112 < 0 || (float)(v126 + v112) >= v245) {
            return v269;
          }
          float v116 = v259 + v116;
          float v107 = v242 + v107;
          v109 += v112;
        }
      }
      while (v125 < *((float *)v123 + 934));
    }
    return v269;
  }
  return result;
}

uint64_t raycast_heightField_unregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuRaycastTests.cpp", 538, "Height Field Raycast test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t physx::readChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(void, uint64_t, uint64_t))
{
  (**a5)(a5, a1, 1);
  (**a5)(a5, a2, 1);
  (**a5)(a5, a3, 1);
  float v9 = **a5;
  return v9(a5, a4, 1);
}

uint64_t physx::readDword(int a1, void (***a2)(void, unsigned __int32 *, uint64_t))
{
  unsigned __int32 v6 = 0;
  (**a2)(a2, &v6, 4);
  if (a1)
  {
    v3.i32[0] = v6;
    int16x8_t v4 = (int16x8_t)vmovl_u8(v3);
    *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
    return vmovn_s16(v4).u32[0];
  }
  return v6;
}

float physx::readFloat(int a1, void (***a2)(void, float *, uint64_t))
{
  (**a2)(a2, &v6, 4);
  if (a1)
  {
    *(float *)v3.i32 = v6;
    int16x8_t v4 = (int16x8_t)vmovl_u8(v3);
    *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
    LODWORD(v6) = vmovn_s16(v4).u32[0];
  }
  return v6;
}

uint64_t physx::writeDword(unsigned int a1, int a2, uint64_t (***a3)(void, unsigned int *, uint64_t))
{
  unsigned int v4 = a1;
  if (a2) {
    unsigned int v4 = bswap32(a1);
  }
  return (**a3)(a3, &v4, 4);
}

uint64_t physx::writeFloat(int a1, uint64_t (***a2)(void, unsigned int *, uint64_t), float a3)
{
  unsigned int v4 = LODWORD(a3);
  if (a1) {
    unsigned int v4 = bswap32(LODWORD(a3));
  }
  return (**a2)(a2, &v4, 4);
}

uint64_t physx::readFloatBuffer(__int32 *a1, unsigned int a2, int a3, void (***a4)(void, __int32 *, void))
{
  float v6 = a1;
  (**a4)(a4, a1, 4 * a2);
  if (a2 && a3)
  {
    uint64_t v8 = a2;
    do
    {
      v7.i32[0] = *v6;
      int16x8_t v9 = (int16x8_t)vmovl_u8(v7);
      *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
      uint8x8_t v7 = (uint8x8_t)vmovn_s16(v9);
      *v6++ = v7.i32[0];
      --v8;
    }
    while (v8);
  }
  return 1;
}

uint64_t physx::writeFloatBuffer(uint64_t result, int a2, int a3, uint64_t (***a4)(void, unsigned int *, uint64_t))
{
  int v5 = a2;
  float v6 = (unsigned int *)result;
  if (a3)
  {
    if (a2)
    {
      do
      {
        --v5;
        unsigned int v7 = *v6++;
        unsigned int v9 = bswap32(v7);
        uint64_t result = (**a4)(a4, &v9, 4);
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void, uint64_t, void))**a4;
    return v8(a4, result, (4 * a2));
  }
  return result;
}

uint64_t physx::writeWordBuffer(uint64_t result, int a2, int a3, uint64_t (***a4)(void, __int16 *, uint64_t))
{
  int v5 = a2;
  float v6 = (unsigned __int16 *)result;
  if (a3)
  {
    if (a2)
    {
      do
      {
        --v5;
        unsigned int v7 = *v6++;
        __int16 v9 = bswap32(v7) >> 16;
        uint64_t result = (**a4)(a4, &v9, 2);
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void, uint64_t, void))**a4;
    return v8(a4, result, (2 * a2));
  }
  return result;
}

uint64_t physx::readWordBuffer(uint64_t a1, unsigned int a2, int a3, uint64_t (***a4)(void, uint64_t, void))
{
  uint64_t result = (**a4)(a4, a1, 2 * a2);
  if (a2 && a3)
  {
    uint64_t v8 = a2;
    __int16 v9 = (unsigned char *)(a1 + 1);
    do
    {
      char v10 = *(v9 - 1);
      *(v9 - 1) = *v9;
      *__int16 v9 = v10;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::writeHeader(char a1, char a2, char a3, char a4, unsigned int a5, int a6, void (***a7)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t))
{
  qmemcpy(v16, "SXN", sizeof(v16));
  char v15 = a6 ^ 1;
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v16[2], 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v16[1], 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)v16, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v15, 1);
  char v20 = a1;
  char v19 = a2;
  char v18 = a3;
  char v17 = a4;
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v20, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v19, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v18, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v17, 1);
  physx::writeDword(a5, a6, (uint64_t (***)(void, unsigned int *, uint64_t))a7);
  return 1;
}

uint64_t physx::Gu::WriteHeader(char a1, char a2, char a3, char a4, unsigned int a5, int a6, void (***a7)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t))
{
  qmemcpy(v16, "ECI", sizeof(v16));
  char v15 = a6 ^ 1;
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v16[2], 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v16[1], 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)v16, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v15, 1);
  char v20 = a1;
  char v19 = a2;
  char v18 = a3;
  char v17 = a4;
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v20, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v19, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v18, 1);
  (**a7)((uint64_t (***)(void, unsigned int *, uint64_t))a7, (unsigned int *)&v17, 1);
  physx::writeDword(a5, a6, (uint64_t (***)(void, unsigned int *, uint64_t))a7);
  return 1;
}

uint64_t physx::readHeader(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, _DWORD *a5, BOOL *a6, uint64_t (***a7)(void, uint64_t, uint64_t))
{
  int v15 = 0;
  physx::readChunk((uint64_t)&v15 + 3, (uint64_t)&v15 + 2, (uint64_t)&v15 + 1, (uint64_t)&v15, a7);
  uint64_t result = 0;
  if (HIBYTE(v15) == 78 && BYTE2(v15) == 88 && BYTE1(v15) == 83)
  {
    *a6 = (v15 & 1) == 0;
    physx::readChunk((uint64_t)&v15 + 3, (uint64_t)&v15 + 2, (uint64_t)&v15 + 1, (uint64_t)&v15, a7);
    uint64_t result = 0;
    if (HIBYTE(v15) == a1 && BYTE2(v15) == a2 && BYTE1(v15) == a3 && v15 == a4)
    {
      *a5 = physx::readDword(*a6, (void (***)(void, unsigned __int32 *, uint64_t))a7);
      return 1;
    }
  }
  return result;
}

uint64_t physx::Gu::ReadHeader(int a1, int a2, int a3, int a4, _DWORD *a5, BOOL *a6, uint64_t (***a7)(void, uint64_t, uint64_t))
{
  int v15 = 0;
  physx::readChunk((uint64_t)&v15 + 3, (uint64_t)&v15 + 2, (uint64_t)&v15 + 1, (uint64_t)&v15, a7);
  uint64_t result = 0;
  if (HIBYTE(v15) == 73 && BYTE2(v15) == 67 && BYTE1(v15) == 69)
  {
    *a6 = (v15 & 1) == 0;
    physx::readChunk((uint64_t)&v15 + 3, (uint64_t)&v15 + 2, (uint64_t)&v15 + 1, (uint64_t)&v15, a7);
    if (SHIBYTE(v15) == a1 && SBYTE2(v15) == a2 && SBYTE1(v15) == a3 && (char)v15 == a4)
    {
      *a5 = physx::readDword(*a6, (void (***)(void, unsigned __int32 *, uint64_t))a7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t physx::storeIndices(uint64_t result, unsigned int a2, uint64_t a3, uint64_t (***a4)(void, unsigned int *, uint64_t), int a5)
{
  float v6 = (unsigned int *)a3;
  if (result > 0xFF)
  {
    if (WORD1(result))
    {
      return physx::writeFloatBuffer(a3, a2, a5, a4);
    }
    else if (a2)
    {
      uint64_t v10 = a2;
      do
      {
        unsigned int v12 = *v6++;
        unsigned int v11 = v12;
        __int16 v14 = v12;
        if (a5) {
          __int16 v14 = bswap32(v11) >> 16;
        }
        uint64_t result = (**a4)(a4, (unsigned int *)&v14, 2);
        --v10;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    uint64_t v7 = a2;
    do
    {
      int v8 = *v6++;
      char v13 = v8;
      uint64_t result = (**a4)(a4, (unsigned int *)&v13, 1);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::readIndices(uint64_t result, unsigned int a2, __int32 *a3, uint64_t (***a4)(void, unsigned __int8 *, uint64_t), int a5)
{
  float v6 = a3;
  if (result > 0xFF)
  {
    if (WORD1(result))
    {
      return physx::readFloatBuffer(a3, a2, a5, (void (***)(void, __int32 *, void))a4);
    }
    else if (a2)
    {
      uint64_t v9 = a2;
      do
      {
        unsigned __int16 v12 = 0;
        uint64_t result = (**a4)(a4, (unsigned __int8 *)&v12, 2);
        if (a5)
        {
          char v10 = v12;
          LOBYTE(v12) = HIBYTE(v12);
          HIBYTE(v12) = v10;
        }
        *v6++ = v12;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    unsigned __int8 v11 = 0;
    if (a2)
    {
      uint64_t v7 = a2;
      do
      {
        uint64_t result = (**a4)(a4, &v11, 1);
        *v6++ = v11;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t physx::Gu::StoreIndices(uint64_t result, unsigned int a2, char *a3, uint64_t (***a4)(void, __int16 *, uint64_t), int a5)
{
  if (result >= 0x100)
  {
    if (a2)
    {
      uint64_t v10 = a2;
      do
      {
        unsigned int v12 = *(unsigned __int16 *)a3;
        a3 += 2;
        unsigned int v11 = v12;
        __int16 v14 = v12;
        if (a5) {
          __int16 v14 = __rev16(v11);
        }
        uint64_t result = (**a4)(a4, &v14, 2);
        --v10;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    uint64_t v7 = a2;
    do
    {
      char v8 = *a3;
      a3 += 2;
      char v13 = v8;
      uint64_t result = (**a4)(a4, (__int16 *)&v13, 1);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::Gu::ReadIndices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, char *, uint64_t), int a5)
{
  float v6 = (_WORD *)a3;
  v12[1] = *MEMORY[0x263EF8340];
  if (a1 > 0xFF)
  {
    return physx::readWordBuffer(a3, a2, a5, (uint64_t (***)(void, uint64_t, void))a4);
  }
  else
  {
    uint64_t v8 = a2;
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (unsigned __int8 *)v12 - ((a2 + 15) & 0x1FFFFFFF0);
    bzero(v9, a2);
    uint64_t result = (**a4)(a4, (char *)v12 - ((v8 + 15) & 0x1FFFFFFF0), a2);
    if (a2)
    {
      do
      {
        __int16 v11 = *v9++;
        *v6++ = v11;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t physx::Gu::computeCapsule_TriangleMeshMTD(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  uint64_t v104 = v2;
  char v111 = v3;
  uint64_t v5 = v4;
  int v6 = LODWORD(v1);
  v135[513] = *(int32x2_t *)MEMORY[0x263EF8340];
  uint64_t v110 = v7;
  uint64_t v8 = *(void *)(*(void *)(v7 + 40) + 80);
  float v9 = (float)(*(float *)(v7 + 4) * *(float *)(v7 + 8)) * *(float *)(v7 + 12);
  unsigned int v132 = 0;
  *(float *)&double v1 = *(float *)&v1 * 1.15;
  int32x2_t v131 = vdup_lane_s32(*(int32x2_t *)&v1, 0);
  float v106 = (float *)v10;
  physx::operator*(v10, (float *)(v7 + 4), (uint64_t)&v123);
  float v121 = 0;
  uint64_t v122 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v121, 0x80u);
  int v12 = 0;
  char v13 = 0;
  float32x4_t v14 = 0uLL;
  long long v120 = 0u;
  float32x4_t v118 = 0u;
  long long v119 = 0u;
  unsigned int v117 = 0xFFFFFFF;
  float32x4_t v16 = *(float32x4_t *)(v5 + 48);
  unint64_t v15 = *(void *)(v5 + 68);
  v16.i32[2] = *(_DWORD *)(v5 + 56);
  v16.i32[3] = *(_DWORD *)(v5 + 64);
  int32x2_t v17 = vdup_n_s32(0x7F7FFFFFu);
  while (1)
  {
    float32x4_t v109 = v14;
    LODWORD(v122) = 0;
    float32x4_t v113 = v16;
    unint64_t v114 = v15;
    int v115 = v6;
    physx::Gu::computeBoxAroundCapsule((uint64_t)&v113, (const Capsule *)v112, v11);
    midPhaseQuery(v110, v106, (uint64_t)v112, (uint64_t)&v121, v18, v19, v20);
    int v29 = v122;
    if (!v122)
    {
      float32x4_t v14 = v109;
      goto LABEL_34;
    }
    char v105 = v13;
    float v30 = v121;
    float32x2_t v116 = (float32x2_t)v17;
    if ((v122 + 31) < 0x20)
    {
      float32x4_t v14 = v109;
      goto LABEL_33;
    }
    int v108 = v12;
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = (v122 + 31) >> 5;
    float v107 = v121;
    unsigned int v34 = v122;
    do
    {
      uint64_t v35 = v34;
      if (v34 >= 0x20uLL) {
        uint64_t v35 = 32;
      }
      if ((v29 - 32 * v31) >= 0x20) {
        unsigned int v36 = 32;
      }
      else {
        unsigned int v36 = v29 - 32 * v31;
      }
      if (v36)
      {
        uint64_t v37 = *(void *)(v110 + 40);
        char v38 = *(unsigned char *)(v37 + 92);
        v21.i64[0] = v124;
        v26.i32[0] = v123;
        v24.i32[0] = v125;
        v22.i64[0] = v126;
        v25.i64[0] = v127;
        v23.i64[0] = v129;
        float v39 = v128;
        float v40 = v130;
        uint64_t v41 = *(void *)(v37 + 40);
        uint64_t v42 = *(void *)(v37 + 48);
        v43.i64[0] = vzip1q_s32(v26, v22).u64[0];
        v44.i64[0] = vzip1q_s32(v24, v21).u64[0];
        v43.i64[1] = __PAIR64__(v43.u32[0], HIDWORD(v124));
        v44.i64[1] = __PAIR64__(v44.u32[0], HIDWORD(v126));
        v45.i64[0] = v129;
        v45.i64[1] = __PAIR64__(v129, LODWORD(v130));
        int32x4_t v46 = vuzp2q_s32(v23, vzip1q_s32(v23, v23));
        v47.i64[0] = v124;
        v47.i64[1] = __PAIR64__(v125, v124);
        v48.i64[0] = v127;
        v48.i64[1] = __PAIR64__(v127, LODWORD(v128));
        int32x4_t v49 = vuzp2q_s32(v25, vzip1q_s32(v25, v25));
        v50.i64[0] = v126;
        v50.i64[1] = __PAIR64__(v126, v123);
        float32x4_t v51 = (float32x4_t)v49;
        v51.f32[1] = v128;
        v51.i32[3] = v49.i32[0];
        float32x4_t v52 = (float32x4_t)v46;
        v52.f32[1] = v130;
        v52.i32[3] = v46.i32[0];
        float v53 = v30;
        __int16 v54 = (float32x4_t *)&v134;
        do
        {
          unsigned int v56 = *v53++;
          uint64_t v55 = v56;
          if ((v38 & 2) != 0)
          {
            float v61 = (unsigned __int16 *)(v42 + 6 * v55);
            unsigned int v58 = *v61;
            unsigned int v59 = v61[1];
            unsigned int v60 = v61[2];
          }
          else
          {
            float v57 = (unsigned int *)(v42 + 12 * v55);
            unsigned int v58 = *v57;
            unsigned int v59 = v57[1];
            unsigned int v60 = v57[2];
          }
          if (v9 >= 0.0) {
            unsigned int v62 = v60;
          }
          else {
            unsigned int v62 = v59;
          }
          if (v9 < 0.0) {
            unsigned int v59 = v60;
          }
          float v63 = (int32x2_t *)(v41 + 12 * v58);
          int32x2_t v64 = *v63;
          v27.i32[0] = v63[1].i32[0];
          BOOL v65 = (__int32 *)(v41 + 12 * v59);
          __int32 v66 = *v65;
          __int32 v67 = v65[1];
          *(int32x2_t *)v68.f32 = v64;
          v68.i32[2] = v64.i32[0];
          v68.i32[3] = *v65;
          v28.i32[0] = v65[2];
          *(int32x2_t *)v69.f32 = vrev64_s32(v64);
          v69.i64[1] = __PAIR64__(v67, v69.u32[0]);
          float32x4_t v70 = vaddq_f32(vmulq_f32(v43, v68), vmulq_f32(v44, v69));
          int32x4_t v71 = (int32x4_t)v27;
          v71.i32[1] = v28.i32[0];
          float32x4_t v72 = (float32x4_t)vzip1q_s32(v71, v71);
          v72.i32[2] = v27.i32[0];
          float32x4_t v27 = vmulq_f32(v48, v72);
          float32x4_t v73 = vaddq_f32(v70, v27);
          float v74 = (float32x2_t *)(v41 + 12 * v62);
          *(float32x2_t *)v27.f32 = *v74;
          v75.i32[0] = v66;
          *(float32x2_t *)&v75.u32[2] = *v74;
          v75.i32[1] = v66;
          float32x4_t v76 = vmulq_f32(v47, v75);
          float32x4_t v77 = (float32x4_t)vrev64q_s32((int32x4_t)v76);
          v77.i64[0] = v76.i64[0];
          v76.i32[0] = v67;
          *(float32x2_t *)&v76.u32[2] = *v74;
          v76.i32[1] = v67;
          v27.f32[0] = v40
                     + (float)(vadd_f32(vmul_lane_f32(*v74, *(float32x2_t *)v21.i8, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v22.i8, *v74), 1)).f32[0]+ (float)(v39 * v74[1].f32[0]));
          v28.i32[1] = v74[1].i32[0];
          v54[-2] = vaddq_f32(v45, v73);
          v54[-1] = vaddq_f32(v52, vaddq_f32(vaddq_f32(v77, vmulq_f32(v50, v76)), vmulq_f32(v51, (float32x4_t)vzip1q_s32(v28, v28))));
          v54->f32[0] = v27.f32[0];
          if (v8) {
            char v78 = *(unsigned char *)(v8 + v55);
          }
          else {
            char v78 = 56;
          }
          v54->i8[4] = v78;
          __int16 v54 = (float32x4_t *)((char *)v54 + 40);
          --v35;
        }
        while (v35);
      }
      v32 |= calculateMTD((float32x4_t *)v5, (float32x2_t *)&v131, v111, (uint64_t)v133, v36, 32 * (int)v31++, v135, &v132, &v118, &v120, &v119, &v117, &v116);
      v34 -= 32;
      v30 += 32;
    }
    while (v31 != v33);
    float32x4_t v14 = v109;
    if ((v32 & 1) == 0) {
      goto LABEL_33;
    }
    unsigned int v79 = v107[v117];
    unsigned int v117 = v79;
    float v80 = vsub_f32(v116, *(float32x2_t *)(v5 + 80)).f32[0];
    if (v80 > 0.0) {
      break;
    }
    float32x4_t v81 = vmulq_n_f32(v118, v80);
    v81.i32[3] = 0;
    float32x4_t v14 = vsubq_f32(v109, v81);
    float32x4_t v82 = vsubq_f32(*(float32x4_t *)v5, v81);
    float32x4_t v83 = vsubq_f32(v82, *(float32x4_t *)v5);
    *(float32x4_t *)uint64_t v5 = v82;
    float32x4_t v16 = vaddq_f32(*(float32x4_t *)(v5 + 48), v83);
    int8x16_t v84 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v5 + 64), v83);
    *(float32x4_t *)(v5 + 48) = v16;
    *(int8x16_t *)(v5 + 64) = v84;
    int v12 = v108 + 1;
    v16.i32[3] = v84.i32[0];
    unint64_t v15 = vextq_s8(v84, v84, 4uLL).u64[0];
    char v13 = 1;
    if (v108 == 3) {
      goto LABEL_34;
    }
  }
  if (!v108)
  {
    uint64_t v97 = v104;
    *(_DWORD *)(v104 + 48) = 0;
    *(void *)&long long v102 = *(void *)((char *)&v120 + 4);
    *(_DWORD *)(v104 + 24) = v120;
    __int32 v103 = v118.i32[2];
    *((void *)&v102 + 1) = v118.i64[0];
    *(_OWORD *)(v104 + 28) = v102;
    *(_DWORD *)(v104 + 44) = v103;
    goto LABEL_40;
  }
  char v105 = 1;
LABEL_33:
  char v13 = v105;
LABEL_34:
  float32x4_t v85 = vmulq_f32(v14, v14);
  v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
  float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
  float32x2_t v87 = vrsqrte_f32(v86);
  int v88 = 4;
  do
  {
    float32x2_t v87 = vmul_f32(v87, vrsqrts_f32(vmul_f32(v87, v87), v86));
    --v88;
  }
  while (v88);
  __asm { FMOV            V3.2S, #1.0 }
  float32x2_t v93 = vmul_f32(v86, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v86), 0), _D3, (int8x8_t)v87));
  float32x2_t v94 = vrecpe_f32(v93);
  int v95 = 4;
  do
  {
    float32x2_t v94 = vmul_f32(v94, vrecps_f32(v93, v94));
    --v95;
  }
  while (v95);
  if (v13)
  {
    int8x16_t v96 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v93), 0), (int8x16_t)vmulq_n_f32(v14, v94.f32[0]));
    uint64_t v97 = v104;
    *(float *)(v104 + 48) = -v93.f32[0];
    int v98 = DWORD2(v120);
    *(void *)(v104 + 24) = v120;
    *(_DWORD *)(v104 + 32) = v98;
    *(void *)(v104 + 36) = v96.i64[0];
    *(_DWORD *)(v104 + 44) = v96.i32[2];
    unsigned int v79 = v117;
LABEL_40:
    *(_DWORD *)(v97 + 16) = v79;
    uint64_t v99 = 1;
    goto LABEL_42;
  }
  uint64_t v99 = 0;
LABEL_42:
  if ((v122 & 0x8000000000000000) == 0 && (v122 & 0x7FFFFFFF00000000) != 0 && v121 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v99;
}

float physx::operator*@<S0>(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v3 = *(float *)a1;
  float v4 = *(float *)(a1 + 4);
  float v5 = *(float *)(a1 + 8);
  float v6 = *(float *)(a1 + 12);
  float v7 = v4 + v4;
  float v8 = v5 + v5;
  float v9 = v4 * (float)(v4 + v4);
  float v10 = v5 * (float)(v5 + v5);
  float v11 = (float)(v3 + v3) * v4;
  float v12 = (float)(v3 + v3) * v5;
  float v13 = (float)(v3 + v3) * v6;
  float v14 = v7 * v5;
  float v15 = v7 * v6;
  float v16 = v8 * v6;
  float v17 = (float)(1.0 - v9) - v10;
  float v18 = v11 + v16;
  float v19 = v12 - v15;
  float v20 = v11 - v16;
  float v21 = 1.0 - (float)(v3 * (float)(v3 + v3));
  float v22 = v21 - v10;
  float v23 = v14 + v13;
  float v24 = v12 + v15;
  float v25 = v14 - v13;
  float v26 = v21 - v9;
  float v27 = a2[4];
  float v28 = a2[5];
  float v29 = a2[6];
  float v31 = a2[2];
  float v30 = a2[3];
  float v32 = v27 + v27;
  float v33 = v28 + v28;
  float v34 = v27 * (float)(v27 + v27);
  float v35 = v28 * (float)(v28 + v28);
  float v36 = (float)(v30 + v30) * v27;
  float v37 = (float)(v30 + v30) * v28;
  float v38 = (float)(v30 + v30) * v29;
  float v39 = v32 * v28;
  float v40 = v32 * v29;
  float v41 = v33 * v29;
  float v42 = (float)(1.0 - v34) - v35;
  float v43 = v36 + v41;
  float v44 = v37 - v40;
  float v45 = v36 - v41;
  float v46 = 1.0 - (float)(v30 * (float)(v30 + v30));
  float v47 = v46 - v35;
  float v48 = v39 + v38;
  float v49 = v37 + v40;
  float v50 = v39 - v38;
  float v51 = v46 - v34;
  float v52 = a2[1];
  float v53 = *a2 * v42;
  float v54 = *a2 * v45;
  float v55 = *a2 * v49;
  float v56 = v43 * v52;
  float v57 = v47 * v52;
  float v58 = v50 * v52;
  float v59 = v44 * v31;
  float v60 = v48 * v31;
  float v61 = v51 * v31;
  float v62 = v42 * v54;
  float v63 = v43 * v57;
  float v64 = (float)(v42 * v53) + (float)(v43 * v56);
  float v65 = (float)(v42 * v55) + (float)(v43 * v58);
  float v66 = v64 + (float)(v44 * v59);
  float v67 = (float)(v62 + v63) + (float)(v44 * v60);
  float v68 = v65 + (float)(v44 * v61);
  float v69 = v45 * v54;
  float v70 = v47 * v57;
  float v71 = (float)(v45 * v53) + (float)(v47 * v56);
  float v72 = (float)(v45 * v55) + (float)(v47 * v58);
  float v73 = v71 + (float)(v48 * v59);
  float v74 = (float)(v69 + v70) + (float)(v48 * v60);
  float v75 = v72 + (float)(v48 * v61);
  float v76 = v49 * v53;
  float v77 = v49 * v54;
  float v78 = v50 * v57;
  float v79 = v76 + (float)(v50 * v56);
  float v80 = (float)(v49 * v55) + (float)(v50 * v58);
  float v81 = v51 * v59;
  float v82 = v51 * v60;
  float v83 = v51 * v61;
  float v84 = v79 + v81;
  float v85 = (float)(v77 + v78) + v82;
  float v86 = v80 + v83;
  *(float *)a3 = (float)(v24 * v68) + (float)((float)(v17 * v66) + (float)(v20 * v67));
  *(float *)(a3 + 4) = (float)(v25 * v68) + (float)((float)(v18 * v66) + (float)(v22 * v67));
  *(float *)(a3 + 8) = (float)(v26 * v68) + (float)((float)(v19 * v66) + (float)(v23 * v67));
  *(float *)(a3 + 12) = (float)(v24 * v75) + (float)((float)(v17 * v73) + (float)(v20 * v74));
  *(float *)(a3 + 16) = (float)(v25 * v75) + (float)((float)(v18 * v73) + (float)(v22 * v74));
  *(float *)(a3 + 2physx::Sq::AABBTree::release(this, 0) = (float)(v26 * v75) + (float)((float)(v19 * v73) + (float)(v23 * v74));
  *(float *)(a3 + 24) = (float)(v24 * v86) + (float)((float)(v17 * v84) + (float)(v20 * v85));
  *(float *)(a3 + 28) = (float)(v25 * v86) + (float)((float)(v18 * v84) + (float)(v22 * v85));
  *(float *)(a3 + 32) = (float)(v26 * v86) + (float)((float)(v19 * v84) + (float)(v23 * v85));
  *(void *)(a3 + 36) = *(void *)(a1 + 16);
  float result = *(float *)(a1 + 24);
  *(float *)(a3 + 44) = result;
  return result;
}

uint64_t midPhaseQuery(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int8x16_t a5, int8x16_t a6, int32x4_t a7)
{
  uint64_t v8 = *(void *)(a1 + 40);
  float v9 = physx::Gu::computeVertexSpaceOBB(v14, a3, a2, (float *)(a1 + 4), a5, a6, a7);
  int v12 = 2;
  float v11 = &unk_26E7289B8;
  uint64_t v13 = a4;
  return ((uint64_t (*)(uint64_t, float32x4_t *, void **, uint64_t, uint64_t, float))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v8 + 8) - 3])(v8, v14, &v11, 1, 1, v9);
}

uint64_t calculateMTD(float32x4_t *a1, float32x2_t *a2, char a3, uint64_t a4, unsigned int a5, int a6, int32x2_t *a7, unsigned int *a8, _OWORD *a9, _OWORD *a10, _OWORD *a11, _DWORD *a12, float32x2_t *a13)
{
  float32x2_t v13 = *a13;
  if (a5)
  {
    uint64_t v21 = 0;
    char v57 = 0;
    uint64_t v22 = a5;
    float v56 = a7 + 12;
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      *a8 = 0;
      uint64_t v28 = a4 + 40 * v21;
      char v61 = 0;
      float32x4_t v58 = 0uLL;
      uint64_t v59 = 0x7F7FFFFF3CA3D70ALL;
      uint64_t v60 = 0x57F7FFFFFLL;
      v29.i64[0] = *(void *)v28;
      v29.i64[1] = *(unsigned int *)(v28 + 8);
      v30.i64[0] = *(void *)(v28 + 12);
      v30.i64[1] = *(unsigned int *)(v28 + 20);
      float32x4_t v62 = v29;
      float32x4_t v63 = v30;
      v31.i64[0] = *(void *)(v28 + 24);
      v31.i64[1] = *(unsigned int *)(v28 + 32);
      float32x4_t v64 = v31;
      int8x16_t v32 = (int8x16_t)vsubq_f32(v30, v29);
      int8x16_t v33 = (int8x16_t)vsubq_f32(v31, v29);
      int8x8_t v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL), *(float32x2_t *)v33.i8);
      *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), *(float32x2_t *)v33.i8), *(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 4uLL);
      v35.i64[1] = v34.u32[0];
      char v36 = *(unsigned char *)(v28 + 36);
      *(float32x2_t *)v33.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), vmul_f32((float32x2_t)v34.u32[0], (float32x2_t)v34.u32[0]));
      float32x2_t v37 = vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8);
      float32x2_t v38 = vrsqrte_f32(v37);
      int v39 = 4;
      do
      {
        float32x2_t v38 = vmul_f32(v38, vrsqrts_f32(vmul_f32(v38, v38), v37));
        --v39;
      }
      while (v39);
      float32x2_t v40 = vmul_f32(v37, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v37), 0), _D9, (int8x8_t)v38));
      float32x2_t v41 = vrecpe_f32(v40);
      int v42 = 4;
      do
      {
        float32x2_t v41 = vmul_f32(v41, vrecps_f32(v40, v41));
        --v42;
      }
      while (v42);
      if ((a3 & 1) != 0
        || (float32x4_t v43 = vmulq_n_f32(v35, v41.f32[0]),
            v43.i32[3] = 0,
            float32x4_t v44 = vmulq_f32(v43, vsubq_f32(*a1, v29)),
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0],
            vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] >= 0.0))
      {
        physx::Gu::PCMCapsuleVsMeshContactGeneration::processTriangle(&v58, v21 + a6, a1, a2, v36, (uint64_t)a7, a8);
        uint64_t v45 = *a8;
        if (v45)
        {
          float32x2_t v46 = (float32x2_t)vdup_lane_s32(a7[5], 1);
          if (v45 == 1)
          {
            uint64_t v47 = 0;
          }
          else
          {
            LODWORD(v47) = 0;
            float v48 = v56;
            for (uint64_t i = 1; i != v45; ++i)
            {
              float32x2_t v50 = (float32x2_t)vdup_lane_s32(v48[1], 1);
              unsigned __int8 v51 = vcgt_f32(v46, v50).u8[0];
              if (v51) {
                unsigned int v52 = -1;
              }
              else {
                unsigned int v52 = 0;
              }
              float32x2_t v46 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v52), (int8x8_t)v50, (int8x8_t)v46);
              if (v51) {
                uint64_t v47 = i;
              }
              else {
                uint64_t v47 = v47;
              }
              v48 += 8;
            }
          }
          if (vcgt_f32(v13, v46).u8[0])
          {
            *a12 = v21 + a6;
            float v53 = &a7[8 * v47];
            long long v54 = *(_OWORD *)v53[4].i8;
            HIDWORD(v54) = 0;
            *a9 = v54;
            *a10 = *(_OWORD *)v53[2].i8;
            *a11 = *(_OWORD *)v53->i8;
            char v57 = 1;
            float32x2_t v13 = v46;
          }
          else
          {
            char v57 = 1;
          }
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  else
  {
    char v57 = 0;
  }
  *a13 = v13;
  return v57 & 1;
}

uint64_t physx::Gu::computeCapsule_HeightFieldMTD(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v86 = v2;
  char v88 = v3;
  char v92 = v4;
  uint64_t v6 = v5;
  float v8 = v7;
  float v10 = v9;
  float v11 = (float32x2_t *)v1;
  v129[513] = *(int32x2_t *)MEMORY[0x263EF8340];
  unsigned int v127 = 0;
  *(float *)v12.i32 = v7 * 1.01;
  int32x2_t v126 = vdup_lane_s32(v12, 0);
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v124, 0x80u);
  char v14 = 0;
  int v15 = 0;
  float32x2_t v122 = v11[1];
  __int32 v123 = v11;
  float v16 = v11[3].f32[0];
  __asm { FMOV            V9.2S, #1.0 }
  int32x2_t v120 = vrev64_s32((int32x2_t)vdiv_f32(_D9, v11[2]));
  float v121 = 1.0 / v16;
  float32x4_t v21 = 0uLL;
  long long v118 = 0u;
  long long v119 = 0u;
  float32x4_t v117 = 0u;
  unsigned int v116 = 0xFFFFFFF;
  float32x2_t v115 = 0;
  float32x4_t v23 = *(float32x4_t *)(v6 + 48);
  v23.i32[2] = *(_DWORD *)(v6 + 56);
  unint64_t v22 = *(void *)(v6 + 68);
  v23.i32[3] = *(_DWORD *)(v6 + 64);
  uint64_t v91 = v6;
  while (1)
  {
    float32x4_t v90 = v21;
    float32x4_t v112 = v23;
    unint64_t v113 = v22;
    float v114 = v8;
    physx::Gu::computeBoxAroundCapsule((uint64_t)&v112, (const Capsule *)&v97, v13);
    if (v105 >= 0.0)
    {
      float v26 = v98 - v100;
      if (v97 < (float)-v101)
      {
        float v31 = v105 + (float)((float)(1.0 - v97) - v101);
        float v27 = 0.5 / sqrtf(v31);
        float v28 = v27 * (float)(v103 + v99);
        float v29 = v27 * (float)(v102 + v104);
        float v30 = v31 * v27;
        goto LABEL_7;
      }
      float v35 = v105 + (float)((float)(v97 + 1.0) + v101);
      float v36 = 0.5 / sqrtf(v35);
      float v28 = v36 * (float)(v102 - v104);
      float v29 = v36 * (float)(v103 - v99);
      float v30 = v36 * v26;
      float v32 = v35 * v36;
    }
    else
    {
      float v24 = v98 + v100;
      if (v97 > v101)
      {
        float v25 = (float)((float)(v97 + 1.0) - v101) - v105;
        float v26 = v102 - v104;
        float v27 = 0.5 / sqrtf(v25);
        float v28 = v25 * v27;
        float v29 = v27 * v24;
        float v30 = v27 * (float)(v103 + v99);
LABEL_7:
        float v32 = v27 * v26;
        goto LABEL_10;
      }
      float v33 = (float)((float)(1.0 - v97) + v101) - v105;
      float v34 = 0.5 / sqrtf(v33);
      float v28 = v34 * v24;
      float v29 = v33 * v34;
      float v30 = v34 * (float)(v102 + v104);
      float v32 = v34 * (float)(v103 - v99);
    }
LABEL_10:
    float v37 = v29 + v29;
    float v38 = v30 + v30;
    float v39 = v29 * (float)(v29 + v29);
    float v40 = v30 * (float)(v30 + v30);
    float v41 = (float)(v28 + v28) * v29;
    float v42 = (float)(v28 + v28) * v30;
    float v43 = (float)(v28 + v28) * v32;
    float v44 = v37 * v30;
    float v45 = v37 * v32;
    float v46 = v38 * v32;
    float v47 = (float)(1.0 - v39) - v40;
    float v48 = v41 + v46;
    float v49 = v41 - v46;
    float v50 = 1.0 - (float)(v28 * (float)(v28 + v28));
    float v51 = v50 - v40;
    float v52 = v44 + v43;
    float v53 = (float)(fabsf(v47 * v109) + fabsf(v49 * v110)) + fabsf((float)(v42 + v45) * v111);
    float v54 = (float)(fabsf(v48 * v109) + fabsf(v51 * v110)) + fabsf((float)(v44 - v43) * v111);
    float v55 = (float)(fabsf((float)(v42 - v45) * v109) + fabsf(v52 * v110)) + fabsf((float)(v50 - v39) * v111);
    v96[0] = v106 - v53;
    v96[1] = v107 - v54;
    v96[2] = v108 - v55;
    v96[3] = v106 + v53;
    v96[4] = v107 + v54;
    v96[5] = v108 + v55;
    v128[0] = &unk_26E728A08;
    v128[1] = &v124;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v120, v10, v96, v88, (uint64_t)v128);
    int v56 = v125;
    if (!v125)
    {
      float32x4_t v21 = v90;
      goto LABEL_31;
    }
    char v87 = v14;
    float32x2_t v115 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    if ((v125 + 31) < 0x20)
    {
      float32x4_t v21 = v90;
      goto LABEL_30;
    }
    int v89 = v15;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    int v59 = 0;
    uint64_t v93 = (v125 + 31) >> 5;
    unsigned int v60 = v125;
    int v94 = v125;
    do
    {
      if (v60 >= 0x20uLL) {
        uint64_t v61 = 32;
      }
      else {
        uint64_t v61 = v60;
      }
      unsigned int v62 = v56 - 32 * v58;
      if (v62 >= 0x20) {
        unsigned int v62 = 32;
      }
      unsigned int v95 = v62;
      if (v62)
      {
        float32x4_t v63 = v128;
        uint64_t v64 = v57;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v120, v10, (uint64_t)v63, 0, 0, *(_DWORD *)(v124 + v64), 1, 1);
          *((unsigned char *)v63 + 36) = 56;
          v63 += 5;
          v64 += 4;
          --v61;
        }
        while (v61);
      }
      v59 |= calculateMTD((float32x4_t *)v91, (float32x2_t *)&v126, v92, (uint64_t)v128, v95, 32 * (int)v58++, v129, &v127, &v117, &v119, &v118, &v116, &v115);
      v60 -= 32;
      v57 += 128;
      int v56 = v94;
    }
    while (v58 != v93);
    float32x4_t v21 = v90;
    if ((v59 & 1) == 0) {
      goto LABEL_30;
    }
    unsigned int v65 = *(_DWORD *)(v124 + 4 * v116);
    unsigned int v116 = v65;
    float v66 = vsub_f32(v115, *(float32x2_t *)(v91 + 80)).f32[0];
    if (v66 > 0.0) {
      break;
    }
    float32x4_t v67 = vmulq_n_f32(v117, v66);
    v67.i32[3] = 0;
    float32x4_t v21 = vsubq_f32(v90, v67);
    float32x4_t v68 = vsubq_f32(*(float32x4_t *)v91, v67);
    float32x4_t v69 = vsubq_f32(v68, *(float32x4_t *)v91);
    *(float32x4_t *)uint64_t v91 = v68;
    float32x4_t v23 = vaddq_f32(*(float32x4_t *)(v91 + 48), v69);
    int8x16_t v70 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v91 + 64), v69);
    *(float32x4_t *)(v91 + 48) = v23;
    *(int8x16_t *)(v91 + 64) = v70;
    int v15 = v89 + 1;
    v23.i32[3] = v70.i32[0];
    unint64_t v22 = vextq_s8(v70, v70, 4uLL).u64[0];
    char v14 = 1;
    if (v89 == 3) {
      goto LABEL_31;
    }
  }
  if (!v89)
  {
    uint64_t v79 = v86;
    *(_DWORD *)(v86 + 48) = 0;
    *(void *)&long long v84 = *(void *)((char *)&v119 + 4);
    *(_DWORD *)(v86 + 24) = v119;
    __int32 v85 = v117.i32[2];
    *((void *)&v84 + 1) = v117.i64[0];
    *(_OWORD *)(v86 + 28) = v84;
    *(_DWORD *)(v86 + 44) = v85;
    goto LABEL_37;
  }
  char v87 = 1;
LABEL_30:
  char v14 = v87;
LABEL_31:
  float32x4_t v71 = vmulq_f32(v21, v21);
  v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
  float32x2_t v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
  float32x2_t v73 = vrsqrte_f32(v72);
  int v74 = 4;
  do
  {
    float32x2_t v73 = vmul_f32(v73, vrsqrts_f32(vmul_f32(v73, v73), v72));
    --v74;
  }
  while (v74);
  float32x2_t v75 = vmul_f32(v72, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v72), 0), (int8x8_t)_D9, (int8x8_t)v73));
  float32x2_t v76 = vrecpe_f32(v75);
  int v77 = 4;
  do
  {
    float32x2_t v76 = vmul_f32(v76, vrecps_f32(v75, v76));
    --v77;
  }
  while (v77);
  if (v14)
  {
    int8x16_t v78 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v75), 0), (int8x16_t)vmulq_n_f32(v21, v76.f32[0]));
    uint64_t v79 = v86;
    *(float *)(v86 + 48) = -v75.f32[0];
    int v80 = DWORD2(v119);
    *(void *)(v86 + 24) = v119;
    *(_DWORD *)(v86 + 32) = v80;
    *(void *)(v86 + 36) = v78.i64[0];
    *(_DWORD *)(v86 + 44) = v78.i32[2];
    unsigned int v65 = v116;
LABEL_37:
    *(_DWORD *)(v79 + 16) = v65;
    uint64_t v81 = 1;
    goto LABEL_39;
  }
  uint64_t v81 = 0;
LABEL_39:
  if ((v125 & 0x8000000000000000) == 0 && (v125 & 0x7FFFFFFF00000000) != 0 && v124 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v81;
}

uint64_t physx::Gu::computeBox_TriangleMeshMTD(uint64_t a1)
{
  *(double *)&int32x2_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v94 = v2;
  char v105 = v3;
  uint64_t v5 = v4;
  float v7 = v6;
  int32x2_t v101 = v1;
  uint64_t v9 = v8;
  float v11 = (float *)v10;
  v165[513] = *(int32x2_t *)MEMORY[0x263EF8340];
  uint64_t v104 = *(void *)(v10 + 40);
  uint64_t v12 = *(void *)(v104 + 80);
  unsigned int v154 = 0;
  uint64_t v153 = 0;
  uint64_t v152 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v152, 0x80u);
  long long v150 = 0u;
  int8x16_t v151 = 0u;
  float32x4_t v149 = 0u;
  unsigned int v148 = 0xFFFFFFF;
  float32x4_t v13 = (float32x4_t)v7[1];
  long long v143 = *v7;
  float32x4_t v144 = v13;
  int8x16_t v145 = (int8x16_t)v7[2];
  v13.i64[0] = v5[1].i64[0];
  v13.i64[1] = v5[1].u32[2];
  float32x4_t v103 = v13;
  v14.i64[0] = *((void *)v7 + 6);
  int32x4_t v15 = v14;
  v15.i32[2] = *((_DWORD *)v7 + 14);
  int32x4_t v98 = *v5;
  float32x2_t v16 = (float32x2_t)vdup_laneq_s32(v15, 2);
  v15.i32[3] = 0;
  float32x2_t v17 = vpmin_f32(v16, *(float32x2_t *)v14.i8);
  float32x2_t v18 = vpmin_f32(v17, v17);
  int32x2_t v142 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32(v101, 0), vmul_f32(v18, (float32x2_t)vdup_n_s32(0x3E19999Au)));
  float32x2_t v146 = vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(v142, 0));
  float v147 = *(float *)&v15.i32[2] + *(float *)v142.i32;
  int v139 = 3;
  char v140 = 0;
  v135[1] = 0;
  v135[0] = 0;
  int32x4_t v141 = v15;
  float v136 = 0.15 * v18.f32[0];
  float v137 = 0.05 * v18.f32[0];
  float v138 = 0.05 * v18.f32[0];
  int8x16_t v19 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
  float32x4_t v102 = (float32x4_t)vextq_s8(v145, v19, 4uLL);
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v123, (uint64_t)(v7 + 3), *(double *)v102.i64, (int32x4_t)v19);
  uint64_t v126 = 0;
  uint64_t v128 = 0x600000008;
  int v127 = 0;
  int v129 = 0;
  float v130 = &v125;
  int32x2_t v131 = &v124;
  unsigned int v132 = &physx::Gu::gPCMBoxPolygonData;
  long long v133 = 0u;
  long long v134 = 0u;
  float32x4_t v100 = 0u;
  v122[0] = xmmword_23435FD50;
  v122[1] = xmmword_23435FD60;
  v122[2] = xmmword_23435FD80;
  float v97 = (float *)v9;
  physx::operator*(v9, v11 + 1, (uint64_t)&v110);
  char v21 = 0;
  int v22 = 0;
  int32x4_t v23 = v98;
  int32x4_t v108 = v98;
  float32x4_t v109 = v103;
  int32x2_t v24 = vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v25 = 0uLL;
  float32x4_t v96 = 0u;
  while (1)
  {
    LODWORD(v153) = 0;
    midPhaseQuery((uint64_t)v11, v97, (uint64_t)&v143, (uint64_t)&v152, (int8x16_t)v25, v20, v23);
    int v26 = v153;
    if (!v153) {
      goto LABEL_32;
    }
    char v95 = v21;
    float32x4_t v109 = v102;
    float v160 = &v108;
    float v161 = v122;
    float v162 = v122;
    char v163 = 1;
    v157.i64[0] = (uint64_t)&unk_26E7286C8;
    float v164 = v135;
    uint64_t v159 = 0;
    uint64_t v158 = 0;
    v27.i32[3] = 0;
    v27.f32[0] = (float)((float)(*(float *)&v143 * v110) + (float)(*((float *)&v143 + 1) * v111))
               + (float)(*((float *)&v143 + 2) * v112);
    v27.f32[1] = (float)((float)(*((float *)&v143 + 3) * v110) + (float)(v144.f32[0] * v111))
               + (float)(v144.f32[1] * v112);
    v27.f32[2] = (float)((float)(v144.f32[2] * v110) + (float)(v144.f32[3] * v111)) + (float)(*(float *)v145.i32 * v112);
    v28.i32[3] = 0;
    v28.f32[0] = (float)((float)(*(float *)&v143 * v113) + (float)(*((float *)&v143 + 1) * v114))
               + (float)(*((float *)&v143 + 2) * v115);
    v28.f32[1] = (float)((float)(*((float *)&v143 + 3) * v113) + (float)(v144.f32[0] * v114))
               + (float)(v144.f32[1] * v115);
    v28.f32[2] = (float)((float)(v144.f32[2] * v113) + (float)(v144.f32[3] * v114)) + (float)(*(float *)v145.i32 * v115);
    v29.i32[3] = 0;
    v29.f32[0] = (float)((float)(*(float *)&v143 * v116) + (float)(*((float *)&v143 + 1) * v117))
               + (float)(*((float *)&v143 + 2) * v118);
    v29.f32[1] = (float)((float)(*((float *)&v143 + 3) * v116) + (float)(v144.f32[0] * v117))
               + (float)(v144.f32[1] * v118);
    v29.f32[2] = (float)((float)(v144.f32[2] * v116) + (float)(v144.f32[3] * v117)) + (float)(*(float *)v145.i32 * v118);
    v30.i32[3] = 0;
    v30.f32[0] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * *((float *)&v143 + 1))
                               - (float)(*(float *)&v143 * *(float *)&v145.i32[1]))
                       - (float)(*((float *)&v143 + 2) * *(float *)&v145.i32[3]))
               + (float)((float)((float)(*(float *)&v143 * v119) + (float)(*((float *)&v143 + 1) * v120))
                       + (float)(*((float *)&v143 + 2) * v121));
    v30.f32[1] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * v144.f32[0])
                               - (float)(*((float *)&v143 + 3) * *(float *)&v145.i32[1]))
                       - (float)(v144.f32[1] * *(float *)&v145.i32[3]))
               + (float)((float)((float)(*((float *)&v143 + 3) * v119) + (float)(v144.f32[0] * v120))
                       + (float)(v144.f32[1] * v121));
    v30.f32[2] = (float)((float)((float)-(float)(*(float *)&v145.i32[2] * v144.f32[3])
                               - (float)(v144.f32[2] * *(float *)&v145.i32[1]))
                       - (float)(*(float *)v145.i32 * *(float *)&v145.i32[3]))
               + (float)((float)((float)(v144.f32[2] * v119) + (float)(v144.f32[3] * v120))
                       + (float)(*(float *)v145.i32 * v121));
    v106[0] = v27;
    v106[1] = v28;
    void v106[2] = v29;
    v106[3] = v30;
    float32x2_t v107 = (float32x2_t)v24;
    if ((v153 + 31) < 0x20) {
      goto LABEL_31;
    }
    int v99 = v22;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = 0;
    uint64_t v34 = (v153 + 31) >> 5;
    unsigned int v35 = v153;
    do
    {
      uint64_t v36 = v35;
      if (v35 >= 0x20uLL) {
        uint64_t v36 = 32;
      }
      if ((v26 - 32 * v32) >= 0x20) {
        unsigned int v37 = 32;
      }
      else {
        unsigned int v37 = v26 - 32 * v32;
      }
      if (v37)
      {
        float v38 = (float)(v11[1] * v11[2]) * v11[3];
        char v39 = *(unsigned char *)(v104 + 92);
        uint64_t v40 = *(void *)(v104 + 40);
        uint64_t v41 = *(void *)(v104 + 48);
        float v42 = (unsigned int *)(v152 + v31);
        float v43 = &v156;
        do
        {
          unsigned int v45 = *v42++;
          uint64_t v44 = v45;
          if ((v39 & 2) != 0)
          {
            float v50 = (unsigned __int16 *)(v41 + 6 * v44);
            unsigned int v47 = *v50;
            unsigned int v48 = v50[1];
            unsigned int v49 = v50[2];
          }
          else
          {
            float v46 = (unsigned int *)(v41 + 12 * v44);
            unsigned int v47 = *v46;
            unsigned int v48 = v46[1];
            unsigned int v49 = v46[2];
          }
          if (v38 >= 0.0) {
            unsigned int v51 = v49;
          }
          else {
            unsigned int v51 = v48;
          }
          if (v38 < 0.0) {
            unsigned int v48 = v49;
          }
          uint64_t v52 = v40 + 12 * v47;
          *(void *)(v43 - 5) = *(void *)v52;
          *(v43 - 3) = *(_DWORD *)(v52 + 8);
          uint64_t v53 = v40 + 12 * v48;
          *((void *)v43 - 1) = *(void *)v53;
          *float v43 = *(_DWORD *)(v53 + 8);
          uint64_t v54 = v40 + 12 * v51;
          *(void *)(v43 + 1) = *(void *)v54;
          _DWORD v43[3] = *(_DWORD *)(v54 + 8);
          if (v12) {
            char v55 = *(unsigned char *)(v12 + v44);
          }
          else {
            char v55 = 56;
          }
          *((unsigned char *)v43 + 16) = v55;
          v43 += 10;
          --v36;
        }
        while (v36);
      }
      v33 |= calculateMTD((uint64_t)&v126, &v157, (uint64_t)&v108, v106, v105, (float32x2_t *)&v142, (uint64_t)v155, v37, 32 * (int)v32++, v165, &v154, &v149, &v151, &v150, &v148, &v107);
      v35 -= 32;
      v31 += 128;
    }
    while (v32 != v34);
    if ((v33 & 1) == 0) {
      goto LABEL_31;
    }
    unsigned int v56 = *(_DWORD *)(v152 + 4 * v148);
    unsigned int v148 = v56;
    float32x4_t v57 = (float32x4_t)v108;
    v57.i32[3] = 0;
    float32x2_t v58 = (float32x2_t)vdupq_laneq_s32(v108, 3).u64[0];
    LODWORD(v59) = vmla_f32((float32x2_t)0xBF000000BF000000, v58, v58).u32[0];
    float32x4_t v60 = vmulq_n_f32(v149, v59);
    v60.i32[3] = 0;
    float32x2_t v61 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
    float32x2_t v62 = (float32x2_t)vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
    float32x2_t v63 = (float32x2_t)vext_s8(*(int8x8_t *)v149.f32, (int8x8_t)v62, 4uLL);
    int8x8_t v64 = (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v149.f32), *(float32x2_t *)v108.i8, v62);
    float32x2_t v65 = (float32x2_t)vext_s8(*(int8x8_t *)v108.i8, (int8x8_t)v61, 4uLL);
    int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v108.i8, v63), v65, *(float32x2_t *)v149.f32);
    *(int8x8_t *)v67.f32 = vext_s8(v66, v64, 4uLL);
    v67.i64[1] = v66.u32[0];
    float32x4_t v68 = vmlaq_laneq_f32(v60, v67, (float32x4_t)v108, 3);
    v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
    float32x4_t v69 = vmulq_f32(v57, v149);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    float32x4_t v70 = vmulq_n_f32((float32x4_t)v151, v59);
    v70.i32[3] = 0;
    float32x4_t v71 = vmlaq_n_f32(v68, v57, vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).f32[0]);
    v69.i64[0] = vextq_s8(v151, v151, 8uLL).u64[0];
    *(float32x2_t *)v67.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v108.i8, (float32x2_t)vext_s8(*(int8x8_t *)v151.i8, *(int8x8_t *)v69.f32, 4uLL)), v65, *(float32x2_t *)v151.i8);
    *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v67.f32, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v151.i8), *(float32x2_t *)v108.i8, *(float32x2_t *)v69.f32), 4uLL);
    v69.i64[1] = v67.u32[0];
    float32x4_t v72 = vmlaq_laneq_f32(v70, v69, (float32x4_t)v108, 3);
    v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    float32x4_t v73 = vaddq_f32(v71, v71);
    float32x4_t v74 = vmulq_f32(v57, (float32x4_t)v151);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    float32x4_t v75 = vmlaq_n_f32(v72, v57, vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).f32[0]);
    v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
    v74.i64[0] = 0x4000000040000000;
    v74.i64[1] = 0x4000000040000000;
    int8x16_t v76 = (int8x16_t)vmlaq_f32(v109, v74, v75);
    v57.i64[0] = v76.i64[0];
    v57.i64[1] = vextq_s8(v76, v76, 8uLL).u32[0];
    float32x4_t v96 = v57;
    if (v107.f32[0] > 0.0) {
      break;
    }
    float32x4_t v25 = vmulq_n_f32(v73, v107.f32[0]);
    v25.i32[3] = 0;
    int32x4_t v23 = (int32x4_t)vsubq_f32(v100, v25);
    int8x16_t v20 = (int8x16_t)vsubq_f32(v102, v25);
    *(uint64_t *)((char *)v145.i64 + 4) = v20.i64[0];
    float32x4_t v100 = (float32x4_t)v23;
    float32x4_t v102 = (float32x4_t)v20;
    v145.i32[3] = v20.i32[2];
    int v22 = v99 + 1;
    char v21 = 1;
    if (v99 == 3) {
      goto LABEL_32;
    }
  }
  if (!v99)
  {
    v76.i32[3] = v73.i32[0];
    uint64_t v89 = v94;
    *(_DWORD *)(v94 + 48) = 0;
    *(int8x16_t *)(v94 + 24) = v76;
    *(void *)(v94 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL).u64[0];
    goto LABEL_38;
  }
  char v95 = 1;
LABEL_31:
  char v21 = v95;
LABEL_32:
  float32x4_t v77 = vmulq_f32(v100, v100);
  v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
  float32x2_t v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32);
  float32x2_t v79 = vrsqrte_f32(v78);
  int v80 = 4;
  do
  {
    float32x2_t v79 = vmul_f32(v79, vrsqrts_f32(vmul_f32(v79, v79), v78));
    --v80;
  }
  while (v80);
  __asm { FMOV            V3.2S, #1.0 }
  float32x2_t v85 = vmul_f32(v78, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v78), 0), _D3, (int8x8_t)v79));
  float32x2_t v86 = vrecpe_f32(v85);
  int v87 = 4;
  do
  {
    float32x2_t v86 = vmul_f32(v86, vrecps_f32(v85, v86));
    --v87;
  }
  while (v87);
  if (v21)
  {
    int8x16_t v88 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v85), 0), (int8x16_t)vmulq_n_f32(v100, v86.f32[0]));
    uint64_t v89 = v94;
    *(float *)(v94 + 48) = -v85.f32[0];
    float32x4_t v90 = v96;
    v90.i32[3] = v88.i32[0];
    *(float32x4_t *)(v94 + 24) = v90;
    *(int8x8_t *)(v94 + 4physx::Sq::AABBTree::release(this, 0) = vext_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), 4uLL);
    unsigned int v56 = v148;
LABEL_38:
    *(_DWORD *)(v89 + 16) = v56;
    uint64_t v91 = 1;
    goto LABEL_40;
  }
  uint64_t v91 = 0;
LABEL_40:
  if ((v153 & 0x8000000000000000) == 0 && (v153 & 0x7FFFFFFF00000000) != 0 && v152 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v91;
}

uint64_t calculateMTD(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, char a5, float32x2_t *a6, uint64_t a7, unsigned int a8, int a9, int32x2_t *a10, unsigned int *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, _DWORD *a15, float32x2_t *a16)
{
  float32x2_t v16 = *a16;
  if (a8)
  {
    uint64_t v20 = 0;
    char v21 = 0;
    uint64_t v22 = a8;
    do
    {
      *a11 = 0;
      physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(a1, a2, (float *)(a7 + 40 * v20), v20 + a9, *(unsigned __int8 *)(a7 + 40 * v20 + 36), a6, a5, a3, a4, (uint64_t)a10, a11);
      uint64_t v23 = *a11;
      if (v23)
      {
        float32x2_t v24 = (float32x2_t)vdup_lane_s32(a10[5], 1);
        if (v23 == 1)
        {
          uint64_t v25 = 0;
        }
        else
        {
          LODWORD(v25) = 0;
          int v26 = a10 + 12;
          for (uint64_t i = 1; i != v23; ++i)
          {
            float32x2_t v28 = (float32x2_t)vdup_lane_s32(v26[1], 1);
            unsigned __int8 v29 = vcgt_f32(v24, v28).u8[0];
            if (v29) {
              unsigned int v30 = -1;
            }
            else {
              unsigned int v30 = 0;
            }
            float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v30), (int8x8_t)v28, (int8x8_t)v24);
            if (v29) {
              uint64_t v25 = i;
            }
            else {
              uint64_t v25 = v25;
            }
            v26 += 8;
          }
        }
        if (vcgt_f32(v16, v24).u8[0])
        {
          *a15 = v20 + a9;
          uint64_t v31 = &a10[8 * v25];
          long long v32 = *(_OWORD *)v31[4].i8;
          HIDWORD(v32) = 0;
          *a12 = v32;
          *a13 = *(_OWORD *)v31[2].i8;
          *a14 = *(_OWORD *)v31->i8;
          char v21 = 1;
          float32x2_t v16 = v24;
        }
        else
        {
          char v21 = 1;
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    char v21 = 0;
  }
  *a16 = v16;
  return v21 & 1;
}

uint64_t physx::Gu::computeBox_HeightFieldMTD(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v179 = v2;
  char v202 = v3;
  char v211 = v4;
  int32x2_t v215 = v5;
  float v7 = v6;
  uint64_t v9 = v8;
  float v11 = v10;
  uint64_t v12 = (float32x2_t *)v1;
  v264[513] = *(int32x2_t *)MEMORY[0x263EF8340];
  unsigned int v254 = 0;
  uint64_t v253 = 0;
  uint64_t v252 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v252, 0x80u);
  float32x2_t v250 = v12[1];
  float v251 = v12;
  float v13 = v12[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int8x8_t v180 = (int8x8_t)_D2;
  int32x2_t v248 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v12[2]));
  float v249 = 1.0 / v13;
  v18.i32[3] = 0;
  long long v246 = 0u;
  int8x16_t v247 = 0u;
  float32x4_t v245 = 0u;
  unsigned int v244 = 0xFFFFFFF;
  float v19 = *(float *)v9;
  float v204 = *(float *)(v9 + 4);
  float v20 = *(float *)(v9 + 12);
  float v203 = *(float *)(v9 + 8);
  float v21 = *(float *)(v9 + 16);
  float v185 = *(float *)(v9 + 20);
  float v23 = *(float *)(v9 + 24);
  float v22 = *(float *)(v9 + 28);
  float v24 = *(float *)(v9 + 32);
  float v212 = *(float *)(v9 + 36);
  float v25 = *(float *)(v9 + 48);
  v26.i64[0] = v7[1].i64[0];
  v26.i64[1] = v7[1].u32[2];
  float32x4_t v199 = (float32x4_t)v26;
  v26.i32[0] = *(_DWORD *)(v9 + 52);
  v27.i32[3] = 0;
  *(float *)v27.i32 = v25;
  *(uint64_t *)((char *)v27.i64 + 4) = v26.u32[0];
  unint64_t v28 = *(void *)(v9 + 40);
  int32x4_t v29 = v27;
  v29.i32[2] = *(_DWORD *)(v9 + 56);
  int32x4_t v197 = *v7;
  *(float32x2_t *)v27.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v29, 2), *(float32x2_t *)v27.i8);
  *(float32x2_t *)v27.i8 = vpmin_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8);
  float32x2_t v243 = vadd_f32((float32x2_t)vdup_lane_s32(v215, 0), vmul_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_n_s32(0x3E19999Au)));
  float v201 = v25 + v243.f32[0];
  float v205 = *(float *)v26.i32 + v243.f32[0];
  float v216 = *(float *)&v29.i32[2] + v243.f32[0];
  int v240 = 3;
  char v241 = 0;
  v236[1] = 0;
  v236[0] = 0;
  int32x4_t v242 = v29;
  *(float *)v26.i32 = 0.05 * *(float *)v27.i32;
  float v237 = 0.15 * *(float *)v27.i32;
  float v238 = 0.05 * *(float *)v27.i32;
  float v239 = 0.05 * *(float *)v27.i32;
  v18.f32[0] = v212;
  *(uint64_t *)((char *)v18.i64 + 4) = v28;
  unint64_t v207 = v28;
  float32x4_t v210 = v18;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v224, v9 + 48, *(double *)v18.i64, v26);
  char v30 = 0;
  int v31 = 0;
  float v181 = v19;
  float v32 = (float)((float)(v19 + 1.0) + v21) + v24;
  float v33 = 0.5 / sqrtf(v32);
  float v34 = (float)((float)(1.0 - v19) - v21) + v24;
  float v35 = 0.5 / sqrtf(v34);
  float v36 = v24;
  float v37 = (float)((float)(1.0 - v19) + v21) - v24;
  float v38 = 0.5 / sqrtf(v37);
  float v39 = (float)((float)(v19 + 1.0) - v21) - v24;
  float v40 = 0.5 / sqrtf(v39);
  float v41 = *v11;
  float v42 = v11[1];
  float v43 = v42 + v42;
  float v44 = v11[2];
  float v45 = v11[3];
  float v46 = v44 + v44;
  float v47 = v42 * (float)(v42 + v42);
  float v48 = v44 * (float)(v44 + v44);
  float v49 = (float)(v41 + v41) * v42;
  float v50 = (float)(v41 + v41) * v44;
  float v51 = (float)(v41 + v41) * v45;
  float v52 = v43 * v44;
  float v53 = v43 * v45;
  float v54 = v46 * v45;
  float v55 = (float)(1.0 - v47) - v48;
  float v56 = v49 + v54;
  float v57 = v50 - v53;
  float v58 = v49 - v54;
  float v59 = 1.0 - (float)(v41 * (float)(v41 + v41));
  float v60 = v59 - v48;
  float v61 = v52 + v51;
  float v62 = v50 + v53;
  float v63 = v52 - v51;
  float v64 = v59 - v47;
  float v183 = (float)(v23 - v203) * v33;
  float v184 = (float)(v185 - v22) * v33;
  float v186 = (float)(v204 - v20) * v33;
  float v194 = v32 * v33;
  uint64_t v229 = 0x600000008;
  v223[0] = xmmword_23435FD50;
  v223[1] = xmmword_23435FD60;
  float v65 = (float)(v203 + v23) * v35;
  float v66 = v34 * v35;
  float v67 = (float)(v204 - v20) * v35;
  float v68 = (float)(v185 + v22) * v35;
  v223[2] = xmmword_23435FD80;
  float v69 = v37 * v38;
  float v70 = (float)(v185 + v22) * v38;
  float v182 = (float)(v23 - v203) * v38;
  float v71 = (float)(v204 + v20) * v38;
  float v72 = v39 * v40;
  float v73 = (float)(v204 + v20) * v40;
  float v74 = (float)(v203 + v23) * v40;
  int32x4_t v221 = v197;
  float32x4_t v222 = v199;
  float v75 = (float)(v185 - v22) * v40;
  float v76 = v19;
  *(float *)&unsigned int v77 = (float)(v203 * v57) + (float)((float)(v19 * v55) + (float)(v204 * v56));
  *(float *)&unsigned int v78 = (float)(v185 * v57) + (float)((float)(v20 * v55) + (float)(v21 * v56));
  *(float *)&unsigned int v79 = (float)(v36 * v57) + (float)((float)(v23 * v55) + (float)(v22 * v56));
  *(float *)&unsigned int v80 = (float)(v203 * v61) + (float)((float)(v19 * v58) + (float)(v204 * v60));
  *(float *)&unsigned int v81 = (float)(v185 * v61) + (float)((float)(v20 * v58) + (float)(v21 * v60));
  *(float *)&unsigned int v82 = (float)(v36 * v61) + (float)((float)(v23 * v58) + (float)(v22 * v60));
  float v83 = v19 * v62;
  float v84 = v20 * v62;
  float v85 = (float)(v23 * v62) + (float)(v22 * v63);
  *(float *)&unsigned int v86 = (float)(v203 * v64) + (float)(v83 + (float)(v204 * v63));
  *(float *)&unsigned int v87 = (float)(v185 * v64) + (float)(v84 + (float)(v21 * v63));
  float v89 = v11[4];
  float v88 = v11[5];
  float v90 = (float)(v19 * v89) + (float)(v204 * v88);
  float v196 = v22;
  float v198 = v20;
  float v91 = (float)(v20 * v89) + (float)(v21 * v88);
  float v92 = (float)(v23 * v89) + (float)(v22 * v88);
  float v93 = v11[6];
  float v192 = v91 + (float)(v185 * v93);
  float v193 = v90 + (float)(v203 * v93);
  v94.i64[0] = __PAIR64__(v78, v77);
  v94.i64[1] = v79;
  v95.i64[0] = __PAIR64__(v81, v80);
  float v96 = v36 * v93;
  float v97 = v76;
  float v189 = v92 + v96;
  v95.i64[1] = v82;
  float32x4_t v190 = v95;
  float32x4_t v191 = v94;
  v98.i64[0] = __PAIR64__(v87, v86);
  v98.i64[1] = COERCE_UNSIGNED_INT((float)(v36 * v64) + v85);
  float32x4_t v188 = v98;
  float v100 = v183;
  float v99 = v184;
  if (v76 < (float)-v21)
  {
    float v99 = v65;
    float v100 = v68;
  }
  float v101 = v186;
  if (v181 < (float)-v21) {
    float v101 = v66;
  }
  float v102 = v194;
  if (v181 < (float)-v21) {
    float v102 = v67;
  }
  if (v181 <= v21) {
    float v103 = v71;
  }
  else {
    float v103 = v72;
  }
  if (v76 <= v21) {
    float v104 = v69;
  }
  else {
    float v104 = v73;
  }
  if (v76 <= v21) {
    float v105 = v70;
  }
  else {
    float v105 = v74;
  }
  float v106 = v182;
  if (v181 > v21) {
    float v106 = v75;
  }
  float v195 = v36;
  if (v36 < 0.0)
  {
    float v99 = v103;
    float v100 = v104;
    float v101 = v105;
    float v102 = v106;
  }
  float v107 = v100 + v100;
  float v108 = v101 + v101;
  float v109 = v100 * (float)(v100 + v100);
  float v110 = v101 * (float)(v101 + v101);
  float v111 = v100 * (float)(v99 + v99);
  float v112 = v101 * (float)(v99 + v99);
  float v113 = v102 * (float)(v99 + v99);
  float v114 = v101 * v107;
  float v115 = v102 * v107;
  float v116 = v102 * v108;
  float v117 = v111 + v116;
  float v118 = v111 - v116;
  float v119 = v112 - v115;
  float v120 = v112 + v115;
  float v121 = v114 + v113;
  float v122 = v114 - v113;
  float v123 = 1.0 - (float)(v99 * (float)(v99 + v99));
  float v124 = fabsf(v120 * v216);
  float v125 = v212;
  float v126 = v124 + (float)(fabsf((float)((float)(1.0 - v109) - v110) * v201) + fabsf(v118 * v205));
  float v127 = fabsf(v117 * v201);
  unint64_t v128 = v207;
  float v129 = fabsf(v122 * v216) + (float)(v127 + fabsf((float)(v123 - v110) * v205));
  uint64_t v227 = 0;
  int v228 = 0;
  int v230 = 0;
  float v231 = &v226;
  float v232 = &v225;
  float v233 = &physx::Gu::gPCMBoxPolygonData;
  long long v234 = 0u;
  long long v235 = 0u;
  float32x4_t v200 = 0u;
  float v130 = fabsf((float)(v123 - v109) * v216) + (float)(fabsf(v119 * v201) + fabsf(v121 * v205));
  float32x4_t v131 = 0uLL;
  while (1)
  {
    float32x4_t v206 = v131;
    float v208 = *(float *)&v128;
    LODWORD(v253) = 0;
    float v132 = *((float *)&v128 + 1);
    float v213 = v125;
    v219[0] = v125 - v126;
    v219[1] = *(float *)&v128 - v129;
    v219[2] = *((float *)&v128 + 1) - v130;
    v219[3] = v126 + v125;
    v219[4] = v129 + *(float *)&v128;
    v219[5] = v130 + *((float *)&v128 + 1);
    v255[0] = &unk_26E728A08;
    v255[1] = &v252;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v248, v11, v219, v202, (uint64_t)v255);
    int v133 = v253;
    if (!v253) {
      goto LABEL_41;
    }
    char v187 = v30;
    float32x4_t v222 = v210;
    float v259 = &v221;
    float v260 = v223;
    float v261 = v223;
    char v262 = 1;
    v256.i64[0] = (uint64_t)&unk_26E7286C8;
    float v263 = v236;
    uint64_t v258 = 0;
    uint64_t v257 = 0;
    v134.i32[3] = 0;
    v134.f32[0] = v193 + (float)((float)((float)-(float)(v208 * v204) - (float)(v97 * v213)) - (float)(v203 * v132));
    v134.f32[1] = v192 + (float)((float)((float)-(float)(v208 * v21) - (float)(v198 * v213)) - (float)(v185 * v132));
    v134.f32[2] = v189 + (float)((float)((float)-(float)(v208 * v196) - (float)(v23 * v213)) - (float)(v195 * v132));
    v218[0] = v191;
    v218[1] = v190;
    v218[2] = v188;
    v218[3] = v134;
    int32x2_t v220 = vdup_n_s32(0x7F7FFFFFu);
    if ((v253 + 31) < 0x20) {
      goto LABEL_40;
    }
    int v209 = v31;
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    int v137 = 0;
    uint64_t v214 = (v253 + 31) >> 5;
    unsigned int v138 = v253;
    int v217 = v253;
    do
    {
      if (v138 >= 0x20uLL) {
        uint64_t v139 = 32;
      }
      else {
        uint64_t v139 = v138;
      }
      if ((v133 - 32 * v136) >= 0x20) {
        unsigned int v140 = 32;
      }
      else {
        unsigned int v140 = v133 - 32 * v136;
      }
      if (v140)
      {
        int32x4_t v141 = v255;
        uint64_t v142 = v135;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v248, v11, (uint64_t)v141, 0, 0, *(_DWORD *)(v252 + v142), 0, 0);
          *((unsigned char *)v141 + 36) = 56;
          v141 += 5;
          v142 += 4;
          --v139;
        }
        while (v139);
      }
      v137 |= calculateMTD((uint64_t)&v227, &v256, (uint64_t)&v221, v218, v211, &v243, (uint64_t)v255, v140, 32 * (int)v136++, v264, &v254, &v245, &v247, &v246, &v244, (float32x2_t *)&v220);
      v138 -= 32;
      v135 += 128;
      int v133 = v217;
    }
    while (v136 != v214);
    if ((v137 & 1) == 0) {
      goto LABEL_40;
    }
    unsigned int v143 = *(_DWORD *)(v252 + 4 * v244);
    unsigned int v244 = v143;
    float32x4_t v144 = (float32x4_t)v221;
    v144.i32[3] = 0;
    float32x2_t v145 = (float32x2_t)vdupq_laneq_s32(v221, 3).u64[0];
    LODWORD(v146) = vmla_f32((float32x2_t)0xBF000000BF000000, v145, v145).u32[0];
    float32x4_t v147 = vmulq_n_f32(v245, v146);
    v147.i32[3] = 0;
    float32x2_t v148 = (float32x2_t)vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
    float32x2_t v149 = (float32x2_t)vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u64[0];
    float32x2_t v150 = (float32x2_t)vext_s8(*(int8x8_t *)v245.f32, (int8x8_t)v149, 4uLL);
    int8x8_t v151 = (int8x8_t)vmls_f32(vmul_f32(v148, *(float32x2_t *)v245.f32), *(float32x2_t *)v221.i8, v149);
    float32x2_t v152 = (float32x2_t)vext_s8(*(int8x8_t *)v221.i8, (int8x8_t)v148, 4uLL);
    int8x8_t v153 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v221.i8, v150), v152, *(float32x2_t *)v245.f32);
    *(int8x8_t *)v154.f32 = vext_s8(v153, v151, 4uLL);
    v154.i64[1] = v153.u32[0];
    float32x4_t v155 = vmlaq_laneq_f32(v147, v154, (float32x4_t)v221, 3);
    v155.i64[1] = vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u32[0];
    float32x4_t v156 = vmulq_f32(v144, v245);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    float32x4_t v157 = vmulq_n_f32((float32x4_t)v247, v146);
    v157.i32[3] = 0;
    float32x4_t v158 = vmlaq_n_f32(v155, v144, vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32).f32[0]);
    v156.i64[0] = vextq_s8(v247, v247, 8uLL).u64[0];
    *(float32x2_t *)v154.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v221.i8, (float32x2_t)vext_s8(*(int8x8_t *)v247.i8, *(int8x8_t *)v156.f32, 4uLL)), v152, *(float32x2_t *)v247.i8);
    *(int8x8_t *)v156.f32 = vext_s8(*(int8x8_t *)v154.f32, (int8x8_t)vmls_f32(vmul_f32(v148, *(float32x2_t *)v247.i8), *(float32x2_t *)v221.i8, *(float32x2_t *)v156.f32), 4uLL);
    v156.i64[1] = v154.u32[0];
    float32x4_t v159 = vmlaq_laneq_f32(v157, v156, (float32x4_t)v221, 3);
    v159.i64[1] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u32[0];
    float32x4_t v160 = vaddq_f32(v158, v158);
    float32x4_t v161 = vmulq_f32(v144, (float32x4_t)v247);
    v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
    float32x4_t v162 = vmlaq_n_f32(v159, v144, vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32).f32[0]);
    v162.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u32[0];
    v161.i64[0] = 0x4000000040000000;
    v161.i64[1] = 0x4000000040000000;
    int8x16_t v163 = (int8x16_t)vmlaq_f32(v222, v161, v162);
    v144.i64[0] = v163.i64[0];
    v144.i64[1] = vextq_s8(v163, v163, 8uLL).u32[0];
    float32x4_t v200 = v144;
    if (*(float *)v220.i32 > 0.0) {
      break;
    }
    float32x4_t v164 = vmulq_n_f32(v160, *(float *)v220.i32);
    v164.i32[3] = 0;
    float32x4_t v131 = vsubq_f32(v206, v164);
    int8x16_t v165 = (int8x16_t)vsubq_f32(v210, v164);
    int v31 = v209 + 1;
    unint64_t v128 = vextq_s8(v165, v165, 4uLL).u64[0];
    char v30 = 1;
    float32x4_t v210 = (float32x4_t)v165;
    float v125 = *(float *)v165.i32;
    if (v209 == 3) {
      goto LABEL_42;
    }
  }
  if (!v209)
  {
    v163.i32[3] = v160.i32[0];
    uint64_t v174 = v179;
    *(_DWORD *)(v179 + 48) = 0;
    *(int8x16_t *)(v179 + 24) = v163;
    *(void *)(v179 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8((int8x16_t)v160, (int8x16_t)v160, 4uLL).u64[0];
    goto LABEL_48;
  }
  char v187 = 1;
LABEL_40:
  char v30 = v187;
LABEL_41:
  float32x4_t v131 = v206;
LABEL_42:
  float32x4_t v166 = vmulq_f32(v131, v131);
  v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
  float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
  float32x2_t v168 = vrsqrte_f32(v167);
  int v169 = 4;
  do
  {
    float32x2_t v168 = vmul_f32(v168, vrsqrts_f32(vmul_f32(v168, v168), v167));
    --v169;
  }
  while (v169);
  float32x2_t v170 = vmul_f32(v167, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v167), 0), v180, (int8x8_t)v168));
  float32x2_t v171 = vrecpe_f32(v170);
  int v172 = 4;
  do
  {
    float32x2_t v171 = vmul_f32(v171, vrecps_f32(v170, v171));
    --v172;
  }
  while (v172);
  if (v30)
  {
    int8x16_t v173 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v170), 0), (int8x16_t)vmulq_n_f32(v131, v171.f32[0]));
    uint64_t v174 = v179;
    *(float *)(v179 + 48) = -v170.f32[0];
    float32x4_t v175 = v200;
    v175.i32[3] = v173.i32[0];
    *(float32x4_t *)(v179 + 24) = v175;
    *(int8x8_t *)(v179 + 4physx::Sq::AABBTree::release(this, 0) = vext_s8(*(int8x8_t *)v173.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL), 4uLL);
    unsigned int v143 = v244;
LABEL_48:
    *(_DWORD *)(v174 + 16) = v143;
    uint64_t v176 = 1;
    goto LABEL_50;
  }
  uint64_t v176 = 0;
LABEL_50:
  if ((v253 & 0x8000000000000000) == 0 && (v253 & 0x7FFFFFFF00000000) != 0 && v252 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v176;
}

uint64_t physx::Gu::computeConvex_TriangleMeshMTD(uint64_t a1)
{
  *(double *)v2.i64 = MEMORY[0x270FA5388](a1);
  uint64_t v213 = v3;
  char v229 = v4;
  uint64_t v6 = v5;
  float v218 = v7;
  uint64_t v9 = (float *)v8;
  BOOL v10 = 0;
  v290[512] = *(int32x2_t *)MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(v1 + 32);
  uint64_t v228 = *(void *)(v8 + 40);
  uint64_t v12 = *(void *)(v228 + 80);
  unsigned int v266 = 0;
  uint64_t v221 = v1;
  uint64_t v222 = v11;
  uint64_t v13 = v11 + 32;
  float v14 = 1.0;
  if (*(float *)(v1 + 4) == 1.0 && *(float *)(v1 + 8) == 1.0) {
    BOOL v10 = *(float *)(v1 + 12) == 1.0;
  }
  float32x4_t v16 = (float32x4_t)xmmword_23435FD50;
  long long v260 = xmmword_23435FD50;
  long long v261 = xmmword_23435FD50;
  float32x4_t v17 = (float32x4_t)xmmword_23435FD60;
  long long v262 = xmmword_234376D80;
  long long v263 = xmmword_23435FD60;
  float v18 = 0.0;
  float v19 = 0.0;
  uint64_t v264 = 0x3F80000000000000;
  char v265 = 0;
  float v20 = 0.0;
  float v21 = 1.0;
  float v22 = 0.0;
  float v23 = 0.0;
  float v24 = 0.0;
  float v25 = 1.0;
  if (!v10)
  {
    int8x16_t v227 = v2;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v260, (float *)(v1 + 4), (float *)(v1 + 16));
    float32x4_t v17 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v16 = (float32x4_t)xmmword_23435FD50;
    int8x16_t v2 = v227;
    float v24 = *((float *)&v260 + 1);
    float v25 = *(float *)&v260;
    float v22 = *((float *)&v260 + 3);
    float v23 = *((float *)&v260 + 2);
    float v20 = *((float *)&v261 + 1);
    float v21 = *(float *)&v261;
    float v18 = *((float *)&v261 + 3);
    float v19 = *((float *)&v261 + 2);
    float v14 = *(float *)&v262;
  }
  float v26 = *(float *)(v222 + 56);
  float v27 = *(float *)(v222 + 60);
  float v28 = (float)(v23 * v26) + (float)(v20 * v27);
  float v29 = *(float *)(v222 + 64);
  float v30 = v28 + (float)(v14 * v29);
  *(float *)&unint64_t v31 = (float)((float)(v25 * v26) + (float)(v22 * v27)) + (float)(v19 * v29);
  *((float *)&v31 + 1) = (float)((float)(v24 * v26) + (float)(v21 * v27)) + (float)(v18 * v29);
  float32x4_t v219 = (float32x4_t)v31;
  v32.i64[0] = v6[1].i64[0];
  v32.i64[1] = v6[1].u32[2];
  float32x4_t v33 = *(float32x4_t *)(v221 + 4);
  float32x4_t v34 = v33;
  v34.i32[3] = 0;
  float32x4_t v258 = *v6;
  float32x4_t v259 = v32;
  float32x4_t v225 = v32;
  float32x4_t v35 = *(float32x4_t *)(v221 + 16);
  char v279 = 0;
  uint64_t v286 = v13;
  uint64_t v288 = *(void *)(v222 + 72) + 20 * *(unsigned __int8 *)(v222 + 71);
  char v289 = *(unsigned char *)(v222 + 70);
  v36.i64[0] = *(void *)(v222 + 92);
  v36.i64[1] = *(unsigned int *)(v222 + 100);
  int32x4_t v37 = (int32x4_t)vmulq_f32(v34, v36);
  int v278 = 0;
  float32x4_t v275 = 0u;
  *(float32x2_t *)v37.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v37, 2), *(float32x2_t *)v37.i8);
  float32x2_t v38 = vpmin_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8);
  float32x2_t v276 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v38.f32[0]);
  float v277 = 0.025 * v38.f32[0];
  __asm { FMOV            V8.2S, #1.0 }
  if (v10)
  {
    float32x4_t v280 = v16;
    float32x4_t v281 = v17;
    long long v282 = xmmword_23435FD80;
    float32x4_t v283 = v16;
    float32x4_t v284 = v17;
    long long v285 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v43 = vrecpeq_f32(v34);
    int v44 = 4;
    do
    {
      float32x4_t v43 = vmulq_f32(v43, vrecpsq_f32(v43, v34));
      --v44;
    }
    while (v44);
    *(int32x2_t *)v45.f32 = vdup_lane_s32(*(int32x2_t *)v33.f32, 0);
    v45.i64[1] = v45.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v45, v34)), *(int8x8_t *)v2.i8).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
      float32x2_t v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
      float32x2_t v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 3);
      float32x4_t v55 = vaddq_f32(v35, v35);
      float32x2_t v56 = vmul_lane_f32(v52, *(float32x2_t *)v55.f32, 1);
      float32x2_t v57 = vmul_laneq_f32(v53, v55, 2);
      float32x2_t v58 = vmul_n_f32(v52, v55.f32[0]);
      float32x2_t v59 = vmul_n_f32(v53, v55.f32[0]);
      float32x2_t v60 = vmul_n_f32(v54, v55.f32[0]);
      float32x2_t v61 = vmul_lane_f32(v53, *(float32x2_t *)v55.f32, 1);
      float32x2_t v62 = vmul_lane_f32(v54, *(float32x2_t *)v55.f32, 1);
      float32x2_t v63 = vmul_laneq_f32(v54, v55, 2);
      float32x2_t v64 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v55.f32), 0));
      float32x2_t v65 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v56), v57), (int8x8_t)vadd_f32(v58, v63), 4uLL);
      int8x8_t v66 = (int8x8_t)vsub_f32(v58, v63);
      *(float32x2_t *)v67.f32 = v65;
      v67.i64[1] = vsub_f32(v59, v62).u32[0];
      int32x2_t v68 = (int32x2_t)vext_s8(v66, (int8x8_t)vsub_f32(v64, v57), 4uLL);
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v65, 0), (int8x8_t)v68, 4uLL);
      *(int32x2_t *)v69.f32 = v68;
      v69.i64[1] = vadd_f32(v61, v60).u32[0];
      v64.i32[0] = vsub_f32(v64, v56).u32[0];
      *(int8x8_t *)v70.f32 = vext_s8((int8x8_t)vadd_f32(v59, v62), (int8x8_t)vsub_f32(v61, v60), 4uLL);
      *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)v65, (int8x8_t)vdup_lane_s32(v68, 1), 4uLL);
      v70.i64[1] = v64.u32[0];
      v55.i64[1] = vdup_lane_s32(*(int32x2_t *)v70.f32, 0).u32[0];
      v71.i64[1] = vdup_lane_s32(*(int32x2_t *)v70.f32, 1).u32[0];
      *(int8x8_t *)v72.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v67.u32[2], 0), *(int8x8_t *)&v69.u32[2], 4uLL);
      v72.i64[1] = vdup_lane_s32((int32x2_t)v64.u32[0], 0).u32[0];
      float32x4_t v73 = vmulq_n_f32(v55, v33.f32[0]);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_lane_f32(v71, *(float32x2_t *)v33.f32, 1);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_laneq_f32(v72, v33, 2);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_n_f32(v73, v65.f32[0]);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_lane_f32(v74, v65, 1);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_laneq_f32(v75, v67, 2);
      v78.i32[3] = 0;
      float32x4_t v46 = vaddq_f32(v78, vaddq_f32(v76, v77));
      float32x4_t v79 = vmulq_n_f32(v73, v69.f32[0]);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_lane_f32(v74, *(float32x2_t *)v69.f32, 1);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_laneq_f32(v75, v69, 2);
      v81.i32[3] = 0;
      float32x4_t v47 = vaddq_f32(v81, vaddq_f32(v79, v80));
      float32x4_t v82 = vmulq_n_f32(v73, v70.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v74, *(float32x2_t *)v70.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_laneq_f32(v75, v70, 2);
      v84.i32[3] = 0;
      float32x4_t v48 = vaddq_f32(v84, vaddq_f32(v82, v83));
      float32x4_t v280 = v46;
      float32x4_t v281 = v47;
      float32x4_t v85 = vmulq_n_f32(v55, v43.f32[0]);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_lane_f32(v71, *(float32x2_t *)v43.f32, 1);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_laneq_f32(v72, v43, 2);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_n_f32(v85, v65.f32[0]);
      v88.i32[3] = 0;
      float32x4_t v89 = vmulq_lane_f32(v86, v65, 1);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_laneq_f32(v87, v67, 2);
      v90.i32[3] = 0;
      float32x4_t v91 = vaddq_f32(v90, vaddq_f32(v88, v89));
      float32x4_t v92 = vmulq_n_f32(v85, v69.f32[0]);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_lane_f32(v86, *(float32x2_t *)v69.f32, 1);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_laneq_f32(v87, v69, 2);
      v94.i32[3] = 0;
      float32x4_t v95 = vmulq_n_f32(v85, v70.f32[0]);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_lane_f32(v86, *(float32x2_t *)v70.f32, 1);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_laneq_f32(v87, v70, 2);
      v97.i32[3] = 0;
      long long v282 = (__int128)v48;
      float32x4_t v283 = v91;
      long long v285 = (__int128)v87;
      float32x4_t v284 = vaddq_f32(v94, vaddq_f32(v92, v93));
      v91.i64[0] = *(void *)(v222 + 92);
      v91.i64[1] = *(unsigned int *)(v222 + 100);
      float32x4_t v51 = vaddq_f32(v97, vaddq_f32(v95, v96));
      int32x4_t v98 = (int32x4_t)vmulq_f32(v34, v91);
      *(float32x2_t *)v98.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v98, 2), *(float32x2_t *)v98.i8);
      float32x2_t v38 = vpmin_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8);
    }
    else
    {
      v43.i32[3] = 0;
      float32x4_t v46 = vmulq_f32(v34, v16);
      float32x4_t v47 = vmulq_f32(v34, v17);
      float32x4_t v48 = vmulq_f32(v34, (float32x4_t)xmmword_23435FD80);
      float32x4_t v280 = v46;
      float32x4_t v281 = v47;
      float32x4_t v49 = vmulq_f32(v43, v16);
      float32x4_t v50 = vmulq_f32(v43, v17);
      float32x4_t v51 = vmulq_f32(v43, (float32x4_t)xmmword_23435FD80);
      long long v282 = (__int128)v48;
      float32x4_t v283 = v49;
      float32x4_t v284 = v50;
    }
    float32x4_t v99 = vmulq_f32(v46, (float32x4_t)0);
    v99.i32[3] = 0;
    float32x4_t v100 = vmulq_f32(v47, (float32x4_t)0);
    v100.i32[3] = 0;
    float32x4_t v101 = vmulq_f32(v48, (float32x4_t)0);
    v101.i32[3] = 0;
    long long v285 = (__int128)v51;
    float32x4_t v275 = vaddq_f32(v101, vaddq_f32(v100, v99));
  }
  _Q1 = v219;
  _Q1.f32[2] = v30;
  float32x4_t v220 = _Q1;
  uint64_t v287 = *(void *)(v222 + 80);
  __asm { FMOV            V1.2S, #0.25 }
  *(float32x2_t *)v2.i8 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 0), vmul_f32(v38, *(float32x2_t *)_Q1.f32));
  int8x16_t v217 = v2;
  float32x2_t v257 = *(float32x2_t *)v2.i8;
  uint64_t v256 = 0;
  uint64_t v255 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v255, 0x80u);
  long long v253 = 0u;
  int8x16_t v254 = 0u;
  float32x4_t v216 = 0u;
  float32x4_t v252 = 0u;
  unsigned int v251 = 0xFFFFFFF;
  physx::operator*((uint64_t)v218, v9 + 1, (uint64_t)&v239);
  physx::Gu::getPCMConvexData(&v275, v10, (uint64_t)v238);
  char v103 = 0;
  float32x2_t v237 = 0;
  float32x4_t v234 = *v6;
  float32x2_t v104 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v217.i8, 0);
  char v105 = 1;
  int32x2_t v106 = vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v107 = 0uLL;
  float32x4_t v108 = v225;
  BOOL v214 = v10;
  while (1)
  {
    char v109 = v105;
    LODWORD(v256) = 0;
    uint64_t v235 = v108.i64[0];
    float v236 = v108.f32[2];
    float32x4_t v259 = v108;
    int v270 = &v258;
    int8x16_t v271 = &v280;
    float32x2_t v272 = &v283;
    float32x4_t v224 = v107;
    float32x4_t v226 = v108;
    if (v10)
    {
      char v110 = 1;
      float v111 = &unk_26E728728;
    }
    else
    {
      char v110 = 0;
      float v111 = &unk_26E728778;
    }
    char v273 = v110;
    v269[0].i64[0] = (uint64_t)v111;
    int v274 = &v275;
    v269[1] = v220;
    physx::Gu::computeOBBAroundConvex(v231, (float *)v221, (float *)v222, v234.f32);
    *(float32x2_t *)v112.i8 = vadd_f32(v104, v232);
    float32x2_t v232 = *(float32x2_t *)v112.i8;
    float v233 = *(float *)v217.i32 + v233;
    *(float *)v112.i32 = v233;
    midPhaseQuery((uint64_t)v9, v218, (uint64_t)v231, (uint64_t)&v255, v112, v217, v113);
    int v114 = v256;
    if (!v256)
    {
      float32x4_t v107 = v224;
      goto LABEL_53;
    }
    char v215 = v103;
    float v115 = (float)(v234.f32[3] * v234.f32[3]) + -0.5;
    float v116 = (float)((float)((float)(*((float *)&v235 + 1) * -2.0) * v234.f32[1])
                 + (float)(v234.f32[0] * (float)(*(float *)&v235 * -2.0)))
         + (float)(v234.f32[2] * (float)(v236 * -2.0));
    float v117 = (float)((float)((float)(*(float *)&v235 * -2.0) * v115)
                 - (float)((float)((float)(v234.f32[1] * (float)(v236 * -2.0))
                                 - (float)(v234.f32[2] * (float)(*((float *)&v235 + 1) * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[0] * v116);
    float v118 = (float)((float)((float)(*((float *)&v235 + 1) * -2.0) * v115)
                 - (float)((float)((float)(v234.f32[2] * (float)(*(float *)&v235 * -2.0))
                                 - (float)(v234.f32[0] * (float)(v236 * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[1] * v116);
    float v119 = (float)((float)((float)(v236 * -2.0) * v115)
                 - (float)((float)((float)(v234.f32[0] * (float)(*((float *)&v235 + 1) * -2.0))
                                 - (float)(v234.f32[1] * (float)(*(float *)&v235 * -2.0)))
                         * v234.f32[3]))
         + (float)(v234.f32[2] * v116);
    float v120 = (float)-v234.f32[0] - v234.f32[0];
    float v121 = (float)-v234.f32[1] - v234.f32[1];
    float v122 = (float)-v234.f32[2] - v234.f32[2];
    float v123 = -(float)(v234.f32[1] * v121);
    float v124 = -(float)(v234.f32[2] * v122);
    float v125 = v234.f32[3] * v120;
    float v126 = -(float)(v234.f32[2] * v121);
    float v127 = v234.f32[3] * v121;
    float v128 = (float)(1.0 - v123) - v124;
    float v129 = (float)(v234.f32[3] * v122) - (float)(v234.f32[1] * v120);
    float v130 = (float)-(float)(v234.f32[2] * v120) - (float)(v234.f32[3] * v121);
    float v131 = (float)-(float)(v234.f32[1] * v120) - (float)(v234.f32[3] * v122);
    float v132 = (float)(v234.f32[0] * v120) + 1.0;
    float v133 = v132 - v124;
    float v134 = (float)(v234.f32[3] * v120) + v126;
    float v135 = v127 - (float)(v234.f32[2] * v120);
    float v136 = v126 - v125;
    float v137 = v132 - v123;
    *(float *)&unsigned int v138 = (float)(v135 * v241) + (float)((float)(v239 * v128) + (float)(v240 * v131));
    *(float *)&unsigned int v139 = (float)((float)(v128 * v242) + (float)(v131 * v243)) + (float)(v135 * v244);
    *(float *)&unsigned int v140 = (float)((float)(v129 * v242) + (float)(v133 * v243)) + (float)(v136 * v244);
    *(float *)&unsigned int v141 = (float)((float)(v130 * v242) + (float)(v134 * v243)) + (float)(v137 * v244);
    *(float *)&unsigned int v142 = (float)((float)(v128 * v245) + (float)(v131 * v246)) + (float)(v135 * v247);
    *(float *)&unsigned int v143 = (float)((float)(v129 * v245) + (float)(v133 * v246)) + (float)(v136 * v247);
    *(float *)&unsigned int v144 = (float)((float)(v130 * v245) + (float)(v134 * v246)) + (float)(v137 * v247);
    float v145 = (float)((float)(v128 * v248) + (float)(v131 * v249)) + (float)(v135 * v250);
    float v146 = (float)((float)(v129 * v248) + (float)(v133 * v249)) + (float)(v136 * v250);
    v147.i64[0] = __PAIR64__((float)(v136 * v241) + (float)((float)(v239 * v129) + (float)(v240 * v133)), v138);
    float v148 = (float)((float)(v130 * v248) + (float)(v134 * v249)) + (float)(v137 * v250);
    v147.i64[1] = COERCE_UNSIGNED_INT((float)((float)(v239 * v130) + (float)(v134 * v240)) + (float)(v137 * v241));
    v149.i64[0] = __PAIR64__(v140, v139);
    v149.i64[1] = v141;
    *(float *)&unsigned int v150 = v117 + v145;
    v151.i64[0] = __PAIR64__(v143, v142);
    v151.i64[1] = v144;
    v152.i64[0] = __PAIR64__(v118 + v146, v150);
    v152.i64[1] = COERCE_UNSIGNED_INT(v119 + v148);
    v230[0] = v147;
    v230[1] = v149;
    v230[2] = v151;
    v230[3] = v152;
    float32x2_t v237 = (float32x2_t)v106;
    if ((v256 + 31) < 0x20) {
      goto LABEL_52;
    }
    char v223 = v109;
    uint64_t v153 = 0;
    uint64_t v154 = 0;
    int v155 = 0;
    uint64_t v156 = (v256 + 31) >> 5;
    unsigned int v157 = v256;
    do
    {
      uint64_t v158 = v157;
      if (v157 >= 0x20uLL) {
        uint64_t v158 = 32;
      }
      if ((v114 - 32 * v154) >= 0x20) {
        unsigned int v159 = 32;
      }
      else {
        unsigned int v159 = v114 - 32 * v154;
      }
      if (v159)
      {
        float v160 = (float)(v9[1] * v9[2]) * v9[3];
        char v161 = *(unsigned char *)(v228 + 92);
        uint64_t v162 = *(void *)(v228 + 40);
        uint64_t v163 = *(void *)(v228 + 48);
        float32x4_t v164 = (unsigned int *)(v255 + v153);
        int8x16_t v165 = &v268;
        do
        {
          unsigned int v167 = *v164++;
          uint64_t v166 = v167;
          if ((v161 & 2) != 0)
          {
            int v172 = (unsigned __int16 *)(v163 + 6 * v166);
            unsigned int v169 = *v172;
            unsigned int v170 = v172[1];
            unsigned int v171 = v172[2];
          }
          else
          {
            float32x2_t v168 = (unsigned int *)(v163 + 12 * v166);
            unsigned int v169 = *v168;
            unsigned int v170 = v168[1];
            unsigned int v171 = v168[2];
          }
          if (v160 >= 0.0) {
            unsigned int v173 = v171;
          }
          else {
            unsigned int v173 = v170;
          }
          if (v160 < 0.0) {
            unsigned int v170 = v171;
          }
          uint64_t v174 = v162 + 12 * v169;
          *(void *)(v165 - 5) = *(void *)v174;
          *(v165 - 3) = *(_DWORD *)(v174 + 8);
          uint64_t v175 = v162 + 12 * v170;
          *((void *)v165 - 1) = *(void *)v175;
          *int8x16_t v165 = *(_DWORD *)(v175 + 8);
          uint64_t v176 = v162 + 12 * v173;
          *(void *)(v165 + 1) = *(void *)v176;
          v165[3] = *(_DWORD *)(v176 + 8);
          if (v12) {
            char v177 = *(unsigned char *)(v12 + v166);
          }
          else {
            char v177 = 56;
          }
          *((unsigned char *)v165 + 16) = v177;
          v165 += 10;
          --v158;
        }
        while (v158);
      }
      v155 |= calculateMTD((uint64_t)v238, v269, (uint64_t)&v258, v230, v229, &v257, (uint64_t)v267, v159, 32 * (int)v154++, v290, &v266, &v252, &v254, &v253, &v251, &v237);
      v157 -= 32;
      v153 += 128;
    }
    while (v154 != v156);
    if ((v155 & 1) == 0) {
      goto LABEL_52;
    }
    unsigned int v178 = *(_DWORD *)(v255 + 4 * v251);
    unsigned int v251 = v178;
    float32x4_t v179 = v258;
    v179.i32[3] = 0;
    float32x2_t v180 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v258, 3).u64[0];
    LODWORD(v181) = vmla_f32((float32x2_t)0xBF000000BF000000, v180, v180).u32[0];
    float32x4_t v182 = vmulq_n_f32(v252, v181);
    v182.i32[3] = 0;
    float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
    float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v252, (int8x16_t)v252, 8uLL).u64[0];
    float32x2_t v185 = (float32x2_t)vext_s8(*(int8x8_t *)v252.f32, (int8x8_t)v184, 4uLL);
    int8x8_t v186 = (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v252.f32), *(float32x2_t *)v258.f32, v184);
    float32x2_t v187 = (float32x2_t)vext_s8(*(int8x8_t *)v258.f32, (int8x8_t)v183, 4uLL);
    int8x8_t v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v258.f32, v185), v187, *(float32x2_t *)v252.f32);
    *(int8x8_t *)v189.f32 = vext_s8(v188, v186, 4uLL);
    v189.i64[1] = v188.u32[0];
    float32x4_t v190 = vmlaq_laneq_f32(v182, v189, v258, 3);
    v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
    float32x4_t v191 = vmulq_f32(v179, v252);
    v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
    float32x4_t v192 = vmulq_n_f32((float32x4_t)v254, v181);
    v192.i32[3] = 0;
    float32x4_t v193 = vmlaq_n_f32(v190, v179, vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32).f32[0]);
    v191.i64[0] = vextq_s8(v254, v254, 8uLL).u64[0];
    *(float32x2_t *)v189.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v258.f32, (float32x2_t)vext_s8(*(int8x8_t *)v254.i8, *(int8x8_t *)v191.f32, 4uLL)), v187, *(float32x2_t *)v254.i8);
    *(int8x8_t *)v191.f32 = vext_s8(*(int8x8_t *)v189.f32, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v254.i8), *(float32x2_t *)v258.f32, *(float32x2_t *)v191.f32), 4uLL);
    v191.i64[1] = v189.u32[0];
    float32x4_t v194 = vmlaq_laneq_f32(v192, v191, v258, 3);
    v194.i64[1] = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u32[0];
    float32x4_t v195 = vaddq_f32(v193, v193);
    float32x4_t v196 = vmulq_f32(v179, (float32x4_t)v254);
    v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
    float32x4_t v197 = vmlaq_n_f32(v194, v179, vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32).f32[0]);
    v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
    v196.i64[0] = 0x4000000040000000;
    v196.i64[1] = 0x4000000040000000;
    int8x16_t v198 = (int8x16_t)vmlaq_f32(v259, v196, v197);
    v179.i64[0] = v198.i64[0];
    v179.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
    float32x4_t v216 = v179;
    if (v237.f32[0] > 0.0) {
      break;
    }
    char v105 = 0;
    float32x4_t v199 = vmulq_n_f32(v195, v237.f32[0]);
    v199.i32[3] = 0;
    float32x4_t v107 = vsubq_f32(v224, v199);
    float32x4_t v108 = vsubq_f32(v226, v199);
    char v103 = 1;
    BOOL v10 = v214;
    if ((v223 & 1) == 0) {
      goto LABEL_53;
    }
  }
  if (v223)
  {
    v198.i32[3] = v195.i32[0];
    uint64_t v200 = v213;
    *(_DWORD *)(v213 + 48) = 0;
    *(int8x16_t *)(v213 + 24) = v198;
    *(void *)(v213 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 4uLL).u64[0];
LABEL_59:
    *(_DWORD *)(v200 + 16) = v178;
    uint64_t v210 = 1;
    goto LABEL_61;
  }
  char v215 = 1;
LABEL_52:
  float32x4_t v107 = v224;
  char v103 = v215;
LABEL_53:
  float32x4_t v201 = vmulq_f32(v107, v107);
  v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
  float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
  float32x2_t v203 = vrsqrte_f32(v202);
  int v204 = 4;
  do
  {
    float32x2_t v203 = vmul_f32(v203, vrsqrts_f32(vmul_f32(v203, v203), v202));
    --v204;
  }
  while (v204);
  float32x2_t v205 = vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v202), 0), (int8x8_t)_D8, (int8x8_t)v203));
  float32x2_t v206 = vrecpe_f32(v205);
  int v207 = 4;
  do
  {
    float32x2_t v206 = vmul_f32(v206, vrecps_f32(v205, v206));
    --v207;
  }
  while (v207);
  if (v103)
  {
    int8x16_t v208 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v205), 0), (int8x16_t)vmulq_n_f32(v107, v206.f32[0]));
    uint64_t v200 = v213;
    *(float *)(v213 + 48) = -v205.f32[0];
    float32x4_t v209 = v216;
    v209.i32[3] = v208.i32[0];
    *(float32x4_t *)(v213 + 24) = v209;
    *(int8x8_t *)(v213 + 4physx::Sq::AABBTree::release(this, 0) = vext_s8(*(int8x8_t *)v208.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), 4uLL);
    unsigned int v178 = v251;
    goto LABEL_59;
  }
  uint64_t v210 = 0;
LABEL_61:
  if ((v256 & 0x8000000000000000) == 0 && (v256 & 0x7FFFFFFF00000000) != 0 && v255 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v210;
}

uint64_t physx::Gu::computeConvex_HeightFieldMTD(uint64_t a1)
{
  uint64_t v1 = (float32x2_t *)MEMORY[0x270FA5388](a1);
  uint64_t v214 = v4;
  char v223 = v5;
  char v233 = v6;
  uint64_t v8 = v7;
  BOOL v10 = v9;
  BOOL v228 = 0;
  v299[512] = *(int32x2_t *)MEMORY[0x263EF8340];
  float32x2_t v277 = v1[1];
  int v278 = v1;
  float v11 = v1[3].f32[0];
  __asm { FMOV            V8.2S, #1.0 }
  int32x2_t v275 = vrev64_s32((int32x2_t)vdiv_f32(_D8, v1[2]));
  float v16 = 1.0;
  float v276 = 1.0 / v11;
  unsigned int v274 = 0;
  uint64_t v226 = v2;
  uint64_t v227 = *(void *)(v2 + 32);
  if (*(float *)(v2 + 4) == 1.0 && *(float *)(v2 + 8) == 1.0) {
    BOOL v228 = *(float *)(v2 + 12) == 1.0;
  }
  float32x4_t v17 = (float32x4_t)xmmword_23435FD50;
  long long v268 = xmmword_23435FD50;
  long long v269 = xmmword_23435FD50;
  float32x4_t v18 = (float32x4_t)xmmword_23435FD60;
  long long v270 = xmmword_234376D80;
  long long v271 = xmmword_23435FD60;
  float v19 = 0.0;
  float v20 = 0.0;
  uint64_t v272 = 0x3F80000000000000;
  char v273 = 0;
  float v21 = 0.0;
  float v22 = 1.0;
  float v23 = 0.0;
  float v24 = 0.0;
  float v25 = 0.0;
  float v26 = 1.0;
  if (!v228)
  {
    int32x2_t v235 = v3;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v268, (float *)(v2 + 4), (float *)(v2 + 16));
    float32x4_t v18 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v17 = (float32x4_t)xmmword_23435FD50;
    int32x2_t v3 = v235;
    float v25 = *((float *)&v268 + 1);
    float v26 = *(float *)&v268;
    float v23 = *((float *)&v268 + 3);
    float v24 = *((float *)&v268 + 2);
    float v21 = *((float *)&v269 + 1);
    float v22 = *(float *)&v269;
    float v19 = *((float *)&v269 + 3);
    float v20 = *((float *)&v269 + 2);
    float v16 = *(float *)&v270;
  }
  float v27 = *(float *)(v227 + 56);
  float v28 = *(float *)(v227 + 60);
  float v29 = (float)(v24 * v27) + (float)(v21 * v28);
  float v30 = *(float *)(v227 + 64);
  float v31 = v29 + (float)(v16 * v30);
  *(float *)&unint64_t v32 = (float)((float)(v26 * v27) + (float)(v23 * v28)) + (float)(v20 * v30);
  *((float *)&v32 + 1) = (float)((float)(v25 * v27) + (float)(v22 * v28)) + (float)(v19 * v30);
  float32x4_t v224 = (float32x4_t)v32;
  v33.i64[0] = v8[1].i64[0];
  v33.i64[1] = v8[1].u32[2];
  float32x4_t v266 = *v8;
  float32x4_t v267 = v33;
  float32x4_t v231 = v33;
  float32x4_t v34 = *(float32x4_t *)(v226 + 4);
  float32x4_t v35 = v34;
  v35.i32[3] = 0;
  float32x4_t v36 = *(float32x4_t *)(v226 + 16);
  char v288 = 0;
  long long v287 = 0u;
  float32x4_t v286 = 0u;
  uint64_t v295 = v227 + 32;
  uint64_t v297 = *(void *)(v227 + 72) + 20 * *(unsigned __int8 *)(v227 + 71);
  char v298 = *(unsigned char *)(v227 + 70);
  v37.i64[0] = *(void *)(v227 + 92);
  v37.i64[1] = *(unsigned int *)(v227 + 100);
  int32x4_t v38 = (int32x4_t)vmulq_f32(v35, v37);
  *(float32x2_t *)v38.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v38, 2), *(float32x2_t *)v38.i8);
  float32x2_t v39 = vpmin_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8);
  *(float32x2_t *)&long long v287 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v39.f32[0]);
  *((float *)&v287 + 2) = 0.025 * v39.f32[0];
  int8x8_t v215 = (int8x8_t)_D8;
  if (v228)
  {
    float32x4_t v289 = v17;
    float32x4_t v290 = v18;
    long long v291 = xmmword_23435FD80;
    float32x4_t v292 = v17;
    float32x4_t v293 = v18;
    long long v294 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v40 = vrecpeq_f32(v35);
    int v41 = 4;
    do
    {
      float32x4_t v40 = vmulq_f32(v40, vrecpsq_f32(v40, v35));
      --v41;
    }
    while (v41);
    *(int32x2_t *)v42.f32 = vdup_lane_s32(*(int32x2_t *)v34.f32, 0);
    v42.i64[1] = v42.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v42, v35)), (int8x8_t)v3).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1);
      float32x2_t v50 = (float32x2_t)vdup_laneq_s32((int32x4_t)v36, 2);
      float32x2_t v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v36, 3);
      float32x4_t v52 = vaddq_f32(v36, v36);
      float32x2_t v53 = vmul_lane_f32(v49, *(float32x2_t *)v52.f32, 1);
      float32x2_t v54 = vmul_laneq_f32(v50, v52, 2);
      float32x2_t v55 = vmul_n_f32(v49, v52.f32[0]);
      float32x2_t v56 = vmul_n_f32(v50, v52.f32[0]);
      float32x2_t v57 = vmul_n_f32(v51, v52.f32[0]);
      float32x2_t v58 = vmul_lane_f32(v50, *(float32x2_t *)v52.f32, 1);
      float32x2_t v59 = vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1);
      float32x2_t v60 = vmul_laneq_f32(v51, v52, 2);
      float32x2_t v61 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v52.f32), 0));
      float32x2_t v62 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v53), v54), (int8x8_t)vadd_f32(v55, v60), 4uLL);
      int8x8_t v63 = (int8x8_t)vsub_f32(v55, v60);
      *(float32x2_t *)v64.f32 = v62;
      v64.i64[1] = vsub_f32(v56, v59).u32[0];
      int32x2_t v65 = (int32x2_t)vext_s8(v63, (int8x8_t)vsub_f32(v61, v54), 4uLL);
      *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v62, 0), (int8x8_t)v65, 4uLL);
      *(int32x2_t *)v66.f32 = v65;
      v66.i64[1] = vadd_f32(v58, v57).u32[0];
      v61.i32[0] = vsub_f32(v61, v53).u32[0];
      *(int8x8_t *)v67.f32 = vext_s8((int8x8_t)vadd_f32(v56, v59), (int8x8_t)vsub_f32(v58, v57), 4uLL);
      *(int8x8_t *)v68.f32 = vext_s8((int8x8_t)v62, (int8x8_t)vdup_lane_s32(v65, 1), 4uLL);
      v67.i64[1] = v61.u32[0];
      v52.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 0).u32[0];
      v68.i64[1] = vdup_lane_s32(*(int32x2_t *)v67.f32, 1).u32[0];
      *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v64.u32[2], 0), *(int8x8_t *)&v66.u32[2], 4uLL);
      v69.i64[1] = vdup_lane_s32((int32x2_t)v61.u32[0], 0).u32[0];
      float32x4_t v70 = vmulq_n_f32(v52, v34.f32[0]);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_lane_f32(v68, *(float32x2_t *)v34.f32, 1);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_laneq_f32(v69, v34, 2);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_n_f32(v70, v62.f32[0]);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_lane_f32(v71, v62, 1);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_laneq_f32(v72, v64, 2);
      v75.i32[3] = 0;
      float32x4_t v43 = vaddq_f32(v75, vaddq_f32(v73, v74));
      float32x4_t v76 = vmulq_n_f32(v70, v66.f32[0]);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_lane_f32(v71, *(float32x2_t *)v66.f32, 1);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_laneq_f32(v72, v66, 2);
      v78.i32[3] = 0;
      float32x4_t v44 = vaddq_f32(v78, vaddq_f32(v76, v77));
      float32x4_t v79 = vmulq_n_f32(v70, v67.f32[0]);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_lane_f32(v71, *(float32x2_t *)v67.f32, 1);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_laneq_f32(v72, v67, 2);
      v81.i32[3] = 0;
      float32x4_t v45 = vaddq_f32(v81, vaddq_f32(v79, v80));
      float32x4_t v289 = v43;
      float32x4_t v290 = v44;
      float32x4_t v82 = vmulq_n_f32(v52, v40.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v68, *(float32x2_t *)v40.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_laneq_f32(v69, v40, 2);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_n_f32(v82, v62.f32[0]);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_lane_f32(v83, v62, 1);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_laneq_f32(v84, v64, 2);
      v87.i32[3] = 0;
      float32x4_t v88 = vaddq_f32(v87, vaddq_f32(v85, v86));
      float32x4_t v89 = vmulq_n_f32(v82, v66.f32[0]);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_lane_f32(v83, *(float32x2_t *)v66.f32, 1);
      v90.i32[3] = 0;
      float32x4_t v91 = vmulq_laneq_f32(v84, v66, 2);
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_n_f32(v82, v67.f32[0]);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_lane_f32(v83, *(float32x2_t *)v67.f32, 1);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_laneq_f32(v84, v67, 2);
      v94.i32[3] = 0;
      long long v291 = (__int128)v45;
      float32x4_t v292 = v88;
      long long v294 = (__int128)v84;
      float32x4_t v293 = vaddq_f32(v91, vaddq_f32(v89, v90));
      v88.i64[0] = *(void *)(v227 + 92);
      v88.i64[1] = *(unsigned int *)(v227 + 100);
      float32x4_t v48 = vaddq_f32(v94, vaddq_f32(v92, v93));
      int32x4_t v95 = (int32x4_t)vmulq_f32(v35, v88);
      *(float32x2_t *)v95.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v95, 2), *(float32x2_t *)v95.i8);
      float32x2_t v39 = vpmin_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v95.i8);
    }
    else
    {
      v40.i32[3] = 0;
      float32x4_t v43 = vmulq_f32(v35, v17);
      float32x4_t v44 = vmulq_f32(v35, v18);
      float32x4_t v45 = vmulq_f32(v35, (float32x4_t)xmmword_23435FD80);
      float32x4_t v289 = v43;
      float32x4_t v290 = v44;
      float32x4_t v46 = vmulq_f32(v40, v17);
      float32x4_t v47 = vmulq_f32(v40, v18);
      float32x4_t v48 = vmulq_f32(v40, (float32x4_t)xmmword_23435FD80);
      long long v291 = (__int128)v45;
      float32x4_t v292 = v46;
      float32x4_t v293 = v47;
    }
    float32x4_t v96 = vmulq_f32(v43, (float32x4_t)0);
    v96.i32[3] = 0;
    float32x4_t v97 = vmulq_f32(v44, (float32x4_t)0);
    v97.i32[3] = 0;
    float32x4_t v98 = vmulq_f32(v45, (float32x4_t)0);
    v98.i32[3] = 0;
    long long v294 = (__int128)v48;
    float32x4_t v286 = vaddq_f32(v98, vaddq_f32(v97, v96));
  }
  _Q1 = v224;
  _Q1.f32[2] = v31;
  float32x4_t v225 = _Q1;
  uint64_t v296 = *(void *)(v227 + 80);
  __asm { FMOV            V1.2S, #0.25 }
  float32x2_t v100 = vadd_f32((float32x2_t)vdup_lane_s32(v3, 0), vmul_f32(v39, *(float32x2_t *)_Q1.f32));
  float v222 = v100.f32[0];
  float32x2_t v265 = v100;
  uint64_t v264 = 0;
  uint64_t v263 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&v263, 0x80u);
  long long v261 = 0u;
  int8x16_t v262 = 0u;
  float32x4_t v230 = 0u;
  float32x4_t v260 = 0u;
  unsigned int v259 = 0xFFFFFFF;
  physx::Gu::getPCMConvexData(&v286, v228, (uint64_t)v258);
  char v101 = 0;
  int32x2_t v257 = 0;
  float32x4_t v254 = *v8;
  float v102 = *v10;
  float v103 = v10[1];
  float v104 = v10[2];
  float v105 = v10[3];
  float v106 = v103 + v103;
  float v107 = v104 + v104;
  float v108 = v103 * (float)(v103 + v103);
  float v109 = v104 * (float)(v104 + v104);
  float v110 = (float)(v102 + v102) * v103;
  float v111 = (float)(v102 + v102) * v104;
  float v112 = (float)(v102 + v102) * v105;
  float v113 = v106 * v104;
  float v114 = v106 * v105;
  float v115 = v107 * v105;
  float v220 = (float)(1.0 - v108) - v109;
  float v219 = v110 + v115;
  float v217 = v110 - v115;
  float v218 = v111 - v114;
  float v116 = 1.0 - (float)(v102 * (float)(v102 + v102));
  float v117 = v116 - v109;
  float v118 = v113 + v112;
  float v119 = v111 + v114;
  float v120 = v113 - v112;
  float v121 = v116 - v108;
  float v122 = v10[4];
  float v123 = v10[5];
  char v124 = 1;
  float v125 = v10[6];
  long long v126 = 0uLL;
  float32x4_t v127 = v231;
  float32x2_t v237 = v10;
  float v128 = v10;
  while (1)
  {
    char v129 = v124;
    LODWORD(v264) = 0;
    uint64_t v255 = v127.i64[0];
    float v256 = v127.f32[2];
    float32x4_t v267 = v127;
    float32x4_t v281 = &v266;
    long long v282 = &v289;
    float32x4_t v283 = &v292;
    char v130 = v228;
    float32x4_t v232 = v127;
    long long v221 = v126;
    if (v228)
    {
      char v130 = 1;
      float v131 = &unk_26E728728;
    }
    else
    {
      float v131 = &unk_26E728778;
    }
    char v284 = v130;
    v280[0].i64[0] = (uint64_t)v131;
    long long v285 = &v286;
    v280[1] = v225;
    physx::Gu::computeOBBAroundConvex((float *)&v243, (float *)v226, (float *)v227, v254.f32);
    float v251 = v222 + v251;
    float v252 = v222 + v252;
    float v253 = v222 + v253;
    float v132 = (float)(fabsf(v251 * v244) + fabsf(v252 * v246)) + fabsf(v253 * v248);
    float32x2_t v133 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(v243, v251)), vabs_f32(vmul_n_f32(v245, v252))), vabs_f32(vmul_n_f32(v247, v253)));
    float32x2_t v239 = vsub_f32(v249, v133);
    float v240 = v250 - v132;
    float32x2_t v241 = vadd_f32(v249, v133);
    float v242 = v250 + v132;
    v279[0] = &unk_26E728A08;
    v279[1] = &v263;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v275, v10, (float *)&v239, v223, (uint64_t)v279);
    int v134 = v264;
    if (!v264) {
      goto LABEL_39;
    }
    char v216 = v101;
    float v135 = (float)(v254.f32[3] * v254.f32[3]) + -0.5;
    float v136 = (float)((float)((float)(*((float *)&v255 + 1) * -2.0) * v254.f32[1])
                 + (float)(v254.f32[0] * (float)(*(float *)&v255 * -2.0)))
         + (float)(v254.f32[2] * (float)(v256 * -2.0));
    float v137 = (float)((float)((float)(*(float *)&v255 * -2.0) * v135)
                 - (float)((float)((float)(v254.f32[1] * (float)(v256 * -2.0))
                                 - (float)(v254.f32[2] * (float)(*((float *)&v255 + 1) * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[0] * v136);
    float v138 = (float)((float)((float)(*((float *)&v255 + 1) * -2.0) * v135)
                 - (float)((float)((float)(v254.f32[2] * (float)(*(float *)&v255 * -2.0))
                                 - (float)(v254.f32[0] * (float)(v256 * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[1] * v136);
    float v139 = (float)((float)((float)(v256 * -2.0) * v135)
                 - (float)((float)((float)(v254.f32[0] * (float)(*((float *)&v255 + 1) * -2.0))
                                 - (float)(v254.f32[1] * (float)(*(float *)&v255 * -2.0)))
                         * v254.f32[3]))
         + (float)(v254.f32[2] * v136);
    float v140 = (float)-v254.f32[0] - v254.f32[0];
    float v141 = (float)-v254.f32[1] - v254.f32[1];
    float v142 = (float)-v254.f32[2] - v254.f32[2];
    float v143 = -(float)(v254.f32[1] * v141);
    float v144 = -(float)(v254.f32[2] * v142);
    float v145 = -(float)(v254.f32[2] * v140);
    float v146 = v254.f32[3] * v140;
    float v147 = -(float)(v254.f32[2] * v141);
    float v148 = v254.f32[3] * v141;
    float v149 = v254.f32[3] * v142;
    float v150 = (float)(1.0 - v143) - v144;
    float v151 = v149 - (float)(v254.f32[1] * v140);
    float v152 = v145 - v148;
    float v153 = (float)-(float)(v254.f32[1] * v140) - v149;
    float v154 = (float)(v254.f32[0] * v140) + 1.0;
    float v155 = v154 - v144;
    float v156 = v146 + v147;
    float v157 = v145 + v148;
    float v158 = v147 - v146;
    float v159 = v154 - v143;
    *(float *)&unsigned int v160 = (float)(v218 * v157) + (float)((float)(v220 * v150) + (float)(v219 * v153));
    *(float *)&unsigned int v161 = (float)(v118 * v157) + (float)((float)(v217 * v150) + (float)(v117 * v153));
    *(float *)&unsigned int v162 = (float)(v118 * v158) + (float)((float)(v217 * v151) + (float)(v117 * v155));
    *(float *)&unsigned int v163 = (float)(v121 * v157) + (float)((float)(v119 * v150) + (float)(v120 * v153));
    *(float *)&unsigned int v164 = (float)(v121 * v158) + (float)((float)(v119 * v151) + (float)(v120 * v155));
    float v165 = (float)(v125 * v157) + (float)((float)(v122 * v150) + (float)(v123 * v153));
    float v166 = (float)(v125 * v158) + (float)((float)(v122 * v151) + (float)(v123 * v155));
    v167.i64[0] = __PAIR64__((float)(v218 * v158) + (float)((float)(v220 * v151) + (float)(v219 * v155)), v160);
    v167.i64[1] = COERCE_UNSIGNED_INT((float)(v218 * v159) + (float)((float)(v220 * v152) + (float)(v219 * v156)));
    v168.i64[0] = __PAIR64__(v162, v161);
    *(float *)&unsigned int v169 = v137 + v165;
    v168.i64[1] = COERCE_UNSIGNED_INT((float)(v118 * v159) + (float)((float)(v217 * v152) + (float)(v117 * v156)));
    v170.i64[0] = __PAIR64__(v164, v163);
    v170.i64[1] = COERCE_UNSIGNED_INT((float)(v121 * v159) + (float)((float)(v119 * v152) + (float)(v120 * v156)));
    v171.i32[3] = 0;
    v171.i64[0] = __PAIR64__(v138 + v166, v169);
    v171.f32[2] = v139 + (float)((float)(v125 * v159) + (float)((float)(v122 * v152) + (float)(v123 * v156)));
    v238[0] = v167;
    v238[1] = v168;
    v238[2] = v170;
    v238[3] = v171;
    int32x2_t v257 = vdup_n_s32(0x7F7FFFFFu);
    if ((v264 + 31) < 0x20) {
      goto LABEL_38;
    }
    char v229 = v129;
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    int v174 = 0;
    uint64_t v234 = (v264 + 31) >> 5;
    unsigned int v175 = v264;
    int v236 = v264;
    do
    {
      if (v175 >= 0x20uLL) {
        uint64_t v176 = 32;
      }
      else {
        uint64_t v176 = v175;
      }
      if ((v134 - 32 * v173) >= 0x20) {
        unsigned int v177 = 32;
      }
      else {
        unsigned int v177 = v134 - 32 * v173;
      }
      if (v177)
      {
        unsigned int v178 = v279;
        uint64_t v179 = v172;
        do
        {
          physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v275, v128, (uint64_t)v178, 0, 0, *(_DWORD *)(v263 + v179), 0, 0);
          *((unsigned char *)v178 + 36) = 56;
          v178 += 5;
          v179 += 4;
          --v176;
        }
        while (v176);
      }
      v174 |= calculateMTD((uint64_t)v258, v280, (uint64_t)&v266, v238, v233, &v265, (uint64_t)v279, v177, 32 * (int)v173++, v299, &v274, &v260, &v262, &v261, &v259, (float32x2_t *)&v257);
      v175 -= 32;
      v172 += 128;
      int v134 = v236;
    }
    while (v173 != v234);
    if ((v174 & 1) == 0) {
      goto LABEL_38;
    }
    unsigned int v180 = *(_DWORD *)(v263 + 4 * v259);
    unsigned int v259 = v180;
    float32x4_t v181 = v266;
    v181.i32[3] = 0;
    float32x2_t v182 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v266, 3).u64[0];
    LODWORD(v183) = vmla_f32((float32x2_t)0xBF000000BF000000, v182, v182).u32[0];
    float32x4_t v184 = vmulq_n_f32(v260, v183);
    v184.i32[3] = 0;
    float32x2_t v185 = (float32x2_t)vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
    float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v260, (int8x16_t)v260, 8uLL).u64[0];
    float32x2_t v187 = (float32x2_t)vext_s8(*(int8x8_t *)v260.f32, (int8x8_t)v186, 4uLL);
    int8x8_t v188 = (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v260.f32), *(float32x2_t *)v266.f32, v186);
    float32x2_t v189 = (float32x2_t)vext_s8(*(int8x8_t *)v266.f32, (int8x8_t)v185, 4uLL);
    int8x8_t v190 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v266.f32, v187), v189, *(float32x2_t *)v260.f32);
    *(int8x8_t *)v191.f32 = vext_s8(v190, v188, 4uLL);
    v191.i64[1] = v190.u32[0];
    float32x4_t v192 = vmlaq_laneq_f32(v184, v191, v266, 3);
    v192.i64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u32[0];
    float32x4_t v193 = vmulq_f32(v181, v260);
    v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
    float32x4_t v194 = vmulq_n_f32((float32x4_t)v262, v183);
    v194.i32[3] = 0;
    float32x4_t v195 = vmlaq_n_f32(v192, v181, vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32).f32[0]);
    v193.i64[0] = vextq_s8(v262, v262, 8uLL).u64[0];
    *(float32x2_t *)v191.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v266.f32, (float32x2_t)vext_s8(*(int8x8_t *)v262.i8, *(int8x8_t *)v193.f32, 4uLL)), v189, *(float32x2_t *)v262.i8);
    *(int8x8_t *)v193.f32 = vext_s8(*(int8x8_t *)v191.f32, (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v262.i8), *(float32x2_t *)v266.f32, *(float32x2_t *)v193.f32), 4uLL);
    v193.i64[1] = v191.u32[0];
    float32x4_t v196 = vmlaq_laneq_f32(v194, v193, v266, 3);
    v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
    float32x4_t v197 = vaddq_f32(v195, v195);
    float32x4_t v198 = vmulq_f32(v181, (float32x4_t)v262);
    v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
    float32x4_t v199 = vmlaq_n_f32(v196, v181, vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32).f32[0]);
    v199.i64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u32[0];
    v198.i64[0] = 0x4000000040000000;
    v198.i64[1] = 0x4000000040000000;
    int8x16_t v200 = (int8x16_t)vmlaq_f32(v267, v198, v199);
    *(void *)&long long v126 = v200.i64[0];
    *((void *)&v126 + 1) = vextq_s8(v200, v200, 8uLL).u32[0];
    if (*(float *)v257.i32 > 0.0) {
      break;
    }
    char v124 = 0;
    float32x4_t v201 = vmulq_n_f32(v197, *(float *)v257.i32);
    v201.i32[3] = 0;
    float32x4_t v230 = vsubq_f32(v230, v201);
    float32x4_t v127 = vsubq_f32(v232, v201);
    char v101 = 1;
    BOOL v10 = v237;
    if ((v229 & 1) == 0) {
      goto LABEL_40;
    }
  }
  if (v229)
  {
    v200.i32[3] = v197.i32[0];
    uint64_t v202 = v214;
    *(_DWORD *)(v214 + 48) = 0;
    *(int8x16_t *)(v214 + 24) = v200;
    *(void *)(v214 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL).u64[0];
LABEL_46:
    *(_DWORD *)(v202 + 16) = v180;
    uint64_t v211 = 1;
    goto LABEL_48;
  }
  long long v221 = v126;
  char v216 = 1;
LABEL_38:
  char v101 = v216;
LABEL_39:
  long long v126 = v221;
LABEL_40:
  float32x4_t v203 = vmulq_f32(v230, v230);
  v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
  float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
  float32x2_t v205 = vrsqrte_f32(v204);
  int v206 = 4;
  do
  {
    float32x2_t v205 = vmul_f32(v205, vrsqrts_f32(vmul_f32(v205, v205), v204));
    --v206;
  }
  while (v206);
  float32x2_t v207 = vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v204), 0), v215, (int8x8_t)v205));
  float32x2_t v208 = vrecpe_f32(v207);
  int v209 = 4;
  do
  {
    float32x2_t v208 = vmul_f32(v208, vrecps_f32(v207, v208));
    --v209;
  }
  while (v209);
  if (v101)
  {
    int8x16_t v210 = vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v207), 0), (int8x16_t)vmulq_n_f32(v230, v208.f32[0]));
    uint64_t v202 = v214;
    *(float *)(v214 + 48) = -v207.f32[0];
    HIDWORD(v126) = v210.i32[0];
    *(_OWORD *)(v214 + 24) = v126;
    *(int8x8_t *)(v214 + 4physx::Sq::AABBTree::release(this, 0) = vext_s8(*(int8x8_t *)v210.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v210, v210, 8uLL), 4uLL);
    unsigned int v180 = v259;
    goto LABEL_46;
  }
  uint64_t v211 = 0;
LABEL_48:
  if ((v264 & 0x8000000000000000) == 0 && (v264 & 0x7FFFFFFF00000000) != 0 && v263 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v211;
}

float sweepCapsule_SphereGeom(uint64_t a1, float32x2_t *a2, float a3, float a4, uint64_t a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float v13 = *(float *)(a1 + 4) + a4;
  float32x2_t v58 = a2[2];
  float v59 = a2[3].f32[0];
  float v60 = v13;
  float v14 = -a8[1].f32[0];
  float32x2_t v56 = vneg_f32(*a8);
  float v57 = v14;
  __int16 v55 = *a10;
  if (!physx::Gu::sweepSphereCapsule(&v58, a7, &v56, (float *)(a9 + 48), (float32x2_t *)(a9 + 24), (float32x2_t *)(a9 + 36), &v55, a3))return result; {
  if ((*a10 & 0x200) == 0)
  }
  {
    float result = *(float *)(a9 + 48);
    if (result == 0.0) {
      __int16 v16 = 2;
    }
    else {
      __int16 v16 = 3;
    }
    *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = v16;
    return result;
  }
  *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
  float result = *(float *)(a9 + 48);
  if (result != 0.0) {
    return result;
  }
  float v17 = a7->f32[0];
  float v18 = a7[1].f32[1];
  if (a7->f32[0] == v18)
  {
    float v19 = a7->f32[1];
    float v20 = a7[2].f32[0];
    if (v19 == v20)
    {
      float v21 = a7[1].f32[0];
      if (v21 == a7[2].f32[1])
      {
        float v22 = a7[3].f32[0];
        float32x2_t v23 = v58;
        float v24 = v17 - v58.f32[0];
        float v25 = v19 - v58.f32[1];
        float v26 = v59;
        float v27 = v60;
        float v28 = v21 - v59;
        float v29 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v28 * v28);
        float v30 = sqrtf(v29);
        if (v29 >= 0.000001)
        {
          float v32 = v24 * (float)(1.0 / v30);
          float v31 = v25 * (float)(1.0 / v30);
          float v33 = v28 * (float)(1.0 / v30);
        }
        else
        {
          float v31 = 0.0;
          float v32 = 1.0;
          float v33 = 0.0;
        }
        *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v31;
        *(float *)(a9 + 44) = v33;
        *(float *)(a9 + 48) = v30 - (float)(v22 + v27);
        *(float *)(a9 + 24) = v23.f32[0] + (float)(v27 * v32);
        *(float *)(a9 + 28) = v23.f32[1] + (float)(v27 * v31);
        float result = v26 + (float)(v27 * v33);
        *(float *)(a9 + 32) = result;
        *(float *)(a9 + 36) = v32;
        return result;
      }
    }
  }
  else
  {
    float v20 = a7[2].f32[0];
    float v19 = a7->f32[1];
  }
  float v34 = v18 - v17;
  float v35 = v20 - v19;
  float v36 = a7[1].f32[0];
  float v37 = a7[2].f32[1] - v36;
  float32x2_t v38 = v58;
  float v39 = v59;
  float v40 = (float)((float)((float)(v20 - v19) * (float)(v58.f32[1] - v19)) + (float)((float)(v58.f32[0] - v17) * v34))
      + (float)((float)(v59 - v36) * v37);
  float v41 = 0.0;
  float v42 = 0.0;
  if (v40 > 0.0)
  {
    float v43 = (float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v37 * v37);
    float v42 = 1.0;
    if (v40 < v43) {
      float v42 = v40 / v43;
    }
  }
  float v44 = v60;
  float v45 = a7[3].f32[0];
  float v46 = v19 + (float)(v35 * v42);
  float v47 = v36 + (float)(v37 * v42);
  float v48 = (float)(v17 + (float)(v34 * v42)) - v58.f32[0];
  float v49 = v46 - v58.f32[1];
  float v50 = v47 - v59;
  float v51 = (float)((float)(v49 * v49) + (float)(v48 * v48)) + (float)(v50 * v50);
  float v52 = sqrtf(v51);
  float result = 1.0;
  BOOL v53 = v51 < 0.000001;
  float v54 = 0.0;
  if (!v53)
  {
    float result = v48 * (float)(1.0 / v52);
    float v41 = v49 * (float)(1.0 / v52);
    float v54 = v50 * (float)(1.0 / v52);
  }
  *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v41;
  *(float *)(a9 + 44) = v54;
  *(float *)(a9 + 48) = v52 - (float)(v44 + v45);
  *(float *)(a9 + 24) = v38.f32[0] + (float)(v44 * result);
  *(float *)(a9 + 28) = v38.f32[1] + (float)(v44 * v41);
  *(float *)(a9 + 32) = v39 + (float)(v44 * v54);
  *(float *)(a9 + 36) = result;
  return result;
}

uint64_t sweepCapsule_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, _WORD *a10)
{
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v53 = *MEMORY[0x263EF8340];
  float v12 = *a4;
  float v13 = a4[1];
  float v14 = v12 + v12;
  float v16 = a4[2];
  float v15 = a4[3];
  float v17 = v15 + v15;
  float v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  float v19 = (float)(v14 * v13) + (float)(v16 * (float)(v15 + v15));
  float v20 = v14 * v16;
  float v22 = a4[4];
  float v21 = a4[5];
  float v23 = a4[6];
  float v24 = a7[6];
  *(_DWORD *)(a9 + 16) = -1;
  float v25 = v20 - (float)(v13 * v17);
  float v26 = v21 * v19;
  float v27 = *a7;
  float v28 = a7[1];
  *(float *)float v52 = *a7;
  *(float *)&v52[1] = v28;
  float v29 = a7[2];
  float v30 = a7[3];
  *(float *)&v52[2] = v29;
  *(float *)&float v52[3] = v30;
  float v31 = a7[4];
  float v32 = a7[5];
  *(float *)&v52[4] = v31;
  *(float *)&v52[5] = v32;
  char v33 = 1;
  float v34 = 3.4028e38;
  do
  {
    char v35 = v33;
    float v36 = (float *)&v52[3 * v10];
    float v37 = v36[2];
    if ((float)((float)((float)(v19 * v36[1]) + (float)(*v36 * v18)) + (float)(v37 * v25)) < v34)
    {
      int v11 = v10;
      float v34 = (float)((float)(v19 * v36[1]) + (float)(*v36 * v18)) + (float)(v37 * v25);
    }
    uint64_t v10 = 1;
    char v33 = 0;
  }
  while ((v35 & 1) != 0);
  float v38 = (float)(v26 + (float)(v22 * v18)) + (float)(v23 * v25);
  float v39 = v24 + a2;
  if ((*a10 & 0x200) != 0)
  {
    if (v34 <= (float)(v39 + v38))
    {
      *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float v51 = (float)((float)((float)(v19 * v28) + (float)(v27 * v18)) + (float)(v29 * v25)) - v38;
      if (v51 >= (float)((float)((float)((float)(v19 * v31) + (float)(v30 * v18)) + (float)(v32 * v25)) - v38))
      {
        float v27 = v30;
        float v28 = v31;
        float v29 = v32;
        float v51 = (float)((float)((float)(v19 * v31) + (float)(v30 * v18)) + (float)(v32 * v25)) - v38;
      }
      *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v19;
      *(float *)(a9 + 44) = v25;
      *(float *)(a9 + 48) = v51 - v24;
      *(float *)(a9 + 24) = v27 - (float)(v18 * v51);
      *(float *)(a9 + 28) = v28 - (float)(v19 * v51);
      *(float *)(a9 + 32) = v29 - (float)(v25 * v51);
      *(float *)(a9 + 36) = v18;
      return 1;
    }
  }
  else if ((*a10 & 0x10) == 0 && v34 <= (float)(v39 + v38))
  {
    *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    *(_DWORD *)(a9 + 48) = 0;
    float v40 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v40;
    return 1;
  }
  float v41 = (float)((float)(v19 * a8->f32[1]) + (float)(a8->f32[0] * v18)) + (float)(a8[1].f32[0] * v25);
  if (v41 > -0.0000001 && v41 < 0.0000001) {
    return 0;
  }
  float v42 = (float *)&v52[3 * v11];
  float v43 = v42[2] - (float)(v25 * v39);
  float v44 = v42[1] - (float)(v19 * v39);
  float v45 = *v42 - (float)(v18 * v39);
  float v46 = (float)-(float)((float)((float)((float)(v19 * v44) + (float)(v45 * v18)) + (float)(v43 * v25)) - v38) / v41;
  *(float *)(a9 + 48) = v46;
  float v47 = v44 + (float)(a8->f32[1] * v46);
  float v48 = v43 + (float)(a8[1].f32[0] * v46);
  *(float *)(a9 + 24) = v45 + (float)(a8->f32[0] * v46);
  *(float *)(a9 + 28) = v47;
  *(float *)(a9 + 32) = v48;
  if (v46 <= 0.0 || v46 > a1) {
    return 0;
  }
  *(float *)(a9 + 36) = v18;
  *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v19;
  *(float *)(a9 + 44) = v25;
  *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
  return 1;
}

uint64_t sweepCapsule_CapsuleGeom(uint64_t a1, float *a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float v12 = *a2;
  float v13 = a2[1];
  float v14 = v12 + v12;
  float v16 = a2[2];
  float v15 = a2[3];
  float v17 = v15 + v15;
  float v18 = (float)((float)(v15 * (float)(v15 + v15)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  float v19 = (float)(v14 * v13) + (float)(v16 * (float)(v15 + v15));
  float v20 = (float)(v14 * v16) - (float)(v13 * v17);
  float v22 = *(float *)(a1 + 4);
  float v21 = *(float *)(a1 + 8);
  float v23 = v18 * v21;
  float v24 = v21 * v19;
  float v25 = v20 * v21;
  float v26 = a2[4];
  float v27 = a2[5];
  float v28 = a2[6];
  v46.f32[0] = v26 + v23;
  v46.f32[1] = v27 + v24;
  float v47 = v25 + v28;
  v48.f32[0] = v26 - v23;
  v48.f32[1] = v27 - v24;
  float v49 = v28 - v25;
  float v50 = v22 + a4;
  __int16 v29 = *a10;
  __int16 v45 = 0;
  float v30 = -a8[1].f32[0];
  float32x2_t v54 = vneg_f32(*a8);
  float v55 = v30;
  uint64_t v31 = physx::Gu::sweepCapsuleCapsule(a7, &v46, &v54, (float *)(a9 + 48), (float32x2_t *)(a9 + 24), (float32x2_t *)(a9 + 36), v29, &v45, a3);
  if (v31)
  {
    __int16 v32 = v45;
    *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = v45;
    if ((v29 & 0x200) != 0 && *(float *)(a9 + 48) == 0.0)
    {
      *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = v32 | 1;
      uint64_t v51 = 0;
      float v33 = *(float *)(a7 + 20) - *(float *)(a7 + 8);
      float32x2_t v54 = vsub_f32(*(float32x2_t *)(a7 + 12), *(float32x2_t *)a7);
      float v55 = v33;
      float32x2_t v52 = vsub_f32(v48, v46);
      float v53 = v49 - v47;
      physx::Gu::distanceSegmentSegmentSquared((float *)a7, (float *)&v54, (float *)&v46, (float *)&v52, (float *)&v51 + 1, (float *)&v51);
      float v34 = *(float *)(a7 + 24);
      float v35 = v50;
      float v36 = v47 + (float)(*(float *)&v51 * (float)(v49 - v47));
      float32x2_t v37 = vadd_f32(v46, vmul_n_f32(vsub_f32(v48, v46), *(float *)&v51));
      float32x2_t v38 = vsub_f32(vadd_f32(*(float32x2_t *)a7, vmul_n_f32(vsub_f32(*(float32x2_t *)(a7 + 12), *(float32x2_t *)a7), *((float *)&v51 + 1))), v37);
      float v39 = (float)(*(float *)(a7 + 8)
                  + (float)(*((float *)&v51 + 1) * (float)(*(float *)(a7 + 20) - *(float *)(a7 + 8))))
          - v36;
      float v40 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v38, v38).i32[1]), v38.f32[0], v38.f32[0]) + (float)(v39 * v39);
      float v41 = sqrtf(v40);
      if (v40 >= 0.000001)
      {
        float32x2_t v42 = vmul_n_f32(v38, 1.0 / v41);
        float v43 = v39 * (float)(1.0 / v41);
      }
      else
      {
        float32x2_t v42 = (float32x2_t)1065353216;
        float v43 = 0.0;
      }
      *(float32x2_t *)(a9 + 36) = v42;
      *(float *)(a9 + 44) = v43;
      *(float *)(a9 + 48) = v41 - (float)(v34 + v35);
      *(float32x2_t *)(a9 + 24) = vadd_f32(v37, vmul_n_f32(v42, v35));
      *(float *)(a9 + 32) = v36 + (float)(v35 * v43);
    }
  }
  return v31;
}

BOOL sweepCapsule_ConvexGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int8x8_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __int16 *a8, double a9, float a10)
{
  BOOL v15 = 0;
  uint64_t v232 = *MEMORY[0x263EF8340];
  *(float32x2_t *)v16.f32 = *a6;
  v16.i32[2] = a6[1].i32[0];
  uint64_t v17 = *(void *)(a1 + 32);
  *(int8x8_t *)v18.f32 = a4[2];
  v18.i32[2] = a4[3].i32[0];
  float32x4_t v208 = 0uLL;
  v18.i64[1] = v18.u32[2];
  int8x16_t v19 = *(int8x16_t *)a2;
  v20.i64[0] = a2[1].i64[0];
  v20.i64[1] = a2[1].u32[2];
  float32x4_t v21 = vnegq_f32(*a2);
  float32x4_t v22 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  float32x4_t v200 = v20;
  float32x4_t v23 = vsubq_f32(v18, v20);
  float32x4_t v24 = v21;
  v24.i32[3] = 0;
  float32x2_t v25 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  float32x4_t v26 = vmulq_n_f32(v23, v25.f32[0]);
  v26.i32[3] = 0;
  float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  float32x2_t v28 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v27, 4uLL);
  int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v28, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(v27, *(float32x2_t *)v23.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v30.i64[1] = v29.u32[0];
  float32x4_t v31 = vmlaq_laneq_f32(v26, v30, *a2, 3);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  float32x4_t v32 = vmulq_f32(v24, v23);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x4_t v33 = vmlaq_n_f32(v31, v24, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
  float32x4_t v34 = vaddq_f32(v33, v33);
  v34.i32[3] = 0;
  float32x4_t v35 = *(float32x4_t *)a4->i8;
  v35.i32[3] = 0;
  float32x4_t v36 = vmulq_f32(v35, v24);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x4_t v37 = vmulq_laneq_f32(v35, *a2, 3);
  v35.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  int8x8_t v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a4, *(int8x8_t *)v35.f32, 4uLL), *(float32x2_t *)v21.f32), v28, (float32x2_t)*a4);
  *(int8x8_t *)v39.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a4, v27), *(float32x2_t *)v21.f32, *(float32x2_t *)v35.f32), 4uLL);
  *(int8x8_t *)&v39.u32[2] = v38;
  float32x4_t v40 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, *(float32x4_t *)a4->i8, 3), v37), v39);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v40, 2);
  float32x2_t v41 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32));
  float32x4_t v42 = vaddq_f32(v40, v40);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v42.f32), 0);
  float32x2_t v43 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v42.f32, 1);
  float32x2_t v44 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v42, 2);
  *(float32x2_t *)v21.f32 = vmul_n_f32(*(float32x2_t *)v21.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v24.f32, v42.f32[0]);
  float32x2_t v45 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v41, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), v41, 1);
  float32x2_t v46 = vmul_lane_f32(*(float32x2_t *)v37.f32, v41, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v40.f32 = vsub_f32(_D8, *(float32x2_t *)v40.f32);
  *(int8x8_t *)v36.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v43), v44), (int8x8_t)vadd_f32(*(float32x2_t *)v21.f32, v46), 4uLL);
  *(float32x2_t *)&v36.u32[2] = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, v46), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v44), 4uLL);
  *(float32x2_t *)&v52.u32[2] = vadd_f32(*(float32x2_t *)v24.f32, v45);
  int32x2_t v53 = (int32x2_t)vsub_f32(*(float32x2_t *)v40.f32, v43);
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, v45), 4uLL);
  *(int32x2_t *)&v24.u32[2] = v53;
  v53.i32[0] = *(_DWORD *)(a5 + 24);
  float32x4_t v54 = *(float32x4_t *)(a1 + 4);
  float32x4_t v55 = v54;
  v55.i32[3] = 0;
  float32x4_t v56 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)(a3 + 8));
  float32x4_t v57 = vmulq_n_f32(v36, v56.f32[0]);
  v57.i32[3] = 0;
  float32x4_t v58 = vmulq_lane_f32(v52, *(float32x2_t *)v56.f32, 1);
  v58.i32[3] = 0;
  float32x4_t v59 = vmulq_laneq_f32(v24, v56, 2);
  v59.i32[3] = 0;
  float32x4_t v60 = *(float32x4_t *)(a1 + 16);
  float32x4_t v61 = vaddq_f32(v59, vaddq_f32(v57, v58));
  int v227 = 4;
  float32x4_t v223 = v34;
  int32x2_t v231 = vdup_lane_s32(v53, 0);
  float32x4_t v229 = vaddq_f32(v61, v34);
  float32x4_t v230 = vsubq_f32(v34, v61);
  __int32 v224 = v53.i32[0];
  __int32 v225 = v53.i32[0];
  __int32 v226 = v53.i32[0];
  char v228 = 1;
  if (v54.f32[0] == 1.0 && v54.f32[1] == 1.0) {
    BOOL v15 = v54.f32[2] == 1.0;
  }
  v16.i32[3] = 0;
  float32x4_t v62 = 0uLL;
  char v212 = 0;
  float32x4_t v210 = 0u;
  long long v211 = 0u;
  uint64_t v219 = v17 + 32;
  uint64_t v221 = *(void *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  char v222 = *(unsigned char *)(v17 + 70);
  v63.i64[0] = *(void *)(v17 + 92);
  v63.i64[1] = *(unsigned int *)(v17 + 100);
  int32x4_t v64 = (int32x4_t)vmulq_f32(v55, v63);
  *(float32x2_t *)v64.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v64, 2), *(float32x2_t *)v64.i8);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  *(float32x2_t *)&long long v211 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v64.i32);
  *((float *)&v211 + 2) = 0.025 * *(float *)v64.i32;
  if (v15)
  {
    long long v213 = xmmword_23435FD50;
    long long v214 = xmmword_23435FD60;
    long long v215 = xmmword_23435FD80;
    long long v216 = xmmword_23435FD50;
    long long v217 = xmmword_23435FD60;
    long long v218 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v65 = vrecpeq_f32(v55);
    int v66 = 4;
    do
    {
      float32x4_t v65 = vmulq_f32(v65, vrecpsq_f32(v65, v55));
      --v66;
    }
    while (v66);
    *(int32x2_t *)v67.f32 = vdup_lane_s32(*(int32x2_t *)v54.f32, 0);
    v67.i64[1] = v67.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v67, v55)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.f32, 1);
      float32x2_t v75 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 2);
      float32x2_t v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 3);
      float32x4_t v77 = vaddq_f32(v60, v60);
      float32x2_t v78 = vmul_lane_f32(v74, *(float32x2_t *)v77.f32, 1);
      float32x2_t v79 = vmul_laneq_f32(v75, v77, 2);
      float32x2_t v80 = vmul_n_f32(v74, v77.f32[0]);
      float32x2_t v81 = vmul_n_f32(v75, v77.f32[0]);
      float32x2_t v82 = vmul_n_f32(v76, v77.f32[0]);
      float32x2_t v83 = vmul_lane_f32(v75, *(float32x2_t *)v77.f32, 1);
      float32x2_t v84 = vmul_lane_f32(v76, *(float32x2_t *)v77.f32, 1);
      float32x2_t v85 = vmul_laneq_f32(v76, v77, 2);
      *(float32x2_t *)v77.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v77.f32), 0));
      *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v78), v79), (int8x8_t)vadd_f32(v80, v85), 4uLL);
      v86.i64[1] = vsub_f32(v81, v84).u32[0];
      int32x2_t v87 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v80, v85), (int8x8_t)vsub_f32(*(float32x2_t *)v77.f32, v79), 4uLL);
      int8x8_t v88 = (int8x8_t)vadd_f32(v81, v84);
      *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v86.f32, 0), (int8x8_t)v87, 4uLL);
      int8x8_t v90 = (int8x8_t)vdup_lane_s32(v87, 1);
      *(int32x2_t *)v91.f32 = v87;
      v91.i64[1] = vadd_f32(v83, v82).u32[0];
      *(int8x8_t *)v92.f32 = vext_s8(v88, (int8x8_t)vsub_f32(v83, v82), 4uLL);
      *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v86.f32, v90, 4uLL);
      v92.i64[1] = vsub_f32(*(float32x2_t *)v77.f32, v78).u32[0];
      v89.i64[1] = vdup_lane_s32(*(int32x2_t *)v92.f32, 0).u32[0];
      v93.i64[1] = vdup_lane_s32(*(int32x2_t *)v92.f32, 1).u32[0];
      *(int8x8_t *)v94.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v86.u32[2], 0), (int8x8_t)v91.u32[2], 4uLL);
      v94.i64[1] = vdup_lane_s32(*(int32x2_t *)&v92.u32[2], 0).u32[0];
      float32x4_t v95 = vmulq_n_f32(v89, v54.f32[0]);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_lane_f32(v93, *(float32x2_t *)v54.f32, 1);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_laneq_f32(v94, v54, 2);
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_n_f32(v95, v86.f32[0]);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_lane_f32(v96, *(float32x2_t *)v86.f32, 1);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_laneq_f32(v97, v86, 2);
      v100.i32[3] = 0;
      float32x4_t v68 = vaddq_f32(v100, vaddq_f32(v98, v99));
      float32x4_t v101 = vmulq_n_f32(v95, v91.f32[0]);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_lane_f32(v96, *(float32x2_t *)v91.f32, 1);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_laneq_f32(v97, v91, 2);
      v103.i32[3] = 0;
      float32x4_t v104 = vaddq_f32(v101, v102);
      float32x4_t v105 = vmulq_n_f32(v95, v92.f32[0]);
      v105.i32[3] = 0;
      float32x4_t v106 = vmulq_lane_f32(v96, *(float32x2_t *)v92.f32, 1);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_laneq_f32(v97, v92, 2);
      v107.i32[3] = 0;
      float32x4_t v69 = vaddq_f32(v103, v104);
      float32x4_t v70 = vaddq_f32(v107, vaddq_f32(v105, v106));
      long long v213 = (__int128)v68;
      long long v214 = (__int128)v69;
      long long v215 = (__int128)v70;
      float32x4_t v108 = vmulq_n_f32(v89, v65.f32[0]);
      v108.i32[3] = 0;
      float32x4_t v109 = vmulq_lane_f32(v93, *(float32x2_t *)v65.f32, 1);
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_laneq_f32(v94, v65, 2);
      v110.i32[3] = 0;
      float32x4_t v111 = vmulq_n_f32(v108, v86.f32[0]);
      v111.i32[3] = 0;
      float32x4_t v112 = vmulq_lane_f32(v109, *(float32x2_t *)v86.f32, 1);
      v112.i32[3] = 0;
      float32x4_t v113 = vmulq_laneq_f32(v110, v86, 2);
      v113.i32[3] = 0;
      float32x4_t v71 = vaddq_f32(v113, vaddq_f32(v111, v112));
      float32x4_t v114 = vmulq_n_f32(v108, v91.f32[0]);
      v114.i32[3] = 0;
      float32x4_t v115 = vmulq_lane_f32(v109, *(float32x2_t *)v91.f32, 1);
      v115.i32[3] = 0;
      float32x4_t v116 = vmulq_laneq_f32(v110, v91, 2);
      v116.i32[3] = 0;
      float32x4_t v117 = vmulq_n_f32(v108, v92.f32[0]);
      v117.i32[3] = 0;
      float32x4_t v118 = vmulq_lane_f32(v109, *(float32x2_t *)v92.f32, 1);
      v118.i32[3] = 0;
      float32x4_t v72 = vaddq_f32(v116, vaddq_f32(v114, v115));
      float32x4_t v119 = vmulq_laneq_f32(v110, v92, 2);
      v119.i32[3] = 0;
      float32x4_t v73 = vaddq_f32(v119, vaddq_f32(v117, v118));
    }
    else
    {
      v65.i32[3] = 0;
      float32x4_t v68 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD50);
      float32x4_t v69 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD60);
      float32x4_t v70 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD80);
      long long v213 = (__int128)v68;
      long long v214 = (__int128)v69;
      long long v215 = (__int128)v70;
      float32x4_t v71 = vmulq_f32(v65, (float32x4_t)xmmword_23435FD50);
      float32x4_t v72 = vmulq_f32(v65, (float32x4_t)xmmword_23435FD60);
      float32x4_t v73 = vmulq_f32(v65, (float32x4_t)xmmword_23435FD80);
    }
    long long v217 = (__int128)v72;
    long long v218 = (__int128)v73;
    float32x4_t v120 = vmulq_f32(v68, (float32x4_t)0);
    v120.i32[3] = 0;
    float32x4_t v121 = vmulq_f32(v69, (float32x4_t)0);
    v121.i32[3] = 0;
    float32x4_t v122 = vmulq_f32(v70, (float32x4_t)0);
    v122.i32[3] = 0;
    float32x4_t v62 = vaddq_f32(v122, vaddq_f32(v121, v120));
    long long v216 = (__int128)v71;
    float32x4_t v210 = v62;
  }
  float32x4_t v193 = v16;
  float32x4_t v123 = vmulq_n_f32(v16, *(float *)&a9);
  v123.i32[3] = 0;
  float32x4_t v124 = vnegq_f32(v123);
  float32x4_t v125 = v124;
  v125.i32[3] = 0;
  float32x4_t v126 = (float32x4_t)v19;
  v126.i32[3] = 0;
  float32x4_t v127 = vmulq_n_f32(v125, v25.f32[0]);
  v127.i32[3] = 0;
  float32x2_t v128 = (float32x2_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
  float32x2_t v129 = (float32x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
  float32x2_t v130 = (float32x2_t)vext_s8(*(int8x8_t *)v19.i8, (int8x8_t)v128, 4uLL);
  float32x2_t v195 = v128;
  float32x4_t v196 = v126;
  float32x2_t v198 = *(float32x2_t *)v19.i8;
  float32x4_t v199 = v22;
  int8x8_t v131 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.i8, (float32x2_t)vext_s8(*(int8x8_t *)v124.f32, (int8x8_t)v129, 4uLL)), v130, *(float32x2_t *)v124.f32);
  *(int8x8_t *)v124.f32 = vext_s8(v131, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v124.f32, v128), *(float32x2_t *)v19.i8, v129), 4uLL);
  v124.i64[1] = v131.u32[0];
  float32x4_t v132 = vmlsq_f32(v127, v22, v124);
  v132.i64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u32[0];
  float32x4_t v133 = vmulq_f32(v125, v126);
  v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
  float32x4_t v134 = vmlaq_n_f32(v132, v126, vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32).f32[0]);
  float32x4_t v135 = vaddq_f32(v134, v134);
  v135.i32[3] = 0;
  uint64_t v220 = *(void *)(v17 + 80);
  float32x4_t v207 = v135;
  __int16 v136 = *a8;
  float32x2_t v206 = 0;
  float32x4_t v204 = 0u;
  int8x16_t v205 = 0u;
  v203[1] = &v223;
  v202[1] = &v210;
  v203[0] = &unk_26E7287F0;
  v202[0] = &unk_26E728850;
  float32x4_t v137 = vsubq_f32(v34, v62);
  float32x4_t v201 = v137;
  v137.f32[0] = *(float *)v53.i32 + a10;
  int32x2_t v197 = (int32x2_t)v25;
  BOOL v138 = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v203, (uint64_t)v202, &v201, &v208, &v207, &v206, &v204, &v205, *(int32x2_t *)v137.f32, (v136 & 0x200) != 0);
  if (v138)
  {
    float32x4_t v139 = (float32x4_t)vdupq_lane_s32(v197, 0);
    *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float32x2_t v140 = v206;
    if (v206.f32[0] <= 0.0)
    {
      if ((v136 & 0x200) != 0)
      {
        float32x4_t v166 = (float32x4_t)v205;
        float32x4_t v167 = vmulq_n_f32((float32x4_t)v205, *(float *)v197.i32);
        v167.i32[3] = 0;
        float32x2_t v168 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
        int8x8_t v169 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v205.i8, (int8x8_t)v168, 4uLL)), v130, *(float32x2_t *)v205.i8);
        *(int8x8_t *)v170.f32 = vext_s8(v169, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v205.i8), v198, v168), 4uLL);
        v170.i64[1] = v169.u32[0];
        float32x4_t v171 = vmlaq_f32(v167, v199, v170);
        *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        v171.i64[1] = vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL).u32[0];
        float32x4_t v172 = vmulq_f32(v196, v166);
        v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
        float32x4_t v173 = vmlaq_n_f32(v171, v196, vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32).f32[0]);
        v173.i64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
        v172.i64[0] = 0x4000000040000000;
        v172.i64[1] = 0x4000000040000000;
        float32x4_t v174 = vmlaq_f32(v200, v172, v173);
        float32x4_t v175 = vmulq_f32(v139, v204);
        v175.i32[3] = 0;
        v173.i64[0] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
        *(float32x2_t *)v170.f32 = vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v173.f32, 4uLL)), v130, *(float32x2_t *)v204.f32);
        *(int8x8_t *)v173.f32 = vext_s8(*(int8x8_t *)v170.f32, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v204.f32), v198, *(float32x2_t *)v173.f32), 4uLL);
        v173.i64[1] = v170.u32[0];
        float32x4_t v176 = vmlaq_f32(v175, v199, v173);
        v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        float32x4_t v177 = vmulq_f32(v196, v204);
        float32x2_t v180 = (float32x2_t)vpaddq_f32(v177, v177).u64[0];
        float32x4_t v178 = vmlaq_n_f32(v176, v196, vpadd_f32(v180, v180).f32[0]);
        float32x4_t v179 = vaddq_f32(v178, v178);
        v179.i32[3] = 0;
        v180.i32[0] = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u32[0];
        float32x4_t v181 = vmulq_f32(v179, v179);
        v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
        float32x2_t v182 = vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32);
        float32x2_t v183 = vrsqrte_f32(v182);
        int v184 = 4;
        do
        {
          float32x2_t v183 = vmul_f32(v183, vrsqrts_f32(vmul_f32(v183, v183), v182));
          --v184;
        }
        while (v184);
        v180.i32[1] = 0;
        float32x2_t v185 = vmul_f32(v182, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v182), 0), (int8x8_t)_D8, (int8x8_t)v183));
        float32x2_t v186 = vrecpe_f32(v185);
        int v187 = 4;
        do
        {
          float32x2_t v186 = vmul_f32(v186, vrecps_f32(v185, v186));
          --v187;
        }
        while (v187);
        *(float32x2_t *)&v174.u32[2] = v180;
        int8x16_t v188 = (int8x16_t)vmulq_n_f32(v179, v186.f32[0]);
        float32x4_t v189 = (float32x4_t)v188;
        v189.i32[3] = 0;
        float32x4_t v190 = vmlsq_lane_f32(v174, v189, v140, 0);
        *(void *)(a7 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v188, v188, 4uLL).u64[0];
        v190.i32[3] = v188.i32[0];
        *(float32x4_t *)(a7 + 24) = v190;
        *(_DWORD *)(a7 + 48) = v140.i32[0];
      }
      else
      {
        *(_DWORD *)(a7 + 48) = 0;
        float v191 = -a6[1].f32[0];
        *(float32x2_t *)(a7 + 36) = vneg_f32(*a6);
        *(float *)(a7 + 44) = v191;
      }
      *(_DWORD *)(a7 + 16) = -1;
    }
    else
    {
      float32x4_t v141 = vmulq_n_f32((float32x4_t)v205, *(float *)v197.i32);
      v141.i32[3] = 0;
      float32x2_t v142 = (float32x2_t)vextq_s8(v205, v205, 8uLL).u64[0];
      int8x8_t v143 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v205.i8, (int8x8_t)v142, 4uLL)), v130, *(float32x2_t *)v205.i8);
      *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v205.i8), v198, v142), 4uLL);
      v144.i64[1] = v143.u32[0];
      float32x4_t v145 = vmlaq_f32(v141, v199, v144);
      v145.i64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u32[0];
      float32x4_t v146 = vmulq_f32(v196, (float32x4_t)v205);
      v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
      float32x4_t v147 = vmlaq_n_f32(v145, v196, vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32).f32[0]);
      v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
      v146.i64[0] = 0x4000000040000000;
      v146.i64[1] = 0x4000000040000000;
      float32x4_t v148 = vmlaq_f32(v200, v146, v147);
      uint64_t v149 = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u32[0];
      float32x4_t v150 = vmulq_f32(v139, v204);
      v150.i32[3] = 0;
      v147.i64[0] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
      int8x8_t v151 = (int8x8_t)vmls_f32(vmul_f32(v198, (float32x2_t)vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v147.f32, 4uLL)), v130, *(float32x2_t *)v204.f32);
      *(int8x8_t *)v147.f32 = vext_s8(v151, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v204.f32), v198, *(float32x2_t *)v147.f32), 4uLL);
      v147.i64[1] = v151.u32[0];
      float32x4_t v152 = vmlaq_f32(v150, v199, v147);
      v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
      float32x4_t v153 = vmulq_f32(v196, v204);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      float32x4_t v154 = vmlaq_n_f32(v152, v196, vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32).f32[0]);
      float32x4_t v155 = vaddq_f32(v154, v154);
      v155.i32[3] = 0;
      float32x4_t v156 = vmulq_f32(v155, v155);
      v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
      float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
      float32x2_t v158 = vrsqrte_f32(v157);
      *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      int v159 = 4;
      do
      {
        float32x2_t v158 = vmul_f32(v158, vrsqrts_f32(vmul_f32(v158, v158), v157));
        --v159;
      }
      while (v159);
      float32x2_t v160 = vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v157), 0), (int8x8_t)_D8, (int8x8_t)v158));
      float32x2_t v161 = vrecpe_f32(v160);
      int v162 = 4;
      do
      {
        float32x2_t v161 = vmul_f32(v161, vrecps_f32(v160, v161));
        --v162;
      }
      while (v162);
      v148.i64[1] = v149;
      LODWORD(v163) = vmul_f32(*(float32x2_t *)&a9, v140).u32[0];
      int8x16_t v164 = (int8x16_t)vmulq_n_f32(v155, v161.f32[0]);
      float32x4_t v165 = vmlaq_n_f32(v148, v193, v163);
      v165.i32[3] = v164.i32[0];
      *(float32x4_t *)(a7 + 24) = v165;
      *(void *)(a7 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v164, v164, 4uLL).u64[0];
      *(float *)(a7 + 48) = v163;
      if ((*((unsigned char *)a8 + 1) & 4) != 0)
      {
        unsigned int v209 = *(unsigned __int8 *)(v17 + 71);
        *(_DWORD *)(a7 + 16) = computeSweepConvexPlane(a1, v17 + 32, &v209, a2->f32, (float *)(a7 + 24), (float *)a6);
        *(_WORD *)(a7 + 20) |= 0x400u;
      }
    }
  }
  return v138;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x4_t *a7, int8x16_t *a8, int32x2_t a9, char a10)
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  float32x4_t v14 = *a3;
  int8x16_t v216 = (int8x16_t)vmlaq_f32(*a4, (float32x4_t)0, *a5);
  unsigned int v227 = 1;
  float32x4_t v15 = vmulq_f32(v14, v14);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), (int8x16_t)v14, (int8x16_t)xmmword_23435FD50);
  float32x4_t v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v19 = vrsqrte_f32(v18);
  int v20 = 4;
  do
  {
    float32x2_t v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  unsigned __int32 v21 = vextq_s8(v216, v216, 8uLL).u32[0];
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x2_t v30 = (float32x2_t)vdup_lane_s32(a9, 0);
  v31.i64[0] = v216.i64[0];
  v31.i64[1] = v21;
  float32x4_t v217 = v31;
  float32x4_t v32 = vmulq_n_f32(v16, v28.f32[0]);
  v32.i32[3] = 0;
  float32x4_t v226 = v32;
  float32x4_t v33 = vnegq_f32(v32);
  v33.i32[3] = 0;
  float32x4_t v34 = *(float32x4_t **)(a1 + 8);
  float32x4_t v35 = v34[3];
  float32x4_t v36 = v34[4];
  float32x4_t v37 = vmulq_f32(v33, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x4_t v38 = vmulq_f32(v33, v36);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  float32x4_t v222 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32)), 0), (int8x16_t)v35, (int8x16_t)v36);
  *(double *)v39.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v226);
  float32x4_t v40 = v39;
  float32x4_t v41 = vsubq_f32(v222, v39);
  int8x16_t v230 = (int8x16_t)v41;
  float32x4_t v231 = 0u;
  memset(v232, 0, sizeof(v232));
  float32x4_t v238 = v222;
  float32x4_t v239 = 0u;
  float32x4_t v240 = 0u;
  long long v241 = 0u;
  float32x4_t v42 = vnegq_f32(v41);
  v42.i32[3] = 0;
  float32x4_t v234 = v40;
  float32x4_t v235 = 0u;
  float32x4_t v236 = 0u;
  long long v237 = 0u;
  float32x2_t v43 = (const float *)(*(void *)(a2 + 8) + 24);
  *(float32x2_t *)v40.f32 = vld1_dup_f32(v43);
  *(float32x2_t *)v40.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v40.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v44 = vadd_f32(v30, *(float32x2_t *)v40.f32);
  float32x2_t v45 = vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  float32x2_t v46 = vmul_f32(v44, v44);
  float32x4_t v47 = vmulq_f32(v42, v42);
  float32x4_t v48 = vpaddq_f32(v47, v47);
  float32x2_t v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
  float32x2_t v208 = v45;
  *(int32x2_t *)v48.f32 = vcgt_f32(v49, v45);
  int32x4_t v50 = vdupq_lane_s32(*(int32x2_t *)v48.f32, 0);
  v48.i32[0] = -1;
  int32x4_t v206 = (int32x4_t)v48;
  float32x4_t v51 = v41;
  v52.i64[0] = -1;
  v52.i64[1] = -1;
  float32x4_t v53 = v42;
  int8x16_t v212 = (int8x16_t)v42;
  float32x2_t v213 = 0;
  while (1)
  {
    int8x16_t v54 = (int8x16_t)v41;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
    *(int16x4_t *)v55.i8 = vmovn_s32(vceqq_s32(v50, v55));
    unsigned __int32 v56 = vuzp1_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)v55.i8).u32[0];
    if (v56 != -1) {
      break;
    }
    float32x4_t v57 = vmulq_f32(v53, v53);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    float32x2_t v58 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
    float32x2_t v59 = vrsqrte_f32(v58);
    int v60 = 4;
    do
    {
      float32x2_t v59 = vmul_f32(v59, vrsqrts_f32(vmul_f32(v59, v59), v58));
      --v60;
    }
    while (v60);
    int8x16_t v218 = v54;
    float32x2_t v61 = vmul_f32(v58, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v58), 0), (int8x8_t)_D8, (int8x8_t)v59));
    float32x2_t v62 = vrecpe_f32(v61);
    int v63 = 4;
    do
    {
      float32x2_t v62 = vmul_f32(v62, vrecps_f32(v61, v62));
      --v63;
    }
    while (v63);
    float32x4_t v215 = v53;
    float32x4_t v64 = vmulq_n_f32(v53, v62.f32[0]);
    v64.i32[3] = 0;
    float32x4_t v219 = v64;
    float32x4_t v65 = vnegq_f32(v64);
    v65.i32[3] = 0;
    float32x4_t v225 = v65;
    int v66 = *(float32x4_t **)(a1 + 8);
    float32x4_t v67 = v66[3];
    float32x4_t v68 = v66[4];
    float32x4_t v69 = vmulq_f32(v64, v67);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    float32x4_t v70 = vmulq_f32(v64, v68);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    float32x4_t v223 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32)), 0), (int8x16_t)v67, (int8x16_t)v68);
    *(double *)v71.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
    float32x4_t v72 = v223;
    float32x4_t v73 = vaddq_f32(v217, v71);
    float32x4_t v41 = vsubq_f32(v223, v73);
    float32x4_t v74 = vnegq_f32(v41);
    v74.i32[3] = 0;
    float32x4_t v75 = vmulq_f32(v219, v74);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    *(float32x2_t *)v76.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), v44);
    if (v76.f32[0] > 0.0)
    {
      float32x4_t v77 = *a5;
      float32x4_t v78 = vmulq_f32(v219, *a5);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      float32x2_t v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
      if (v79.f32[0] >= 0.0) {
        goto LABEL_71;
      }
      float32x2_t v80 = vrecpe_f32(v79);
      int v81 = 4;
      do
      {
        float32x2_t v80 = vmul_f32(v80, vrecps_f32(v79, v80));
        --v81;
      }
      while (v81);
      float32x2_t v82 = vsub_f32(v213, vmul_f32(*(float32x2_t *)v76.f32, v80));
      *(int32x2_t *)v76.f32 = vcgt_f32(v82, v213);
      if (v76.i8[0])
      {
        if (v82.f32[0] > 1.0)
        {
LABEL_71:
          float32x2_t v182 = 0;
          int8x16_t v183 = 0uLL;
          float32x4_t v179 = 0uLL;
          goto LABEL_77;
        }
        float32x4_t v83 = vmlaq_n_f32(*a4, v77, v82.f32[0]);
        v83.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
        float32x4_t v220 = v83;
        float32x4_t v84 = vsubq_f32(v83, v217);
        float32x4_t v234 = vaddq_f32(v234, v84);
        float32x4_t v235 = vaddq_f32(v235, v84);
        float32x4_t v236 = vaddq_f32(v236, v84);
        int8x16_t v230 = (int8x16_t)vsubq_f32(v238, v234);
        float32x4_t v231 = vsubq_f32(v239, v235);
        v232[0] = vsubq_f32(v240, v236);
        float32x2_t v214 = v82;
        *(double *)v85.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
        float32x4_t v72 = v223;
        float32x4_t v73 = vaddq_f32(v220, v85);
        float32x4_t v41 = vsubq_f32(v223, v73);
        float32x2_t v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v212 = (int8x16_t)v215;
        float32x4_t v217 = v220;
        float32x2_t v86 = v214;
      }
      else
      {
        float32x2_t v86 = v82;
      }
      float32x2_t v213 = v86;
    }
    uint64_t v87 = v227;
    *(&v238 + v227) = v72;
    *(&v234 + v87) = v73;
    unsigned int v227 = v87 + 1;
    *(&v230 + v87) = (int8x16_t)v41;
    if (v87 == 3)
    {
      physx::Gu::closestPtPointTetrahedron((float32x4_t *)&v230, &v238, &v234, (int *)&v227);
LABEL_28:
      float32x4_t v51 = (float32x4_t)v218;
      goto LABEL_62;
    }
    if (v87 != 2)
    {
      float32x4_t v51 = (float32x4_t)v218;
      if (v87 != 1) {
        goto LABEL_62;
      }
      float32x4_t v41 = (float32x4_t)v230;
      float32x4_t v88 = vsubq_f32(v231, (float32x4_t)v230);
      float32x4_t v89 = vmulq_f32(v88, v88);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v90), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
      {
        float32x4_t v91 = vnegq_f32((float32x4_t)v230);
        v91.i32[3] = 0;
        float32x4_t v92 = vmulq_f32(v91, v88);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        float32x2_t v94 = vrecpe_f32(v90);
        int v95 = 4;
        do
        {
          float32x2_t v94 = vmul_f32(v94, vrecps_f32(v90, v94));
          --v95;
        }
        while (v95);
        float32x4_t v41 = vmlaq_n_f32((float32x4_t)v230, v88, vmax_f32(vmin_f32(vmul_f32(v93, v94), _D8), 0).f32[0]);
LABEL_43:
        v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        goto LABEL_62;
      }
LABEL_44:
      unsigned int v227 = 1;
      goto LABEL_62;
    }
    float32x4_t v41 = (float32x4_t)v230;
    float32x4_t v96 = vsubq_f32(v231, (float32x4_t)v230);
    float32x4_t v97 = vsubq_f32(v232[0], (float32x4_t)v230);
    int8x8_t v99 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v96.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v96, (int8x16_t)v96, 4uLL), *(float32x2_t *)v97.f32);
    *(int8x8_t *)v98.f32 = vext_s8(v99, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL), *(float32x2_t *)v97.f32), *(float32x2_t *)v96.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)), 4uLL);
    v99.i32[1] = 0;
    unsigned int v227 = 3;
    float32x2_t v100 = vpadd_f32(vmul_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32), vmul_f32((float32x2_t)v99.u32[0], (float32x2_t)v99.u32[0]));
    float32x2_t v101 = vpadd_f32(v100, v100);
    if (v101.f32[0] <= 0.00000011921)
    {
      unsigned int v227 = 2;
      float32x4_t v138 = vmulq_f32(v96, v96);
      v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
      float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
      float32x4_t v51 = (float32x4_t)v218;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v139), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
      {
        float32x4_t v140 = vnegq_f32((float32x4_t)v230);
        v140.i32[3] = 0;
        float32x4_t v141 = vmulq_f32(v140, v96);
        v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
        float32x2_t v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
        float32x2_t v143 = vrecpe_f32(v139);
        int v144 = 4;
        do
        {
          float32x2_t v143 = vmul_f32(v143, vrecps_f32(v139, v143));
          --v144;
        }
        while (v144);
        float32x4_t v41 = vmlaq_n_f32((float32x4_t)v230, v96, vmax_f32(vmin_f32(vmul_f32(v142, v143), _D8), 0).f32[0]);
        goto LABEL_43;
      }
      goto LABEL_44;
    }
    if (v101.f32[0] == 0.0)
    {
      float32x4_t v41 = 0uLL;
      goto LABEL_28;
    }
    *(int8x8_t *)&v98.u32[2] = v99;
    float32x2_t v102 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
    float32x2_t v103 = (float32x2_t)vextq_s8((int8x16_t)v232[0], (int8x16_t)v232[0], 8uLL).u64[0];
    float32x2_t v104 = (float32x2_t)vextq_s8((int8x16_t)v232[0], (int8x16_t)v232[0], 4uLL).u64[0];
    float32x2_t v105 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 4uLL).u64[0];
    int8x8_t v106 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v231.f32, v104), v105, *(float32x2_t *)v232[0].f32);
    *(int8x8_t *)v107.f32 = vext_s8(v106, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v232[0].f32), *(float32x2_t *)v231.f32, v103), 4uLL);
    v107.i64[1] = v106.u32[0];
    float32x2_t v108 = (float32x2_t)vextq_s8(v230, v230, 8uLL).u64[0];
    float32x2_t v109 = (float32x2_t)vextq_s8(v230, v230, 4uLL).u64[0];
    int8x8_t v110 = (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v232[0].f32), v104, *(float32x2_t *)v230.i8);
    *(int8x8_t *)v111.f32 = vext_s8(v110, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.i8, v103), *(float32x2_t *)v232[0].f32, v108), 4uLL);
    v111.i64[1] = v110.u32[0];
    int8x8_t v112 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.i8, v105), v109, *(float32x2_t *)v231.f32);
    *(int8x8_t *)v113.f32 = vext_s8(v112, (int8x8_t)vmls_f32(vmul_f32(v108, *(float32x2_t *)v231.f32), *(float32x2_t *)v230.i8, v102), 4uLL);
    v113.i64[1] = v112.u32[0];
    float32x4_t v114 = vmulq_f32(v107, v98);
    v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
    float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
    float32x4_t v116 = vmulq_f32(v111, v98);
    v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
    float32x2_t v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
    float32x4_t v118 = vmulq_f32(v113, v98);
    v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
    float32x2_t v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v117), (int8x8_t)vcgez_f32(v115)), (int8x8_t)vcgez_f32(v119)), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
    {
      float32x4_t v120 = vnegq_f32((float32x4_t)v230);
      v120.i32[3] = 0;
      float32x4_t v121 = vnegq_f32(v231);
      v121.i32[3] = 0;
      float32x4_t v122 = vmulq_f32(v120, v96);
      v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
      float32x2_t v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
      float32x4_t v124 = vmulq_f32(v96, v121);
      v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
      float32x2_t v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v123), (int8x8_t)vclez_f32(v125)), (int8x8_t)vclez_f32(v119)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
      {
        float32x2_t v149 = vsub_f32(v123, v125);
        float32x2_t v150 = vrecpe_f32(v149);
        int v151 = 4;
        do
        {
          float32x2_t v150 = vmul_f32(v150, vrecps_f32(v149, v150));
          --v151;
        }
        while (v151);
        uint64_t v137 = 0;
        float32x4_t v41 = vmlaq_n_f32((float32x4_t)v230, v96, vmul_f32(v123, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v149), (float32x2_t)0x3400000034000000), (int8x8_t)v150, 0)).f32[0]);
        v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        unsigned int v152 = 2;
        uint64_t v136 = 1;
      }
      else
      {
        float32x4_t v126 = vnegq_f32(v232[0]);
        v126.i32[3] = 0;
        float32x4_t v127 = vmulq_f32(v121, v97);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        float32x2_t v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
        float32x4_t v129 = vmulq_f32(v96, v126);
        v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
        float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
        float32x4_t v131 = vmulq_f32(v97, v126);
        v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
        float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v128, v125), (int8x8_t)vcge_f32(v130, v132)), (int8x8_t)vclez_f32(v115)), 0), *(int8x8_t *)v230.i8).u32[0] != -1)
        {
          float32x4_t v133 = vmulq_f32(v120, v97);
          v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
          float32x2_t v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v134), (int8x8_t)vclez_f32(v132)), (int8x8_t)vclez_f32(v117)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
          {
            float32x2_t v158 = vsub_f32(v134, v132);
            float32x2_t v159 = vrecpe_f32(v158);
            int v160 = 4;
            float32x4_t v51 = (float32x4_t)v218;
            do
            {
              float32x2_t v159 = vmul_f32(v159, vrecps_f32(v158, v159));
              --v160;
            }
            while (v160);
            uint64_t v137 = 0;
            float32x4_t v41 = vmlaq_n_f32((float32x4_t)v230, v97, vmul_f32(v134, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
            v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
            uint64_t v136 = 2;
          }
          else
          {
            float32x4_t v51 = (float32x4_t)v218;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v134), (int8x8_t)vclez_f32(v123)), 0), *(int8x8_t *)v230.i8).u32[0] == -1)
            {
              uint64_t v137 = 0;
              uint64_t v136 = 1;
            }
            else
            {
              *(int16x4_t *)v41.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v125, v128), (int8x8_t)vcgez_f32(v125)), 0);
              *(int8x8_t *)v41.f32 = vuzp1_s8(*(int8x8_t *)v41.f32, *(int8x8_t *)v41.f32);
              __int32 v135 = v41.i32[0];
              float32x4_t v41 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v41, v206), 0), (int8x16_t)v231, (int8x16_t)v232[0]);
              uint64_t v136 = 1;
              if (v135 == -1) {
                uint64_t v137 = 1;
              }
              else {
                uint64_t v137 = 2;
              }
            }
          }
          unsigned int v152 = v136;
          goto LABEL_61;
        }
        float32x2_t v153 = vsub_f32(v128, v125);
        float32x2_t v154 = vadd_f32(v153, vsub_f32(v130, v132));
        float32x2_t v155 = vrecpe_f32(v154);
        int v156 = 4;
        do
        {
          float32x2_t v155 = vmul_f32(v155, vrecps_f32(v154, v155));
          --v156;
        }
        while (v156);
        int8x16_t v157 = (int8x16_t)vmlaq_n_f32(v231, vsubq_f32(v232[0], v231), vmul_f32(v153, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v154), (float32x2_t)0x3400000034000000), (int8x8_t)v155, 0)).f32[0]);
        v157.i64[1] = vextq_s8(v157, v157, 8uLL).u32[0];
        unsigned int v152 = 2;
        uint64_t v136 = 2;
        uint64_t v137 = 1;
        float32x4_t v41 = (float32x4_t)v157;
      }
      float32x4_t v51 = (float32x4_t)v218;
LABEL_61:
      float32x4_t v161 = *((float32x4_t *)&v230 + v136);
      float32x4_t v162 = *(&v238 + v137);
      float32x4_t v163 = *(&v238 + v136);
      float32x4_t v164 = *(&v234 + v137);
      float32x4_t v165 = *(&v234 + v136);
      int8x16_t v230 = *(&v230 + v137);
      float32x4_t v231 = v161;
      float32x4_t v238 = v162;
      float32x4_t v239 = v163;
      float32x4_t v234 = v164;
      float32x4_t v235 = v165;
      unsigned int v227 = v152;
      goto LABEL_62;
    }
    float32x4_t v145 = vmulq_f32((float32x4_t)v230, v98);
    float32x2_t v146 = vrecpe_f32(v101);
    int v147 = 4;
    float32x4_t v51 = (float32x4_t)v218;
    do
    {
      float32x2_t v146 = vmul_f32(v146, vrecps_f32(v101, v146));
      --v147;
    }
    while (v147);
    float32x2_t v148 = (float32x2_t)vpaddq_f32(v145, v145).u64[0];
    float32x4_t v41 = vmulq_n_f32(v98, vmul_f32(v146, vpadd_f32(v148, v148)).f32[0]);
    v41.i32[3] = 0;
LABEL_62:
    float32x4_t v53 = vnegq_f32(v41);
    v53.i32[3] = 0;
    float32x4_t v166 = vmulq_f32(v41, v41);
    v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
    float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
    int8x8_t v168 = (int8x8_t)vcgt_f32(v49, v167);
    int8x16_t v52 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v168, (int8x8_t)0x100000001), 0);
    int32x4_t v50 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v167, v46), v168), 0);
    float32x2_t v49 = v167;
  }
  int8x16_t v169 = (int8x16_t)v51;
  uint64_t v170 = *(void *)(a1 + 8);
  float32x4_t v171 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v49, v208), 0), v52), 0x1FuLL)), (int8x16_t)v53, v212);
  float32x4_t v172 = vmulq_f32(v171, v171);
  float32x4_t v76 = vpaddq_f32(v172, v172);
  *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
  float32x2_t v173 = vrsqrte_f32(*(float32x2_t *)v76.f32);
  int v174 = 4;
  do
  {
    float32x2_t v173 = vmul_f32(v173, vrsqrts_f32(vmul_f32(v173, v173), *(float32x2_t *)v76.f32));
    --v174;
  }
  while (v174);
  float32x2_t v175 = vmul_f32(*(float32x2_t *)v76.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v76.f32), 0), (int8x8_t)_D8, (int8x8_t)v173));
  *(float32x2_t *)v76.f32 = vrecpe_f32(v175);
  int v176 = 4;
  do
  {
    *(float32x2_t *)v76.f32 = vmul_f32(*(float32x2_t *)v76.f32, vrecps_f32(v175, *(float32x2_t *)v76.f32));
    --v176;
  }
  while (v176);
  int8x16_t v177 = (int8x16_t)vdupq_n_s32(-*(char *)(v170 + 32));
  int8x16_t v178 = (int8x16_t)vmulq_n_f32(v171, v76.f32[0]);
  v178.i32[3] = 0;
  float32x4_t v179 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v175), 0), v178));
  v179.i32[3] = 0;
  float32x4_t v180 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v52, 0x1FuLL)), v54, v169);
  float32x4_t v225 = v180;
  if (v227 == 3)
  {
    float32x2_t v228 = 0;
    float32x2_t v229 = 0;
    int8x16_t v221 = v177;
    float32x4_t v224 = v179;
    physx::Gu::barycentricCoordinates(&v225, (float32x4_t *)&v230, &v231, v232, &v229, &v228);
    int8x16_t v177 = v221;
    float32x4_t v179 = v224;
    v52.i32[1] = v238.i32[1];
    float32x4_t v184 = vmulq_n_f32(vsubq_f32(v239, v238), v229.f32[0]);
    v184.i32[3] = 0;
    *(float32x2_t *)v76.f32 = v228;
    float32x4_t v185 = vmulq_n_f32(vsubq_f32(v240, v238), v228.f32[0]);
    v185.i32[3] = 0;
    float32x4_t v181 = vaddq_f32(v238, vaddq_f32(v184, v185));
    uint64_t v170 = *(void *)(a1 + 8);
    float32x2_t v182 = v213;
  }
  else if (v227 == 2)
  {
    v76.i64[1] = v231.i64[1];
    float32x4_t v186 = vsubq_f32((float32x4_t)v230, v180);
    float32x4_t v187 = vsubq_f32(vsubq_f32(v231, v180), v186);
    float32x4_t v188 = vmulq_f32(v187, v187);
    v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
    *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
    float32x2_t v189 = vrecpe_f32(*(float32x2_t *)v76.f32);
    int v190 = 4;
    float32x2_t v182 = v213;
    do
    {
      float32x2_t v189 = vmul_f32(v189, vrecps_f32(*(float32x2_t *)v76.f32, v189));
      --v190;
    }
    while (v190);
    *(int32x2_t *)v76.f32 = vcgtz_f32(*(float32x2_t *)v76.f32);
    float32x4_t v191 = vnegq_f32(v186);
    v191.i32[3] = 0;
    float32x4_t v192 = vmulq_f32(v191, v187);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    float32x4_t v181 = vmlaq_n_f32(v238, vsubq_f32(v239, v238), vmul_f32((float32x2_t)vbsl_s8(*(int8x8_t *)v76.f32, (int8x8_t)v189, 0), vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32)).f32[0]);
    v52.i32[1] = 0;
    v181.i64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v181 = 0uLL;
    float32x2_t v182 = v213;
    if (v227 == 1) {
      float32x4_t v181 = v238;
    }
  }
  v52.i32[0] = *(_DWORD *)(v170 + 16);
  float32x4_t v77 = vmlsq_lane_f32(v181, v179, *(float32x2_t *)v52.i8, 0);
  v73.i32[1] = 0;
  v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
  int8x16_t v183 = vbslq_s8(v177, (int8x16_t)v77, (int8x16_t)v181);
LABEL_77:
  if (v56 != -1)
  {
    *a6 = v182;
    if (v182.f32[0] == 0.0 && a10)
    {
      uint64_t v193 = *(void *)(a1 + 8);
      uint64_t v194 = *(void *)(a2 + 8);
      v73.i32[0] = 1120403456;
      *(float *)v183.i32 = (float)(*(float *)(v193 + 16) + *(float *)(v194 + 16)) * 100.0;
      *(int32x2_t *)v226.f32 = vdup_lane_s32(*(int32x2_t *)v183.i8, 0);
      v228.i8[0] = 0;
      float32x2_t v233 = 0;
      int8x16_t v230 = 0u;
      float32x4_t v231 = 0u;
      v232[0] = 0u;
      v238.i64[0] = (uint64_t)&unk_26E7287F0;
      v238.i64[1] = v193;
      v234.i64[0] = (uint64_t)&unk_26E728850;
      v234.i64[1] = v194;
      if (physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)&v238, (uint64_t)&v234, a3, (uint64_t *)&v226, 0, &v225, &v229, &v228, 0.0, *(double *)v73.i64, *(int8x8_t *)v77.f32, v76, (uint64_t)&v230) != 5)goto LABEL_81; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration(a1) - 5 > 1)
      {
        float32x4_t v198 = vnegq_f32(*a5);
        v198.i32[3] = 0;
        float32x4_t v199 = vmulq_f32(v198, v198);
        v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
        float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
        float32x2_t v201 = vrsqrte_f32(v200);
        int v202 = 4;
        do
        {
          float32x2_t v201 = vmul_f32(v201, vrsqrts_f32(vmul_f32(v201, v201), v200));
          --v202;
        }
        while (v202);
        float32x2_t v203 = vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v200), 0), _D8, (int8x8_t)v201));
        float32x2_t v204 = vrecpe_f32(v203);
        int v205 = 4;
        do
        {
          float32x2_t v204 = vmul_f32(v204, vrecps_f32(v203, v204));
          --v205;
        }
        while (v205);
        float32x4_t v179 = vmulq_n_f32(v198, v204.f32[0]);
        v179.i32[3] = 0;
        float32x2_t v195 = 0;
        int8x16_t v183 = 0uLL;
      }
      else
      {
LABEL_81:
        float32x2_t v195 = v233;
        int8x16_t v183 = v230;
        float32x4_t v179 = v232[0];
      }
      *a6 = vmin_f32(v195, 0);
    }
    *a8 = v183;
    *a7 = v179;
  }
  return v56 != -1;
}

uint64_t sweepBox_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, _WORD *a10)
{
  *(void *)&v60[76] = *MEMORY[0x263EF8340];
  *(_DWORD *)(a9 + 16) = -1;
  float v17 = a4[2];
  float v16 = a4[3];
  float v18 = *a4;
  float v19 = a4[1];
  float v20 = (float)((float)(v16 * (float)(v16 + v16)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  float v21 = (float)((float)(v18 + v18) * v19) + (float)(v17 * (float)(v16 + v16));
  float v22 = (float)((float)(v18 + v18) * v17) - (float)(v19 * (float)(v16 + v16));
  float v23 = -(float)((float)((float)(a4[5] * v21) + (float)(a4[4] * v20)) + (float)(a4[6] * v22));
  float32x4_t v24 = a7 + 9;
  float32x2_t v25 = a7 + 12;
  float32x4_t v26 = a7 + 3;
  float32x2_t v27 = a7 + 6;
  physx::Gu::computeOBBPoints(v57, a7 + 9, a7 + 12, a7, a7 + 3, a7 + 6);
  uint64_t v28 = 0;
  int v29 = 0;
  float32x2_t v30 = (float *)&v58;
  float v31 = 3.4028e38;
  do
  {
    float v32 = (float)(v21 * *(v30 - 1)) + (float)(*(v30 - 2) * v20);
    float v33 = *v30;
    v30 += 3;
    float v34 = v32 + (float)(v33 * v22);
    if (v34 < v31)
    {
      float v31 = v34;
      int v29 = v28;
    }
    ++v28;
  }
  while (v28 != 8);
  float v35 = v23 - a2;
  if ((*a10 & 0x200) != 0)
  {
    if (v31 <= (float)-v35)
    {
      *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      physx::Gu::computeOBBPoints(v59, v24, v25, a7, v26, v27);
      int v45 = 0;
      float v46 = v35 + (float)((float)((float)(v21 * v59[1]) + (float)(v59[0] * v20)) + (float)(v59[2] * v22));
      float32x4_t v47 = (float *)v60;
      uint64_t v48 = -7;
      do
      {
        float v49 = (float)(v21 * *(v47 - 1)) + (float)(*(v47 - 2) * v20);
        float v50 = *v47;
        v47 += 3;
        float v51 = v35 + (float)(v49 + (float)(v50 * v22));
        if (v46 > v51)
        {
          float v46 = v51;
          int v45 = v48 + 8;
        }
      }
      while (!__CFADD__(v48++, 1));
      *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v21;
      *(float *)(a9 + 44) = v22;
      *(float *)(a9 + 48) = v46;
      float32x4_t v53 = &v59[3 * v45];
      float v54 = *v53 - (float)(v20 * v46);
      float v55 = v53[1] - (float)(v21 * v46);
      float v56 = v53[2] - (float)(v22 * v46);
      *(float *)(a9 + 24) = v54;
      *(float *)(a9 + 28) = v55;
      *(float *)(a9 + 32) = v56;
      *(float *)(a9 + 36) = v20;
      return 1;
    }
  }
  else if ((*a10 & 0x10) == 0 && v31 <= (float)-v35)
  {
    *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    *(_DWORD *)(a9 + 48) = 0;
    float v36 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v36;
    return 1;
  }
  float v37 = (float)((float)(v21 * a8->f32[1]) + (float)(a8->f32[0] * v20)) + (float)(a8[1].f32[0] * v22);
  if (v37 > -0.0000001 && v37 < 0.0000001) {
    return 0;
  }
  float32x4_t v38 = (float32x2_t *)&v57[3 * v29];
  float v39 = v38[1].f32[0];
  float32x2_t v40 = *v38;
  float v41 = (float)-(float)(v35
                      + (float)(vmlas_n_f32(vmuls_lane_f32(v21, *v38, 1), v20, COERCE_FLOAT(*v38)) + (float)(v39 * v22)))
      / v37;
  *(float *)(a9 + 48) = v41;
  float v42 = v39 + (float)(v41 * a8[1].f32[0]);
  *(float32x2_t *)(a9 + 24) = vadd_f32(v40, vmul_n_f32(*a8, v41));
  *(float *)(a9 + 32) = v42;
  if (v41 <= 0.0 || v41 > a1) {
    return 0;
  }
  *(float *)(a9 + 36) = v20;
  *(float *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = v21;
  *(float *)(a9 + 44) = v22;
  *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
  return 1;
}

BOOL sweepBox_ConvexGeom(uint64_t a1, float32x4_t *a2, float32_t a3, float a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  v11.f32[0] = a3;
  BOOL v17 = 0;
  uint64_t v239 = *MEMORY[0x263EF8340];
  uint64_t v18 = *(void *)(a1 + 32);
  float32x4_t v19 = *a6;
  v20.i64[0] = a6[1].i64[0];
  v20.i32[2] = a6[1].i32[2];
  v21.i64[0] = a2[1].i64[0];
  v21.i32[2] = a2[1].i32[2];
  float32x4_t v224 = 0uLL;
  uint64_t v223 = 0;
  v20.i64[1] = v20.u32[2];
  int8x16_t v22 = *(int8x16_t *)a2;
  v21.i64[1] = v21.u32[2];
  float32x4_t v23 = vnegq_f32(*a2);
  float32x4_t v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  float32x4_t v25 = v23;
  v25.i32[3] = 0;
  float32x4_t v197 = v21;
  float32x4_t v26 = vsubq_f32(v20, v21);
  float32x2_t v27 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  float32x4_t v28 = vmulq_n_f32(v26, v27.f32[0]);
  v28.i32[3] = 0;
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  *(int8x8_t *)v10.i8 = vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v29, 4uLL);
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), *(float32x2_t *)v10.i8, *(float32x2_t *)v26.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v26.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  float32x4_t v32 = vmlaq_laneq_f32(v28, v31, *a2, 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  float32x4_t v33 = vmulq_f32(v25, v26);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  float32x4_t v34 = vmlaq_n_f32(v32, v25, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  float32x4_t v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  float32x4_t v36 = v19;
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_f32(v36, v25);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  float32x4_t v38 = vmulq_laneq_f32(v25, v19, 3);
  float32x4_t v39 = vmulq_laneq_f32(v36, *a2, 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  int8x8_t v40 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), *(float32x2_t *)v10.i8, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v19.f32 = vext_s8(v40, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, v29), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  *(int8x8_t *)&v19.u32[2] = v40;
  float32x4_t v41 = vaddq_f32(vaddq_f32(v38, v39), v19);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v36.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  float32x4_t v42 = vaddq_f32(v41, v41);
  float32x2_t v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v10.i8 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.f32), 0);
  *(float32x2_t *)v41.f32 = vmul_lane_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32, 1);
  float32x2_t v44 = vmul_laneq_f32(*(float32x2_t *)v36.f32, v42, 2);
  float32x2_t v45 = vmul_n_f32(*(float32x2_t *)v23.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v36.f32, v42.f32[0]);
  *(float32x2_t *)v38.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v43, *(float32x2_t *)v37.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v51 = vsub_f32(_D8, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v52.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, *(float32x2_t *)v41.f32), v44), (int8x8_t)vadd_f32(v45, *(float32x2_t *)v37.f32), 4uLL);
  v52.i64[1] = vsub_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32).u32[0];
  *(int8x8_t *)v37.f32 = vext_s8((int8x8_t)vsub_f32(v45, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v51, v44), 4uLL);
  v37.i64[1] = vadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32).u32[0];
  v10.i64[0] = *(void *)(a7 + 48);
  int32x4_t v53 = v10;
  v53.i32[2] = *(_DWORD *)(a7 + 56);
  int v216 = 3;
  int32x4_t v219 = v52;
  int32x4_t v220 = (int32x4_t)v37;
  *(int8x8_t *)v23.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32), 4uLL);
  v23.i64[1] = vsub_f32(v51, *(float32x2_t *)v41.f32).u32[0];
  int32x4_t v221 = (int32x4_t)v23;
  float32x4_t v222 = v35;
  *(int32x2_t *)v41.f32 = vdup_laneq_s32(v53, 2);
  v53.i32[3] = 0;
  float32x4_t v54 = *(float32x4_t *)(a1 + 4);
  float32x4_t v55 = v54;
  v55.i32[3] = 0;
  float32x4_t v56 = *(float32x4_t *)(a1 + 16);
  char v217 = 0;
  v212[0] = 0;
  v212[1] = 0;
  int32x4_t v218 = v53;
  *(float32x2_t *)v41.f32 = vpmin_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v10.i8);
  v41.f32[0] = vpmin_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0];
  float v213 = 0.15 * v41.f32[0];
  float v214 = 0.05 * v41.f32[0];
  float v215 = 0.05 * v41.f32[0];
  if (v54.f32[0] == 1.0 && v54.f32[1] == 1.0) {
    BOOL v17 = v54.f32[2] == 1.0;
  }
  char v228 = 0;
  float32x4_t v226 = 0u;
  long long v227 = 0u;
  uint64_t v235 = v18 + 32;
  uint64_t v237 = *(void *)(v18 + 72) + 20 * *(unsigned __int8 *)(v18 + 71);
  char v238 = *(unsigned char *)(v18 + 70);
  v57.i64[0] = *(void *)(v18 + 92);
  v57.i64[1] = *(unsigned int *)(v18 + 100);
  int32x4_t v58 = (int32x4_t)vmulq_f32(v55, v57);
  *(float32x2_t *)v58.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v58, 2), *(float32x2_t *)v58.i8);
  *(float *)v58.i32 = vpmin_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8).f32[0];
  *(float32x2_t *)&long long v227 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v58.i32);
  *((float *)&v227 + 2) = 0.025 * *(float *)v58.i32;
  if (v17)
  {
    long long v229 = xmmword_23435FD50;
    long long v230 = xmmword_23435FD60;
    long long v231 = xmmword_23435FD80;
    long long v232 = xmmword_23435FD50;
    long long v233 = xmmword_23435FD60;
    long long v234 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v59 = vrecpeq_f32(v55);
    int v60 = 4;
    do
    {
      float32x4_t v59 = vmulq_f32(v59, vrecpsq_f32(v59, v55));
      --v60;
    }
    while (v60);
    *(int32x2_t *)v61.f32 = vdup_lane_s32(*(int32x2_t *)v54.f32, 0);
    v61.i64[1] = v61.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v61, v55)), *(int8x8_t *)v54.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 1);
      float32x2_t v69 = (float32x2_t)vdup_laneq_s32((int32x4_t)v56, 2);
      float32x2_t v70 = (float32x2_t)vdup_laneq_s32((int32x4_t)v56, 3);
      float32x4_t v71 = vaddq_f32(v56, v56);
      float32x2_t v72 = vmul_lane_f32(v68, *(float32x2_t *)v71.f32, 1);
      float32x2_t v73 = vmul_laneq_f32(v69, v71, 2);
      float32x2_t v74 = vmul_n_f32(v68, v71.f32[0]);
      float32x2_t v75 = vmul_n_f32(v69, v71.f32[0]);
      float32x2_t v76 = vmul_n_f32(v70, v71.f32[0]);
      float32x2_t v77 = vmul_lane_f32(v69, *(float32x2_t *)v71.f32, 1);
      float32x2_t v78 = vmul_lane_f32(v70, *(float32x2_t *)v71.f32, 1);
      float32x2_t v79 = vmul_laneq_f32(v70, v71, 2);
      *(float32x2_t *)v71.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v71.f32), 0));
      *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v72), v73), (int8x8_t)vadd_f32(v74, v79), 4uLL);
      v80.i64[1] = vsub_f32(v75, v78).u32[0];
      int32x2_t v81 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v74, v79), (int8x8_t)vsub_f32(*(float32x2_t *)v71.f32, v73), 4uLL);
      int8x8_t v82 = (int8x8_t)vadd_f32(v75, v78);
      *(int8x8_t *)v83.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v80.f32, 0), (int8x8_t)v81, 4uLL);
      int8x8_t v84 = (int8x8_t)vdup_lane_s32(v81, 1);
      *(int32x2_t *)v85.f32 = v81;
      v85.i64[1] = vadd_f32(v77, v76).u32[0];
      *(int8x8_t *)v86.f32 = vext_s8(v82, (int8x8_t)vsub_f32(v77, v76), 4uLL);
      *(int8x8_t *)v87.f32 = vext_s8(*(int8x8_t *)v80.f32, v84, 4uLL);
      v86.i64[1] = vsub_f32(*(float32x2_t *)v71.f32, v72).u32[0];
      v83.i64[1] = vdup_lane_s32(*(int32x2_t *)v86.f32, 0).u32[0];
      v87.i64[1] = vdup_lane_s32(*(int32x2_t *)v86.f32, 1).u32[0];
      *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v80.u32[2], 0), (int8x8_t)v85.u32[2], 4uLL);
      v88.i64[1] = vdup_lane_s32(*(int32x2_t *)&v86.u32[2], 0).u32[0];
      float32x4_t v89 = vmulq_n_f32(v83, v54.f32[0]);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_lane_f32(v87, *(float32x2_t *)v54.f32, 1);
      v90.i32[3] = 0;
      float32x4_t v91 = vmulq_laneq_f32(v88, v54, 2);
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_n_f32(v89, v80.f32[0]);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_lane_f32(v90, *(float32x2_t *)v80.f32, 1);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_laneq_f32(v91, v80, 2);
      v94.i32[3] = 0;
      float32x4_t v62 = vaddq_f32(v94, vaddq_f32(v92, v93));
      float32x4_t v95 = vmulq_n_f32(v89, v85.f32[0]);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_lane_f32(v90, *(float32x2_t *)v85.f32, 1);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_laneq_f32(v91, v85, 2);
      v97.i32[3] = 0;
      float32x4_t v98 = vaddq_f32(v95, v96);
      float32x4_t v99 = vmulq_n_f32(v89, v86.f32[0]);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_lane_f32(v90, *(float32x2_t *)v86.f32, 1);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_laneq_f32(v91, v86, 2);
      v101.i32[3] = 0;
      float32x4_t v63 = vaddq_f32(v97, v98);
      float32x4_t v64 = vaddq_f32(v101, vaddq_f32(v99, v100));
      long long v229 = (__int128)v62;
      long long v230 = (__int128)v63;
      long long v231 = (__int128)v64;
      float32x4_t v102 = vmulq_n_f32(v83, v59.f32[0]);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_lane_f32(v87, *(float32x2_t *)v59.f32, 1);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_laneq_f32(v88, v59, 2);
      v104.i32[3] = 0;
      float32x4_t v105 = vmulq_n_f32(v102, v80.f32[0]);
      v105.i32[3] = 0;
      float32x4_t v106 = vmulq_lane_f32(v103, *(float32x2_t *)v80.f32, 1);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_laneq_f32(v104, v80, 2);
      v107.i32[3] = 0;
      float32x4_t v65 = vaddq_f32(v107, vaddq_f32(v105, v106));
      float32x4_t v108 = vmulq_n_f32(v102, v85.f32[0]);
      v108.i32[3] = 0;
      float32x4_t v109 = vmulq_lane_f32(v103, *(float32x2_t *)v85.f32, 1);
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_laneq_f32(v104, v85, 2);
      v110.i32[3] = 0;
      float32x4_t v111 = vmulq_n_f32(v102, v86.f32[0]);
      v111.i32[3] = 0;
      float32x4_t v112 = vmulq_lane_f32(v103, *(float32x2_t *)v86.f32, 1);
      v112.i32[3] = 0;
      float32x4_t v66 = vaddq_f32(v110, vaddq_f32(v108, v109));
      float32x4_t v113 = vmulq_laneq_f32(v104, v86, 2);
      v113.i32[3] = 0;
      float32x4_t v67 = vaddq_f32(v113, vaddq_f32(v111, v112));
    }
    else
    {
      v59.i32[3] = 0;
      float32x4_t v62 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD50);
      float32x4_t v63 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD60);
      float32x4_t v64 = vmulq_f32(v55, (float32x4_t)xmmword_23435FD80);
      long long v229 = (__int128)v62;
      long long v230 = (__int128)v63;
      long long v231 = (__int128)v64;
      float32x4_t v65 = vmulq_f32(v59, (float32x4_t)xmmword_23435FD50);
      float32x4_t v66 = vmulq_f32(v59, (float32x4_t)xmmword_23435FD60);
      float32x4_t v67 = vmulq_f32(v59, (float32x4_t)xmmword_23435FD80);
    }
    long long v233 = (__int128)v66;
    long long v234 = (__int128)v67;
    float32x4_t v114 = vmulq_f32(v62, (float32x4_t)0);
    v114.i32[3] = 0;
    float32x4_t v115 = vmulq_f32(v63, (float32x4_t)0);
    v115.i32[3] = 0;
    float32x4_t v116 = vmulq_f32(v64, (float32x4_t)0);
    v116.i32[3] = 0;
    long long v232 = (__int128)v65;
    float32x4_t v226 = vaddq_f32(v116, vaddq_f32(v115, v114));
  }
  *(float32x2_t *)v117.f32 = *a8;
  v117.i64[1] = a8[1].u32[0];
  float32x4_t v195 = v117;
  float32x2_t v196 = v11;
  float32x4_t v118 = vmulq_n_f32(v117, v11.f32[0]);
  v118.i32[3] = 0;
  float32x4_t v119 = vnegq_f32(v118);
  float32x4_t v120 = v119;
  v120.i32[3] = 0;
  float32x4_t v121 = (float32x4_t)v22;
  v121.i32[3] = 0;
  float32x4_t v122 = vmulq_n_f32(v120, v27.f32[0]);
  v122.i32[3] = 0;
  uint64_t v236 = *(void *)(v18 + 80);
  float32x2_t v123 = (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
  float32x2_t v124 = (float32x2_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL).u64[0];
  float32x2_t v125 = (float32x2_t)vext_s8(*(int8x8_t *)v22.i8, (int8x8_t)v123, 4uLL);
  float32x2_t v199 = v123;
  float32x4_t v200 = v121;
  float32x2_t v201 = *(float32x2_t *)v22.i8;
  float32x4_t v202 = v24;
  int8x8_t v126 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.i8, (float32x2_t)vext_s8(*(int8x8_t *)v119.f32, (int8x8_t)v124, 4uLL)), v125, *(float32x2_t *)v119.f32);
  *(int8x8_t *)v119.f32 = vext_s8(v126, (int8x8_t)vmls_f32(vmul_f32(v123, *(float32x2_t *)v119.f32), *(float32x2_t *)v22.i8, v124), 4uLL);
  v119.i64[1] = v126.u32[0];
  float32x4_t v127 = vmlsq_f32(v122, v24, v119);
  v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
  float32x4_t v128 = vmulq_f32(v121, v120);
  v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
  float32x4_t v129 = vmlaq_n_f32(v127, v121, vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).f32[0]);
  float32x4_t v130 = vaddq_f32(v129, v129);
  v130.i32[3] = 0;
  float32x4_t v211 = v130;
  __int16 v131 = *a10;
  float32x2_t v210 = 0;
  float32x4_t v208 = 0u;
  int8x16_t v209 = 0u;
  v204.i64[1] = (uint64_t)v212;
  float32x4_t v132 = v222;
  v206[0] = v219;
  v207[0] = v221;
  float32x2x2_t v133 = (float32x2x2_t)vzip1q_s32(v219, v221);
  v240.val[0] = (float32x2_t)vzip2q_s32(v219, v221).u64[0];
  int32x4_t v134 = vzip1q_s32(v220, (int32x4_t)0);
  v240.val[1] = (float32x2_t)vzip2q_s32(v220, (int32x4_t)0).u64[0];
  int v205 = &v219;
  __int32 v135 = (float *)v206;
  uint64_t v136 = (float *)v207;
  int32x4_t v137 = vzip2q_s32((int32x4_t)v133, v134);
  vst2_f32(v135, v133);
  v207[1] = v132;
  v206[1] = v137;
  vst2_f32(v136, v240);
  v203[1] = &v226;
  v204.i64[0] = (uint64_t)&unk_26E728B18;
  v203[0] = &unk_26E728850;
  *(float *)v137.i32 = a4;
  int32x2_t v198 = (int32x2_t)v27;
  BOOL v138 = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v204, (uint64_t)v203, &v222, (uint64_t)&v223, &v224, &v211, &v210, &v208, *(int32x2_t *)v137.i8, &v209, (v131 & 0x200) != 0);
  if (v138)
  {
    float32x4_t v139 = (float32x4_t)vdupq_lane_s32(v198, 0);
    *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float32x2_t v140 = v210;
    if (v210.f32[0] <= 0.0)
    {
      if ((v131 & 0x200) != 0)
      {
        float32x4_t v168 = (float32x4_t)v209;
        float32x4_t v169 = vmulq_n_f32((float32x4_t)v209, *(float *)v198.i32);
        v169.i32[3] = 0;
        float32x2_t v170 = (float32x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
        int8x8_t v171 = (int8x8_t)vmls_f32(vmul_f32(v201, (float32x2_t)vext_s8(*(int8x8_t *)v209.i8, (int8x8_t)v170, 4uLL)), v125, *(float32x2_t *)v209.i8);
        *(int8x8_t *)v172.f32 = vext_s8(v171, (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v209.i8), v201, v170), 4uLL);
        v172.i64[1] = v171.u32[0];
        float32x4_t v173 = vmlaq_f32(v169, v202, v172);
        *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        v173.i64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
        float32x4_t v174 = vmulq_f32(v200, v168);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        float32x4_t v175 = vmlaq_n_f32(v173, v200, vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32).f32[0]);
        v175.i64[1] = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u32[0];
        v174.i64[0] = 0x4000000040000000;
        v174.i64[1] = 0x4000000040000000;
        float32x4_t v176 = vmlaq_f32(v197, v174, v175);
        float32x4_t v177 = vmulq_f32(v139, v208);
        v177.i32[3] = 0;
        v175.i64[0] = vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
        *(float32x2_t *)v172.f32 = vmls_f32(vmul_f32(v201, (float32x2_t)vext_s8(*(int8x8_t *)v208.f32, *(int8x8_t *)v175.f32, 4uLL)), v125, *(float32x2_t *)v208.f32);
        *(int8x8_t *)v175.f32 = vext_s8(*(int8x8_t *)v172.f32, (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v208.f32), v201, *(float32x2_t *)v175.f32), 4uLL);
        v175.i64[1] = v172.u32[0];
        float32x4_t v178 = vmlaq_f32(v177, v202, v175);
        v178.i64[1] = vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u32[0];
        float32x4_t v179 = vmulq_f32(v200, v208);
        float32x2_t v182 = (float32x2_t)vpaddq_f32(v179, v179).u64[0];
        float32x4_t v180 = vmlaq_n_f32(v178, v200, vpadd_f32(v182, v182).f32[0]);
        float32x4_t v181 = vaddq_f32(v180, v180);
        v181.i32[3] = 0;
        v182.i32[0] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        float32x4_t v183 = vmulq_f32(v181, v181);
        v183.i64[0] = vpaddq_f32(v183, v183).u64[0];
        float32x2_t v184 = vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32);
        float32x2_t v185 = vrsqrte_f32(v184);
        int v186 = 4;
        do
        {
          float32x2_t v185 = vmul_f32(v185, vrsqrts_f32(vmul_f32(v185, v185), v184));
          --v186;
        }
        while (v186);
        v182.i32[1] = 0;
        float32x2_t v187 = vmul_f32(v184, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v184), 0), (int8x8_t)_D8, (int8x8_t)v185));
        float32x2_t v188 = vrecpe_f32(v187);
        int v189 = 4;
        do
        {
          float32x2_t v188 = vmul_f32(v188, vrecps_f32(v187, v188));
          --v189;
        }
        while (v189);
        *(float32x2_t *)&v176.u32[2] = v182;
        int8x16_t v190 = (int8x16_t)vmulq_n_f32(v181, v188.f32[0]);
        float32x4_t v191 = (float32x4_t)v190;
        v191.i32[3] = 0;
        float32x4_t v192 = vmlsq_lane_f32(v176, v191, v140, 0);
        *(void *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v190, v190, 4uLL).u64[0];
        v192.i32[3] = v190.i32[0];
        *(float32x4_t *)(a9 + 24) = v192;
        *(_DWORD *)(a9 + 48) = v140.i32[0];
      }
      else
      {
        *(_DWORD *)(a9 + 48) = 0;
        float v193 = -a8[1].f32[0];
        *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
        *(float *)(a9 + 44) = v193;
      }
      *(_DWORD *)(a9 + 16) = -1;
    }
    else
    {
      float32x4_t v141 = vmulq_f32(v139, v208);
      v141.i32[3] = 0;
      float32x2_t v142 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
      int8x8_t v143 = (int8x8_t)vmls_f32(vmul_f32(v201, (float32x2_t)vext_s8(*(int8x8_t *)v208.f32, (int8x8_t)v142, 4uLL)), v125, *(float32x2_t *)v208.f32);
      *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v208.f32), v201, v142), 4uLL);
      v144.i64[1] = v143.u32[0];
      float32x4_t v145 = vmlaq_f32(v141, v202, v144);
      v145.i64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u32[0];
      float32x4_t v146 = vmulq_f32(v200, v208);
      v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
      float32x4_t v147 = vmlaq_n_f32(v145, v200, vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32).f32[0]);
      float32x4_t v148 = vaddq_f32(v147, v147);
      v148.i32[3] = 0;
      float32x4_t v149 = vmulq_f32(v148, v148);
      v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
      float32x2_t v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
      float32x2_t v151 = vrsqrte_f32(v150);
      *(_WORD *)(a9 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      int v152 = 4;
      do
      {
        float32x2_t v151 = vmul_f32(v151, vrsqrts_f32(vmul_f32(v151, v151), v150));
        --v152;
      }
      while (v152);
      float32x2_t v153 = vmul_f32(v150, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v150), 0), (int8x8_t)_D8, (int8x8_t)v151));
      float32x2_t v154 = vrecpe_f32(v153);
      int v155 = 4;
      do
      {
        float32x2_t v154 = vmul_f32(v154, vrecps_f32(v153, v154));
        --v155;
      }
      while (v155);
      float32x2_t v156 = (float32x2_t)vextq_s8(v209, v209, 8uLL).u64[0];
      int8x8_t v157 = (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v209.i8), v201, v156);
      float32x4_t v158 = vmulq_f32(v139, (float32x4_t)v209);
      v158.i32[3] = 0;
      int8x8_t v159 = (int8x8_t)vmls_f32(vmul_f32(v201, (float32x2_t)vext_s8(*(int8x8_t *)v209.i8, (int8x8_t)v156, 4uLL)), v125, *(float32x2_t *)v209.i8);
      *(int8x8_t *)v160.f32 = vext_s8(v159, v157, 4uLL);
      v160.i64[1] = v159.u32[0];
      float32x4_t v161 = vmlaq_f32(v158, v202, v160);
      int8x16_t v162 = (int8x16_t)vmulq_n_f32(v148, v154.f32[0]);
      v161.i64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u32[0];
      float32x4_t v163 = vmulq_f32(v200, (float32x4_t)v209);
      v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
      float32x4_t v164 = vmlaq_n_f32(v161, v200, vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32).f32[0]);
      v164.i64[1] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u32[0];
      LODWORD(v165) = vmul_f32(v196, v140).u32[0];
      v163.i64[0] = 0x4000000040000000;
      v163.i64[1] = 0x4000000040000000;
      float32x4_t v166 = vmlaq_f32(v197, v163, v164);
      v166.i64[1] = vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u32[0];
      float32x4_t v167 = vmlaq_n_f32(v166, v195, v165);
      v167.i32[3] = v162.i32[0];
      *(float32x4_t *)(a9 + 24) = v167;
      *(void *)(a9 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v162, v162, 4uLL).u64[0];
      *(float *)(a9 + 48) = v165;
      if ((*((unsigned char *)a10 + 1) & 4) != 0)
      {
        unsigned int v225 = *(unsigned __int8 *)(v18 + 71);
        *(_DWORD *)(a9 + 16) = computeSweepConvexPlane(a1, v18 + 32, &v225, a2->f32, (float *)(a9 + 24), (float *)a8);
        *(_WORD *)(a9 + 20) |= 0x400u;
      }
    }
  }
  return v138;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  float32x4_t v58 = 0u;
  int8x16_t v59 = 0u;
  float32x2_t v57 = 0;
  BOOL v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(a1, a2, a3, a9, a4, a5, a6, &v57, &v58, &v59);
  if (v17)
  {
    int32x2_t v18 = (int32x2_t)v57;
    *a7 = v57;
    if (*(float *)v18.i32 == 0.0 && (a11 & 1) != 0)
    {
      uint64_t v19 = a1->i64[1];
      uint64_t v20 = a1[1].i64[0];
      uint64_t v21 = *(void *)(a2 + 8);
      *(float *)v18.i32 = (float)(*(float *)(v19 + 16) + *(float *)(v21 + 16)) * 100.0;
      int32x2_t v56 = vdup_lane_s32(v18, 0);
      char v53 = 0;
      float32x2_t v62 = 0;
      memset(v60, 0, sizeof(v60));
      float32x4_t v61 = 0u;
      v48.i64[1] = v19;
      uint64_t v49 = v20;
      v48.i64[0] = (uint64_t)&unk_26E728B18;
      float32x2x2_t v23 = *(float32x2x2_t *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      int32x4_t v24 = *(int32x4_t *)v20;
      int32x4_t v51 = *(int32x4_t *)(v20 + 16);
      v52[0] = v23;
      int32x4_t v50 = v24;
      float32x2x2_t v25 = (float32x2x2_t)vzip1q_s32(v24, (int32x4_t)v23);
      v23.val[0] = (float32x2_t)vzip2q_s32(v24, (int32x4_t)v23).u64[0];
      int32x4_t v26 = vzip1q_s32(v51, (int32x4_t)0);
      float32x4_t v27 = (float32x4_t)vzip2q_s32(v51, (int32x4_t)0);
      float32x4_t v28 = (float *)&v50;
      float32x2_t v29 = (float *)v52;
      vst2_f32(v28, v25);
      v52[1] = v22;
      vst2_f32(v29, v23);
      int32x4_t v51 = vzip2q_s32((int32x4_t)v25, v26);
      v47[0] = &unk_26E728850;
      v47[1] = v21;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v48, (uint64_t)v47, a3, (uint64_t *)&v56, 0, v55, v54, &v53, *(double *)v51.i64, *(double *)&v22, (int8x8_t)v23.val[0], v27, (uint64_t)v60) != 5)goto LABEL_5; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        float32x4_t v39 = vnegq_f32(*a6);
        v39.i32[3] = 0;
        float32x4_t v40 = vmulq_f32(v39, v39);
        v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
        float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
        float32x2_t v42 = vrsqrte_f32(v41);
        int v43 = 4;
        do
        {
          float32x2_t v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v41));
          --v43;
        }
        while (v43);
        float32x2_t v44 = vmul_f32(v41, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v41), 0), _D8, (int8x8_t)v42));
        float32x2_t v45 = vrecpe_f32(v44);
        int v46 = 4;
        do
        {
          float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
          --v46;
        }
        while (v46);
        float32x4_t v32 = vmulq_n_f32(v39, v45.f32[0]);
        v32.i32[3] = 0;
        float32x2_t v30 = 0;
        int8x16_t v31 = 0uLL;
      }
      else
      {
LABEL_5:
        float32x2_t v30 = v62;
        int8x16_t v31 = (int8x16_t)v60[0];
        float32x4_t v32 = v61;
      }
      *a7 = vmin_f32(v30, 0);
    }
    else
    {
      float32x4_t v32 = v58;
      int8x16_t v31 = v59;
    }
    *a10 = v31;
    *a8 = v32;
  }
  return v17;
}

uint64_t physx::Gu::sweepCapsuleTriangles(uint64_t a1, uint64_t a2, physx::Gu::Box *a3, uint64_t a4, float *a5, float32x2_t *a6, uint64_t a7, unsigned int *a8, float a9, float a10, __int16 *a11)
{
  unsigned __int8 v14 = a3;
  float v18 = *a5;
  float v19 = a5[1];
  float v20 = v18 + v18;
  float v22 = a5[2];
  float v21 = a5[3];
  float v23 = v21 + v21;
  float v24 = (float)((float)(v21 * (float)(v21 + v21)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  float v25 = (float)(v20 * v19) + (float)(v22 * (float)(v21 + v21));
  float v26 = (float)(v20 * v22) - (float)(v19 * v23);
  float v28 = *(float *)(a4 + 4);
  float v27 = *(float *)(a4 + 8);
  float v29 = v24 * v27;
  float v30 = v27 * v25;
  float v31 = v26 * v27;
  float v32 = a5[4];
  float v33 = a5[5];
  float v34 = a5[6];
  v44[0] = v32 + v29;
  v44[1] = v33 + v30;
  v44[2] = v31 + v34;
  v44[3] = v32 - v29;
  v44[4] = v33 - v30;
  v44[5] = v34 - v31;
  v44[6] = v28 + a10;
  physx::Gu::computeBoxAroundCapsule((uint64_t)v44, (const Capsule *)v41, a3);
  physx::Gu::computeSweptBox((uint64_t)v40, &v43, &v42, v41, a6, a9);
  __int16 v38 = *a11;
  return physx::Gu::sweepCapsuleTriangles_Precise(a1, a2, (uint64_t)v44, a6, a8, a7, v39, &v38, a9, v35, v36, v14, v40);
}

BOOL sweepConvex_SphereGeom(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, float a8, float a9)
{
  BOOL v13 = 0;
  uint64_t v212 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(a3 + 32);
  v15.i64[0] = *(void *)(a2 + 16);
  v15.i32[2] = *(_DWORD *)(a2 + 24);
  float32x4_t v189 = 0uLL;
  float32x4_t v16 = *(float32x4_t *)(a3 + 4);
  float32x4_t v17 = v16;
  v17.i32[3] = 0;
  float32x4_t v18 = *(float32x4_t *)(a3 + 16);
  v9.i32[0] = *(_DWORD *)(a1 + 4);
  v15.i64[1] = v15.u32[2];
  float32x4_t v19 = *a4;
  v20.i64[0] = a4[1].i64[0];
  v20.i64[1] = a4[1].u32[2];
  float32x4_t v21 = vnegq_f32(*a4);
  float32x4_t v179 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  float32x4_t v180 = v20;
  float32x4_t v22 = vsubq_f32(v15, v20);
  float32x4_t v23 = v21;
  v23.i32[3] = 0;
  float32x2_t v24 = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
  float32x4_t v25 = vmulq_n_f32(v22, v24.f32[0]);
  v25.i32[3] = 0;
  float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  int8x8_t v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL), *(float32x2_t *)v22.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v22.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL)), 4uLL);
  v21.i64[1] = v27.u32[0];
  float32x4_t v28 = vmlaq_laneq_f32(v25, v21, *a4, 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  float32x4_t v29 = vmulq_f32(v23, v22);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  *(float32x2_t *)v22.f32 = *a5;
  v22.i32[2] = a5[1].i32[0];
  float32x4_t v30 = vmlaq_n_f32(v28, v23, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  float32x4_t v31 = vmulq_n_f32(v22, a8);
  float32x4_t v32 = v31;
  v32.i32[3] = 0;
  float32x4_t v33 = *a4;
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_n_f32(v32, v24.f32[0]);
  v34.i32[3] = 0;
  float32x2_t v35 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  float32x2_t v37 = (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, (int8x8_t)v35, 4uLL);
  int32x2_t v175 = (int32x2_t)v24;
  float32x2_t v176 = v35;
  int8x8_t v38 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, (float32x2_t)vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)v36, 4uLL)), v37, *(float32x2_t *)v31.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32(v35, *(float32x2_t *)v31.f32), *(float32x2_t *)a4->f32, v36), 4uLL);
  v31.i64[1] = v38.u32[0];
  float32x4_t v178 = *a4;
  float32x4_t v39 = vmlsq_laneq_f32(v34, v31, *a4, 3);
  v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
  float32x4_t v40 = vaddq_f32(v30, v30);
  float32x4_t v41 = vmulq_f32(v33, v32);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  float32x4_t v42 = vmlaq_n_f32(v39, v33, vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
  float32x4_t v43 = vaddq_f32(v42, v42);
  v43.i32[3] = 0;
  float32x4_t v188 = v43;
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0) {
    BOOL v13 = *(float *)(a3 + 12) == 1.0;
  }
  int32x2_t v44 = vdup_lane_s32(v9, 0);
  v40.i32[3] = 0;
  float32x4_t v45 = 0uLL;
  char v201 = 0;
  float32x4_t v199 = 0u;
  long long v200 = 0u;
  uint64_t v208 = v14 + 32;
  uint64_t v210 = *(void *)(v14 + 72) + 20 * *(unsigned __int8 *)(v14 + 71);
  char v211 = *(unsigned char *)(v14 + 70);
  v46.i64[0] = *(void *)(v14 + 92);
  v46.i64[1] = *(unsigned int *)(v14 + 100);
  int32x4_t v47 = (int32x4_t)vmulq_f32(v17, v46);
  *(float32x2_t *)v47.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v47, 2), *(float32x2_t *)v47.i8);
  *(float *)v47.i32 = vpmin_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8).f32[0];
  *(float32x2_t *)&long long v200 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v47.i32);
  *((float *)&v200 + 2) = 0.025 * *(float *)v47.i32;
  float32x4_t v177 = v33;
  if (v13)
  {
    long long v202 = xmmword_23435FD50;
    long long v203 = xmmword_23435FD60;
    long long v204 = xmmword_23435FD80;
    long long v205 = xmmword_23435FD50;
    long long v206 = xmmword_23435FD60;
    long long v207 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v48 = vrecpeq_f32(v17);
    int v49 = 4;
    do
    {
      float32x4_t v48 = vmulq_f32(v48, vrecpsq_f32(v48, v17));
      --v49;
    }
    while (v49);
    *(int32x2_t *)v50.f32 = vdup_lane_s32(*(int32x2_t *)v16.f32, 0);
    v50.i64[1] = v50.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v50, v17)), *(int8x8_t *)v19.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 1);
      float32x2_t v58 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 2);
      float32x2_t v59 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 3);
      _Q19 = vaddq_f32(v18, v18);
      float32x2_t v61 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)_Q19.f32), 0);
      float32x2_t v62 = vmul_lane_f32(v57, *(float32x2_t *)_Q19.f32, 1);
      float32x2_t v63 = vmul_laneq_f32(v58, _Q19, 2);
      float32x2_t v64 = vmul_n_f32(v57, _Q19.f32[0]);
      float32x2_t v65 = vmul_n_f32(v58, _Q19.f32[0]);
      float32x2_t v66 = vmul_n_f32(v59, _Q19.f32[0]);
      float32x2_t v67 = vmul_lane_f32(v58, *(float32x2_t *)_Q19.f32, 1);
      float32x2_t v68 = vmul_lane_f32(v59, *(float32x2_t *)_Q19.f32, 1);
      float32x2_t v69 = vmul_laneq_f32(v59, _Q19, 2);
      __asm { FMOV            V19.2S, #1.0 }
      float32x2_t v74 = vsub_f32(*(float32x2_t *)_Q19.f32, v61);
      *(int8x8_t *)v75.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q19.f32, v62), v63), (int8x8_t)vadd_f32(v64, v69), 4uLL);
      v75.i64[1] = vsub_f32(v65, v68).u32[0];
      *(int8x8_t *)v76.f32 = vext_s8((int8x8_t)vsub_f32(v64, v69), (int8x8_t)vsub_f32(v74, v63), 4uLL);
      int8x8_t v77 = (int8x8_t)vadd_f32(v65, v68);
      *(int8x8_t *)_Q19.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v75.f32, 0), *(int8x8_t *)v76.f32, 4uLL);
      v76.i64[1] = vadd_f32(v67, v66).u32[0];
      v68.i32[0] = vsub_f32(v74, v62).u32[0];
      *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vsub_f32(v67, v66), 4uLL);
      *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v75.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), 4uLL);
      v78.i64[1] = v68.u32[0];
      _Q19.i64[1] = vdup_lane_s32(*(int32x2_t *)v78.f32, 0).u32[0];
      v79.i64[1] = vdup_lane_s32(*(int32x2_t *)v78.f32, 1).u32[0];
      *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v75.u32[2], 0), *(int8x8_t *)&v76.u32[2], 4uLL);
      v80.i64[1] = vdup_lane_s32((int32x2_t)v68.u32[0], 0).u32[0];
      float32x4_t v81 = vmulq_n_f32(_Q19, v16.f32[0]);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_lane_f32(v79, *(float32x2_t *)v16.f32, 1);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_laneq_f32(v80, v16, 2);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_n_f32(v81, v75.f32[0]);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_lane_f32(v82, *(float32x2_t *)v75.f32, 1);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_laneq_f32(v83, v75, 2);
      v86.i32[3] = 0;
      float32x4_t v51 = vaddq_f32(v86, vaddq_f32(v84, v85));
      float32x4_t v87 = vmulq_n_f32(v81, v76.f32[0]);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_lane_f32(v82, *(float32x2_t *)v76.f32, 1);
      v88.i32[3] = 0;
      float32x4_t v89 = vmulq_laneq_f32(v83, v76, 2);
      v89.i32[3] = 0;
      float32x4_t v90 = vaddq_f32(v87, v88);
      float32x4_t v91 = vmulq_n_f32(v81, v78.f32[0]);
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_lane_f32(v82, *(float32x2_t *)v78.f32, 1);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_laneq_f32(v83, v78, 2);
      v93.i32[3] = 0;
      float32x4_t v52 = vaddq_f32(v89, v90);
      float32x4_t v53 = vaddq_f32(v93, vaddq_f32(v91, v92));
      long long v202 = (__int128)v51;
      long long v203 = (__int128)v52;
      long long v204 = (__int128)v53;
      float32x4_t v94 = vmulq_n_f32(_Q19, v48.f32[0]);
      v94.i32[3] = 0;
      float32x4_t v95 = vmulq_lane_f32(v79, *(float32x2_t *)v48.f32, 1);
      v95.i32[3] = 0;
      float32x4_t v96 = vmulq_laneq_f32(v80, v48, 2);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_n_f32(v94, v75.f32[0]);
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_lane_f32(v95, *(float32x2_t *)v75.f32, 1);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_laneq_f32(v96, v75, 2);
      v99.i32[3] = 0;
      float32x4_t v54 = vaddq_f32(v99, vaddq_f32(v97, v98));
      float32x4_t v100 = vmulq_n_f32(v94, v76.f32[0]);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_lane_f32(v95, *(float32x2_t *)v76.f32, 1);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_laneq_f32(v96, v76, 2);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_n_f32(v94, v78.f32[0]);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_lane_f32(v95, *(float32x2_t *)v78.f32, 1);
      v104.i32[3] = 0;
      float32x4_t v55 = vaddq_f32(v102, vaddq_f32(v100, v101));
      float32x4_t v105 = vmulq_laneq_f32(v96, v78, 2);
      v105.i32[3] = 0;
      float32x4_t v56 = vaddq_f32(v105, vaddq_f32(v103, v104));
    }
    else
    {
      v48.i32[3] = 0;
      float32x4_t v51 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD50);
      float32x4_t v52 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD60);
      float32x4_t v53 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD80);
      long long v202 = (__int128)v51;
      long long v203 = (__int128)v52;
      long long v204 = (__int128)v53;
      float32x4_t v54 = vmulq_f32(v48, (float32x4_t)xmmword_23435FD50);
      float32x4_t v55 = vmulq_f32(v48, (float32x4_t)xmmword_23435FD60);
      float32x4_t v56 = vmulq_f32(v48, (float32x4_t)xmmword_23435FD80);
    }
    long long v206 = (__int128)v55;
    long long v207 = (__int128)v56;
    float32x4_t v106 = vmulq_f32(v51, (float32x4_t)0);
    v106.i32[3] = 0;
    float32x4_t v107 = vmulq_f32(v52, (float32x4_t)0);
    v107.i32[3] = 0;
    float32x4_t v108 = vmulq_f32(v53, (float32x4_t)0);
    v108.i32[3] = 0;
    float32x4_t v45 = vaddq_f32(v108, vaddq_f32(v107, v106));
    long long v205 = (__int128)v54;
    float32x4_t v199 = v45;
  }
  uint64_t v209 = *(void *)(v14 + 80);
  int v194 = 4;
  float32x4_t v190 = v40;
  int32x2_t v198 = v44;
  float32x4_t v196 = v40;
  float32x4_t v197 = v40;
  __int32 v191 = v9.i32[0];
  __int32 v192 = v9.i32[0];
  __int32 v193 = v9.i32[0];
  char v195 = 1;
  __int16 v109 = *a7;
  float32x2_t v187 = 0;
  float32x4_t v185 = 0u;
  int8x16_t v186 = 0u;
  v184[1] = &v190;
  v183[1] = &v199;
  v184[0] = &unk_26E7287F0;
  v183[0] = &unk_26E728850;
  v33.f32[0] = *(float *)v9.i32 + a9;
  float32x4_t v182 = vsubq_f32(v40, v45);
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v184, (uint64_t)v183, &v182, &v189, &v188, &v187, &v185, &v186, *(int32x2_t *)v33.f32, (v109 & 0x200) != 0);
  if (result)
  {
    float32x4_t v111 = *a4;
    v112.i64[0] = a4[1].i64[0];
    v112.i32[2] = a4[1].i32[2];
    *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float v113 = v187.f32[0];
    if (v187.f32[0] <= 0.0)
    {
      if ((v109 & 0x200) != 0)
      {
        v112.i32[3] = 0;
        float32x4_t v141 = v111;
        v141.i32[3] = 0;
        float32x2_t v142 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v111, 3).u64[0];
        LODWORD(v143) = vmla_f32((float32x2_t)0xBF000000BF000000, v142, v142).u32[0];
        float32x4_t v144 = vmulq_n_f32((float32x4_t)v186, v143);
        v144.i32[3] = 0;
        float32x2_t v145 = (float32x2_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u64[0];
        float32x2_t v146 = (float32x2_t)vextq_s8(v186, v186, 8uLL).u64[0];
        float32x2_t v147 = (float32x2_t)vext_s8(*(int8x8_t *)v111.f32, (int8x8_t)v145, 4uLL);
        int8x8_t v148 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)vext_s8(*(int8x8_t *)v186.i8, (int8x8_t)v146, 4uLL)), v147, *(float32x2_t *)v186.i8);
        *(int8x8_t *)v149.f32 = vext_s8(v148, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v186.i8), *(float32x2_t *)v111.f32, v146), 4uLL);
        v149.i64[1] = v148.u32[0];
        float32x4_t v150 = vmlaq_laneq_f32(v144, v149, v111, 3);
        v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
        float32x4_t v151 = vmulq_f32(v141, (float32x4_t)v186);
        v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
        float32x4_t v152 = vmlaq_n_f32(v150, v141, vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32).f32[0]);
        uint64_t v153 = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
        float32x4_t v154 = vmulq_n_f32(v185, v143);
        v154.i32[3] = 0;
        float32x2_t v155 = (float32x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
        int8x8_t v156 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)vext_s8(*(int8x8_t *)v185.f32, (int8x8_t)v155, 4uLL)), v147, *(float32x2_t *)v185.f32);
        *(int8x8_t *)v157.f32 = vext_s8(v156, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v185.f32), *(float32x2_t *)v111.f32, v155), 4uLL);
        v157.i64[1] = v156.u32[0];
        float32x4_t v158 = vmlaq_laneq_f32(v154, v157, v111, 3);
        v158.i64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u32[0];
        float32x4_t v159 = vmulq_f32(v141, v185);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        float32x4_t v160 = vmlaq_n_f32(v158, v141, vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0]);
        float32x4_t v161 = vaddq_f32(v160, v160);
        v161.i32[3] = 0;
        *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        float32x4_t v162 = vmulq_f32(v161, v161);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        float32x2_t v164 = vrsqrte_f32(v163);
        int v165 = 4;
        do
        {
          float32x2_t v164 = vmul_f32(v164, vrsqrts_f32(vmul_f32(v164, v164), v163));
          --v165;
        }
        while (v165);
        __asm { FMOV            V16.2S, #1.0 }
        float32x2_t v167 = vmul_f32(v163, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v163), 0), _D16, (int8x8_t)v164));
        float32x2_t v168 = vrecpe_f32(v167);
        int v169 = 4;
        do
        {
          float32x2_t v168 = vmul_f32(v168, vrecps_f32(v167, v168));
          --v169;
        }
        while (v169);
        v152.i64[1] = v153;
        v170.i64[0] = 0x4000000040000000;
        v170.i64[1] = 0x4000000040000000;
        float32x4_t v171 = vmlaq_f32(v112, v170, v152);
        float32x4_t v172 = vmulq_n_f32(v161, v168.f32[0]);
        v172.i32[3] = 0;
        int8x16_t v173 = (int8x16_t)vnegq_f32(v172);
        *(void *)(a6 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v173, v173, 4uLL).u64[0];
        v171.i32[3] = v173.i32[0];
        *(float32x4_t *)(a6 + 24) = v171;
        *(float *)(a6 + 48) = v113;
      }
      else
      {
        *(_DWORD *)(a6 + 48) = 0;
        float v174 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v174;
      }
    }
    else
    {
      float32x4_t v114 = (float32x4_t)vdupq_lane_s32(v175, 0);
      float32x2_t v115 = (float32x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
      float32x4_t v116 = vmulq_n_f32(v185, *(float *)v175.i32);
      v116.i32[3] = 0;
      int8x8_t v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)vext_s8(*(int8x8_t *)v185.f32, (int8x8_t)v115, 4uLL)), v37, *(float32x2_t *)v185.f32);
      *(int8x8_t *)v118.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v185.f32), *(float32x2_t *)v178.f32, v115), 4uLL);
      v118.i64[1] = v117.u32[0];
      float32x4_t v119 = vmlaq_f32(v116, v179, v118);
      v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
      float32x4_t v120 = vmulq_f32(v177, v185);
      v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
      float32x4_t v121 = vmlaq_n_f32(v119, v177, vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
      float32x4_t v122 = vaddq_f32(v121, v121);
      v122.i32[3] = 0;
      *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float32x4_t v123 = vmulq_f32(v122, v122);
      v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
      float32x2_t v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
      float32x2_t v125 = vrsqrte_f32(v124);
      int v126 = 4;
      do
      {
        float32x2_t v125 = vmul_f32(v125, vrsqrts_f32(vmul_f32(v125, v125), v124));
        --v126;
      }
      while (v126);
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v128 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v124), 0), _D6, (int8x8_t)v125));
      float32x2_t v129 = vrecpe_f32(v128);
      int v130 = 4;
      do
      {
        float32x2_t v129 = vmul_f32(v129, vrecps_f32(v128, v129));
        --v130;
      }
      while (v130);
      float32x4_t v131 = vmulq_n_f32(v122, v129.f32[0]);
      v131.i32[3] = 0;
      float32x4_t v132 = vmulq_f32(v114, (float32x4_t)v186);
      v132.i32[3] = 0;
      float32x2_t v133 = (float32x2_t)vextq_s8(v186, v186, 8uLL).u64[0];
      int8x8_t v134 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)vext_s8(*(int8x8_t *)v186.i8, (int8x8_t)v133, 4uLL)), v37, *(float32x2_t *)v186.i8);
      *(int8x8_t *)v135.f32 = vext_s8(v134, (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v186.i8), *(float32x2_t *)v178.f32, v133), 4uLL);
      v135.i64[1] = v134.u32[0];
      float32x4_t v136 = vmlaq_f32(v132, v179, v135);
      v136.i64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u32[0];
      float32x4_t v137 = vmulq_f32(v177, (float32x4_t)v186);
      v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
      float32x4_t v138 = vmlaq_n_f32(v136, v177, vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32).f32[0]);
      int8x16_t v139 = (int8x16_t)vnegq_f32(v131);
      v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
      v137.i64[0] = 0x4000000040000000;
      v137.i64[1] = 0x4000000040000000;
      float32x4_t v140 = vmlaq_f32(v180, v137, v138);
      *(void *)(a6 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v139, v139, 4uLL).u64[0];
      v140.i32[3] = v139.i32[0];
      *(float32x4_t *)(a6 + 24) = v140;
      *(float *)(a6 + 48) = v113 * a8;
    }
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

uint64_t sweepConvex_PlaneGeom(float a1, float a2, uint64_t a3, float *a4, uint64_t a5, float *a6, float *a7, uint64_t a8, __int16 *a9)
{
  uint64_t v16 = *(void *)(a5 + 32);
  *(_DWORD *)(a8 + 16) = -1;
  uint64_t v17 = *(void *)(v16 + 72);
  unsigned int v18 = *(unsigned __int8 *)(v16 + 71);
  int v19 = *(unsigned __int8 *)(v16 + 70);
  __int16 v110 = *a9;
  float32x4_t v20 = (float *)(a5 + 4);
  float32x4_t v21 = (float *)(a5 + 16);
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v115, (float *)(a5 + 4), (float *)(a5 + 16));
  float v22 = a4[2];
  float v23 = a4[3];
  float v25 = *a4;
  float v24 = a4[1];
  float v26 = a4[4];
  float v27 = a4[5];
  float v28 = a4[6];
  *(float *)(a8 + 48) = a1;
  char v29 = 0;
  if (!v19) {
    return v29 & 1;
  }
  float v30 = (float)((float)(v23 * (float)(v23 + v23)) + -1.0) + (float)(v25 * (float)(v25 + v25));
  float v31 = (float)((float)(v25 + v25) * v24) + (float)(v22 * (float)(v23 + v23));
  float v32 = (float)((float)(v25 + v25) * v22) - (float)(v24 * (float)(v23 + v23));
  float v33 = *(float *)&v115[7];
  float v112 = *(float *)&v115[8];
  float v114 = (float)-(float)((float)((float)(v27 * v31) + (float)(v26 * v30)) + (float)(v28 * v32)) - a2;
  float v34 = *(float *)&v115[3];
  float v111 = *(float *)&v115[2];
  float v35 = *a6;
  float v36 = a6[1];
  float v37 = *(float *)v115;
  float v38 = *(float *)&v115[1];
  float v40 = *(float *)&v115[4];
  float v39 = *(float *)&v115[5];
  float v41 = *(float *)&v115[6];
  float v42 = a6[2];
  float v43 = a6[3];
  float v44 = (float)(v43 * v43) + -0.5;
  float v45 = -*a6;
  for (uint64_t i = (float *)(v17 + 20 * v18 + 8); ; i += 3)
  {
    float v48 = *a7;
    float v47 = a7[1];
    float v49 = a7[2];
    float v50 = (float)((float)(v31 * v47) + (float)(*a7 * v30)) + (float)(v49 * v32);
    if (v50 <= -0.0000001 || v50 >= 0.0000001) {
      break;
    }
LABEL_11:
    if (!--v19) {
      return v29 & 1;
    }
  }
  float v51 = *(i - 2);
  float v52 = *(i - 1);
  float v53 = (float)((float)(v111 * v51) + (float)(v39 * v52)) + (float)(v112 * *i);
  float v54 = v53 + v53;
  float v55 = (float)((float)(v37 * v51) + (float)(v34 * v52)) + (float)(v41 * *i);
  float v56 = v55 + v55;
  float v57 = (float)((float)(v38 * v51) + (float)(v40 * v52)) + (float)(v33 * *i);
  float v58 = v57 + v57;
  float v59 = (float)((float)(v36 * (float)(v57 + v57)) + (float)(v35 * v56)) + (float)(v42 * v54);
  float v60 = a6[6]
      + (float)((float)((float)(v43 * (float)((float)(v56 * (float)-v36) + (float)(v35 * (float)(v57 + v57))))
                      + (float)(v54 * v44))
              + (float)(v42 * v59));
  float v61 = a6[5]
      + (float)((float)((float)(v43 * (float)((float)(v54 * v45) + (float)(v42 * v56))) + (float)(v58 * v44))
              + (float)(v36 * v59));
  float v62 = a6[4]
      + (float)((float)((float)(v43 * (float)((float)(v58 * (float)-v42) + (float)(v36 * v54))) + (float)(v56 * v44))
              + (float)(v35 * v59));
  float v63 = v114 + (float)((float)((float)(v31 * v61) + (float)(v62 * v30)) + (float)(v60 * v32));
  if (v63 > 0.0)
  {
    float v64 = (float)-v63 / v50;
    if (v64 > 0.0 && v64 <= a1)
    {
      *(float *)(a8 + 44) = v32;
      *(float *)(a8 + 48) = v64;
      *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      *(float *)(a8 + 24) = v62 + (float)(v48 * v64);
      *(float *)(a8 + 28) = v61 + (float)(v47 * v64);
      *(float *)(a8 + 32) = v60 + (float)(v49 * v64);
      *(float *)(a8 + 36) = v30;
      *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v31;
      char v29 = 1;
      a1 = v64;
    }
    goto LABEL_11;
  }
  if ((v110 & 0x200) != 0)
  {
    *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 3;
    uint64_t v66 = *(void *)(a5 + 32);
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v116, v20, v21);
    unint64_t v67 = *(unsigned __int8 *)(v66 + 70);
    uint64_t v68 = *(void *)(v66 + 72);
    float32x2_t v69 = (float *)(v68 + 20 * *(unsigned __int8 *)(v66 + 71));
    float v70 = v69[1];
    float v71 = v69[2];
    float v72 = (float)((float)(*v69 * v117) + (float)(v70 * v120)) + (float)(v71 * v123);
    float v73 = (float)((float)((float)(*v69 * v116) + (float)(v70 * v119)) + (float)(v71 * v122))
        + (float)((float)((float)(*v69 * v116) + (float)(v70 * v119)) + (float)(v71 * v122));
    float v74 = v72 + v72;
    float v75 = (float)((float)((float)(*v69 * v118) + (float)(v70 * v121)) + (float)(v71 * v124))
        + (float)((float)((float)(*v69 * v118) + (float)(v70 * v121)) + (float)(v71 * v124));
    float v77 = a6[2];
    float v76 = a6[3];
    float v78 = (float)(v76 * v76) + -0.5;
    float v79 = *a6;
    float v80 = a6[1];
    float v81 = (float)((float)(v74 * v80) + (float)(*a6 * v73)) + (float)(v77 * v75);
    float v82 = (float)((float)(v76 * (float)((float)(v80 * v75) - (float)(v77 * v74))) + (float)(v73 * v78))
        + (float)(*a6 * v81);
    float v83 = (float)((float)(v76 * (float)((float)(v77 * v73) - (float)(*a6 * v75))) + (float)(v74 * v78))
        + (float)(v80 * v81);
    float v84 = (float)((float)(v76 * (float)((float)(*a6 * v74) - (float)(v80 * v73))) + (float)(v75 * v78))
        + (float)(v77 * v81);
    float v85 = a6[4];
    float v86 = a6[5];
    float v87 = v85 + v82;
    float v88 = v86 + v83;
    float v89 = a6[6];
    float v90 = v89 + v84;
    float v113 = v87;
    float v91 = v114 + (float)((float)((float)(v31 * (float)(v86 + v83)) + (float)(v87 * v30)) + (float)(v90 * v32));
    if (v67 >= 2)
    {
      unint64_t v92 = v67 - 1;
      float32x4_t v93 = (float *)(20 * *(unsigned __int8 *)(v66 + 71) + v68 + 20);
      do
      {
        float v94 = *(v93 - 2);
        float v95 = *(v93 - 1);
        float v96 = v116 * v94;
        float v97 = v117 * v94;
        float v98 = v120 * v95;
        float v99 = (float)((float)(v118 * v94) + (float)(v121 * v95)) + (float)(v124 * *v93);
        float v100 = (float)((float)(v96 + (float)(v119 * v95)) + (float)(v122 * *v93))
             + (float)((float)(v96 + (float)(v119 * v95)) + (float)(v122 * *v93));
        float v101 = (float)((float)(v97 + v98) + (float)(v123 * *v93)) + (float)((float)(v97 + v98) + (float)(v123 * *v93));
        float v102 = v99 + v99;
        float v103 = (float)((float)(v80 * v101) + (float)(v79 * v100)) + (float)(v77 * v102);
        float v104 = (float)((float)(v76 * (float)((float)(v101 * (float)-v77) + (float)(v80 * v102))) + (float)(v100 * v78))
             + (float)(v79 * v103);
        float v105 = (float)((float)(v76 * (float)((float)(v102 * (float)-v79) + (float)(v77 * v100))) + (float)(v101 * v78))
             + (float)(v80 * v103);
        float v106 = (float)((float)(v76 * (float)((float)(v100 * (float)-v80) + (float)(v79 * v101))) + (float)(v102 * v78))
             + (float)(v77 * v103);
        float v107 = v86 + v105;
        float v108 = v114
             + (float)((float)((float)(v31 * (float)(v86 + v105)) + (float)((float)(v85 + v104) * v30))
                     + (float)((float)(v89 + v106) * v32));
        if (v91 > v108)
        {
          float v113 = v85 + v104;
          float v88 = v107;
          float v90 = v89 + v106;
          float v91 = v108;
        }
        v93 += 3;
        --v92;
      }
      while (v92);
    }
    *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = v31;
    *(float *)(a8 + 44) = v32;
    *(float *)(a8 + 48) = v91;
    *(float *)(a8 + 24) = v113 - (float)(v30 * v91);
    *(float *)(a8 + 28) = v88 - (float)(v31 * v91);
    *(float *)(a8 + 32) = v90 - (float)(v32 * v91);
    *(float *)(a8 + 36) = v30;
  }
  else
  {
    *(_DWORD *)(a8 + 48) = 0;
    *(_WORD *)(a8 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    *(float *)(a8 + 36) = -v48;
    *(float *)(a8 + 4physx::Sq::AABBTree::release(this, 0) = -v47;
    *(float *)(a8 + 44) = -v49;
  }
  char v29 = 1;
  return v29 & 1;
}

float sweepConvex_CapsuleGeom(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, _WORD *a7, double a8, float a9)
{
  float v11 = *a2;
  float v12 = a2[1];
  float v13 = v11 + v11;
  float v15 = a2[2];
  float v14 = a2[3];
  float v16 = v14 + v14;
  float v17 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v11 * (float)(v11 + v11));
  float v18 = (float)(v13 * v12) + (float)(v15 * (float)(v14 + v14));
  float v19 = (float)(v13 * v15) - (float)(v12 * v16);
  float v21 = *(float *)(a1 + 4);
  float v20 = *(float *)(a1 + 8);
  float v22 = v17 * v20;
  float v23 = v20 * v18;
  float v24 = v19 * v20;
  float v25 = a2[4];
  float v26 = a2[5];
  float v27 = a2[6];
  v36[0] = v25 + v22;
  v36[1] = v26 + v23;
  float v36[2] = v24 + v27;
  v36[3] = v25 - v22;
  v36[4] = v26 - v23;
  v36[5] = v27 - v24;
  v36[6] = v21;
  __int16 v28 = *a7 & 0xFBFF;
  float v29 = -a5[1].f32[0];
  float32x2_t v34 = vneg_f32(*a5);
  float v35 = v29;
  __int16 v33 = v28;
  if (sweepCapsule_ConvexGeom(a3, a4, a1, (int8x8_t *)a2, (uint64_t)v36, &v34, a6, &v33, a8, a9))
  {
    if (*(_WORD *)(a6 + 20))
    {
      float v31 = *(float *)(a6 + 48);
      float v32 = v31 * a5[1].f32[0];
      *(float32x2_t *)(a6 + 24) = vadd_f32(vmul_n_f32(*a5, v31), *(float32x2_t *)(a6 + 24));
      *(float *)(a6 + 32) = v32 + *(float *)(a6 + 32);
    }
    float result = -*(float *)(a6 + 44);
    *(float32x2_t *)(a6 + 36) = vneg_f32(*(float32x2_t *)(a6 + 36));
    *(float *)(a6 + 44) = result;
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

float sweepConvex_BoxGeom(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, _WORD *a7, float32_t a8, float a9)
{
  float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  float32x2_t v12 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  float32x2_t v13 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q6 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  float32x2_t v15 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q6.f32), 0);
  float32x2_t v16 = vmul_lane_f32(v11, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v17 = vmul_laneq_f32(v12, _Q6, 2);
  float32x2_t v18 = vmul_n_f32(v11, _Q6.f32[0]);
  float32x2_t v19 = vmul_n_f32(v12, _Q6.f32[0]);
  float32x2_t v20 = vmul_n_f32(v13, _Q6.f32[0]);
  float32x2_t v21 = vmul_lane_f32(v12, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v22 = vmul_lane_f32(v13, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v23 = vmul_laneq_f32(v13, _Q6, 2);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v28 = vsub_f32(*(float32x2_t *)_Q6.f32, v15);
  LODWORD(v29) = vsub_f32(v19, v22).u32[0];
  LODWORD(v3physx::Sq::AABBTree::release(this, 0) = vadd_f32(v21, v20).u32[0];
  v39[0] = (float)(1.0 - v16.f32[1]) - v17.f32[1];
  LODWORD(v39[1]) = vadd_f32(v18, v23).u32[0];
  HIDWORD(v29) = vsub_f32(v18, v23).i32[1];
  uint64_t v40 = v29;
  unsigned __int32 v41 = vsub_f32(v28, v17).u32[0];
  HIDWORD(v3physx::Sq::AABBTree::release(this, 0) = vadd_f32(v19, v22).i32[1];
  uint64_t v42 = v30;
  int32x2_t v43 = vzip1_s32((int32x2_t)vsub_f32(v21, v20), (int32x2_t)vsub_f32(v28, v16));
  int v44 = *(_DWORD *)(a2 + 16);
  *(void *)&long long v31 = *(void *)(a2 + 20);
  *((void *)&v31 + 1) = *(void *)(a1 + 4);
  long long v45 = v31;
  int v46 = *(_DWORD *)(a1 + 12);
  __int16 v32 = *a7 & 0xFBFF;
  *(float *)&long long v31 = -a5[1].f32[0];
  float32x2_t v37 = vneg_f32(*a5);
  int v38 = v31;
  __int16 v36 = v32;
  if (sweepBox_ConvexGeom(a3, a4, a8, a9, a3, (float32x4_t *)a2, (uint64_t)v39, &v37, a6, &v36))
  {
    if (*(_WORD *)(a6 + 20))
    {
      float v34 = *(float *)(a6 + 48);
      float v35 = v34 * a5[1].f32[0];
      *(float32x2_t *)(a6 + 24) = vadd_f32(vmul_n_f32(*a5, v34), *(float32x2_t *)(a6 + 24));
      *(float *)(a6 + 32) = v35 + *(float *)(a6 + 32);
    }
    float result = -*(float *)(a6 + 44);
    *(float32x2_t *)(a6 + 36) = vneg_f32(*(float32x2_t *)(a6 + 36));
    *(float *)(a6 + 44) = result;
    *(_DWORD *)(a6 + 16) = -1;
  }
  return result;
}

BOOL sweepConvex_ConvexGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, float a8, float a9)
{
  uint64_t v313 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a3 + 32);
  float32x4_t v284 = 0uLL;
  uint64_t v283 = 0;
  float32x4_t v18 = *(float32x4_t *)(a1 + 4);
  float32x4_t v19 = v18;
  v19.i32[3] = 0;
  float32x4_t v20 = *(float32x4_t *)(a1 + 16);
  float32x4_t v21 = *(float32x4_t *)(a3 + 4);
  float32x4_t v22 = *(float32x4_t *)(a3 + 16);
  v23.i64[0] = a2[1].i64[0];
  float32x4_t v24 = *a2;
  v23.i64[1] = a2[1].u32[2];
  float32x4_t v25 = *(float32x4_t *)a4;
  v26.i64[0] = a4[1].i64[0];
  v26.i64[1] = a4[1].u32[2];
  *(float32x2_t *)v9.f32 = *a5;
  v9.i32[2] = a5[1].i32[0];
  float32x4_t v27 = vmulq_n_f32(v9, a8);
  float32x4_t v28 = v27;
  v28.i32[3] = 0;
  float32x4_t v29 = *(float32x4_t *)a4;
  v29.i32[3] = 0;
  float32x4_t v265 = (float32x4_t)vdupq_laneq_s32(*a4, 3);
  LODWORD(v3physx::Sq::AABBTree::release(this, 0) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32).u32[0];
  float32x4_t v31 = vmulq_n_f32(v28, v30);
  v31.i32[3] = 0;
  float32x2_t v32 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  float32x2_t v33 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  float32x2_t v34 = (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v32, 4uLL);
  float32x2_t v263 = v32;
  int8x8_t v35 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)v33, 4uLL)), v34, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v27.f32), *(float32x2_t *)a4->i8, v33), 4uLL);
  v27.i64[1] = v35.u32[0];
  float32x4_t v36 = vmlsq_laneq_f32(v31, v27, *(float32x4_t *)a4, 3);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  float32x4_t v37 = vmulq_f32(v29, v28);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x4_t v267 = v29;
  float32x4_t v268 = v26;
  float32x4_t v38 = vmlaq_n_f32(v36, v29, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
  float32x4_t v39 = vaddq_f32(v38, v38);
  v39.i32[3] = 0;
  float32x4_t v282 = v39;
  float32x4_t v40 = vnegq_f32(v25);
  float32x4_t v41 = v40;
  v41.i32[3] = 0;
  float32x4_t v42 = vsubq_f32(v23, v26);
  float v264 = v30;
  float32x4_t v43 = vmulq_n_f32(v42, v30);
  v43.i32[3] = 0;
  float32x2_t v44 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  float32x2_t v45 = (float32x2_t)vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)v44, 4uLL);
  *(float32x2_t *)v26.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v40.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v45, *(float32x2_t *)v42.f32);
  *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)vmls_f32(vmul_f32(v44, *(float32x2_t *)v42.f32), *(float32x2_t *)v40.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), 4uLL);
  v46.i64[1] = v26.u32[0];
  float32x4_t v47 = vmlaq_laneq_f32(v43, v46, v25, 3);
  v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
  float32x4_t v48 = vmulq_f32(v41, v42);
  v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
  float32x4_t v49 = vmlaq_n_f32(v47, v41, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32).f32[0]);
  float32x4_t v50 = vaddq_f32(v49, v49);
  v50.i32[3] = 0;
  float32x4_t v51 = v24;
  v51.i32[3] = 0;
  *(float32x2_t *)v28.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
  float32x4_t v52 = vmulq_f32(v51, v41);
  v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
  float32x4_t v53 = vmulq_laneq_f32(v41, v24, 3);
  float32x2_t v266 = *(float32x2_t *)v25.f32;
  float32x4_t v54 = vmulq_laneq_f32(v51, v25, 3);
  v51.i64[0] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  int8x8_t v55 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v24.f32, *(int8x8_t *)v51.f32, 4uLL), *(float32x2_t *)v40.f32), v45, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v55, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, v44), *(float32x2_t *)v40.f32, *(float32x2_t *)v51.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v55;
  float32x4_t v56 = vaddq_f32(vaddq_f32(v53, v54), v24);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v56.f32, 1);
  *(int32x2_t *)v53.f32 = vdup_laneq_s32((int32x4_t)v56, 2);
  float32x4_t v57 = vaddq_f32(v56, v56);
  *(float32x2_t *)v28.f32 = vsub_f32(*(float32x2_t *)v28.f32, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32));
  *(int32x2_t *)v51.f32 = vdup_laneq_s32((int32x4_t)v57, 2);
  *(int32x2_t *)v56.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.f32), 0);
  float32x2_t v58 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v57.f32, 1);
  float32x2_t v59 = vmul_laneq_f32(*(float32x2_t *)v53.f32, v57, 2);
  *(float32x2_t *)v40.f32 = vmul_n_f32(*(float32x2_t *)v40.f32, v57.f32[0]);
  *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v53.f32, v57.f32[0]);
  *(float32x2_t *)v52.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0), *(float32x2_t *)v28.f32, 1);
  *(float32x2_t *)v53.f32 = vmul_lane_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v57.f32, 1);
  *(float32x2_t *)v57.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1), *(float32x2_t *)v28.f32, 1);
  *(float32x2_t *)v28.f32 = vmul_lane_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v28.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v58), v59), (int8x8_t)vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v28.f32), 4uLL);
  v51.i64[1] = vsub_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v57.f32).u32[0];
  *(float32x2_t *)v56.f32 = vsub_f32(_D8, *(float32x2_t *)v56.f32);
  *(int8x8_t *)v40.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v28.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v56.f32, v59), 4uLL);
  v40.i64[1] = vadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v52.f32).u32[0];
  *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v57.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v52.f32), 4uLL);
  v28.i64[1] = vsub_f32(*(float32x2_t *)v56.f32, v58).u32[0];
  int32x4_t v278 = (int32x4_t)v51;
  int32x4_t v279 = (int32x4_t)v40;
  int32x4_t v280 = (int32x4_t)v28;
  float32x4_t v281 = v50;
  BOOL v65 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  char v302 = 0;
  float32x4_t v300 = 0u;
  long long v301 = 0u;
  uint64_t v309 = v16 + 32;
  uint64_t v311 = *(void *)(v16 + 72) + 20 * *(unsigned __int8 *)(v16 + 71);
  char v312 = *(unsigned char *)(v16 + 70);
  v66.i64[0] = *(void *)(v16 + 92);
  v66.i64[1] = *(unsigned int *)(v16 + 100);
  int32x4_t v67 = (int32x4_t)vmulq_f32(v19, v66);
  *(float32x2_t *)v67.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v67, 2), *(float32x2_t *)v67.i8);
  float v68 = vpmin_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8).f32[0];
  *(float32x2_t *)&long long v301 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v68);
  *((float *)&v301 + 2) = 0.025 * v68;
  if (v65)
  {
    long long v303 = xmmword_23435FD50;
    long long v304 = xmmword_23435FD60;
    long long v305 = xmmword_23435FD80;
    long long v306 = xmmword_23435FD50;
    long long v307 = xmmword_23435FD60;
    long long v308 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v69 = vrecpeq_f32(v19);
    int v70 = 4;
    do
    {
      float32x4_t v69 = vmulq_f32(v69, vrecpsq_f32(v69, v19));
      --v70;
    }
    while (v70);
    *(int32x2_t *)v71.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
    v71.i64[1] = v71.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v71, v19)), *(int8x8_t *)v29.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v78 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
      float32x2_t v79 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
      float32x2_t v80 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 3);
      float32x4_t v81 = vaddq_f32(v20, v20);
      float32x2_t v82 = vmul_lane_f32(v78, *(float32x2_t *)v81.f32, 1);
      float32x2_t v83 = vmul_laneq_f32(v79, v81, 2);
      float32x2_t v84 = vmul_n_f32(v78, v81.f32[0]);
      float32x2_t v85 = vmul_n_f32(v79, v81.f32[0]);
      float32x2_t v86 = vmul_n_f32(v80, v81.f32[0]);
      float32x2_t v87 = vmul_lane_f32(v79, *(float32x2_t *)v81.f32, 1);
      float32x2_t v88 = vmul_lane_f32(v80, *(float32x2_t *)v81.f32, 1);
      float32x2_t v89 = vmul_laneq_f32(v80, v81, 2);
      *(float32x2_t *)v81.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v81.f32), 0));
      *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v82), v83), (int8x8_t)vadd_f32(v84, v89), 4uLL);
      v90.i64[1] = vsub_f32(v85, v88).u32[0];
      int32x2_t v91 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v84, v89), (int8x8_t)vsub_f32(*(float32x2_t *)v81.f32, v83), 4uLL);
      int8x8_t v92 = (int8x8_t)vadd_f32(v85, v88);
      *(int8x8_t *)v93.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 0), (int8x8_t)v91, 4uLL);
      int8x8_t v94 = (int8x8_t)vdup_lane_s32(v91, 1);
      *(int32x2_t *)v95.f32 = v91;
      v95.i64[1] = vadd_f32(v87, v86).u32[0];
      *(int8x8_t *)v96.f32 = vext_s8(v92, (int8x8_t)vsub_f32(v87, v86), 4uLL);
      *(int8x8_t *)v97.f32 = vext_s8(*(int8x8_t *)v90.f32, v94, 4uLL);
      v96.i64[1] = vsub_f32(*(float32x2_t *)v81.f32, v82).u32[0];
      v93.i64[1] = vdup_lane_s32(*(int32x2_t *)v96.f32, 0).u32[0];
      v97.i64[1] = vdup_lane_s32(*(int32x2_t *)v96.f32, 1).u32[0];
      *(int8x8_t *)v98.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v90.u32[2], 0), (int8x8_t)v95.u32[2], 4uLL);
      v98.i64[1] = vdup_lane_s32(*(int32x2_t *)&v96.u32[2], 0).u32[0];
      float32x4_t v99 = vmulq_n_f32(v93, v18.f32[0]);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_lane_f32(v97, *(float32x2_t *)v18.f32, 1);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_laneq_f32(v98, v18, 2);
      v101.i32[3] = 0;
      float32x4_t v102 = vmulq_n_f32(v99, v90.f32[0]);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_lane_f32(v100, *(float32x2_t *)v90.f32, 1);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_laneq_f32(v101, v90, 2);
      v104.i32[3] = 0;
      float32x4_t v72 = vaddq_f32(v104, vaddq_f32(v102, v103));
      float32x4_t v105 = vmulq_n_f32(v99, v95.f32[0]);
      v105.i32[3] = 0;
      float32x4_t v106 = vmulq_lane_f32(v100, *(float32x2_t *)v95.f32, 1);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_laneq_f32(v101, v95, 2);
      v107.i32[3] = 0;
      float32x4_t v108 = vaddq_f32(v105, v106);
      float32x4_t v109 = vmulq_n_f32(v99, v96.f32[0]);
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_lane_f32(v100, *(float32x2_t *)v96.f32, 1);
      v110.i32[3] = 0;
      float32x4_t v111 = vmulq_laneq_f32(v101, v96, 2);
      v111.i32[3] = 0;
      float32x4_t v73 = vaddq_f32(v107, v108);
      float32x4_t v74 = vaddq_f32(v111, vaddq_f32(v109, v110));
      long long v303 = (__int128)v72;
      long long v304 = (__int128)v73;
      long long v305 = (__int128)v74;
      float32x4_t v112 = vmulq_n_f32(v93, v69.f32[0]);
      v112.i32[3] = 0;
      float32x4_t v113 = vmulq_lane_f32(v97, *(float32x2_t *)v69.f32, 1);
      v113.i32[3] = 0;
      float32x4_t v114 = vmulq_laneq_f32(v98, v69, 2);
      v114.i32[3] = 0;
      float32x4_t v115 = vmulq_n_f32(v112, v90.f32[0]);
      v115.i32[3] = 0;
      float32x4_t v116 = vmulq_lane_f32(v113, *(float32x2_t *)v90.f32, 1);
      v116.i32[3] = 0;
      float32x4_t v117 = vmulq_laneq_f32(v114, v90, 2);
      v117.i32[3] = 0;
      float32x4_t v75 = vaddq_f32(v117, vaddq_f32(v115, v116));
      float32x4_t v118 = vmulq_n_f32(v112, v95.f32[0]);
      v118.i32[3] = 0;
      float32x4_t v119 = vmulq_lane_f32(v113, *(float32x2_t *)v95.f32, 1);
      v119.i32[3] = 0;
      float32x4_t v120 = vmulq_laneq_f32(v114, v95, 2);
      v120.i32[3] = 0;
      float32x4_t v121 = vmulq_n_f32(v112, v96.f32[0]);
      v121.i32[3] = 0;
      float32x4_t v122 = vmulq_lane_f32(v113, *(float32x2_t *)v96.f32, 1);
      v122.i32[3] = 0;
      float32x4_t v76 = vaddq_f32(v120, vaddq_f32(v118, v119));
      float32x4_t v123 = vmulq_laneq_f32(v114, v96, 2);
      v123.i32[3] = 0;
      float32x4_t v77 = vaddq_f32(v123, vaddq_f32(v121, v122));
    }
    else
    {
      v69.i32[3] = 0;
      float32x4_t v72 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD50);
      float32x4_t v73 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD60);
      float32x4_t v74 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD80);
      long long v303 = (__int128)v72;
      long long v304 = (__int128)v73;
      long long v305 = (__int128)v74;
      float32x4_t v75 = vmulq_f32(v69, (float32x4_t)xmmword_23435FD50);
      float32x4_t v76 = vmulq_f32(v69, (float32x4_t)xmmword_23435FD60);
      float32x4_t v77 = vmulq_f32(v69, (float32x4_t)xmmword_23435FD80);
    }
    long long v307 = (__int128)v76;
    long long v308 = (__int128)v77;
    float32x4_t v124 = vmulq_f32(v72, (float32x4_t)0);
    v124.i32[3] = 0;
    float32x4_t v125 = vmulq_f32(v73, (float32x4_t)0);
    v125.i32[3] = 0;
    float32x4_t v126 = vmulq_f32(v74, (float32x4_t)0);
    v126.i32[3] = 0;
    long long v306 = (__int128)v75;
    float32x4_t v300 = vaddq_f32(v126, vaddq_f32(v125, v124));
  }
  BOOL v127 = 0;
  float32x4_t v128 = v21;
  v128.i32[3] = 0;
  uint64_t v310 = *(void *)(v16 + 80);
  if (*(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0) {
    BOOL v127 = *(float *)(a3 + 12) == 1.0;
  }
  char v289 = 0;
  uint64_t v296 = v17 + 32;
  uint64_t v298 = *(void *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  char v299 = *(unsigned char *)(v17 + 70);
  v129.i64[0] = *(void *)(v17 + 92);
  v129.i32[2] = *(_DWORD *)(v17 + 100);
  float32x4_t v286 = 0u;
  v129.i64[1] = v129.u32[2];
  int32x4_t v130 = (int32x4_t)vmulq_f32(v128, v129);
  *(float32x2_t *)v130.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v130, 2), *(float32x2_t *)v130.i8);
  *(float *)v130.i32 = vpmin_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8).f32[0];
  float32x2_t v287 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v130.i32);
  uint64_t v288 = COERCE_UNSIGNED_INT(0.025 * *(float *)v130.i32);
  if (v127)
  {
    long long v290 = xmmword_23435FD50;
    long long v291 = xmmword_23435FD60;
    long long v292 = xmmword_23435FD80;
    long long v293 = xmmword_23435FD50;
    long long v294 = xmmword_23435FD60;
    long long v295 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v131 = vrecpeq_f32(v128);
    int v132 = 4;
    do
    {
      float32x4_t v131 = vmulq_f32(v131, vrecpsq_f32(v131, v128));
      --v132;
    }
    while (v132);
    *(int32x2_t *)v133.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
    v133.i64[1] = v133.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v133, v128)), *(int8x8_t *)v29.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v140 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
      float32x2_t v141 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2);
      float32x2_t v142 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 3);
      float32x4_t v143 = vaddq_f32(v22, v22);
      float32x2_t v144 = vmul_lane_f32(v140, *(float32x2_t *)v143.f32, 1);
      float32x2_t v145 = vmul_laneq_f32(v141, v143, 2);
      float32x2_t v146 = vmul_n_f32(v140, v143.f32[0]);
      float32x2_t v147 = vmul_n_f32(v141, v143.f32[0]);
      float32x2_t v148 = vmul_n_f32(v142, v143.f32[0]);
      float32x2_t v149 = vmul_lane_f32(v141, *(float32x2_t *)v143.f32, 1);
      float32x2_t v150 = vmul_lane_f32(v142, *(float32x2_t *)v143.f32, 1);
      float32x2_t v151 = vmul_laneq_f32(v142, v143, 2);
      float32x2_t v152 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v143.f32), 0));
      *(int8x8_t *)v143.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v144), v145), (int8x8_t)vadd_f32(v146, v151), 4uLL);
      int8x8_t v153 = (int8x8_t)vsub_f32(v146, v151);
      v154.i64[0] = v143.i64[0];
      v154.i64[1] = vsub_f32(v147, v150).u32[0];
      int32x2_t v155 = (int32x2_t)vext_s8(v153, (int8x8_t)vsub_f32(v152, v145), 4uLL);
      int8x8_t v156 = (int8x8_t)vadd_f32(v147, v150);
      *(int8x8_t *)v157.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v143.f32, 0), (int8x8_t)v155, 4uLL);
      int8x8_t v158 = (int8x8_t)vdup_lane_s32(v155, 1);
      *(int32x2_t *)v159.f32 = v155;
      v159.i64[1] = vadd_f32(v149, v148).u32[0];
      v155.i32[0] = vsub_f32(v152, v144).u32[0];
      *(int8x8_t *)v160.f32 = vext_s8(v156, (int8x8_t)vsub_f32(v149, v148), 4uLL);
      *(int8x8_t *)v161.f32 = vext_s8(*(int8x8_t *)v143.f32, v158, 4uLL);
      v160.i64[1] = v155.u32[0];
      v157.i64[1] = vdup_lane_s32(*(int32x2_t *)v160.f32, 0).u32[0];
      v161.i64[1] = vdup_lane_s32(*(int32x2_t *)v160.f32, 1).u32[0];
      *(int8x8_t *)v162.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v154.u32[2], 0), (int8x8_t)v159.u32[2], 4uLL);
      v162.i64[1] = vdup_lane_s32((int32x2_t)v155.u32[0], 0).u32[0];
      float32x4_t v163 = vmulq_n_f32(v157, v21.f32[0]);
      v163.i32[3] = 0;
      float32x4_t v164 = vmulq_lane_f32(v161, *(float32x2_t *)v21.f32, 1);
      v164.i32[3] = 0;
      float32x4_t v165 = vmulq_laneq_f32(v162, v21, 2);
      v165.i32[3] = 0;
      float32x4_t v166 = vmulq_n_f32(v163, v154.f32[0]);
      v166.i32[3] = 0;
      float32x4_t v167 = vmulq_lane_f32(v164, *(float32x2_t *)v154.f32, 1);
      v167.i32[3] = 0;
      float32x4_t v168 = vmulq_laneq_f32(v165, v154, 2);
      v168.i32[3] = 0;
      float32x4_t v134 = vaddq_f32(v168, vaddq_f32(v166, v167));
      float32x4_t v169 = vmulq_n_f32(v163, v159.f32[0]);
      v169.i32[3] = 0;
      float32x4_t v170 = vmulq_lane_f32(v164, *(float32x2_t *)v159.f32, 1);
      v170.i32[3] = 0;
      float32x4_t v171 = vmulq_laneq_f32(v165, v159, 2);
      v171.i32[3] = 0;
      float32x4_t v172 = vaddq_f32(v169, v170);
      float32x4_t v173 = vmulq_n_f32(v163, v160.f32[0]);
      v173.i32[3] = 0;
      float32x4_t v174 = vmulq_lane_f32(v164, *(float32x2_t *)v160.f32, 1);
      v174.i32[3] = 0;
      float32x4_t v175 = vmulq_laneq_f32(v165, v160, 2);
      v175.i32[3] = 0;
      float32x4_t v135 = vaddq_f32(v171, v172);
      float32x4_t v136 = vaddq_f32(v175, vaddq_f32(v173, v174));
      long long v290 = (__int128)v134;
      long long v291 = (__int128)v135;
      long long v292 = (__int128)v136;
      float32x4_t v176 = vmulq_n_f32(v157, v131.f32[0]);
      v176.i32[3] = 0;
      float32x4_t v177 = vmulq_lane_f32(v161, *(float32x2_t *)v131.f32, 1);
      v177.i32[3] = 0;
      float32x4_t v178 = vmulq_laneq_f32(v162, v131, 2);
      v178.i32[3] = 0;
      float32x4_t v179 = vmulq_n_f32(v176, v154.f32[0]);
      v179.i32[3] = 0;
      float32x4_t v180 = vmulq_lane_f32(v177, *(float32x2_t *)v154.f32, 1);
      v180.i32[3] = 0;
      float32x4_t v181 = vmulq_laneq_f32(v178, v154, 2);
      v181.i32[3] = 0;
      float32x4_t v137 = vaddq_f32(v181, vaddq_f32(v179, v180));
      float32x4_t v182 = vmulq_n_f32(v176, v159.f32[0]);
      v182.i32[3] = 0;
      float32x4_t v183 = vmulq_lane_f32(v177, *(float32x2_t *)v159.f32, 1);
      v183.i32[3] = 0;
      float32x4_t v184 = vmulq_laneq_f32(v178, v159, 2);
      v184.i32[3] = 0;
      float32x4_t v185 = vmulq_n_f32(v176, v160.f32[0]);
      v185.i32[3] = 0;
      float32x4_t v186 = vmulq_lane_f32(v177, *(float32x2_t *)v160.f32, 1);
      v186.i32[3] = 0;
      float32x4_t v138 = vaddq_f32(v184, vaddq_f32(v182, v183));
      float32x4_t v187 = vmulq_laneq_f32(v178, v160, 2);
      v187.i32[3] = 0;
      float32x4_t v139 = vaddq_f32(v187, vaddq_f32(v185, v186));
    }
    else
    {
      v131.i32[3] = 0;
      float32x4_t v134 = vmulq_f32(v128, (float32x4_t)xmmword_23435FD50);
      float32x4_t v135 = vmulq_f32(v128, (float32x4_t)xmmword_23435FD60);
      float32x4_t v136 = vmulq_f32(v128, (float32x4_t)xmmword_23435FD80);
      long long v290 = (__int128)v134;
      long long v291 = (__int128)v135;
      long long v292 = (__int128)v136;
      float32x4_t v137 = vmulq_f32(v131, (float32x4_t)xmmword_23435FD50);
      float32x4_t v138 = vmulq_f32(v131, (float32x4_t)xmmword_23435FD60);
      float32x4_t v139 = vmulq_f32(v131, (float32x4_t)xmmword_23435FD80);
    }
    long long v294 = (__int128)v138;
    long long v295 = (__int128)v139;
    float32x4_t v188 = vmulq_f32(v134, (float32x4_t)0);
    v188.i32[3] = 0;
    float32x4_t v189 = vmulq_f32(v135, (float32x4_t)0);
    v189.i32[3] = 0;
    float32x4_t v190 = vmulq_f32(v136, (float32x4_t)0);
    v190.i32[3] = 0;
    long long v293 = (__int128)v137;
    float32x4_t v286 = vaddq_f32(v190, vaddq_f32(v189, v188));
  }
  uint64_t v297 = *(void *)(v17 + 80);
  __int16 v191 = *a7;
  float32x2_t v277 = 0;
  float32x4_t v275 = 0u;
  int8x16_t v276 = 0u;
  v271.i64[1] = (uint64_t)&v300;
  float32x4_t v192 = v281;
  v273[0] = v278;
  v274[0] = v280;
  float32x2x2_t v193 = (float32x2x2_t)vzip1q_s32(v278, v280);
  v314.val[0] = (float32x2_t)vzip2q_s32(v278, v280).u64[0];
  int32x4_t v194 = vzip1q_s32(v279, (int32x4_t)0);
  v314.val[1] = (float32x2_t)vzip2q_s32(v279, (int32x4_t)0).u64[0];
  uint64_t v272 = &v278;
  char v195 = (float *)v273;
  float32x4_t v196 = (float *)v274;
  int32x4_t v197 = vzip2q_s32((int32x4_t)v193, v194);
  vst2_f32(v195, v193);
  v274[1] = v192;
  v273[1] = v197;
  vst2_f32(v196, v314);
  v270[1] = &v286;
  v271.i64[0] = (uint64_t)&unk_26E728B78;
  v270[0] = &unk_26E728850;
  *(float *)v197.i32 = a9;
  BOOL v198 = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v271, (uint64_t)v270, &v281, (uint64_t)&v283, &v284, &v282, &v277, &v275, *(int32x2_t *)v197.i8, &v276, (v191 & 0x200) != 0);
  if (v198)
  {
    float32x4_t v199 = *(float32x4_t *)a4;
    v200.i64[0] = a4[1].i64[0];
    v200.i32[2] = a4[1].i32[2];
    *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float v201 = v277.f32[0];
    if (v277.f32[0] <= 0.0)
    {
      if ((v191 & 0x200) != 0)
      {
        v200.i32[3] = 0;
        float32x4_t v229 = v199;
        v229.i32[3] = 0;
        float32x2_t v230 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v199, 3).u64[0];
        LODWORD(v231) = vmla_f32((float32x2_t)0xBF000000BF000000, v230, v230).u32[0];
        float32x4_t v232 = vmulq_n_f32((float32x4_t)v276, v231);
        v232.i32[3] = 0;
        float32x2_t v233 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
        float32x2_t v234 = (float32x2_t)vextq_s8(v276, v276, 8uLL).u64[0];
        float32x2_t v235 = (float32x2_t)vext_s8(*(int8x8_t *)v199.f32, (int8x8_t)v233, 4uLL);
        int8x8_t v236 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v199.f32, (float32x2_t)vext_s8(*(int8x8_t *)v276.i8, (int8x8_t)v234, 4uLL)), v235, *(float32x2_t *)v276.i8);
        *(int8x8_t *)v237.f32 = vext_s8(v236, (int8x8_t)vmls_f32(vmul_f32(v233, *(float32x2_t *)v276.i8), *(float32x2_t *)v199.f32, v234), 4uLL);
        v237.i64[1] = v236.u32[0];
        float32x4_t v238 = vmlaq_laneq_f32(v232, v237, v199, 3);
        v238.i64[1] = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u32[0];
        float32x4_t v239 = vmulq_f32(v229, (float32x4_t)v276);
        v239.i64[0] = vpaddq_f32(v239, v239).u64[0];
        float32x4_t v240 = vmlaq_n_f32(v238, v229, vpadd_f32(*(float32x2_t *)v239.f32, *(float32x2_t *)v239.f32).f32[0]);
        uint64_t v241 = vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).u32[0];
        float32x4_t v242 = vmulq_n_f32(v275, v231);
        v242.i32[3] = 0;
        float32x2_t v243 = (float32x2_t)vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
        int8x8_t v244 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v199.f32, (float32x2_t)vext_s8(*(int8x8_t *)v275.f32, (int8x8_t)v243, 4uLL)), v235, *(float32x2_t *)v275.f32);
        *(int8x8_t *)v245.f32 = vext_s8(v244, (int8x8_t)vmls_f32(vmul_f32(v233, *(float32x2_t *)v275.f32), *(float32x2_t *)v199.f32, v243), 4uLL);
        v245.i64[1] = v244.u32[0];
        float32x4_t v246 = vmlaq_laneq_f32(v242, v245, v199, 3);
        v246.i64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u32[0];
        float32x4_t v247 = vmulq_f32(v229, v275);
        v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
        float32x4_t v248 = vmlaq_n_f32(v246, v229, vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32).f32[0]);
        float32x4_t v249 = vaddq_f32(v248, v248);
        v249.i32[3] = 0;
        *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        float32x4_t v250 = vmulq_f32(v249, v249);
        v250.i64[0] = vpaddq_f32(v250, v250).u64[0];
        float32x2_t v251 = vpadd_f32(*(float32x2_t *)v250.f32, *(float32x2_t *)v250.f32);
        float32x2_t v252 = vrsqrte_f32(v251);
        int v253 = 4;
        do
        {
          float32x2_t v252 = vmul_f32(v252, vrsqrts_f32(vmul_f32(v252, v252), v251));
          --v253;
        }
        while (v253);
        float32x2_t v254 = vmul_f32(v251, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v251), 0), (int8x8_t)_D8, (int8x8_t)v252));
        float32x2_t v255 = vrecpe_f32(v254);
        int v256 = 4;
        do
        {
          float32x2_t v255 = vmul_f32(v255, vrecps_f32(v254, v255));
          --v256;
        }
        while (v256);
        v240.i64[1] = v241;
        v257.i64[0] = 0x4000000040000000;
        v257.i64[1] = 0x4000000040000000;
        float32x4_t v258 = vmlaq_f32(v200, v257, v240);
        float32x4_t v259 = vmulq_n_f32(v249, v255.f32[0]);
        v259.i32[3] = 0;
        int8x16_t v260 = (int8x16_t)vnegq_f32(v259);
        *(void *)(a6 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v260, v260, 4uLL).u64[0];
        v258.i32[3] = v260.i32[0];
        *(float32x4_t *)(a6 + 24) = v258;
        *(float *)(a6 + 48) = v201;
      }
      else
      {
        *(_DWORD *)(a6 + 48) = 0;
        float v261 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v261;
      }
      *(_DWORD *)(a6 + 16) = -1;
    }
    else
    {
      float32x2_t v202 = (float32x2_t)vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u64[0];
      float32x2_t v203 = (float32x2_t)vextq_s8(v276, v276, 8uLL).u64[0];
      float32x4_t v204 = vmulq_n_f32((float32x4_t)v276, v264);
      v204.i32[3] = 0;
      int8x8_t v205 = (int8x8_t)vmls_f32(vmul_f32(v266, (float32x2_t)vext_s8(*(int8x8_t *)v276.i8, (int8x8_t)v203, 4uLL)), v34, *(float32x2_t *)v276.i8);
      *(int8x8_t *)v206.f32 = vext_s8(v205, (int8x8_t)vmls_f32(vmul_f32(v263, *(float32x2_t *)v276.i8), v266, v203), 4uLL);
      v206.i64[1] = v205.u32[0];
      float32x4_t v207 = vmlaq_f32(v204, v265, v206);
      v207.i64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u32[0];
      float32x4_t v208 = vmulq_f32(v267, (float32x4_t)v276);
      v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
      float32x4_t v209 = vmlaq_n_f32(v207, v267, vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32).f32[0]);
      uint64_t v210 = vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL).u32[0];
      float32x4_t v211 = vmulq_n_f32(v275, v264);
      v211.i32[3] = 0;
      int8x8_t v212 = (int8x8_t)vmls_f32(vmul_f32(v266, (float32x2_t)vext_s8(*(int8x8_t *)v275.f32, (int8x8_t)v202, 4uLL)), v34, *(float32x2_t *)v275.f32);
      *(int8x8_t *)v213.f32 = vext_s8(v212, (int8x8_t)vmls_f32(vmul_f32(v263, *(float32x2_t *)v275.f32), v266, v202), 4uLL);
      v213.i64[1] = v212.u32[0];
      float32x4_t v214 = vmlaq_f32(v211, v265, v213);
      v214.i64[1] = vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u32[0];
      float32x4_t v215 = vmulq_f32(v267, v275);
      v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
      float32x4_t v216 = vmlaq_n_f32(v214, v267, vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32).f32[0]);
      float32x4_t v217 = vaddq_f32(v216, v216);
      v217.i32[3] = 0;
      *(_WORD *)(a6 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float32x4_t v218 = vmulq_f32(v217, v217);
      v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
      float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
      float32x2_t v220 = vrsqrte_f32(v219);
      int v221 = 4;
      do
      {
        float32x2_t v220 = vmul_f32(v220, vrsqrts_f32(vmul_f32(v220, v220), v219));
        --v221;
      }
      while (v221);
      float32x2_t v222 = vmul_f32(v219, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v219), 0), (int8x8_t)_D8, (int8x8_t)v220));
      float32x2_t v223 = vrecpe_f32(v222);
      int v224 = 4;
      do
      {
        float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
        --v224;
      }
      while (v224);
      v209.i64[1] = v210;
      v225.i64[0] = 0x4000000040000000;
      v225.i64[1] = 0x4000000040000000;
      float32x4_t v226 = vmulq_n_f32(v217, v223.f32[0]);
      v226.i32[3] = 0;
      float32x4_t v227 = vmlaq_f32(v268, v225, v209);
      int8x16_t v228 = (int8x16_t)vnegq_f32(v226);
      v227.i32[3] = v228.i32[0];
      *(float32x4_t *)(a6 + 24) = v227;
      *(void *)(a6 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v228, v228, 4uLL).u64[0];
      *(float *)(a6 + 48) = v201 * a8;
      if ((*((unsigned char *)a7 + 1) & 4) != 0)
      {
        unsigned int v285 = *(unsigned __int8 *)(v16 + 71);
        *(_DWORD *)(a6 + 16) = computeSweepConvexPlane(a1, v16 + 32, &v285, a2->f32, (float *)(a6 + 24), (float *)a5);
        *(_WORD *)(a6 + 20) |= 0x400u;
      }
    }
  }
  return v198;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  float32x4_t v58 = 0u;
  int8x16_t v59 = 0u;
  float32x2_t v57 = 0;
  BOOL v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(a1, a2, a3, a9, a4, a5, a6, &v57, &v58, &v59);
  if (v17)
  {
    int32x2_t v18 = (int32x2_t)v57;
    *a7 = v57;
    if (*(float *)v18.i32 == 0.0 && (a11 & 1) != 0)
    {
      uint64_t v19 = a1->i64[1];
      uint64_t v20 = a1[1].i64[0];
      uint64_t v21 = *(void *)(a2 + 8);
      *(float *)v18.i32 = (float)(*(float *)(v19 + 16) + *(float *)(v21 + 16)) * 100.0;
      int32x2_t v56 = vdup_lane_s32(v18, 0);
      char v53 = 0;
      float32x2_t v62 = 0;
      memset(v60, 0, sizeof(v60));
      float32x4_t v61 = 0u;
      v48.i64[1] = v19;
      uint64_t v49 = v20;
      v48.i64[0] = (uint64_t)&unk_26E728B78;
      float32x2x2_t v23 = *(float32x2x2_t *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      int32x4_t v24 = *(int32x4_t *)v20;
      int32x4_t v51 = *(int32x4_t *)(v20 + 16);
      v52[0] = v23;
      int32x4_t v50 = v24;
      float32x2x2_t v25 = (float32x2x2_t)vzip1q_s32(v24, (int32x4_t)v23);
      v23.val[0] = (float32x2_t)vzip2q_s32(v24, (int32x4_t)v23).u64[0];
      int32x4_t v26 = vzip1q_s32(v51, (int32x4_t)0);
      float32x4_t v27 = (float32x4_t)vzip2q_s32(v51, (int32x4_t)0);
      float32x4_t v28 = (float *)&v50;
      float32x4_t v29 = (float *)v52;
      vst2_f32(v28, v25);
      v52[1] = v22;
      vst2_f32(v29, v23);
      int32x4_t v51 = vzip2q_s32((int32x4_t)v25, v26);
      v47[0] = &unk_26E728850;
      v47[1] = v21;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v48, (uint64_t)v47, a3, (uint64_t *)&v56, 0, v55, v54, &v53, *(double *)v51.i64, *(double *)&v22, (int8x8_t)v23.val[0], v27, (uint64_t)v60) != 5)goto LABEL_5; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        float32x4_t v39 = vnegq_f32(*a6);
        v39.i32[3] = 0;
        float32x4_t v40 = vmulq_f32(v39, v39);
        v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
        float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
        float32x2_t v42 = vrsqrte_f32(v41);
        int v43 = 4;
        do
        {
          float32x2_t v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v41));
          --v43;
        }
        while (v43);
        float32x2_t v44 = vmul_f32(v41, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v41), 0), _D8, (int8x8_t)v42));
        float32x2_t v45 = vrecpe_f32(v44);
        int v46 = 4;
        do
        {
          float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
          --v46;
        }
        while (v46);
        float32x4_t v32 = vmulq_n_f32(v39, v45.f32[0]);
        v32.i32[3] = 0;
        float32x2_t v30 = 0;
        int8x16_t v31 = 0uLL;
      }
      else
      {
LABEL_5:
        float32x2_t v30 = v62;
        int8x16_t v31 = (int8x16_t)v60[0];
        float32x4_t v32 = v61;
      }
      *a7 = vmin_f32(v30, 0);
    }
    else
    {
      float32x4_t v32 = v58;
      int8x16_t v31 = v59;
    }
    *a10 = v31;
    *a8 = v32;
  }
  return v17;
}

BOOL sweepCapsule_BoxGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, int8x8_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __int16 *a8, double a9, float a10, float32x4_t a11)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  a11.i64[0] = *(void *)(a1 + 4);
  float32x4_t v13 = a11;
  v13.i32[2] = *(_DWORD *)(a1 + 12);
  float32x4_t v124 = 0u;
  float32x2_t v14 = (float32x2_t)vdup_laneq_s32((int32x4_t)v13, 2);
  float32x4_t v15 = v13;
  v15.i32[3] = 0;
  *(float32x2_t *)v16.f32 = *a6;
  v16.i64[1] = a6[1].u32[0];
  *(int8x8_t *)v13.f32 = a4[2];
  v13.i64[1] = a4[3].u32[0];
  float32x4_t v17 = *a2;
  v18.i64[0] = a2[1].i64[0];
  v18.i64[1] = a2[1].u32[2];
  float32x4_t v19 = vnegq_f32(*a2);
  float32x4_t v108 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3);
  float32x4_t v109 = v18;
  float32x4_t v20 = vsubq_f32(v13, v18);
  float32x4_t v21 = v19;
  v21.i32[3] = 0;
  LODWORD(v22) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32).u32[0];
  float32x4_t v23 = vmulq_n_f32(v20, v22);
  v23.i32[3] = 0;
  float32x2_t v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  float32x2_t v25 = (float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)v24, 4uLL);
  int8x8_t v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), v25, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v20.f32), *(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v27.i64[1] = v26.u32[0];
  float32x4_t v28 = vmlaq_laneq_f32(v23, v27, *a2, 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  float32x4_t v29 = vmulq_f32(v21, v20);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x4_t v30 = vmlaq_n_f32(v28, v21, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  float32x4_t v31 = vaddq_f32(v30, v30);
  v31.i32[3] = 0;
  float32x4_t v32 = *(float32x4_t *)a4->i8;
  v32.i32[3] = 0;
  _Q20 = vmulq_f32(v32, v21);
  _Q20.i64[0] = vpaddq_f32(_Q20, _Q20).u64[0];
  float32x4_t v34 = vmulq_laneq_f32(v32, *a2, 3);
  v32.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  int8x8_t v35 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a4, *(int8x8_t *)v32.f32, 4uLL), *(float32x2_t *)v19.f32), v25, (float32x2_t)*a4);
  *(int8x8_t *)v36.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a4, v24), *(float32x2_t *)v19.f32, *(float32x2_t *)v32.f32), 4uLL);
  *(int8x8_t *)&v36.u32[2] = v35;
  float32x4_t v37 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, *(float32x4_t *)a4->i8, 3), v34), v36);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
  *(int32x2_t *)v21.f32 = vdup_laneq_s32((int32x4_t)v37, 2);
  float32x2_t v38 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), vpadd_f32(*(float32x2_t *)_Q20.f32, *(float32x2_t *)_Q20.f32));
  float32x4_t v39 = vaddq_f32(v37, v37);
  *(int32x2_t *)v34.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v39.f32, 1);
  float32x2_t v41 = vmul_laneq_f32(*(float32x2_t *)v21.f32, v39, 2);
  *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v19.f32, v39.f32[0]);
  float32x2_t v42 = vmul_n_f32(*(float32x2_t *)v21.f32, v39.f32[0]);
  float32x2_t v43 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), v38, 1);
  *(float32x2_t *)v21.f32 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), v38, 1);
  float32x2_t v44 = vmul_lane_f32(*(float32x2_t *)v34.f32, v38, 1);
  __asm { FMOV            V20.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)_Q20.f32, *(float32x2_t *)v37.f32);
  *(int8x8_t *)_Q20.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q20.f32, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v19.f32, v44), 4uLL);
  *(float32x2_t *)&_Q20.u32[2] = vsub_f32(v42, *(float32x2_t *)v39.f32);
  *(int8x8_t *)v19.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v19.f32, v44), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v41), 4uLL);
  *(float32x2_t *)&v19.u32[2] = vadd_f32(*(float32x2_t *)v21.f32, v43);
  *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)v37.f32, v40);
  *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, v43), 4uLL);
  v49.i64[1] = v37.i64[0];
  v21.i32[0] = *(_DWORD *)(a3 + 8);
  v37.i32[0] = *(_DWORD *)(a5 + 24);
  int v121 = 3;
  char v122 = 0;
  v117[0] = 0;
  v117[1] = 0;
  float32x4_t v123 = v15;
  float32x2_t v50 = vpmin_f32(v14, *(float32x2_t *)a11.f32);
  v50.f32[0] = vpmin_f32(v50, v50).f32[0];
  float v118 = 0.15 * v50.f32[0];
  float v119 = 0.05 * v50.f32[0];
  float32x4_t v51 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v21.f32[0]);
  float32x4_t v52 = vmulq_n_f32(_Q20, v51.f32[0]);
  v52.i32[3] = 0;
  float32x4_t v53 = vmulq_lane_f32(v19, *(float32x2_t *)v51.f32, 1);
  v53.i32[3] = 0;
  float32x4_t v54 = vmulq_laneq_f32(v49, v51, 2);
  v54.i32[3] = 0;
  float v120 = 0.05 * v50.f32[0];
  float32x4_t v55 = vaddq_f32(v54, vaddq_f32(v52, v53));
  int v129 = 4;
  float32x4_t v125 = v31;
  int32x2_t v133 = vdup_lane_s32(*(int32x2_t *)v37.f32, 0);
  float32x4_t v131 = vaddq_f32(v55, v31);
  float32x4_t v132 = vsubq_f32(v31, v55);
  __int32 v126 = v37.i32[0];
  __int32 v127 = v37.i32[0];
  __int32 v128 = v37.i32[0];
  float32x4_t v102 = v16;
  float32x4_t v56 = vmulq_n_f32(v16, *(float *)&a9);
  v56.i32[3] = 0;
  float32x4_t v57 = vnegq_f32(v56);
  float32x4_t v58 = v57;
  v58.i32[3] = 0;
  float32x4_t v59 = v17;
  v59.i32[3] = 0;
  float32x4_t v60 = vmulq_n_f32(v58, v22);
  v60.i32[3] = 0;
  v21.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  v53.i64[0] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
  float32x2_t v61 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, *(int8x8_t *)v21.f32, 4uLL);
  float32x2_t v104 = *(float32x2_t *)v21.f32;
  float v105 = v22;
  *(float32x2_t *)v49.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v53.f32, 4uLL)), v61, *(float32x2_t *)v57.f32);
  *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v21.f32), *(float32x2_t *)v17.f32, *(float32x2_t *)v53.f32), 4uLL);
  v57.i64[1] = v49.u32[0];
  float32x4_t v106 = v59;
  float32x2_t v107 = *(float32x2_t *)v17.f32;
  float32x4_t v62 = vmlsq_laneq_f32(v60, v57, v17, 3);
  v62.i64[1] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u32[0];
  float32x4_t v63 = vmulq_f32(v58, v59);
  v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
  float32x4_t v64 = vmlaq_n_f32(v62, v59, vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32).f32[0]);
  float32x4_t v65 = vaddq_f32(v64, v64);
  v65.i32[3] = 0;
  char v130 = 1;
  float32x4_t v116 = v65;
  __int16 v66 = *a8;
  int32x2_t v115 = vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v113 = 0u;
  int8x16_t v114 = 0u;
  v112[1] = &v125;
  v111[1] = v117;
  v112[0] = &unk_26E7287F0;
  v111[0] = &unk_26E728AB8;
  float32x4_t v110 = v31;
  v59.f32[0] = v37.f32[0] + a10;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v112, (uint64_t)v111, &v110, &v124, &v116, (float32x2_t *)&v115, &v113, &v114, *(int32x2_t *)v59.f32, (v66 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float32x2_t v68 = (float32x2_t)v115;
    if (*(float *)v115.i32 > 0.0)
    {
      float32x4_t v69 = vmulq_n_f32((float32x4_t)v114, v105);
      v69.i32[3] = 0;
      float32x2_t v70 = (float32x2_t)vextq_s8(v114, v114, 8uLL).u64[0];
      int8x8_t v71 = (int8x8_t)vmls_f32(vmul_f32(v107, (float32x2_t)vext_s8(*(int8x8_t *)v114.i8, (int8x8_t)v70, 4uLL)), v61, *(float32x2_t *)v114.i8);
      *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(v104, *(float32x2_t *)v114.i8), v107, v70), 4uLL);
      v72.i64[1] = v71.u32[0];
      float32x4_t v73 = vmlaq_f32(v69, v108, v72);
      v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
      float32x4_t v74 = vmulq_f32(v106, (float32x4_t)v114);
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      float32x4_t v75 = vmlaq_n_f32(v73, v106, vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).f32[0]);
      v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
      *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      v74.i64[0] = 0x4000000040000000;
      v74.i64[1] = 0x4000000040000000;
      float32x4_t v76 = vmlaq_f32(v109, v74, v75);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      float32x4_t v77 = vmulq_n_f32(v113, v105);
      v77.i32[3] = 0;
      v72.i64[0] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
      int8x8_t v78 = (int8x8_t)vmls_f32(vmul_f32(v107, (float32x2_t)vext_s8(*(int8x8_t *)v113.f32, *(int8x8_t *)v72.f32, 4uLL)), v61, *(float32x2_t *)v113.f32);
      *(int8x8_t *)v72.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(v104, *(float32x2_t *)v113.f32), v107, *(float32x2_t *)v72.f32), 4uLL);
      v72.i64[1] = v78.u32[0];
      float32x4_t v79 = vmlaq_f32(v77, v108, v72);
      v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
      float32x4_t v80 = vmulq_f32(v106, v113);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      float32x4_t v81 = vmlaq_n_f32(v79, v106, vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).f32[0]);
      int8x16_t v82 = (int8x16_t)vaddq_f32(v81, v81);
      v68.i32[0] = vmul_f32(*(float32x2_t *)&a9, v68).u32[0];
      float32x4_t v83 = vmlaq_n_f32(v76, v102, v68.f32[0]);
      *(void *)(a7 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v82, v82, 4uLL).u64[0];
      v83.i32[3] = v82.i32[0];
      *(float32x4_t *)(a7 + 24) = v83;
LABEL_6:
      *(_DWORD *)(a7 + 48) = v68.i32[0];
      return result;
    }
    if ((v66 & 0x200) != 0)
    {
      float32x4_t v84 = vmulq_n_f32((float32x4_t)v114, v105);
      v84.i32[3] = 0;
      float32x2_t v85 = (float32x2_t)vextq_s8(v114, v114, 8uLL).u64[0];
      int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32(v107, (float32x2_t)vext_s8(*(int8x8_t *)v114.i8, (int8x8_t)v85, 4uLL)), v61, *(float32x2_t *)v114.i8);
      *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(v104, *(float32x2_t *)v114.i8), v107, v85), 4uLL);
      v87.i64[1] = v86.u32[0];
      float32x4_t v88 = vmlaq_f32(v84, v108, v87);
      v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
      float32x4_t v89 = vmulq_f32(v106, (float32x4_t)v114);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      float32x4_t v90 = vmlaq_n_f32(v88, v106, vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0]);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      v89.i64[0] = 0x4000000040000000;
      v89.i64[1] = 0x4000000040000000;
      float32x4_t v91 = vmlaq_f32(v109, v89, v90);
      v91.i64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u32[0];
      float32x4_t v92 = v113;
      float32x4_t v93 = vmulq_n_f32(v113, v105);
      v93.i32[3] = 0;
      v87.i64[0] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
      int8x8_t v94 = (int8x8_t)vmls_f32(vmul_f32(v107, (float32x2_t)vext_s8(*(int8x8_t *)v113.f32, *(int8x8_t *)v87.f32, 4uLL)), v61, *(float32x2_t *)v113.f32);
      *(int8x8_t *)v87.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(v104, *(float32x2_t *)v113.f32), v107, *(float32x2_t *)v87.f32), 4uLL);
      v87.i64[1] = v94.u32[0];
      float32x4_t v95 = vmlaq_f32(v93, v108, v87);
      *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
      float32x4_t v96 = vmulq_f32(v106, v92);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      float32x4_t v97 = vmlaq_n_f32(v95, v106, vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32).f32[0]);
      int8x16_t v98 = (int8x16_t)vaddq_f32(v97, v97);
      float32x4_t v99 = (float32x4_t)v98;
      v99.i32[3] = 0;
      float32x4_t v100 = vmlsq_lane_f32(v91, v99, v68, 0);
      v100.i32[3] = v98.i32[0];
      *(float32x4_t *)(a7 + 24) = v100;
      *(void *)(a7 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v98, v98, 4uLL).u64[0];
      goto LABEL_6;
    }
    *(_DWORD *)(a7 + 48) = 0;
    float v101 = -a6[1].f32[0];
    *(float32x2_t *)(a7 + 36) = vneg_f32(*a6);
    *(float *)(a7 + 44) = v101;
  }
  return result;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x4_t *a7, int8x16_t *a8, int32x2_t a9, char a10)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  float32x4_t v14 = *a3;
  float32x4_t v15 = vmlaq_f32(*a4, (float32x4_t)0, *a5);
  unsigned int v220 = 1;
  float32x4_t v16 = vmulq_f32(v14, v14);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), (int8x16_t)v14, (int8x16_t)xmmword_23435FD50);
  float32x4_t v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  float32x2_t v20 = vrsqrte_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  unsigned __int32 v22 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x2_t v30 = (float32x2_t)vdup_lane_s32(a9, 0);
  v15.i64[1] = v22;
  float32x4_t v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  float32x2_t v33 = *(float32x4_t **)(a1 + 8);
  float32x4_t v34 = v33[3];
  float32x4_t v35 = v33[4];
  float32x4_t v36 = vmulq_f32(v32, v34);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x4_t v37 = vmulq_f32(v32, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x4_t v38 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)), 0), (int8x16_t)v34, (int8x16_t)v35);
  float32x4_t v39 = *(float32x4_t **)(a2 + 8);
  float32x4_t v40 = v39[3];
  int8x16_t v41 = (int8x16_t)vnegq_f32(v40);
  v41.i32[3] = 0;
  float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v40, v41);
  float32x4_t v43 = vsubq_f32(v38, v42);
  int8x16_t v223 = (int8x16_t)v43;
  float32x4_t v224 = 0u;
  memset(v225, 0, sizeof(v225));
  float32x4_t v231 = v38;
  float32x4_t v232 = 0u;
  float32x4_t v44 = vnegq_f32(v43);
  v44.i32[3] = 0;
  float32x4_t v233 = 0u;
  long long v234 = 0u;
  float32x4_t v39 = (float32x4_t *)((char *)v39 + 24);
  float32x4_t v227 = v42;
  float32x4_t v228 = 0u;
  float32x4_t v229 = 0u;
  long long v230 = 0u;
  *(float32x2_t *)v38.f32 = vld1_dup_f32(v39->f32);
  *(float32x2_t *)v38.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v38.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v45 = vadd_f32(v30, *(float32x2_t *)v38.f32);
  *(float32x2_t *)v42.f32 = vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  float32x2_t v46 = vmul_f32(v45, v45);
  float32x4_t v47 = vmulq_f32(v44, v44);
  float32x4_t v48 = vpaddq_f32(v47, v47);
  float32x2_t v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
  float32x2_t v210 = *(float32x2_t *)v42.f32;
  int16x4_t v50 = (int16x4_t)vcgt_f32(v49, *(float32x2_t *)v42.f32);
  v51.i64[0] = -1;
  v51.i64[1] = -1;
  v48.i32[0] = -1;
  int32x4_t v208 = (int32x4_t)v48;
  int8x16_t v52 = (int8x16_t)v43;
  int8x16_t v214 = (int8x16_t)v44;
  float32x4_t v53 = v44;
  float32x2_t v54 = 0;
  while (1)
  {
    float32x4_t v55 = (float32x4_t)v52;
    int8x16_t v52 = (int8x16_t)v43;
    int8x8_t v56 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v50, 0), 0xFuLL));
    unsigned __int32 v57 = vuzp1_s8(v56, v56).u32[0];
    if (v57 != -1) {
      break;
    }
    float32x4_t v58 = vmulq_f32(v53, v53);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    float32x2_t v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
    float32x2_t v60 = vrsqrte_f32(v59);
    int v61 = 4;
    do
    {
      float32x2_t v60 = vmul_f32(v60, vrsqrts_f32(vmul_f32(v60, v60), v59));
      --v61;
    }
    while (v61);
    float32x2_t v62 = vmul_f32(v59, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v59), 0), (int8x8_t)_D8, (int8x8_t)v60));
    float32x2_t v63 = vrecpe_f32(v62);
    int v64 = 4;
    do
    {
      float32x2_t v63 = vmul_f32(v63, vrecps_f32(v62, v63));
      --v64;
    }
    while (v64);
    float32x4_t v65 = vmulq_n_f32(v53, v63.f32[0]);
    v65.i32[3] = 0;
    float32x4_t v66 = vnegq_f32(v65);
    v66.i32[3] = 0;
    int32x4_t v67 = *(float32x4_t **)(a1 + 8);
    float32x4_t v68 = v67[3];
    float32x4_t v69 = v67[4];
    float32x4_t v70 = vmulq_f32(v65, v68);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    float32x4_t v71 = vmulq_f32(v65, v69);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    float32x4_t v72 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0), (int8x16_t)v68, (int8x16_t)v69);
    float32x4_t v73 = *(float32x4_t *)(*(void *)(a2 + 8) + 48);
    int8x16_t v74 = (int8x16_t)vnegq_f32(v73);
    v74.i32[3] = 0;
    float32x4_t v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v66), (int8x16_t)v73, v74);
    float32x4_t v75 = vaddq_f32(v15, v55);
    float32x4_t v43 = vsubq_f32(v72, v75);
    float32x4_t v76 = vnegq_f32(v43);
    v76.i32[3] = 0;
    float32x4_t v77 = vmulq_f32(v65, v76);
    v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
    float32x2_t v78 = vsub_f32(vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32), v45);
    if (v78.f32[0] > 0.0)
    {
      int8x16_t v79 = v52;
      float32x4_t v80 = vmulq_f32(v65, *a5);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      float32x2_t v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
      float32x2_t v82 = 0;
      int8x16_t v83 = 0uLL;
      if (v81.f32[0] >= 0.0)
      {
        float32x4_t v87 = 0uLL;
        goto LABEL_77;
      }
      float32x2_t v84 = vrecpe_f32(v81);
      int v85 = 4;
      do
      {
        float32x2_t v84 = vmul_f32(v84, vrecps_f32(v81, v84));
        --v85;
      }
      while (v85);
      float32x2_t v86 = vsub_f32(v54, vmul_f32(v78, v84));
      if (vcgt_f32(v86, v54).u8[0])
      {
        float32x4_t v87 = 0uLL;
        if (v86.f32[0] > 1.0) {
          goto LABEL_77;
        }
        float32x4_t v88 = vmlaq_n_f32(*a4, *a5, v86.f32[0]);
        v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
        float32x4_t v89 = vsubq_f32(v88, v15);
        float32x4_t v227 = vaddq_f32(v227, v89);
        float32x4_t v228 = vaddq_f32(v228, v89);
        float32x4_t v229 = vaddq_f32(v229, v89);
        int8x16_t v223 = (int8x16_t)vsubq_f32(v231, v227);
        float32x4_t v224 = vsubq_f32(v232, v228);
        v225[0] = vsubq_f32(v233, v229);
        float32x4_t v75 = vaddq_f32(v55, v88);
        float32x4_t v43 = vsubq_f32(v72, v75);
        float32x2_t v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v214 = (int8x16_t)v53;
        float32x4_t v15 = v88;
      }
      float32x2_t v54 = v86;
      int8x16_t v52 = v79;
    }
    uint64_t v90 = v220;
    *(&v231 + v22physx::Sq::AABBTree::release(this, 0) = v72;
    *(&v227 + v9physx::Sq::AABBTree::release(this, 0) = v75;
    unsigned int v220 = v90 + 1;
    *(&v223 + v9physx::Sq::AABBTree::release(this, 0) = (int8x16_t)v43;
    switch(v90)
    {
      case 3:
        int8x16_t v215 = v52;
        float32x4_t v217 = v15;
        physx::Gu::closestPtPointTetrahedron((float32x4_t *)&v223, &v231, &v227, (int *)&v220);
        int8x16_t v52 = v215;
        float32x4_t v15 = v217;
        break;
      case 2:
        int8x16_t v99 = v52;
        float32x4_t v43 = (float32x4_t)v223;
        float32x4_t v100 = vsubq_f32(v224, (float32x4_t)v223);
        float32x4_t v101 = vsubq_f32(v225[0], (float32x4_t)v223);
        int8x8_t v103 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v100.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL), *(float32x2_t *)v101.f32);
        *(int8x8_t *)v102.f32 = vext_s8(v103, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), *(float32x2_t *)v101.f32), *(float32x2_t *)v100.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL)), 4uLL);
        v103.i32[1] = 0;
        unsigned int v220 = 3;
        float32x2_t v104 = vpadd_f32(vmul_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32), vmul_f32((float32x2_t)v103.u32[0], (float32x2_t)v103.u32[0]));
        float32x2_t v105 = vpadd_f32(v104, v104);
        if (v105.f32[0] <= 0.00000011921)
        {
          unsigned int v220 = 2;
          float32x4_t v142 = vmulq_f32(v100, v100);
          v142.i64[0] = vpaddq_f32(v142, v142).u64[0];
          float32x2_t v143 = vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v143), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
          {
            float32x4_t v144 = vnegq_f32((float32x4_t)v223);
            v144.i32[3] = 0;
            float32x4_t v145 = vmulq_f32(v144, v100);
            v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
            float32x2_t v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
            float32x2_t v147 = vrecpe_f32(v143);
            int v148 = 4;
            int8x16_t v52 = v99;
            do
            {
              float32x2_t v147 = vmul_f32(v147, vrecps_f32(v143, v147));
              --v148;
            }
            while (v148);
            float32x4_t v43 = vmlaq_n_f32((float32x4_t)v223, v100, vmax_f32(vmin_f32(vmul_f32(v146, v147), _D8), 0).f32[0]);
            goto LABEL_41;
          }
          unsigned int v220 = 1;
          goto LABEL_45;
        }
        if (v105.f32[0] == 0.0)
        {
          float32x4_t v43 = 0uLL;
LABEL_45:
          int8x16_t v52 = v99;
          break;
        }
        *(int8x8_t *)&v102.u32[2] = v103;
        float32x2_t v106 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 8uLL).u64[0];
        float32x2_t v107 = (float32x2_t)vextq_s8((int8x16_t)v225[0], (int8x16_t)v225[0], 8uLL).u64[0];
        float32x2_t v108 = (float32x2_t)vextq_s8((int8x16_t)v225[0], (int8x16_t)v225[0], 4uLL).u64[0];
        float32x2_t v109 = (float32x2_t)vextq_s8((int8x16_t)v224, (int8x16_t)v224, 4uLL).u64[0];
        int8x8_t v110 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v108), v109, *(float32x2_t *)v225[0].f32);
        *(int8x8_t *)v111.f32 = vext_s8(v110, (int8x8_t)vmls_f32(vmul_f32(v106, *(float32x2_t *)v225[0].f32), *(float32x2_t *)v224.f32, v107), 4uLL);
        v111.i64[1] = v110.u32[0];
        float32x2_t v112 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
        float32x2_t v113 = (float32x2_t)vextq_s8(v223, v223, 4uLL).u64[0];
        int8x8_t v114 = (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v225[0].f32), v108, *(float32x2_t *)v223.i8);
        *(int8x8_t *)v115.f32 = vext_s8(v114, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v107), *(float32x2_t *)v225[0].f32, v112), 4uLL);
        v115.i64[1] = v114.u32[0];
        int8x8_t v116 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v109), v113, *(float32x2_t *)v224.f32);
        *(int8x8_t *)v117.f32 = vext_s8(v116, (int8x8_t)vmls_f32(vmul_f32(v112, *(float32x2_t *)v224.f32), *(float32x2_t *)v223.i8, v106), 4uLL);
        v117.i64[1] = v116.u32[0];
        float32x4_t v118 = vmulq_f32(v111, v102);
        v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
        float32x2_t v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
        float32x4_t v120 = vmulq_f32(v115, v102);
        v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
        float32x2_t v121 = vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32);
        float32x4_t v122 = vmulq_f32(v117, v102);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        float32x2_t v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v121), (int8x8_t)vcgez_f32(v119)), (int8x8_t)vcgez_f32(v123)), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
        {
          float32x4_t v124 = vnegq_f32((float32x4_t)v223);
          v124.i32[3] = 0;
          float32x4_t v125 = vnegq_f32(v224);
          v125.i32[3] = 0;
          float32x4_t v126 = vmulq_f32(v124, v100);
          v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
          float32x2_t v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
          float32x4_t v128 = vmulq_f32(v100, v125);
          v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
          float32x2_t v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v127), (int8x8_t)vclez_f32(v129)), (int8x8_t)vclez_f32(v123)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
          {
            float32x2_t v153 = vsub_f32(v127, v129);
            float32x2_t v154 = vrecpe_f32(v153);
            int v155 = 4;
            do
            {
              float32x2_t v154 = vmul_f32(v154, vrecps_f32(v153, v154));
              --v155;
            }
            while (v155);
            uint64_t v141 = 0;
            float32x4_t v43 = vmlaq_n_f32((float32x4_t)v223, v100, vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v153), (float32x2_t)0x3400000034000000), (int8x8_t)v154, 0)).f32[0]);
            v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
            unsigned int v156 = 2;
            uint64_t v140 = 1;
          }
          else
          {
            float32x4_t v130 = vnegq_f32(v225[0]);
            v130.i32[3] = 0;
            float32x4_t v131 = vmulq_f32(v125, v101);
            v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
            float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
            float32x4_t v133 = vmulq_f32(v100, v130);
            v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
            float32x2_t v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
            float32x4_t v135 = vmulq_f32(v101, v130);
            v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
            float32x2_t v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v132, v129), (int8x8_t)vcge_f32(v134, v136)), (int8x8_t)vclez_f32(v119)), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
            {
              float32x4_t v137 = vmulq_f32(v124, v101);
              v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
              float32x2_t v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v138), (int8x8_t)vclez_f32(v136)), (int8x8_t)vclez_f32(v121)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
              {
                float32x2_t v162 = vsub_f32(v138, v136);
                float32x2_t v163 = vrecpe_f32(v162);
                int v164 = 4;
                int8x16_t v52 = v99;
                do
                {
                  float32x2_t v163 = vmul_f32(v163, vrecps_f32(v162, v163));
                  --v164;
                }
                while (v164);
                uint64_t v141 = 0;
                float32x4_t v43 = vmlaq_n_f32((float32x4_t)v223, v101, vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
                v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
                uint64_t v140 = 2;
              }
              else
              {
                int8x16_t v52 = v99;
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v138), (int8x8_t)vclez_f32(v127)), 0), *(int8x8_t *)v223.i8).u32[0] == -1)
                {
                  uint64_t v141 = 0;
                  uint64_t v140 = 1;
                }
                else
                {
                  *(int16x4_t *)v43.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v129, v132), (int8x8_t)vcgez_f32(v129)), 0);
                  *(int8x8_t *)v43.f32 = vuzp1_s8(*(int8x8_t *)v43.f32, *(int8x8_t *)v43.f32);
                  __int32 v139 = v43.i32[0];
                  float32x4_t v43 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v43, v208), 0), (int8x16_t)v224, (int8x16_t)v225[0]);
                  uint64_t v140 = 1;
                  if (v139 == -1) {
                    uint64_t v141 = 1;
                  }
                  else {
                    uint64_t v141 = 2;
                  }
                }
              }
              unsigned int v156 = v140;
              goto LABEL_61;
            }
            float32x2_t v157 = vsub_f32(v132, v129);
            float32x2_t v158 = vadd_f32(v157, vsub_f32(v134, v136));
            float32x2_t v159 = vrecpe_f32(v158);
            int v160 = 4;
            do
            {
              float32x2_t v159 = vmul_f32(v159, vrecps_f32(v158, v159));
              --v160;
            }
            while (v160);
            int8x16_t v161 = (int8x16_t)vmlaq_n_f32(v224, vsubq_f32(v225[0], v224), vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
            v161.i64[1] = vextq_s8(v161, v161, 8uLL).u32[0];
            unsigned int v156 = 2;
            uint64_t v140 = 2;
            uint64_t v141 = 1;
            float32x4_t v43 = (float32x4_t)v161;
          }
          int8x16_t v52 = v99;
LABEL_61:
          float32x4_t v165 = *((float32x4_t *)&v223 + v140);
          float32x4_t v166 = *(&v231 + v141);
          float32x4_t v167 = *(&v231 + v140);
          float32x4_t v168 = *(&v227 + v141);
          float32x4_t v169 = *(&v227 + v140);
          int8x16_t v223 = *(&v223 + v141);
          float32x4_t v224 = v165;
          float32x4_t v231 = v166;
          float32x4_t v232 = v167;
          float32x4_t v227 = v168;
          float32x4_t v228 = v169;
          unsigned int v220 = v156;
          break;
        }
        float32x4_t v149 = vmulq_f32((float32x4_t)v223, v102);
        float32x2_t v150 = vrecpe_f32(v105);
        int v151 = 4;
        int8x16_t v52 = v99;
        do
        {
          float32x2_t v150 = vmul_f32(v150, vrecps_f32(v105, v150));
          --v151;
        }
        while (v151);
        float32x2_t v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
        float32x4_t v43 = vmulq_n_f32(v102, vmul_f32(v150, vpadd_f32(v152, v152)).f32[0]);
        v43.i32[3] = 0;
        break;
      case 1:
        float32x4_t v43 = (float32x4_t)v223;
        float32x4_t v91 = vsubq_f32(v224, (float32x4_t)v223);
        float32x4_t v92 = vmulq_f32(v91, v91);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v93), 0), *(int8x8_t *)v223.i8).u32[0] != -1)
        {
          float32x4_t v94 = vnegq_f32((float32x4_t)v223);
          v94.i32[3] = 0;
          float32x4_t v95 = vmulq_f32(v94, v91);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          float32x2_t v97 = vrecpe_f32(v93);
          int v98 = 4;
          do
          {
            float32x2_t v97 = vmul_f32(v97, vrecps_f32(v93, v97));
            --v98;
          }
          while (v98);
          float32x4_t v43 = vmlaq_n_f32((float32x4_t)v223, v91, vmax_f32(vmin_f32(vmul_f32(v96, v97), _D8), 0).f32[0]);
LABEL_41:
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          break;
        }
        unsigned int v220 = 1;
        break;
      default:
        break;
    }
    float32x4_t v53 = vnegq_f32(v43);
    v53.i32[3] = 0;
    float32x4_t v170 = vmulq_f32(v43, v43);
    v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
    float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
    int8x8_t v172 = (int8x8_t)vcgt_f32(v49, v171);
    int8x16_t v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v172, (int8x8_t)0x100000001), 0);
    int16x4_t v50 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v171, v46), v172);
    float32x2_t v49 = v171;
  }
  uint64_t v173 = *(void *)(a1 + 8);
  float32x4_t v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v49, v210), 0), v51), 0x1FuLL)), (int8x16_t)v53, v214);
  float32x4_t v175 = vmulq_f32(v174, v174);
  v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
  float32x2_t v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
  float32x2_t v177 = vrsqrte_f32(v176);
  int v178 = 4;
  do
  {
    float32x2_t v177 = vmul_f32(v177, vrsqrts_f32(vmul_f32(v177, v177), v176));
    --v178;
  }
  while (v178);
  float32x2_t v179 = vmul_f32(v176, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v176), 0), (int8x8_t)_D8, (int8x8_t)v177));
  float32x2_t v180 = vrecpe_f32(v179);
  int v181 = 4;
  do
  {
    float32x2_t v180 = vmul_f32(v180, vrecps_f32(v179, v180));
    --v181;
  }
  while (v181);
  int8x16_t v182 = (int8x16_t)vdupq_n_s32(-*(char *)(v173 + 32));
  int8x16_t v183 = (int8x16_t)vmulq_n_f32(v174, v180.f32[0]);
  v183.i32[3] = 0;
  float32x4_t v87 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v179), 0), v183));
  v87.i32[3] = 0;
  float32x4_t v184 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v51, 0x1FuLL)), v52, (int8x16_t)v55);
  float32x4_t v219 = v184;
  if (v220 == 3)
  {
    float32x2_t v221 = 0;
    float32x2_t v222 = 0;
    int8x16_t v216 = v182;
    float32x4_t v218 = v87;
    physx::Gu::barycentricCoordinates(&v219, (float32x4_t *)&v223, &v224, v225, &v222, &v221);
    int8x16_t v182 = v216;
    float32x4_t v87 = v218;
    v180.i32[1] = v231.i32[1];
    float32x4_t v185 = vmulq_n_f32(vsubq_f32(v232, v231), v222.f32[0]);
    v185.i32[3] = 0;
    *(float32x2_t *)v55.f32 = v221;
    float32x4_t v186 = vmulq_n_f32(vsubq_f32(v233, v231), v221.f32[0]);
    v186.i32[3] = 0;
    float32x4_t v43 = vaddq_f32(v231, vaddq_f32(v185, v186));
    uint64_t v173 = *(void *)(a1 + 8);
  }
  else if (v220 == 2)
  {
    v55.i64[1] = v224.i64[1];
    float32x4_t v187 = vsubq_f32((float32x4_t)v223, v184);
    float32x4_t v188 = vsubq_f32(vsubq_f32(v224, v184), v187);
    float32x4_t v189 = vmulq_f32(v188, v188);
    v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
    *(float32x2_t *)v55.f32 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
    float32x2_t v190 = vrecpe_f32(*(float32x2_t *)v55.f32);
    int v191 = 4;
    do
    {
      float32x2_t v190 = vmul_f32(v190, vrecps_f32(*(float32x2_t *)v55.f32, v190));
      --v191;
    }
    while (v191);
    *(int32x2_t *)v55.f32 = vcgtz_f32(*(float32x2_t *)v55.f32);
    float32x4_t v192 = vnegq_f32(v187);
    v192.i32[3] = 0;
    float32x4_t v193 = vmulq_f32(v192, v188);
    v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
    float32x4_t v43 = vmlaq_n_f32(v231, vsubq_f32(v232, v231), vmul_f32((float32x2_t)vbsl_s8(*(int8x8_t *)v55.f32, (int8x8_t)v190, 0), vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32)).f32[0]);
    v180.i32[1] = 0;
    v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v43 = 0uLL;
    if (v220 == 1) {
      float32x4_t v43 = v231;
    }
  }
  v53.i32[0] = *(_DWORD *)(v173 + 16);
  float32x4_t v72 = vmlsq_lane_f32(v43, v87, *(float32x2_t *)v53.f32, 0);
  v53.i32[1] = 0;
  v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
  int8x16_t v83 = vbslq_s8(v182, (int8x16_t)v72, (int8x16_t)v43);
  float32x2_t v82 = v54;
LABEL_77:
  if (v57 != -1)
  {
    *a6 = v82;
    if (v82.f32[0] == 0.0 && a10 != 0)
    {
      uint64_t v195 = *(void *)(a1 + 8);
      uint64_t v196 = *(void *)(a2 + 8);
      v53.i32[0] = 1120403456;
      v43.f32[0] = (float)(*(float *)(v195 + 16) + *(float *)(v196 + 16)) * 100.0;
      *(int32x2_t *)v219.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
      LOBYTE(v22physx::Sq::AABBTree::release(this, 0) = 0;
      float32x2_t v226 = 0;
      int8x16_t v223 = 0u;
      float32x4_t v224 = 0u;
      v225[0] = 0u;
      v231.i64[0] = (uint64_t)&unk_26E7287F0;
      v231.i64[1] = v195;
      v227.i64[0] = (uint64_t)&unk_26E728AB8;
      v227.i64[1] = v196;
      if (physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)&v231, (uint64_t)&v227, a3, (uint64_t *)&v219, 0, &v222, &v221, &v220, 0.0, *(double *)v53.i64, *(int8x8_t *)v72.f32, v55, (uint64_t)&v223) != 5)goto LABEL_83; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration(a1) - 5 > 1)
      {
        float32x4_t v200 = vnegq_f32(*a5);
        v200.i32[3] = 0;
        float32x4_t v201 = vmulq_f32(v200, v200);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        float32x2_t v203 = vrsqrte_f32(v202);
        int v204 = 4;
        do
        {
          float32x2_t v203 = vmul_f32(v203, vrsqrts_f32(vmul_f32(v203, v203), v202));
          --v204;
        }
        while (v204);
        float32x2_t v205 = vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v202), 0), _D8, (int8x8_t)v203));
        float32x2_t v206 = vrecpe_f32(v205);
        int v207 = 4;
        do
        {
          float32x2_t v206 = vmul_f32(v206, vrecps_f32(v205, v206));
          --v207;
        }
        while (v207);
        float32x4_t v87 = vmulq_n_f32(v200, v206.f32[0]);
        v87.i32[3] = 0;
        float32x2_t v197 = 0;
        int8x16_t v83 = 0uLL;
      }
      else
      {
LABEL_83:
        float32x2_t v197 = v226;
        int8x16_t v83 = v223;
        float32x4_t v87 = v225[0];
      }
      *a6 = vmin_f32(v197, 0);
    }
    *a8 = v83;
    *a7 = v87;
  }
  return v57 != -1;
}

BOOL sweepBox_SphereGeom(uint64_t a1, uint64_t a2, float a3, float a4, int32x4_t a5, double a6, double a7, double a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  a5.i64[0] = *(void *)(a13 + 48);
  int32x4_t v18 = a5;
  v18.i32[2] = *(_DWORD *)(a13 + 56);
  float32x2_t v19 = (float32x2_t)vdup_laneq_s32(v18, 2);
  int32x4_t v20 = v18;
  v20.i32[3] = 0;
  float32x4_t v105 = 0u;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  v18.i32[0] = *(_DWORD *)(a1 + 4);
  v21.i64[0] = *(void *)(a2 + 16);
  v21.i64[1] = *(unsigned int *)(a2 + 24);
  v22.i64[0] = a12[1].i64[0];
  float32x4_t v23 = *a12;
  v22.i64[1] = a12[1].u32[2];
  float32x4_t v24 = vnegq_f32(*a12);
  float32x4_t v90 = v22;
  float32x4_t v25 = vsubq_f32(v21, v22);
  float32x4_t v26 = v24;
  v26.i32[3] = 0;
  float32x4_t v88 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  LODWORD(v27) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).u32[0];
  float32x4_t v28 = vmulq_n_f32(v25, v27);
  v28.i32[3] = 0;
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v29, 4uLL), *(float32x2_t *)v25.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v24.i64[1] = v30.u32[0];
  float32x4_t v31 = vmlaq_laneq_f32(v28, v24, *a12, 3);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  float32x4_t v32 = vmulq_f32(v26, v25);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x4_t v33 = vmlaq_n_f32(v31, v26, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
  float32x4_t v34 = vaddq_f32(v33, v33);
  v34.i32[3] = 0;
  int v102 = 3;
  char v103 = 0;
  v98[0] = 0;
  v98[1] = 0;
  int32x4_t v104 = v20;
  float32x2_t v35 = vpmin_f32(v19, *(float32x2_t *)a5.i8);
  v35.f32[0] = vpmin_f32(v35, v35).f32[0];
  float v99 = 0.15 * v35.f32[0];
  float v100 = 0.05 * v35.f32[0];
  float v101 = 0.05 * v35.f32[0];
  int v110 = 4;
  float32x4_t v106 = v34;
  int32x2_t v114 = vdup_lane_s32(*(int32x2_t *)v18.i8, 0);
  float32x4_t v112 = v34;
  float32x4_t v113 = v34;
  __int32 v107 = v18.i32[0];
  __int32 v108 = v18.i32[0];
  __int32 v109 = v18.i32[0];
  float32x4_t v36 = vmulq_n_f32(a10, a3);
  float32x4_t v37 = v36;
  v37.i32[3] = 0;
  float32x4_t v38 = v23;
  v38.i32[3] = 0;
  float32x4_t v39 = vmulq_n_f32(v37, v27);
  v39.i32[3] = 0;
  char v111 = 1;
  v24.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  float32x2_t v40 = (float32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  float32x2_t v41 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v24.f32, 4uLL);
  float32x2_t v85 = *(float32x2_t *)v24.f32;
  float v86 = v27;
  int8x8_t v42 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)v40, 4uLL), *(float32x2_t *)v23.f32), v41, *(float32x2_t *)v36.f32);
  *(int8x8_t *)v36.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v24.f32), *(float32x2_t *)v23.f32, v40), 4uLL);
  v36.i64[1] = v42.u32[0];
  float32x2_t v87 = *(float32x2_t *)v23.f32;
  float32x4_t v43 = vmlsq_laneq_f32(v39, v36, v23, 3);
  v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
  float32x4_t v44 = vmulq_f32(v37, v38);
  v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
  float32x4_t v89 = v38;
  float32x4_t v45 = vmlaq_n_f32(v43, v38, vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0]);
  float32x4_t v46 = vaddq_f32(v45, v45);
  v46.i32[3] = 0;
  float32x4_t v97 = v46;
  __int16 v47 = *a16;
  float32x2_t v96 = 0;
  float32x4_t v94 = 0u;
  int8x16_t v95 = 0u;
  float32x4_t v93 = v34;
  v92[1] = &v106;
  v91[1] = v98;
  v92[0] = &unk_26E7287F0;
  v91[0] = &unk_26E728AB8;
  v38.f32[0] = *(float *)v18.i32 + a4;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v92, (uint64_t)v91, &v93, &v105, &v97, &v96, &v94, &v95, *(int32x2_t *)v38.f32, (v47 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float v49 = v96.f32[0];
    if (v96.f32[0] <= 0.0)
    {
      if ((v47 & 0x200) != 0)
      {
        *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        float32x4_t v68 = vmulq_n_f32((float32x4_t)v95, v86);
        v68.i32[3] = 0;
        float32x2_t v69 = (float32x2_t)vextq_s8(v95, v95, 8uLL).u64[0];
        int8x8_t v70 = (int8x8_t)vmls_f32(vmul_f32(v87, (float32x2_t)vext_s8(*(int8x8_t *)v95.i8, (int8x8_t)v69, 4uLL)), v41, *(float32x2_t *)v95.i8);
        *(int8x8_t *)v71.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v95.i8), v87, v69), 4uLL);
        v71.i64[1] = v70.u32[0];
        float32x4_t v72 = vmlaq_f32(v68, v88, v71);
        v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
        float32x4_t v73 = vmulq_f32(v89, (float32x4_t)v95);
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        float32x4_t v74 = vmlaq_n_f32(v72, v89, vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32).f32[0]);
        v74.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u32[0];
        v73.i64[0] = 0x4000000040000000;
        v73.i64[1] = 0x4000000040000000;
        float32x4_t v75 = vmlaq_f32(v90, v73, v74);
        float32x4_t v76 = vmulq_n_f32(v94, v86);
        v76.i32[3] = 0;
        v71.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
        int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v87, (float32x2_t)vext_s8(*(int8x8_t *)v94.f32, *(int8x8_t *)v71.f32, 4uLL)), v41, *(float32x2_t *)v94.f32);
        *(int8x8_t *)v71.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v94.f32), v87, *(float32x2_t *)v71.f32), 4uLL);
        v71.i64[1] = v77.u32[0];
        float32x4_t v78 = vmlaq_f32(v76, v88, v71);
        v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
        float32x4_t v79 = vmulq_f32(v89, v94);
        v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
        float32x4_t v80 = vmlaq_n_f32(v78, v89, vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32).f32[0]);
        float32x4_t v81 = vaddq_f32(v80, v80);
        v81.i32[3] = 0;
        int8x16_t v82 = (int8x16_t)vnegq_f32(v81);
        *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v82, v82, 4uLL).u64[0];
        v75.i32[3] = v82.i32[0];
        *(float32x4_t *)(a15 + 24) = v75;
        *(float *)(a15 + 48) = v49;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        float v83 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v83;
      }
    }
    else
    {
      float32x4_t v50 = (float32x4_t)v95;
      float32x4_t v51 = vmulq_n_f32((float32x4_t)v95, v86);
      v51.i32[3] = 0;
      float32x2_t v52 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
      int8x8_t v53 = (int8x8_t)vmls_f32(vmul_f32(v87, (float32x2_t)vext_s8(*(int8x8_t *)v95.i8, (int8x8_t)v52, 4uLL)), v41, *(float32x2_t *)v95.i8);
      *(int8x8_t *)v54.f32 = vext_s8(v53, (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v95.i8), v87, v52), 4uLL);
      v54.i64[1] = v53.u32[0];
      float32x4_t v55 = vmlaq_f32(v51, v88, v54);
      v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
      *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float32x4_t v56 = vmulq_f32(v89, v50);
      v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
      float32x4_t v57 = vmlaq_n_f32(v55, v89, vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32).f32[0]);
      v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
      v56.i64[0] = 0x4000000040000000;
      v56.i64[1] = 0x4000000040000000;
      float32x4_t v58 = vmulq_n_f32(v94, v86);
      v58.i32[3] = 0;
      float32x2_t v59 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
      int8x8_t v60 = (int8x8_t)vmls_f32(vmul_f32(v87, (float32x2_t)vext_s8(*(int8x8_t *)v94.f32, (int8x8_t)v59, 4uLL)), v41, *(float32x2_t *)v94.f32);
      *(int8x8_t *)v61.f32 = vext_s8(v60, (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v94.f32), v87, v59), 4uLL);
      v61.i64[1] = v60.u32[0];
      float32x4_t v62 = vmlaq_f32(v58, v88, v61);
      float32x4_t v63 = vmlaq_f32(v90, v56, v57);
      v62.i64[1] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u32[0];
      float32x4_t v64 = vmulq_f32(v89, v94);
      v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
      float32x4_t v65 = vmlaq_n_f32(v62, v89, vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32).f32[0]);
      float32x4_t v66 = vaddq_f32(v65, v65);
      v66.i32[3] = 0;
      int8x16_t v67 = (int8x16_t)vnegq_f32(v66);
      *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v67, v67, 4uLL).u64[0];
      v63.i32[3] = v67.i32[0];
      *(float32x4_t *)(a15 + 24) = v63;
      *(float *)(a15 + 48) = v49 * a3;
    }
  }
  return result;
}

BOOL sweepBox_CapsuleGeom(uint64_t a1, int8x8_t *a2, float a3, float a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  v16.i32[0] = *(_DWORD *)(a1 + 4);
  float v19 = *(float *)(a1 + 8);
  a7.i64[0] = *(void *)(a13 + 48);
  float32x4_t v20 = a7;
  v20.i32[2] = *(_DWORD *)(a13 + 56);
  float32x2_t v21 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
  float32x4_t v22 = v20;
  v22.i32[3] = 0;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  *(int8x8_t *)v20.f32 = a2[2];
  v20.i64[1] = a2[3].u32[0];
  float32x4_t v23 = *a12;
  v24.i64[0] = a12[1].i64[0];
  v24.i64[1] = a12[1].u32[2];
  float32x4_t v25 = vnegq_f32(*a12);
  float32x4_t v113 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  float32x4_t v114 = v24;
  float32x4_t v26 = vsubq_f32(v20, v24);
  float32x4_t v27 = v25;
  v27.i32[3] = 0;
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32).u32[0];
  float32x4_t v29 = vmulq_n_f32(v26, v28);
  v29.i32[3] = 0;
  float32x2_t v30 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  float32x2_t v31 = (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v30, 4uLL);
  int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), v31, *(float32x2_t *)v26.f32);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v26.f32), *(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v33.i64[1] = v32.u32[0];
  float32x4_t v34 = vmlaq_laneq_f32(v29, v33, *a12, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  float32x4_t v35 = vmulq_f32(v27, v26);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  float32x4_t v36 = vmlaq_n_f32(v34, v27, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  float32x4_t v37 = vaddq_f32(v36, v36);
  v37.i32[3] = 0;
  float32x4_t v38 = *(float32x4_t *)a2->i8;
  v38.i32[3] = 0;
  float32x4_t v39 = vmulq_f32(v38, v27);
  float32x4_t v40 = vmulq_laneq_f32(v38, *a12, 3);
  v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  int8x8_t v41 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a2, *(int8x8_t *)v38.f32, 4uLL), *(float32x2_t *)v25.f32), v31, (float32x2_t)*a2);
  *(int8x8_t *)v42.f32 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a2, v30), *(float32x2_t *)v25.f32, *(float32x2_t *)v38.f32), 4uLL);
  *(int8x8_t *)&v42.u32[2] = v41;
  float32x4_t v43 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v27, *(float32x4_t *)a2->i8, 3), v40), v42);
  *(int32x2_t *)v25.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
  *(int32x2_t *)v27.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
  float32x2_t v44 = (float32x2_t)vpaddq_f32(v39, v39).u64[0];
  float32x4_t v45 = vaddq_f32(v43, v43);
  *(int32x2_t *)v40.f32 = vdup_laneq_s32((int32x4_t)v45, 2);
  *(int32x2_t *)v43.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v45.f32), 0);
  *(float32x2_t *)v36.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(v44, v44));
  float32x2_t v46 = vmul_lane_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v45.f32, 1);
  float32x2_t v47 = vmul_laneq_f32(*(float32x2_t *)v27.f32, v45, 2);
  *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v25.f32, v45.f32[0]);
  float32x2_t v48 = vmul_n_f32(*(float32x2_t *)v27.f32, v45.f32[0]);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 0), *(float32x2_t *)v36.f32, 1);
  *(float32x2_t *)v27.f32 = vmul_lane_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v45.f32, 1);
  *(float32x2_t *)v45.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1), *(float32x2_t *)v36.f32, 1);
  *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v36.f32, 1);
  __asm { FMOV            V25.2S, #1.0 }
  *(float32x2_t *)v43.f32 = vsub_f32(_D25, *(float32x2_t *)v43.f32);
  *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, v46), v47), (int8x8_t)vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v36.f32), 4uLL);
  *(float32x2_t *)&v54.u32[2] = vsub_f32(v48, *(float32x2_t *)v45.f32);
  *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v36.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v43.f32, v47), 4uLL);
  *(float32x2_t *)&v25.u32[2] = vadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v39.f32);
  *(int8x8_t *)v27.f32 = vext_s8((int8x8_t)vadd_f32(v48, *(float32x2_t *)v45.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v39.f32), 4uLL);
  *(float32x2_t *)&v27.u32[2] = vsub_f32(*(float32x2_t *)v43.f32, v46);
  float32x4_t v129 = 0u;
  int v126 = 3;
  char v127 = 0;
  v122[0] = 0;
  v122[1] = 0;
  float32x4_t v128 = v22;
  float32x2_t v55 = vpmin_f32(v21, *(float32x2_t *)a7.f32);
  v55.f32[0] = vpmin_f32(v55, v55).f32[0];
  float v123 = 0.15 * v55.f32[0];
  float v124 = 0.05 * v55.f32[0];
  float v125 = 0.05 * v55.f32[0];
  float32x4_t v56 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, v19);
  float32x4_t v57 = vmulq_n_f32(v54, v56.f32[0]);
  v57.i32[3] = 0;
  float32x4_t v58 = vmulq_lane_f32(v25, *(float32x2_t *)v56.f32, 1);
  v58.i32[3] = 0;
  float32x4_t v59 = vmulq_laneq_f32(v27, v56, 2);
  v59.i32[3] = 0;
  float32x4_t v60 = vaddq_f32(v59, vaddq_f32(v57, v58));
  int v134 = 4;
  float32x4_t v130 = v37;
  int32x2_t v138 = vdup_lane_s32(v16, 0);
  float32x4_t v136 = vaddq_f32(v60, v37);
  float32x4_t v137 = vsubq_f32(v37, v60);
  __int32 v131 = v16.i32[0];
  __int32 v132 = v16.i32[0];
  __int32 v133 = v16.i32[0];
  float32x4_t v61 = vmulq_n_f32(a10, a3);
  float32x4_t v62 = v61;
  v62.i32[3] = 0;
  float32x4_t v63 = v23;
  v63.i32[3] = 0;
  float v110 = v28;
  float32x4_t v64 = vmulq_n_f32(v62, v28);
  v64.i32[3] = 0;
  char v135 = 1;
  v22.i64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
  float32x2_t v65 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
  float32x2_t v66 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v22.f32, 4uLL);
  float32x2_t v109 = *(float32x2_t *)v22.f32;
  *(float32x2_t *)v58.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v61.f32, (int8x8_t)v65, 4uLL), *(float32x2_t *)v23.f32), v66, *(float32x2_t *)v61.f32);
  *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v22.f32), *(float32x2_t *)v23.f32, v65), 4uLL);
  v61.i64[1] = v58.u32[0];
  float32x4_t v111 = v63;
  float32x2_t v112 = *(float32x2_t *)v23.f32;
  float32x4_t v67 = vmlsq_laneq_f32(v64, v61, v23, 3);
  v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
  float32x4_t v68 = vmulq_f32(v62, v63);
  v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
  float32x4_t v69 = vmlaq_n_f32(v67, v63, vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).f32[0]);
  float32x4_t v70 = vaddq_f32(v69, v69);
  v70.i32[3] = 0;
  float32x4_t v121 = v70;
  __int16 v71 = *a16;
  float32x2_t v120 = 0;
  float32x4_t v118 = 0u;
  int8x16_t v119 = 0u;
  float32x4_t v117 = v37;
  v116[1] = &v130;
  v115[1] = v122;
  v116[0] = &unk_26E7287F0;
  v115[0] = &unk_26E728AB8;
  v63.f32[0] = *(float *)v16.i32 + a4;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v116, (uint64_t)v115, &v117, &v129, &v121, &v120, &v118, &v119, *(int32x2_t *)v63.f32, (v71 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float v73 = v120.f32[0];
    if (v120.f32[0] <= 0.0)
    {
      if ((v71 & 0x200) != 0)
      {
        *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        float32x4_t v92 = vmulq_n_f32((float32x4_t)v119, v110);
        v92.i32[3] = 0;
        float32x2_t v93 = (float32x2_t)vextq_s8(v119, v119, 8uLL).u64[0];
        int8x8_t v94 = (int8x8_t)vmls_f32(vmul_f32(v112, (float32x2_t)vext_s8(*(int8x8_t *)v119.i8, (int8x8_t)v93, 4uLL)), v66, *(float32x2_t *)v119.i8);
        *(int8x8_t *)v95.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v119.i8), v112, v93), 4uLL);
        v95.i64[1] = v94.u32[0];
        float32x4_t v96 = vmlaq_f32(v92, v113, v95);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        float32x4_t v97 = vmulq_f32(v111, (float32x4_t)v119);
        v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
        float32x4_t v98 = vmlaq_n_f32(v96, v111, vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32).f32[0]);
        v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
        v97.i64[0] = 0x4000000040000000;
        v97.i64[1] = 0x4000000040000000;
        float32x4_t v99 = vmlaq_f32(v114, v97, v98);
        float32x4_t v100 = vmulq_n_f32(v118, v110);
        v100.i32[3] = 0;
        v95.i64[0] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
        int8x8_t v101 = (int8x8_t)vmls_f32(vmul_f32(v112, (float32x2_t)vext_s8(*(int8x8_t *)v118.f32, *(int8x8_t *)v95.f32, 4uLL)), v66, *(float32x2_t *)v118.f32);
        *(int8x8_t *)v95.f32 = vext_s8(v101, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v118.f32), v112, *(float32x2_t *)v95.f32), 4uLL);
        v95.i64[1] = v101.u32[0];
        float32x4_t v102 = vmlaq_f32(v100, v113, v95);
        v102.i64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u32[0];
        float32x4_t v103 = vmulq_f32(v111, v118);
        v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
        float32x4_t v104 = vmlaq_n_f32(v102, v111, vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32).f32[0]);
        float32x4_t v105 = vaddq_f32(v104, v104);
        v105.i32[3] = 0;
        int8x16_t v106 = (int8x16_t)vnegq_f32(v105);
        *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v106, v106, 4uLL).u64[0];
        v99.i32[3] = v106.i32[0];
        *(float32x4_t *)(a15 + 24) = v99;
        *(float *)(a15 + 48) = v73;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        float v107 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v107;
      }
    }
    else
    {
      float32x4_t v74 = (float32x4_t)v119;
      float32x4_t v75 = vmulq_n_f32((float32x4_t)v119, v110);
      v75.i32[3] = 0;
      float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
      int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v112, (float32x2_t)vext_s8(*(int8x8_t *)v119.i8, (int8x8_t)v76, 4uLL)), v66, *(float32x2_t *)v119.i8);
      *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v119.i8), v112, v76), 4uLL);
      v78.i64[1] = v77.u32[0];
      float32x4_t v79 = vmlaq_f32(v75, v113, v78);
      v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
      *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float32x4_t v80 = vmulq_f32(v111, v74);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      float32x4_t v81 = vmlaq_n_f32(v79, v111, vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).f32[0]);
      v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
      v80.i64[0] = 0x4000000040000000;
      v80.i64[1] = 0x4000000040000000;
      float32x4_t v82 = vmulq_n_f32(v118, v110);
      v82.i32[3] = 0;
      float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
      int8x8_t v84 = (int8x8_t)vmls_f32(vmul_f32(v112, (float32x2_t)vext_s8(*(int8x8_t *)v118.f32, (int8x8_t)v83, 4uLL)), v66, *(float32x2_t *)v118.f32);
      *(int8x8_t *)v85.f32 = vext_s8(v84, (int8x8_t)vmls_f32(vmul_f32(v109, *(float32x2_t *)v118.f32), v112, v83), 4uLL);
      v85.i64[1] = v84.u32[0];
      float32x4_t v86 = vmlaq_f32(v82, v113, v85);
      float32x4_t v87 = vmlaq_f32(v114, v80, v81);
      v86.i64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
      float32x4_t v88 = vmulq_f32(v111, v118);
      v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
      float32x4_t v89 = vmlaq_n_f32(v86, v111, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0]);
      float32x4_t v90 = vaddq_f32(v89, v89);
      v90.i32[3] = 0;
      int8x16_t v91 = (int8x16_t)vnegq_f32(v90);
      *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v91, v91, 4uLL).u64[0];
      v87.i32[3] = v91.i32[0];
      *(float32x4_t *)(a15 + 24) = v87;
      *(float *)(a15 + 48) = v73 * a3;
    }
  }
  return result;
}

BOOL sweepBox_BoxGeom(uint64_t a1, int8x16_t *a2, float a3, float a4, double a5, int32x4_t a6, double a7, double a8, double a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  uint64_t v168 = 0;
  a6.i64[0] = *(void *)(a1 + 4);
  int32x4_t v18 = a6;
  v18.i32[2] = *(_DWORD *)(a1 + 12);
  float32x2_t v19 = (float32x2_t)vdup_laneq_s32(v18, 2);
  int32x4_t v20 = v18;
  v20.i32[3] = 0;
  float32x4_t v167 = 0u;
  v18.i64[0] = *(void *)(a13 + 48);
  int32x4_t v21 = v18;
  v21.i32[2] = *(_DWORD *)(a13 + 56);
  float32x2_t v22 = (float32x2_t)vdup_laneq_s32(v21, 2);
  v21.i32[3] = 0;
  *(float32x2_t *)a10.f32 = *a14;
  a10.i32[2] = a14[1].i32[0];
  v23.i64[0] = a2[1].i64[0];
  v23.i64[1] = a2[1].u32[2];
  float32x4_t v24 = *a12;
  v25.i64[0] = a12[1].i64[0];
  v25.i64[1] = a12[1].u32[2];
  int32x4_t v26 = (int32x4_t)vnegq_f32(*a12);
  float32x4_t v138 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a12, 3);
  float32x4_t v139 = v25;
  float32x4_t v27 = vsubq_f32(v23, v25);
  float32x4_t v28 = (float32x4_t)v26;
  v28.i32[3] = 0;
  LODWORD(v29) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32).u32[0];
  float32x4_t v30 = vmulq_n_f32(v27, v29);
  v30.i32[3] = 0;
  float32x2_t v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  float32x2_t v32 = (float32x2_t)vext_s8(*(int8x8_t *)v26.i8, (int8x8_t)v31, 4uLL);
  int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v32, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v27.f32), *(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
  v34.i64[1] = v33.u32[0];
  float32x4_t v35 = vmlaq_laneq_f32(v30, v34, *a12, 3);
  v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
  float32x4_t v36 = vmulq_f32(v28, v27);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x4_t v37 = vmlaq_n_f32(v35, v28, vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0]);
  float32x4_t v38 = vaddq_f32(v37, v37);
  v38.i32[3] = 0;
  float32x4_t v39 = *(float32x4_t *)a2;
  v39.i32[3] = 0;
  float32x4_t v40 = vmulq_f32(v39, v28);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  *(float32x2_t *)v34.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a2, *a2, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32));
  float32x4_t v41 = vmulq_laneq_f32(v39, *a12, 3);
  v39.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
  int8x8_t v42 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a2->i8, *(int8x8_t *)v39.f32, 4uLL), *(float32x2_t *)v26.i8), v32, *(float32x2_t *)a2->i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a2->i8, v31), *(float32x2_t *)v26.i8, *(float32x2_t *)v39.f32), 4uLL);
  *(int8x8_t *)&v43.u32[2] = v42;
  float32x4_t v44 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v28, *(float32x4_t *)a2, 3), v41), v43);
  *(int32x2_t *)v26.i8 = vdup_lane_s32(*(int32x2_t *)v44.f32, 1);
  *(int32x2_t *)v28.f32 = vdup_laneq_s32((int32x4_t)v44, 2);
  float32x4_t v45 = vaddq_f32(v44, v44);
  float32x2_t v46 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 2);
  *(int32x2_t *)v44.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.f32), 0);
  float32x2_t v47 = vmul_lane_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v45.f32, 1);
  float32x2_t v48 = vmul_laneq_f32(*(float32x2_t *)v28.f32, v45, 2);
  *(float32x2_t *)v26.i8 = vmul_n_f32(*(float32x2_t *)v26.i8, v45.f32[0]);
  float32x2_t v49 = vmul_n_f32(*(float32x2_t *)v28.f32, v45.f32[0]);
  float32x2_t v50 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 0), *(float32x2_t *)v34.f32, 1);
  *(float32x2_t *)v28.f32 = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v45.f32, 1);
  *(float32x2_t *)v45.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.f32, 1), *(float32x2_t *)v34.f32, 1);
  *(float32x2_t *)v34.f32 = vmul_lane_f32(v46, *(float32x2_t *)v34.f32, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v44.f32 = vsub_f32(_D8, *(float32x2_t *)v44.f32);
  *(int8x8_t *)v41.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v47), v48), (int8x8_t)vadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v34.f32), 4uLL);
  v41.i64[1] = vsub_f32(v49, *(float32x2_t *)v45.f32).u32[0];
  *(int8x8_t *)v26.i8 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v34.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v44.f32, v48), 4uLL);
  v26.i64[1] = vadd_f32(*(float32x2_t *)v28.f32, v50).u32[0];
  float32x4_t v163 = v41;
  int32x4_t v164 = v26;
  *(int8x8_t *)v26.i8 = vext_s8((int8x8_t)vadd_f32(v49, *(float32x2_t *)v45.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v28.f32, v50), 4uLL);
  v26.i64[1] = vsub_f32(*(float32x2_t *)v44.f32, v47).u32[0];
  int32x4_t v165 = v26;
  float32x4_t v166 = v38;
  int v160 = 3;
  char v161 = 0;
  v156[0] = 0;
  v156[1] = 0;
  int32x4_t v162 = v20;
  float32x2_t v56 = vpmin_f32(v19, *(float32x2_t *)a6.i8);
  v56.f32[0] = vpmin_f32(v56, v56).f32[0];
  float v157 = 0.15 * v56.f32[0];
  float v158 = 0.05 * v56.f32[0];
  float v159 = 0.05 * v56.f32[0];
  int v153 = 3;
  char v154 = 0;
  v149[0] = 0;
  v149[1] = 0;
  int32x4_t v155 = v21;
  float32x2_t v57 = vpmin_f32(v22, *(float32x2_t *)v18.i8);
  v57.f32[0] = vpmin_f32(v57, v57).f32[0];
  float v150 = 0.15 * v57.f32[0];
  float v151 = 0.05 * v57.f32[0];
  float32x4_t v58 = vmulq_n_f32(a10, a3);
  float32x4_t v59 = v58;
  v59.i32[3] = 0;
  float32x4_t v60 = v24;
  v60.i32[3] = 0;
  float v152 = 0.05 * v57.f32[0];
  float v135 = v29;
  float32x4_t v61 = vmulq_n_f32(v59, v29);
  v61.i32[3] = 0;
  float32x2_t v62 = (float32x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v20.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  float32x2_t v63 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v62, 4uLL);
  float32x2_t v134 = v62;
  int8x8_t v64 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v58.f32, *(int8x8_t *)v20.i8, 4uLL), *(float32x2_t *)v24.f32), v63, *(float32x2_t *)v58.f32);
  *(int8x8_t *)v58.f32 = vext_s8(v64, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v58.f32, v62), *(float32x2_t *)v24.f32, *(float32x2_t *)v20.i8), 4uLL);
  v58.i64[1] = v64.u32[0];
  float32x4_t v136 = v60;
  float32x2_t v137 = *(float32x2_t *)v24.f32;
  float32x4_t v65 = vmlsq_laneq_f32(v61, v58, v24, 3);
  v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  float32x4_t v66 = vmulq_f32(v59, v60);
  v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
  float32x4_t v67 = vmlaq_n_f32(v65, v60, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0]);
  float32x4_t v68 = vaddq_f32(v67, v67);
  v68.i32[3] = 0;
  float32x4_t v148 = v68;
  __int16 v69 = *a16;
  float32x2_t v147 = 0;
  float32x4_t v145 = 0u;
  int8x16_t v146 = 0u;
  v141.i64[1] = (uint64_t)v156;
  float32x4_t v142 = &v163;
  float32x4_t v70 = (float *)v143;
  v143[0] = v41;
  v144[0] = v26;
  __int16 v71 = (float *)v144;
  float32x2x2_t v72 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, v26);
  unint64_t v73 = vzip2q_s32((int32x4_t)v41, v26).u64[0];
  int32x4_t v74 = vzip1q_s32(v164, (int32x4_t)0);
  v21.i64[0] = vzip2q_s32(v164, (int32x4_t)0).u64[0];
  int32x4_t v75 = vzip2q_s32((int32x4_t)v72, v74);
  vst2_f32(v70, v72);
  v144[1] = v38;
  v143[1] = v75;
  vst2_f32(v71, *(float32x2x2_t *)((char *)&v21 - 8));
  v140[1] = v149;
  v141.i64[0] = (uint64_t)&unk_26E728B18;
  v140[0] = &unk_26E728AB8;
  *(float *)v75.i32 = a4;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v141, (uint64_t)v140, &v166, (uint64_t)&v168, &v167, &v148, &v147, &v145, *(int32x2_t *)v75.i8, &v146, (v69 & 0x200) != 0);
  if (result)
  {
    *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 2;
    float v77 = v147.f32[0];
    if (*(float *)&v168 >= v147.f32[0])
    {
      if ((v69 & 0x200) != 0)
      {
        float32x4_t v105 = vmulq_n_f32((float32x4_t)v146, v135);
        v105.i32[3] = 0;
        float32x2_t v106 = (float32x2_t)vextq_s8(v146, v146, 8uLL).u64[0];
        int8x8_t v107 = (int8x8_t)vmls_f32(vmul_f32(v137, (float32x2_t)vext_s8(*(int8x8_t *)v146.i8, (int8x8_t)v106, 4uLL)), v63, *(float32x2_t *)v146.i8);
        *(int8x8_t *)v108.f32 = vext_s8(v107, (int8x8_t)vmls_f32(vmul_f32(v134, *(float32x2_t *)v146.i8), v137, v106), 4uLL);
        v108.i64[1] = v107.u32[0];
        float32x4_t v109 = vmlaq_f32(v105, v138, v108);
        v109.i64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u32[0];
        float32x4_t v110 = vmulq_f32(v136, (float32x4_t)v146);
        v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
        float32x4_t v111 = vmlaq_n_f32(v109, v136, vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32).f32[0]);
        uint64_t v112 = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        float32x4_t v113 = vmulq_n_f32(v145, v135);
        v113.i32[3] = 0;
        float32x2_t v114 = (float32x2_t)vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
        int8x8_t v115 = (int8x8_t)vmls_f32(vmul_f32(v137, (float32x2_t)vext_s8(*(int8x8_t *)v145.f32, (int8x8_t)v114, 4uLL)), v63, *(float32x2_t *)v145.f32);
        *(int8x8_t *)v116.f32 = vext_s8(v115, (int8x8_t)vmls_f32(vmul_f32(v134, *(float32x2_t *)v145.f32), v137, v114), 4uLL);
        v116.i64[1] = v115.u32[0];
        float32x4_t v117 = vmlaq_f32(v113, v138, v116);
        v117.i64[1] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u32[0];
        float32x4_t v118 = vmulq_f32(v136, v145);
        v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
        float32x4_t v119 = vmlaq_n_f32(v117, v136, vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32).f32[0]);
        float32x4_t v120 = vaddq_f32(v119, v119);
        v120.i32[3] = 0;
        *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
        float32x4_t v121 = vmulq_f32(v120, v120);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        float32x2_t v123 = vrsqrte_f32(v122);
        int v124 = 4;
        do
        {
          float32x2_t v123 = vmul_f32(v123, vrsqrts_f32(vmul_f32(v123, v123), v122));
          --v124;
        }
        while (v124);
        float32x2_t v125 = vmul_f32(v122, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v122), 0), (int8x8_t)_D8, (int8x8_t)v123));
        float32x2_t v126 = vrecpe_f32(v125);
        int v127 = 4;
        do
        {
          float32x2_t v126 = vmul_f32(v126, vrecps_f32(v125, v126));
          --v127;
        }
        while (v127);
        v111.i64[1] = v112;
        v128.i64[0] = 0x4000000040000000;
        v128.i64[1] = 0x4000000040000000;
        float32x4_t v129 = vmlaq_f32(v139, v128, v111);
        float32x4_t v130 = vmulq_n_f32(v120, v126.f32[0]);
        v130.i32[3] = 0;
        int8x16_t v131 = (int8x16_t)vnegq_f32(v130);
        *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v131, v131, 4uLL).u64[0];
        v129.i32[3] = v131.i32[0];
        *(float32x4_t *)(a15 + 24) = v129;
        *(float *)(a15 + 48) = v77;
      }
      else
      {
        *(_DWORD *)(a15 + 48) = 0;
        float v132 = -a14[1].f32[0];
        *(float32x2_t *)(a15 + 36) = vneg_f32(*a14);
        *(float *)(a15 + 44) = v132;
      }
    }
    else
    {
      float32x4_t v78 = vmulq_n_f32((float32x4_t)v146, v135);
      v78.i32[3] = 0;
      float32x2_t v79 = (float32x2_t)vextq_s8(v146, v146, 8uLL).u64[0];
      int8x8_t v80 = (int8x8_t)vmls_f32(vmul_f32(v137, (float32x2_t)vext_s8(*(int8x8_t *)v146.i8, (int8x8_t)v79, 4uLL)), v63, *(float32x2_t *)v146.i8);
      *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v134, *(float32x2_t *)v146.i8), v137, v79), 4uLL);
      v81.i64[1] = v80.u32[0];
      float32x4_t v82 = vmlaq_f32(v78, v138, v81);
      v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
      float32x4_t v83 = vmulq_f32(v136, (float32x4_t)v146);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      float32x4_t v84 = vmlaq_n_f32(v82, v136, vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32).f32[0]);
      uint64_t v85 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
      float32x4_t v86 = vmulq_n_f32(v145, v135);
      v86.i32[3] = 0;
      float32x2_t v87 = (float32x2_t)vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
      int8x8_t v88 = (int8x8_t)vmls_f32(vmul_f32(v137, (float32x2_t)vext_s8(*(int8x8_t *)v145.f32, (int8x8_t)v87, 4uLL)), v63, *(float32x2_t *)v145.f32);
      *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(v134, *(float32x2_t *)v145.f32), v137, v87), 4uLL);
      v89.i64[1] = v88.u32[0];
      float32x4_t v90 = vmlaq_f32(v86, v138, v89);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      float32x4_t v91 = vmulq_f32(v136, v145);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      float32x4_t v92 = vmlaq_n_f32(v90, v136, vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).f32[0]);
      float32x4_t v93 = vaddq_f32(v92, v92);
      v93.i32[3] = 0;
      *(_WORD *)(a15 + 2physx::Sq::AABBTree::release(this, 0) = 3;
      float32x4_t v94 = vmulq_f32(v93, v93);
      v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
      float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
      float32x2_t v96 = vrsqrte_f32(v95);
      int v97 = 4;
      do
      {
        float32x2_t v96 = vmul_f32(v96, vrsqrts_f32(vmul_f32(v96, v96), v95));
        --v97;
      }
      while (v97);
      float32x2_t v98 = vmul_f32(v95, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v95), 0), (int8x8_t)_D8, (int8x8_t)v96));
      float32x2_t v99 = vrecpe_f32(v98);
      int v100 = 4;
      do
      {
        float32x2_t v99 = vmul_f32(v99, vrecps_f32(v98, v99));
        --v100;
      }
      while (v100);
      v84.i64[1] = v85;
      v101.i64[0] = 0x4000000040000000;
      v101.i64[1] = 0x4000000040000000;
      float32x4_t v102 = vmlaq_f32(v139, v101, v84);
      float32x4_t v103 = vmulq_n_f32(v93, v99.f32[0]);
      v103.i32[3] = 0;
      int8x16_t v104 = (int8x16_t)vnegq_f32(v103);
      *(void *)(a15 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v104, v104, 4uLL).u64[0];
      v102.i32[3] = v104.i32[0];
      *(float32x4_t *)(a15 + 24) = v102;
      *(float *)(a15 + 48) = v77 * a3;
    }
  }
  return result;
}

BOOL physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, float32x4_t *a8, int32x2_t a9, int8x16_t *a10, char a11)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  float32x4_t v58 = 0u;
  int8x16_t v59 = 0u;
  float32x2_t v57 = 0;
  BOOL v17 = physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(a1, a2, a3, a9, a4, a5, a6, &v57, &v58, &v59);
  if (v17)
  {
    int32x2_t v18 = (int32x2_t)v57;
    *a7 = v57;
    if (*(float *)v18.i32 == 0.0 && (a11 & 1) != 0)
    {
      uint64_t v19 = a1->i64[1];
      uint64_t v20 = a1[1].i64[0];
      uint64_t v21 = *(void *)(a2 + 8);
      *(float *)v18.i32 = (float)(*(float *)(v19 + 16) + *(float *)(v21 + 16)) * 100.0;
      int32x2_t v56 = vdup_lane_s32(v18, 0);
      char v53 = 0;
      float32x2_t v62 = 0;
      memset(v60, 0, sizeof(v60));
      float32x4_t v61 = 0u;
      v48.i64[1] = v19;
      uint64_t v49 = v20;
      v48.i64[0] = (uint64_t)&unk_26E728B18;
      float32x2x2_t v23 = *(float32x2x2_t *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 48);
      int32x4_t v24 = *(int32x4_t *)v20;
      int32x4_t v51 = *(int32x4_t *)(v20 + 16);
      v52[0] = v23;
      int32x4_t v50 = v24;
      float32x2x2_t v25 = (float32x2x2_t)vzip1q_s32(v24, (int32x4_t)v23);
      v23.val[0] = (float32x2_t)vzip2q_s32(v24, (int32x4_t)v23).u64[0];
      int32x4_t v26 = vzip1q_s32(v51, (int32x4_t)0);
      unint64_t v27 = vzip2q_s32(v51, (int32x4_t)0).u64[0];
      float32x4_t v28 = (float *)&v50;
      float v29 = (float *)v52;
      vst2_f32(v28, v25);
      v52[1] = v22;
      vst2_f32(v29, v23);
      int32x4_t v51 = vzip2q_s32((int32x4_t)v25, v26);
      v47[0] = &unk_26E728AB8;
      v47[1] = v21;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v48, (uint64_t)v47, a3, (uint64_t *)&v56, 0, v55, v54, &v53, *(double *)v51.i64, *(double *)&v22, (int8x8_t)v23.val[0], (uint64_t)v60) != 5)goto LABEL_5; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)a1) - 5 > 1)
      {
        float32x4_t v39 = vnegq_f32(*a6);
        v39.i32[3] = 0;
        float32x4_t v40 = vmulq_f32(v39, v39);
        v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
        float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
        float32x2_t v42 = vrsqrte_f32(v41);
        int v43 = 4;
        do
        {
          float32x2_t v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v41));
          --v43;
        }
        while (v43);
        float32x2_t v44 = vmul_f32(v41, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v41), 0), _D8, (int8x8_t)v42));
        float32x2_t v45 = vrecpe_f32(v44);
        int v46 = 4;
        do
        {
          float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
          --v46;
        }
        while (v46);
        float32x4_t v32 = vmulq_n_f32(v39, v45.f32[0]);
        v32.i32[3] = 0;
        float32x2_t v30 = 0;
        int8x16_t v31 = 0uLL;
      }
      else
      {
LABEL_5:
        float32x2_t v30 = v62;
        int8x16_t v31 = (int8x16_t)v60[0];
        float32x4_t v32 = v61;
      }
      *a7 = vmin_f32(v30, 0);
    }
    else
    {
      float32x4_t v32 = v58;
      int8x16_t v31 = v59;
    }
    *a10 = v31;
    *a8 = v32;
  }
  return v17;
}

BOOL physx::Gu::sweepBoxTriangles(BOOL result, uint64_t a2, int a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, unsigned int *a8, double a9, float a10, double a11, double a12, double a13, float32x4_t a14, __int16 *a15)
{
  if (!result) {
    return result;
  }
  *(float *)v16.i32 = a10;
  int v18 = result;
  float32x4_t v19 = *(float32x4_t *)a5->i8;
  float32x2_t v20 = (float32x2_t)vdup_lane_s32(*a5, 1);
  __int16 v131 = *a15;
  unsigned int v21 = *a15 & 0x80;
  float32x2_t v22 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5->i8, 2);
  float32x2_t v23 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a5->i8, 3);
  float32x4_t v24 = vaddq_f32(v19, v19);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32((float32x2_t)*a5, *(float32x2_t *)v24.f32), 0);
  *(float32x2_t *)a14.f32 = vmul_lane_f32(v20, *(float32x2_t *)v24.f32, 1);
  float32x2_t v26 = vmul_laneq_f32(v22, v24, 2);
  float32x2_t v27 = vmul_n_f32(v20, v24.f32[0]);
  float32x2_t v28 = vmul_n_f32(v22, v24.f32[0]);
  _D17 = vmul_n_f32(v23, v24.f32[0]);
  _D2 = vmul_lane_f32(v22, *(float32x2_t *)v24.f32, 1);
  _D20 = vmul_lane_f32(v23, *(float32x2_t *)v24.f32, 1);
  *(float32x2_t *)v24.f32 = vmul_laneq_f32(v23, v24, 2);
  __asm { FMOV            V8.2S, #1.0 }
  _D4 = vsub_f32(_D8, v25);
  *(float32x2_t *)v50.f32 = vadd_f32(v27, *(float32x2_t *)v24.f32);
  *(float32x2_t *)v51.f32 = vsub_f32(v28, _D20);
  float32x2_t v37 = vsub_f32(v27, *(float32x2_t *)v24.f32);
  int32x2_t v38 = (int32x2_t)vsub_f32(_D4, v26);
  int32x2_t v39 = (int32x2_t)vadd_f32(_D2, _D17);
  _D1 = (int8x8_t)vadd_f32(v28, _D20);
  int8x8_t v41 = (int8x8_t)vsub_f32(_D2, _D17);
  _D17.f32[0] = vsub_f32(_D4, *(float32x2_t *)a14.f32).f32[0];
  v26.f32[0] = (float)(1.0 - a14.f32[1]) - v26.f32[1];
  _D4.i32[0] = a5[2].i32[0];
  v24.i32[0] = a5[2].i32[1];
  _D2.i32[0] = a5[3].i32[0];
  a14.i64[0] = *(void *)(a4 + 4);
  float32x2_t v43 = (float32x2_t)__PAIR64__(v37.u32[1], v50.u32[0]);
  v44.i32[3] = 0;
  v44.i64[0] = __PAIR64__(v37.u32[1], v26.u32[0]);
  v37.i32[0] = v26.i32[0];
  float32x2_t v45 = vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v50.f32, v38), -v24.f32[0]), v37, _D4, 0);
  float32x2_t v46 = (float32x2_t)vzip1_s32(*(int32x2_t *)v51.f32, v39);
  *(float32x2_t *)v52.f32 = vmls_lane_f32(v45, v46, _D2, 0);
  __asm
  {
    FMLS            S20, S4, V1.S[1]
    FMLS            S20, S2, V17.S[0]
  }
  float v47 = *(float *)(a6 + 8);
  float32x2_t v48 = (float32x2_t)vdup_lane_s32(v38, 0);
  v48.i32[0] = v26.i32[0];
  *(float32x2_t *)v56.f32 = vadd_f32(vadd_f32(vmul_f32(v43, (float32x2_t)vrev64_s32(*(int32x2_t *)a6)), vmul_f32(v48, *(float32x2_t *)a6)), vmul_n_f32(v46, v47));
  v46.f32[0] = vaddv_f32(vmul_f32((float32x2_t)vext_s8(_D1, v41, 4uLL), *(float32x2_t *)a6))
             + (float)(v47 * _D17.f32[0]);
  *(float32x2_t *)v49.f32 = vmul_n_f32(*(float32x2_t *)v56.f32, *(float *)&a9);
  v50.i32[1] = v38.i32[0];
  v50.i32[2] = v41.i32[0];
  v51.i32[1] = v39.i32[0];
  v51.i32[2] = _D17.i32[0];
  v52.i32[2] = _D20.i32[0];
  int32x4_t v53 = (int32x4_t)a14;
  v53.i32[2] = *(_DWORD *)(a4 + 12);
  uint64_t v167 = 0;
  float32x2_t v54 = (float32x2_t)vdup_laneq_s32(v53, 2);
  float32x4_t v55 = (float32x4_t)v53;
  v55.i32[3] = 0;
  v56.i64[1] = v46.u32[0];
  float32x4_t v166 = 0uLL;
  float32x2_t v57 = (float32x2_t)vdup_lane_s32(v16, 0);
  float32x4_t v58 = vmulq_f32(v55, vabsq_f32(v56));
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  float32x2_t v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  int v163 = 3;
  char v164 = 0;
  float32x4_t v159 = 0uLL;
  float32x4_t v165 = v55;
  float32x2_t v60 = vpmin_f32(v54, *(float32x2_t *)a14.f32);
  v60.f32[0] = vpmin_f32(v60, v60).f32[0];
  float v160 = 0.15 * v60.f32[0];
  float v161 = 0.05 * v60.f32[0];
  float v162 = 0.05 * v60.f32[0];
  v49.f32[2] = v46.f32[0] * *(float *)&a9;
  v49.i32[3] = 0;
  float32x4_t v158 = v49;
  a14.i32[3] = 0;
  a14.i64[0] = __PAIR64__(v24.u32[0], _D4.u32[0]);
  float32x4_t v134 = v19;
  if (a8) {
    unsigned int v61 = *a8;
  }
  else {
    unsigned int v61 = 0;
  }
  unsigned int v137 = 0;
  unsigned int v62 = 0;
  char v63 = 0;
  *(int32x2_t *)&long long v15 = vdup_lane_s32(*(int32x2_t *)&a9, 0);
  char v135 = a3;
  int v64 = a3 | (v21 >> 7);
  v44.i32[2] = _D1.i32[1];
  v50.i32[3] = 0;
  v51.i32[3] = 0;
  v52.i32[3] = 0;
  a14.i32[2] = _D2.i32[0];
  float32x4_t v130 = a14;
  float32x2_t v65 = vadd_f32(v57, v59);
  float v66 = 0.0;
  float32x4_t v145 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
  float32x4_t v138 = 0u;
  float32x4_t v139 = v44;
  float32x4_t v136 = 0u;
  float v67 = 0.0;
  float v68 = 0.0;
  float32x4_t v142 = v50;
  __int32 v143 = v16.i32[0];
  float32x4_t v140 = v52;
  float32x4_t v141 = v51;
  float32x4_t v144 = v56;
  while (1)
  {
    if (v61 == v62) {
      unsigned int v69 = 0;
    }
    else {
      unsigned int v69 = v62;
    }
    if (v62) {
      unsigned int v70 = v69;
    }
    else {
      unsigned int v70 = v61;
    }
    __int16 v71 = (float *)(a2 + 36 * v70);
    float32x4_t v72 = vmulq_n_f32(v44, *v71);
    v72.i32[3] = 0;
    float32x4_t v73 = vmulq_n_f32(v50, v71[1]);
    v73.i32[3] = 0;
    float32x4_t v74 = vmulq_n_f32(v51, v71[2]);
    v74.i32[3] = 0;
    float32x4_t v75 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v72, v73), v74));
    float32x4_t v76 = vmulq_n_f32(v44, v71[3]);
    v76.i32[3] = 0;
    float32x4_t v77 = vmulq_n_f32(v50, v71[4]);
    v77.i32[3] = 0;
    float32x4_t v78 = vmulq_n_f32(v51, v71[5]);
    v78.i32[3] = 0;
    float32x4_t v79 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v76, v77), v78));
    float32x4_t v80 = vmulq_n_f32(v44, v71[6]);
    v80.i32[3] = 0;
    float32x4_t v81 = vmulq_n_f32(v50, v71[7]);
    v81.i32[3] = 0;
    float32x4_t v82 = vmulq_n_f32(v51, v71[8]);
    v82.i32[3] = 0;
    float32x4_t v83 = vaddq_f32(v52, vaddq_f32(vaddq_f32(v80, v81), v82));
    int8x16_t v84 = (int8x16_t)vsubq_f32(v83, v79);
    int8x16_t v85 = (int8x16_t)vsubq_f32(v75, v79);
    int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)), *(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
    int8x8_t v87 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 4uLL), *(float32x2_t *)v84.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 4uLL), *(float32x2_t *)v85.i8);
    if ((v64 & 1) == 0)
    {
      *(int8x8_t *)v88.f32 = vext_s8(v87, v86, 4uLL);
      v88.i64[1] = v87.u32[0];
      float32x4_t v89 = vmulq_f32(v88, v158);
      v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
      if (vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0] >= *(float *)&v167) {
        goto LABEL_20;
      }
    }
    float32x4_t v90 = vmulq_f32(v56, v75);
    v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
    *(float32x2_t *)v90.f32 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
    float32x4_t v91 = vmulq_f32(v56, v79);
    v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
    *(float32x2_t *)v91.f32 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
    float32x4_t v92 = vmulq_f32(v56, v83);
    v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
    *(float32x2_t *)v92.f32 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
    float32x2_t v93 = vmin_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v92.f32);
    *(int8x8_t *)v91.f32 = vext_s8(*(int8x8_t *)v90.f32, *(int8x8_t *)v91.f32, 4uLL);
    v91.i64[1] = v92.u32[0];
    if (vuzp1_s8(vorr_s8((int8x8_t)vmovn_s32(vcgtq_f32(v166, v91)), (int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vmin_f32(*(float32x2_t *)v90.f32, v93), vadd_f32(v65, *(float32x2_t *)&v15)), 0)), *(int8x8_t *)v75.f32).u32[0] == -1)goto LABEL_20; {
    int8x8_t v94 = v87;
    }
    float v146 = *(float *)v86.i32;
    long long v147 = v15;
    char v154 = 0;
    float32x4_t v95 = vmulq_f32(vaddq_f32(vaddq_f32(v75, v79), v83), v145);
    v95.i32[3] = 0;
    float32x4_t v151 = v95;
    float32x4_t v155 = v75;
    float32x4_t v156 = v79;
    float32x4_t v157 = v83;
    uint64_t v152 = 0x7F7FFFFF00000000;
    uint64_t v153 = 0x57F7FFFFFLL;
    v150[1] = &v151;
    v149[1] = &v159;
    v150[0] = &unk_26E728A58;
    v149[0] = &unk_26E728AB8;
    float32x4_t v148 = vsubq_f32(v95, v159);
    float32x4_t v169 = 0u;
    v170[0] = 0u;
    float32x2_t v168 = 0;
    if (!physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v150, (uint64_t)v149, &v148, (int32x2_t)v16.u32[0], (uint64_t)&v167, &v166, &v158, &v168, &v169, v170))
    {
      long long v15 = v147;
      float32x4_t v50 = v142;
      v16.i32[0] = v143;
      float32x4_t v52 = v140;
      float32x4_t v51 = v141;
      float32x4_t v44 = v139;
      float32x4_t v56 = v144;
      goto LABEL_20;
    }
    if (*(float *)&v167 >= v168.f32[0])
    {
      *(_DWORD *)(a7 + 48) = 0;
      *(_DWORD *)(a7 + 16) = v70;
      float v129 = -*(float *)(a6 + 8);
      *(float32x2_t *)(a7 + 36) = vneg_f32(*(float32x2_t *)a6);
      *(float *)(a7 + 44) = v129;
      *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 2;
      int v97 = 1;
      LODWORD(v15) = v147;
      goto LABEL_22;
    }
    float32x4_t v138 = (float32x4_t)v170[0];
    float32x4_t v136 = v169;
    *((void *)&v15 + 1) = *((void *)&v147 + 1);
    *(float32x2_t *)&long long v15 = vmul_f32(*(float32x2_t *)&v147, v168);
    float32x4_t v56 = v144;
    float32x4_t v96 = vmulq_n_f32(v144, *(float *)&v15);
    v96.i32[3] = 0;
    float32x4_t v158 = v96;
    float v68 = *(float *)&v94.i32[1];
    float v67 = v146;
    float v66 = *(float *)v94.i32;
    char v63 = 1;
    if ((*a15 & 0x40) != 0) {
      break;
    }
    unsigned int v137 = v70;
    float32x4_t v50 = v142;
    v16.i32[0] = v143;
    float32x4_t v52 = v140;
    float32x4_t v51 = v141;
    float32x4_t v44 = v139;
LABEL_20:
    if (v18 == ++v62)
    {
      int v97 = 2;
      goto LABEL_22;
    }
  }
  int v97 = 2;
  unsigned int v137 = v70;
LABEL_22:
  BOOL result = v97 != 2;
  if (v97 == 2 && (v63 & 1) != 0)
  {
    float32x4_t v98 = v134;
    v98.i32[3] = 0;
    LODWORD(v99) = vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).u32[0];
    int8x16_t v100 = (int8x16_t)v136;
    float32x4_t v101 = vmulq_n_f32(v136, v99);
    v101.i32[3] = 0;
    float32x2_t v102 = (float32x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    float32x2_t v103 = (float32x2_t)vext_s8(*(int8x8_t *)v134.f32, (int8x8_t)v102, 4uLL);
    int8x8_t v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 4uLL)), v103, *(float32x2_t *)v136.f32);
    *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v136.f32), *(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)), 4uLL);
    v105.i64[1] = v104.u32[0];
    float32x4_t v106 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 3);
    float32x4_t v107 = vmlaq_laneq_f32(v101, v105, v134, 3);
    v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
    float32x4_t v108 = vmulq_f32(v98, v136);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    float32x4_t v109 = vmlaq_n_f32(v107, v98, vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32).f32[0]);
    float32x4_t v110 = vaddq_f32(v109, v109);
    v110.i32[3] = 0;
    *(_DWORD *)(a7 + 16) = v137;
    float32x4_t v111 = vmulq_f32(v110, v110);
    v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
    float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
    float32x2_t v113 = vrsqrte_f32(v112);
    int v114 = 4;
    do
    {
      float32x2_t v113 = vmul_f32(v113, vrsqrts_f32(vmul_f32(v113, v113), v112));
      --v114;
    }
    while (v114);
    float32x2_t v115 = vmul_f32(v112, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v112), 0), (int8x8_t)_D8, (int8x8_t)v113));
    float32x2_t v116 = vrecpe_f32(v115);
    int v117 = 4;
    do
    {
      float32x2_t v116 = vmul_f32(v116, vrecps_f32(v115, v116));
      --v117;
    }
    while (v117);
    float32x4_t v118 = vmulq_n_f32(v110, v116.f32[0]);
    v118.i32[3] = 0;
    int8x16_t v119 = (int8x16_t)v138;
    float32x4_t v120 = vmulq_n_f32(v138, v99);
    v120.i32[3] = 0;
    int8x8_t v121 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 4uLL)), v103, *(float32x2_t *)v138.f32);
    *(int8x8_t *)v122.f32 = vext_s8(v121, (int8x8_t)vmls_f32(vmul_f32(v102, *(float32x2_t *)v138.f32), *(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)), 4uLL);
    v122.i64[1] = v121.u32[0];
    float32x4_t v123 = vmlaq_f32(v120, v106, v122);
    v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
    int8x16_t v124 = (int8x16_t)vnegq_f32(v118);
    float32x4_t v125 = vmulq_f32(v98, v138);
    v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
    float32x4_t v126 = vmlaq_n_f32(v123, v98, vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32).f32[0]);
    v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
    v127.i64[0] = 0x4000000040000000;
    v127.i64[1] = 0x4000000040000000;
    float32x4_t v128 = vmlaq_f32(v130, v127, v126);
    *(void *)(a7 + 4physx::Sq::AABBTree::release(this, 0) = vextq_s8(v124, v124, 4uLL).u64[0];
    v128.i32[3] = v124.i32[0];
    *(float32x4_t *)(a7 + 24) = v128;
    *(_DWORD *)(a7 + 48) = v15;
    if ((v131 & 0x80) != 0
      && (v135 & 1) == 0
      && (float)((float)((float)(v67 * *(float *)(a6 + 4)) + (float)(v68 * *(float *)a6))
               + (float)(v66 * *(float *)(a6 + 8))) > 0.0)
    {
      *(float32x2_t *)(a7 + 36) = vneg_f32(*(float32x2_t *)v124.i8);
      *(float *)(a7 + 44) = -*(float *)&v124.i32[2];
    }
    *(_WORD *)(a7 + 2physx::Sq::AABBTree::release(this, 0) = 3;
    return 1;
  }
  return result;
}

uint64_t sweepCapsule_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 510, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t sweepBox_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 525, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

uint64_t sweepConvex_HeightfieldUnregistered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuSweepTests.cpp", 539, "Height Field Sweep test called with height fields unregistered ", a6, a7, a8, vars0);
  return 0;
}

void physx::Gu::NodeAllocator::~NodeAllocator(physx::Gu::NodeAllocator *this)
{
  physx::Gu::NodeAllocator::release(this);
  int v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 1) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
}

uint64_t physx::Gu::NodeAllocator::release(physx::Gu::NodeAllocator *this)
{
  int v2 = (uint64_t *)((char *)this + 8);
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = *(void *)(*v2 + v4);
      if (v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7 - 16);
      }
      *(void *)(v6 + v4) = 0;
      v4 += 16;
    }
    while (v5 != v4);
  }
  physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::resize((uint64_t)v2, 0, &v9);
  uint64_t result = physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate((uint64_t)v2, *((_DWORD *)this + 4));
  *((void *)this + 3) = 0;
  return result;
}

double physx::Gu::NodeAllocator::init(physx::Gu::NodeAllocator *this, int a2, unsigned int a3)
{
  unsigned int v5 = 2 * a2 - 1;
  if (v5 >= 0x401) {
    v5 /= a3;
  }
  uint64_t v6 = (void *)physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::allocate((uint64_t)&v11, 40 * v5 + 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 67);
  *uint64_t v6 = 40;
  v6[1] = v5;
  v6 += 2;
  *(void *)this = v6;
  bzero(v6, 40 * v5);
  uint64_t v7 = *(void *)this;
  *(_DWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 36) = a2;
  *(void *)&long long v10 = v7;
  DWORD2(v1physx::Sq::AABBTree::release(this, 0) = 1;
  HIDWORD(v1physx::Sq::AABBTree::release(this, 0) = v5;
  uint64_t v8 = *((unsigned int *)this + 4);
  if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack((uint64_t)this + 8, &v10);
  }
  else
  {
    *(_OWORD *)(*((void *)this + 1) + 16 * v8) = v10;
    ++*((_DWORD *)this + 4);
  }
  *(void *)&double result = 0x100000000;
  *((void *)this + 3) = 0x100000000;
  return result;
}

void physx::Gu::AABBTreeBuildNode::subdivide(float32x4_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1[2].u32[1];
  long long v9 = (unsigned int *)(a5 + 4 * a1[2].u32[0]);
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  float32x2_t v12 = (_OWORD *)(v11 + 24 * *v9);
  float32x4_t v13 = *(float32x4_t *)v12;
  float32x4_t v14 = *(float32x4_t *)((char *)v12 + 12);
  float32x4_t v15 = *(float32x4_t *)(v10 + 12 * *v9);
  if (v8 >= 2)
  {
    uint64_t v16 = v8 - 1;
    BOOL v17 = v9 + 1;
    do
    {
      unsigned int v18 = *v17++;
      uint64_t v19 = v11 + 24 * v18;
      float32x4_t v15 = vaddq_f32(v15, *(float32x4_t *)(v10 + 12 * v18));
      float32x4_t v13 = vminq_f32(v13, *(float32x4_t *)v19);
      float32x4_t v14 = vmaxq_f32(v14, *(float32x4_t *)(v19 + 12));
      --v16;
    }
    while (v16);
  }
  v13.i32[3] = v14.i32[0];
  *a1 = v13;
  a1[1].i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
  if (v8 > *(_DWORD *)a2)
  {
    float32x4_t v20 = vmulq_n_f32(v15, 1.0 / (float)v8);
    float32x4_t v21 = 0uLL;
    float32x2_t v22 = v9;
    uint64_t v23 = v8;
    do
    {
      unsigned int v24 = *v22++;
      float32x4_t v25 = vsubq_f32(*(float32x4_t *)(v10 + 12 * v24), v20);
      float32x4_t v21 = vaddq_f32(v21, vmulq_f32(v25, v25));
      --v23;
    }
    while (v23);
    unsigned int v26 = 0;
    float32x4_t v27 = vmulq_n_f32(v21, 1.0 / (float)(v8 - 1));
    *(void *)&long long v45 = v27.i64[0];
    uint64_t v28 = *(void *)&vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), v27)) & 1;
    if (v27.f32[2] > *(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * v28))) {
      uint64_t v28 = 2;
    }
    float v29 = (float)(a1->f32[v28] + a1->f32[v28 + 3]) * 0.5;
    uint64_t v30 = v10 + 4 * v28;
    int8x16_t v31 = v9;
    uint64_t v32 = v8;
    do
    {
      unsigned int v33 = *v31;
      if (*(float *)(v30 + 12 * *v31) > v29)
      {
        *int8x16_t v31 = v9[v26];
        v9[v26++] = v33;
      }
      ++v31;
      --v32;
    }
    while (v32);
    if (!v26 || v26 == v8)
    {
      if (v8 <= *(_DWORD *)a2) {
        return;
      }
      unsigned int v26 = v8 >> 1;
    }
    uint64_t v34 = *(void *)(a4 + 8);
    uint64_t v35 = *(unsigned int *)(a4 + 24);
    *(_DWORD *)(a4 + 28) += 2;
    uint64_t v36 = v34 + 16 * v35;
    unsigned int v38 = *(_DWORD *)(v36 + 8);
    unsigned int v39 = *(_DWORD *)(v36 + 12);
    float32x2_t v37 = (_DWORD *)(v36 + 8);
    if (v38 + 2 <= v39)
    {
      float32x2_t v43 = (_DWORD *)(*(void *)(v34 + 16 * v35) + 40 * v38);
      *float32x2_t v37 = v38 + 2;
    }
    else
    {
      uint64_t v40 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        int8x8_t v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::getName() [T = physx:"
      }
              ":Gu::AABBTreeBuildNode]";
      else {
        int8x8_t v41 = "<allocation names disabled>";
      }
      float32x2_t v42 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v40 + 24) + 16))(v40 + 24, 40976, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 94);
      *float32x2_t v42 = xmmword_2344223E0;
      float32x2_t v43 = v42 + 1;
      bzero(v42 + 1, 0xA000uLL);
      *(void *)&long long v45 = v43;
      *((void *)&v45 + 1) = 0x40000000002;
      uint64_t v44 = *(unsigned int *)(a4 + 16);
      if ((*(_DWORD *)(a4 + 20) & 0x7FFFFFFFu) <= v44)
      {
        physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack(a4 + 8, &v45);
      }
      else
      {
        *(_OWORD *)(*(void *)(a4 + 8) + 16 * v44) = v45;
        ++*(_DWORD *)(a4 + 16);
      }
      ++*(_DWORD *)(a4 + 24);
    }
    a1[1].i64[1] = (uint64_t)v43;
    *a3 += 2;
    v43[8] = a1[2].i32[0];
    v43[9] = v26;
    v43[18] = a1[2].i32[0] + v26;
    v43[19] = a1[2].i32[1] - v26;
  }
}

uint64_t physx::Gu::AABBTreeBuildNode::_buildHierarchy(float32x4_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  physx::Gu::AABBTreeBuildNode::subdivide(a1, a2, a3, a4, a5);
  uint64_t result = a1[1].i64[1];
  if (result)
  {
    uint64_t v11 = result + 40;
    ((void (*)(void))physx::Gu::AABBTreeBuildNode::_buildHierarchy)();
    uint64_t result = physx::Gu::AABBTreeBuildNode::_buildHierarchy(v11, a2, a3, a4, a5);
  }
  a3[1] += a1[2].i32[1];
  return result;
}

uint64_t physx::Gu::initAABBTreeBuild(uint64_t a1, physx::Gu::NodeAllocator *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if (*(_DWORD *)(a1 + 4)) {
    BOOL v5 = *a4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    *a3 = 1;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 273);
    uint64_t v11 = 0;
    *a4 = v10;
    do
    {
      *(_DWORD *)(v10 + 4 * v11) = v11;
      ++v11;
    }
    while (v4 != v11);
    double v12 = physx::Gu::NodeAllocator::init(a2, v4, *(_DWORD *)a1);
    if (v4 == -1) {
      float32x4_t v13 = 0;
    }
    else {
      float32x4_t v13 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, double))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v4 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuAABBTreeBuild.cpp", 282, v12);
    }
    *(void *)(a1 + 16) = v13;
    uint64_t v14 = *(void *)(a1 + 8);
    if (v4 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v4;
    }
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    do
    {
      *float32x4_t v13 = vmulq_f32(vaddq_f32(*(float32x4_t *)v14, *(float32x4_t *)(v14 + 12)), v16);
      float32x4_t v13 = (float32x4_t *)((char *)v13 + 12);
      v14 += 24;
      --v15;
    }
    while (v15);
  }
  return v6;
}

uint64_t physx::Gu::buildAABBTree(uint64_t a1, physx::Gu::NodeAllocator *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t inited = physx::Gu::initAABBTreeBuild(a1, a2, a3, a4);
  if (inited) {
    physx::Gu::AABBTreeBuildNode::_buildHierarchy(*(float32x4_t **)a2, a1, a3, (uint64_t)a2, *a4);
  }
  return inited;
}

void physx::Gu::BVHStructure::~BVHStructure(physx::Gu::BVHStructure *this)
{
  if (this) {
    (*(void (**)(uint64_t, physx::Gu::BVHStructure *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void non-virtual thunk to'physx::Gu::BVHStructure::~BVHStructure(physx::Gu::BVHStructure *this)
{
}

uint64_t physx::Gu::BVHStructure::load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  BOOL v21 = 0;
  uint64_t v4 = physx::readHeader(0x42u, 0x56u, 0x48u, 0x53u, &v22, &v21, a2);
  if (v4)
  {
    BOOL v5 = (unsigned int *)(a1 + 40);
    BOOL v6 = v21;
    physx::readFloatBuffer((__int32 *)(a1 + 40), 2u, v21, (void (***)(void, __int32 *, void))a2);
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = (__int32 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 82);
      unsigned int v9 = *v5;
    }
    else
    {
      unsigned int v9 = 0;
      uint64_t v8 = 0;
    }
    *(void *)(a1 + 56) = v8;
    physx::readFloatBuffer(v8, v9, v6, (void (***)(void, __int32 *, void))a2);
    int v10 = *(_DWORD *)(a1 + 40);
    BOOL v11 = __CFADD__(v10, 1);
    unsigned int v12 = v10 + 1;
    if (v11)
    {
      float32x4_t v13 = 0;
      unsigned int v14 = -6;
    }
    else
    {
      float32x4_t v13 = (__int32 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 86);
      unsigned int v14 = 6 * *v5;
    }
    *(void *)(a1 + 48) = v13;
    physx::readFloatBuffer(v13, v14, v6, (void (***)(void, __int32 *, void))a2);
    uint64_t v15 = *(unsigned int *)(a1 + 44);
    if (v15)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 90);
      int v17 = *(_DWORD *)(a1 + 44);
      *(void *)(a1 + 72) = v16;
      if (v17)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 72) + v18 + 24), 1u, v6, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 72) + v18), 6u, v6, (void (***)(void, __int32 *, void))a2);
          ++v19;
          v18 += 28;
        }
        while (v19 < *(unsigned int *)(a1 + 44));
      }
    }
    else
    {
      *(void *)(a1 + 72) = 0;
    }
  }
  return v4;
}

uint64_t physx::Gu::BVHStructure::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 24), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 16) + 16))();
  }
  return this;
}

uint64_t physx::Gu::BVHStructure::onRefCountZero(physx::Gu::BVHStructure *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 6) = 0;
  if (*((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 7) = 0;
  if (*((void *)this + 9)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 9) = 0;
  if (*((void *)this + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 8) = 0;
  *((void *)this + 5) = 0;
  if (physx::GuMeshFactory::removeBVHStructure(*((void *)this + 4), (uint64_t)this))
  {
    uint64_t v13 = *((unsigned __int16 *)this + 4);
    uint64_t v14 = *((void *)this + 4);
    uint64_t v15 = *(void *)this;
    if (*((_WORD *)this + 5)) {
      uint64_t result = (*(uint64_t (**)(physx::Gu::BVHStructure *))(v15 + 32))(this);
    }
    else {
      uint64_t result = (*(uint64_t (**)(physx::Gu::BVHStructure *))(v15 + 24))(this);
    }
    uint64_t v18 = *(unsigned int *)(v14 + 248);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, physx::Gu::BVHStructure *, uint64_t))(**(void **)(*(void *)(v14 + 240) + v19)
                                                                                       + 16))(*(void *)(*(void *)(v14 + 240) + v19), this, v13);
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  else
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v17, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 126, "Gu::BVHStructure::release: double deletion detected!", v10, v11, v12, a9);
  }
  return result;
}

uint64_t non-virtual thunk to'physx::Gu::BVHStructure::onRefCountZero(physx::Gu::BVHStructure *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::BVHStructure::onRefCountZero((physx::Gu::BVHStructure *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::BVHStructure::createVolumes(uint64_t this)
{
  if (!*(void *)(this + 64))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(unsigned int *)(this + 40);
    if (v2)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/GuBVHStructure.cpp", 133);
      int v3 = *(_DWORD *)(v1 + 40);
      *(void *)(v1 + 64) = this;
      if (v3)
      {
        unint64_t v4 = 0;
        do
        {
          *(_DWORD *)(this + 4 * v4) = v4;
          ++v4;
        }
        while (v4 < *(unsigned int *)(v1 + 40));
      }
    }
    else
    {
      *(void *)(this + 64) = 0;
    }
  }
  return this;
}

uint64_t physx::Gu::BVHStructure::raycast(void *a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v14 = a1[8];
  uint64_t v13 = a1[9];
  float v15 = a2[1].f32[0] + a2[1].f32[0];
  float32x2_t v16 = vadd_f32(*a2, *a2);
  float32x2_t v17 = vadd_f32(*a3, *a3);
  float v18 = a3[1].f32[0] + a3[1].f32[0];
  double v19 = COERCE_DOUBLE(vadd_f32(v16, vmul_n_f32(v17, a6)));
  double v20 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v17), (int8x8_t)v16, vbsl_s8((int8x8_t)vcgez_f32(v17), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v21.f32 = v16;
  v21.i64[1] = LODWORD(v15);
  *(float32x2_t *)v22.f32 = v17;
  v22.i64[1] = LODWORD(v18);
  unsigned int v24 = a1 + 6;
  uint64_t v23 = a1[6];
  uint64_t v83 = v24[1];
  *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)v17, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v25.i64[1] = v17.u32[0];
  float32x4_t v26 = vabsq_f32(v22);
  *(int8x8_t *)v27.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
  v27.i64[1] = v26.u32[0];
  float v28 = v15 + (float)(v18 * a6);
  float v29 = -3.4028e38;
  if (v18 >= 0.0) {
    float v29 = 3.4028e38;
  }
  if (v18 != 0.0) {
    float v15 = v29;
  }
  if (a6 >= 3.4028e38)
  {
    *(double *)v30.i64 = v20;
  }
  else
  {
    float v15 = v28;
    *(double *)v30.i64 = v19;
  }
  v30.i64[1] = LODWORD(v15);
  float32x4_t v31 = vminq_f32(v21, v30);
  float32x4_t v32 = vmaxq_f32(v21, v30);
  uint64_t v95 = 0x10000000100;
  char v93 = 1;
  int8x8_t v94 = v92;
  v92[0] = v13;
  float32x4_t v33 = vnegq_f32(v25);
  float32x4_t v90 = v22;
  float32x4_t v91 = v21;
  float32x4_t v88 = v27;
  float32x4_t v89 = v26;
  float32x4_t v85 = v32;
  float32x4_t v87 = v31;
  float32x4_t v84 = v33;
  while (1)
  {
    uint64_t v34 = v94[v12];
    float32x4_t v35 = *(float32x4_t *)(v34 + 12);
    int8x16_t v36 = (int8x16_t)vsubq_f32(v35, *(float32x4_t *)v34);
    float32x4_t v37 = (float32x4_t)v36;
    v37.i32[3] = 0;
    float32x4_t v38 = vaddq_f32(*(float32x4_t *)v34, v35);
    v38.i32[3] = 0;
    float32x4_t v39 = vaddq_f32(v38, v37);
    float32x4_t v40 = vsubq_f32(v38, v37);
    float32x4_t v41 = vsubq_f32(v21, v38);
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
    v42.i64[1] = v41.u32[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), 4uLL);
    v43.i64[1] = v36.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v39, v31), (int8x16_t)vcgeq_f32(v32, v40)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v43), v27, v37), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v42), v41, v33))))), *(int8x8_t *)v35.f32).u32[0] == -1)break; {
LABEL_36:
    }
    int v81 = v12;
    uint64_t v12 = (v12 - 1);
    if (!v81) {
      goto LABEL_39;
    }
  }
  unsigned int v44 = HIDWORD(*(_OWORD *)(v34 + 12));
  if ((v35.i8[12] & 1) == 0)
  {
    while (1)
    {
      uint64_t v45 = v13 + 28 * (v44 >> 1);
      float32x4_t v46 = *(float32x4_t *)(v45 + 12);
      int8x16_t v47 = (int8x16_t)vsubq_f32(v46, *(float32x4_t *)v45);
      float32x4_t v48 = (float32x4_t)v47;
      v48.i32[3] = 0;
      float32x4_t v49 = vaddq_f32(*(float32x4_t *)v45, v46);
      v49.i32[3] = 0;
      float32x4_t v50 = vsubq_f32(v21, v49);
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), 4uLL);
      v51.i64[1] = v50.u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), 4uLL);
      v52.i64[1] = v47.u32[0];
      unsigned __int32 v53 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v49, v48), v31), (int8x16_t)vcgeq_f32(v32, vsubq_f32(v49, v48))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v52), v27, v48), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v51), v50, v33))))), *(int8x8_t *)v49.f32).u32[0];
      float32x4_t v54 = *(float32x4_t *)(v45 + 28);
      float32x4_t v55 = *(float32x4_t *)(v45 + 40);
      int8x16_t v56 = (int8x16_t)vsubq_f32(v55, v54);
      float32x4_t v57 = (float32x4_t)v56;
      v57.i32[3] = 0;
      float32x4_t v58 = vaddq_f32(v54, v55);
      v58.i32[3] = 0;
      float32x4_t v59 = vsubq_f32(v21, v58);
      *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), 4uLL);
      v51.i64[1] = v59.u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), 4uLL);
      v52.i64[1] = v56.u32[0];
      unsigned __int32 v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v58, v57), v31), (int8x16_t)vcgeq_f32(v32, vsubq_f32(v58, v57))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v52), v27, v57), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v51), v59, v33))))), *(int8x8_t *)v49.f32).u32[0];
      if (v53 == -1 && v60 == -1)
      {
        float32x4_t v65 = vmulq_f32(v22, vsubq_f32(v58, v49));
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        v65.f32[0] = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32).f32[0];
        uint64_t v64 = (v12 + 1);
        v94[v12] = v45 + 28 * (v65.f32[0] > 0.0);
        uint64_t v62 = v45 + 28 * (v65.f32[0] <= 0.0);
        if (v64 == (HIDWORD(v95) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v92, 2 * v64);
          float32x4_t v33 = v84;
          float32x4_t v32 = v85;
          float32x4_t v31 = v87;
          float32x4_t v27 = v88;
          float32x4_t v26 = v89;
          float32x4_t v22 = v90;
          float32x4_t v21 = v91;
        }
      }
      else
      {
        if (v53 == -1) {
          uint64_t v62 = v45;
        }
        else {
          uint64_t v62 = v45 + 28;
        }
        if (v53 != -1 && v60 != -1) {
          goto LABEL_36;
        }
        uint64_t v64 = v12;
      }
      unsigned int v44 = *(_DWORD *)(v62 + 24);
      uint64_t v12 = v64;
      if (v44) {
        goto LABEL_29;
      }
    }
  }
  LODWORD(v64) = v12;
LABEL_29:
  unsigned int v66 = (v44 >> 1) & 0xF;
  if (!v66)
  {
LABEL_35:
    LODWORD(v12) = v64;
    goto LABEL_36;
  }
  float v67 = (unsigned int *)(v83 + 4 * (v44 >> 5));
  unsigned int v68 = v66;
  while (1)
  {
    unsigned int v70 = *v67++;
    uint64_t v69 = v70;
    if (v66 < 2) {
      goto LABEL_47;
    }
    uint64_t v71 = v23 + 24 * v69;
    float32x4_t v72 = *(float32x4_t *)(v71 + 12);
    float32x4_t v73 = vaddq_f32(*(float32x4_t *)v71, v72);
    int8x16_t v74 = (int8x16_t)vsubq_f32(v72, *(float32x4_t *)v71);
    v73.i32[3] = 0;
    float32x4_t v75 = (float32x4_t)v74;
    v75.i32[3] = 0;
    float32x4_t v76 = vaddq_f32(v73, v75);
    float32x4_t v77 = vsubq_f32(v73, v75);
    float32x4_t v78 = vsubq_f32(v21, v73);
    *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v78.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), 4uLL);
    v79.i64[1] = v78.u32[0];
    *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
    v80.i64[1] = v74.u32[0];
    *(int16x4_t *)v74.i8 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v76, v31), (int8x16_t)vcgeq_f32(v32, v77)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v26, v80), v27, v75), vabsq_f32(vmlaq_f32(vmulq_f32(v22, v79), v78, v33)))));
    if (vuzp1_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v74.i8).u32[0] == -1)
    {
LABEL_47:
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v14 + 4 * v69);
      uint64_t v11 = (v11 + 1);
      if (v11 == a4) {
        break;
      }
    }
    if (!--v68) {
      goto LABEL_35;
    }
  }
  uint64_t v11 = a4;
LABEL_39:
  if ((v95 & 0x8000000000000000) == 0 && (v95 & 0x7FFFFFFF00000000) != 0 && v94 != v92 && v94) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v11;
}

uint64_t physx::Gu::BVHStructure::sweep(void *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  float v13 = *(float *)(a2 + 20);
  float v14 = *(float *)(a2 + 8);
  float v15 = (float)(v13 - v14) * 0.5;
  uint64_t v17 = a1[8];
  uint64_t v16 = a1[9];
  double v19 = a1 + 6;
  uint64_t v18 = a1[6];
  uint64_t v91 = v19[1];
  float v20 = (float)((float)(v13 + v14) * 0.5) + (float)((float)(v13 + v14) * 0.5);
  float32x2_t v21 = *(float32x2_t *)(a2 + 12);
  float32x2_t v22 = vmul_f32(vadd_f32(v21, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  float32x2_t v23 = vadd_f32(v22, v22);
  float32x2_t v24 = vadd_f32(*a3, *a3);
  float v25 = a3[1].f32[0] + a3[1].f32[0];
  float32x2_t v26 = vmul_f32(vsub_f32(v21, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v32.f32 = vadd_f32(v26, v26);
  v26.f32[0] = v15 + v15;
  double v27 = COERCE_DOUBLE(vadd_f32(v23, vmul_n_f32(v24, a6)));
  double v28 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vceqz_f32(v24), (int8x8_t)v23, vbsl_s8((int8x8_t)vcgez_f32(v24), (int8x8_t)vdup_n_s32(0x7F7FFFFFu), (int8x8_t)0x80000000800000)));
  *(float32x2_t *)v29.f32 = v23;
  v29.i64[1] = LODWORD(v20);
  *(float32x2_t *)v30.f32 = v24;
  v30.i64[1] = LODWORD(v25);
  *(int8x8_t *)v31.f32 = vext_s8((int8x8_t)v24, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), 4uLL);
  v31.i64[1] = v24.u32[0];
  v32.i64[1] = v26.u32[0];
  float32x4_t v33 = vabsq_f32(v30);
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), 4uLL);
  v34.i64[1] = v33.u32[0];
  float v35 = v20 + (float)(v25 * a6);
  float v36 = -3.4028e38;
  if (v25 >= 0.0) {
    float v36 = 3.4028e38;
  }
  if (v25 != 0.0) {
    float v20 = v36;
  }
  if (a6 >= 3.4028e38)
  {
    *(double *)v37.i64 = v28;
  }
  else
  {
    float v20 = v35;
    *(double *)v37.i64 = v27;
  }
  v37.i64[1] = LODWORD(v20);
  float32x4_t v38 = vminq_f32(v29, v37);
  float32x4_t v39 = vmaxq_f32(v29, v37);
  uint64_t v104 = 0x10000000100;
  char v102 = 1;
  float32x2_t v103 = v101;
  v101[0] = v16;
  float32x4_t v40 = vnegq_f32(v31);
  float32x4_t v99 = v29;
  float32x4_t v100 = v32;
  float32x4_t v97 = v33;
  float32x4_t v98 = v30;
  float32x4_t v95 = v38;
  float32x4_t v96 = v34;
  float32x4_t v92 = v40;
  float32x4_t v93 = v39;
  while (1)
  {
    uint64_t v41 = v103[v12];
    float32x4_t v42 = *(float32x4_t *)(v41 + 12);
    float32x4_t v43 = vsubq_f32(v42, *(float32x4_t *)v41);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(*(float32x4_t *)v41, v42);
    v44.i32[3] = 0;
    float32x4_t v45 = vaddq_f32(v32, v43);
    float32x4_t v46 = vaddq_f32(v44, v45);
    float32x4_t v47 = vsubq_f32(v44, v45);
    float32x4_t v48 = vsubq_f32(v29, v44);
    *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), 4uLL);
    v49.i64[1] = v48.u32[0];
    *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v45.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), 4uLL);
    v50.i64[1] = v45.u32[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v46, v38), (int8x16_t)vcgeq_f32(v39, v47)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v50), v34, v45), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v49), v48, v40))))), *(int8x8_t *)v42.f32).u32[0] == -1)break; {
LABEL_36:
    }
    int v89 = v12;
    uint64_t v12 = (v12 - 1);
    if (!v89) {
      goto LABEL_39;
    }
  }
  unsigned int v51 = HIDWORD(*(_OWORD *)(v41 + 12));
  if ((v42.i8[12] & 1) == 0)
  {
    while (1)
    {
      uint64_t v52 = v16 + 28 * (v51 >> 1);
      float32x4_t v53 = *(float32x4_t *)(v52 + 12);
      float32x4_t v54 = vsubq_f32(v53, *(float32x4_t *)v52);
      v54.i32[3] = 0;
      float32x4_t v55 = vaddq_f32(*(float32x4_t *)v52, v53);
      v55.i32[3] = 0;
      float32x4_t v56 = vaddq_f32(v32, v54);
      float32x4_t v57 = vsubq_f32(v29, v55);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), 4uLL);
      v58.i64[1] = v57.u32[0];
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), 4uLL);
      v59.i64[1] = v56.u32[0];
      unsigned __int32 v60 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v55, v56), v38), (int8x16_t)vcgeq_f32(v39, vsubq_f32(v55, v56))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v59), v34, v56), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v58), v57, v40))))), *(int8x8_t *)v55.f32).u32[0];
      float32x4_t v61 = *(float32x4_t *)(v52 + 28);
      float32x4_t v62 = *(float32x4_t *)(v52 + 40);
      float32x4_t v63 = vsubq_f32(v62, v61);
      v63.i32[3] = 0;
      float32x4_t v64 = vaddq_f32(v61, v62);
      v64.i32[3] = 0;
      float32x4_t v65 = vaddq_f32(v32, v63);
      float32x4_t v66 = vsubq_f32(v29, v64);
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v66.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), 4uLL);
      v59.i64[1] = v66.u32[0];
      *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), 4uLL);
      v67.i64[1] = v65.u32[0];
      unsigned __int32 v68 = vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v64, v65), v38), (int8x16_t)vcgeq_f32(v39, vsubq_f32(v64, v65))), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v67), v34, v65), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v59), v66, v40))))), *(int8x8_t *)v55.f32).u32[0];
      if (v60 == -1 && v68 == -1)
      {
        float32x4_t v73 = vmulq_f32(v30, vsubq_f32(v64, v55));
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        v73.f32[0] = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32).f32[0];
        uint64_t v72 = (v12 + 1);
        v103[v12] = v52 + 28 * (v73.f32[0] > 0.0);
        uint64_t v70 = v52 + 28 * (v73.f32[0] <= 0.0);
        if (v72 == (HIDWORD(v104) & 0x7FFFFFFF))
        {
          physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v101, 2 * v72);
          float32x4_t v40 = v92;
          float32x4_t v39 = v93;
          float32x4_t v38 = v95;
          float32x4_t v34 = v96;
          float32x4_t v33 = v97;
          float32x4_t v30 = v98;
          float32x4_t v29 = v99;
          float32x4_t v32 = v100;
        }
      }
      else
      {
        if (v60 == -1) {
          uint64_t v70 = v52;
        }
        else {
          uint64_t v70 = v52 + 28;
        }
        if (v60 != -1 && v68 != -1) {
          goto LABEL_36;
        }
        uint64_t v72 = v12;
      }
      unsigned int v51 = *(_DWORD *)(v70 + 24);
      uint64_t v12 = v72;
      if (v51) {
        goto LABEL_29;
      }
    }
  }
  LODWORD(v72) = v12;
LABEL_29:
  unsigned int v74 = (v51 >> 1) & 0xF;
  if (!v74)
  {
LABEL_35:
    LODWORD(v12) = v72;
    goto LABEL_36;
  }
  float32x4_t v75 = (unsigned int *)(v91 + 4 * (v51 >> 5));
  unsigned int v76 = v74;
  while (1)
  {
    unsigned int v78 = *v75++;
    uint64_t v77 = v78;
    if (v74 < 2) {
      goto LABEL_47;
    }
    uint64_t v79 = v18 + 24 * v77;
    float32x4_t v80 = *(float32x4_t *)(v79 + 12);
    float32x4_t v81 = vaddq_f32(*(float32x4_t *)v79, v80);
    float32x4_t v82 = vsubq_f32(v80, *(float32x4_t *)v79);
    v81.i32[3] = 0;
    v82.i32[3] = 0;
    float32x4_t v83 = vaddq_f32(v32, v82);
    float32x4_t v84 = vaddq_f32(v81, v83);
    float32x4_t v85 = vsubq_f32(v81, v83);
    float32x4_t v86 = vsubq_f32(v29, v81);
    *(int8x8_t *)v87.f32 = vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), 4uLL);
    v87.i64[1] = v86.u32[0];
    *(int8x8_t *)v88.f32 = vext_s8(*(int8x8_t *)v83.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), 4uLL);
    v88.i64[1] = v83.u32[0];
    *(int16x4_t *)v83.f32 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v84, v38), (int8x16_t)vcgeq_f32(v39, v85)), (int8x16_t)vcgeq_f32(vmlaq_f32(vmulq_f32(v33, v88), v34, v83), vabsq_f32(vmlaq_f32(vmulq_f32(v30, v87), v86, v40)))));
    if (vuzp1_s8(*(int8x8_t *)v83.f32, *(int8x8_t *)v83.f32).u32[0] == -1)
    {
LABEL_47:
      *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v17 + 4 * v77);
      uint64_t v11 = (v11 + 1);
      if (v11 == a4) {
        break;
      }
    }
    if (!--v76) {
      goto LABEL_35;
    }
  }
  uint64_t v11 = a4;
LABEL_39:
  if ((v104 & 0x8000000000000000) == 0 && (v104 & 0x7FFFFFFF00000000) != 0 && v103 != v101 && v103) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v11;
}

uint64_t physx::Gu::BVHStructure::overlap(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  physx::Gu::BVHStructure::createVolumes((uint64_t)a1);
  uint64_t v8 = 0;
  float v9 = *(float *)(a2 + 8);
  float v10 = *(float *)(a2 + 20);
  float32x2_t v11 = *(float32x2_t *)(a2 + 12);
  *(float32x2_t *)v12.f32 = vmul_f32(vadd_f32(*(float32x2_t *)a2, v11), (float32x2_t)0x3F0000003F000000);
  v12.f32[2] = (float)(v9 + v10) * 0.5;
  v12.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vmul_f32(vsub_f32(v11, *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000);
  v13.i64[1] = COERCE_UNSIGNED_INT((float)(v10 - v9) * 0.5);
  uint64_t v15 = a1[8];
  uint64_t v14 = a1[9];
  uint64_t v38 = a1[7];
  uint64_t v39 = a1[6];
  uint64_t v45 = 0x10000000100;
  unsigned int v16 = 1;
  char v43 = 1;
  float32x4_t v44 = v42;
  v42[0] = v14;
  v17.i64[0] = 0x3F0000003F000000;
  v17.i64[1] = 0x3F0000003F000000;
  float32x4_t v40 = v13;
  float32x4_t v41 = v12;
  while (2)
  {
    unsigned int v18 = 2 * v16--;
    uint64_t v19 = v44[v16];
    float32x4_t v20 = *(float32x4_t *)(v19 + 12);
    float32x4_t v21 = vmulq_f32(vsubq_f32(v20, *(float32x4_t *)v19), v17);
    v21.i32[3] = 0;
    float32x4_t v22 = vaddq_f32(*(float32x4_t *)v19, v20);
    while (1)
    {
      float32x4_t v23 = vmulq_f32(v22, v17);
      v23.i32[3] = 0;
      int8x8_t v24 = (int8x8_t)vmovn_s32(vcgeq_f32(vaddq_f32(v13, v21), vabdq_f32(v23, v12)));
      if ((~vuzp1_s8(v24, v24).u32[0] & 0xFFFFFF) != 0) {
        break;
      }
      unint64_t v25 = *(unsigned int *)(v19 + 24);
      if (v25)
      {
        unsigned int v28 = (v25 >> 1) & 0xF;
        if (v28)
        {
          float32x4_t v29 = (unsigned int *)(v38 + ((v25 >> 3) & 0x1FFFFFFC));
          unsigned int v30 = v28;
          while (1)
          {
            unsigned int v32 = *v29++;
            uint64_t v31 = v32;
            if (v28 < 2
              || (uint64_t v33 = v39 + 24 * v31,
                  float32x4_t v34 = *(float32x4_t *)(v33 + 12),
                  float32x4_t v35 = vmulq_f32(vsubq_f32(v34, *(float32x4_t *)v33), v17),
                  float32x4_t v36 = vmulq_f32(vaddq_f32(*(float32x4_t *)v33, v34), v17),
                  v36.i32[3] = 0,
                  v35.i32[3] = 0,
                  *(int16x4_t *)v35.f32 = vmovn_s32(vcgeq_f32(vaddq_f32(v13, v35), vabdq_f32(v36, v12))),
                  (~vuzp1_s8(*(int8x8_t *)v35.f32, *(int8x8_t *)v35.f32).u32[0] & 0xFFFFFF) == 0))
            {
              *(_DWORD *)(a4 + 4 * v8) = *(_DWORD *)(v15 + 4 * v31);
              uint64_t v8 = (v8 + 1);
              if (v8 == a3) {
                break;
              }
            }
            if (!--v30) {
              goto LABEL_14;
            }
          }
          uint64_t v8 = a3;
          goto LABEL_17;
        }
        break;
      }
      uint64_t v19 = v14 + 28 * (*(_DWORD *)(v19 + 24) >> 1);
      unsigned int v26 = v16 + 1;
      v44[v16] = v19 + 28;
      if (v16 + 1 == (HIDWORD(v45) & 0x7FFFFFFF))
      {
        physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized((uint64_t)v42, v18);
        v17.i64[0] = 0x3F0000003F000000;
        v17.i64[1] = 0x3F0000003F000000;
        float32x4_t v13 = v40;
        float32x4_t v12 = v41;
      }
      float32x4_t v27 = *(float32x4_t *)(v19 + 12);
      float32x4_t v21 = vmulq_f32(vsubq_f32(v27, *(float32x4_t *)v19), v17);
      v21.i32[3] = 0;
      float32x4_t v22 = vaddq_f32(*(float32x4_t *)v19, v27);
      v18 += 2;
      unsigned int v16 = v26;
    }
LABEL_14:
    if (v16) {
      continue;
    }
    break;
  }
LABEL_17:
  if ((v45 & 0x8000000000000000) == 0 && (v45 & 0x7FFFFFFF00000000) != 0 && v44 != v42 && v44) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v8;
}

const char *physx::PxBVHStructure::getConcreteTypeName(physx::PxBVHStructure *this)
{
  return "PxBVHStructure";
}

BOOL physx::PxBVHStructure::isKindOf(physx::PxBVHStructure *this, const char *a2)
{
  return !strcmp("PxBVHStructure", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::BVHStructure::getBounds(physx::Gu::BVHStructure *this)
{
  return *((void *)this + 6);
}

uint64_t physx::Gu::BVHStructure::getNbBounds(physx::Gu::BVHStructure *this)
{
  return *((unsigned int *)this + 10);
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  float32x4_t v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  unint64_t v4 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v5 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v5.i32[3] = 0;
  int8x16_t v6 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v2, v3), v5));
  float32x4_t v7 = *(float32x4_t *)(a1->i64[1] + 48);
  int8x16_t v8 = (int8x16_t)vnegq_f32(v7);
  v8.i32[3] = 0;
  float32x4_t v9 = (float32x4_t)vbslq_s8(v6, (int8x16_t)v7, v8);
  float32x4_t v10 = vmulq_n_f32(*v4, v9.f32[0]);
  v10.i32[3] = 0;
  float32x4_t v11 = vmulq_lane_f32(v4[1], *(float32x2_t *)v9.f32, 1);
  v11.i32[3] = 0;
  float32x4_t v12 = vmulq_laneq_f32(v4[2], v9, 2);
  v12.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v4[3], vaddq_f32(v12, vaddq_f32(v10, v11))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2 = (float32x4_t *)a1->i64[1];
  float32x4_t v3 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v4 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(a1[3], *a2, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  float32x4_t v7 = vaddq_f32(vaddq_f32(v4, v5), v6);
  float32x4_t v8 = vmulq_f32(v2[3], v7);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  float32x4_t v9 = vmulq_f32(v7, v2[4]);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  float32x4_t v10 = vmulq_f32(v7, v2[5]);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  *(int8x8_t *)v8.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), 4uLL);
  v8.i64[1] = vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32).u32[0];
  float32x4_t v20 = v8;
  float32x4_t v11 = *(float32x4_t *)(v2[10].i64[0]
                       + 12 * physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v2, &v20));
  float32x4_t v12 = vmulq_n_f32(v2[3], v11.f32[0]);
  v12.i32[3] = 0;
  float32x4_t v13 = vmulq_lane_f32(v2[4], *(float32x2_t *)v11.f32, 1);
  v13.i32[3] = 0;
  float32x4_t v14 = vmulq_laneq_f32(v2[5], v11, 2);
  v14.i32[3] = 0;
  float32x4_t v15 = vaddq_f32(vaddq_f32(v12, v13), v14);
  float32x4_t v16 = vmulq_n_f32(*v3, v15.f32[0]);
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_lane_f32(v3[1], *(float32x2_t *)v15.f32, 1);
  v17.i32[3] = 0;
  float32x4_t v18 = vmulq_laneq_f32(v3[2], v15, 2);
  v18.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v16, v17), v18)).u64[0];
  return result;
}

uint64_t physx::Gu::unsupportedMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t MeshMTDGenerationCallback::processHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  float32x4_t v3 = (_DWORD *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  if ((*(_DWORD *)(v2 + 12) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2, v3);
  }
  else
  {
    *(_DWORD *)(*(void *)v2 + 4 * v4) = *v3;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

void MeshMTDGenerationCallback::~MeshMTDGenerationCallback(MeshMTDGenerationCallback *this)
{
}

void MidPhaseQueryLocalReport::~MidPhaseQueryLocalReport(MidPhaseQueryLocalReport *this)
{
}

uint64_t MidPhaseQueryLocalReport::onEvent(MidPhaseQueryLocalReport *this, unsigned int a2, unsigned int *a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = *(unsigned int *)(v6 + 8);
      if ((*(_DWORD *)(v6 + 12) & 0x7FFFFFFFu) <= v7)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v6, a3);
      }
      else
      {
        *(_DWORD *)(*(void *)v6 + 4 * v7) = *a3;
        ++*(_DWORD *)(v6 + 8);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t computeSweepConvexPlane(uint64_t a1, uint64_t a2, unsigned int *a3, float *a4, float *a5, float *a6)
{
  float v8 = *a6;
  float v9 = a6[1];
  float v10 = a6[2];
  float v44 = a5[1];
  float v45 = *a5;
  float v11 = a4[3];
  float v42 = a4[4];
  float v43 = a5[2];
  float v12 = a4[6];
  float v41 = a4[5];
  float v13 = *a4;
  float v14 = a4[1];
  float v15 = a4[2];
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v46, (float *)(a1 + 4), (float *)(a1 + 16));
  uint64_t v16 = *a3;
  if (!v16) {
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t result = 0;
  float v19 = 3.4028e38;
  float v20 = (float)((float)(v45 - (float)(v8 * 0.01)) - v42) + (float)((float)(v45 - (float)(v8 * 0.01)) - v42);
  float v21 = (float)((float)(v44 - (float)(v9 * 0.01)) - v41) + (float)((float)(v44 - (float)(v9 * 0.01)) - v41);
  float v22 = (float)((float)(v43 - (float)(v10 * 0.01)) - v12) + (float)((float)(v43 - (float)(v10 * 0.01)) - v12);
  float v23 = (float)(v11 * v11) + -0.5;
  float v24 = (float)((float)(v21 * v14) + (float)(v13 * v20)) + (float)(v15 * v22);
  float v25 = (float)((float)(v20 * v23) - (float)((float)((float)(v14 * v22) - (float)(v15 * v21)) * v11))
      + (float)(v13 * v24);
  float v26 = (float)((float)(v21 * v23) - (float)((float)((float)(v15 * v20) - (float)(v13 * v22)) * v11))
      + (float)(v14 * v24);
  float v27 = (float)((float)(v22 * v23) - (float)((float)((float)(v13 * v21) - (float)(v14 * v20)) * v11))
      + (float)(v15 * v24);
  float v28 = (float)((float)((float)(v9 + v9) * v14) + (float)(v13 * (float)(v8 + v8))) + (float)(v15 * (float)(v10 + v10));
  float v29 = (float)((float)((float)(v8 + v8) * v23)
              - (float)((float)((float)(v14 * (float)(v10 + v10)) - (float)(v15 * (float)(v9 + v9))) * v11))
      + (float)(v13 * v28);
  float v30 = (float)((float)((float)(v9 + v9) * v23)
              - (float)((float)((float)(v15 * (float)(v8 + v8)) - (float)(v13 * (float)(v10 + v10))) * v11))
      + (float)(v14 * v28);
  float v31 = (float)((float)((float)(v10 + v10) * v23)
              - (float)((float)((float)(v13 * (float)(v9 + v9)) - (float)(v14 * (float)(v8 + v8))) * v11))
      + (float)(v15 * v28);
  unsigned int v32 = (float *)(*(void *)(a2 + 40) + 8);
  do
  {
    float v33 = *(v32 - 2);
    float v34 = *(v32 - 1);
    float v35 = (float)((float)(v48 * v34) + (float)(v47 * v33)) + (float)(v49 * *v32);
    float v36 = (float)((float)(v51 * v34) + (float)(v50 * v33)) + (float)(v52 * *v32);
    float v37 = (float)((float)(v54 * v34) + (float)(v53 * v33)) + (float)(v55 * *v32);
    float v38 = 1.0 / sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
    float v39 = v37 * v38;
    float v40 = (float)(v32[1] * v38)
        + (float)((float)((float)(v26 * (float)(v36 * v38)) + (float)(v25 * (float)(v35 * v38))) + (float)(v27 * v39));
    if (v40 >= 0.0)
    {
      if ((float)(v40
                 + (float)((float)((float)((float)(v30 * (float)(v36 * v38)) + (float)((float)(v35 * v38) * v29))
                                 + (float)(v39 * v31))
                         * 0.01)) >= v19)
      {
        uint64_t result = result;
      }
      else
      {
        float v19 = v40
            + (float)((float)((float)((float)(v30 * (float)(v36 * v38)) + (float)((float)(v35 * v38) * v29))
                            + (float)(v39 * v31))
                    * 0.01);
        uint64_t result = v17;
      }
    }
    ++v17;
    v32 += 5;
  }
  while (v16 != v17);
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::supportPoint(uint64_t a1, int a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = *(float32x4_t *)(*(void *)(a1 + 8) + 48);
  int8x16_t v4 = (int8x16_t)vnegq_f32(v3);
  v4.i32[3] = 0;
  float32x4_t v5 = (float32x4_t)vbslq_s8(physx::boxVertexTable[a2], (int8x16_t)v3, v4);
  float32x4_t v6 = vmulq_n_f32(*v2, v5.f32[0]);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_lane_f32(v2[1], *(float32x2_t *)v5.f32, 1);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_laneq_f32(v2[2], v5, 2);
  v8.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v2[3], vaddq_f32(v8, vaddq_f32(v6, v7))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(float32x4_t *a1, float32x2_t *a2, unsigned __int32 *a3)
{
  float32x4_t v3 = (float32x4_t *)a1->i64[1];
  int8x16_t v4 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  int8x16_t v8 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v5, v6), v7));
  int32x4_t v9 = (int32x4_t)vandq_s8(v8, (int8x16_t)xmmword_2343978C0);
  v9.i64[0] = vpaddq_s32(v9, v9).u64[0];
  *a3 = vpadd_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v9.i8).u32[0] & 7;
  float32x4_t v10 = v3[3];
  int8x16_t v11 = (int8x16_t)vnegq_f32(v10);
  v11.i32[3] = 0;
  float32x4_t v12 = (float32x4_t)vbslq_s8(v8, (int8x16_t)v10, v11);
  float32x4_t v13 = vmulq_n_f32(*v4, v12.f32[0]);
  v13.i32[3] = 0;
  float32x4_t v14 = vmulq_lane_f32(v4[1], *(float32x2_t *)v12.f32, 1);
  v14.i32[3] = 0;
  float32x4_t v15 = vmulq_laneq_f32(v4[2], v12, 2);
  v15.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v4[3], vaddq_f32(vaddq_f32(v13, v14), v15)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::BoxV>::getSweepMargin(uint64_t a1)
{
  uint64_t v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::BoxV>::getCenter(uint64_t a1)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 8);
  uint64_t v1 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::BoxV>::~RelativeConvex()
{
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::supportPoint(uint64_t a1, int a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 8);
  float32x4_t v3 = *(float32x4_t *)(v2[10].i64[0] + 12 * a2);
  float32x4_t v4 = vmulq_n_f32(v2[3], v3.f32[0]);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(v2[4], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = *(float32x4_t **)(a1 + 16);
  float32x4_t v7 = vmulq_laneq_f32(v2[5], v3, 2);
  v7.i32[3] = 0;
  float32x4_t v8 = vaddq_f32(vaddq_f32(v4, v5), v7);
  float32x4_t v9 = vmulq_n_f32(*v6, v8.f32[0]);
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_lane_f32(v6[1], *(float32x2_t *)v8.f32, 1);
  v10.i32[3] = 0;
  float32x4_t v11 = vmulq_laneq_f32(v6[2], v8, 2);
  v11.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v6[3], vaddq_f32(v11, vaddq_f32(v9, v10))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  float32x4_t v4 = (float32x4_t *)a1->i64[1];
  float32x4_t v5 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v6 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_lane_f32(a1[3], *a2, 1);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v8.i32[3] = 0;
  float32x4_t v9 = vaddq_f32(vaddq_f32(v6, v7), v8);
  float32x4_t v10 = vmulq_f32(v4[3], v9);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  float32x4_t v11 = vmulq_f32(v9, v4[4]);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  float32x4_t v12 = vmulq_f32(v9, v4[5]);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(int8x8_t *)v10.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), 4uLL);
  v10.i64[1] = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32).u32[0];
  float32x4_t v23 = v10;
  int v13 = physx::Gu::ConvexHullV::supportVertexIndex((uint64_t)v4, &v23);
  *a3 = v13;
  float32x4_t v14 = *(float32x4_t *)(v4[10].i64[0] + 12 * v13);
  float32x4_t v15 = vmulq_n_f32(v4[3], v14.f32[0]);
  v15.i32[3] = 0;
  float32x4_t v16 = vmulq_lane_f32(v4[4], *(float32x2_t *)v14.f32, 1);
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_laneq_f32(v4[5], v14, 2);
  v17.i32[3] = 0;
  float32x4_t v18 = vaddq_f32(vaddq_f32(v15, v16), v17);
  float32x4_t v19 = vmulq_n_f32(*v5, v18.f32[0]);
  v19.i32[3] = 0;
  float32x4_t v20 = vmulq_lane_f32(v5[1], *(float32x2_t *)v18.f32, 1);
  v20.i32[3] = 0;
  float32x4_t v21 = vmulq_laneq_f32(v5[2], v18, 2);
  v21.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v5[3], vaddq_f32(vaddq_f32(v19, v20), v21)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::getSweepMargin(uint64_t a1)
{
  uint64_t v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::getCenter(uint64_t a1)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 8);
  uint64_t v1 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::~RelativeConvex()
{
}

BOOL anonymous namespace'::HFTraceSegmentCallback::faceHit(uint64_t *a1, float *a2, int a3, float a4, float a5)
{
  unsigned int v6 = *((_DWORD *)a1 + 2);
  uint64_t v5 = *((unsigned int *)a1 + 3);
  if (v5 >= v6) {
    return 0;
  }
  uint64_t v8 = *a1;
  unsigned int v9 = v5 + 1;
  *((_DWORD *)a1 + 3) = v5 + 1;
  uint64_t v10 = v8 + (v5 << 6);
  float v11 = *a2;
  float v12 = a2[1];
  *(float *)(v10 + 24) = *a2;
  *(float *)(v10 + 28) = v12;
  float v13 = a2[2];
  *(float *)(v10 + 32) = v13;
  *(_DWORD *)(v10 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = a3;
  *(float *)(v10 + 52) = a4;
  *(float *)(v10 + 56) = a5;
  *(_WORD *)(v10 + 2physx::Sq::AABBTree::release(this, 0) = 1032;
  __int16 v14 = *((_WORD *)a1 + 28);
  if ((v14 & 2) != 0)
  {
    uint64_t v17 = a1[2];
    float32x4_t v18 = (float *)a1[3];
    uint64_t v19 = *(void *)(v17 + 16);
    float v20 = *(float *)v17;
    float v21 = *(float *)(v17 + 4);
    float v22 = v11 * *(float *)v17;
    float v23 = *(float *)(v17 + 8);
    uint64_t v60 = 0;
    unsigned int v24 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v19, v22, v13 * v23, (float *)&v60 + 1, (float *)&v60);
    uint64_t v25 = *(void *)(v19 + 80);
    float v26 = (__int16 *)(v25 + 4 * v24);
    if ((char)v26[1] < 0)
    {
      int v32 = *v26;
      int v33 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24 + 1));
      if (*(float *)&v60 >= *((float *)&v60 + 1))
      {
        int v36 = *(__int16 *)(v25 + 4 * (v24 + 1));
        int v30 = v36 - v33;
        int v31 = v32 - v36;
      }
      else
      {
        int v34 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24));
        int v30 = v32 - v34;
        int v31 = v34 - v33;
      }
    }
    else
    {
      int v27 = *(__int16 *)(v25 + 4 * (v24 + 1));
      int v28 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24));
      if ((float)(*((float *)&v60 + 1) + *(float *)&v60) <= 1.0)
      {
        int v35 = *v26;
        int v30 = v35 - v28;
        int v31 = v35 - v27;
      }
      else
      {
        int v29 = *(__int16 *)(v25 + 4 * (*(_DWORD *)(v19 + 60) + v24 + 1));
        int v30 = v27 - v29;
        int v31 = v28 - v29;
      }
    }
    float v37 = (float)(v20 * (float)v30) + (float)(v20 * (float)v30);
    float v38 = (float)(v23 * (float)v31) + (float)(v23 * (float)v31);
    float v40 = v18[2];
    float v39 = v18[3];
    float v41 = (float)(v39 * v39) + -0.5;
    float v42 = v18[1];
    float v43 = (float)((float)((float)(v21 + v21) * v42) + (float)(*v18 * v37)) + (float)(v40 * v38);
    float v44 = (float)((float)(v39 * (float)((float)(v42 * v38) - (float)(v40 * (float)(v21 + v21)))) + (float)(v37 * v41))
        + (float)(*v18 * v43);
    float v45 = (float)((float)(v39 * (float)((float)(v40 * v37) - (float)(*v18 * v38))) + (float)((float)(v21 + v21) * v41))
        + (float)(v42 * v43);
    float v46 = (float)((float)(v39 * (float)((float)(*v18 * (float)(v21 + v21)) - (float)(v42 * v37))) + (float)(v38 * v41))
        + (float)(v40 * v43);
    float v47 = sqrtf((float)((float)(v45 * v45) + (float)(v44 * v44)) + (float)(v46 * v46));
    if (v47 > 0.0)
    {
      float v48 = 1.0 / v47;
      float v44 = v44 * v48;
      float v45 = v45 * v48;
      float v46 = v46 * v48;
    }
    if (*((unsigned char *)a1 + 58)
      && (float)((float)((float)(v45 * *(float *)(a1[4] + 4)) + (float)(v44 * *(float *)a1[4]))
               + (float)(v46 * *(float *)(a1[4] + 8))) > 0.0)
    {
      float v44 = -v44;
      float v45 = -v45;
      float v46 = -v46;
    }
    *(float *)(v10 + 36) = v44;
    *(float *)(v10 + 4physx::Sq::AABBTree::release(this, 0) = v45;
    *(float *)(v10 + 44) = v46;
    *(_WORD *)(v10 + 2physx::Sq::AABBTree::release(this, 0) = 1034;
    __int16 v14 = *((_WORD *)a1 + 28);
    __int16 v15 = 1035;
  }
  else
  {
    __int16 v15 = 1033;
  }
  float v49 = (float)((float)((float)(v12 - *(float *)(a1[6] + 4)) * *(float *)(a1[5] + 4))
              + (float)((float)(v11 - *(float *)a1[6]) * *(float *)a1[5]))
      + (float)((float)(v13 - *(float *)(a1[6] + 8)) * *(float *)(a1[5] + 8));
  if (v49 < 0.0) {
    float v49 = 0.0;
  }
  *(float *)(v10 + 48) = v49;
  if (v14)
  {
    float v50 = (float *)a1[3];
    float v52 = v50[2];
    float v51 = v50[3];
    float v53 = (float)(v51 * v51) + -0.5;
    float v54 = v50[1];
    float v55 = (float)((float)((float)(v12 + v12) * v54) + (float)(*v50 * (float)(v11 + v11)))
        + (float)(v52 * (float)(v13 + v13));
    float v56 = (float)((float)(v51 * (float)((float)(*v50 * (float)(v12 + v12)) - (float)(v54 * (float)(v11 + v11))))
                + (float)((float)(v13 + v13) * v53))
        + (float)(v52 * v55);
    float v57 = v50[4]
        + (float)((float)((float)(v51 * (float)((float)(v54 * (float)(v13 + v13)) - (float)(v52 * (float)(v12 + v12))))
                        + (float)((float)(v11 + v11) * v53))
                + (float)(*v50 * v55));
    float v58 = v50[5]
        + (float)((float)((float)(v51 * (float)((float)(v52 * (float)(v11 + v11)) - (float)(*v50 * (float)(v13 + v13))))
                        + (float)((float)(v12 + v12) * v53))
                + (float)(v54 * v55));
    float v59 = v50[6];
    *(float *)(v10 + 24) = v57;
    *(float *)(v10 + 28) = v58;
    *(float *)(v10 + 32) = v59 + v56;
    *(_WORD *)(v10 + 2physx::Sq::AABBTree::release(this, 0) = v15;
  }
  return v9 < v6;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  float v13 = a7;
  __int16 v14 = a6;
  uint64_t v351 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(void *)(a1 + 8);
  float32x4_t v18 = (const float *)(v17 + 20);
  float32x2_t v19 = vld1_dup_f32(v18);
  float v20 = *(float32x4_t **)(a2 + 8);
  float v21 = &v20[1].f32[1];
  float32x2_t v22 = vld1_dup_f32(v21);
  float32x2_t v23 = vmin_f32(v19, v22);
  float32x2_t v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v25 = vmul_f32(v23, v24);
  v23.i32[0] = *(_DWORD *)(v17 + 16);
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -*(char *)(v17 + 32);
  int32x2_t v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  float32x2_t v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  float32x2_t v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  float32x2_t v323 = v27;
  float v324 = v28.f32[0];
  float32x2_t v29 = vadd_f32(v27, v28);
  uint64_t v30 = *a4;
  float32x4_t v335 = 0uLL;
  unsigned int v334 = 0;
  uint64_t v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v327 = v29;
  if (!*a8)
  {
    float32x4_t v58 = vmulq_f32(*a3, *a3);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v335 = v50;
    float32x4_t v59 = vmulq_f32(v50, v50);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
    float32x2_t v61 = vrsqrte_f32(v60);
    int v62 = 4;
    do
    {
      float32x2_t v61 = vmul_f32(v61, vrsqrts_f32(vmul_f32(v61, v61), v60));
      --v62;
    }
    while (v62);
    float32x2_t v63 = vmul_f32(v60, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v60), 0), (int8x8_t)_D9, (int8x8_t)v61));
    float32x2_t v64 = vrecpe_f32(v63);
    int v65 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v63, v64);
      float32x2_t v64 = vmul_f32(v64, *(float32x2_t *)a12.f32);
      --v65;
    }
    while (v65);
    float32x4_t v66 = vmulq_n_f32(v50, v64.f32[0]);
    v66.i32[3] = 0;
    float32x4_t v330 = v66;
    float32x2_t v67 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v68.i64[0] = -1;
    v68.i64[1] = -1;
    float32x4_t v69 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v37 = 0;
  uint64_t v38 = v17 + 48;
  uint64_t v39 = v20[10].i64[0];
  float32x4_t v40 = v20[3];
  float32x4_t v41 = v20[4];
  a12 = v20[5];
  do
  {
    uint64_t v42 = a6[v37];
    *(&v340 + v37) = v42;
    unsigned int v43 = a7[v37];
    *(&v338 + v37) = v43;
    float32x4_t v44 = *(float32x4_t *)(v38 + 16 * (1 - v42));
    float32x4_t v45 = *(float32x4_t *)(v39 + 12 * v43);
    float32x4_t v46 = vmulq_n_f32(v40, v45.f32[0]);
    v46.i32[3] = 0;
    float32x4_t v47 = vmulq_lane_f32(v41, *(float32x2_t *)v45.f32, 1);
    v47.i32[3] = 0;
    float32x4_t v48 = vmulq_laneq_f32(a12, v45, 2);
    v48.i32[3] = 0;
    float32x4_t v49 = vaddq_f32(v48, vaddq_f32(v46, v47));
    float32x4_t v50 = vsubq_f32(v44, v49);
    *(&v345 + v37) = v44;
    *(&v342 + v37) = v49;
    *(&v348 + v37++) = v50;
  }
  while (v31 != v37);
  unsigned int v334 = v31;
  switch(v37)
  {
    case 4:
      int v331 = v30;
      physx::Gu::closestPtPointTetrahedron(&v348, &v345, &v342, &v340, &v338, (int *)&v334);
      LODWORD(v3physx::Sq::AABBTree::release(this, 0) = v331;
      v29.i32[0] = v327.i32[0];
      goto LABEL_49;
    case 3:
      unsigned int v334 = 3;
      float32x4_t v50 = v348;
      a12 = vsubq_f32(v349, v348);
      float32x4_t v70 = vsubq_f32((float32x4_t)v350[0], v348);
      int8x8_t v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v70.f32);
      *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
      v72.i32[1] = 0;
      float32x2_t v73 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
      float32x2_t v74 = vpadd_f32(v73, v73);
      if (v74.f32[0] > 0.00000011921)
      {
        if (v74.f32[0] == 0.0)
        {
          float32x4_t v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v71.u32[2] = v72;
          float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8(v350[0], v350[0], 8uLL).u64[0];
          float32x2_t v77 = (float32x2_t)vextq_s8(v350[0], v350[0], 4uLL).u64[0];
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 4uLL).u64[0];
          int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v349.f32, v77), v78, *(float32x2_t *)v350[0].i8);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v350[0].i8), *(float32x2_t *)v349.f32, v76), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x2_t v81 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
          float32x2_t v82 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 4uLL).u64[0];
          int8x8_t v83 = (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v350[0].i8), v77, *(float32x2_t *)v348.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v76), *(float32x2_t *)v350[0].i8, v81), 4uLL);
          v84.i64[1] = v83.u32[0];
          int8x8_t v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v78), v82, *(float32x2_t *)v349.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v349.f32), *(float32x2_t *)v348.f32, v75), 4uLL);
          v86.i64[1] = v85.u32[0];
          float32x4_t v87 = vmulq_f32(v80, v71);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          float32x4_t v89 = vmulq_f32(v84, v71);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          float32x4_t v91 = vmulq_f32(v86, v71);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vcgez_f32(v88)), (int8x8_t)vcgez_f32(v92)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
          {
            int8x16_t v118 = (int8x16_t)vmulq_f32(v348, v71);
            float32x2_t v119 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
            float32x2_t v120 = vrecpe_f32(v74);
            int v121 = 4;
            do
            {
              float32x2_t v120 = vmul_f32(v120, vrecps_f32(v74, v120));
              --v121;
            }
            while (v121);
            float32x2_t v122 = vpadd_f32(*(float32x2_t *)v118.i8, v119);
            float32x4_t v50 = vmulq_n_f32(v71, vmul_f32(v120, vpadd_f32(v122, v122)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            float32x4_t v93 = vnegq_f32(v348);
            v93.i32[3] = 0;
            float32x4_t v94 = vnegq_f32(v349);
            v94.i32[3] = 0;
            float32x4_t v95 = vmulq_f32(v93, a12);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            float32x4_t v97 = vmulq_f32(a12, v94);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v96), (int8x8_t)vclez_f32(v98)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
            {
              float32x2_t v123 = vsub_f32(v96, v98);
              float32x2_t v124 = vrecpe_f32(v123);
              int v125 = 4;
              do
              {
                float32x2_t v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                --v125;
              }
              while (v125);
              uint64_t v110 = 0;
              float32x4_t v50 = vmlaq_n_f32(v348, a12, vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              unsigned int v126 = 2;
              uint64_t v109 = 1;
            }
            else
            {
              float32x4_t v99 = vnegq_f32((float32x4_t)v350[0]);
              v99.i32[3] = 0;
              float32x4_t v100 = vmulq_f32(v94, v70);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              float32x4_t v102 = vmulq_f32(a12, v99);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              float32x4_t v104 = vmulq_f32(v70, v99);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v101, v98), (int8x8_t)vcge_f32(v103, v105)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
              {
                float32x2_t v127 = vsub_f32(v101, v98);
                float32x2_t v128 = vadd_f32(v127, vsub_f32(v103, v105));
                float32x2_t v129 = vrecpe_f32(v128);
                int v130 = 4;
                do
                {
                  float32x2_t v129 = vmul_f32(v129, vrecps_f32(v128, v129));
                  --v130;
                }
                while (v130);
                int8x16_t v131 = (int8x16_t)vmlaq_n_f32(v349, vsubq_f32((float32x4_t)v350[0], v349), vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v128), (float32x2_t)0x3400000034000000), (int8x8_t)v129, 0)).f32[0]);
                v131.i64[1] = vextq_s8(v131, v131, 8uLL).u32[0];
                unsigned int v126 = 2;
                uint64_t v110 = 1;
                uint64_t v109 = 2;
                float32x4_t v50 = (float32x4_t)v131;
              }
              else
              {
                float32x4_t v106 = vmulq_f32(v93, v70);
                int32x4_t v107 = (int32x4_t)vpaddq_f32(v106, v106);
                *(float32x2_t *)v107.i8 = vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
                {
                  float32x2_t v132 = vsub_f32(*(float32x2_t *)v107.i8, v105);
                  float32x2_t v133 = vrecpe_f32(v132);
                  int v134 = 4;
                  do
                  {
                    float32x2_t v133 = vmul_f32(v133, vrecps_f32(v132, v133));
                    --v134;
                  }
                  while (v134);
                  uint64_t v110 = 0;
                  float32x4_t v50 = vmlaq_n_f32(v348, v70, vmul_f32(*(float32x2_t *)v107.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v132), (float32x2_t)0x3400000034000000), (int8x8_t)v133, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  uint64_t v109 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v96)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
                {
                  uint64_t v110 = 0;
                  uint64_t v109 = 1;
                }
                else
                {
                  *(int32x2_t *)v107.i8 = vcge_f32(v98, v101);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v107.i8, (int8x8_t)vcgez_f32(v98)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v107.i32[0] = -1;
                  __int32 v108 = v50.i32[0];
                  float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v107), 0), (int8x16_t)v349, v350[0]);
                  uint64_t v109 = 1;
                  if (v108 == -1) {
                    uint64_t v110 = 1;
                  }
                  else {
                    uint64_t v110 = 2;
                  }
                }
                unsigned int v126 = v109;
              }
            }
            float32x4_t v135 = *(&v348 + v110);
            float32x4_t v136 = *(&v348 + v109);
            a12 = *(&v345 + v110);
            float32x4_t v137 = *(&v345 + v109);
            float32x4_t v138 = *(&v342 + v110);
            float32x4_t v139 = *(&v342 + v109);
            int v140 = *(&v340 + v110);
            int v141 = *(&v340 + v109);
            int v142 = *(&v338 + v110);
            int v143 = *(&v338 + v109);
            float32x4_t v348 = v135;
            float32x4_t v349 = v136;
            float32x4_t v345 = a12;
            float32x4_t v346 = v137;
            float32x4_t v342 = v138;
            float32x4_t v343 = v139;
            int v340 = v140;
            int v341 = v141;
            int v338 = v142;
            int v339 = v143;
            unsigned int v334 = v126;
          }
        }
        goto LABEL_49;
      }
      unsigned int v334 = 2;
      float32x4_t v111 = vmulq_f32(a12, a12);
      v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
      float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v112), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        float32x4_t v113 = vnegq_f32(v348);
        v113.i32[3] = 0;
        float32x4_t v114 = vmulq_f32(v113, a12);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        float32x2_t v116 = vrecpe_f32(v112);
        int v117 = 4;
        do
        {
          float32x2_t v116 = vmul_f32(v116, vrecps_f32(v112, v116));
          --v117;
        }
        while (v117);
        float32x4_t v50 = vmlaq_n_f32(v348, a12, vmax_f32(vmin_f32(vmul_f32(v115, v116), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v50 = v348;
      float32x4_t v51 = vsubq_f32(v349, v348);
      float32x4_t v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        float32x4_t v54 = vnegq_f32(v348);
        v54.i32[3] = 0;
        float32x4_t v55 = vmulq_f32(v54, v51);
        a12 = vpaddq_f32(v55, v55);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        float32x2_t v56 = vrecpe_f32(v53);
        int v57 = 4;
        do
        {
          float32x2_t v56 = vmul_f32(v56, vrecps_f32(v53, v56));
          --v57;
        }
        while (v57);
        float32x4_t v50 = vmlaq_n_f32(v348, v51, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v56), _D9), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v334 = 1;
LABEL_49:
  float32x4_t v335 = v50;
  float32x4_t v144 = vmulq_f32(v50, v50);
  v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
  float32x2_t v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
  float32x2_t v146 = vrsqrte_f32(v145);
  int v147 = 4;
  do
  {
    float32x2_t v146 = vmul_f32(v146, vrsqrts_f32(vmul_f32(v146, v146), v145));
    --v147;
  }
  while (v147);
  float32x2_t v67 = vmul_f32(v145, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v145), 0), (int8x8_t)_D9, (int8x8_t)v146));
  float32x2_t v148 = vrecpe_f32(v67);
  int v149 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v67, v148);
    float32x2_t v148 = vmul_f32(v148, *(float32x2_t *)a12.f32);
    --v149;
  }
  while (v149);
  float32x4_t v150 = vmulq_n_f32(v50, v148.f32[0]);
  v150.i32[3] = 0;
  float32x4_t v330 = v150;
  int32x4_t v68 = vdupq_lane_s32(vcgt_f32(v67, v25), 0);
  float32x4_t v69 = v50;
LABEL_54:
  float v151 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  int32x4_t v322 = (int32x4_t)a12;
  float32x2_t v152 = v67;
  v153.i64[0] = -1;
  v153.i64[1] = -1;
  while (1)
  {
    float32x4_t v154 = v50;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v68, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v332 = v67;
    float32x4_t v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    uint64_t v157 = v334;
    float32x4_t v158 = *(float32x4_t **)(a1 + 8);
    float32x4_t v159 = vmulq_f32(v156, v158[3]);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    float32x4_t v160 = vmulq_f32(v156, v158[4]);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    *(int8x8_t *)v160.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32), vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32)), (int8x8_t)0x100000001);
    *(&v340 + v334) = v160.i32[0];
    float32x4_t v328 = v154;
    float32x4_t v329 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v160.f32, 0), 0x1FuLL)), (int8x16_t)v158[3], (int8x16_t)v158[4]);
    *(double *)v161.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v335, &v338 + v157);
    float32x4_t v162 = v330;
    float32x4_t v163 = v161;
    float32x4_t v50 = vsubq_f32(v329, v161);
    float32x4_t v164 = vmulq_f32(v330, v50);
    v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
    float v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32).f32[0];
    if (v165 > v151)
    {
      if (v14)
      {
        uint64_t v266 = v334;
        *a8 = v334;
        if (v266)
        {
          float32x4_t v267 = &v338;
          float32x4_t v268 = &v340;
          do
          {
            int v269 = *v268++;
            *v14++ = v269;
            int v270 = *v267++;
            *v13++ = v270;
            --v266;
          }
          while (v266);
        }
      }
      return 0;
    }
    float32x2_t v166 = v332;
    uint64_t v167 = v334;
    if (v165 > (float)(0.99977 * v332.f32[0]))
    {
      float32x2_t v271 = v327;
      if (!v14) {
        goto LABEL_121;
      }
      *a8 = v334;
      if (v167)
      {
        uint64_t v272 = &v338;
        char v273 = &v340;
        uint64_t v274 = v167;
        do
        {
          int v275 = *v273++;
          *v14++ = v275;
          int v276 = *v272++;
          *v13++ = v276;
          --v274;
        }
        while (v274);
LABEL_121:
        uint64_t v277 = a13;
        *(float32x4_t *)(a13 + 32) = v330;
        if (v167 != 3)
        {
          if (v167 != 2)
          {
            float32x4_t v278 = 0uLL;
            float32x4_t v279 = 0uLL;
            int v280 = a5;
            if (v167 == 1)
            {
              float32x4_t v278 = v345;
              float32x4_t v279 = v342;
              if (!a5) {
                goto LABEL_142;
              }
LABEL_138:
              *(float32x4_t *)uint64_t v277 = v278;
              *(float32x4_t *)(v277 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v279;
              uint64_t result = 2;
              *(float32x2_t *)(v277 + 64) = v166;
              return result;
            }
LABEL_137:
            if (!v280) {
              goto LABEL_142;
            }
            goto LABEL_138;
          }
          float32x4_t v294 = vsubq_f32(v348, v335);
          float32x4_t v295 = vsubq_f32(vsubq_f32(v349, v335), v294);
          float32x4_t v296 = vmulq_f32(v295, v295);
          v296.i64[0] = vpaddq_f32(v296, v296).u64[0];
          float32x2_t v297 = vpadd_f32(*(float32x2_t *)v296.f32, *(float32x2_t *)v296.f32);
          float32x2_t v298 = vrecpe_f32(v297);
          int v299 = 4;
          do
          {
            float32x2_t v298 = vmul_f32(v298, vrecps_f32(v297, v298));
            --v299;
          }
          while (v299);
          float32x4_t v300 = vnegq_f32(v294);
          v300.i32[3] = 0;
          float32x4_t v301 = vmulq_f32(v300, v295);
          v301.i64[0] = vpaddq_f32(v301, v301).u64[0];
          v300.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v297), (int8x8_t)v298, 0), vpadd_f32(*(float32x2_t *)v301.f32, *(float32x2_t *)v301.f32)).u32[0];
          float32x4_t v278 = vmlaq_n_f32(v345, vsubq_f32(v346, v345), v300.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          float32x4_t v279 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v300.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
          if (a5) {
            goto LABEL_138;
          }
LABEL_142:
          int8x16_t v302 = (int8x16_t)vmlsq_lane_f32(v278, v162, v323, 0);
          v302.i64[1] = vextq_s8(v302, v302, 8uLL).u32[0];
          int8x16_t v303 = (int8x16_t)vmlaq_n_f32(v279, v162, v324);
          v303.i64[1] = vextq_s8(v303, v303, 8uLL).u32[0];
          *(int8x16_t *)uint64_t v277 = v302;
          *(int8x16_t *)(v277 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v303;
          *(float32x2_t *)(v277 + 64) = vsub_f32(v166, v271);
          return 2;
        }
        float32x2_t v336 = 0;
        float32x2_t v337 = 0;
        physx::Gu::barycentricCoordinates(&v335, &v348, &v349, (float32x4_t *)v350, &v337, &v336);
        float32x4_t v162 = v330;
        float32x2_t v166 = v332;
        float32x2_t v271 = v327;
        float32x4_t v289 = vmulq_n_f32(vsubq_f32(v346, v345), v337.f32[0]);
        v289.i32[3] = 0;
        float32x4_t v290 = vmulq_n_f32(vsubq_f32(v347, v345), v336.f32[0]);
        v290.i32[3] = 0;
        float32x4_t v291 = vaddq_f32(v289, v290);
        float32x4_t v292 = vmulq_n_f32(vsubq_f32(v343, v342), v337.f32[0]);
        v292.i32[3] = 0;
        float32x4_t v278 = vaddq_f32(v345, v291);
        float32x4_t v293 = vmulq_n_f32(vsubq_f32(v344, v342), v336.f32[0]);
        v293.i32[3] = 0;
        float32x4_t v279 = vaddq_f32(v342, vaddq_f32(v292, v293));
      }
      else
      {
        uint64_t v277 = a13;
        *(float32x4_t *)(a13 + 32) = v330;
        float32x4_t v278 = 0uLL;
        float32x4_t v279 = 0uLL;
      }
      int v280 = a5;
      goto LABEL_137;
    }
    *(&v345 + v334) = v329;
    *(&v342 + v167) = v163;
    unsigned int v334 = v167 + 1;
    *(&v348 + v167) = v50;
    if (v167 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v348, &v345, &v342, &v340, &v338, (int *)&v334);
      float32x2_t v166 = v332;
LABEL_66:
      float32x4_t v69 = v328;
      goto LABEL_101;
    }
    if (v167 == 2)
    {
      float32x4_t v50 = v348;
      float32x4_t v176 = vsubq_f32(v349, v348);
      float32x4_t v177 = vsubq_f32((float32x4_t)v350[0], v348);
      int8x8_t v179 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 4uLL), *(float32x2_t *)v177.f32);
      *(int8x8_t *)v178.f32 = vext_s8(v179, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL), *(float32x2_t *)v177.f32), *(float32x2_t *)v176.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL)), 4uLL);
      v179.i32[1] = 0;
      unsigned int v334 = 3;
      float32x2_t v180 = vpadd_f32(vmul_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32), vmul_f32((float32x2_t)v179.u32[0], (float32x2_t)v179.u32[0]));
      float32x2_t v181 = vpadd_f32(v180, v180);
      if (v181.f32[0] <= 0.00000011921)
      {
        unsigned int v334 = 2;
        float32x4_t v218 = vmulq_f32(v176, v176);
        v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
        float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v219), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
        {
          float32x4_t v220 = vnegq_f32(v348);
          v220.i32[3] = 0;
          float32x4_t v221 = vmulq_f32(v220, v176);
          v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
          float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
          float32x2_t v223 = vrecpe_f32(v219);
          int v224 = 4;
          float32x4_t v69 = v328;
          do
          {
            float32x2_t v223 = vmul_f32(v223, vrecps_f32(v219, v223));
            --v224;
          }
          while (v224);
          float32x4_t v50 = vmlaq_n_f32(v348, v176, vmax_f32(vmin_f32(vmul_f32(v222, v223), _D9), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v334 = 1;
        goto LABEL_66;
      }
      if (v181.f32[0] == 0.0)
      {
        float32x4_t v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v178.u32[2] = v179;
      float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
      float32x2_t v183 = (float32x2_t)vextq_s8(v350[0], v350[0], 8uLL).u64[0];
      float32x2_t v184 = (float32x2_t)vextq_s8(v350[0], v350[0], 4uLL).u64[0];
      float32x2_t v185 = (float32x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 4uLL).u64[0];
      int8x8_t v186 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v349.f32, v184), v185, *(float32x2_t *)v350[0].i8);
      *(int8x8_t *)v187.f32 = vext_s8(v186, (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v350[0].i8), *(float32x2_t *)v349.f32, v183), 4uLL);
      v187.i64[1] = v186.u32[0];
      float32x2_t v188 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
      float32x2_t v189 = (float32x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 4uLL).u64[0];
      int8x8_t v190 = (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v350[0].i8), v184, *(float32x2_t *)v348.f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v183), *(float32x2_t *)v350[0].i8, v188), 4uLL);
      v191.i64[1] = v190.u32[0];
      int8x8_t v192 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v348.f32, v185), v189, *(float32x2_t *)v349.f32);
      *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(v188, *(float32x2_t *)v349.f32), *(float32x2_t *)v348.f32, v182), 4uLL);
      v193.i64[1] = v192.u32[0];
      float32x4_t v194 = vmulq_f32(v187, v178);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
      float32x4_t v196 = vmulq_f32(v191, v178);
      v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
      float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
      float32x4_t v198 = vmulq_f32(v193, v178);
      v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
      float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v197), (int8x8_t)vcgez_f32(v195)), (int8x8_t)vcgez_f32(v199)), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
      {
        float32x4_t v200 = vnegq_f32(v348);
        v200.i32[3] = 0;
        float32x4_t v201 = vnegq_f32(v349);
        v201.i32[3] = 0;
        float32x4_t v202 = vmulq_f32(v200, v176);
        v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
        float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
        float32x4_t v204 = vmulq_f32(v176, v201);
        v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
        float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v203), (int8x8_t)vclez_f32(v205)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
        {
          float32x2_t v230 = vsub_f32(v203, v205);
          float32x2_t v231 = vrecpe_f32(v230);
          int v232 = 4;
          do
          {
            float32x2_t v231 = vmul_f32(v231, vrecps_f32(v230, v231));
            --v232;
          }
          while (v232);
          uint64_t v217 = 0;
          float32x4_t v50 = vmlaq_n_f32(v348, v176, vmul_f32(v203, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          unsigned int v233 = 2;
          uint64_t v216 = 1;
        }
        else
        {
          float32x4_t v206 = vnegq_f32((float32x4_t)v350[0]);
          v206.i32[3] = 0;
          float32x4_t v207 = vmulq_f32(v201, v177);
          v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
          float32x2_t v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
          float32x4_t v209 = vmulq_f32(v176, v206);
          v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
          float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
          float32x4_t v211 = vmulq_f32(v177, v206);
          v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
          float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v208, v205), (int8x8_t)vcge_f32(v210, v212)), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v348.f32).u32[0] != -1)
          {
            float32x4_t v213 = vmulq_f32(v200, v177);
            v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
            float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v214), (int8x8_t)vclez_f32(v212)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
            {
              float32x2_t v239 = vsub_f32(v214, v212);
              float32x2_t v240 = vrecpe_f32(v239);
              int v241 = 4;
              float32x4_t v69 = v328;
              do
              {
                float32x2_t v240 = vmul_f32(v240, vrecps_f32(v239, v240));
                --v241;
              }
              while (v241);
              uint64_t v217 = 0;
              float32x4_t v50 = vmlaq_n_f32(v348, v177, vmul_f32(v214, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v239), (float32x2_t)0x3400000034000000), (int8x8_t)v240, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              uint64_t v216 = 2;
              unsigned int v233 = 2;
            }
            else
            {
              float32x4_t v69 = v328;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v214), (int8x8_t)vclez_f32(v203)), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
              {
                uint64_t v217 = 0;
                uint64_t v216 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v205, v208), (int8x8_t)vcgez_f32(v205)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                __int32 v215 = v50.i32[0];
                float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v322), 0), (int8x16_t)v349, v350[0]);
                uint64_t v216 = 1;
                if (v215 == -1) {
                  uint64_t v217 = 1;
                }
                else {
                  uint64_t v217 = 2;
                }
              }
              unsigned int v233 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v234 = vsub_f32(v208, v205);
          float32x2_t v235 = vadd_f32(v234, vsub_f32(v210, v212));
          float32x2_t v236 = vrecpe_f32(v235);
          int v237 = 4;
          do
          {
            float32x2_t v236 = vmul_f32(v236, vrecps_f32(v235, v236));
            --v237;
          }
          while (v237);
          int8x16_t v238 = (int8x16_t)vmlaq_n_f32(v349, vsubq_f32((float32x4_t)v350[0], v349), vmul_f32(v234, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v235), (float32x2_t)0x3400000034000000), (int8x8_t)v236, 0)).f32[0]);
          v238.i64[1] = vextq_s8(v238, v238, 8uLL).u32[0];
          uint64_t v216 = 2;
          float32x4_t v50 = (float32x4_t)v238;
          uint64_t v217 = 1;
          unsigned int v233 = 2;
        }
        float32x4_t v69 = v328;
LABEL_100:
        float32x4_t v242 = *(&v348 + v217);
        float32x4_t v243 = *(&v348 + v216);
        float32x4_t v244 = *(&v345 + v217);
        float32x4_t v245 = *(&v345 + v216);
        float32x4_t v246 = *(&v342 + v217);
        float32x4_t v247 = *(&v342 + v216);
        int v248 = *(&v340 + v217);
        int v249 = *(&v340 + v216);
        int v250 = *(&v338 + v217);
        int v251 = *(&v338 + v216);
        float32x4_t v348 = v242;
        float32x4_t v349 = v243;
        float32x4_t v345 = v244;
        float32x4_t v346 = v245;
        float32x4_t v342 = v246;
        float32x4_t v343 = v247;
        int v340 = v248;
        int v341 = v249;
        int v338 = v250;
        int v339 = v251;
        unsigned int v334 = v233;
        goto LABEL_101;
      }
      int8x16_t v225 = (int8x16_t)vmulq_f32(v348, v178);
      float32x2_t v226 = (float32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
      float32x2_t v227 = vrecpe_f32(v181);
      int v228 = 4;
      float32x4_t v69 = v328;
      do
      {
        float32x2_t v227 = vmul_f32(v227, vrecps_f32(v181, v227));
        --v228;
      }
      while (v228);
      float32x2_t v229 = vpadd_f32(*(float32x2_t *)v225.i8, v226);
      float32x4_t v50 = vmulq_n_f32(v178, vmul_f32(v227, vpadd_f32(v229, v229)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      float32x4_t v69 = v328;
      if (v167 == 1)
      {
        float32x4_t v50 = v348;
        float32x4_t v168 = vsubq_f32(v349, v348);
        float32x4_t v169 = vmulq_f32(v168, v168);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        float32x2_t v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v170), 0), *(int8x8_t *)v348.f32).u32[0] == -1)
        {
          unsigned int v334 = 1;
          goto LABEL_101;
        }
        float32x4_t v171 = vnegq_f32(v348);
        v171.i32[3] = 0;
        float32x4_t v172 = vmulq_f32(v171, v168);
        v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
        float32x2_t v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
        float32x2_t v174 = vrecpe_f32(v170);
        int v175 = 4;
        do
        {
          float32x2_t v174 = vmul_f32(v174, vrecps_f32(v170, v174));
          --v175;
        }
        while (v175);
        float32x4_t v50 = vmlaq_n_f32(v348, v168, vmax_f32(vmin_f32(vmul_f32(v173, v174), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v335 = v50;
    float32x4_t v252 = vmulq_f32(v50, v50);
    v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
    float32x2_t v253 = vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32);
    float32x2_t v254 = vrsqrte_f32(v253);
    int v255 = 4;
    do
    {
      float32x2_t v254 = vmul_f32(v254, vrsqrts_f32(vmul_f32(v254, v254), v253));
      --v255;
    }
    while (v255);
    float32x2_t v67 = vmul_f32(v253, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v253), 0), (int8x8_t)_D9, (int8x8_t)v254));
    float32x2_t v256 = vrecpe_f32(v67);
    int v257 = 4;
    do
    {
      float32x2_t v256 = vmul_f32(v256, vrecps_f32(v67, v256));
      --v257;
    }
    while (v257);
    float32x4_t v258 = vmulq_n_f32(v50, v256.f32[0]);
    v258.i32[3] = 0;
    float32x4_t v330 = v258;
    *(int32x2_t *)v258.f32 = vcgt_f32(v166, v67);
    int32x4_t v153 = vdupq_lane_s32(*(int32x2_t *)v258.f32, 0);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v67, v25), *(int8x8_t *)v258.f32), 0);
    float32x2_t v152 = v166;
  }
  int8x8_t v259 = (int8x8_t)vmovn_s32(vceqzq_s32(v153));
  uint64_t v260 = v334;
  if (vuzp1_s8(v259, v259).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v334;
      if (v260)
      {
        float v261 = &v338;
        int8x16_t v262 = &v340;
        do
        {
          int v263 = *v262++;
          *v14++ = v263;
          int v264 = *v261++;
          *v13++ = v264;
          --v260;
        }
        while (v260);
      }
    }
    return 5;
  }
  float32x2_t v281 = v327;
  if (v14)
  {
    uint64_t v282 = v334 - 1;
    *a8 = v334 - 1;
    if (v260 != 1)
    {
      uint64_t v283 = &v338;
      float32x4_t v284 = &v340;
      do
      {
        int v285 = *v284++;
        *v14++ = v285;
        int v286 = *v283++;
        *v13++ = v286;
        --v282;
      }
      while (v282);
      goto LABEL_130;
    }
LABEL_133:
    float32x4_t v287 = v345;
    float32x4_t v288 = v342;
  }
  else
  {
LABEL_130:
    float32x4_t v335 = v69;
    if (v260 == 3)
    {
      float32x2_t v336 = 0;
      float32x2_t v337 = 0;
      float32x4_t v333 = v69;
      physx::Gu::barycentricCoordinates(&v335, &v348, &v349, (float32x4_t *)v350, &v337, &v336);
      float32x2_t v281 = v327;
      float32x4_t v304 = vmulq_n_f32(vsubq_f32(v346, v345), v337.f32[0]);
      v304.i32[3] = 0;
      float32x4_t v305 = vmulq_n_f32(vsubq_f32(v347, v345), v336.f32[0]);
      v305.i32[3] = 0;
      float32x4_t v306 = vaddq_f32(v304, v305);
      float32x4_t v307 = vmulq_n_f32(vsubq_f32(v343, v342), v337.f32[0]);
      v307.i32[3] = 0;
      float32x4_t v287 = vaddq_f32(v345, v306);
      float32x4_t v308 = vmulq_n_f32(vsubq_f32(v344, v342), v336.f32[0]);
      float32x4_t v69 = v333;
      v308.i32[3] = 0;
      float32x4_t v288 = vaddq_f32(v342, vaddq_f32(v307, v308));
    }
    else if (v260 == 2)
    {
      float32x4_t v309 = vsubq_f32(v348, v69);
      float32x4_t v310 = vsubq_f32(vsubq_f32(v349, v69), v309);
      float32x4_t v311 = vmulq_f32(v310, v310);
      v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
      float32x2_t v312 = vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32);
      float32x2_t v313 = vrecpe_f32(v312);
      int v314 = 4;
      do
      {
        float32x2_t v313 = vmul_f32(v313, vrecps_f32(v312, v313));
        --v314;
      }
      while (v314);
      float32x4_t v315 = vnegq_f32(v309);
      v315.i32[3] = 0;
      float32x4_t v316 = vmulq_f32(v315, v310);
      v316.i64[0] = vpaddq_f32(v316, v316).u64[0];
      v315.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v312), (int8x8_t)v313, 0), vpadd_f32(*(float32x2_t *)v316.f32, *(float32x2_t *)v316.f32)).u32[0];
      float32x4_t v287 = vmlaq_n_f32(v345, vsubq_f32(v346, v345), v315.f32[0]);
      v287.i64[1] = vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u32[0];
      float32x4_t v288 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v315.f32[0]);
      v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v287 = 0uLL;
      float32x4_t v288 = 0uLL;
      if (v260 == 1) {
        goto LABEL_133;
      }
    }
  }
  float32x2_t v317 = vrecpe_f32(v152);
  int v318 = 4;
  do
  {
    float32x2_t v317 = vmul_f32(v317, vrecps_f32(v152, v317));
    --v318;
  }
  while (v318);
  float32x4_t v319 = vmulq_n_f32(v69, v317.f32[0]);
  v319.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v319;
  *(float32x4_t *)(a13 + 48) = v330;
  if (a5)
  {
    *(float32x4_t *)a13 = v287;
    *(float32x4_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v288;
    *(float32x2_t *)(a13 + 64) = v152;
  }
  else
  {
    int8x16_t v320 = (int8x16_t)vmlsq_lane_f32(v287, v319, v323, 0);
    v320.i64[1] = vextq_s8(v320, v320, 8uLL).u32[0];
    int8x16_t v321 = (int8x16_t)vmlaq_n_f32(v288, v319, v324);
    v321.i64[1] = vextq_s8(v321, v321, 8uLL).u32[0];
    *(int8x16_t *)a13 = v320;
    *(int8x16_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v321;
    *(float32x2_t *)(a13 + 64) = vsub_f32(v152, v281);
    if (vcge_f32(v281, v152).u32[0]) {
      return 2;
    }
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v241 = *MEMORY[0x263EF8340];
  int8x16_t v216 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v216, v216, 8uLL).u32[0];
  unsigned int v227 = 1;
  float32x4_t v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v19 = vrsqrte_f32(v18);
  int v20 = 4;
  do
  {
    float32x2_t v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  float32x2_t v27 = vrecpe_f32(v26);
  int v28 = 4;
  do
  {
    float32x2_t v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  float32x2_t v29 = (float32x2_t)vdup_lane_s32(a4, 0);
  v30.i64[0] = v216.i64[0];
  v30.i64[1] = v14;
  float32x4_t v217 = v30;
  float32x4_t v31 = vmulq_n_f32(v16, v27.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v226 = v31;
  float32x4_t v32 = vnegq_f32(v31);
  float32x4_t v33 = vmulq_n_f32(a1[2], v32.f32[0]);
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_lane_f32(a1[3], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  int v35 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v36 = vmulq_laneq_f32(a1[4], v32, 2);
  v36.i32[3] = 0;
  int8x16_t v37 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v33, v34), v36));
  float32x4_t v38 = *(float32x4_t *)(a1->i64[1] + 48);
  int8x16_t v39 = (int8x16_t)vnegq_f32(v38);
  v39.i32[3] = 0;
  float32x4_t v40 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v38, v39);
  float32x4_t v41 = vmulq_n_f32(*v35, v40.f32[0]);
  v41.i32[3] = 0;
  float32x4_t v42 = vmulq_lane_f32(v35[1], *(float32x2_t *)v40.f32, 1);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_laneq_f32(v35[2], v40, 2);
  v43.i32[3] = 0;
  float32x4_t v222 = vaddq_f32(v35[3], vaddq_f32(v43, vaddq_f32(v41, v42)));
  *(double *)v44.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v226);
  float32x4_t v45 = v44;
  float32x4_t v46 = vsubq_f32(v222, v44);
  float32x4_t v238 = v46;
  float32x4_t v239 = 0u;
  memset(v240, 0, sizeof(v240));
  float32x4_t v234 = v222;
  float32x4_t v235 = 0u;
  float32x4_t v236 = 0u;
  long long v237 = 0u;
  float32x4_t v47 = vnegq_f32(v46);
  v47.i32[3] = 0;
  float32x4_t v230 = v45;
  float32x4_t v231 = 0u;
  float32x4_t v232 = 0u;
  long long v233 = 0u;
  float32x4_t v48 = (const float *)(a1->i64[1] + 24);
  *(float32x2_t *)v45.f32 = vld1_dup_f32(v48);
  float32x4_t v49 = (const float *)(*(void *)(a2 + 8) + 24);
  float32x2_t v50 = vld1_dup_f32(v49);
  *(float32x2_t *)v45.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v45.f32, v50), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v51 = vadd_f32(v29, *(float32x2_t *)v45.f32);
  float32x2_t v52 = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  float32x4_t v53 = vmulq_f32(v47, v47);
  float32x4_t v54 = vpaddq_f32(v53, v53);
  float32x2_t v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
  float32x2_t v210 = v52;
  *(int32x2_t *)v54.f32 = vcgt_f32(v55, v52);
  int32x4_t v56 = vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
  float32x2_t v57 = vmul_f32(v51, v51);
  v54.i32[0] = -1;
  int32x4_t v209 = (int32x4_t)v54;
  float32x4_t v58 = v46;
  v59.i64[0] = -1;
  v59.i64[1] = -1;
  int8x16_t v213 = (int8x16_t)v47;
  float32x4_t v60 = v47;
  float32x2_t v61 = 0;
  while (1)
  {
    int8x16_t v62 = (int8x16_t)v46;
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    *(int16x4_t *)v63.i8 = vmovn_s32(vceqq_s32(v56, v63));
    unsigned __int32 v64 = vuzp1_s8(*(int8x8_t *)v63.i8, *(int8x8_t *)v63.i8).u32[0];
    if (v64 != -1) {
      break;
    }
    float32x4_t v65 = vmulq_f32(v60, v60);
    v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
    float32x2_t v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
    float32x2_t v67 = vrsqrte_f32(v66);
    int v68 = 4;
    do
    {
      float32x2_t v67 = vmul_f32(v67, vrsqrts_f32(vmul_f32(v67, v67), v66));
      --v68;
    }
    while (v68);
    int8x16_t v218 = v62;
    float32x2_t v69 = vmul_f32(v66, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v66), 0), (int8x8_t)_D8, (int8x8_t)v67));
    float32x2_t v70 = vrecpe_f32(v69);
    int v71 = 4;
    do
    {
      float32x2_t v70 = vmul_f32(v70, vrecps_f32(v69, v70));
      --v71;
    }
    while (v71);
    float32x4_t v215 = v60;
    float32x4_t v72 = vmulq_n_f32(v60, v70.f32[0]);
    float32x4_t v73 = vmulq_n_f32(a1[2], v72.f32[0]);
    float32x4_t v74 = vmulq_lane_f32(a1[3], *(float32x2_t *)v72.f32, 1);
    float32x4_t v75 = vmulq_laneq_f32(a1[4], v72, 2);
    v72.i32[3] = 0;
    float32x4_t v219 = v72;
    float32x4_t v76 = vnegq_f32(v72);
    v76.i32[3] = 0;
    float32x4_t v225 = v76;
    v73.i32[3] = 0;
    float32x2_t v77 = (float32x4_t *)a1[1].i64[0];
    v74.i32[3] = 0;
    v75.i32[3] = 0;
    int8x16_t v78 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v73, v74), v75));
    float32x4_t v79 = *(float32x4_t *)(a1->i64[1] + 48);
    int8x16_t v80 = (int8x16_t)vnegq_f32(v79);
    v80.i32[3] = 0;
    float32x4_t v81 = (float32x4_t)vbslq_s8(v78, (int8x16_t)v79, v80);
    float32x4_t v82 = vmulq_n_f32(*v77, v81.f32[0]);
    v82.i32[3] = 0;
    float32x4_t v83 = vmulq_lane_f32(v77[1], *(float32x2_t *)v81.f32, 1);
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_laneq_f32(v77[2], v81, 2);
    v84.i32[3] = 0;
    float32x4_t v223 = vaddq_f32(v77[3], vaddq_f32(v84, vaddq_f32(v82, v83)));
    *(double *)v85.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
    float32x4_t v86 = v223;
    float32x4_t v87 = vaddq_f32(v217, v85);
    float32x4_t v46 = vsubq_f32(v223, v87);
    float32x4_t v88 = vnegq_f32(v46);
    v88.i32[3] = 0;
    float32x4_t v89 = vmulq_f32(v219, v88);
    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
    float32x2_t v90 = vsub_f32(vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), v51);
    if (v90.f32[0] > 0.0)
    {
      float32x4_t v91 = vmulq_f32(v219, *a7);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
      if (v92.f32[0] >= 0.0) {
        return v64 != -1;
      }
      float32x2_t v93 = vrecpe_f32(v92);
      int v94 = 4;
      do
      {
        float32x2_t v93 = vmul_f32(v93, vrecps_f32(v92, v93));
        --v94;
      }
      while (v94);
      float32x2_t v95 = vsub_f32(v61, vmul_f32(v90, v93));
      if (vcgt_f32(v95, v61).u8[0])
      {
        if (v95.f32[0] > 1.0) {
          return v64 != -1;
        }
        float32x4_t v96 = vmlaq_n_f32(*a6, *a7, v95.f32[0]);
        v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
        float32x4_t v220 = v96;
        float32x4_t v97 = vsubq_f32(v96, v217);
        float32x2_t v214 = v95;
        float32x4_t v230 = vaddq_f32(v230, v97);
        float32x4_t v231 = vaddq_f32(v231, v97);
        float32x4_t v232 = vaddq_f32(v232, v97);
        float32x4_t v238 = vsubq_f32(v234, v230);
        float32x4_t v239 = vsubq_f32(v235, v231);
        v240[0] = vsubq_f32(v236, v232);
        *(double *)v98.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v225);
        float32x4_t v86 = v223;
        float32x4_t v87 = vaddq_f32(v220, v98);
        float32x4_t v46 = vsubq_f32(v223, v87);
        float32x2_t v55 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v213 = (int8x16_t)v215;
        float32x4_t v217 = v220;
        float32x2_t v61 = v214;
      }
      else
      {
        float32x2_t v61 = v95;
      }
    }
    uint64_t v99 = v227;
    *(&v234 + v227) = v86;
    *(&v230 + v99) = v87;
    unsigned int v227 = v99 + 1;
    *(&v238 + v99) = v46;
    if (v99 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v238, &v234, &v230, (int *)&v227);
LABEL_27:
      float32x4_t v58 = (float32x4_t)v218;
      goto LABEL_61;
    }
    if (v99 != 2)
    {
      float32x4_t v58 = (float32x4_t)v218;
      if (v99 != 1) {
        goto LABEL_61;
      }
      float32x4_t v46 = v238;
      float32x4_t v100 = vsubq_f32(v239, v238);
      float32x4_t v101 = vmulq_f32(v100, v100);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      float32x2_t v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v102), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
      {
        float32x4_t v103 = vnegq_f32(v238);
        v103.i32[3] = 0;
        float32x4_t v104 = vmulq_f32(v103, v100);
        v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
        float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
        float32x2_t v106 = vrecpe_f32(v102);
        int v107 = 4;
        do
        {
          float32x2_t v106 = vmul_f32(v106, vrecps_f32(v102, v106));
          --v107;
        }
        while (v107);
        float32x4_t v46 = vmlaq_n_f32(v238, v100, vmax_f32(vmin_f32(vmul_f32(v105, v106), _D8), 0).f32[0]);
LABEL_42:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v227 = 1;
      goto LABEL_61;
    }
    float32x4_t v46 = v238;
    float32x4_t v108 = vsubq_f32(v239, v238);
    float32x4_t v109 = vsubq_f32(v240[0], v238);
    int8x8_t v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v108.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 4uLL), *(float32x2_t *)v109.f32);
    *(int8x8_t *)v110.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), *(float32x2_t *)v109.f32), *(float32x2_t *)v108.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL)), 4uLL);
    v111.i32[1] = 0;
    unsigned int v227 = 3;
    float32x2_t v112 = vpadd_f32(vmul_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32), vmul_f32((float32x2_t)v111.u32[0], (float32x2_t)v111.u32[0]));
    float32x2_t v113 = vpadd_f32(v112, v112);
    if (v113.f32[0] <= 0.00000011921)
    {
      unsigned int v227 = 2;
      float32x4_t v150 = vmulq_f32(v108, v108);
      v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
      float32x2_t v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
      float32x4_t v58 = (float32x4_t)v218;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v151), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
      {
        float32x4_t v152 = vnegq_f32(v238);
        v152.i32[3] = 0;
        float32x4_t v153 = vmulq_f32(v152, v108);
        v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
        float32x2_t v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
        float32x2_t v155 = vrecpe_f32(v151);
        int v156 = 4;
        do
        {
          float32x2_t v155 = vmul_f32(v155, vrecps_f32(v151, v155));
          --v156;
        }
        while (v156);
        float32x4_t v46 = vmlaq_n_f32(v238, v108, vmax_f32(vmin_f32(vmul_f32(v154, v155), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v113.f32[0] == 0.0)
    {
      float32x4_t v46 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v110.u32[2] = v111;
    float32x2_t v114 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
    float32x2_t v115 = (float32x2_t)vextq_s8((int8x16_t)v240[0], (int8x16_t)v240[0], 8uLL).u64[0];
    float32x2_t v116 = (float32x2_t)vextq_s8((int8x16_t)v240[0], (int8x16_t)v240[0], 4uLL).u64[0];
    float32x2_t v117 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 4uLL).u64[0];
    int8x8_t v118 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v239.f32, v116), v117, *(float32x2_t *)v240[0].f32);
    *(int8x8_t *)v119.f32 = vext_s8(v118, (int8x8_t)vmls_f32(vmul_f32(v114, *(float32x2_t *)v240[0].f32), *(float32x2_t *)v239.f32, v115), 4uLL);
    v119.i64[1] = v118.u32[0];
    float32x2_t v120 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    float32x2_t v121 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 4uLL).u64[0];
    int8x8_t v122 = (int8x8_t)vmls_f32(vmul_f32(v121, *(float32x2_t *)v240[0].f32), v116, *(float32x2_t *)v238.f32);
    *(int8x8_t *)v123.f32 = vext_s8(v122, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v238.f32, v115), *(float32x2_t *)v240[0].f32, v120), 4uLL);
    v123.i64[1] = v122.u32[0];
    int8x8_t v124 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v238.f32, v117), v121, *(float32x2_t *)v239.f32);
    *(int8x8_t *)v125.f32 = vext_s8(v124, (int8x8_t)vmls_f32(vmul_f32(v120, *(float32x2_t *)v239.f32), *(float32x2_t *)v238.f32, v114), 4uLL);
    v125.i64[1] = v124.u32[0];
    float32x4_t v126 = vmulq_f32(v119, v110);
    v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
    float32x2_t v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
    float32x4_t v128 = vmulq_f32(v123, v110);
    v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
    float32x2_t v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
    float32x4_t v130 = vmulq_f32(v125, v110);
    v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
    float32x2_t v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v129), (int8x8_t)vcgez_f32(v127)), (int8x8_t)vcgez_f32(v131)), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
    {
      float32x4_t v132 = vnegq_f32(v238);
      v132.i32[3] = 0;
      float32x4_t v133 = vnegq_f32(v239);
      v133.i32[3] = 0;
      float32x4_t v134 = vmulq_f32(v132, v108);
      v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
      float32x2_t v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
      float32x4_t v136 = vmulq_f32(v108, v133);
      v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
      float32x2_t v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v135), (int8x8_t)vclez_f32(v137)), (int8x8_t)vclez_f32(v131)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
      {
        float32x2_t v162 = vsub_f32(v135, v137);
        float32x2_t v163 = vrecpe_f32(v162);
        int v164 = 4;
        do
        {
          float32x2_t v163 = vmul_f32(v163, vrecps_f32(v162, v163));
          --v164;
        }
        while (v164);
        uint64_t v149 = 0;
        float32x4_t v46 = vmlaq_n_f32(v238, v108, vmul_f32(v135, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        unsigned int v165 = 2;
        uint64_t v148 = 1;
      }
      else
      {
        float32x4_t v138 = vnegq_f32(v240[0]);
        v138.i32[3] = 0;
        float32x4_t v139 = vmulq_f32(v133, v109);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        float32x2_t v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
        float32x4_t v141 = vmulq_f32(v108, v138);
        v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
        float32x2_t v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
        float32x4_t v143 = vmulq_f32(v109, v138);
        v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
        float32x2_t v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v140, v137), (int8x8_t)vcge_f32(v142, v144)), (int8x8_t)vclez_f32(v127)), 0), *(int8x8_t *)v238.f32).u32[0] != -1)
        {
          float32x4_t v145 = vmulq_f32(v132, v109);
          v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
          float32x2_t v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v146), (int8x8_t)vclez_f32(v144)), (int8x8_t)vclez_f32(v129)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
          {
            float32x2_t v171 = vsub_f32(v146, v144);
            float32x2_t v172 = vrecpe_f32(v171);
            int v173 = 4;
            float32x4_t v58 = (float32x4_t)v218;
            do
            {
              float32x2_t v172 = vmul_f32(v172, vrecps_f32(v171, v172));
              --v173;
            }
            while (v173);
            uint64_t v149 = 0;
            float32x4_t v46 = vmlaq_n_f32(v238, v109, vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v171), (float32x2_t)0x3400000034000000), (int8x8_t)v172, 0)).f32[0]);
            v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
            uint64_t v148 = 2;
          }
          else
          {
            float32x4_t v58 = (float32x4_t)v218;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v146), (int8x8_t)vclez_f32(v135)), 0), *(int8x8_t *)v238.f32).u32[0] == -1)
            {
              uint64_t v149 = 0;
              uint64_t v148 = 1;
            }
            else
            {
              *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v137, v140), (int8x8_t)vcgez_f32(v137)), 0);
              *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
              __int32 v147 = v46.i32[0];
              float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v209), 0), (int8x16_t)v239, (int8x16_t)v240[0]);
              uint64_t v148 = 1;
              if (v147 == -1) {
                uint64_t v149 = 1;
              }
              else {
                uint64_t v149 = 2;
              }
            }
          }
          unsigned int v165 = v148;
          goto LABEL_60;
        }
        float32x2_t v166 = vsub_f32(v140, v137);
        float32x2_t v167 = vadd_f32(v166, vsub_f32(v142, v144));
        float32x2_t v168 = vrecpe_f32(v167);
        int v169 = 4;
        do
        {
          float32x2_t v168 = vmul_f32(v168, vrecps_f32(v167, v168));
          --v169;
        }
        while (v169);
        int8x16_t v170 = (int8x16_t)vmlaq_n_f32(v239, vsubq_f32(v240[0], v239), vmul_f32(v166, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v167), (float32x2_t)0x3400000034000000), (int8x8_t)v168, 0)).f32[0]);
        v170.i64[1] = vextq_s8(v170, v170, 8uLL).u32[0];
        unsigned int v165 = 2;
        uint64_t v148 = 2;
        uint64_t v149 = 1;
        float32x4_t v46 = (float32x4_t)v170;
      }
      float32x4_t v58 = (float32x4_t)v218;
LABEL_60:
      float32x4_t v174 = *(&v238 + v148);
      float32x4_t v175 = *(&v234 + v149);
      float32x4_t v176 = *(&v234 + v148);
      float32x4_t v177 = *(&v230 + v149);
      float32x4_t v178 = *(&v230 + v148);
      float32x4_t v238 = *(&v238 + v149);
      float32x4_t v239 = v174;
      float32x4_t v234 = v175;
      float32x4_t v235 = v176;
      float32x4_t v230 = v177;
      float32x4_t v231 = v178;
      unsigned int v227 = v165;
      goto LABEL_61;
    }
    int8x16_t v157 = (int8x16_t)vmulq_f32(v238, v110);
    float32x2_t v158 = (float32x2_t)vextq_s8(v157, v157, 8uLL).u64[0];
    float32x2_t v159 = vrecpe_f32(v113);
    int v160 = 4;
    float32x4_t v58 = (float32x4_t)v218;
    do
    {
      float32x2_t v159 = vmul_f32(v159, vrecps_f32(v113, v159));
      --v160;
    }
    while (v160);
    float32x2_t v161 = vpadd_f32(*(float32x2_t *)v157.i8, v158);
    float32x4_t v46 = vmulq_n_f32(v110, vmul_f32(v159, vpadd_f32(v161, v161)).f32[0]);
    v46.i32[3] = 0;
LABEL_61:
    float32x4_t v60 = vnegq_f32(v46);
    v60.i32[3] = 0;
    float32x4_t v179 = vmulq_f32(v46, v46);
    v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
    float32x2_t v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
    int8x8_t v181 = (int8x8_t)vcgt_f32(v55, v180);
    int8x16_t v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v181, (int8x8_t)0x100000001), 0);
    int32x4_t v56 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v180, v57), v181), 0);
    float32x2_t v55 = v180;
  }
  int8x16_t v182 = (int8x16_t)v58;
  float32x4_t v183 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v55, v210), 0), v59), 0x1FuLL)), (int8x16_t)v60, v213);
  float32x4_t v184 = vmulq_f32(v183, v183);
  v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
  float32x2_t v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
  float32x2_t v186 = vrsqrte_f32(v185);
  int v187 = 4;
  do
  {
    float32x2_t v186 = vmul_f32(v186, vrsqrts_f32(vmul_f32(v186, v186), v185));
    --v187;
  }
  while (v187);
  float32x2_t v188 = vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v185), 0), (int8x8_t)_D8, (int8x8_t)v186));
  float32x2_t v189 = vrecpe_f32(v188);
  int v190 = 4;
  do
  {
    float32x2_t v189 = vmul_f32(v189, vrecps_f32(v188, v189));
    --v190;
  }
  while (v190);
  int8x16_t v191 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  int8x16_t v192 = (int8x16_t)vmulq_n_f32(v183, v189.f32[0]);
  v192.i32[3] = 0;
  float32x4_t v193 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v188), 0), v192));
  v193.i32[3] = 0;
  *a9 = v193;
  *a8 = v61;
  float32x4_t v194 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v59, 0x1FuLL)), v62, v182);
  float32x4_t v225 = v194;
  if (v227 == 3)
  {
    float32x2_t v228 = 0;
    float32x2_t v229 = 0;
    float32x4_t v221 = v193;
    int8x16_t v224 = v191;
    physx::Gu::barycentricCoordinates(&v225, &v238, &v239, v240, &v229, &v228);
    float32x4_t v193 = v221;
    int8x16_t v191 = v224;
    v59.i32[1] = v234.i32[1];
    float32x4_t v197 = vmulq_n_f32(vsubq_f32(v235, v234), v229.f32[0]);
    v197.i32[3] = 0;
    float32x4_t v198 = vmulq_n_f32(vsubq_f32(v236, v234), v228.f32[0]);
    v198.i32[3] = 0;
    float32x4_t v195 = vaddq_f32(v234, vaddq_f32(v197, v198));
    float32x4_t v196 = a10;
  }
  else if (v227 == 2)
  {
    float32x4_t v199 = vsubq_f32(v238, v194);
    float32x4_t v200 = vsubq_f32(vsubq_f32(v239, v194), v199);
    float32x4_t v201 = vmulq_f32(v200, v200);
    v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
    float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
    float32x2_t v203 = vrecpe_f32(v202);
    int v204 = 4;
    float32x4_t v196 = a10;
    do
    {
      float32x2_t v203 = vmul_f32(v203, vrecps_f32(v202, v203));
      --v204;
    }
    while (v204);
    float32x4_t v205 = vnegq_f32(v199);
    v205.i32[3] = 0;
    float32x4_t v206 = vmulq_f32(v205, v200);
    v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
    float32x4_t v195 = vmlaq_n_f32(v234, vsubq_f32(v235, v234), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v202), (int8x8_t)v203, 0), vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32)).f32[0]);
    v59.i32[1] = 0;
    v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v195 = 0uLL;
    float32x4_t v196 = a10;
    if (v227 == 1) {
      float32x4_t v195 = v234;
    }
  }
  v59.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  int8x16_t v207 = (int8x16_t)vmlsq_lane_f32(v195, v193, *(float32x2_t *)v59.i8, 0);
  v207.i64[1] = vextq_s8(v207, v207, 8uLL).u32[0];
  int8x16_t *v196 = vbslq_s8(v191, v207, (int8x16_t)v195);
  return v64 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  float v13 = a7;
  uint64_t v14 = a6;
  uint64_t v355 = *MEMORY[0x263EF8340];
  float32x4_t v17 = (float32x4_t *)a1->i64[1];
  float32x2_t v18 = &v17[1].f32[1];
  float32x2_t v19 = vld1_dup_f32(v18);
  int v20 = *(float32x4_t **)(a2 + 8);
  float v21 = &v20[1].f32[1];
  float32x2_t v22 = vld1_dup_f32(v21);
  float32x2_t v23 = vmin_f32(v19, v22);
  float32x2_t v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v25 = vmul_f32(v23, v24);
  v23.i32[0] = v17[1].i32[0];
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -v17[2].i8[0];
  int32x2_t v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  float32x2_t v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  float32x2_t v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  float32x2_t v327 = v27;
  float v328 = v28.f32[0];
  float32x2_t v29 = vadd_f32(v27, v28);
  uint64_t v30 = *a4;
  float32x4_t v340 = 0uLL;
  unsigned int v339 = 0;
  uint64_t v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v331 = v29;
  if (!*a8)
  {
    float32x4_t v65 = vmulq_f32(*a3, *a3);
    v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
    float32x4_t v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v340 = v57;
    float32x4_t v66 = vmulq_f32(v57, v57);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    float32x2_t v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
    float32x2_t v68 = vrsqrte_f32(v67);
    int v69 = 4;
    do
    {
      float32x2_t v68 = vmul_f32(v68, vrsqrts_f32(vmul_f32(v68, v68), v67));
      --v69;
    }
    while (v69);
    float32x2_t v70 = vmul_f32(v67, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v67), 0), (int8x8_t)_D9, (int8x8_t)v68));
    float32x2_t v71 = vrecpe_f32(v70);
    int v72 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v70, v71);
      float32x2_t v71 = vmul_f32(v71, *(float32x2_t *)a12.f32);
      --v72;
    }
    while (v72);
    float32x4_t v73 = vmulq_n_f32(v57, v71.f32[0]);
    v73.i32[3] = 0;
    float32x4_t v334 = v73;
    float32x2_t v74 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v75.i64[0] = -1;
    v75.i64[1] = -1;
    float32x4_t v76 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v37 = 0;
  float32x4_t v38 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v39 = v17[3];
  uint64_t v40 = v20[10].i64[0];
  float32x4_t v41 = v20[3];
  a12 = v20[4];
  float32x4_t v42 = v20[5];
  int8x16_t v43 = (int8x16_t)vnegq_f32(v39);
  v43.i32[3] = 0;
  do
  {
    uint64_t v44 = a6[v37];
    *(&v344 + v37) = v44;
    unsigned int v45 = a7[v37];
    *(&v342 + v37) = v45;
    float32x4_t v46 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v44], (int8x16_t)v39, v43);
    float32x4_t v47 = vmulq_n_f32(*v38, v46.f32[0]);
    v47.i32[3] = 0;
    float32x4_t v48 = vmulq_lane_f32(v38[1], *(float32x2_t *)v46.f32, 1);
    v48.i32[3] = 0;
    float32x4_t v49 = vmulq_laneq_f32(v38[2], v46, 2);
    v49.i32[3] = 0;
    float32x4_t v50 = vaddq_f32(v49, vaddq_f32(v47, v48));
    float32x4_t v51 = *(float32x4_t *)(v40 + 12 * v45);
    float32x4_t v52 = vmulq_n_f32(v41, v51.f32[0]);
    v52.i32[3] = 0;
    float32x4_t v53 = vmulq_lane_f32(a12, *(float32x2_t *)v51.f32, 1);
    v53.i32[3] = 0;
    float32x4_t v54 = vmulq_laneq_f32(v42, v51, 2);
    v54.i32[3] = 0;
    float32x4_t v55 = vaddq_f32(v38[3], v50);
    float32x4_t v56 = vaddq_f32(v54, vaddq_f32(v52, v53));
    float32x4_t v57 = vsubq_f32(v55, v56);
    *(&v349 + v37) = v55;
    *(&v346 + v37) = v56;
    *(&v352 + v37++) = v57;
  }
  while (v31 != v37);
  unsigned int v339 = v31;
  switch(v37)
  {
    case 4:
      int v335 = v30;
      physx::Gu::closestPtPointTetrahedron(&v352, &v349, &v346, &v344, &v342, (int *)&v339);
      LODWORD(v3physx::Sq::AABBTree::release(this, 0) = v335;
      v29.i32[0] = v331.i32[0];
      goto LABEL_49;
    case 3:
      unsigned int v339 = 3;
      float32x4_t v57 = v352;
      a12 = vsubq_f32(v353, v352);
      float32x4_t v77 = vsubq_f32(v354[0], v352);
      int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v77.f32);
      *(int8x8_t *)v78.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v77.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL)), 4uLL);
      v79.i32[1] = 0;
      float32x2_t v80 = vpadd_f32(vmul_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vmul_f32((float32x2_t)v79.u32[0], (float32x2_t)v79.u32[0]));
      float32x2_t v81 = vpadd_f32(v80, v80);
      if (v81.f32[0] > 0.00000011921)
      {
        if (v81.f32[0] == 0.0)
        {
          float32x4_t v57 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v78.u32[2] = v79;
          float32x2_t v82 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u64[0];
          float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 8uLL).u64[0];
          float32x2_t v84 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 4uLL).u64[0];
          float32x2_t v85 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 4uLL).u64[0];
          int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v353.f32, v84), v85, *(float32x2_t *)v354[0].f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v354[0].f32), *(float32x2_t *)v353.f32, v83), 4uLL);
          v87.i64[1] = v86.u32[0];
          float32x2_t v88 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL).u64[0];
          float32x2_t v89 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 4uLL).u64[0];
          int8x8_t v90 = (int8x8_t)vmls_f32(vmul_f32(v89, *(float32x2_t *)v354[0].f32), v84, *(float32x2_t *)v352.f32);
          *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v83), *(float32x2_t *)v354[0].f32, v88), 4uLL);
          v91.i64[1] = v90.u32[0];
          int8x8_t v92 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v85), v89, *(float32x2_t *)v353.f32);
          *(int8x8_t *)v93.f32 = vext_s8(v92, (int8x8_t)vmls_f32(vmul_f32(v88, *(float32x2_t *)v353.f32), *(float32x2_t *)v352.f32, v82), 4uLL);
          v93.i64[1] = v92.u32[0];
          float32x4_t v94 = vmulq_f32(v87, v78);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          float32x4_t v96 = vmulq_f32(v91, v78);
          v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
          float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
          float32x4_t v98 = vmulq_f32(v93, v78);
          v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
          float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v97), (int8x8_t)vcgez_f32(v95)), (int8x8_t)vcgez_f32(v99)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
          {
            int8x16_t v125 = (int8x16_t)vmulq_f32(v352, v78);
            float32x2_t v126 = (float32x2_t)vextq_s8(v125, v125, 8uLL).u64[0];
            float32x2_t v127 = vrecpe_f32(v81);
            int v128 = 4;
            do
            {
              float32x2_t v127 = vmul_f32(v127, vrecps_f32(v81, v127));
              --v128;
            }
            while (v128);
            float32x2_t v129 = vpadd_f32(*(float32x2_t *)v125.i8, v126);
            float32x4_t v57 = vmulq_n_f32(v78, vmul_f32(v127, vpadd_f32(v129, v129)).f32[0]);
            v57.i32[3] = 0;
          }
          else
          {
            float32x4_t v100 = vnegq_f32(v352);
            v100.i32[3] = 0;
            float32x4_t v101 = vnegq_f32(v353);
            v101.i32[3] = 0;
            float32x4_t v102 = vmulq_f32(v100, a12);
            v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
            float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
            float32x4_t v104 = vmulq_f32(a12, v101);
            v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
            float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v103), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
            {
              float32x2_t v130 = vsub_f32(v103, v105);
              float32x2_t v131 = vrecpe_f32(v130);
              int v132 = 4;
              do
              {
                float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                --v132;
              }
              while (v132);
              uint64_t v117 = 0;
              float32x4_t v57 = vmlaq_n_f32(v352, a12, vmul_f32(v103, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
              v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
              unsigned int v133 = 2;
              uint64_t v116 = 1;
            }
            else
            {
              float32x4_t v106 = vnegq_f32(v354[0]);
              v106.i32[3] = 0;
              float32x4_t v107 = vmulq_f32(v101, v77);
              v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
              float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
              float32x4_t v109 = vmulq_f32(a12, v106);
              v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
              float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
              float32x4_t v111 = vmulq_f32(v77, v106);
              v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
              float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v108, v105), (int8x8_t)vcge_f32(v110, v112)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
              {
                float32x2_t v134 = vsub_f32(v108, v105);
                float32x2_t v135 = vadd_f32(v134, vsub_f32(v110, v112));
                float32x2_t v136 = vrecpe_f32(v135);
                int v137 = 4;
                do
                {
                  float32x2_t v136 = vmul_f32(v136, vrecps_f32(v135, v136));
                  --v137;
                }
                while (v137);
                int8x16_t v138 = (int8x16_t)vmlaq_n_f32(v353, vsubq_f32(v354[0], v353), vmul_f32(v134, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v135), (float32x2_t)0x3400000034000000), (int8x8_t)v136, 0)).f32[0]);
                v138.i64[1] = vextq_s8(v138, v138, 8uLL).u32[0];
                unsigned int v133 = 2;
                uint64_t v117 = 1;
                uint64_t v116 = 2;
                float32x4_t v57 = (float32x4_t)v138;
              }
              else
              {
                float32x4_t v113 = vmulq_f32(v100, v77);
                int32x4_t v114 = (int32x4_t)vpaddq_f32(v113, v113);
                *(float32x2_t *)v114.i8 = vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v114.i8), (int8x8_t)vclez_f32(v112)), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
                {
                  float32x2_t v139 = vsub_f32(*(float32x2_t *)v114.i8, v112);
                  float32x2_t v140 = vrecpe_f32(v139);
                  int v141 = 4;
                  do
                  {
                    float32x2_t v140 = vmul_f32(v140, vrecps_f32(v139, v140));
                    --v141;
                  }
                  while (v141);
                  uint64_t v117 = 0;
                  float32x4_t v57 = vmlaq_n_f32(v352, v77, vmul_f32(*(float32x2_t *)v114.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v139), (float32x2_t)0x3400000034000000), (int8x8_t)v140, 0)).f32[0]);
                  v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
                  uint64_t v116 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v114.i8), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
                {
                  uint64_t v117 = 0;
                  uint64_t v116 = 1;
                }
                else
                {
                  *(int32x2_t *)v114.i8 = vcge_f32(v105, v108);
                  *(int16x4_t *)v57.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v114.i8, (int8x8_t)vcgez_f32(v105)), 0);
                  *(int8x8_t *)v57.f32 = vuzp1_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v57.f32);
                  v114.i32[0] = -1;
                  __int32 v115 = v57.i32[0];
                  float32x4_t v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v57, v114), 0), (int8x16_t)v353, (int8x16_t)v354[0]);
                  uint64_t v116 = 1;
                  if (v115 == -1) {
                    uint64_t v117 = 1;
                  }
                  else {
                    uint64_t v117 = 2;
                  }
                }
                unsigned int v133 = v116;
              }
            }
            float32x4_t v142 = *(&v352 + v117);
            float32x4_t v143 = *(&v352 + v116);
            a12 = *(&v349 + v117);
            float32x4_t v144 = *(&v349 + v116);
            float32x4_t v145 = *(&v346 + v117);
            float32x4_t v146 = *(&v346 + v116);
            int v147 = *(&v344 + v117);
            int v148 = *(&v344 + v116);
            int v149 = *(&v342 + v117);
            int v150 = *(&v342 + v116);
            float32x4_t v352 = v142;
            float32x4_t v353 = v143;
            float32x4_t v349 = a12;
            float32x4_t v350 = v144;
            float32x4_t v346 = v145;
            float32x4_t v347 = v146;
            int v344 = v147;
            int v345 = v148;
            int v342 = v149;
            int v343 = v150;
            unsigned int v339 = v133;
          }
        }
        goto LABEL_49;
      }
      unsigned int v339 = 2;
      float32x4_t v118 = vmulq_f32(a12, a12);
      v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
      float32x2_t v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v119), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        float32x4_t v120 = vnegq_f32(v352);
        v120.i32[3] = 0;
        float32x4_t v121 = vmulq_f32(v120, a12);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        float32x2_t v123 = vrecpe_f32(v119);
        int v124 = 4;
        do
        {
          float32x2_t v123 = vmul_f32(v123, vrecps_f32(v119, v123));
          --v124;
        }
        while (v124);
        float32x4_t v57 = vmlaq_n_f32(v352, a12, vmax_f32(vmin_f32(vmul_f32(v122, v123), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v57 = v352;
      float32x4_t v58 = vsubq_f32(v353, v352);
      float32x4_t v59 = vmulq_f32(v58, v58);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v60), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        float32x4_t v61 = vnegq_f32(v352);
        v61.i32[3] = 0;
        float32x4_t v62 = vmulq_f32(v61, v58);
        a12 = vpaddq_f32(v62, v62);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        float32x2_t v63 = vrecpe_f32(v60);
        int v64 = 4;
        do
        {
          float32x2_t v63 = vmul_f32(v63, vrecps_f32(v60, v63));
          --v64;
        }
        while (v64);
        float32x4_t v57 = vmlaq_n_f32(v352, v58, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v63), _D9), 0).f32[0]);
LABEL_31:
        v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v339 = 1;
LABEL_49:
  float32x4_t v340 = v57;
  float32x4_t v151 = vmulq_f32(v57, v57);
  v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
  float32x2_t v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
  float32x2_t v153 = vrsqrte_f32(v152);
  int v154 = 4;
  do
  {
    float32x2_t v153 = vmul_f32(v153, vrsqrts_f32(vmul_f32(v153, v153), v152));
    --v154;
  }
  while (v154);
  float32x2_t v74 = vmul_f32(v152, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v152), 0), (int8x8_t)_D9, (int8x8_t)v153));
  float32x2_t v155 = vrecpe_f32(v74);
  int v156 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v74, v155);
    float32x2_t v155 = vmul_f32(v155, *(float32x2_t *)a12.f32);
    --v156;
  }
  while (v156);
  float32x4_t v157 = vmulq_n_f32(v57, v155.f32[0]);
  v157.i32[3] = 0;
  float32x4_t v334 = v157;
  int32x4_t v75 = vdupq_lane_s32(vcgt_f32(v74, v25), 0);
  float32x4_t v76 = v57;
LABEL_54:
  float v158 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  int32x4_t v326 = (int32x4_t)a12;
  v159.i64[0] = -1;
  v159.i64[1] = -1;
  for (float32x2_t i = v74; ; float32x2_t i = v170)
  {
    float32x4_t v161 = v57;
    v162.i64[0] = -1;
    v162.i64[1] = -1;
    *(int16x4_t *)v162.i8 = vmovn_s32(vceqq_s32(v75, v162));
    if (vuzp1_s8(*(int8x8_t *)v162.i8, *(int8x8_t *)v162.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v332 = v161;
    float32x4_t v163 = vnegq_f32(v161);
    v163.i32[3] = 0;
    float32x2_t v336 = v74;
    float32x4_t v338 = v163;
    *(double *)v164.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v338, (unsigned __int32 *)&v344 + v339);
    float32x4_t v333 = v164;
    *(double *)v165.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v340, &v342 + v339);
    float32x4_t v166 = v334;
    float32x4_t v167 = v165;
    float32x4_t v57 = vsubq_f32(v333, v165);
    float32x4_t v168 = vmulq_f32(v334, v57);
    v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
    float v169 = vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32).f32[0];
    if (v169 > v158)
    {
      if (v14)
      {
        uint64_t v270 = v339;
        *a8 = v339;
        if (v270)
        {
          float32x2_t v271 = &v342;
          uint64_t v272 = &v344;
          do
          {
            int v273 = *v272++;
            *v14++ = v273;
            int v274 = *v271++;
            *v13++ = v274;
            --v270;
          }
          while (v270);
        }
      }
      return 0;
    }
    float32x2_t v170 = v336;
    uint64_t v171 = v339;
    if (v169 > (float)(0.99977 * v336.f32[0]))
    {
      float32x2_t v275 = v331;
      if (!v14) {
        goto LABEL_121;
      }
      *a8 = v339;
      if (v171)
      {
        int v276 = &v342;
        uint64_t v277 = &v344;
        uint64_t v278 = v171;
        do
        {
          int v279 = *v277++;
          *v14++ = v279;
          int v280 = *v276++;
          *v13++ = v280;
          --v278;
        }
        while (v278);
LABEL_121:
        uint64_t v281 = a13;
        *(float32x4_t *)(a13 + 32) = v334;
        if (v171 != 3)
        {
          if (v171 != 2)
          {
            float32x4_t v282 = 0uLL;
            float32x4_t v283 = 0uLL;
            int v284 = a5;
            if (v171 == 1)
            {
              float32x4_t v282 = v349;
              float32x4_t v283 = v346;
              if (!a5) {
                goto LABEL_142;
              }
LABEL_138:
              *(float32x4_t *)uint64_t v281 = v282;
              *(float32x4_t *)(v281 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v283;
              uint64_t result = 2;
              *(float32x2_t *)(v281 + 64) = v170;
              return result;
            }
LABEL_137:
            if (!v284) {
              goto LABEL_142;
            }
            goto LABEL_138;
          }
          float32x4_t v298 = vsubq_f32(v352, v340);
          float32x4_t v299 = vsubq_f32(vsubq_f32(v353, v340), v298);
          float32x4_t v300 = vmulq_f32(v299, v299);
          v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
          float32x2_t v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
          float32x2_t v302 = vrecpe_f32(v301);
          int v303 = 4;
          do
          {
            float32x2_t v302 = vmul_f32(v302, vrecps_f32(v301, v302));
            --v303;
          }
          while (v303);
          float32x4_t v304 = vnegq_f32(v298);
          v304.i32[3] = 0;
          float32x4_t v305 = vmulq_f32(v304, v299);
          v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
          v304.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v301), (int8x8_t)v302, 0), vpadd_f32(*(float32x2_t *)v305.f32, *(float32x2_t *)v305.f32)).u32[0];
          float32x4_t v282 = vmlaq_n_f32(v349, vsubq_f32(v350, v349), v304.f32[0]);
          v282.i64[1] = vextq_s8((int8x16_t)v282, (int8x16_t)v282, 8uLL).u32[0];
          float32x4_t v283 = vmlaq_n_f32(v346, vsubq_f32(v347, v346), v304.f32[0]);
          v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
          if (a5) {
            goto LABEL_138;
          }
LABEL_142:
          int8x16_t v306 = (int8x16_t)vmlsq_lane_f32(v282, v166, v327, 0);
          v306.i64[1] = vextq_s8(v306, v306, 8uLL).u32[0];
          int8x16_t v307 = (int8x16_t)vmlaq_n_f32(v283, v166, v328);
          v307.i64[1] = vextq_s8(v307, v307, 8uLL).u32[0];
          *(int8x16_t *)uint64_t v281 = v306;
          *(int8x16_t *)(v281 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v307;
          *(float32x2_t *)(v281 + 64) = vsub_f32(v170, v275);
          return 2;
        }
        v338.i64[0] = 0;
        float32x2_t v341 = 0;
        physx::Gu::barycentricCoordinates(&v340, &v352, &v353, v354, (float32x2_t *)&v338, &v341);
        float32x4_t v166 = v334;
        float32x2_t v170 = v336;
        float32x2_t v275 = v331;
        float32x4_t v293 = vmulq_n_f32(vsubq_f32(v350, v349), v338.f32[0]);
        v293.i32[3] = 0;
        float32x4_t v294 = vmulq_n_f32(vsubq_f32(v351, v349), v341.f32[0]);
        v294.i32[3] = 0;
        float32x4_t v295 = vaddq_f32(v293, v294);
        float32x4_t v296 = vmulq_n_f32(vsubq_f32(v347, v346), v338.f32[0]);
        v296.i32[3] = 0;
        float32x4_t v282 = vaddq_f32(v349, v295);
        float32x4_t v297 = vmulq_n_f32(vsubq_f32(v348, v346), v341.f32[0]);
        v297.i32[3] = 0;
        float32x4_t v283 = vaddq_f32(v346, vaddq_f32(v296, v297));
      }
      else
      {
        uint64_t v281 = a13;
        *(float32x4_t *)(a13 + 32) = v334;
        float32x4_t v282 = 0uLL;
        float32x4_t v283 = 0uLL;
      }
      int v284 = a5;
      goto LABEL_137;
    }
    *(&v349 + v339) = v333;
    *(&v346 + v171) = v167;
    unsigned int v339 = v171 + 1;
    *(&v352 + v171) = v57;
    if (v171 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v352, &v349, &v346, &v344, &v342, (int *)&v339);
      float32x2_t v170 = v336;
LABEL_66:
      float32x4_t v76 = v332;
      goto LABEL_101;
    }
    if (v171 == 2)
    {
      float32x4_t v57 = v352;
      float32x4_t v180 = vsubq_f32(v353, v352);
      float32x4_t v181 = vsubq_f32(v354[0], v352);
      int8x8_t v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v180.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), *(float32x2_t *)v181.f32);
      *(int8x8_t *)v182.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL), *(float32x2_t *)v181.f32), *(float32x2_t *)v180.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL)), 4uLL);
      v183.i32[1] = 0;
      unsigned int v339 = 3;
      float32x2_t v184 = vpadd_f32(vmul_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32), vmul_f32((float32x2_t)v183.u32[0], (float32x2_t)v183.u32[0]));
      float32x2_t v185 = vpadd_f32(v184, v184);
      if (v185.f32[0] <= 0.00000011921)
      {
        unsigned int v339 = 2;
        float32x4_t v222 = vmulq_f32(v180, v180);
        v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
        float32x2_t v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v223), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
        {
          float32x4_t v224 = vnegq_f32(v352);
          v224.i32[3] = 0;
          float32x4_t v225 = vmulq_f32(v224, v180);
          v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
          float32x2_t v226 = vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32);
          float32x2_t v227 = vrecpe_f32(v223);
          int v228 = 4;
          float32x4_t v76 = v332;
          do
          {
            float32x2_t v227 = vmul_f32(v227, vrecps_f32(v223, v227));
            --v228;
          }
          while (v228);
          float32x4_t v57 = vmlaq_n_f32(v352, v180, vmax_f32(vmin_f32(vmul_f32(v226, v227), _D9), 0).f32[0]);
LABEL_81:
          v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v339 = 1;
        goto LABEL_66;
      }
      if (v185.f32[0] == 0.0)
      {
        float32x4_t v57 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v182.u32[2] = v183;
      float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u64[0];
      float32x2_t v187 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 8uLL).u64[0];
      float32x2_t v188 = (float32x2_t)vextq_s8((int8x16_t)v354[0], (int8x16_t)v354[0], 4uLL).u64[0];
      float32x2_t v189 = (float32x2_t)vextq_s8((int8x16_t)v353, (int8x16_t)v353, 4uLL).u64[0];
      int8x8_t v190 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v353.f32, v188), v189, *(float32x2_t *)v354[0].f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v354[0].f32), *(float32x2_t *)v353.f32, v187), 4uLL);
      v191.i64[1] = v190.u32[0];
      float32x2_t v192 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 8uLL).u64[0];
      float32x2_t v193 = (float32x2_t)vextq_s8((int8x16_t)v352, (int8x16_t)v352, 4uLL).u64[0];
      int8x8_t v194 = (int8x8_t)vmls_f32(vmul_f32(v193, *(float32x2_t *)v354[0].f32), v188, *(float32x2_t *)v352.f32);
      *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v187), *(float32x2_t *)v354[0].f32, v192), 4uLL);
      v195.i64[1] = v194.u32[0];
      int8x8_t v196 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v352.f32, v189), v193, *(float32x2_t *)v353.f32);
      *(int8x8_t *)v197.f32 = vext_s8(v196, (int8x8_t)vmls_f32(vmul_f32(v192, *(float32x2_t *)v353.f32), *(float32x2_t *)v352.f32, v186), 4uLL);
      v197.i64[1] = v196.u32[0];
      float32x4_t v198 = vmulq_f32(v191, v182);
      v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
      float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
      float32x4_t v200 = vmulq_f32(v195, v182);
      v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
      float32x2_t v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
      float32x4_t v202 = vmulq_f32(v197, v182);
      v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
      float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v201), (int8x8_t)vcgez_f32(v199)), (int8x8_t)vcgez_f32(v203)), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
      {
        float32x4_t v204 = vnegq_f32(v352);
        v204.i32[3] = 0;
        float32x4_t v205 = vnegq_f32(v353);
        v205.i32[3] = 0;
        float32x4_t v206 = vmulq_f32(v204, v180);
        v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
        float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
        float32x4_t v208 = vmulq_f32(v180, v205);
        v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
        float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v203)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
        {
          float32x2_t v234 = vsub_f32(v207, v209);
          float32x2_t v235 = vrecpe_f32(v234);
          int v236 = 4;
          do
          {
            float32x2_t v235 = vmul_f32(v235, vrecps_f32(v234, v235));
            --v236;
          }
          while (v236);
          uint64_t v221 = 0;
          float32x4_t v57 = vmlaq_n_f32(v352, v180, vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
          v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
          unsigned int v237 = 2;
          uint64_t v220 = 1;
        }
        else
        {
          float32x4_t v210 = vnegq_f32(v354[0]);
          v210.i32[3] = 0;
          float32x4_t v211 = vmulq_f32(v205, v181);
          v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
          float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
          float32x4_t v213 = vmulq_f32(v180, v210);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          float32x4_t v215 = vmulq_f32(v181, v210);
          v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
          float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v212, v209), (int8x8_t)vcge_f32(v214, v216)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v352.f32).u32[0] != -1)
          {
            float32x4_t v217 = vmulq_f32(v204, v181);
            v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
            float32x2_t v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v218), (int8x8_t)vclez_f32(v216)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
            {
              float32x2_t v243 = vsub_f32(v218, v216);
              float32x2_t v244 = vrecpe_f32(v243);
              int v245 = 4;
              float32x4_t v76 = v332;
              do
              {
                float32x2_t v244 = vmul_f32(v244, vrecps_f32(v243, v244));
                --v245;
              }
              while (v245);
              uint64_t v221 = 0;
              float32x4_t v57 = vmlaq_n_f32(v352, v181, vmul_f32(v218, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v243), (float32x2_t)0x3400000034000000), (int8x8_t)v244, 0)).f32[0]);
              v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
              uint64_t v220 = 2;
              unsigned int v237 = 2;
            }
            else
            {
              float32x4_t v76 = v332;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v218), (int8x8_t)vclez_f32(v207)), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
              {
                uint64_t v221 = 0;
                uint64_t v220 = 1;
              }
              else
              {
                *(int16x4_t *)v57.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v209, v212), (int8x8_t)vcgez_f32(v209)), 0);
                *(int8x8_t *)v57.f32 = vuzp1_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v57.f32);
                __int32 v219 = v57.i32[0];
                float32x4_t v57 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v57, v326), 0), (int8x16_t)v353, (int8x16_t)v354[0]);
                uint64_t v220 = 1;
                if (v219 == -1) {
                  uint64_t v221 = 1;
                }
                else {
                  uint64_t v221 = 2;
                }
              }
              unsigned int v237 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v238 = vsub_f32(v212, v209);
          float32x2_t v239 = vadd_f32(v238, vsub_f32(v214, v216));
          float32x2_t v240 = vrecpe_f32(v239);
          int v241 = 4;
          do
          {
            float32x2_t v240 = vmul_f32(v240, vrecps_f32(v239, v240));
            --v241;
          }
          while (v241);
          int8x16_t v242 = (int8x16_t)vmlaq_n_f32(v353, vsubq_f32(v354[0], v353), vmul_f32(v238, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v239), (float32x2_t)0x3400000034000000), (int8x8_t)v240, 0)).f32[0]);
          v242.i64[1] = vextq_s8(v242, v242, 8uLL).u32[0];
          uint64_t v220 = 2;
          float32x4_t v57 = (float32x4_t)v242;
          uint64_t v221 = 1;
          unsigned int v237 = 2;
        }
        float32x4_t v76 = v332;
LABEL_100:
        float32x4_t v246 = *(&v352 + v221);
        float32x4_t v247 = *(&v352 + v220);
        float32x4_t v248 = *(&v349 + v221);
        float32x4_t v249 = *(&v349 + v220);
        float32x4_t v250 = *(&v346 + v221);
        float32x4_t v251 = *(&v346 + v220);
        int v252 = *(&v344 + v221);
        int v253 = *(&v344 + v220);
        int v254 = *(&v342 + v221);
        int v255 = *(&v342 + v220);
        float32x4_t v352 = v246;
        float32x4_t v353 = v247;
        float32x4_t v349 = v248;
        float32x4_t v350 = v249;
        float32x4_t v346 = v250;
        float32x4_t v347 = v251;
        int v344 = v252;
        int v345 = v253;
        int v342 = v254;
        int v343 = v255;
        unsigned int v339 = v237;
        goto LABEL_101;
      }
      int8x16_t v229 = (int8x16_t)vmulq_f32(v352, v182);
      float32x2_t v230 = (float32x2_t)vextq_s8(v229, v229, 8uLL).u64[0];
      float32x2_t v231 = vrecpe_f32(v185);
      int v232 = 4;
      float32x4_t v76 = v332;
      do
      {
        float32x2_t v231 = vmul_f32(v231, vrecps_f32(v185, v231));
        --v232;
      }
      while (v232);
      float32x2_t v233 = vpadd_f32(*(float32x2_t *)v229.i8, v230);
      float32x4_t v57 = vmulq_n_f32(v182, vmul_f32(v231, vpadd_f32(v233, v233)).f32[0]);
      v57.i32[3] = 0;
    }
    else
    {
      float32x4_t v76 = v332;
      if (v171 == 1)
      {
        float32x4_t v57 = v352;
        float32x4_t v172 = vsubq_f32(v353, v352);
        float32x4_t v173 = vmulq_f32(v172, v172);
        v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
        float32x2_t v174 = vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v174), 0), *(int8x8_t *)v352.f32).u32[0] == -1)
        {
          unsigned int v339 = 1;
          goto LABEL_101;
        }
        float32x4_t v175 = vnegq_f32(v352);
        v175.i32[3] = 0;
        float32x4_t v176 = vmulq_f32(v175, v172);
        v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
        float32x2_t v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
        float32x2_t v178 = vrecpe_f32(v174);
        int v179 = 4;
        do
        {
          float32x2_t v178 = vmul_f32(v178, vrecps_f32(v174, v178));
          --v179;
        }
        while (v179);
        float32x4_t v57 = vmlaq_n_f32(v352, v172, vmax_f32(vmin_f32(vmul_f32(v177, v178), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v340 = v57;
    float32x4_t v256 = vmulq_f32(v57, v57);
    v256.i64[0] = vpaddq_f32(v256, v256).u64[0];
    float32x2_t v257 = vpadd_f32(*(float32x2_t *)v256.f32, *(float32x2_t *)v256.f32);
    float32x2_t v258 = vrsqrte_f32(v257);
    int v259 = 4;
    do
    {
      float32x2_t v258 = vmul_f32(v258, vrsqrts_f32(vmul_f32(v258, v258), v257));
      --v259;
    }
    while (v259);
    float32x2_t v74 = vmul_f32(v257, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v257), 0), (int8x8_t)_D9, (int8x8_t)v258));
    float32x2_t v260 = vrecpe_f32(v74);
    int v261 = 4;
    do
    {
      float32x2_t v260 = vmul_f32(v260, vrecps_f32(v74, v260));
      --v261;
    }
    while (v261);
    float32x4_t v262 = vmulq_n_f32(v57, v260.f32[0]);
    v262.i32[3] = 0;
    float32x4_t v334 = v262;
    *(int32x2_t *)v262.f32 = vcgt_f32(v170, v74);
    int32x4_t v159 = vdupq_lane_s32(*(int32x2_t *)v262.f32, 0);
    int32x4_t v75 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v74, v25), *(int8x8_t *)v262.f32), 0);
  }
  int8x8_t v263 = (int8x8_t)vmovn_s32(vceqzq_s32(v159));
  uint64_t v264 = v339;
  if (vuzp1_s8(v263, v263).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v339;
      if (v264)
      {
        float32x4_t v265 = &v342;
        uint64_t v266 = &v344;
        do
        {
          int v267 = *v266++;
          *v14++ = v267;
          int v268 = *v265++;
          *v13++ = v268;
          --v264;
        }
        while (v264);
      }
    }
    return 5;
  }
  float32x2_t v285 = v331;
  if (v14)
  {
    uint64_t v286 = v339 - 1;
    *a8 = v339 - 1;
    if (v264 != 1)
    {
      float32x4_t v287 = &v342;
      float32x4_t v288 = &v344;
      do
      {
        int v289 = *v288++;
        *v14++ = v289;
        int v290 = *v287++;
        *v13++ = v290;
        --v286;
      }
      while (v286);
      goto LABEL_130;
    }
LABEL_133:
    float32x4_t v291 = v349;
    float32x4_t v292 = v346;
  }
  else
  {
LABEL_130:
    float32x4_t v340 = v76;
    if (v264 == 3)
    {
      v338.i64[0] = 0;
      float32x2_t v341 = 0;
      float32x4_t v337 = v76;
      physx::Gu::barycentricCoordinates(&v340, &v352, &v353, v354, (float32x2_t *)&v338, &v341);
      float32x2_t v285 = v331;
      float32x4_t v308 = vmulq_n_f32(vsubq_f32(v350, v349), v338.f32[0]);
      v308.i32[3] = 0;
      float32x4_t v309 = vmulq_n_f32(vsubq_f32(v351, v349), v341.f32[0]);
      v309.i32[3] = 0;
      float32x4_t v310 = vaddq_f32(v308, v309);
      float32x4_t v311 = vmulq_n_f32(vsubq_f32(v347, v346), v338.f32[0]);
      v311.i32[3] = 0;
      float32x4_t v291 = vaddq_f32(v349, v310);
      float32x4_t v312 = vmulq_n_f32(vsubq_f32(v348, v346), v341.f32[0]);
      float32x4_t v76 = v337;
      v312.i32[3] = 0;
      float32x4_t v292 = vaddq_f32(v346, vaddq_f32(v311, v312));
    }
    else if (v264 == 2)
    {
      float32x4_t v313 = vsubq_f32(v352, v76);
      float32x4_t v314 = vsubq_f32(vsubq_f32(v353, v76), v313);
      float32x4_t v315 = vmulq_f32(v314, v314);
      v315.i64[0] = vpaddq_f32(v315, v315).u64[0];
      float32x2_t v316 = vpadd_f32(*(float32x2_t *)v315.f32, *(float32x2_t *)v315.f32);
      float32x2_t v317 = vrecpe_f32(v316);
      int v318 = 4;
      do
      {
        float32x2_t v317 = vmul_f32(v317, vrecps_f32(v316, v317));
        --v318;
      }
      while (v318);
      float32x4_t v319 = vnegq_f32(v313);
      v319.i32[3] = 0;
      float32x4_t v320 = vmulq_f32(v319, v314);
      v320.i64[0] = vpaddq_f32(v320, v320).u64[0];
      v319.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v316), (int8x8_t)v317, 0), vpadd_f32(*(float32x2_t *)v320.f32, *(float32x2_t *)v320.f32)).u32[0];
      float32x4_t v291 = vmlaq_n_f32(v349, vsubq_f32(v350, v349), v319.f32[0]);
      v291.i64[1] = vextq_s8((int8x16_t)v291, (int8x16_t)v291, 8uLL).u32[0];
      float32x4_t v292 = vmlaq_n_f32(v346, vsubq_f32(v347, v346), v319.f32[0]);
      v292.i64[1] = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v291 = 0uLL;
      float32x4_t v292 = 0uLL;
      if (v264 == 1) {
        goto LABEL_133;
      }
    }
  }
  float32x2_t v321 = vrecpe_f32(i);
  int v322 = 4;
  do
  {
    float32x2_t v321 = vmul_f32(v321, vrecps_f32(i, v321));
    --v322;
  }
  while (v322);
  float32x4_t v323 = vmulq_n_f32(v76, v321.f32[0]);
  v323.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v323;
  *(float32x4_t *)(a13 + 48) = v334;
  if (a5)
  {
    *(float32x4_t *)a13 = v291;
    *(float32x4_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v292;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    int8x16_t v324 = (int8x16_t)vmlsq_lane_f32(v291, v323, v327, 0);
    v324.i64[1] = vextq_s8(v324, v324, 8uLL).u32[0];
    int8x16_t v325 = (int8x16_t)vmlaq_n_f32(v292, v323, v328);
    v325.i64[1] = vextq_s8(v325, v325, 8uLL).u32[0];
    *(int8x16_t *)a13 = v324;
    *(int8x16_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v325;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v285);
    if (vcge_f32(v285, i).u32[0]) {
      return 2;
    }
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  int8x16_t v197 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v197, v197, 8uLL).u32[0];
  unsigned int v207 = 1;
  float32x4_t v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v19 = vrsqrte_f32(v18);
  int v20 = 4;
  do
  {
    float32x2_t v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  float32x2_t v27 = vrecpe_f32(v26);
  int v28 = 4;
  do
  {
    float32x2_t v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  float32x2_t v29 = (float32x2_t)vdup_lane_s32(a4, 0);
  v30.i64[0] = v197.i64[0];
  v30.i64[1] = v14;
  float32x4_t v198 = v30;
  float32x4_t v31 = vmulq_n_f32(v16, v27.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v206 = v31;
  float32x4_t v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  float32x4_t v217 = v32;
  *(double *)v33.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v217);
  float32x4_t v201 = v33;
  *(double *)v34.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v206);
  float32x4_t v35 = v34;
  float32x4_t v36 = vsubq_f32(v201, v34);
  float32x4_t v217 = v36;
  float32x4_t v218 = 0u;
  memset(v219, 0, sizeof(v219));
  float32x4_t v213 = v201;
  float32x4_t v214 = 0u;
  float32x4_t v215 = 0u;
  long long v216 = 0u;
  float32x4_t v37 = vnegq_f32(v36);
  v37.i32[3] = 0;
  float32x4_t v209 = v35;
  float32x4_t v210 = 0u;
  float32x4_t v211 = 0u;
  long long v212 = 0u;
  float32x4_t v38 = (const float *)(a1->i64[1] + 24);
  *(float32x2_t *)v35.f32 = vld1_dup_f32(v38);
  float32x4_t v39 = (const float *)(*(void *)(a2 + 8) + 24);
  float32x2_t v40 = vld1_dup_f32(v39);
  *(float32x2_t *)v35.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v35.f32, v40), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v41 = vadd_f32(v29, *(float32x2_t *)v35.f32);
  float32x2_t v42 = vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
  float32x4_t v43 = vmulq_f32(v37, v37);
  float32x4_t v44 = vpaddq_f32(v43, v43);
  float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  float32x2_t v190 = v42;
  *(int32x2_t *)v44.f32 = vcgt_f32(v45, v42);
  int32x4_t v46 = vdupq_lane_s32(*(int32x2_t *)v44.f32, 0);
  float32x2_t v47 = vmul_f32(v41, v41);
  v44.i32[0] = -1;
  int32x4_t v189 = (int32x4_t)v44;
  float32x4_t v48 = v36;
  v49.i64[0] = -1;
  v49.i64[1] = -1;
  int8x16_t v193 = (int8x16_t)v37;
  float32x4_t v50 = v37;
  float32x2_t v51 = 0;
  while (1)
  {
    int8x16_t v52 = (int8x16_t)v36;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    *(int16x4_t *)v53.i8 = vmovn_s32(vceqq_s32(v46, v53));
    unsigned __int32 v54 = vuzp1_s8(*(int8x8_t *)v53.i8, *(int8x8_t *)v53.i8).u32[0];
    if (v54 != -1) {
      break;
    }
    float32x4_t v55 = vmulq_f32(v50, v50);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    float32x2_t v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
    float32x2_t v57 = vrsqrte_f32(v56);
    int v58 = 4;
    do
    {
      float32x2_t v57 = vmul_f32(v57, vrsqrts_f32(vmul_f32(v57, v57), v56));
      --v58;
    }
    while (v58);
    int8x16_t v199 = v52;
    float32x2_t v59 = vmul_f32(v56, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v56), 0), (int8x8_t)_D8, (int8x8_t)v57));
    float32x2_t v60 = vrecpe_f32(v59);
    int v61 = 4;
    do
    {
      float32x2_t v60 = vmul_f32(v60, vrecps_f32(v59, v60));
      --v61;
    }
    while (v61);
    float32x4_t v196 = v50;
    float32x4_t v62 = vmulq_n_f32(v50, v60.f32[0]);
    v62.i32[3] = 0;
    float32x4_t v205 = v62;
    float32x4_t v63 = vnegq_f32(v62);
    v63.i32[3] = 0;
    float32x4_t v204 = v63;
    *(double *)v64.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v205);
    float32x4_t v202 = v64;
    *(double *)v65.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v204);
    float32x4_t v66 = v202;
    float32x4_t v67 = vaddq_f32(v198, v65);
    float32x4_t v36 = vsubq_f32(v202, v67);
    float32x4_t v68 = vnegq_f32(v36);
    v68.i32[3] = 0;
    float32x4_t v69 = vmulq_f32(v205, v68);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    float32x2_t v70 = vsub_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v41);
    if (v70.f32[0] > 0.0)
    {
      float32x4_t v71 = vmulq_f32(v205, *a7);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      float32x2_t v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
      if (v72.f32[0] >= 0.0) {
        return v54 != -1;
      }
      float32x2_t v73 = vrecpe_f32(v72);
      int v74 = 4;
      do
      {
        float32x2_t v73 = vmul_f32(v73, vrecps_f32(v72, v73));
        --v74;
      }
      while (v74);
      float32x2_t v75 = vsub_f32(v51, vmul_f32(v70, v73));
      if (vcgt_f32(v75, v51).u8[0])
      {
        if (v75.f32[0] > 1.0) {
          return v54 != -1;
        }
        float32x4_t v76 = vmlaq_n_f32(*a6, *a7, v75.f32[0]);
        v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
        float32x2_t v194 = v75;
        float32x4_t v195 = v76;
        float32x4_t v77 = vsubq_f32(v76, v198);
        float32x4_t v209 = vaddq_f32(v209, v77);
        float32x4_t v210 = vaddq_f32(v210, v77);
        float32x4_t v211 = vaddq_f32(v211, v77);
        float32x4_t v217 = vsubq_f32(v213, v209);
        float32x4_t v218 = vsubq_f32(v214, v210);
        v219[0] = vsubq_f32(v215, v211);
        *(double *)v78.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v204);
        float32x4_t v66 = v202;
        float32x4_t v67 = vaddq_f32(v195, v78);
        float32x4_t v36 = vsubq_f32(v202, v67);
        float32x2_t v45 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v193 = (int8x16_t)v196;
        float32x4_t v198 = v195;
        float32x2_t v51 = v194;
      }
      else
      {
        float32x2_t v51 = v75;
      }
    }
    uint64_t v79 = v207;
    *(&v213 + v207) = v66;
    *(&v209 + v79) = v67;
    unsigned int v207 = v79 + 1;
    *(&v217 + v79) = v36;
    if (v79 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v217, &v213, &v209, (int *)&v207);
LABEL_27:
      float32x4_t v48 = (float32x4_t)v199;
      goto LABEL_61;
    }
    if (v79 != 2)
    {
      float32x4_t v48 = (float32x4_t)v199;
      if (v79 != 1) {
        goto LABEL_61;
      }
      float32x4_t v36 = v217;
      float32x4_t v80 = vsubq_f32(v218, v217);
      float32x4_t v81 = vmulq_f32(v80, v80);
      v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
      float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v82), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
      {
        float32x4_t v83 = vnegq_f32(v217);
        v83.i32[3] = 0;
        float32x4_t v84 = vmulq_f32(v83, v80);
        v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
        float32x2_t v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
        float32x2_t v86 = vrecpe_f32(v82);
        int v87 = 4;
        do
        {
          float32x2_t v86 = vmul_f32(v86, vrecps_f32(v82, v86));
          --v87;
        }
        while (v87);
        float32x4_t v36 = vmlaq_n_f32(v217, v80, vmax_f32(vmin_f32(vmul_f32(v85, v86), _D8), 0).f32[0]);
LABEL_42:
        v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v207 = 1;
      goto LABEL_61;
    }
    float32x4_t v36 = v217;
    float32x4_t v88 = vsubq_f32(v218, v217);
    float32x4_t v89 = vsubq_f32(v219[0], v217);
    int8x8_t v91 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL), *(float32x2_t *)v89.f32);
    *(int8x8_t *)v90.f32 = vext_s8(v91, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL), *(float32x2_t *)v89.f32), *(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), 4uLL);
    v91.i32[1] = 0;
    unsigned int v207 = 3;
    float32x2_t v92 = vpadd_f32(vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), vmul_f32((float32x2_t)v91.u32[0], (float32x2_t)v91.u32[0]));
    float32x2_t v93 = vpadd_f32(v92, v92);
    if (v93.f32[0] <= 0.00000011921)
    {
      unsigned int v207 = 2;
      float32x4_t v130 = vmulq_f32(v88, v88);
      v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
      float32x2_t v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
      float32x4_t v48 = (float32x4_t)v199;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v131), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
      {
        float32x4_t v132 = vnegq_f32(v217);
        v132.i32[3] = 0;
        float32x4_t v133 = vmulq_f32(v132, v88);
        v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
        float32x2_t v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
        float32x2_t v135 = vrecpe_f32(v131);
        int v136 = 4;
        do
        {
          float32x2_t v135 = vmul_f32(v135, vrecps_f32(v131, v135));
          --v136;
        }
        while (v136);
        float32x4_t v36 = vmlaq_n_f32(v217, v88, vmax_f32(vmin_f32(vmul_f32(v134, v135), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v93.f32[0] == 0.0)
    {
      float32x4_t v36 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v90.u32[2] = v91;
    float32x2_t v94 = (float32x2_t)vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
    float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v219[0], (int8x16_t)v219[0], 8uLL).u64[0];
    float32x2_t v96 = (float32x2_t)vextq_s8((int8x16_t)v219[0], (int8x16_t)v219[0], 4uLL).u64[0];
    float32x2_t v97 = (float32x2_t)vextq_s8((int8x16_t)v218, (int8x16_t)v218, 4uLL).u64[0];
    int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v218.f32, v96), v97, *(float32x2_t *)v219[0].f32);
    *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v94, *(float32x2_t *)v219[0].f32), *(float32x2_t *)v218.f32, v95), 4uLL);
    v99.i64[1] = v98.u32[0];
    float32x2_t v100 = (float32x2_t)vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
    float32x2_t v101 = (float32x2_t)vextq_s8((int8x16_t)v217, (int8x16_t)v217, 4uLL).u64[0];
    int8x8_t v102 = (int8x8_t)vmls_f32(vmul_f32(v101, *(float32x2_t *)v219[0].f32), v96, *(float32x2_t *)v217.f32);
    *(int8x8_t *)v103.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v217.f32, v95), *(float32x2_t *)v219[0].f32, v100), 4uLL);
    v103.i64[1] = v102.u32[0];
    int8x8_t v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v217.f32, v97), v101, *(float32x2_t *)v218.f32);
    *(int8x8_t *)v105.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32(v100, *(float32x2_t *)v218.f32), *(float32x2_t *)v217.f32, v94), 4uLL);
    v105.i64[1] = v104.u32[0];
    float32x4_t v106 = vmulq_f32(v99, v90);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
    float32x4_t v108 = vmulq_f32(v103, v90);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
    float32x4_t v110 = vmulq_f32(v105, v90);
    v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
    float32x2_t v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v109), (int8x8_t)vcgez_f32(v107)), (int8x8_t)vcgez_f32(v111)), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
    {
      float32x4_t v112 = vnegq_f32(v217);
      v112.i32[3] = 0;
      float32x4_t v113 = vnegq_f32(v218);
      v113.i32[3] = 0;
      float32x4_t v114 = vmulq_f32(v112, v88);
      v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
      float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
      float32x4_t v116 = vmulq_f32(v88, v113);
      v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
      float32x2_t v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v115), (int8x8_t)vclez_f32(v117)), (int8x8_t)vclez_f32(v111)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
      {
        float32x2_t v142 = vsub_f32(v115, v117);
        float32x2_t v143 = vrecpe_f32(v142);
        int v144 = 4;
        do
        {
          float32x2_t v143 = vmul_f32(v143, vrecps_f32(v142, v143));
          --v144;
        }
        while (v144);
        uint64_t v129 = 0;
        float32x4_t v36 = vmlaq_n_f32(v217, v88, vmul_f32(v115, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v142), (float32x2_t)0x3400000034000000), (int8x8_t)v143, 0)).f32[0]);
        v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
        unsigned int v145 = 2;
        uint64_t v128 = 1;
      }
      else
      {
        float32x4_t v118 = vnegq_f32(v219[0]);
        v118.i32[3] = 0;
        float32x4_t v119 = vmulq_f32(v113, v89);
        v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
        float32x2_t v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
        float32x4_t v121 = vmulq_f32(v88, v118);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        float32x4_t v123 = vmulq_f32(v89, v118);
        v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
        float32x2_t v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v120, v117), (int8x8_t)vcge_f32(v122, v124)), (int8x8_t)vclez_f32(v107)), 0), *(int8x8_t *)v217.f32).u32[0] != -1)
        {
          float32x4_t v125 = vmulq_f32(v112, v89);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v126), (int8x8_t)vclez_f32(v124)), (int8x8_t)vclez_f32(v109)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
          {
            float32x2_t v151 = vsub_f32(v126, v124);
            float32x2_t v152 = vrecpe_f32(v151);
            int v153 = 4;
            float32x4_t v48 = (float32x4_t)v199;
            do
            {
              float32x2_t v152 = vmul_f32(v152, vrecps_f32(v151, v152));
              --v153;
            }
            while (v153);
            uint64_t v129 = 0;
            float32x4_t v36 = vmlaq_n_f32(v217, v89, vmul_f32(v126, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v151), (float32x2_t)0x3400000034000000), (int8x8_t)v152, 0)).f32[0]);
            v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
            uint64_t v128 = 2;
          }
          else
          {
            float32x4_t v48 = (float32x4_t)v199;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v126), (int8x8_t)vclez_f32(v115)), 0), *(int8x8_t *)v217.f32).u32[0] == -1)
            {
              uint64_t v129 = 0;
              uint64_t v128 = 1;
            }
            else
            {
              *(int16x4_t *)v36.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v117, v120), (int8x8_t)vcgez_f32(v117)), 0);
              *(int8x8_t *)v36.f32 = vuzp1_s8(*(int8x8_t *)v36.f32, *(int8x8_t *)v36.f32);
              __int32 v127 = v36.i32[0];
              float32x4_t v36 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v36, v189), 0), (int8x16_t)v218, (int8x16_t)v219[0]);
              uint64_t v128 = 1;
              if (v127 == -1) {
                uint64_t v129 = 1;
              }
              else {
                uint64_t v129 = 2;
              }
            }
          }
          unsigned int v145 = v128;
          goto LABEL_60;
        }
        float32x2_t v146 = vsub_f32(v120, v117);
        float32x2_t v147 = vadd_f32(v146, vsub_f32(v122, v124));
        float32x2_t v148 = vrecpe_f32(v147);
        int v149 = 4;
        do
        {
          float32x2_t v148 = vmul_f32(v148, vrecps_f32(v147, v148));
          --v149;
        }
        while (v149);
        int8x16_t v150 = (int8x16_t)vmlaq_n_f32(v218, vsubq_f32(v219[0], v218), vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v147), (float32x2_t)0x3400000034000000), (int8x8_t)v148, 0)).f32[0]);
        v150.i64[1] = vextq_s8(v150, v150, 8uLL).u32[0];
        unsigned int v145 = 2;
        uint64_t v128 = 2;
        uint64_t v129 = 1;
        float32x4_t v36 = (float32x4_t)v150;
      }
      float32x4_t v48 = (float32x4_t)v199;
LABEL_60:
      float32x4_t v154 = *(&v217 + v128);
      float32x4_t v155 = *(&v213 + v129);
      float32x4_t v156 = *(&v213 + v128);
      float32x4_t v157 = *(&v209 + v129);
      float32x4_t v158 = *(&v209 + v128);
      float32x4_t v217 = *(&v217 + v129);
      float32x4_t v218 = v154;
      float32x4_t v213 = v155;
      float32x4_t v214 = v156;
      float32x4_t v209 = v157;
      float32x4_t v210 = v158;
      unsigned int v207 = v145;
      goto LABEL_61;
    }
    int8x16_t v137 = (int8x16_t)vmulq_f32(v217, v90);
    float32x2_t v138 = (float32x2_t)vextq_s8(v137, v137, 8uLL).u64[0];
    float32x2_t v139 = vrecpe_f32(v93);
    int v140 = 4;
    float32x4_t v48 = (float32x4_t)v199;
    do
    {
      float32x2_t v139 = vmul_f32(v139, vrecps_f32(v93, v139));
      --v140;
    }
    while (v140);
    float32x2_t v141 = vpadd_f32(*(float32x2_t *)v137.i8, v138);
    float32x4_t v36 = vmulq_n_f32(v90, vmul_f32(v139, vpadd_f32(v141, v141)).f32[0]);
    v36.i32[3] = 0;
LABEL_61:
    float32x4_t v50 = vnegq_f32(v36);
    v50.i32[3] = 0;
    float32x4_t v159 = vmulq_f32(v36, v36);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    float32x2_t v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
    int8x8_t v161 = (int8x8_t)vcgt_f32(v45, v160);
    int8x16_t v49 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v161, (int8x8_t)0x100000001), 0);
    int32x4_t v46 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v160, v47), v161), 0);
    float32x2_t v45 = v160;
  }
  int8x16_t v162 = (int8x16_t)v48;
  float32x4_t v163 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v45, v190), 0), v49), 0x1FuLL)), (int8x16_t)v50, v193);
  float32x4_t v164 = vmulq_f32(v163, v163);
  v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
  float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
  float32x2_t v166 = vrsqrte_f32(v165);
  int v167 = 4;
  do
  {
    float32x2_t v166 = vmul_f32(v166, vrsqrts_f32(vmul_f32(v166, v166), v165));
    --v167;
  }
  while (v167);
  float32x2_t v168 = vmul_f32(v165, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v165), 0), (int8x8_t)_D8, (int8x8_t)v166));
  float32x2_t v169 = vrecpe_f32(v168);
  int v170 = 4;
  do
  {
    float32x2_t v169 = vmul_f32(v169, vrecps_f32(v168, v169));
    --v170;
  }
  while (v170);
  int8x16_t v171 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  int8x16_t v172 = (int8x16_t)vmulq_n_f32(v163, v169.f32[0]);
  v172.i32[3] = 0;
  float32x4_t v173 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v168), 0), v172));
  v173.i32[3] = 0;
  *a9 = v173;
  *a8 = v51;
  float32x4_t v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v49, 0x1FuLL)), v52, v162);
  float32x4_t v205 = v174;
  if (v207 == 3)
  {
    v204.i64[0] = 0;
    float32x2_t v208 = 0;
    float32x4_t v200 = v173;
    int8x16_t v203 = v171;
    physx::Gu::barycentricCoordinates(&v205, &v217, &v218, v219, (float32x2_t *)&v204, &v208);
    float32x4_t v173 = v200;
    int8x16_t v171 = v203;
    v49.i32[1] = v213.i32[1];
    float32x4_t v177 = vmulq_n_f32(vsubq_f32(v214, v213), v204.f32[0]);
    v177.i32[3] = 0;
    float32x4_t v178 = vmulq_n_f32(vsubq_f32(v215, v213), v208.f32[0]);
    v178.i32[3] = 0;
    float32x4_t v175 = vaddq_f32(v213, vaddq_f32(v177, v178));
    float32x4_t v176 = a10;
  }
  else if (v207 == 2)
  {
    float32x4_t v179 = vsubq_f32(v217, v174);
    float32x4_t v180 = vsubq_f32(vsubq_f32(v218, v174), v179);
    float32x4_t v181 = vmulq_f32(v180, v180);
    v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
    float32x2_t v182 = vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32);
    float32x2_t v183 = vrecpe_f32(v182);
    int v184 = 4;
    float32x4_t v176 = a10;
    do
    {
      float32x2_t v183 = vmul_f32(v183, vrecps_f32(v182, v183));
      --v184;
    }
    while (v184);
    float32x4_t v185 = vnegq_f32(v179);
    v185.i32[3] = 0;
    float32x4_t v186 = vmulq_f32(v185, v180);
    v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
    float32x4_t v175 = vmlaq_n_f32(v213, vsubq_f32(v214, v213), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v182), (int8x8_t)v183, 0), vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32)).f32[0]);
    v49.i32[1] = 0;
    v175.i64[1] = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v175 = 0uLL;
    float32x4_t v176 = a10;
    if (v207 == 1) {
      float32x4_t v175 = v213;
    }
  }
  v49.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  int8x16_t v187 = (int8x16_t)vmlsq_lane_f32(v175, v173, *(float32x2_t *)v49.i8, 0);
  v187.i64[1] = vextq_s8(v187, v187, 8uLL).u32[0];
  *float32x4_t v176 = vbslq_s8(v171, v187, (int8x16_t)v175);
  return v54 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  float v13 = a7;
  uint64_t v14 = a6;
  uint64_t v361 = *MEMORY[0x263EF8340];
  float32x4_t v17 = (float32x4_t *)a1->i64[1];
  float32x2_t v18 = &v17[1].f32[1];
  float32x2_t v19 = vld1_dup_f32(v18);
  int v20 = *(float32x4_t **)(a2 + 8);
  float v21 = &v20[1].f32[1];
  float32x2_t v22 = vld1_dup_f32(v21);
  float32x2_t v23 = vmin_f32(v19, v22);
  float32x2_t v24 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v25 = vmul_f32(v23, v24);
  v23.i32[0] = v17[1].i32[0];
  v24.i32[0] = v20[1].i32[0];
  a11.i32[0] = -v17[2].i8[0];
  int32x2_t v26 = (int32x2_t)vand_s8(a11, (int8x8_t)v23);
  float32x2_t v27 = (float32x2_t)vdup_lane_s32(v26, 0);
  v26.i32[0] = -v20[2].i8[0];
  float32x2_t v28 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v26, (int8x8_t)v24), 0);
  float32x2_t v333 = v27;
  float v334 = v28.f32[0];
  float32x2_t v29 = vadd_f32(v27, v28);
  uint64_t v30 = *a4;
  float32x4_t v346 = 0uLL;
  unsigned int v345 = 0;
  uint64_t v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v337 = v29;
  if (!*a8)
  {
    float32x4_t v71 = vmulq_f32(*a3, *a3);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v346 = v63;
    float32x4_t v72 = vmulq_f32(v63, v63);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    float32x2_t v73 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
    float32x2_t v74 = vrsqrte_f32(v73);
    int v75 = 4;
    do
    {
      float32x2_t v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
      --v75;
    }
    while (v75);
    float32x2_t v76 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), (int8x8_t)_D9, (int8x8_t)v74));
    float32x2_t v77 = vrecpe_f32(v76);
    int v78 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v76, v77);
      float32x2_t v77 = vmul_f32(v77, *(float32x2_t *)a12.f32);
      --v78;
    }
    while (v78);
    float32x4_t v79 = vmulq_n_f32(v63, v77.f32[0]);
    v79.i32[3] = 0;
    float32x4_t v340 = v79;
    float32x2_t v80 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v81.i64[0] = -1;
    v81.i64[1] = -1;
    float32x4_t v82 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v37 = 0;
  float32x4_t v38 = (float32x4_t *)a1[1].i64[0];
  uint64_t v39 = v17[10].i64[0];
  float32x4_t v40 = v17[3];
  float32x4_t v41 = v17[4];
  a12 = v17[5];
  float32x4_t v42 = v20[3];
  float32x4_t v43 = v20[4];
  float32x4_t v44 = v20[5];
  uint64_t v45 = v20[10].i64[0];
  do
  {
    unsigned int v46 = a6[v37];
    *(&v350 + v37) = v46;
    unsigned int v47 = a7[v37];
    *(&v348 + v37) = v47;
    float32x4_t v48 = *(float32x4_t *)(v39 + 12 * v46);
    float32x4_t v49 = vmulq_n_f32(v40, v48.f32[0]);
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_lane_f32(v41, *(float32x2_t *)v48.f32, 1);
    v50.i32[3] = 0;
    float32x4_t v51 = vmulq_laneq_f32(a12, v48, 2);
    v51.i32[3] = 0;
    float32x4_t v52 = vaddq_f32(v51, vaddq_f32(v49, v50));
    float32x4_t v53 = vmulq_n_f32(*v38, v52.f32[0]);
    v53.i32[3] = 0;
    float32x4_t v54 = vmulq_lane_f32(v38[1], *(float32x2_t *)v52.f32, 1);
    v54.i32[3] = 0;
    float32x4_t v55 = vmulq_laneq_f32(v38[2], v52, 2);
    v55.i32[3] = 0;
    float32x4_t v56 = vaddq_f32(v55, vaddq_f32(v53, v54));
    float32x4_t v57 = *(float32x4_t *)(v45 + 12 * v47);
    float32x4_t v58 = vmulq_n_f32(v42, v57.f32[0]);
    v58.i32[3] = 0;
    float32x4_t v59 = vmulq_lane_f32(v43, *(float32x2_t *)v57.f32, 1);
    v59.i32[3] = 0;
    float32x4_t v60 = vmulq_laneq_f32(v44, v57, 2);
    v60.i32[3] = 0;
    float32x4_t v61 = vaddq_f32(v38[3], v56);
    float32x4_t v62 = vaddq_f32(v60, vaddq_f32(v58, v59));
    float32x4_t v63 = vsubq_f32(v61, v62);
    *(&v355 + v37) = v61;
    *(&v352 + v37) = v62;
    *(&v358 + v37++) = v63;
  }
  while (v31 != v37);
  unsigned int v345 = v31;
  switch(v37)
  {
    case 4:
      int v341 = v30;
      physx::Gu::closestPtPointTetrahedron(&v358, &v355, &v352, &v350, &v348, (int *)&v345);
      LODWORD(v3physx::Sq::AABBTree::release(this, 0) = v341;
      v29.i32[0] = v337.i32[0];
      goto LABEL_49;
    case 3:
      unsigned int v345 = 3;
      float32x4_t v63 = v358;
      a12 = vsubq_f32(v359, v358);
      float32x4_t v83 = vsubq_f32(v360[0], v358);
      int8x8_t v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v83.f32);
      *(int8x8_t *)v84.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v83.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL)), 4uLL);
      v85.i32[1] = 0;
      float32x2_t v86 = vpadd_f32(vmul_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), vmul_f32((float32x2_t)v85.u32[0], (float32x2_t)v85.u32[0]));
      float32x2_t v87 = vpadd_f32(v86, v86);
      if (v87.f32[0] > 0.00000011921)
      {
        if (v87.f32[0] == 0.0)
        {
          float32x4_t v63 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v84.u32[2] = v85;
          float32x2_t v88 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u64[0];
          float32x2_t v89 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 8uLL).u64[0];
          float32x2_t v90 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 4uLL).u64[0];
          float32x2_t v91 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 4uLL).u64[0];
          int8x8_t v92 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v359.f32, v90), v91, *(float32x2_t *)v360[0].f32);
          *(int8x8_t *)v93.f32 = vext_s8(v92, (int8x8_t)vmls_f32(vmul_f32(v88, *(float32x2_t *)v360[0].f32), *(float32x2_t *)v359.f32, v89), 4uLL);
          v93.i64[1] = v92.u32[0];
          float32x2_t v94 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u64[0];
          float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 4uLL).u64[0];
          int8x8_t v96 = (int8x8_t)vmls_f32(vmul_f32(v95, *(float32x2_t *)v360[0].f32), v90, *(float32x2_t *)v358.f32);
          *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v89), *(float32x2_t *)v360[0].f32, v94), 4uLL);
          v97.i64[1] = v96.u32[0];
          int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v91), v95, *(float32x2_t *)v359.f32);
          *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v94, *(float32x2_t *)v359.f32), *(float32x2_t *)v358.f32, v88), 4uLL);
          v99.i64[1] = v98.u32[0];
          float32x4_t v100 = vmulq_f32(v93, v84);
          v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
          float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
          float32x4_t v102 = vmulq_f32(v97, v84);
          v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
          float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
          float32x4_t v104 = vmulq_f32(v99, v84);
          v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
          float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v103), (int8x8_t)vcgez_f32(v101)), (int8x8_t)vcgez_f32(v105)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
          {
            int8x16_t v131 = (int8x16_t)vmulq_f32(v358, v84);
            float32x2_t v132 = (float32x2_t)vextq_s8(v131, v131, 8uLL).u64[0];
            float32x2_t v133 = vrecpe_f32(v87);
            int v134 = 4;
            do
            {
              float32x2_t v133 = vmul_f32(v133, vrecps_f32(v87, v133));
              --v134;
            }
            while (v134);
            float32x2_t v135 = vpadd_f32(*(float32x2_t *)v131.i8, v132);
            float32x4_t v63 = vmulq_n_f32(v84, vmul_f32(v133, vpadd_f32(v135, v135)).f32[0]);
            v63.i32[3] = 0;
          }
          else
          {
            float32x4_t v106 = vnegq_f32(v358);
            v106.i32[3] = 0;
            float32x4_t v107 = vnegq_f32(v359);
            v107.i32[3] = 0;
            float32x4_t v108 = vmulq_f32(v106, a12);
            v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
            float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
            float32x4_t v110 = vmulq_f32(a12, v107);
            v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
            float32x2_t v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v109), (int8x8_t)vclez_f32(v111)), (int8x8_t)vclez_f32(v105)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
            {
              float32x2_t v136 = vsub_f32(v109, v111);
              float32x2_t v137 = vrecpe_f32(v136);
              int v138 = 4;
              do
              {
                float32x2_t v137 = vmul_f32(v137, vrecps_f32(v136, v137));
                --v138;
              }
              while (v138);
              uint64_t v123 = 0;
              float32x4_t v63 = vmlaq_n_f32(v358, a12, vmul_f32(v109, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v136), (float32x2_t)0x3400000034000000), (int8x8_t)v137, 0)).f32[0]);
              v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
              unsigned int v139 = 2;
              uint64_t v122 = 1;
            }
            else
            {
              float32x4_t v112 = vnegq_f32(v360[0]);
              v112.i32[3] = 0;
              float32x4_t v113 = vmulq_f32(v107, v83);
              v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
              float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
              float32x4_t v115 = vmulq_f32(a12, v112);
              v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
              float32x2_t v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
              float32x4_t v117 = vmulq_f32(v83, v112);
              v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
              float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v114, v111), (int8x8_t)vcge_f32(v116, v118)), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
              {
                float32x2_t v140 = vsub_f32(v114, v111);
                float32x2_t v141 = vadd_f32(v140, vsub_f32(v116, v118));
                float32x2_t v142 = vrecpe_f32(v141);
                int v143 = 4;
                do
                {
                  float32x2_t v142 = vmul_f32(v142, vrecps_f32(v141, v142));
                  --v143;
                }
                while (v143);
                int8x16_t v144 = (int8x16_t)vmlaq_n_f32(v359, vsubq_f32(v360[0], v359), vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v141), (float32x2_t)0x3400000034000000), (int8x8_t)v142, 0)).f32[0]);
                v144.i64[1] = vextq_s8(v144, v144, 8uLL).u32[0];
                unsigned int v139 = 2;
                uint64_t v123 = 1;
                uint64_t v122 = 2;
                float32x4_t v63 = (float32x4_t)v144;
              }
              else
              {
                float32x4_t v119 = vmulq_f32(v106, v83);
                int32x4_t v120 = (int32x4_t)vpaddq_f32(v119, v119);
                *(float32x2_t *)v120.i8 = vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v120.i8), (int8x8_t)vclez_f32(v118)), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
                {
                  float32x2_t v145 = vsub_f32(*(float32x2_t *)v120.i8, v118);
                  float32x2_t v146 = vrecpe_f32(v145);
                  int v147 = 4;
                  do
                  {
                    float32x2_t v146 = vmul_f32(v146, vrecps_f32(v145, v146));
                    --v147;
                  }
                  while (v147);
                  uint64_t v123 = 0;
                  float32x4_t v63 = vmlaq_n_f32(v358, v83, vmul_f32(*(float32x2_t *)v120.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v145), (float32x2_t)0x3400000034000000), (int8x8_t)v146, 0)).f32[0]);
                  v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
                  uint64_t v122 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v120.i8), (int8x8_t)vclez_f32(v109)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
                {
                  uint64_t v123 = 0;
                  uint64_t v122 = 1;
                }
                else
                {
                  *(int32x2_t *)v120.i8 = vcge_f32(v111, v114);
                  *(int16x4_t *)v63.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v120.i8, (int8x8_t)vcgez_f32(v111)), 0);
                  *(int8x8_t *)v63.f32 = vuzp1_s8(*(int8x8_t *)v63.f32, *(int8x8_t *)v63.f32);
                  v120.i32[0] = -1;
                  __int32 v121 = v63.i32[0];
                  float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v63, v120), 0), (int8x16_t)v359, (int8x16_t)v360[0]);
                  uint64_t v122 = 1;
                  if (v121 == -1) {
                    uint64_t v123 = 1;
                  }
                  else {
                    uint64_t v123 = 2;
                  }
                }
                unsigned int v139 = v122;
              }
            }
            float32x4_t v148 = *(&v358 + v123);
            float32x4_t v149 = *(&v358 + v122);
            a12 = *(&v355 + v123);
            float32x4_t v150 = *(&v355 + v122);
            float32x4_t v151 = *(&v352 + v123);
            float32x4_t v152 = *(&v352 + v122);
            int v153 = *(&v350 + v123);
            int v154 = *(&v350 + v122);
            int v155 = *(&v348 + v123);
            int v156 = *(&v348 + v122);
            float32x4_t v358 = v148;
            float32x4_t v359 = v149;
            float32x4_t v355 = a12;
            float32x4_t v356 = v150;
            float32x4_t v352 = v151;
            float32x4_t v353 = v152;
            int v350 = v153;
            int v351 = v154;
            int v348 = v155;
            int v349 = v156;
            unsigned int v345 = v139;
          }
        }
        goto LABEL_49;
      }
      unsigned int v345 = 2;
      float32x4_t v124 = vmulq_f32(a12, a12);
      v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
      float32x2_t v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v125), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        float32x4_t v126 = vnegq_f32(v358);
        v126.i32[3] = 0;
        float32x4_t v127 = vmulq_f32(v126, a12);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        float32x2_t v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
        float32x2_t v129 = vrecpe_f32(v125);
        int v130 = 4;
        do
        {
          float32x2_t v129 = vmul_f32(v129, vrecps_f32(v125, v129));
          --v130;
        }
        while (v130);
        float32x4_t v63 = vmlaq_n_f32(v358, a12, vmax_f32(vmin_f32(vmul_f32(v128, v129), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v63 = v358;
      float32x4_t v64 = vsubq_f32(v359, v358);
      float32x4_t v65 = vmulq_f32(v64, v64);
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      float32x2_t v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v66), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        float32x4_t v67 = vnegq_f32(v358);
        v67.i32[3] = 0;
        float32x4_t v68 = vmulq_f32(v67, v64);
        a12 = vpaddq_f32(v68, v68);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        float32x2_t v69 = vrecpe_f32(v66);
        int v70 = 4;
        do
        {
          float32x2_t v69 = vmul_f32(v69, vrecps_f32(v66, v69));
          --v70;
        }
        while (v70);
        float32x4_t v63 = vmlaq_n_f32(v358, v64, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v69), _D9), 0).f32[0]);
LABEL_31:
        v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v345 = 1;
LABEL_49:
  float32x4_t v346 = v63;
  float32x4_t v157 = vmulq_f32(v63, v63);
  v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
  float32x2_t v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
  float32x2_t v159 = vrsqrte_f32(v158);
  int v160 = 4;
  do
  {
    float32x2_t v159 = vmul_f32(v159, vrsqrts_f32(vmul_f32(v159, v159), v158));
    --v160;
  }
  while (v160);
  float32x2_t v80 = vmul_f32(v158, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v158), 0), (int8x8_t)_D9, (int8x8_t)v159));
  float32x2_t v161 = vrecpe_f32(v80);
  int v162 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v80, v161);
    float32x2_t v161 = vmul_f32(v161, *(float32x2_t *)a12.f32);
    --v162;
  }
  while (v162);
  float32x4_t v163 = vmulq_n_f32(v63, v161.f32[0]);
  v163.i32[3] = 0;
  float32x4_t v340 = v163;
  int32x4_t v81 = vdupq_lane_s32(vcgt_f32(v80, v25), 0);
  float32x4_t v82 = v63;
LABEL_54:
  float v164 = *(float *)&v30 + v29.f32[0];
  a12.i32[0] = -1;
  int32x4_t v332 = (int32x4_t)a12;
  v165.i64[0] = -1;
  v165.i64[1] = -1;
  for (float32x2_t i = v80; ; float32x2_t i = v176)
  {
    float32x4_t v167 = v63;
    v168.i64[0] = -1;
    v168.i64[1] = -1;
    *(int16x4_t *)v168.i8 = vmovn_s32(vceqq_s32(v81, v168));
    if (vuzp1_s8(*(int8x8_t *)v168.i8, *(int8x8_t *)v168.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v338 = v167;
    float32x4_t v169 = vnegq_f32(v167);
    v169.i32[3] = 0;
    float32x2_t v342 = v80;
    float32x4_t v344 = v169;
    *(double *)v170.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v344, &v350 + v345);
    float32x4_t v339 = v170;
    *(double *)v171.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v346, &v348 + v345);
    float32x4_t v172 = v340;
    float32x4_t v173 = v171;
    float32x4_t v63 = vsubq_f32(v339, v171);
    float32x4_t v174 = vmulq_f32(v340, v63);
    v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
    float v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32).f32[0];
    if (v175 > v164)
    {
      if (v14)
      {
        uint64_t v276 = v345;
        *a8 = v345;
        if (v276)
        {
          uint64_t v277 = &v348;
          uint64_t v278 = &v350;
          do
          {
            int v279 = *v278++;
            *v14++ = v279;
            int v280 = *v277++;
            *v13++ = v280;
            --v276;
          }
          while (v276);
        }
      }
      return 0;
    }
    float32x2_t v176 = v342;
    uint64_t v177 = v345;
    if (v175 > (float)(0.99977 * v342.f32[0]))
    {
      float32x2_t v281 = v337;
      if (!v14) {
        goto LABEL_121;
      }
      *a8 = v345;
      if (v177)
      {
        float32x4_t v282 = &v348;
        float32x4_t v283 = &v350;
        uint64_t v284 = v177;
        do
        {
          int v285 = *v283++;
          *v14++ = v285;
          int v286 = *v282++;
          *v13++ = v286;
          --v284;
        }
        while (v284);
LABEL_121:
        uint64_t v287 = a13;
        *(float32x4_t *)(a13 + 32) = v340;
        if (v177 != 3)
        {
          if (v177 != 2)
          {
            float32x4_t v288 = 0uLL;
            float32x4_t v289 = 0uLL;
            int v290 = a5;
            if (v177 == 1)
            {
              float32x4_t v288 = v355;
              float32x4_t v289 = v352;
              if (!a5) {
                goto LABEL_142;
              }
LABEL_138:
              *(float32x4_t *)uint64_t v287 = v288;
              *(float32x4_t *)(v287 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v289;
              uint64_t result = 2;
              *(float32x2_t *)(v287 + 64) = v176;
              return result;
            }
LABEL_137:
            if (!v290) {
              goto LABEL_142;
            }
            goto LABEL_138;
          }
          float32x4_t v304 = vsubq_f32(v358, v346);
          float32x4_t v305 = vsubq_f32(vsubq_f32(v359, v346), v304);
          float32x4_t v306 = vmulq_f32(v305, v305);
          v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
          float32x2_t v307 = vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32);
          float32x2_t v308 = vrecpe_f32(v307);
          int v309 = 4;
          do
          {
            float32x2_t v308 = vmul_f32(v308, vrecps_f32(v307, v308));
            --v309;
          }
          while (v309);
          float32x4_t v310 = vnegq_f32(v304);
          v310.i32[3] = 0;
          float32x4_t v311 = vmulq_f32(v310, v305);
          v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
          v310.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v307), (int8x8_t)v308, 0), vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32)).u32[0];
          float32x4_t v288 = vmlaq_n_f32(v355, vsubq_f32(v356, v355), v310.f32[0]);
          v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
          float32x4_t v289 = vmlaq_n_f32(v352, vsubq_f32(v353, v352), v310.f32[0]);
          v289.i64[1] = vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL).u32[0];
          if (a5) {
            goto LABEL_138;
          }
LABEL_142:
          int8x16_t v312 = (int8x16_t)vmlsq_lane_f32(v288, v172, v333, 0);
          v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
          int8x16_t v313 = (int8x16_t)vmlaq_n_f32(v289, v172, v334);
          v313.i64[1] = vextq_s8(v313, v313, 8uLL).u32[0];
          *(int8x16_t *)uint64_t v287 = v312;
          *(int8x16_t *)(v287 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v313;
          *(float32x2_t *)(v287 + 64) = vsub_f32(v176, v281);
          return 2;
        }
        v344.i64[0] = 0;
        float32x2_t v347 = 0;
        physx::Gu::barycentricCoordinates(&v346, &v358, &v359, v360, (float32x2_t *)&v344, &v347);
        float32x4_t v172 = v340;
        float32x2_t v176 = v342;
        float32x2_t v281 = v337;
        float32x4_t v299 = vmulq_n_f32(vsubq_f32(v356, v355), v344.f32[0]);
        v299.i32[3] = 0;
        float32x4_t v300 = vmulq_n_f32(vsubq_f32(v357, v355), v347.f32[0]);
        v300.i32[3] = 0;
        float32x4_t v301 = vaddq_f32(v299, v300);
        float32x4_t v302 = vmulq_n_f32(vsubq_f32(v353, v352), v344.f32[0]);
        v302.i32[3] = 0;
        float32x4_t v288 = vaddq_f32(v355, v301);
        float32x4_t v303 = vmulq_n_f32(vsubq_f32(v354, v352), v347.f32[0]);
        v303.i32[3] = 0;
        float32x4_t v289 = vaddq_f32(v352, vaddq_f32(v302, v303));
      }
      else
      {
        uint64_t v287 = a13;
        *(float32x4_t *)(a13 + 32) = v340;
        float32x4_t v288 = 0uLL;
        float32x4_t v289 = 0uLL;
      }
      int v290 = a5;
      goto LABEL_137;
    }
    *(&v355 + v345) = v339;
    *(&v352 + v177) = v173;
    unsigned int v345 = v177 + 1;
    *(&v358 + v177) = v63;
    if (v177 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v358, &v355, &v352, &v350, &v348, (int *)&v345);
      float32x2_t v176 = v342;
LABEL_66:
      float32x4_t v82 = v338;
      goto LABEL_101;
    }
    if (v177 == 2)
    {
      float32x4_t v63 = v358;
      float32x4_t v186 = vsubq_f32(v359, v358);
      float32x4_t v187 = vsubq_f32(v360[0], v358);
      int8x8_t v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v186.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 4uLL), *(float32x2_t *)v187.f32);
      *(int8x8_t *)v188.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL), *(float32x2_t *)v187.f32), *(float32x2_t *)v186.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL)), 4uLL);
      v189.i32[1] = 0;
      unsigned int v345 = 3;
      float32x2_t v190 = vpadd_f32(vmul_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32), vmul_f32((float32x2_t)v189.u32[0], (float32x2_t)v189.u32[0]));
      float32x2_t v191 = vpadd_f32(v190, v190);
      if (v191.f32[0] <= 0.00000011921)
      {
        unsigned int v345 = 2;
        float32x4_t v228 = vmulq_f32(v186, v186);
        v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
        float32x2_t v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v229), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
        {
          float32x4_t v230 = vnegq_f32(v358);
          v230.i32[3] = 0;
          float32x4_t v231 = vmulq_f32(v230, v186);
          v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
          float32x2_t v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
          float32x2_t v233 = vrecpe_f32(v229);
          int v234 = 4;
          float32x4_t v82 = v338;
          do
          {
            float32x2_t v233 = vmul_f32(v233, vrecps_f32(v229, v233));
            --v234;
          }
          while (v234);
          float32x4_t v63 = vmlaq_n_f32(v358, v186, vmax_f32(vmin_f32(vmul_f32(v232, v233), _D9), 0).f32[0]);
LABEL_81:
          v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v345 = 1;
        goto LABEL_66;
      }
      if (v191.f32[0] == 0.0)
      {
        float32x4_t v63 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v188.u32[2] = v189;
      float32x2_t v192 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u64[0];
      float32x2_t v193 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 8uLL).u64[0];
      float32x2_t v194 = (float32x2_t)vextq_s8((int8x16_t)v360[0], (int8x16_t)v360[0], 4uLL).u64[0];
      float32x2_t v195 = (float32x2_t)vextq_s8((int8x16_t)v359, (int8x16_t)v359, 4uLL).u64[0];
      int8x8_t v196 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v359.f32, v194), v195, *(float32x2_t *)v360[0].f32);
      *(int8x8_t *)v197.f32 = vext_s8(v196, (int8x8_t)vmls_f32(vmul_f32(v192, *(float32x2_t *)v360[0].f32), *(float32x2_t *)v359.f32, v193), 4uLL);
      v197.i64[1] = v196.u32[0];
      float32x2_t v198 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u64[0];
      float32x2_t v199 = (float32x2_t)vextq_s8((int8x16_t)v358, (int8x16_t)v358, 4uLL).u64[0];
      int8x8_t v200 = (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v360[0].f32), v194, *(float32x2_t *)v358.f32);
      *(int8x8_t *)v201.f32 = vext_s8(v200, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v193), *(float32x2_t *)v360[0].f32, v198), 4uLL);
      v201.i64[1] = v200.u32[0];
      int8x8_t v202 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v358.f32, v195), v199, *(float32x2_t *)v359.f32);
      *(int8x8_t *)v203.f32 = vext_s8(v202, (int8x8_t)vmls_f32(vmul_f32(v198, *(float32x2_t *)v359.f32), *(float32x2_t *)v358.f32, v192), 4uLL);
      v203.i64[1] = v202.u32[0];
      float32x4_t v204 = vmulq_f32(v197, v188);
      v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
      float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
      float32x4_t v206 = vmulq_f32(v201, v188);
      v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
      float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
      float32x4_t v208 = vmulq_f32(v203, v188);
      v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
      float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vcgez_f32(v205)), (int8x8_t)vcgez_f32(v209)), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
      {
        float32x4_t v210 = vnegq_f32(v358);
        v210.i32[3] = 0;
        float32x4_t v211 = vnegq_f32(v359);
        v211.i32[3] = 0;
        float32x4_t v212 = vmulq_f32(v210, v186);
        v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
        float32x2_t v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
        float32x4_t v214 = vmulq_f32(v186, v211);
        v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
        float32x2_t v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v213), (int8x8_t)vclez_f32(v215)), (int8x8_t)vclez_f32(v209)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
        {
          float32x2_t v240 = vsub_f32(v213, v215);
          float32x2_t v241 = vrecpe_f32(v240);
          int v242 = 4;
          do
          {
            float32x2_t v241 = vmul_f32(v241, vrecps_f32(v240, v241));
            --v242;
          }
          while (v242);
          uint64_t v227 = 0;
          float32x4_t v63 = vmlaq_n_f32(v358, v186, vmul_f32(v213, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x3400000034000000), (int8x8_t)v241, 0)).f32[0]);
          v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
          unsigned int v243 = 2;
          uint64_t v226 = 1;
        }
        else
        {
          float32x4_t v216 = vnegq_f32(v360[0]);
          v216.i32[3] = 0;
          float32x4_t v217 = vmulq_f32(v211, v187);
          v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
          float32x2_t v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
          float32x4_t v219 = vmulq_f32(v186, v216);
          v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
          float32x2_t v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
          float32x4_t v221 = vmulq_f32(v187, v216);
          v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
          float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v218, v215), (int8x8_t)vcge_f32(v220, v222)), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v358.f32).u32[0] != -1)
          {
            float32x4_t v223 = vmulq_f32(v210, v187);
            v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
            float32x2_t v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v224), (int8x8_t)vclez_f32(v222)), (int8x8_t)vclez_f32(v207)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
            {
              float32x2_t v249 = vsub_f32(v224, v222);
              float32x2_t v250 = vrecpe_f32(v249);
              int v251 = 4;
              float32x4_t v82 = v338;
              do
              {
                float32x2_t v250 = vmul_f32(v250, vrecps_f32(v249, v250));
                --v251;
              }
              while (v251);
              uint64_t v227 = 0;
              float32x4_t v63 = vmlaq_n_f32(v358, v187, vmul_f32(v224, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v249), (float32x2_t)0x3400000034000000), (int8x8_t)v250, 0)).f32[0]);
              v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
              uint64_t v226 = 2;
              unsigned int v243 = 2;
            }
            else
            {
              float32x4_t v82 = v338;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v224), (int8x8_t)vclez_f32(v213)), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
              {
                uint64_t v227 = 0;
                uint64_t v226 = 1;
              }
              else
              {
                *(int16x4_t *)v63.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v215, v218), (int8x8_t)vcgez_f32(v215)), 0);
                *(int8x8_t *)v63.f32 = vuzp1_s8(*(int8x8_t *)v63.f32, *(int8x8_t *)v63.f32);
                __int32 v225 = v63.i32[0];
                float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v63, v332), 0), (int8x16_t)v359, (int8x16_t)v360[0]);
                uint64_t v226 = 1;
                if (v225 == -1) {
                  uint64_t v227 = 1;
                }
                else {
                  uint64_t v227 = 2;
                }
              }
              unsigned int v243 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v244 = vsub_f32(v218, v215);
          float32x2_t v245 = vadd_f32(v244, vsub_f32(v220, v222));
          float32x2_t v246 = vrecpe_f32(v245);
          int v247 = 4;
          do
          {
            float32x2_t v246 = vmul_f32(v246, vrecps_f32(v245, v246));
            --v247;
          }
          while (v247);
          int8x16_t v248 = (int8x16_t)vmlaq_n_f32(v359, vsubq_f32(v360[0], v359), vmul_f32(v244, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v245), (float32x2_t)0x3400000034000000), (int8x8_t)v246, 0)).f32[0]);
          v248.i64[1] = vextq_s8(v248, v248, 8uLL).u32[0];
          uint64_t v226 = 2;
          float32x4_t v63 = (float32x4_t)v248;
          uint64_t v227 = 1;
          unsigned int v243 = 2;
        }
        float32x4_t v82 = v338;
LABEL_100:
        float32x4_t v252 = *(&v358 + v227);
        float32x4_t v253 = *(&v358 + v226);
        float32x4_t v254 = *(&v355 + v227);
        float32x4_t v255 = *(&v355 + v226);
        float32x4_t v256 = *(&v352 + v227);
        float32x4_t v257 = *(&v352 + v226);
        int v258 = *(&v350 + v227);
        int v259 = *(&v350 + v226);
        int v260 = *(&v348 + v227);
        int v261 = *(&v348 + v226);
        float32x4_t v358 = v252;
        float32x4_t v359 = v253;
        float32x4_t v355 = v254;
        float32x4_t v356 = v255;
        float32x4_t v352 = v256;
        float32x4_t v353 = v257;
        int v350 = v258;
        int v351 = v259;
        int v348 = v260;
        int v349 = v261;
        unsigned int v345 = v243;
        goto LABEL_101;
      }
      int8x16_t v235 = (int8x16_t)vmulq_f32(v358, v188);
      float32x2_t v236 = (float32x2_t)vextq_s8(v235, v235, 8uLL).u64[0];
      float32x2_t v237 = vrecpe_f32(v191);
      int v238 = 4;
      float32x4_t v82 = v338;
      do
      {
        float32x2_t v237 = vmul_f32(v237, vrecps_f32(v191, v237));
        --v238;
      }
      while (v238);
      float32x2_t v239 = vpadd_f32(*(float32x2_t *)v235.i8, v236);
      float32x4_t v63 = vmulq_n_f32(v188, vmul_f32(v237, vpadd_f32(v239, v239)).f32[0]);
      v63.i32[3] = 0;
    }
    else
    {
      float32x4_t v82 = v338;
      if (v177 == 1)
      {
        float32x4_t v63 = v358;
        float32x4_t v178 = vsubq_f32(v359, v358);
        float32x4_t v179 = vmulq_f32(v178, v178);
        v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
        float32x2_t v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v180), 0), *(int8x8_t *)v358.f32).u32[0] == -1)
        {
          unsigned int v345 = 1;
          goto LABEL_101;
        }
        float32x4_t v181 = vnegq_f32(v358);
        v181.i32[3] = 0;
        float32x4_t v182 = vmulq_f32(v181, v178);
        v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
        float32x2_t v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
        float32x2_t v184 = vrecpe_f32(v180);
        int v185 = 4;
        do
        {
          float32x2_t v184 = vmul_f32(v184, vrecps_f32(v180, v184));
          --v185;
        }
        while (v185);
        float32x4_t v63 = vmlaq_n_f32(v358, v178, vmax_f32(vmin_f32(vmul_f32(v183, v184), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v346 = v63;
    float32x4_t v262 = vmulq_f32(v63, v63);
    v262.i64[0] = vpaddq_f32(v262, v262).u64[0];
    float32x2_t v263 = vpadd_f32(*(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32);
    float32x2_t v264 = vrsqrte_f32(v263);
    int v265 = 4;
    do
    {
      float32x2_t v264 = vmul_f32(v264, vrsqrts_f32(vmul_f32(v264, v264), v263));
      --v265;
    }
    while (v265);
    float32x2_t v80 = vmul_f32(v263, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v263), 0), (int8x8_t)_D9, (int8x8_t)v264));
    float32x2_t v266 = vrecpe_f32(v80);
    int v267 = 4;
    do
    {
      float32x2_t v266 = vmul_f32(v266, vrecps_f32(v80, v266));
      --v267;
    }
    while (v267);
    float32x4_t v268 = vmulq_n_f32(v63, v266.f32[0]);
    v268.i32[3] = 0;
    float32x4_t v340 = v268;
    *(int32x2_t *)v268.f32 = vcgt_f32(v176, v80);
    int32x4_t v165 = vdupq_lane_s32(*(int32x2_t *)v268.f32, 0);
    int32x4_t v81 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v80, v25), *(int8x8_t *)v268.f32), 0);
  }
  int8x8_t v269 = (int8x8_t)vmovn_s32(vceqzq_s32(v165));
  uint64_t v270 = v345;
  if (vuzp1_s8(v269, v269).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v345;
      if (v270)
      {
        float32x2_t v271 = &v348;
        uint64_t v272 = &v350;
        do
        {
          int v273 = *v272++;
          *v14++ = v273;
          int v274 = *v271++;
          *v13++ = v274;
          --v270;
        }
        while (v270);
      }
    }
    return 5;
  }
  float32x2_t v291 = v337;
  if (v14)
  {
    uint64_t v292 = v345 - 1;
    *a8 = v345 - 1;
    if (v270 != 1)
    {
      float32x4_t v293 = &v348;
      float32x4_t v294 = &v350;
      do
      {
        int v295 = *v294++;
        *v14++ = v295;
        int v296 = *v293++;
        *v13++ = v296;
        --v292;
      }
      while (v292);
      goto LABEL_130;
    }
LABEL_133:
    float32x4_t v297 = v355;
    float32x4_t v298 = v352;
  }
  else
  {
LABEL_130:
    float32x4_t v346 = v82;
    if (v270 == 3)
    {
      v344.i64[0] = 0;
      float32x2_t v347 = 0;
      float32x4_t v343 = v82;
      physx::Gu::barycentricCoordinates(&v346, &v358, &v359, v360, (float32x2_t *)&v344, &v347);
      float32x2_t v291 = v337;
      float32x4_t v314 = vmulq_n_f32(vsubq_f32(v356, v355), v344.f32[0]);
      v314.i32[3] = 0;
      float32x4_t v315 = vmulq_n_f32(vsubq_f32(v357, v355), v347.f32[0]);
      v315.i32[3] = 0;
      float32x4_t v316 = vaddq_f32(v314, v315);
      float32x4_t v317 = vmulq_n_f32(vsubq_f32(v353, v352), v344.f32[0]);
      v317.i32[3] = 0;
      float32x4_t v297 = vaddq_f32(v355, v316);
      float32x4_t v318 = vmulq_n_f32(vsubq_f32(v354, v352), v347.f32[0]);
      float32x4_t v82 = v343;
      v318.i32[3] = 0;
      float32x4_t v298 = vaddq_f32(v352, vaddq_f32(v317, v318));
    }
    else if (v270 == 2)
    {
      float32x4_t v319 = vsubq_f32(v358, v82);
      float32x4_t v320 = vsubq_f32(vsubq_f32(v359, v82), v319);
      float32x4_t v321 = vmulq_f32(v320, v320);
      v321.i64[0] = vpaddq_f32(v321, v321).u64[0];
      float32x2_t v322 = vpadd_f32(*(float32x2_t *)v321.f32, *(float32x2_t *)v321.f32);
      float32x2_t v323 = vrecpe_f32(v322);
      int v324 = 4;
      do
      {
        float32x2_t v323 = vmul_f32(v323, vrecps_f32(v322, v323));
        --v324;
      }
      while (v324);
      float32x4_t v325 = vnegq_f32(v319);
      v325.i32[3] = 0;
      float32x4_t v326 = vmulq_f32(v325, v320);
      v326.i64[0] = vpaddq_f32(v326, v326).u64[0];
      v325.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v322), (int8x8_t)v323, 0), vpadd_f32(*(float32x2_t *)v326.f32, *(float32x2_t *)v326.f32)).u32[0];
      float32x4_t v297 = vmlaq_n_f32(v355, vsubq_f32(v356, v355), v325.f32[0]);
      v297.i64[1] = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u32[0];
      float32x4_t v298 = vmlaq_n_f32(v352, vsubq_f32(v353, v352), v325.f32[0]);
      v298.i64[1] = vextq_s8((int8x16_t)v298, (int8x16_t)v298, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v297 = 0uLL;
      float32x4_t v298 = 0uLL;
      if (v270 == 1) {
        goto LABEL_133;
      }
    }
  }
  float32x2_t v327 = vrecpe_f32(i);
  int v328 = 4;
  do
  {
    float32x2_t v327 = vmul_f32(v327, vrecps_f32(i, v327));
    --v328;
  }
  while (v328);
  float32x4_t v329 = vmulq_n_f32(v82, v327.f32[0]);
  v329.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v329;
  *(float32x4_t *)(a13 + 48) = v340;
  if (a5)
  {
    *(float32x4_t *)a13 = v297;
    *(float32x4_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v298;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    int8x16_t v330 = (int8x16_t)vmlsq_lane_f32(v297, v329, v333, 0);
    v330.i64[1] = vextq_s8(v330, v330, 8uLL).u32[0];
    int8x16_t v331 = (int8x16_t)vmlaq_n_f32(v298, v329, v334);
    v331.i64[1] = vextq_s8(v331, v331, 8uLL).u32[0];
    *(int8x16_t *)a13 = v330;
    *(int8x16_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v331;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v291);
    if (vcge_f32(v291, i).u32[0]) {
      return 2;
    }
  }
  return 4;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t *)(*(void *)(a1 + 8) + 48);
  int8x16_t v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(void *)&double result = vbslq_s8(physx::boxVertexTable[a2], (int8x16_t)v2, v3).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::support(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2 = *(float32x4_t *)(*(void *)(a1 + 8) + 48);
  int8x16_t v3 = (int8x16_t)vnegq_f32(v2);
  v3.i32[3] = 0;
  *(void *)&double result = vbslq_s8((int8x16_t)vcgtzq_f32(*a2), (int8x16_t)v2, v3).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::BoxV>::support(uint64_t a1, float32x4_t *a2, unsigned __int32 *a3)
{
  int8x16_t v3 = *(float32x4_t **)(a1 + 8);
  int8x16_t v4 = (int8x16_t)vcgtzq_f32(*a2);
  int32x4_t v5 = (int32x4_t)vandq_s8(v4, (int8x16_t)xmmword_2343978C0);
  v5.i64[0] = vpaddq_s32(v5, v5).u64[0];
  *a3 = vpadd_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v5.i8).u32[0] & 7;
  float32x4_t v6 = v3[3];
  int8x16_t v7 = (int8x16_t)vnegq_f32(v6);
  v7.i32[3] = 0;
  *(void *)&double result = vbslq_s8(v4, (int8x16_t)v6, v7).u64[0];
  return result;
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::BoxV>::getSweepMargin(uint64_t a1)
{
  uint64_t v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::BoxV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(void *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::BoxV>::~LocalConvex()
{
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  uint64_t v14 = a7;
  float32x4_t v15 = a6;
  uint64_t v348 = *MEMORY[0x263EF8340];
  uint64_t v18 = *(void *)(a1 + 8);
  float32x2_t v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float v21 = *(float32x4_t **)(a2 + 8);
  float32x2_t v22 = &v21[1].f32[1];
  float32x2_t v23 = vld1_dup_f32(v22);
  float32x2_t v24 = vmin_f32(v20, v23);
  float32x2_t v25 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v26 = vmul_f32(v24, v25);
  v24.i32[0] = *(_DWORD *)(v18 + 16);
  v25.i32[0] = v21[1].i32[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  int32x2_t v27 = (int32x2_t)vand_s8(a11, (int8x8_t)v24);
  float32x2_t v28 = (float32x2_t)vdup_lane_s32(v27, 0);
  v27.i32[0] = -v21[2].i8[0];
  float32x2_t v29 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v27, (int8x8_t)v25), 0);
  float32x2_t v319 = v28;
  float v320 = v29.f32[0];
  *(float32x2_t *)&long long v13 = vadd_f32(v28, v29);
  uint64_t v30 = *a4;
  float32x4_t v332 = 0uLL;
  unsigned int v331 = 0;
  uint64_t v31 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  long long v323 = v13;
  if (!*a8)
  {
    float32x4_t v52 = vmulq_f32(*a3, *a3);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v332 = v44;
    float32x4_t v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x2_t v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    float32x2_t v55 = vrsqrte_f32(v54);
    int v56 = 4;
    do
    {
      float32x2_t v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    float32x2_t v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D9, (int8x8_t)v55));
    float32x2_t v58 = vrecpe_f32(v57);
    int v59 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v57, v58);
      float32x2_t v58 = vmul_f32(v58, *(float32x2_t *)a12.f32);
      --v59;
    }
    while (v59);
    float32x4_t v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    float32x4_t v63 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v37 = 0;
  uint64_t v38 = v18 + 48;
  float32x4_t v39 = v21[3];
  int8x16_t v40 = (int8x16_t)vnegq_f32(v39);
  v40.i32[3] = 0;
  do
  {
    uint64_t v41 = a6[v37];
    *(&v337 + v37) = v41;
    uint64_t v42 = a7[v37];
    *(&v335 + v37) = v42;
    a12 = *(float32x4_t *)(v38 + 16 * (1 - v41));
    float32x4_t v43 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v42], (int8x16_t)v39, v40);
    float32x4_t v44 = vsubq_f32(a12, v43);
    *(&v342 + v37) = a12;
    *(&v339 + v37) = v43;
    *(&v345 + v37++) = v44;
  }
  while (v31 != v37);
  unsigned int v331 = v31;
  switch(v37)
  {
    case 4:
      int v327 = v30;
      physx::Gu::closestPtPointTetrahedron(&v345, &v342, &v339, &v337, &v335, (int *)&v331);
      LODWORD(v3physx::Sq::AABBTree::release(this, 0) = v327;
      long long v13 = v323;
      goto LABEL_49;
    case 3:
      unsigned int v331 = 3;
      float32x4_t v44 = v345;
      a12 = vsubq_f32(v346, v345);
      float32x4_t v64 = vsubq_f32((float32x4_t)v347[0], v345);
      int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      float32x2_t v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      float32x2_t v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          float32x4_t v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          float32x2_t v69 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).u64[0];
          float32x2_t v70 = (float32x2_t)vextq_s8(v347[0], v347[0], 8uLL).u64[0];
          float32x2_t v71 = (float32x2_t)vextq_s8(v347[0], v347[0], 4uLL).u64[0];
          float32x2_t v72 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 4uLL).u64[0];
          int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v71), v72, *(float32x2_t *)v347[0].i8);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v347[0].i8), *(float32x2_t *)v346.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v347[0].i8), v71, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v70), *(float32x2_t *)v347[0].i8, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v72), v76, *(float32x2_t *)v346.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v346.f32), *(float32x2_t *)v345.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x4_t v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          float32x4_t v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          float32x4_t v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
          {
            int8x16_t v112 = (int8x16_t)vmulq_f32(v345, v65);
            float32x2_t v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            float32x2_t v114 = vrecpe_f32(v68);
            int v115 = 4;
            do
            {
              float32x2_t v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            float32x2_t v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            float32x4_t v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            float32x4_t v87 = vnegq_f32(v345);
            v87.i32[3] = 0;
            float32x4_t v88 = vnegq_f32(v346);
            v88.i32[3] = 0;
            float32x4_t v89 = vmulq_f32(v87, a12);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            float32x4_t v91 = vmulq_f32(a12, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
            {
              float32x2_t v117 = vsub_f32(v90, v92);
              float32x2_t v118 = vrecpe_f32(v117);
              int v119 = 4;
              do
              {
                float32x2_t v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              uint64_t v104 = 0;
              float32x4_t v44 = vmlaq_n_f32(v345, a12, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              unsigned int v120 = 2;
              uint64_t v103 = 1;
            }
            else
            {
              float32x4_t v93 = vnegq_f32((float32x4_t)v347[0]);
              v93.i32[3] = 0;
              float32x4_t v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              float32x4_t v96 = vmulq_f32(a12, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              float32x4_t v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
              {
                float32x2_t v121 = vsub_f32(v95, v92);
                float32x2_t v122 = vadd_f32(v121, vsub_f32(v97, v99));
                float32x2_t v123 = vrecpe_f32(v122);
                int v124 = 4;
                do
                {
                  float32x2_t v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                int8x16_t v125 = (int8x16_t)vmlaq_n_f32(v346, vsubq_f32((float32x4_t)v347[0], v346), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                unsigned int v120 = 2;
                uint64_t v104 = 1;
                uint64_t v103 = 2;
                float32x4_t v44 = (float32x4_t)v125;
              }
              else
              {
                float32x4_t v100 = vmulq_f32(v87, v64);
                int32x4_t v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                {
                  float32x2_t v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  float32x2_t v127 = vrecpe_f32(v126);
                  int v128 = 4;
                  do
                  {
                    float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  uint64_t v104 = 0;
                  float32x4_t v44 = vmlaq_n_f32(v345, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  uint64_t v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                {
                  uint64_t v104 = 0;
                  uint64_t v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  __int32 v102 = v44.i32[0];
                  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v346, v347[0]);
                  uint64_t v103 = 1;
                  if (v102 == -1) {
                    uint64_t v104 = 1;
                  }
                  else {
                    uint64_t v104 = 2;
                  }
                }
                unsigned int v120 = v103;
              }
            }
            float32x4_t v129 = *(&v345 + v104);
            float32x4_t v130 = *(&v345 + v103);
            a12 = *(&v342 + v104);
            float32x4_t v131 = *(&v342 + v103);
            float32x4_t v132 = *(&v339 + v104);
            float32x4_t v133 = *(&v339 + v103);
            int v134 = *(&v337 + v104);
            int v135 = *(&v337 + v103);
            int v136 = *(&v335 + v104);
            int v137 = *(&v335 + v103);
            float32x4_t v345 = v129;
            float32x4_t v346 = v130;
            float32x4_t v342 = a12;
            float32x4_t v343 = v131;
            float32x4_t v339 = v132;
            float32x4_t v340 = v133;
            int v337 = v134;
            int v338 = v135;
            int v335 = v136;
            int v336 = v137;
            unsigned int v331 = v120;
          }
        }
        goto LABEL_49;
      }
      unsigned int v331 = 2;
      float32x4_t v105 = vmulq_f32(a12, a12);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
      {
        float32x4_t v107 = vnegq_f32(v345);
        v107.i32[3] = 0;
        float32x4_t v108 = vmulq_f32(v107, a12);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        float32x2_t v110 = vrecpe_f32(v106);
        int v111 = 4;
        do
        {
          float32x2_t v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        float32x4_t v44 = vmlaq_n_f32(v345, a12, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v44 = v345;
      float32x4_t v45 = vsubq_f32(v346, v345);
      float32x4_t v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      float32x2_t v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
      {
        float32x4_t v48 = vnegq_f32(v345);
        v48.i32[3] = 0;
        float32x4_t v49 = vmulq_f32(v48, v45);
        a12 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        float32x2_t v50 = vrecpe_f32(v47);
        int v51 = 4;
        do
        {
          float32x2_t v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        float32x4_t v44 = vmlaq_n_f32(v345, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v50), _D9), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v331 = 1;
LABEL_49:
  float32x4_t v332 = v44;
  float32x4_t v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  float32x2_t v140 = vrsqrte_f32(v139);
  int v141 = 4;
  do
  {
    float32x2_t v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  float32x2_t v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D9, (int8x8_t)v140));
  float32x2_t v142 = vrecpe_f32(v61);
  int v143 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v61, v142);
    float32x2_t v142 = vmul_f32(v142, *(float32x2_t *)a12.f32);
    --v143;
  }
  while (v143);
  float32x4_t v60 = vmulq_n_f32(v44, v142.f32[0]);
  v60.i32[3] = 0;
  int32x4_t v62 = vdupq_lane_s32(vcgt_f32(v61, v26), 0);
  float32x4_t v63 = v44;
LABEL_54:
  float v144 = *(float *)&v30 + *(float *)&v13;
  v145.i64[0] = -1;
  v145.i64[1] = -1;
  int8x16_t v146 = (int8x16_t)xmmword_2343978C0;
  a12.i32[0] = -1;
  int32x4_t v318 = (int32x4_t)a12;
  float32x2_t v147 = v61;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    float32x4_t v149 = v44;
    int8x8_t v150 = (int8x8_t)vmovn_s32(vceqq_s32(v62, v145));
    if (vuzp1_s8(v150, v150).u32[0] != -1) {
      break;
    }
    *(float32x2_t *)&long long v13 = v61;
    float32x4_t v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    uint64_t v152 = v331;
    int v153 = *(float32x4_t **)(a1 + 8);
    float32x4_t v154 = vmulq_f32(v151, v153[3]);
    v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
    float32x4_t v155 = vmulq_f32(v151, v153[4]);
    v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
    *(int8x8_t *)v155.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v154.f32), vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32)), (int8x8_t)0x100000001);
    *(&v337 + v331) = v155.i32[0];
    float32x4_t v156 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v155.f32, 0), 0x1FuLL)), (int8x16_t)v153[3], (int8x16_t)v153[4]);
    float32x4_t v157 = *(float32x4_t **)(a2 + 8);
    int8x16_t v158 = (int8x16_t)vcgtzq_f32(v149);
    int32x4_t v159 = (int32x4_t)vandq_s8(v158, v146);
    v159.i64[0] = vpaddq_s32(v159, v159).u64[0];
    *(&v335 + v152) = vpadd_s32(*(int32x2_t *)v159.i8, *(int32x2_t *)v159.i8).u8[0] & 7;
    float32x4_t v160 = v157[3];
    int8x16_t v161 = (int8x16_t)vnegq_f32(v160);
    v161.i32[3] = 0;
    float32x4_t v162 = (float32x4_t)vbslq_s8(v158, (int8x16_t)v160, v161);
    float32x4_t v44 = vsubq_f32(v156, v162);
    float32x4_t v163 = vmulq_f32(v60, v44);
    v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
    float v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32).f32[0];
    if (v164 > v144)
    {
      if (v15)
      {
        *a8 = v152;
        if (v152)
        {
          float32x2_t v263 = &v335;
          float32x2_t v264 = &v337;
          do
          {
            int v265 = *v264++;
            *v15++ = v265;
            int v266 = *v263++;
            *v14++ = v266;
            --v152;
          }
          while (v152);
        }
      }
      return 0;
    }
    if (v164 > (float)(0.99977 * *(float *)&v13))
    {
      float32x2_t v267 = (float32x2_t)v323;
      if (!v15) {
        goto LABEL_119;
      }
      *a8 = v152;
      if (v152)
      {
        float32x4_t v268 = &v335;
        int8x8_t v269 = &v337;
        uint64_t v270 = v152;
        do
        {
          int v271 = *v269++;
          *v15++ = v271;
          int v272 = *v268++;
          *v14++ = v272;
          --v270;
        }
        while (v270);
LABEL_119:
        int v273 = (float32x4_t *)a13;
        *(float32x4_t *)(a13 + 32) = v60;
        if (v152 != 3)
        {
          if (v152 != 2)
          {
            float32x4_t v274 = 0uLL;
            float32x4_t v275 = 0uLL;
            int v276 = a5;
            if (v152 == 1)
            {
              float32x4_t v274 = v342;
              float32x4_t v275 = v339;
              if (!a5) {
                goto LABEL_140;
              }
LABEL_136:
              *int v273 = v274;
              v273[1] = v275;
              uint64_t result = 2;
              v273[4].i64[0] = v13;
              return result;
            }
LABEL_135:
            if (!v276) {
              goto LABEL_140;
            }
            goto LABEL_136;
          }
          float32x4_t v290 = vsubq_f32(v345, v149);
          float32x4_t v291 = vsubq_f32(vsubq_f32(v346, v149), v290);
          float32x4_t v292 = vmulq_f32(v291, v291);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          float32x2_t v293 = vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32);
          float32x2_t v294 = vrecpe_f32(v293);
          int v295 = 4;
          do
          {
            float32x2_t v294 = vmul_f32(v294, vrecps_f32(v293, v294));
            --v295;
          }
          while (v295);
          float32x4_t v296 = vnegq_f32(v290);
          v296.i32[3] = 0;
          float32x4_t v297 = vmulq_f32(v296, v291);
          v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
          v296.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v293), (int8x8_t)v294, 0), vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32)).u32[0];
          float32x4_t v274 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v296.f32[0]);
          v274.i64[1] = vextq_s8((int8x16_t)v274, (int8x16_t)v274, 8uLL).u32[0];
          float32x4_t v275 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v296.f32[0]);
          v275.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
          if (a5) {
            goto LABEL_136;
          }
LABEL_140:
          int8x16_t v298 = (int8x16_t)vmlsq_lane_f32(v274, v60, v319, 0);
          v298.i64[1] = vextq_s8(v298, v298, 8uLL).u32[0];
          int8x16_t v299 = (int8x16_t)vmlaq_n_f32(v275, v60, v320);
          v299.i64[1] = vextq_s8(v299, v299, 8uLL).u32[0];
          *int v273 = (float32x4_t)v298;
          v273[1] = (float32x4_t)v299;
          *(float32x2_t *)v273[4].f32 = vsub_f32(*(float32x2_t *)&v13, v267);
          return 2;
        }
        float32x2_t v333 = 0;
        float32x2_t v334 = 0;
        float32x4_t v325 = v60;
        uint64_t v329 = v13;
        physx::Gu::barycentricCoordinates(&v332, &v345, &v346, (float32x4_t *)v347, &v334, &v333);
        float32x2_t v267 = (float32x2_t)v323;
        float32x4_t v285 = vmulq_n_f32(vsubq_f32(v343, v342), v334.f32[0]);
        v285.i32[3] = 0;
        float32x4_t v286 = vmulq_n_f32(vsubq_f32(v344, v342), v333.f32[0]);
        v286.i32[3] = 0;
        float32x4_t v287 = vaddq_f32(v285, v286);
        float32x4_t v288 = vmulq_n_f32(vsubq_f32(v340, v339), v334.f32[0]);
        v288.i32[3] = 0;
        float32x4_t v274 = vaddq_f32(v342, v287);
        float32x4_t v289 = vmulq_n_f32(vsubq_f32(v341, v339), v333.f32[0]);
        float32x4_t v60 = v325;
        *(void *)&long long v13 = v329;
        v289.i32[3] = 0;
        float32x4_t v275 = vaddq_f32(v339, vaddq_f32(v288, v289));
      }
      else
      {
        int v273 = (float32x4_t *)a13;
        *(float32x4_t *)(a13 + 32) = v60;
        float32x4_t v274 = 0uLL;
        float32x4_t v275 = 0uLL;
      }
      int v276 = a5;
      goto LABEL_135;
    }
    *(&v342 + v152) = v156;
    *(&v339 + v152) = v162;
    unsigned int v331 = v152 + 1;
    *(&v345 + v152) = v44;
    switch(v152)
    {
      case 3:
        float32x4_t v324 = v149;
        long long v328 = v13;
        physx::Gu::closestPtPointTetrahedron(&v345, &v342, &v339, &v337, &v335, (int *)&v331);
        int8x16_t v146 = (int8x16_t)xmmword_2343978C0;
        float32x4_t v149 = v324;
        v145.i64[0] = -1;
        v145.i64[1] = -1;
        long long v13 = v328;
        break;
      case 2:
        float32x4_t v44 = v345;
        float32x4_t v173 = vsubq_f32(v346, v345);
        float32x4_t v174 = vsubq_f32((float32x4_t)v347[0], v345);
        int8x8_t v176 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), *(float32x2_t *)v174.f32);
        *(int8x8_t *)v175.f32 = vext_s8(v176, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL), *(float32x2_t *)v174.f32), *(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL)), 4uLL);
        v176.i32[1] = 0;
        unsigned int v331 = 3;
        float32x2_t v177 = vpadd_f32(vmul_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vmul_f32((float32x2_t)v176.u32[0], (float32x2_t)v176.u32[0]));
        float32x2_t v178 = vpadd_f32(v177, v177);
        if (v178.f32[0] <= 0.00000011921)
        {
          unsigned int v331 = 2;
          float32x4_t v215 = vmulq_f32(v173, v173);
          v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
          float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v216), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
          {
LABEL_81:
            unsigned int v331 = 1;
            break;
          }
          float32x4_t v217 = vnegq_f32(v345);
          v217.i32[3] = 0;
          float32x4_t v218 = vmulq_f32(v217, v173);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          float32x2_t v220 = vrecpe_f32(v216);
          int v221 = 4;
          do
          {
            float32x2_t v220 = vmul_f32(v220, vrecps_f32(v216, v220));
            --v221;
          }
          while (v221);
          float32x4_t v44 = vmlaq_n_f32(v345, v173, vmax_f32(vmin_f32(vmul_f32(v219, v220), _D9), 0).f32[0]);
          goto LABEL_80;
        }
        if (v178.f32[0] == 0.0)
        {
          float32x4_t v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v175.u32[2] = v176;
          float32x2_t v179 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).u64[0];
          float32x2_t v180 = (float32x2_t)vextq_s8(v347[0], v347[0], 8uLL).u64[0];
          float32x2_t v181 = (float32x2_t)vextq_s8(v347[0], v347[0], 4uLL).u64[0];
          float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 4uLL).u64[0];
          int8x8_t v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v346.f32, v181), v182, *(float32x2_t *)v347[0].i8);
          *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(v179, *(float32x2_t *)v347[0].i8), *(float32x2_t *)v346.f32, v180), 4uLL);
          v184.i64[1] = v183.u32[0];
          float32x2_t v185 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          int8x8_t v187 = (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v347[0].i8), v181, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v180), *(float32x2_t *)v347[0].i8, v185), 4uLL);
          v188.i64[1] = v187.u32[0];
          int8x8_t v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v182), v186, *(float32x2_t *)v346.f32);
          *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v346.f32), *(float32x2_t *)v345.f32, v179), 4uLL);
          v190.i64[1] = v189.u32[0];
          float32x4_t v191 = vmulq_f32(v184, v175);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          float32x2_t v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          float32x4_t v193 = vmulq_f32(v188, v175);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          float32x4_t v195 = vmulq_f32(v190, v175);
          v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
          float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v194), (int8x8_t)vcgez_f32(v192)), (int8x8_t)vcgez_f32(v196)), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
          {
            float32x4_t v197 = vnegq_f32(v345);
            v197.i32[3] = 0;
            float32x4_t v198 = vnegq_f32(v346);
            v198.i32[3] = 0;
            float32x4_t v199 = vmulq_f32(v197, v173);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            float32x4_t v201 = vmulq_f32(v173, v198);
            v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
            float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v200), (int8x8_t)vclez_f32(v202)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
            {
              float32x2_t v227 = vsub_f32(v200, v202);
              float32x2_t v228 = vrecpe_f32(v227);
              int v229 = 4;
              do
              {
                float32x2_t v228 = vmul_f32(v228, vrecps_f32(v227, v228));
                --v229;
              }
              while (v229);
              uint64_t v214 = 0;
              float32x4_t v44 = vmlaq_n_f32(v345, v173, vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              unsigned int v230 = 2;
              uint64_t v213 = 1;
            }
            else
            {
              float32x4_t v203 = vnegq_f32((float32x4_t)v347[0]);
              v203.i32[3] = 0;
              float32x4_t v204 = vmulq_f32(v198, v174);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              float32x4_t v206 = vmulq_f32(v173, v203);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              float32x4_t v208 = vmulq_f32(v174, v203);
              v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
              float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v205, v202), (int8x8_t)vcge_f32(v207, v209)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
              {
                float32x2_t v231 = vsub_f32(v205, v202);
                float32x2_t v232 = vadd_f32(v231, vsub_f32(v207, v209));
                float32x2_t v233 = vrecpe_f32(v232);
                int v234 = 4;
                do
                {
                  float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                  --v234;
                }
                while (v234);
                int8x16_t v235 = (int8x16_t)vmlaq_n_f32(v346, vsubq_f32((float32x4_t)v347[0], v346), vmul_f32(v231, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
                v235.i64[1] = vextq_s8(v235, v235, 8uLL).u32[0];
                uint64_t v213 = 2;
                float32x4_t v44 = (float32x4_t)v235;
                uint64_t v214 = 1;
              }
              else
              {
                float32x4_t v210 = vmulq_f32(v197, v174);
                v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
                float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v211), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v345.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v211), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v345.f32).u32[0] == -1)
                  {
                    uint64_t v214 = 0;
                    uint64_t v213 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v202, v205), (int8x8_t)vcgez_f32(v202)), 0);
                    *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                    __int32 v212 = v44.i32[0];
                    float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v318), 0), (int8x16_t)v346, v347[0]);
                    uint64_t v213 = 1;
                    if (v212 == -1) {
                      uint64_t v214 = 1;
                    }
                    else {
                      uint64_t v214 = 2;
                    }
                  }
                  unsigned int v230 = 1;
                  goto LABEL_98;
                }
                float32x2_t v236 = vsub_f32(v211, v209);
                float32x2_t v237 = vrecpe_f32(v236);
                int v238 = 4;
                do
                {
                  float32x2_t v237 = vmul_f32(v237, vrecps_f32(v236, v237));
                  --v238;
                }
                while (v238);
                uint64_t v214 = 0;
                float32x4_t v44 = vmlaq_n_f32(v345, v174, vmul_f32(v211, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
                v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                uint64_t v213 = 2;
              }
              unsigned int v230 = 2;
            }
LABEL_98:
            float32x4_t v239 = *(&v345 + v214);
            float32x4_t v240 = *(&v345 + v213);
            float32x4_t v241 = *(&v342 + v214);
            float32x4_t v242 = *(&v342 + v213);
            float32x4_t v243 = *(&v339 + v214);
            float32x4_t v244 = *(&v339 + v213);
            int v245 = *(&v337 + v214);
            int v246 = *(&v337 + v213);
            int v247 = *(&v335 + v214);
            int v248 = *(&v335 + v213);
            float32x4_t v345 = v239;
            float32x4_t v346 = v240;
            float32x4_t v342 = v241;
            float32x4_t v343 = v242;
            float32x4_t v339 = v243;
            float32x4_t v340 = v244;
            int v337 = v245;
            int v338 = v246;
            int v335 = v247;
            int v336 = v248;
            unsigned int v331 = v230;
            break;
          }
          int8x16_t v222 = (int8x16_t)vmulq_f32(v345, v175);
          float32x2_t v223 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
          float32x2_t v224 = vrecpe_f32(v178);
          int v225 = 4;
          do
          {
            float32x2_t v224 = vmul_f32(v224, vrecps_f32(v178, v224));
            --v225;
          }
          while (v225);
          float32x2_t v226 = vpadd_f32(*(float32x2_t *)v222.i8, v223);
          float32x4_t v44 = vmulq_n_f32(v175, vmul_f32(v224, vpadd_f32(v226, v226)).f32[0]);
          v44.i32[3] = 0;
        }
        break;
      case 1:
        float32x4_t v44 = v345;
        float32x4_t v165 = vsubq_f32(v346, v345);
        float32x4_t v166 = vmulq_f32(v165, v165);
        v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
        float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v167), 0), *(int8x8_t *)v345.f32).u32[0] == -1)goto LABEL_81; {
        float32x4_t v168 = vnegq_f32(v345);
        }
        v168.i32[3] = 0;
        float32x4_t v169 = vmulq_f32(v168, v165);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        float32x2_t v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        float32x2_t v171 = vrecpe_f32(v167);
        int v172 = 4;
        do
        {
          float32x2_t v171 = vmul_f32(v171, vrecps_f32(v167, v171));
          --v172;
        }
        while (v172);
        float32x4_t v44 = vmlaq_n_f32(v345, v165, vmax_f32(vmin_f32(vmul_f32(v170, v171), _D9), 0).f32[0]);
LABEL_80:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        break;
    }
    float32x4_t v332 = v44;
    float32x4_t v249 = vmulq_f32(v44, v44);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
    float32x2_t v251 = vrsqrte_f32(v250);
    int v252 = 4;
    do
    {
      float32x2_t v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
      --v252;
    }
    while (v252);
    float32x2_t v61 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), (int8x8_t)_D9, (int8x8_t)v251));
    float32x2_t v253 = vrecpe_f32(v61);
    int v254 = 4;
    do
    {
      float32x2_t v253 = vmul_f32(v253, vrecps_f32(v61, v253));
      --v254;
    }
    while (v254);
    float32x4_t v60 = vmulq_n_f32(v44, v253.f32[0]);
    v60.i32[3] = 0;
    int32x2_t v255 = vcgt_f32(*(float32x2_t *)&v13, v61);
    int32x4_t v148 = vdupq_lane_s32(v255, 0);
    int32x4_t v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v26), (int8x8_t)v255), 0);
    float32x2_t v147 = (float32x2_t)v13;
    float32x4_t v63 = v149;
  }
  int8x8_t v256 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  uint64_t v257 = v331;
  if (vuzp1_s8(v256, v256).u32[0] != -1)
  {
    if (v15)
    {
      *a8 = v331;
      if (v257)
      {
        int v258 = &v335;
        int v259 = &v337;
        do
        {
          int v260 = *v259++;
          *v15++ = v260;
          int v261 = *v258++;
          *v14++ = v261;
          --v257;
        }
        while (v257);
      }
    }
    return 5;
  }
  float32x2_t v277 = (float32x2_t)v323;
  if (v15)
  {
    uint64_t v278 = v331 - 1;
    *a8 = v331 - 1;
    if (v257 != 1)
    {
      int v279 = &v335;
      int v280 = &v337;
      do
      {
        int v281 = *v280++;
        *v15++ = v281;
        int v282 = *v279++;
        *v14++ = v282;
        --v278;
      }
      while (v278);
      goto LABEL_128;
    }
LABEL_131:
    float32x4_t v283 = v342;
    float32x4_t v284 = v339;
  }
  else
  {
LABEL_128:
    float32x4_t v332 = v63;
    if (v257 == 3)
    {
      float32x2_t v333 = 0;
      float32x2_t v334 = 0;
      float32x4_t v326 = v60;
      float32x4_t v330 = v63;
      physx::Gu::barycentricCoordinates(&v332, &v345, &v346, (float32x4_t *)v347, &v334, &v333);
      float32x2_t v277 = (float32x2_t)v323;
      float32x4_t v300 = vmulq_n_f32(vsubq_f32(v343, v342), v334.f32[0]);
      v300.i32[3] = 0;
      float32x4_t v301 = vmulq_n_f32(vsubq_f32(v344, v342), v333.f32[0]);
      v301.i32[3] = 0;
      float32x4_t v302 = vaddq_f32(v300, v301);
      float32x4_t v303 = vmulq_n_f32(vsubq_f32(v340, v339), v334.f32[0]);
      v303.i32[3] = 0;
      float32x4_t v283 = vaddq_f32(v342, v302);
      float32x4_t v304 = vmulq_n_f32(vsubq_f32(v341, v339), v333.f32[0]);
      float32x4_t v60 = v326;
      float32x4_t v63 = v330;
      v304.i32[3] = 0;
      float32x4_t v284 = vaddq_f32(v339, vaddq_f32(v303, v304));
    }
    else if (v257 == 2)
    {
      float32x4_t v305 = vsubq_f32(v345, v63);
      float32x4_t v306 = vsubq_f32(vsubq_f32(v346, v63), v305);
      float32x4_t v307 = vmulq_f32(v306, v306);
      v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
      float32x2_t v308 = vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
      float32x2_t v309 = vrecpe_f32(v308);
      int v310 = 4;
      do
      {
        float32x2_t v309 = vmul_f32(v309, vrecps_f32(v308, v309));
        --v310;
      }
      while (v310);
      float32x4_t v311 = vnegq_f32(v305);
      v311.i32[3] = 0;
      float32x4_t v312 = vmulq_f32(v311, v306);
      v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
      v311.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v308), (int8x8_t)v309, 0), vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32)).u32[0];
      float32x4_t v283 = vmlaq_n_f32(v342, vsubq_f32(v343, v342), v311.f32[0]);
      v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
      float32x4_t v284 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v311.f32[0]);
      v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v283 = 0uLL;
      float32x4_t v284 = 0uLL;
      if (v257 == 1) {
        goto LABEL_131;
      }
    }
  }
  float32x2_t v313 = vrecpe_f32(v147);
  int v314 = 4;
  do
  {
    float32x2_t v313 = vmul_f32(v313, vrecps_f32(v147, v313));
    --v314;
  }
  while (v314);
  float32x4_t v315 = vmulq_n_f32(v63, v313.f32[0]);
  v315.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v315;
  *(float32x4_t *)(a13 + 48) = v60;
  if (a5)
  {
    *(float32x4_t *)a13 = v283;
    *(float32x4_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v284;
    *(float32x2_t *)(a13 + 64) = v147;
  }
  else
  {
    int8x16_t v316 = (int8x16_t)vmlsq_lane_f32(v283, v315, v319, 0);
    v316.i64[1] = vextq_s8(v316, v316, 8uLL).u32[0];
    int8x16_t v317 = (int8x16_t)vmlaq_n_f32(v284, v315, v320);
    v317.i64[1] = vextq_s8(v317, v317, 8uLL).u32[0];
    *(int8x16_t *)a13 = v316;
    *(int8x16_t *)(a13 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v317;
    *(float32x2_t *)(a13 + 64) = vsub_f32(v147, v277);
    if (vcge_f32(v277, v147).u32[0]) {
      return 2;
    }
  }
  return 4;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  float32x4_t v14 = vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v15) = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  unsigned int v221 = 1;
  float32x4_t v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  float32x2_t v20 = vrsqrte_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  HIDWORD(v15) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x2_t v30 = (float32x2_t)vdup_lane_s32(a4, 0);
  v14.i64[1] = v15;
  float32x4_t v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vnegq_f32(v31);
  float32x4_t v33 = vmulq_n_f32(a1[2], v32.f32[0]);
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_lane_f32(a1[3], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  float32x4_t v35 = (float32x4_t *)a1->i64[1];
  float32x4_t v36 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v37 = vmulq_laneq_f32(a1[4], v32, 2);
  v37.i32[3] = 0;
  int8x16_t v38 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v33, v34), v37));
  float32x4_t v39 = v35[3];
  int8x16_t v40 = (int8x16_t)vnegq_f32(v39);
  v40.i32[3] = 0;
  float32x4_t v41 = (float32x4_t)vbslq_s8(v38, (int8x16_t)v39, v40);
  float32x4_t v42 = vmulq_n_f32(*v36, v41.f32[0]);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_lane_f32(v36[1], *(float32x2_t *)v41.f32, 1);
  v43.i32[3] = 0;
  float32x4_t v44 = vmulq_laneq_f32(v36[2], v41, 2);
  v44.i32[3] = 0;
  float32x4_t v45 = vaddq_f32(v36[3], vaddq_f32(v44, vaddq_f32(v42, v43)));
  float32x4_t v46 = *(float32x4_t **)(a2 + 8);
  float32x4_t v47 = v46[3];
  int8x16_t v48 = (int8x16_t)vnegq_f32(v47);
  v48.i32[3] = 0;
  float32x4_t v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v47, v48);
  float32x4_t v50 = vsubq_f32(v45, v49);
  float32x4_t v232 = v50;
  float32x4_t v233 = 0u;
  memset(v234, 0, sizeof(v234));
  float32x4_t v228 = v45;
  float32x4_t v229 = 0u;
  float32x4_t v230 = 0u;
  long long v231 = 0u;
  float32x4_t v51 = vnegq_f32(v50);
  v51.i32[3] = 0;
  float32x4_t v35 = (float32x4_t *)((char *)v35 + 24);
  float32x4_t v224 = v49;
  float32x4_t v225 = 0u;
  float32x4_t v226 = 0u;
  long long v227 = 0u;
  *(float32x2_t *)v45.f32 = vld1_dup_f32(v35->f32);
  float32x4_t v52 = &v46[1].f32[2];
  *(float32x2_t *)v49.f32 = vld1_dup_f32(v52);
  *(float32x2_t *)v45.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v49.f32), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v53 = vadd_f32(v30, *(float32x2_t *)v45.f32);
  float32x2_t v54 = vmul_f32(v53, v53);
  float32x4_t v55 = vmulq_f32(v51, v51);
  float32x4_t v56 = vpaddq_f32(v55, v55);
  float32x2_t v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
  float32x2_t v212 = vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  int16x4_t v58 = (int16x4_t)vcgt_f32(v57, v212);
  v59.i64[0] = -1;
  v59.i64[1] = -1;
  v56.i32[0] = -1;
  int32x4_t v211 = (int32x4_t)v56;
  int8x16_t v60 = (int8x16_t)v50;
  int8x16_t v215 = (int8x16_t)v51;
  float32x4_t v61 = v51;
  float32x2_t v62 = 0;
  while (1)
  {
    int8x16_t v63 = (int8x16_t)v50;
    int8x8_t v64 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v58, 0), 0xFuLL));
    unsigned __int32 v65 = vuzp1_s8(v64, v64).u32[0];
    if (v65 != -1) {
      break;
    }
    float32x4_t v66 = vmulq_f32(v61, v61);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    float32x2_t v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
    float32x2_t v68 = vrsqrte_f32(v67);
    int v69 = 4;
    do
    {
      float32x2_t v68 = vmul_f32(v68, vrsqrts_f32(vmul_f32(v68, v68), v67));
      --v69;
    }
    while (v69);
    float32x2_t v70 = vmul_f32(v67, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v67), 0), (int8x8_t)_D8, (int8x8_t)v68));
    float32x2_t v71 = vrecpe_f32(v70);
    int v72 = 4;
    do
    {
      float32x2_t v71 = vmul_f32(v71, vrecps_f32(v70, v71));
      --v72;
    }
    while (v72);
    float32x4_t v76 = vmulq_n_f32(v61, v71.f32[0]);
    float32x4_t v73 = vmulq_n_f32(a1[2], v76.f32[0]);
    float32x4_t v74 = vmulq_lane_f32(a1[3], *(float32x2_t *)v76.f32, 1);
    float32x4_t v75 = vmulq_laneq_f32(a1[4], v76, 2);
    v76.i32[3] = 0;
    float32x4_t v77 = vnegq_f32(v76);
    v77.i32[3] = 0;
    v73.i32[3] = 0;
    float32x4_t v78 = (float32x4_t *)a1[1].i64[0];
    v74.i32[3] = 0;
    v75.i32[3] = 0;
    int8x16_t v79 = (int8x16_t)vcgtzq_f32(vaddq_f32(vaddq_f32(v73, v74), v75));
    float32x4_t v80 = *(float32x4_t *)(a1->i64[1] + 48);
    int8x16_t v81 = (int8x16_t)vnegq_f32(v80);
    v81.i32[3] = 0;
    float32x4_t v82 = (float32x4_t)vbslq_s8(v79, (int8x16_t)v80, v81);
    float32x4_t v83 = vmulq_n_f32(*v78, v82.f32[0]);
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_lane_f32(v78[1], *(float32x2_t *)v82.f32, 1);
    v84.i32[3] = 0;
    float32x4_t v85 = vmulq_laneq_f32(v78[2], v82, 2);
    v85.i32[3] = 0;
    float32x4_t v86 = vaddq_f32(v78[3], vaddq_f32(v85, vaddq_f32(v83, v84)));
    int8x16_t v87 = (int8x16_t)vcgtzq_f32(v77);
    float32x4_t v88 = *(float32x4_t *)(*(void *)(a2 + 8) + 48);
    int8x16_t v89 = (int8x16_t)vnegq_f32(v88);
    v89.i32[3] = 0;
    float32x4_t v90 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v88, v89);
    float32x4_t v91 = vaddq_f32(v14, v90);
    float32x4_t v50 = vsubq_f32(v86, v91);
    float32x4_t v92 = vnegq_f32(v50);
    v92.i32[3] = 0;
    float32x4_t v93 = vmulq_f32(v76, v92);
    v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
    float32x2_t v94 = vsub_f32(vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), v53);
    if (v94.f32[0] > 0.0)
    {
      float32x4_t v95 = vmulq_f32(v76, *a7);
      v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
      float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
      if (v96.f32[0] >= 0.0) {
        return v65 != -1;
      }
      float32x2_t v97 = vrecpe_f32(v96);
      int v98 = 4;
      do
      {
        float32x2_t v97 = vmul_f32(v97, vrecps_f32(v96, v97));
        --v98;
      }
      while (v98);
      float32x2_t v99 = vsub_f32(v62, vmul_f32(v94, v97));
      if (vcgt_f32(v99, v62).u8[0])
      {
        if (v99.f32[0] > 1.0) {
          return v65 != -1;
        }
        float32x4_t v100 = vmlaq_n_f32(*a6, *a7, v99.f32[0]);
        v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
        float32x4_t v101 = vsubq_f32(v100, v14);
        float32x4_t v224 = vaddq_f32(v224, v101);
        float32x4_t v225 = vaddq_f32(v225, v101);
        float32x4_t v226 = vaddq_f32(v226, v101);
        float32x4_t v232 = vsubq_f32(v228, v224);
        float32x4_t v233 = vsubq_f32(v229, v225);
        v234[0] = vsubq_f32(v230, v226);
        float32x4_t v91 = vaddq_f32(v90, v100);
        float32x4_t v50 = vsubq_f32(v86, v91);
        float32x2_t v57 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v215 = (int8x16_t)v61;
        float32x4_t v14 = v100;
      }
      float32x2_t v62 = v99;
    }
    int8x16_t v218 = v63;
    uint64_t v102 = v221;
    *(&v228 + v221) = v86;
    *(&v224 + v102) = v91;
    unsigned int v221 = v102 + 1;
    *(&v232 + v102) = v50;
    if (v102 == 3)
    {
      float32x4_t v216 = v14;
      physx::Gu::closestPtPointTetrahedron(&v232, &v228, &v224, (int *)&v221);
      float32x4_t v14 = v216;
LABEL_27:
      int8x16_t v60 = v218;
      goto LABEL_60;
    }
    if (v102 != 2)
    {
      int8x16_t v60 = v63;
      if (v102 != 1) {
        goto LABEL_60;
      }
      float32x4_t v50 = v232;
      float32x4_t v103 = vsubq_f32(v233, v232);
      float32x4_t v104 = vmulq_f32(v103, v103);
      v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
      float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v105), 0), *(int8x8_t *)v232.f32).u32[0] != -1)
      {
        float32x4_t v106 = vnegq_f32(v232);
        v106.i32[3] = 0;
        float32x4_t v107 = vmulq_f32(v106, v103);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
        float32x2_t v109 = vrecpe_f32(v105);
        int v110 = 4;
        do
        {
          float32x2_t v109 = vmul_f32(v109, vrecps_f32(v105, v109));
          --v110;
        }
        while (v110);
        float32x4_t v50 = vmlaq_n_f32(v232, v103, vmax_f32(vmin_f32(vmul_f32(v108, v109), _D8), 0).f32[0]);
LABEL_42:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_60;
      }
LABEL_43:
      unsigned int v221 = 1;
      goto LABEL_60;
    }
    float32x4_t v50 = v232;
    float32x4_t v111 = vsubq_f32(v233, v232);
    float32x4_t v112 = vsubq_f32(v234[0], v232);
    int8x8_t v114 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL), *(float32x2_t *)v112.f32);
    *(int8x8_t *)v113.f32 = vext_s8(v114, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL), *(float32x2_t *)v112.f32), *(float32x2_t *)v111.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL)), 4uLL);
    v114.i32[1] = 0;
    unsigned int v221 = 3;
    float32x2_t v115 = vpadd_f32(vmul_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32), vmul_f32((float32x2_t)v114.u32[0], (float32x2_t)v114.u32[0]));
    float32x2_t v116 = vpadd_f32(v115, v115);
    if (v116.f32[0] <= 0.00000011921)
    {
      unsigned int v221 = 2;
      float32x4_t v153 = vmulq_f32(v111, v111);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      float32x2_t v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
      int8x16_t v60 = v63;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v154), 0), *(int8x8_t *)v232.f32).u32[0] != -1)
      {
        float32x4_t v155 = vnegq_f32(v232);
        v155.i32[3] = 0;
        float32x4_t v156 = vmulq_f32(v155, v111);
        v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
        float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
        float32x2_t v158 = vrecpe_f32(v154);
        int v159 = 4;
        do
        {
          float32x2_t v158 = vmul_f32(v158, vrecps_f32(v154, v158));
          --v159;
        }
        while (v159);
        float32x4_t v50 = vmlaq_n_f32(v232, v111, vmax_f32(vmin_f32(vmul_f32(v157, v158), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v116.f32[0] == 0.0)
    {
      float32x4_t v50 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v113.u32[2] = v114;
    float32x2_t v117 = (float32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
    float32x2_t v118 = (float32x2_t)vextq_s8((int8x16_t)v234[0], (int8x16_t)v234[0], 8uLL).u64[0];
    float32x2_t v119 = (float32x2_t)vextq_s8((int8x16_t)v234[0], (int8x16_t)v234[0], 4uLL).u64[0];
    float32x2_t v120 = (float32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 4uLL).u64[0];
    int8x8_t v121 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v233.f32, v119), v120, *(float32x2_t *)v234[0].f32);
    *(int8x8_t *)v122.f32 = vext_s8(v121, (int8x8_t)vmls_f32(vmul_f32(v117, *(float32x2_t *)v234[0].f32), *(float32x2_t *)v233.f32, v118), 4uLL);
    v122.i64[1] = v121.u32[0];
    float32x2_t v123 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL).u64[0];
    float32x2_t v124 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 4uLL).u64[0];
    int8x8_t v125 = (int8x8_t)vmls_f32(vmul_f32(v124, *(float32x2_t *)v234[0].f32), v119, *(float32x2_t *)v232.f32);
    *(int8x8_t *)v126.f32 = vext_s8(v125, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v232.f32, v118), *(float32x2_t *)v234[0].f32, v123), 4uLL);
    v126.i64[1] = v125.u32[0];
    int8x8_t v127 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v232.f32, v120), v124, *(float32x2_t *)v233.f32);
    *(int8x8_t *)v128.f32 = vext_s8(v127, (int8x8_t)vmls_f32(vmul_f32(v123, *(float32x2_t *)v233.f32), *(float32x2_t *)v232.f32, v117), 4uLL);
    v128.i64[1] = v127.u32[0];
    float32x4_t v129 = vmulq_f32(v122, v113);
    v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
    float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
    float32x4_t v131 = vmulq_f32(v126, v113);
    v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
    float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
    float32x4_t v133 = vmulq_f32(v128, v113);
    v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
    float32x2_t v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v132), (int8x8_t)vcgez_f32(v130)), (int8x8_t)vcgez_f32(v134)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
    {
      int8x16_t v160 = (int8x16_t)vmulq_f32(v232, v113);
      float32x2_t v161 = (float32x2_t)vextq_s8(v160, v160, 8uLL).u64[0];
      float32x2_t v162 = vrecpe_f32(v116);
      int v163 = 4;
      int8x16_t v60 = v218;
      do
      {
        float32x2_t v162 = vmul_f32(v162, vrecps_f32(v116, v162));
        --v163;
      }
      while (v163);
      float32x2_t v164 = vpadd_f32(*(float32x2_t *)v160.i8, v161);
      float32x4_t v50 = vmulq_n_f32(v113, vmul_f32(v162, vpadd_f32(v164, v164)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      float32x4_t v135 = vnegq_f32(v232);
      v135.i32[3] = 0;
      float32x4_t v136 = vnegq_f32(v233);
      v136.i32[3] = 0;
      float32x4_t v137 = vmulq_f32(v135, v111);
      v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
      float32x2_t v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
      float32x4_t v139 = vmulq_f32(v111, v136);
      v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
      float32x2_t v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v138), (int8x8_t)vclez_f32(v140)), (int8x8_t)vclez_f32(v134)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
      {
        float32x2_t v165 = vsub_f32(v138, v140);
        float32x2_t v166 = vrecpe_f32(v165);
        int v167 = 4;
        do
        {
          float32x2_t v166 = vmul_f32(v166, vrecps_f32(v165, v166));
          --v167;
        }
        while (v167);
        uint64_t v152 = 0;
        float32x4_t v50 = vmlaq_n_f32(v232, v111, vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v165), (float32x2_t)0x3400000034000000), (int8x8_t)v166, 0)).f32[0]);
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        unsigned int v168 = 2;
        uint64_t v151 = 1;
      }
      else
      {
        float32x4_t v141 = vnegq_f32(v234[0]);
        v141.i32[3] = 0;
        float32x4_t v142 = vmulq_f32(v136, v112);
        v142.i64[0] = vpaddq_f32(v142, v142).u64[0];
        float32x2_t v143 = vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
        float32x4_t v144 = vmulq_f32(v111, v141);
        v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
        float32x2_t v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
        float32x4_t v146 = vmulq_f32(v112, v141);
        v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
        float32x2_t v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v143, v140), (int8x8_t)vcge_f32(v145, v147)), (int8x8_t)vclez_f32(v130)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
        {
          float32x2_t v169 = vsub_f32(v143, v140);
          float32x2_t v170 = vadd_f32(v169, vsub_f32(v145, v147));
          float32x2_t v171 = vrecpe_f32(v170);
          int v172 = 4;
          do
          {
            float32x2_t v171 = vmul_f32(v171, vrecps_f32(v170, v171));
            --v172;
          }
          while (v172);
          int8x16_t v173 = (int8x16_t)vmlaq_n_f32(v233, vsubq_f32(v234[0], v233), vmul_f32(v169, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v170), (float32x2_t)0x3400000034000000), (int8x8_t)v171, 0)).f32[0]);
          v173.i64[1] = vextq_s8(v173, v173, 8uLL).u32[0];
          unsigned int v168 = 2;
          uint64_t v151 = 2;
          uint64_t v152 = 1;
          float32x4_t v50 = (float32x4_t)v173;
        }
        else
        {
          float32x4_t v148 = vmulq_f32(v135, v112);
          v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
          float32x2_t v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v149), (int8x8_t)vclez_f32(v147)), (int8x8_t)vclez_f32(v132)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
          {
            float32x2_t v174 = vsub_f32(v149, v147);
            float32x2_t v175 = vrecpe_f32(v174);
            int v176 = 4;
            do
            {
              float32x2_t v175 = vmul_f32(v175, vrecps_f32(v174, v175));
              --v176;
            }
            while (v176);
            uint64_t v152 = 0;
            float32x4_t v50 = vmlaq_n_f32(v232, v112, vmul_f32(v149, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v174), (float32x2_t)0x3400000034000000), (int8x8_t)v175, 0)).f32[0]);
            v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
            uint64_t v151 = 2;
          }
          else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v149), (int8x8_t)vclez_f32(v138)), 0), *(int8x8_t *)v232.f32).u32[0] == -1)
          {
            uint64_t v152 = 0;
            uint64_t v151 = 1;
          }
          else
          {
            *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v140, v143), (int8x8_t)vcgez_f32(v140)), 0);
            *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
            __int32 v150 = v50.i32[0];
            float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v211), 0), (int8x16_t)v233, (int8x16_t)v234[0]);
            uint64_t v151 = 1;
            if (v150 == -1) {
              uint64_t v152 = 1;
            }
            else {
              uint64_t v152 = 2;
            }
          }
          unsigned int v168 = v151;
        }
      }
      int8x16_t v60 = v218;
      float32x4_t v177 = *(&v232 + v151);
      float32x4_t v178 = *(&v228 + v152);
      float32x4_t v179 = *(&v228 + v151);
      float32x4_t v180 = *(&v224 + v152);
      float32x4_t v181 = *(&v224 + v151);
      float32x4_t v232 = *(&v232 + v152);
      float32x4_t v233 = v177;
      float32x4_t v228 = v178;
      float32x4_t v229 = v179;
      float32x4_t v224 = v180;
      float32x4_t v225 = v181;
      unsigned int v221 = v168;
    }
LABEL_60:
    float32x4_t v61 = vnegq_f32(v50);
    v61.i32[3] = 0;
    float32x4_t v182 = vmulq_f32(v50, v50);
    v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
    float32x2_t v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
    int8x8_t v184 = (int8x8_t)vcgt_f32(v57, v183);
    int8x16_t v59 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v184, (int8x8_t)0x100000001), 0);
    int16x4_t v58 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v183, v54), v184);
    float32x2_t v57 = v183;
  }
  float32x4_t v185 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v57, v212), 0), v59), 0x1FuLL)), (int8x16_t)v61, v215);
  float32x4_t v186 = vmulq_f32(v185, v185);
  v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
  float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
  float32x2_t v188 = vrsqrte_f32(v187);
  int v189 = 4;
  do
  {
    float32x2_t v188 = vmul_f32(v188, vrsqrts_f32(vmul_f32(v188, v188), v187));
    --v189;
  }
  while (v189);
  float32x2_t v190 = vmul_f32(v187, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v187), 0), (int8x8_t)_D8, (int8x8_t)v188));
  float32x2_t v191 = vrecpe_f32(v190);
  int v192 = 4;
  do
  {
    float32x2_t v191 = vmul_f32(v191, vrecps_f32(v190, v191));
    --v192;
  }
  while (v192);
  int8x16_t v193 = (int8x16_t)vdupq_n_s32(-*(char *)(a1->i64[1] + 32));
  int8x16_t v194 = (int8x16_t)vmulq_n_f32(v185, v191.f32[0]);
  v194.i32[3] = 0;
  float32x4_t v195 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v190), 0), v194));
  v195.i32[3] = 0;
  *a9 = v195;
  *a8 = v62;
  float32x4_t v196 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v59, 0x1FuLL)), v63, v60);
  float32x4_t v220 = v196;
  if (v221 == 3)
  {
    float32x2_t v222 = 0;
    float32x2_t v223 = 0;
    float32x4_t v217 = v195;
    int8x16_t v219 = v193;
    physx::Gu::barycentricCoordinates(&v220, &v232, &v233, v234, &v223, &v222);
    float32x4_t v195 = v217;
    int8x16_t v193 = v219;
    v191.i32[1] = v228.i32[1];
    float32x4_t v199 = vmulq_n_f32(vsubq_f32(v229, v228), v223.f32[0]);
    v199.i32[3] = 0;
    float32x4_t v200 = vmulq_n_f32(vsubq_f32(v230, v228), v222.f32[0]);
    v200.i32[3] = 0;
    float32x4_t v197 = vaddq_f32(v228, vaddq_f32(v199, v200));
    float32x4_t v198 = a10;
  }
  else if (v221 == 2)
  {
    float32x4_t v201 = vsubq_f32(v232, v196);
    float32x4_t v202 = vsubq_f32(vsubq_f32(v233, v196), v201);
    float32x4_t v203 = vmulq_f32(v202, v202);
    v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
    float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
    float32x2_t v205 = vrecpe_f32(v204);
    int v206 = 4;
    float32x4_t v198 = a10;
    do
    {
      float32x2_t v205 = vmul_f32(v205, vrecps_f32(v204, v205));
      --v206;
    }
    while (v206);
    float32x4_t v207 = vnegq_f32(v201);
    v207.i32[3] = 0;
    float32x4_t v208 = vmulq_f32(v207, v202);
    v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
    float32x4_t v197 = vmlaq_n_f32(v228, vsubq_f32(v229, v228), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v204), (int8x8_t)v205, 0), vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32)).f32[0]);
    v191.i32[1] = 0;
    v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v197 = 0uLL;
    float32x4_t v198 = a10;
    if (v221 == 1) {
      float32x4_t v197 = v228;
    }
  }
  v191.i32[0] = *(_DWORD *)(a1->i64[1] + 16);
  int8x16_t v209 = (int8x16_t)vmlsq_lane_f32(v197, v195, v191, 0);
  v209.i64[1] = vextq_s8(v209, v209, 8uLL).u32[0];
  *float32x4_t v198 = vbslq_s8(v193, v209, (int8x16_t)v197);
  return v65 != -1;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, uint64_t a12)
{
  float v12 = a7;
  long long v13 = a6;
  uint64_t v357 = *MEMORY[0x263EF8340];
  float32x4_t v16 = (float32x4_t *)a1->i64[1];
  float32x4_t v17 = &v16[1].f32[1];
  float32x2_t v18 = vld1_dup_f32(v17);
  float32x2_t v19 = *(float32x4_t **)(a2 + 8);
  float32x2_t v20 = &v19[1].f32[1];
  float32x2_t v21 = vld1_dup_f32(v20);
  float32x2_t v22 = vmin_f32(v18, v21);
  float32x2_t v23 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v24 = vmul_f32(v22, v23);
  v22.i32[0] = v16[1].i32[0];
  v23.i32[0] = v19[1].i32[0];
  a11.i32[0] = -v16[2].i8[0];
  int32x2_t v25 = (int32x2_t)vand_s8(a11, (int8x8_t)v22);
  float32x2_t v26 = (float32x2_t)vdup_lane_s32(v25, 0);
  v25.i32[0] = -v19[2].i8[0];
  float32x2_t v27 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v25, (int8x8_t)v23), 0);
  float32x2_t v330 = v26;
  float v331 = v27.f32[0];
  float32x2_t v28 = vadd_f32(v26, v27);
  uint64_t v29 = *a4;
  float32x4_t v342 = 0uLL;
  unsigned int v341 = 0;
  uint64_t v30 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v334 = v28;
  if (!*a8)
  {
    float32x4_t v59 = vmulq_f32(*a3, *a3);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v342 = v50;
    float32x4_t v60 = vmulq_f32(v50, v50);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    float32x2_t v62 = vrsqrte_f32(v61);
    int v63 = 4;
    do
    {
      float32x2_t v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    float32x2_t v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D9, (int8x8_t)v62));
    float32x2_t v65 = vrecpe_f32(v64);
    int v66 = 4;
    do
    {
      float32x2_t v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    float32x4_t v67 = vmulq_n_f32(v50, v65.f32[0]);
    v67.i32[3] = 0;
    float32x4_t v336 = v67;
    float32x2_t v68 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v69.i64[0] = -1;
    v69.i64[1] = -1;
    float32x4_t v70 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v36 = 0;
  float32x4_t v37 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v38 = v16[3];
  float32x4_t v39 = v19[3];
  int8x16_t v40 = (int8x16_t)vnegq_f32(v38);
  v40.i32[3] = 0;
  int8x16_t v41 = (int8x16_t)vnegq_f32(v39);
  v41.i32[3] = 0;
  do
  {
    uint64_t v42 = a6[v36];
    *(&v346 + v36) = v42;
    uint64_t v43 = a7[v36];
    *(&v344 + v36) = v43;
    float32x4_t v44 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v42], (int8x16_t)v38, v40);
    float32x4_t v45 = vmulq_n_f32(*v37, v44.f32[0]);
    v45.i32[3] = 0;
    float32x4_t v46 = vmulq_lane_f32(v37[1], *(float32x2_t *)v44.f32, 1);
    v46.i32[3] = 0;
    float32x4_t v47 = vmulq_laneq_f32(v37[2], v44, 2);
    v47.i32[3] = 0;
    float32x4_t v48 = vaddq_f32(v37[3], vaddq_f32(v47, vaddq_f32(v45, v46)));
    float32x4_t v49 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v43], (int8x16_t)v39, v41);
    float32x4_t v50 = vsubq_f32(v48, v49);
    *(&v351 + v36) = v48;
    *(&v348 + v36) = v49;
    *(&v354 + v36++) = v50;
  }
  while (v30 != v36);
  unsigned int v341 = v30;
  switch(v36)
  {
    case 4:
      int v337 = v29;
      physx::Gu::closestPtPointTetrahedron(&v354, &v351, &v348, &v346, &v344, (int *)&v341);
      LODWORD(v29) = v337;
      v28.i32[0] = v334.i32[0];
      goto LABEL_49;
    case 3:
      unsigned int v341 = 3;
      float32x4_t v50 = v354;
      float32x4_t v71 = vsubq_f32(v355, v354);
      float32x4_t v72 = vsubq_f32(v356[0], v354);
      int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL), *(float32x2_t *)v72.f32);
      *(int8x8_t *)v73.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v72.f32), *(float32x2_t *)v71.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL)), 4uLL);
      v74.i32[1] = 0;
      float32x2_t v75 = vpadd_f32(vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vmul_f32((float32x2_t)v74.u32[0], (float32x2_t)v74.u32[0]));
      float32x2_t v76 = vpadd_f32(v75, v75);
      if (v76.f32[0] > 0.00000011921)
      {
        if (v76.f32[0] == 0.0)
        {
          float32x4_t v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v73.u32[2] = v74;
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 8uLL).u64[0];
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 8uLL).u64[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 4uLL).u64[0];
          float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 4uLL).u64[0];
          int8x8_t v81 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v355.f32, v79), v80, *(float32x2_t *)v356[0].f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v356[0].f32), *(float32x2_t *)v355.f32, v78), 4uLL);
          v82.i64[1] = v81.u32[0];
          float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
          float32x2_t v84 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 4uLL).u64[0];
          int8x8_t v85 = (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v356[0].f32), v79, *(float32x2_t *)v354.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v78), *(float32x2_t *)v356[0].f32, v83), 4uLL);
          v86.i64[1] = v85.u32[0];
          int8x8_t v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v80), v84, *(float32x2_t *)v355.f32);
          *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v355.f32), *(float32x2_t *)v354.f32, v77), 4uLL);
          v88.i64[1] = v87.u32[0];
          float32x4_t v89 = vmulq_f32(v82, v73);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          float32x4_t v91 = vmulq_f32(v86, v73);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          float32x4_t v93 = vmulq_f32(v88, v73);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          float32x2_t v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v92), (int8x8_t)vcgez_f32(v90)), (int8x8_t)vcgez_f32(v94)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
          {
            int8x16_t v120 = (int8x16_t)vmulq_f32(v354, v73);
            float32x2_t v121 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
            float32x2_t v122 = vrecpe_f32(v76);
            int v123 = 4;
            do
            {
              float32x2_t v122 = vmul_f32(v122, vrecps_f32(v76, v122));
              --v123;
            }
            while (v123);
            float32x2_t v124 = vpadd_f32(*(float32x2_t *)v120.i8, v121);
            float32x4_t v50 = vmulq_n_f32(v73, vmul_f32(v122, vpadd_f32(v124, v124)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            float32x4_t v95 = vnegq_f32(v354);
            v95.i32[3] = 0;
            float32x4_t v96 = vnegq_f32(v355);
            v96.i32[3] = 0;
            float32x4_t v97 = vmulq_f32(v95, v71);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            float32x4_t v99 = vmulq_f32(v71, v96);
            v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
            float32x2_t v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v98), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
            {
              float32x2_t v125 = vsub_f32(v98, v100);
              float32x2_t v126 = vrecpe_f32(v125);
              int v127 = 4;
              do
              {
                float32x2_t v126 = vmul_f32(v126, vrecps_f32(v125, v126));
                --v127;
              }
              while (v127);
              uint64_t v112 = 0;
              float32x4_t v50 = vmlaq_n_f32(v354, v71, vmul_f32(v98, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              unsigned int v128 = 2;
              uint64_t v111 = 1;
            }
            else
            {
              float32x4_t v101 = vnegq_f32(v356[0]);
              v101.i32[3] = 0;
              float32x4_t v102 = vmulq_f32(v96, v72);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              float32x4_t v104 = vmulq_f32(v71, v101);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              float32x4_t v106 = vmulq_f32(v72, v101);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v103, v100), (int8x8_t)vcge_f32(v105, v107)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
              {
                float32x2_t v129 = vsub_f32(v103, v100);
                float32x2_t v130 = vadd_f32(v129, vsub_f32(v105, v107));
                float32x2_t v131 = vrecpe_f32(v130);
                int v132 = 4;
                do
                {
                  float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                  --v132;
                }
                while (v132);
                int8x16_t v133 = (int8x16_t)vmlaq_n_f32(v355, vsubq_f32(v356[0], v355), vmul_f32(v129, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                v133.i64[1] = vextq_s8(v133, v133, 8uLL).u32[0];
                unsigned int v128 = 2;
                uint64_t v112 = 1;
                uint64_t v111 = 2;
                float32x4_t v50 = (float32x4_t)v133;
              }
              else
              {
                float32x4_t v108 = vmulq_f32(v95, v72);
                int32x4_t v109 = (int32x4_t)vpaddq_f32(v108, v108);
                *(float32x2_t *)v109.i8 = vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v107)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
                {
                  float32x2_t v134 = vsub_f32(*(float32x2_t *)v109.i8, v107);
                  float32x2_t v135 = vrecpe_f32(v134);
                  int v136 = 4;
                  do
                  {
                    float32x2_t v135 = vmul_f32(v135, vrecps_f32(v134, v135));
                    --v136;
                  }
                  while (v136);
                  uint64_t v112 = 0;
                  float32x4_t v50 = vmlaq_n_f32(v354, v72, vmul_f32(*(float32x2_t *)v109.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v134), (float32x2_t)0x3400000034000000), (int8x8_t)v135, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  uint64_t v111 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v98)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
                {
                  uint64_t v112 = 0;
                  uint64_t v111 = 1;
                }
                else
                {
                  *(int32x2_t *)v109.i8 = vcge_f32(v100, v103);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v109.i8, (int8x8_t)vcgez_f32(v100)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v109.i32[0] = -1;
                  __int32 v110 = v50.i32[0];
                  float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v109), 0), (int8x16_t)v355, (int8x16_t)v356[0]);
                  uint64_t v111 = 1;
                  if (v110 == -1) {
                    uint64_t v112 = 1;
                  }
                  else {
                    uint64_t v112 = 2;
                  }
                }
                unsigned int v128 = v111;
              }
            }
            float32x4_t v137 = *(&v354 + v112);
            float32x4_t v138 = *(&v354 + v111);
            float32x4_t v139 = *(&v351 + v112);
            float32x4_t v140 = *(&v351 + v111);
            float32x4_t v141 = *(&v348 + v112);
            float32x4_t v142 = *(&v348 + v111);
            int v143 = *(&v346 + v112);
            int v144 = *(&v346 + v111);
            int v145 = *(&v344 + v112);
            int v146 = *(&v344 + v111);
            float32x4_t v354 = v137;
            float32x4_t v355 = v138;
            float32x4_t v351 = v139;
            float32x4_t v352 = v140;
            float32x4_t v348 = v141;
            float32x4_t v349 = v142;
            int v346 = v143;
            int v347 = v144;
            int v344 = v145;
            int v345 = v146;
            unsigned int v341 = v128;
          }
        }
        goto LABEL_49;
      }
      unsigned int v341 = 2;
      float32x4_t v113 = vmulq_f32(v71, v71);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v114), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        float32x4_t v115 = vnegq_f32(v354);
        v115.i32[3] = 0;
        float32x4_t v116 = vmulq_f32(v115, v71);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        float32x2_t v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        float32x2_t v118 = vrecpe_f32(v114);
        int v119 = 4;
        do
        {
          float32x2_t v118 = vmul_f32(v118, vrecps_f32(v114, v118));
          --v119;
        }
        while (v119);
        float32x4_t v50 = vmlaq_n_f32(v354, v71, vmax_f32(vmin_f32(vmul_f32(v117, v118), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v50 = v354;
      float32x4_t v51 = vsubq_f32(v355, v354);
      float32x4_t v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        float32x4_t v54 = vnegq_f32(v354);
        v54.i32[3] = 0;
        float32x4_t v55 = vmulq_f32(v54, v51);
        v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
        float32x2_t v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
        float32x2_t v57 = vrecpe_f32(v53);
        int v58 = 4;
        do
        {
          float32x2_t v57 = vmul_f32(v57, vrecps_f32(v53, v57));
          --v58;
        }
        while (v58);
        float32x4_t v50 = vmlaq_n_f32(v354, v51, vmax_f32(vmin_f32(vmul_f32(v56, v57), _D9), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v341 = 1;
LABEL_49:
  float32x4_t v342 = v50;
  float32x4_t v147 = vmulq_f32(v50, v50);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
  float32x2_t v149 = vrsqrte_f32(v148);
  int v150 = 4;
  do
  {
    float32x2_t v149 = vmul_f32(v149, vrsqrts_f32(vmul_f32(v149, v149), v148));
    --v150;
  }
  while (v150);
  float32x2_t v68 = vmul_f32(v148, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v148), 0), (int8x8_t)_D9, (int8x8_t)v149));
  float32x2_t v151 = vrecpe_f32(v68);
  int v152 = 4;
  do
  {
    float32x2_t v151 = vmul_f32(v151, vrecps_f32(v68, v151));
    --v152;
  }
  while (v152);
  float32x4_t v153 = vmulq_n_f32(v50, v151.f32[0]);
  v153.i32[3] = 0;
  float32x4_t v336 = v153;
  int32x4_t v69 = vdupq_lane_s32(vcgt_f32(v68, v24), 0);
  float32x4_t v70 = v50;
LABEL_54:
  float v154 = *(float *)&v29 + v28.f32[0];
  long long v155 = xmmword_2343978C0;
  LODWORD(v155) = -1;
  int32x4_t v329 = (int32x4_t)v155;
  v156.i64[0] = -1;
  v156.i64[1] = -1;
  for (float32x2_t i = v68; ; float32x2_t i = v174)
  {
    float32x4_t v158 = v50;
    v159.i64[0] = -1;
    v159.i64[1] = -1;
    *(int16x4_t *)v159.i8 = vmovn_s32(vceqq_s32(v69, v159));
    if (vuzp1_s8(*(int8x8_t *)v159.i8, *(int8x8_t *)v159.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v335 = v158;
    float32x4_t v160 = vnegq_f32(v158);
    v160.i32[3] = 0;
    float32x2_t v338 = v68;
    float32x4_t v340 = v160;
    *(double *)v161.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v340, (unsigned __int32 *)&v346 + v341);
    float32x4_t v162 = v161;
    uint64_t v163 = v341;
    float32x2_t v164 = *(float32x4_t **)(a2 + 8);
    float32x4_t v165 = v342;
    int8x16_t v166 = (int8x16_t)vcgtzq_f32(v342);
    int32x4_t v167 = (int32x4_t)vandq_s8(v166, (int8x16_t)xmmword_2343978C0);
    v167.i64[0] = vpaddq_s32(v167, v167).u64[0];
    *(&v344 + v341) = vpadd_s32(*(int32x2_t *)v167.i8, *(int32x2_t *)v167.i8).u8[0] & 7;
    float32x4_t v168 = v164[3];
    int8x16_t v169 = (int8x16_t)vnegq_f32(v168);
    v169.i32[3] = 0;
    float32x4_t v170 = (float32x4_t)vbslq_s8(v166, (int8x16_t)v168, v169);
    float32x4_t v50 = vsubq_f32(v162, v170);
    float32x4_t v171 = v336;
    float32x4_t v172 = vmulq_f32(v336, v50);
    v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
    float v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32).f32[0];
    if (v173 > v154)
    {
      if (v13)
      {
        *a8 = v163;
        if (v163)
        {
          int v273 = &v344;
          float32x4_t v274 = &v346;
          do
          {
            int v275 = *v274++;
            *v13++ = v275;
            int v276 = *v273++;
            *v12++ = v276;
            --v163;
          }
          while (v163);
        }
      }
      return 0;
    }
    float32x2_t v174 = v338;
    if (v173 > (float)(0.99977 * v338.f32[0]))
    {
      float32x2_t v277 = v334;
      if (!v13) {
        goto LABEL_121;
      }
      *a8 = v163;
      if (v163)
      {
        uint64_t v278 = &v344;
        int v279 = &v346;
        uint64_t v280 = v163;
        do
        {
          int v281 = *v279++;
          *v13++ = v281;
          int v282 = *v278++;
          *v12++ = v282;
          --v280;
        }
        while (v280);
LABEL_121:
        uint64_t v283 = a12;
        *(float32x4_t *)(a12 + 32) = v336;
        if (v163 != 3)
        {
          if (v163 != 2)
          {
            float32x4_t v284 = 0uLL;
            float32x4_t v285 = 0uLL;
            int v286 = a5;
            if (v163 == 1)
            {
              float32x4_t v284 = v351;
              float32x4_t v285 = v348;
              if (!a5) {
                goto LABEL_142;
              }
LABEL_138:
              *(float32x4_t *)uint64_t v283 = v284;
              *(float32x4_t *)(v283 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v285;
              uint64_t result = 2;
              *(float32x2_t *)(v283 + 64) = v174;
              return result;
            }
LABEL_137:
            if (!v286) {
              goto LABEL_142;
            }
            goto LABEL_138;
          }
          float32x4_t v300 = vsubq_f32(v354, v165);
          float32x4_t v301 = vsubq_f32(vsubq_f32(v355, v165), v300);
          float32x4_t v302 = vmulq_f32(v301, v301);
          v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
          float32x2_t v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
          float32x2_t v304 = vrecpe_f32(v303);
          int v305 = 4;
          do
          {
            float32x2_t v304 = vmul_f32(v304, vrecps_f32(v303, v304));
            --v305;
          }
          while (v305);
          float32x4_t v306 = vnegq_f32(v300);
          v306.i32[3] = 0;
          float32x4_t v307 = vmulq_f32(v306, v301);
          v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
          LODWORD(v308) = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
          float32x4_t v284 = vmlaq_n_f32(v351, vsubq_f32(v352, v351), v308);
          v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
          float32x4_t v285 = vmlaq_n_f32(v348, vsubq_f32(v349, v348), v308);
          v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
          if (a5) {
            goto LABEL_138;
          }
LABEL_142:
          int8x16_t v309 = (int8x16_t)vmlsq_lane_f32(v284, v171, v330, 0);
          v309.i64[1] = vextq_s8(v309, v309, 8uLL).u32[0];
          int8x16_t v310 = (int8x16_t)vmlaq_n_f32(v285, v171, v331);
          v310.i64[1] = vextq_s8(v310, v310, 8uLL).u32[0];
          *(int8x16_t *)uint64_t v283 = v309;
          *(int8x16_t *)(v283 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v310;
          *(float32x2_t *)(v283 + 64) = vsub_f32(v174, v277);
          return 2;
        }
        v340.i64[0] = 0;
        float32x2_t v343 = 0;
        physx::Gu::barycentricCoordinates(&v342, &v354, &v355, v356, (float32x2_t *)&v340, &v343);
        float32x4_t v171 = v336;
        float32x2_t v174 = v338;
        float32x2_t v277 = v334;
        float32x4_t v295 = vmulq_n_f32(vsubq_f32(v352, v351), v340.f32[0]);
        v295.i32[3] = 0;
        float32x4_t v296 = vmulq_n_f32(vsubq_f32(v353, v351), v343.f32[0]);
        v296.i32[3] = 0;
        float32x4_t v297 = vaddq_f32(v295, v296);
        float32x4_t v298 = vmulq_n_f32(vsubq_f32(v349, v348), v340.f32[0]);
        v298.i32[3] = 0;
        float32x4_t v284 = vaddq_f32(v351, v297);
        float32x4_t v299 = vmulq_n_f32(vsubq_f32(v350, v348), v343.f32[0]);
        v299.i32[3] = 0;
        float32x4_t v285 = vaddq_f32(v348, vaddq_f32(v298, v299));
      }
      else
      {
        uint64_t v283 = a12;
        *(float32x4_t *)(a12 + 32) = v336;
        float32x4_t v284 = 0uLL;
        float32x4_t v285 = 0uLL;
      }
      int v286 = a5;
      goto LABEL_137;
    }
    *(&v351 + v163) = v162;
    *(&v348 + v163) = v170;
    unsigned int v341 = v163 + 1;
    *(&v354 + v163) = v50;
    if (v163 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v354, &v351, &v348, &v346, &v344, (int *)&v341);
      float32x2_t v174 = v338;
LABEL_66:
      float32x4_t v70 = v335;
      goto LABEL_101;
    }
    if (v163 == 2)
    {
      float32x4_t v50 = v354;
      float32x4_t v183 = vsubq_f32(v355, v354);
      float32x4_t v184 = vsubq_f32(v356[0], v354);
      int8x8_t v186 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v183.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v184, (int8x16_t)v184, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v183, (int8x16_t)v183, 4uLL), *(float32x2_t *)v184.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v186, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL), *(float32x2_t *)v184.f32), *(float32x2_t *)v183.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL)), 4uLL);
      v186.i32[1] = 0;
      unsigned int v341 = 3;
      float32x2_t v187 = vpadd_f32(vmul_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32), vmul_f32((float32x2_t)v186.u32[0], (float32x2_t)v186.u32[0]));
      float32x2_t v188 = vpadd_f32(v187, v187);
      if (v188.f32[0] <= 0.00000011921)
      {
        unsigned int v341 = 2;
        float32x4_t v225 = vmulq_f32(v183, v183);
        v225.i64[0] = vpaddq_f32(v225, v225).u64[0];
        float32x2_t v226 = vpadd_f32(*(float32x2_t *)v225.f32, *(float32x2_t *)v225.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v226), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
        {
          float32x4_t v227 = vnegq_f32(v354);
          v227.i32[3] = 0;
          float32x4_t v228 = vmulq_f32(v227, v183);
          v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
          float32x2_t v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
          float32x2_t v230 = vrecpe_f32(v226);
          int v231 = 4;
          float32x4_t v70 = v335;
          do
          {
            float32x2_t v230 = vmul_f32(v230, vrecps_f32(v226, v230));
            --v231;
          }
          while (v231);
          float32x4_t v50 = vmlaq_n_f32(v354, v183, vmax_f32(vmin_f32(vmul_f32(v229, v230), _D9), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v341 = 1;
        goto LABEL_66;
      }
      if (v188.f32[0] == 0.0)
      {
        float32x4_t v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v185.u32[2] = v186;
      float32x2_t v189 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 8uLL).u64[0];
      float32x2_t v190 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 8uLL).u64[0];
      float32x2_t v191 = (float32x2_t)vextq_s8((int8x16_t)v356[0], (int8x16_t)v356[0], 4uLL).u64[0];
      float32x2_t v192 = (float32x2_t)vextq_s8((int8x16_t)v355, (int8x16_t)v355, 4uLL).u64[0];
      int8x8_t v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v355.f32, v191), v192, *(float32x2_t *)v356[0].f32);
      *(int8x8_t *)v194.f32 = vext_s8(v193, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v356[0].f32), *(float32x2_t *)v355.f32, v190), 4uLL);
      v194.i64[1] = v193.u32[0];
      float32x2_t v195 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
      float32x2_t v196 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 4uLL).u64[0];
      int8x8_t v197 = (int8x8_t)vmls_f32(vmul_f32(v196, *(float32x2_t *)v356[0].f32), v191, *(float32x2_t *)v354.f32);
      *(int8x8_t *)v198.f32 = vext_s8(v197, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v190), *(float32x2_t *)v356[0].f32, v195), 4uLL);
      v198.i64[1] = v197.u32[0];
      int8x8_t v199 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v354.f32, v192), v196, *(float32x2_t *)v355.f32);
      *(int8x8_t *)v200.f32 = vext_s8(v199, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v355.f32), *(float32x2_t *)v354.f32, v189), 4uLL);
      v200.i64[1] = v199.u32[0];
      float32x4_t v201 = vmulq_f32(v194, v185);
      v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
      float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
      float32x4_t v203 = vmulq_f32(v198, v185);
      v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
      float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
      float32x4_t v205 = vmulq_f32(v200, v185);
      v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
      float32x2_t v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v204), (int8x8_t)vcgez_f32(v202)), (int8x8_t)vcgez_f32(v206)), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
      {
        float32x4_t v207 = vnegq_f32(v354);
        v207.i32[3] = 0;
        float32x4_t v208 = vnegq_f32(v355);
        v208.i32[3] = 0;
        float32x4_t v209 = vmulq_f32(v207, v183);
        v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
        float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
        float32x4_t v211 = vmulq_f32(v183, v208);
        v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
        float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vclez_f32(v212)), (int8x8_t)vclez_f32(v206)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
        {
          float32x2_t v237 = vsub_f32(v210, v212);
          float32x2_t v238 = vrecpe_f32(v237);
          int v239 = 4;
          do
          {
            float32x2_t v238 = vmul_f32(v238, vrecps_f32(v237, v238));
            --v239;
          }
          while (v239);
          uint64_t v224 = 0;
          float32x4_t v50 = vmlaq_n_f32(v354, v183, vmul_f32(v210, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          unsigned int v240 = 2;
          uint64_t v223 = 1;
        }
        else
        {
          float32x4_t v213 = vnegq_f32(v356[0]);
          v213.i32[3] = 0;
          float32x4_t v214 = vmulq_f32(v208, v184);
          v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
          float32x2_t v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
          float32x4_t v216 = vmulq_f32(v183, v213);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          float32x2_t v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          float32x4_t v218 = vmulq_f32(v184, v213);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v215, v212), (int8x8_t)vcge_f32(v217, v219)), (int8x8_t)vclez_f32(v202)), 0), *(int8x8_t *)v354.f32).u32[0] != -1)
          {
            float32x4_t v220 = vmulq_f32(v207, v184);
            v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
            float32x2_t v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v221), (int8x8_t)vclez_f32(v219)), (int8x8_t)vclez_f32(v204)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
            {
              float32x2_t v246 = vsub_f32(v221, v219);
              float32x2_t v247 = vrecpe_f32(v246);
              int v248 = 4;
              float32x4_t v70 = v335;
              do
              {
                float32x2_t v247 = vmul_f32(v247, vrecps_f32(v246, v247));
                --v248;
              }
              while (v248);
              uint64_t v224 = 0;
              float32x4_t v50 = vmlaq_n_f32(v354, v184, vmul_f32(v221, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v246), (float32x2_t)0x3400000034000000), (int8x8_t)v247, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              uint64_t v223 = 2;
              unsigned int v240 = 2;
            }
            else
            {
              float32x4_t v70 = v335;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v221), (int8x8_t)vclez_f32(v210)), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
              {
                uint64_t v224 = 0;
                uint64_t v223 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v212, v215), (int8x8_t)vcgez_f32(v212)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                __int32 v222 = v50.i32[0];
                float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v329), 0), (int8x16_t)v355, (int8x16_t)v356[0]);
                uint64_t v223 = 1;
                if (v222 == -1) {
                  uint64_t v224 = 1;
                }
                else {
                  uint64_t v224 = 2;
                }
              }
              unsigned int v240 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v241 = vsub_f32(v215, v212);
          float32x2_t v242 = vadd_f32(v241, vsub_f32(v217, v219));
          float32x2_t v243 = vrecpe_f32(v242);
          int v244 = 4;
          do
          {
            float32x2_t v243 = vmul_f32(v243, vrecps_f32(v242, v243));
            --v244;
          }
          while (v244);
          int8x16_t v245 = (int8x16_t)vmlaq_n_f32(v355, vsubq_f32(v356[0], v355), vmul_f32(v241, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v242), (float32x2_t)0x3400000034000000), (int8x8_t)v243, 0)).f32[0]);
          v245.i64[1] = vextq_s8(v245, v245, 8uLL).u32[0];
          uint64_t v223 = 2;
          float32x4_t v50 = (float32x4_t)v245;
          uint64_t v224 = 1;
          unsigned int v240 = 2;
        }
        float32x4_t v70 = v335;
LABEL_100:
        float32x4_t v249 = *(&v354 + v224);
        float32x4_t v250 = *(&v354 + v223);
        float32x4_t v251 = *(&v351 + v224);
        float32x4_t v252 = *(&v351 + v223);
        float32x4_t v253 = *(&v348 + v224);
        float32x4_t v254 = *(&v348 + v223);
        int v255 = *(&v346 + v224);
        int v256 = *(&v346 + v223);
        int v257 = *(&v344 + v224);
        int v258 = *(&v344 + v223);
        float32x4_t v354 = v249;
        float32x4_t v355 = v250;
        float32x4_t v351 = v251;
        float32x4_t v352 = v252;
        float32x4_t v348 = v253;
        float32x4_t v349 = v254;
        int v346 = v255;
        int v347 = v256;
        int v344 = v257;
        int v345 = v258;
        unsigned int v341 = v240;
        goto LABEL_101;
      }
      int8x16_t v232 = (int8x16_t)vmulq_f32(v354, v185);
      float32x2_t v233 = (float32x2_t)vextq_s8(v232, v232, 8uLL).u64[0];
      float32x2_t v234 = vrecpe_f32(v188);
      int v235 = 4;
      float32x4_t v70 = v335;
      do
      {
        float32x2_t v234 = vmul_f32(v234, vrecps_f32(v188, v234));
        --v235;
      }
      while (v235);
      float32x2_t v236 = vpadd_f32(*(float32x2_t *)v232.i8, v233);
      float32x4_t v50 = vmulq_n_f32(v185, vmul_f32(v234, vpadd_f32(v236, v236)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      float32x4_t v70 = v335;
      if (v163 == 1)
      {
        float32x4_t v50 = v354;
        float32x4_t v175 = vsubq_f32(v355, v354);
        float32x4_t v176 = vmulq_f32(v175, v175);
        v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
        float32x2_t v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v177), 0), *(int8x8_t *)v354.f32).u32[0] == -1)
        {
          unsigned int v341 = 1;
          goto LABEL_101;
        }
        float32x4_t v178 = vnegq_f32(v354);
        v178.i32[3] = 0;
        float32x4_t v179 = vmulq_f32(v178, v175);
        v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
        float32x2_t v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        float32x2_t v181 = vrecpe_f32(v177);
        int v182 = 4;
        do
        {
          float32x2_t v181 = vmul_f32(v181, vrecps_f32(v177, v181));
          --v182;
        }
        while (v182);
        float32x4_t v50 = vmlaq_n_f32(v354, v175, vmax_f32(vmin_f32(vmul_f32(v180, v181), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v342 = v50;
    float32x4_t v259 = vmulq_f32(v50, v50);
    v259.i64[0] = vpaddq_f32(v259, v259).u64[0];
    float32x2_t v260 = vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v259.f32);
    float32x2_t v261 = vrsqrte_f32(v260);
    int v262 = 4;
    do
    {
      float32x2_t v261 = vmul_f32(v261, vrsqrts_f32(vmul_f32(v261, v261), v260));
      --v262;
    }
    while (v262);
    float32x2_t v68 = vmul_f32(v260, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v260), 0), (int8x8_t)_D9, (int8x8_t)v261));
    float32x2_t v263 = vrecpe_f32(v68);
    int v264 = 4;
    do
    {
      float32x2_t v263 = vmul_f32(v263, vrecps_f32(v68, v263));
      --v264;
    }
    while (v264);
    float32x4_t v265 = vmulq_n_f32(v50, v263.f32[0]);
    v265.i32[3] = 0;
    float32x4_t v336 = v265;
    *(int32x2_t *)v265.f32 = vcgt_f32(v174, v68);
    int32x4_t v156 = vdupq_lane_s32(*(int32x2_t *)v265.f32, 0);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v68, v24), *(int8x8_t *)v265.f32), 0);
  }
  int8x8_t v266 = (int8x8_t)vmovn_s32(vceqzq_s32(v156));
  uint64_t v267 = v341;
  if (vuzp1_s8(v266, v266).u32[0] != -1)
  {
    if (v13)
    {
      *a8 = v341;
      if (v267)
      {
        float32x4_t v268 = &v344;
        int8x8_t v269 = &v346;
        do
        {
          int v270 = *v269++;
          *v13++ = v270;
          int v271 = *v268++;
          *v12++ = v271;
          --v267;
        }
        while (v267);
      }
    }
    return 5;
  }
  float32x2_t v287 = v334;
  if (v13)
  {
    uint64_t v288 = v341 - 1;
    *a8 = v341 - 1;
    if (v267 != 1)
    {
      float32x4_t v289 = &v344;
      float32x4_t v290 = &v346;
      do
      {
        int v291 = *v290++;
        *v13++ = v291;
        int v292 = *v289++;
        *v12++ = v292;
        --v288;
      }
      while (v288);
      goto LABEL_130;
    }
LABEL_133:
    float32x4_t v293 = v351;
    float32x4_t v294 = v348;
  }
  else
  {
LABEL_130:
    float32x4_t v342 = v70;
    if (v267 == 3)
    {
      v340.i64[0] = 0;
      float32x2_t v343 = 0;
      float32x4_t v339 = v70;
      physx::Gu::barycentricCoordinates(&v342, &v354, &v355, v356, (float32x2_t *)&v340, &v343);
      float32x2_t v287 = v334;
      float32x4_t v311 = vmulq_n_f32(vsubq_f32(v352, v351), v340.f32[0]);
      v311.i32[3] = 0;
      float32x4_t v312 = vmulq_n_f32(vsubq_f32(v353, v351), v343.f32[0]);
      v312.i32[3] = 0;
      float32x4_t v313 = vaddq_f32(v311, v312);
      float32x4_t v314 = vmulq_n_f32(vsubq_f32(v349, v348), v340.f32[0]);
      v314.i32[3] = 0;
      float32x4_t v293 = vaddq_f32(v351, v313);
      float32x4_t v315 = vmulq_n_f32(vsubq_f32(v350, v348), v343.f32[0]);
      float32x4_t v70 = v339;
      v315.i32[3] = 0;
      float32x4_t v294 = vaddq_f32(v348, vaddq_f32(v314, v315));
    }
    else if (v267 == 2)
    {
      float32x4_t v316 = vsubq_f32(v354, v70);
      float32x4_t v317 = vsubq_f32(vsubq_f32(v355, v70), v316);
      float32x4_t v318 = vmulq_f32(v317, v317);
      v318.i64[0] = vpaddq_f32(v318, v318).u64[0];
      float32x2_t v319 = vpadd_f32(*(float32x2_t *)v318.f32, *(float32x2_t *)v318.f32);
      float32x2_t v320 = vrecpe_f32(v319);
      int v321 = 4;
      do
      {
        float32x2_t v320 = vmul_f32(v320, vrecps_f32(v319, v320));
        --v321;
      }
      while (v321);
      float32x4_t v322 = vnegq_f32(v316);
      v322.i32[3] = 0;
      float32x4_t v323 = vmulq_f32(v322, v317);
      v323.i64[0] = vpaddq_f32(v323, v323).u64[0];
      v322.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v319), (int8x8_t)v320, 0), vpadd_f32(*(float32x2_t *)v323.f32, *(float32x2_t *)v323.f32)).u32[0];
      float32x4_t v293 = vmlaq_n_f32(v351, vsubq_f32(v352, v351), v322.f32[0]);
      v293.i64[1] = vextq_s8((int8x16_t)v293, (int8x16_t)v293, 8uLL).u32[0];
      float32x4_t v294 = vmlaq_n_f32(v348, vsubq_f32(v349, v348), v322.f32[0]);
      v294.i64[1] = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v293 = 0uLL;
      float32x4_t v294 = 0uLL;
      if (v267 == 1) {
        goto LABEL_133;
      }
    }
  }
  float32x2_t v324 = vrecpe_f32(i);
  int v325 = 4;
  do
  {
    float32x2_t v324 = vmul_f32(v324, vrecps_f32(i, v324));
    --v325;
  }
  while (v325);
  float32x4_t v326 = vmulq_n_f32(v70, v324.f32[0]);
  v326.i32[3] = 0;
  *(float32x4_t *)(a12 + 32) = v326;
  *(float32x4_t *)(a12 + 48) = v336;
  if (a5)
  {
    *(float32x4_t *)a12 = v293;
    *(float32x4_t *)(a12 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v294;
    *(float32x2_t *)(a12 + 64) = i;
  }
  else
  {
    int8x16_t v327 = (int8x16_t)vmlsq_lane_f32(v293, v326, v330, 0);
    v327.i64[1] = vextq_s8(v327, v327, 8uLL).u32[0];
    int8x16_t v328 = (int8x16_t)vmlaq_n_f32(v294, v326, v331);
    v328.i64[1] = vextq_s8(v328, v328, 8uLL).u32[0];
    *(int8x16_t *)a12 = v327;
    *(int8x16_t *)(a12 + (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)this - 16) = v328;
    *(float32x2_t *)(a12 + 64) = vsub_f32(i, v287);
    if (vcge_f32(v287, i).u32[0]) {
      return 2;
    }
  }
  return 4;
}